{"context": "\t\t\tbreak;\n\t\tcase jpiTime:\n\t\t\t\tjspGetArg(v, &elem);\n\t\t\t}\n\t\t\tappendStringInfoChar(buf, ')');", "partial_line": "case", "completion": "case jpiOr: <|endoftext|>"}
{"context": "\t\t}\n\t\t\t}\n\t\t\t\ts++;\n\t\t\t{\n\t\t\t\tflag[1] = '\\0';", "partial_line": "if ((!suffixes) && (!", "completion": "if ((!suffixes) && (!prefixes)) <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"catalog/pg_aggregate.h\"\n\tbool\t\trescan_needed;\n\tOid\t\t\tsortColType;\n\tint16\t\ttypLen;", "partial_line": "char\t\tt", "completion": "char\t\ttypAlign; <|endoftext|>"}
{"context": "\t\tshared->bank_cur_lru_count[bankno] = ++new_lru_count;\n}\n\t\tint\t\t\tbankno = pageno % ctl->nbanks;\n\t\tfor (int slotno = bankstart; slotno < bankend; slotno++)\n\t\t\tthis_delta = cur_count - shared->page_lru_count[slotno];", "partial_line": "(this_delt", "completion": "(this_delta == best_valid_delta && <|endoftext|>"}
{"context": "\tint\t\t\tnprinted;\n\t{\n\t\tif (unlikely(nprinted < 0))\n\t\treturn true;\t\t\t\n}", "partial_line": "str->", "completion": "str->data[str->len] = '\\0'; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  SLAB_DEFAULT_BLOCK_SIZE,\n\t{\n\t}\n\tqsort(keys, num_keys, sizeof(uint64), key_cmp);\n\tfor (uint64 i = 0; i < num_keys - 1; i++)", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tdestroyPQExpBuffer(query);\n{\n\tval = PQparameterStatus(AH->connection, \"is_superuser\");\n\tif (val && strcmp(val, \"on\") == 0)\n\tdestroyPQExpBuffer(query);", "partial_line": "SubscriptionI", "completion": "SubscriptionInfo *subinfo; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t \" you will have to use the last backup for recovery.\")));\n\t\t\tbreak;\n\t\t\t\t\t\t\tstr_time(ControlFile->checkPointCopy.time)),\n#ifdef XLOG_REPLAY_DELAY\n\tif (!IsBootstrapProcessingMode())", "partial_line": "RemoveTempX", "completion": "RemoveTempXlogFiles(); <|endoftext|>"}
{"context": "    procnames_start_line = 1;\t\n    comment_delimiter_on_blankline = 1;\t\n    ps.leave_comma = 1;\t\t\n\t    break;\n\t\tin_name = argv[i];\t", "partial_line": "input = fop", "completion": "input = fopen(in_name, \"r\"); <|endoftext|>"}
{"context": "\t\tcase AF_INET6:\n\tret = pg_getnameinfo_all(&beentry->st_clientaddr.addr,\n\t\t\tresult++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\nPG_STAT_GET_DBENTRY_INT64(conflict_snapshot)", "partial_line": "PG_STAT_GET_DBENTRY_", "completion": "PG_STAT_GET_DBENTRY_INT64(tuples_fetched) <|endoftext|>"}
{"context": "\tif (RELKIND_HAS_STORAGE(relform->relkind))\n\t\t\trlocator.spcOid = relform->reltablespace;\n\t\tcase RELPERSISTENCE_UNLOGGED:\n\t\tcase RELPERSISTENCE_PERMANENT:\n\t\tcase RELPERSISTENCE_TEMP:", "partial_line": "if (isTempOrTempToastNamespace(r", "completion": "if (isTempOrTempToastNamespace(relform->relnamespace)) <|endoftext|>"}
{"context": "\t\tListCell   *l;\n\t\t\tNode\t   *action = (Node *) lfirst(l);\n\t\t\tParseState *sub_pstate = make_parsestate(NULL);\n\t\t\tsub_pstate->p_sourcetext = queryString;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  false, false);", "partial_line": "(errcode(ERRCODE_", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "\t\tcostarr[path_index++] = subpath->total_cost;\n\t\tif (path_index++ == numpaths)\n\t\t}\n\tmax_index = 0;\n\t}", "partial_line": "ListCell", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\t{\n\tif (U_FAILURE(status))\n\t{\n\treturn langtag;\nicu_validate_locale(const char *loc_str)", "partial_line": "ereport", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\tif ((beentry->st_state == STATE_RUNNING ||\n\t\tint\t\t\tusecs;\n\tif (state == STATE_RUNNING)\npgstat_report_query_id(uint64 query_id, bool force)\n\tvolatile PgBackendStatus *beentry = MyBEEntry;", "partial_line": "if (!bee", "completion": "if (!beentry || !pgstat_track_activities) <|endoftext|>"}
{"context": "\tinitStringInfo(&buf);\n\t\t\t&& isxdigit((unsigned char) *(p + 5))\n\t\tint16\t\telmlen;\n\t\tDatum\t   *elem_values;\n\t\tdeconstruct_array(array, elmtype,", "partial_line": "elmlen, elmbyval", "completion": "elmlen, elmbyval, elmalign, <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\t\tlc_time = pg_strdup(optarg);\n\t\t\t\tbreak;\n\t\t\t\tbreak;", "partial_line": "extra_o", "completion": "extra_options, <|endoftext|>"}
{"context": "\t\t\t*err_msg = \"list of RADIUS servers cannot be empty\";\n\t\t\t\t\t errcontext(\"line %d of configuration file \\\"%s\\\"\",\n\t\t\t\t\t(errcode(ERRCODE_CONFIG_FILE_ERROR),\n\t\t}\n\t\t\t\t\t(errcode(ERRCODE_CONFIG_FILE_ERROR),", "partial_line": "errcontext(\"lin", "completion": "errcontext(\"line %d of configuration file \\\"%s\\\"\", <|endoftext|>"}
{"context": "static void ignore_slash_whole_line(PsqlScanState scan_state);\n\t\t\t\t\t\t\t   PQExpBuffer query_buf);\nstatic bool do_edit(const char *filename_arg, PQExpBuffer query_buf,\n\t\t\t\tPQExpBuffer query_buf,\n\t\t\t\tPQExpBuffer previous_buf)", "partial_line": "char", "completion": "char\t   *arg; <|endoftext|>"}
{"context": "\tif (conn->asyncStatus != PGASYNC_IDLE)\n\t\treturn PQTRANS_ACTIVE;\n\tconst pgParameterStatus *pstatus;\n\tfor (pstatus = conn->pstatus; pstatus != NULL; pstatus = pstatus->next)\nint", "partial_line": "PQprotocolVersion(const P", "completion": "PQprotocolVersion(const PGconn *conn) <|endoftext|>"}
{"context": "\t\t\t\tcase T_CoalesceExpr:\t\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tcase OR_EXPR:\n\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn true;\t", "partial_line": "(context->indentLevel - PRETTYI", "completion": "(context->indentLevel - PRETTYINDENT_LIMIT) / <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t  PointerGetDatum(&extra_data),\n\t\t\tcounts->partialEntries += 100;\n\t\tcounts->searchEntries++;\n}", "partial_line": "OpExpr", "completion": "OpExpr *clause, <|endoftext|>"}
{"context": "\t\tclose(actx->timerfd);\n\tfree(actx);\n\tconn->altsock = PGINVALID_SOCKET;\n#define actx_error_str(ACTX, S) \\\n\t\tstruct async_ctx *_actx = (ACTX); \\", "partial_line": "CURLMcode\t_setopterr = curl_multi_setopt(_actx", "completion": "CURLMcode\t_setopterr = curl_multi_setopt(_actx->curlm, OPT, VAL); \\ <|endoftext|>"}
{"context": "\t\tif (var->varlevelsup >= list_length(context->rtables))\n\t\t}\n\telse if (IsA(node, Const))\n\t\t{\n\t\t\t{", "partial_line": "Objec", "completion": "ObjectIdGetDatum(objoid))) <|endoftext|>"}
{"context": "\ttypentry->flags |= TCFLAGS_CHECKED_ELEM_PROPERTIES;\nrecord_fields_have_equality(TypeCacheEntry *typentry)\n{\n\tif (!(typentry->flags & TCFLAGS_CHECKED_FIELD_PROPERTIES))\n\treturn (typentry->flags & TCFLAGS_HAVE_FIELD_HASHING) != 0;", "partial_line": "st", "completion": "static bool <|endoftext|>"}
{"context": "\t\t\t Oid reloid,\n\tint\t\t\ti;\n\tAssert(nbuckets > 0 && (nbuckets & -nbuckets) == nbuckets);\n\t\ton_proc_exit(CatCachePrintStats, 0);\n\tcp->cc_relisshared = false; ", "partial_line": "cp->cc", "completion": "cp->cc_ntup = 0; <|endoftext|>"}
{"context": "\t\tpagefrz->freeze_required = true;\n\tneed_replace = false;\n\t\tAssert(!TransactionIdPrecedes(xid, cutoffs->relfrozenxid));\n\t\t\tFreezePageRelfrozenXid = xid;\n\t\tneed_replace = MultiXactIdPrecedes(multi, cutoffs->MultiXactCutoff);", "partial_line": "if (MultiXactIdPrecedes(multi,", "completion": "if (MultiXactIdPrecedes(multi, pagefrz->FreezePageRelminMxid)) <|endoftext|>"}
{"context": "\treturn typ->typbyval;\n}\n{\n\ttyptup = (Form_pg_type) GETSTRUCT(typ);\n\treturn result;", "partial_line": "type = (Form_pg_type)", "completion": "type = (Form_pg_type) GETSTRUCT(typeTuple); <|endoftext|>"}
{"context": "\tAssert(!(estate->es_top_eflags & EXEC_FLAG_EXPLAIN_ONLY));\n\toldcontext = MemoryContextSwitchTo(estate->es_query_cxt);\n\t\t(*ExecutorEnd_hook) (queryDesc);\n\tMemoryContext oldcontext;\n\tAssert(queryDesc != NULL);", "partial_line": "Assert(estate->es_finished || estat", "completion": "Assert(estate->es_finished || estate->es_aborted || <|endoftext|>"}
{"context": "\tPgStatShared_IO *stat_shmem = (PgStatShared_IO *) stats;\n\tfor (int i = 0; i < BACKEND_NUM_TYPES; i++)\n\t{\n\t\tLWLockRelease(bktype_lock);\n\t\tPgStat_BktypeIO *bktype_snap = &pgStatLocal.snapshot.io.stats[i];", "partial_line": "LWLockA", "completion": "LWLockAcquire(bktype_lock, LW_SHARED); <|endoftext|>"}
{"context": "\t\tint\t\t\tchunk = Min(remaining, DEFAULT_IO_BUFFER_SIZE);\n\t\t\treturn false;\n\t\t}\n\treturn true;\nLZ4Stream_getc(CompressFileHandle *CFH)", "partial_line": "int", "completion": "int\t\t\tret; <|endoftext|>"}
{"context": "#endif\n#include \"reconstruct.h\"\n\tchar\t   *target_path;\n\tstruct cb_cleanup_dir *next;\n{", "partial_line": "bo", "completion": "bool\t\tdebug; <|endoftext|>"}
{"context": "                z->c++;\n            }\n        z->c = c3;\n    z->I[0] = z->l;\n            z->c = c2;", "partial_line": "z->c +", "completion": "z->c += ret; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\tcase TBLOCK_STARTED:\n\t\tcase TBLOCK_SUBRESTART:\n\t{", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "#line 1 \"define.pgc\"\n\t}\t\t\tsqlerrm;\n\tlong\t\tsqlerrd[6];\n#ifdef __cplusplus", "partial_line": "#line 2 \"defin", "completion": "#line 2 \"define.pgc\" <|endoftext|>"}
{"context": "static void\ncheckTargetlistEntrySQL92(ParseState *pstate, TargetEntry *tle,\n\tswitch (exprKind)\n\t\t\t\t\t\t\t\tParseExprKindName(exprKind)),\n\t\t\t\t\t\t parser_errposition(pstate,", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tErrorData  *edata = &errordata[errordata_stack_depth];\n\tMemoryContextSwitchTo(oldcontext);\n{\n\tEVALUATE_MESSAGE(edata->domain, detail, false, false);\n\tEVALUATE_MESSAGE(edata->domain, detail_log, false, true);", "partial_line": "unsign", "completion": "unsigned long n,...) <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"could not write file \\\"%s\\\": %m\",\n\t\t\t\t\t\t\tLOG_METAINFO_DATAFILE_TMP)));\n\t\t}\nCheckLogrotateSignal(void)\n\tstruct stat stat_buf;", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "{\n\tforeach(lc, rte->values_lists)\n\t\tif (default_only_cols == NULL)\n\t\t\t}\n\t\t\tforeach(lc2, sublist)", "partial_line": "Node\t   *col = (Node *) l", "completion": "Node\t   *col = (Node *) lfirst(lc2); <|endoftext|>"}
{"context": "static int\n\t\t\t\t\t\t\t\t\t\t  pset.bind_nparams,\n\t\t\tbreak;\n\t\t\t\tend_pipeline = true;\n\t\t\t\tpset.piped_syncs++;", "partial_line": "pset.requested_results = pset.available_result", "completion": "pset.requested_results = pset.available_results + pset.piped_syncs; <|endoftext|>"}
{"context": "\tint\t\t\tweight;\n\tNumericDigit *digits;\n\t{\n\twhile (*cp)\n\t\t{", "partial_line": "goto invalid", "completion": "goto invalid_syntax; <|endoftext|>"}
{"context": "\tint\t\t\trc;\n\tint\t\t\tchecksumlen;\n\t}\n\tif (rc < 0)\n\t\t\t\t\t\t\trelpath);", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "}\nstatic void\n\t\t\t\t\t\t \"Inlining\", jit_flags & PGJIT_INLINE ? \"true\" : \"false\",\n\t\tExplainPropertyBool(\"Optimization\", jit_flags & PGJIT_OPT3, es);\n\t\t\tExplainCloseGroup(\"Generation\", \"Generation\", true, es);", "partial_line": "const char *f", "completion": "const char *format; <|endoftext|>"}
{"context": "\tDatum\t   *elems = matchctx->elems;\n\tint\t\t\tlbs[1];\n\t\tif (indices)\n\t\t\t\t\t so, so < 0 ? eo : eo - 1);\n\t\telse if (so < 0 || eo < 0)", "partial_line": "eo - s", "completion": "eo - so); <|endoftext|>"}
{"context": "\tva_end(ap);\n\tmanifest_data *manifest = context->private_data;\n\t\t\t\t\t\t const char *pathname, uint64 size,\n\t\t\t\t\t\t pg_checksum_type checksum_type,\n{", "partial_line": "m->size =", "completion": "m->size = size; <|endoftext|>"}
{"context": "\tDefElem    *dinherit = NULL;\n\tDefElem    *dadminmembers = NULL;\n\t\t{\n\t\t{\n\t\t\t\t\t(errmsg(\"SYSID can no longer be specified\")));", "partial_line": "dcreatedb =", "completion": "dcreatedb = defel; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\t\tif (!missing_ok)\n\t\t\t\t\t\t\t object->objectId);\n\t\t\t\tif (subname)\n\t\t\t\tbreak;", "partial_line": "ObjectIdGetDatum(object->", "completion": "ObjectIdGetDatum(object->objectId)); <|endoftext|>"}
{"context": "\ttp = SearchSysCache2(ATTNUM,\n\t\telog(ERROR, \"cache lookup failed for attribute %d of relation %u\",\n\tdatum = SysCacheGetAttr(ATTNUM,\n\t\t\t\t\t\t\ttp,\n\t\toptions = NIL;", "partial_line": "if (unlikely((res", "completion": "if (unlikely((restrict_nonsystem_relation_kind & RESTRICT_RELKIND_FOREIGN_TABLE) != 0)) <|endoftext|>"}
{"context": "\terrstring = X509_verify_cert_error_string(errcode);\n\t\t\t\t\t depth, errstring);\n\t\t\tereport(DEBUG4,\n\t\t\tbreak;\ninitialize_dh(SSL_CTX *context, bool isServerStart)", "partial_line": "errmsg(\"DH: c", "completion": "errmsg(\"DH: could not load DH parameters\"))); <|endoftext|>"}
{"context": "static Oid\tfindRangeSubtypeDiffFunction(List *procname, Oid subtype);\nstatic void validateDomainCheckConstraint(Oid domainoid, const char *ccbin);\nstatic Node *replace_domain_constraint_value(ParseState *pstate,\nObjectAddress\n\tDefElem    *internalLengthEl = NULL;", "partial_line": "DefElem    *elemTy", "completion": "DefElem    *elemTypeEl = NULL; <|endoftext|>"}
{"context": "\t{\nstatic void\n\tMemoryContext context;\n\tforeach(lc, fn_oid_list)\n\t\t\tCommandCounterIncrement();", "partial_line": "InvalidOid, (Node", "completion": "InvalidOid, (Node *) trigdata, NULL); <|endoftext|>"}
{"context": "\tBpChar\t   *arg1 = PG_GETARG_BPCHAR_PP(0);\n\tif (mylocale->deterministic)\n\t}\n\telse\n\tOid\t\t\tcollid = PG_GET_COLLATION();", "partial_line": "keydata =", "completion": "keydata = VARDATA_ANY(key); <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   clause,\n\tPredIterInfoData pred_info;\n\tpclass = predicate_classify(predicate, &pred_info);\n\t\t\t\t\tresult = false;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tAlterPublicationSchemas(stmt, tup, schemaidlist);\nvoid\n\tRelation\trel;\nRemovePublicationById(Oid pubid)\n\tif (!HeapTupleIsValid(tup))", "partial_line": "pubform =", "completion": "pubform = (Form_pg_publication) GETSTRUCT(tup); <|endoftext|>"}
{"context": "\t\t\t\t\t\tint\t\t\ti;\n\t\t\t\t\t\tspgAddPendingTID(bds,\n\t\t\t\t\t\t\t\t\t\t &((SpGistDeadTuple) innerTuple)->pointer);\n\t\t\t\t\telse\nspgvacuumscan(spgBulkDeleteState *bds)", "partial_line": "initSpGistState(&bds->spgst", "completion": "initSpGistState(&bds->spgstate, index); <|endoftext|>"}
{"context": "static const symbol s_2_114[4] = { 't', 'i', 'j', 'a' };\nstatic const symbol s_2_121[5] = { 'e', 'v', 'i', 'j', 'a' };\nstatic const symbol s_2_129[4] = { 's', 'n', 'j', 'a' };\nstatic const symbol s_2_154[3] = { 'e', 'l', 'a' };\nstatic const symbol s_2_160[8] = { 'i', 's', 't', 'a', 'n', 'i', 'l', 'a' };", "partial_line": "static const symbol s_2_164[5]", "completion": "static const symbol s_2_164[5] = { 'o', 'z', 'i', 'l', 'a' }; <|endoftext|>"}
{"context": "\t\t\trefdRel = table_open(fk->confrelid, ShareRowExclusiveLock);\n\t\t\t\t\t\t\t\t   conkey,\n\t\t\t\t\t\t\t\t   conffeqop,\n\t}\n\tlist_free_deep(fks);", "partial_line": "foreach(cell,", "completion": "foreach(cell, indexes) <|endoftext|>"}
{"context": "\t{\n\t{\n\t\tif (!BufferIsValid(scan->rs_cbuf))\n\t\tLockBuffer(scan->rs_cbuf, BUFFER_LOCK_SHARE);\n\t\t\tbool\t\tvisible;", "partial_line": "sca", "completion": "scan->rs_cbuf); <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\n\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\n}\n{\n\tint16\t\targ1 = PG_GETARG_INT16(0);", "partial_line": "PG_RETUR", "completion": "PG_RETURN_INT64(arg1 & arg2); <|endoftext|>"}
{"context": "static bool PinBuffer(BufferDesc *buf, BufferAccessStrategy strategy);\n\t\t\t\t\t\t\t\t\t  ForkNumber forkNum,\n\t\t\t\t\t\t\t\t\t   BlockNumber nForkBlock,\nstatic inline int ckpt_buforder_comparator(const CkptSortItem *a, const CkptSortItem *b);\n{", "partial_line": "PrefetchBu", "completion": "PrefetchBufferResult result = {InvalidBuffer, false}; <|endoftext|>"}
{"context": "\tnulls[Anum_pg_statistic_staattnum - 1] = false;\n\t\tvalues[Anum_pg_statistic_stacoll1 + slotnum - 1] = InvalidOid;\n\t}\n}\n\tchar\t   *attname;", "partial_line": "stats_check_required_arg(fcinfo, clear", "completion": "stats_check_required_arg(fcinfo, cleararginfo, C_INHERITED_ARG); <|endoftext|>"}
{"context": "\t\tentry->dobj = NULL;\nDumpId\n{\n\tif (dumpId <= 0 || dumpId >= allocedDumpIds)\n\t\treturn NULL;", "partial_line": "for (i", "completion": "for (i = 1; i < allocedDumpIds; i++) <|endoftext|>"}
{"context": "\tbool\t\tresult = true;\n\tif (RecoveryInProgress())\n\t\tereport(ERROR,\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),", "partial_line": "attnum", "completion": "attnum = 0; <|endoftext|>"}
{"context": "\t\tif (repeatable)\n\t}\n{\n\t\tint\t\t\tn;\n\t\t{", "partial_line": "if (sinstru", "completion": "if (sinstrument->sortMethod == SORT_TYPE_STILL_IN_PROGRESS) <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t  PgStat_StatTabEntry *tabentry,\n\t\t\t\tvacinsthresh,\n\t\t\t\tanlthresh;\n\tTransactionId xidForceLimit;", "partial_line": "? relopts->vacuum_sca", "completion": "? relopts->vacuum_scale_factor <|endoftext|>"}
{"context": "\t{\"finnish\", \"Finnish\"},\n\t{\"hungarian\", \"hu\"},\n\t{\"irish\", \"Irish\"},\n\t{\"lithuanian\", \"lt\"},\n\t{\"lithuanian\", \"Lithuanian\"},", "partial_line": "{\"serbian\",", "completion": "{\"serbian\", \"Serbian\"}, <|endoftext|>"}
{"context": "\t\tlinitial(saop->args) = fix_indexqual_operand(linitial(saop->args),\n\t\t\t\t\t\t\t\t\t\t\t\t\t indexcol);\n\tint\t\t\tpos;\n\t\t\tresult = (Var *) copyObject(node);\n\tfor (pos = 0; pos < index->ncolumns; pos++)", "partial_line": "elog(ERROR, \"index key does not match", "completion": "elog(ERROR, \"index key does not match expected index column\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\theaptup->t_len - SizeofHeapTupleHeader);\n\t\tXLogSetRecordFlags(XLOG_INCLUDE_ORIGIN);\n\t}\n\tHeapTupleHeaderSetCmin(tup->t_data, cid);\n\t\trelation->rd_rel->relkind != RELKIND_MATVIEW)", "partial_line": "size_t\t\ttup_sz = sizeof(ItemIdData", "completion": "size_t\t\ttup_sz = sizeof(ItemIdData) + MAXALIGN(heaptuples[i]->t_len); <|endoftext|>"}
{"context": "\tPG_RETURN_TEXT_P(string_to_text(res));\n}\n\tOid\t\t\ttrigid = PG_GETARG_OID(0);\n\tres = pg_get_triggerdef_worker(trigid, pretty);\n\tHeapTuple\tht_trig;", "partial_line": "Strin", "completion": "StringInfoData buf; <|endoftext|>"}
{"context": "\t\t{\n\t}\n\tappendStringInfoChar(result, ']');\n}\n\tint\t\t   *dim;", "partial_line": "cha", "completion": "char\t\ttypalign; <|endoftext|>"}
{"context": "\t\t\tsaveCtx = entry->dictCtx;\n\t\t{\n\t\t\tbool\t\tisnull;\n\t\t\topt = SysCacheGetAttr(TSDICTOID, tpdict,\n\tTSConfigCacheHash = hash_create(\"Tsearch configuration cache\", 16,", "partial_line": "&ctl, HASH_ELEM |", "completion": "&ctl, HASH_ELEM | HASH_BLOBS); <|endoftext|>"}
{"context": "\t\ttuple->xid = state->redirectXid;\n\treturn tuple;\n\t\t\t\t   Datum *datums, bool *isnulls, bool keyColumnIsNull)\n\tbool\t\thasNullsMask = SGLT_GET_HASNULLMASK(tup);\n\tchar\t   *tp;\t\t\t\t", "partial_line": "bits8", "completion": "bits8\t   *bp; <|endoftext|>"}
{"context": "static const symbol s_2_1456[4] = { 'a', 't', 'o', 'm' };\nstatic const symbol s_2_1468[4] = { 'e', 'v', 'o', 'm' };\nstatic const symbol s_2_1475[5] = { 'a', 0xC4, 0x87, 'o', 'm' };\nstatic const symbol s_2_1480[6] = { 'j', 'a', 0xC5, 0xA1, 'o', 'm' };\nstatic const symbol s_2_1483[6] = { 't', 'a', 0xC5, 0xA1, 'o', 'm' };", "partial_line": "static const symbol", "completion": "static const symbol s_2_1485[5] = { 'e', 0xC5, 0xA1, 'o', 'm' }; <|endoftext|>"}
{"context": "\t\tif (shmget_errno == EINVAL)\n\t\t\t\t\t\t   IPC_CREAT | IPC_EXCL | IPCProtection),\n\t\t\t\t errhint(\"This error usually means that PostgreSQL's request for a shared memory \"\n\t\t\t\t\t\t \"your kernel's SHMMIN parameter.\\n\"\n\t\t\t\t errhint(\"This error usually means that PostgreSQL's request for a shared \"", "partial_line": "\"memory segment exceeded your kernel'", "completion": "\"memory segment exceeded your kernel's SHMALL parameter.  You might need \" <|endoftext|>"}
{"context": "\t\tfor (i = 0; i < sizeof(b2c3) / (sizeof(unsigned short) * 2); i++)\n\t\t{\n\t\t\t\t*lc = LC_CNS11643_3;\n\t\t\t}\n\treturn cns | 0x8080;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\ttypcat != TYPECAT_DOMAIN &&\n\t\tcase TYPECAT_ARRAY:\n\t\t\t\t\t\t\t\t\t  ? DatumGetHeapTupleHeader(defaultval)\n\t\tJsonHashEntry *hashentry = hash_search(obj->val.json_hash, field,\n}", "partial_line": "populate_r", "completion": "populate_record(TupleDesc tupdesc, <|endoftext|>"}
{"context": "{\n\tstruct timeval elapse_t;\n\tif (r.ru_utime.tv_usec < Save_r.ru_utime.tv_usec)\n\t\tr.ru_utime.tv_usec += 1000000;\n\t{", "partial_line": "(long) (r.ru_stime.tv", "completion": "(long) (r.ru_stime.tv_usec - Save_r.ru_stime.tv_usec), <|endoftext|>"}
{"context": "\t\t\t\treturn false;\n\tif ((flags & CP_LABEL_TLIST) && path->pathtarget->sortgrouprefs)\n\t\t\tExpr\t   *expr = (Expr *) lfirst(lc);\n\t\t\ti++;\n\t\t}", "partial_line": "get_gating_quals(Pl", "completion": "get_gating_quals(PlannerInfo *root, List *quals) <|endoftext|>"}
{"context": "\tint\t\t\tindex_attoff;\n\topclass = (oidvector *) DatumGetPointer(indclassDatum);\n\t\tint\t\t\ttable_attno = indkey->values[index_attoff];\n\t\topfamily = get_opclass_family(opclass->values[index_attoff]);\n\tbool\t\trefetch = false;", "partial_line": "if (ItemPointerIndicatesMovedPa", "completion": "if (ItemPointerIndicatesMovedPartitions(&tmfd->ctid)) <|endoftext|>"}
{"context": "}\n{\n{\n\t\t\t\t\tlefthashfunc == righthashfunc)\n\t\t\t\t\t\tsaop->hashfuncid = lefthashfunc;", "partial_line": "exprColla", "completion": "exprCollation((Node *) (node)))) <|endoftext|>"}
{"context": "\tprintf(_(\"  -d, --createdb            role can create new databases\\n\"));\n\tprintf(_(\"  --role=ROLE               (same as --member-of, deprecated)\\n\"));\n\tprintf(_(\"  -I, --no-inherit          role does not inherit privileges\\n\"));\n\tprintf(_(\"  -L, --no-login            role cannot login\\n\"));\n\tprintf(_(\"  -s, --superuser           role will be superuser\\n\"));", "partial_line": "printf(_(\"  -V, --versio", "completion": "printf(_(\"  -V, --version             output version information, then exit\\n\")); <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#include <limits.h>", "partial_line": "#include \"fe_", "completion": "#include \"fe_utils/string_utils.h\" <|endoftext|>"}
{"context": "\t\t\t}\n\t\t}\n\t\t\t\t\t\t\t   0);\n\t\t\t\tOid\t\t\tattrcollation;\n\t\t\t\t\t\t\t\t   (AttrNumber) i,", "partial_line": "attr", "completion": "attrtype); <|endoftext|>"}
{"context": "#define Generation_CHUNK_FRACTION\t8\n\tGenerationBlock *block;\t\t\n\tif (minContextSize != 0)\n\t\t   (Size) ((Size) (maxBlockSize - Generation_BLOCKHDRSZ) / Generation_CHUNK_FRACTION))\n\t\tGenerationBlock *block = dlist_container(GenerationBlock, node, miter.cur);", "partial_line": "set->nex", "completion": "set->nextBlockSize = set->initBlockSize; <|endoftext|>"}
{"context": "\tPy_DECREF(result->status);\n\tif (status > 0 && tuptable == NULL)\n\t\tresult->nrows = PyLong_FromUnsignedLongLong(rows);\n\t\tcxt = AllocSetContextCreate(CurrentMemoryContext,\n\t\t\t{", "partial_line": "if (rows > (ui", "completion": "if (rows > (uint64) PY_SSIZE_T_MAX) <|endoftext|>"}
{"context": "\t},\n\t\t\tgettext_noop(\"Collects timing statistics for cost-based vacuum delay.\"),\n\t\t},\n\t\t{\"track_io_timing\", PGC_SUSET, STATS_CUMULATIVE,\n\t\t&track_io_timing,", "partial_line": "gettext_no", "completion": "gettext_noop(\"Starts the autovacuum subprocess.\"), <|endoftext|>"}
{"context": "\treturn true;\n\tif (hdr->xlp_magic != XLOG_PAGE_MAGIC)\n\t\tchar\t\tfname[MAXFNAMELEN];\n\t\t\t\t\t\t\t  \"invalid info bits %04X in WAL segment %s, LSN %X/%X, offset %u\",\n\t\t\t\t\t\t\t  fname,", "partial_line": "LSN_FOR", "completion": "LSN_FORMAT_ARGS(recptr), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   BufferGetBlockNumber(rbuffer));\n\t\telse\n\t\t\t\tXLogRegisterBuffer(0, lbuffer, REGBUF_FORCE_IMAGE | REGBUF_STANDARD);\n\t\t\t\tXLogRegisterBuffer(1, rbuffer, REGBUF_FORCE_IMAGE | REGBUF_STANDARD);\n\t\t\t{", "partial_line": "PageSetLSN(BufferGetP", "completion": "PageSetLSN(BufferGetPage(lbuffer), recptr); <|endoftext|>"}
{"context": "\tlanguageStruct = (Form_pg_language) GETSTRUCT(languageTuple);\n\t\t\t\t\t\t   CurrentMemoryContext, true);\n}\n\tif (infofunc == NULL)\n\t\t\tbreak;", "partial_line": "defa", "completion": "default: <|endoftext|>"}
{"context": "\t}\n\t\t\t\t errmsg(\"malformed range literal: \\\"%s\\\"\",\n\t\tereturn(escontext, false,\n\t\t\t\t\t\tstring),\n\t\t\t\t errdetail(\"Junk after right parenthesis or bracket.\")));", "partial_line": "range_parse_bound(const cha", "completion": "range_parse_bound(const char *string, const char *ptr, <|endoftext|>"}
{"context": "#line 44 \"array_of_struct.pgc\"\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\n#line 54 \"array_of_struct.pgc\"\n#line 54 \"array_of_struct.pgc\"\n#line 56 \"array_of_struct.pgc\"", "partial_line": "printf( \"phone - %d\\n", "completion": "printf( \"phone - %d\\n\", custs1[r].phone ); <|endoftext|>"}
{"context": "\t\tsp->typecnt = 1;\t\t\n\tcp += stdlen;\n\t\t struct pg_tm *const tmp)\n\tstruct pg_tm *result;\n\t\tpg_time_t\tnewt = t;", "partial_line": "newy", "completion": "newy -= years; <|endoftext|>"}
{"context": "#include \"backup/basebackup_sink.h\"\n\t\t\t\t\t\t pg_checksum_type manifest_checksum_type)\n\t\tif (pg_cryptohash_init(manifest->manifest_ctx) < 0)\n}", "partial_line": "const char *pat", "completion": "const char *pathname, size_t size, pg_time_t mtime, <|endoftext|>"}
{"context": "\t\t\t\t\t\t errmsg(\"conflicting or redundant options\")));\n\t\t\treserve_wal_given = true;\n\t\t{\n\t\t\t*two_phase = defGetBoolean(defel);\n\tbool\t\tnulls[4] = {0};", "partial_line": "&fa", "completion": "&failover); <|endoftext|>"}
{"context": "\telse\n\tListCell   *l;\n\tif (query->setOperations)\n\t{\n\t{", "partial_line": "-PRETTYI", "completion": "-PRETTYINDENT_STD, PRETTYINDENT_STD, 0); <|endoftext|>"}
{"context": "{ 8, s_3_11, -1, 1, 0},\nstatic const symbol s_4_2[4] = { 0xCF, 0x85, 0xCF, 0x88 };\n{ 4, s_4_3, -1, 1, 0},\n{ 10, s_5_1, -1, 1, 0},\nstatic const symbol s_6_10[14] = { 0xCF, 0x87, 0xCE, 0xB1, 0xCF, 0x81, 0xCF, 0x84, 0xCE, 0xBF, 0xCF, 0x80, 0xCE, 0xB1 };", "partial_line": "static const symbol s_6_19[12] = { 0xCE, 0xB5, 0xCF, 0", "completion": "static const symbol s_6_19[12] = { 0xCE, 0xB5, 0xCF, 0x83, 0xCF, 0x89, 0xCE, 0xBA, 0xCE, 0xBB, 0xCE, 0xB5 }; <|endoftext|>"}
{"context": "ExpandedRecordHeader *\n\t\t\t\t\t\t\t\t MemoryContext parentcontext)\n\tExpandedRecordHeader *erh;\n\tif (type_id != RECORDOID)\n\t\tTypeCacheEntry *typentry;", "partial_line": "tupdesc = type", "completion": "tupdesc = typentry->tupDesc; <|endoftext|>"}
{"context": "\telse if (TailMatchesCS(\"\\\\connect|\\\\c\"))\n\t\t\tCOMPLETE_WITH_QUERY(Query_for_list_of_databases);\n\t\tif (!recognized_connection_string(prev_wd))\n\telse if (TailMatchesCS(\"\\\\dAo*\", MatchAny) ||\n\t\t\t TailMatchesCS(\"\\\\dAp*\", MatchAny))", "partial_line": "else if (TailMatche", "completion": "else if (TailMatchesCS(\"\\\\dD*\")) <|endoftext|>"}
{"context": "\t\tmyWaitStatus = *((volatile ProcWaitStatus *) &MyProc->waitStatus);\n\t\t\tLOCKTAG\t\tlocktag_copy;\n\t\t\tLWLockRelease(ProcArrayLock);\n\t\t\t\t\tDescribeLockTag(&locktagbuf, &locktag_copy);\n\t\t\t\t\t\t\t\t\t GetLockmodeName(lockmethod_copy, lockmode),", "partial_line": "pi", "completion": "pid))); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tdouble\t\tfreq_false;\n\t\t\tif (DatumGetBool(sslot.values[0]))\n\t\t\t\t\tselec = freq_true;\n\t\t\t\tcase IS_FALSE:", "partial_line": "selec =", "completion": "selec = freq_null; <|endoftext|>"}
{"context": "wait_for_relation_state_change(Oid relid, char expected_state)\n\t\tXLogRecPtr\tstatelsn;\n\t\tCHECK_FOR_INTERRUPTS();\n\t\tInvalidateCatalogSnapshot();\n\t\t(void) WaitLatch(MyLatch,", "partial_line": "ResetLatch(M", "completion": "ResetLatch(MyLatch); <|endoftext|>"}
{"context": "Datum\n\tint16\t\targ = PG_GETARG_INT16(0);\nDatum\n\tPG_RETURN_INT16(arg);\n\tint16\t\targ2 = PG_GETARG_INT16(1);", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "{\n\tif (s->childXids != NULL)\n\ts->curTransactionContext = NULL;\nStartTransaction(void)\n\ts = &TopTransactionStateData;", "partial_line": "s->fullTr", "completion": "s->fullTransactionId = InvalidFullTransactionId; <|endoftext|>"}
{"context": "\tAssert(conn != NULL);\n\tappendPQExpBuffer(str, \"CREATE PUBLICATION %s FOR ALL TABLES\",\n\tif (!dry_run)\n\t{\ndrop_publication(PGconn *conn, const char *pubname, const char *dbname,", "partial_line": "Assert(conn !=", "completion": "Assert(conn != NULL); <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\tappendStringInfoChar(buf, ' ');\n\t\t\t\t\tget_rule_expr(w, context, false);\n\t\t\t\t\tappendStringInfoChar(buf, ' ');\n\t\t\t\tArrayExpr  *arrayexpr = (ArrayExpr *) node;", "partial_line": "Assert(lis", "completion": "Assert(list_length(rowexpr->args) <= tupdesc->natts); <|endoftext|>"}
{"context": "\tVar\t\t   *var;\n\tif (var->varno == OUTER_VAR && dpns->outer_tlist)\n\t}\n\t{\n\t\tresolve_special_varno((Node *) tle->expr, context,", "partial_line": "Att", "completion": "AttrNumber\tattnum; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\"pg_catalog.pg_type_is_visible(t.oid)\",\n\tmyopt.title = _(\"List of domains\");\n}\n{\n\t\tappendPQExpBuffer(&buf,", "partial_line": "N", "completion": "NULL, 3)) <|endoftext|>"}
{"context": "\tPG_RETURN_POINT_P(result);\n}\n\tfloat8\t\tdist,\n\tstatlseg_construct(&lseg, &box->low, &point);\n\tdist = lseg_closept_point(result, &lseg, pt);", "partial_line": "d = lseg_closept_point", "completion": "d = lseg_closept_point(&closept, &lseg, pt); <|endoftext|>"}
{"context": "\tremoteslot = ExecInitExtraTupleSlot(estate,\n\tMemoryContextSwitchTo(oldctx);\n\tapply_error_callback_arg.rel = NULL;\n\tif (!run_as_owner)\n}", "partial_line": "ConflictTupleIn", "completion": "ConflictTupleInfo conflicttuple = {0}; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tusename = \"public\";\n\t\t\t\t\t\t\t\t srv->servername);\n\t\t\t}", "partial_line": "cha", "completion": "char\t   *nspname; <|endoftext|>"}
{"context": "\t\t\t\tTcl_ListObjAppendElement(NULL, tcl_cmd,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!TRIGGER_FIRED_BEFORE(trigdata->tg_event)));\n\t\t\t}\n\t\t\telse if (TRIGGER_FIRED_BY_DELETE(trigdata->tg_event))\n\t\t\t{", "partial_line": "Tcl_ListObjAppe", "completion": "Tcl_ListObjAppendElement(NULL, tcl_cmd, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t(errmsg(\"GSSENCRequest rejected\")));\n\t\t}\n\t\t{\n\t\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),", "partial_line": "PG_PROTOCOL_", "completion": "PG_PROTOCOL_MINOR(PG_PROTOCOL_LATEST)))); <|endoftext|>"}
{"context": "static const symbol s_10[] = { 0xCE, 0xBB };\nstatic const symbol s_11[] = { 0xCE, 0xBC };\nstatic const symbol s_24[] = { 0xCF, 0x86, 0xCE, 0xB1 };\nstatic const symbol s_30[] = { 0xCF, 0x80, 0xCE, 0xB5, 0xCF, 0x81 };\nstatic const symbol s_40[] = { 0xCE, 0xB9 };", "partial_line": "static c", "completion": "static const symbol s_46[] = { 0xCE, 0xB9 }; <|endoftext|>"}
{"context": "\t\t\tabbreviate = false;\n\t{\n\t\tsss = palloc(sizeof(VarStringSortSupport));\n\t\tsss->buf2 = palloc(TEXTBUFLEN);\n\t\tsss->last_returned = 0;", "partial_line": "initHyperLogLog(&sss->ful", "completion": "initHyperLogLog(&sss->full_card, 10); <|endoftext|>"}
{"context": "\t\t\tpg_log_info(\"removing contents of WAL directory \\\"%s\\\"\", xlog_dir);\n\t\t}\n\t\tif (made_new_xlogdir || found_existing_xlogdir)\n\t}\n\t\tpg_log_info(\"changes to tablespace directories will not be undone\");", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t\t\tdefault:\n\t\t\tv->now--;\n\t\t\td = -1;\n\t\tif (d < 0)\n\t}", "partial_line": "ERR(REG_", "completion": "ERR(REG_EESCAPE); <|endoftext|>"}
{"context": "\t\t\t\tcase IS_FALSE:\n\t\t\t\t\tselec = freq_null;\n\t\t\t\t\tselec = 1.0 - freq_null;\n\t\t\t\tcase IS_NOT_FALSE:\n\t\t\t\t\t\t (int) booltesttype);", "partial_line": "sele", "completion": "selec = 0.0; <|endoftext|>"}
{"context": "\t\t\telse if (client_encoding &&\n\t\t\t\t\t strcmp(ci->keyword, \"client_encoding\") == 0)\n\t\tkeywords[paramnum] = NULL;\n\t\tif (!password && PQconnectionNeedsPassword(n_conn) && pset.getPassword != TRI_NO)\n\t\t\tbool\t\tcanceled = false;", "partial_line": "pg_log", "completion": "pg_log_error(\"out of memory\"); <|endoftext|>"}
{"context": "\t0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\n\t0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n};", "partial_line": "0x00, 0x00, 0x00, 0x00, 0x00", "completion": "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, <|endoftext|>"}
{"context": "\t\tcluster->controldata.default_char_signedness = false;\n\t}\n\t\tif (!got_mxoff)\n\t\tif (!got_ident)\n\t\t\tpg_log(PG_REPORT, \"  maximum TOAST chunk size\");", "partial_line": "pg_fatal(\"old and new pg_contro", "completion": "pg_fatal(\"old and new pg_controldata alignments are invalid or do not match.\\n\" <|endoftext|>"}
{"context": "\t\t{\n\t\t\tgoto retry;\n\tpq_putmessage_noblock('d', output_message.data, output_message.len);\n\t\tWalSnd\t   *walsnd = MyWalSnd;\n\t\tSpinLockAcquire(&walsnd->mutex);", "partial_line": "SpinLockRelease(&walsn", "completion": "SpinLockRelease(&walsnd->mutex); <|endoftext|>"}
{"context": "\t\tif (!rte->inh)\n\t\t\t\tbms_make_singleton(parse->resultRelation);\n\tnewWithCheckOptions = NIL;\n\t}\n\t\t\t\t\t\t\t  EXPRKIND_TARGET);", "partial_line": "EXP", "completion": "EXPRKIND_LIMIT); <|endoftext|>"}
{"context": "#include \"common/parse_manifest.h\"\n#include \"fe_utils/simple_list.h\"\n#define READ_CHUNK_SIZE\t\t\t\t(128 * 1024)", "partial_line": "Oid\t\t\ttb", "completion": "Oid\t\t\ttblspc_oid; <|endoftext|>"}
{"context": "}\n\t\t}\n\t\t}\n\treturn cnt;\npg_euccn_mblen(const unsigned char *s)", "partial_line": "if (IS_HIGH", "completion": "if (IS_HIGHBIT_SET(*s)) <|endoftext|>"}
{"context": "void\n\tioh->op_data.read.iov_length = iovcnt;\npgaio_io_start_writev(PgAioHandle *ioh,", "partial_line": "int fd, int i", "completion": "int fd, int iovcnt, uint64 offset) <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\t\tif (ItemPointerIsLossyPage(&key->curItem) ||\n\t\t\t\t{\n\t\t}\n\tItemPointerSetInvalid(&pos->item);", "partial_line": "page = BufferGet", "completion": "page = BufferGetPage(pos->pendingBuffer); <|endoftext|>"}
{"context": "\t{\n\tdlist_foreach(iter, &leaf->segments)\n\treturn needsplit;\n}\n\twhile (nrootitems < nitems)", "partial_line": "segsize = SizeOfGinP", "completion": "segsize = SizeOfGinPostingList(segment); <|endoftext|>"}
{"context": "\t\t\tconst char *s = (j < numFieldName && po->fieldName[j][0]) ?\n\t\t\ttotal_line_length += len;\n\t\tif (fout == NULL)\n\t\t\tpagerenv = getenv(\"PAGER\");\n\t\t\tif (pagerenv != NULL &&", "partial_line": "- (po->head", "completion": "- (po->header != 0) * 2 <|endoftext|>"}
{"context": "\t\t\topts->specified_opts |= SUBOPT_REFRESH;\n\t\telse if (IsSet(supported_opts, SUBOPT_PASSWORD_REQUIRED) &&\n\t\t\t\t strcmp(defel->defname, \"password_required\") == 0)\n\t\t\topts->specified_opts |= SUBOPT_PASSWORD_REQUIRED;\n\t\t\topts->passwordrequired = defGetBoolean(defel);", "partial_line": "errorConflictingDef", "completion": "errorConflictingDefElem(defel, pstate); <|endoftext|>"}
{"context": "\t\t\t\t\tif (*str == '\\0')\n\t\t\t\t\tif (*str == 'T')\n\t\t\t\tdefault:\n\t\t}\n\t\telse", "partial_line": "AdjustFractSeconds(f", "completion": "AdjustFractSeconds(fval, tm, fsec, SECS_PER_HOUR); <|endoftext|>"}
{"context": "\t\treport_newlocale_failure(locale_time);\n\ttimeinfo = gmtime_r(&timenow, &timeinfobuf);\n\t\ttimeinfo->tm_wday = i;\n#else\n\t\tencoding = PG_SQL_ASCII;", "partial_line": "bufp", "completion": "bufptr += MAX_L10N_DATA; <|endoftext|>"}
{"context": "\tif (tuple_buffer->nTuples == tuple_buffer->readCounter)\n\t\tif (gm_state->need_to_scan_locally)\n\t\t\t\t\t\t  gm_state->gm_slots[reader],\t\n\tGatherMergeState *node = (GatherMergeState *) arg;\n\t\tcompare = ApplySortComparator(datum1, isNull1,", "partial_line": "datu", "completion": "datum2, isNull2, <|endoftext|>"}
{"context": "\t}\n\t\tif (buffer[i] == '\\n')\n\t\t{\n\t\t\tint\t\t\tslen = &buffer[i] - linebegin;\n\t\t\tresult[n++] = linebuf;", "partial_line": "pg_disa", "completion": "pg_disable_aslr(); <|endoftext|>"}
{"context": "\t\tbuffer = ReadBuffer(indexrel, blkno);\n\t\tif (level > 1)\n\t\t\tblkno = gistbufferinginserttuples(buildstate,\n\t\tblkno = childblkno;\n\t\tchildNodeBuffer = gistGetNodeBuffer(gfbb, giststate, blkno, level);", "partial_line": "if (BUFFER_OV", "completion": "if (BUFFER_OVERFLOWED(childNodeBuffer, gfbb)) <|endoftext|>"}
{"context": "\tECPGt_char,(t),(long)64,(long)1,(64)*sizeof(char), \n\t{ ECPGdo(__LINE__, 0, 1, \"test1\", 0, ECPGst_normal, \"fetch 1 from $0\", \n\tECPGt_char,&(curname3),(long)0,(long)1,(1)*sizeof(char), \n#line 165 \"cursor.pgc\"\n\tECPGt_int,&(count),(long)1,(long)1,sizeof(int), ", "partial_line": "ECPGt_NO_INDICATOR, NULL , 0L,", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT); <|endoftext|>"}
{"context": "\t{\n\t\t\t\tpg_log_warning(\"\\\\%s: extra argument \\\"%s\\\" ignored\", cmd, arg);\n\t\twhile ((arg = psql_scan_slash_option(scan_state,\n\tfree(cmd);\n\t\tstatus = exec_command_cd(scan_state, active_branch, cmd);", "partial_line": "status = exec_command_c", "completion": "status = exec_command_conninfo(scan_state, active_branch); <|endoftext|>"}
{"context": "\tif (nspinfo->dobj.dump & DUMP_COMPONENT_COMMENT)\n\t\t\t\t\t NULL, nspinfo->rolname,\n\t\t\t\t\t nspinfo->dobj.catId, 0, nspinfo->dobj.dumpId);\n\tfree(qnspname);\n\tdestroyPQExpBuffer(delq);", "partial_line": "delq = create", "completion": "delq = createPQExpBuffer(); <|endoftext|>"}
{"context": "\t{\n\t\t\t\ttoken = optarg;\n\t\t\tcase 1005:\t\t\t\n\t\t\tdefault:\n\t\t\t\treturn 1;", "partial_line": "usa", "completion": "usage(argv); <|endoftext|>"}
{"context": "\tif (contain_vars_of_level((Node *) subselect, 1))\n\t\t\thash_ok_operator(expr))\n\tif (leftargs == NIL)\n\t\t contain_aggs_of_level((Node *) rightargs, 1)))\n\t\treturn NULL;", "partial_line": "IncrementVarSublevelsUp((", "completion": "IncrementVarSublevelsUp((Node *) leftargs, -1, 1); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tfree(part);\n\t\t\t\t\t\tAssert(false);\n\t\t\t\t\t\tconn->status = CONNECTION_BAD;\n\t\t\t}", "partial_line": "if ((conn->allowed_auth_meth", "completion": "if ((conn->allowed_auth_methods & bits) == bits) <|endoftext|>"}
{"context": "\tif (consider_outer_null && !consider_inner_null)\n\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t next_index);\n\t{\n\tif (outer_has_default)", "partial_line": "Assert(outer", "completion": "Assert(outer_default >= 0 && outer_default < outer_map->nparts); <|endoftext|>"}
{"context": "pq_endmsgread(void)\n\t{\n\t\t\tPqCommReadingMsg = false;\n\t}\n}", "partial_line": "socket_se", "completion": "socket_set_nonblocking(false); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tif (!have_dp)\n\t\t}\n\t\t\t}\n\t\t}", "partial_line": "dest-", "completion": "dest->ndigits = i; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"catalog/pg_proc.h\"\n\t\t\t\t errmsg(\"conversion \\\"%s\\\" already exists\", conname)));", "partial_line": "conforenc", "completion": "conforencoding, <|endoftext|>"}
{"context": "\t*store_name = name;\n}\nint\n\tint\t\t\tfamily;\n\t\tfamily = AF_INET;", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\tresult = PSQLexec(buf.data);\n\t\t\t\tgoto error_return;\n\t\t}\n\t\t\tprintfPQExpBuffer(&buf,\n\t\t\t\t\t\t\t  \"       conname,\\n\"", "partial_line": "\"       pg_catalog.pg_get_constraintdef(oid,", "completion": "\"       pg_catalog.pg_get_constraintdef(oid, true) AS condef,\\n\" <|endoftext|>"}
{"context": "            {   int ret = slice_from_s(z, 6, s_44);\n            }\n    z->bra = z->c;\n        if (!among_var) goto lab1;\n            case 2:", "partial_line": "if (z->c - 9 <= z->lb || (z->p[z-", "completion": "if (z->c - 9 <= z->lb || (z->p[z->c - 1] != 186 && z->p[z->c - 1] != 189)) return 0; <|endoftext|>"}
{"context": "\twhile ((xlde = ReadDir(xldir, fromdir)) != NULL)\n\t\tif (strcmp(xlde->d_name, \".\") == 0 ||\n\t}\n\t\t\tcontinue;", "partial_line": "int", "completion": "int\t\t\tdstfd; <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\tInvalidTransactionId);\n\t\t\t\tif (TransactionIdDidCommit(xvac))\n\t\t\t\t\tSetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,\n\t\t\t\telse", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t{\n\t\tExprState **predicate;\n\t\t\t*predicate = ExecPrepareQual((List *) tgqual, estate);\n\tOid\t\t\tsct_tgoid;\n} SetConstraintStateData;", "partial_line": "typedef str", "completion": "typedef struct AfterTriggerSharedData *AfterTriggerShared; <|endoftext|>"}
{"context": "\t\t\t (int64) block > lastblock + BOTTOMUP_TOLERANCE_NBLOCKS))\n\t}\n\treturn nblocksfavorable;\n\tconst IndexDeleteCounts *group1 = (const IndexDeleteCounts *) arg1;\n\tpg_unreachable();", "partial_line": "blockgroups[nblockgroups - 1].npro", "completion": "blockgroups[nblockgroups - 1].npromisingtids = 0; <|endoftext|>"}
{"context": "\t\tpg_time_t\tnewt = t;\n\t\t\t\tnewy -= years;\n{\n\tstatic struct state *gmtptr = NULL;\n\t\ttmp->tm_zone = wildabbr;", "partial_line": "return re", "completion": "return result; <|endoftext|>"}
{"context": "\t\t\t}\nOid\nget_role_oid_or_public(const char *rolname)\n}\nget_rolespec_oid(const RoleSpec *role, bool missing_ok)", "partial_line": "Oid", "completion": "Oid\t\t\toid; <|endoftext|>"}
{"context": "\t{\n\t\t\tpg_fatal(\"backup targets are not supported by this server version\");\n\t\t\tAppendStringCommandOption(&buf, use_new_option_syntax,\n\t\tbasebkp = psprintf(\"BASE_BACKUP (%s)\", buf.data);\n\t\t\t\t PQerrorMessage(conn));", "partial_line": "PQc", "completion": "PQclear(res); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\titup_key->backward = true;\n\t\t\t\t\t\t\t\t\t\tstack))\n\t\t\t\treturn;\n\t\t{", "partial_line": "&rightsib_empty", "completion": "&rightsib_empty, vstate)) <|endoftext|>"}
{"context": "\tif (keysz == 0)\n\t\treturn _bt_endpoint(scan, dir);\n\t{\n\t\t\t{\n\t\t\t\t\t\tbreak;\t", "partial_line": "used_all_sub", "completion": "used_all_subkeys = true; <|endoftext|>"}
{"context": "\t\t\trecordDependencyOn(&address, &referenced, DEPENDENCY_NORMAL);\n\t\tbool\t\tisnull;\n\t\ta = update_proconfig_value(a, set_items);\n\t\trepl_repl[Anum_pg_proc_proconfig - 1] = true;\n\t\t}", "partial_line": "heap_freetuple", "completion": "heap_freetuple(tup); <|endoftext|>"}
{"context": "\t\t\tPROCLOCK_PRINT(\"PostPrepare_Locks: updated\", proclock);\n\t\tLWLockRelease(partitionLock);\n}\n\tlong\t\tmax_table_size;\n\tLockData   *data;", "partial_line": "els", "completion": "els = MaxBackends; <|endoftext|>"}
{"context": "\tAclResult\taclresult;\n\tdatabaseoid = convert_database_name(databasename);\n}\nDatum\n\tAclMode\t\tmode;", "partial_line": "AclResult", "completion": "AclResult\taclresult; <|endoftext|>"}
{"context": "\t\telse if (strcmp(opt->defname, \"generic_plan\") == 0)\n\t\t}\n\t\t{\n\t\t\tes->memory = defGetBoolean(opt);\n\t\t{", "partial_line": "es->serialize =", "completion": "es->serialize = EXPLAIN_SERIALIZE_NONE; <|endoftext|>"}
{"context": "\t\tnewrc->strength = rc->strength;\n\tforeach(l, parse->rtable)\n\t\tPlanRowMark *newrc;\n\t\ti++;\n\t\tnewrc->markType = select_rowmark_type(rte, LCS_NONE);", "partial_line": "newrc->streng", "completion": "newrc->strength = LCS_NONE; <|endoftext|>"}
{"context": "static const symbol s_1_111[4] = { 'a', 't', 'a', 'n' };\nstatic const symbol s_1_113[5] = { 't', 'e', 't', 'a', 'n' };\nstatic const symbol s_1_125[5] = { 'i', 's', 't', 'a', 'r' };\nstatic const struct among a_1[130] =\n{ 5, s_1_3, -1, 13, 0},", "partial_line": "{ 5, s_1_", "completion": "{ 5, s_1_5, -1, 15, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t InvalidOid,\n\t{\n\t\t\tcase OID_RANGE_OVERLAPS_LEFT_OP:\n\t\t\t\tbreak;\n\t\t\tcase OID_RANGE_CONTAINS_OP:", "partial_line": "case O", "completion": "case OID_RANGE_GREATER_EQUAL_OP: <|endoftext|>"}
{"context": "\t\tObjectAddressSet(referenced, RelationRelationId, typeForm->typrelid);\n\t\tif (relationKind != RELKIND_COMPOSITE_TYPE)\n\t{\n\tForm_pg_type typ;\n\tOid\t\t\toldTypeOid;", "partial_line": "if (OidIsValid(o", "completion": "if (OidIsValid(oldTypeOid)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   GlobalVisDataRels.definitely_needed);\n\tif (GlobalVisTestShouldUpdate(state))\n\telse\n\t\treturn false;\n\tfxid = FullXidRelativeTo(state->definitely_needed, xid);", "partial_line": "return GlobalVisTestIsRemovable", "completion": "return GlobalVisTestIsRemovableFullXid(state, fxid); <|endoftext|>"}
{"context": "\t\t*userbuf = InvalidBuffer;\n\tOffsetNumber offnum;\n\t\t\tif (ItemIdIsRedirected(lp) && at_chain_start)\n\t\t\t\tat_chain_start = false;\n\t\theapTuple->t_len = ItemIdGetLength(lp);", "partial_line": "ItemPointerSet(&heapTuple->t_s", "completion": "ItemPointerSet(&heapTuple->t_self, blkno, offnum); <|endoftext|>"}
{"context": "\t\t\tif (pgstat_read_activity_complete(before_changecount,\n\t\t\t\t\t\t\t\t\t\t&localentry->backend_subxact_count,\n#endif\n\tbeentry = BackendStatusArray;\n\t\tvolatile PgBackendStatus *vbeentry = beentry;", "partial_line": "aft", "completion": "after_changecount)) <|endoftext|>"}
{"context": "\t\tn_pct = 100 * (double) n / total_count;\n\tfpi_len_pct = 0;\nstatic void\n\t{\n\tfor (ri = 0; ri <= RM_MAX_ID; ri++)", "partial_line": "const R", "completion": "const RmgrDescData *desc; <|endoftext|>"}
{"context": "\t\t\tnewdig -= carry * NBASE;\n\tint\t\t\told_ndigits = accum->ndigits;\n\tint\t\t\taccum_ndigits;\n\tval_rscale = val->ndigits - val->weight - 1;\n\t\tweightdiff = accum_weight - old_weight;", "partial_line": "new_neg_digits = palloc0(acc", "completion": "new_neg_digits = palloc0(accum_ndigits * sizeof(int32)); <|endoftext|>"}
{"context": "\tSpinLockAcquire(&XLogCtl->info_lck);\n\t\tXLogFileName(filename, tli, segno, wal_segment_size);\n\t\tereport(ERROR,\n\t\t\t\t errmsg(\"requested WAL segment %s has already been removed\",\n\t}", "partial_line": "XLog", "completion": "XLogSegNo <|endoftext|>"}
{"context": "\t\toldcxt = MemoryContextSwitchTo(perChildCxt);\n\t\t\t\t\t\t\t\t\t\tchildTbl, rel);\n\t\t\t\t\t\t\t\t  InvalidOid, InvalidOid,\n\t{\n\t\t\telog(ERROR, \"trigger %u already has a parent trigger\",", "partial_line": "recordDepende", "completion": "recordDependencyOn(&depender, &referenced, DEPENDENCY_PARTITION_PRI); <|endoftext|>"}
{"context": "#ifndef WORDS_BIGENDIAN\n\tdigest[0] = ctx->md5_st8[3];\n\tdigest[6] = ctx->md5_st8[5];\n\tdigest[10] = ctx->md5_st8[9];\n\tdigest[14] = ctx->md5_st8[13];", "partial_line": "ctx->md5_stc =", "completion": "ctx->md5_stc = MD5_C0; <|endoftext|>"}
{"context": "\t\tcase OBJECT_LARGEOBJECT:\n\t\t\treturn NULL;\nrecordDependencyOnNewAcl(Oid classId, Oid objectId, int32 objsubId,\n\t\t\t\t\t\t Oid ownerId, Acl *acl)\n\t\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(objoid));", "partial_line": "if (!HeapTuple", "completion": "if (!HeapTupleIsValid(tuple)) <|endoftext|>"}
{"context": "\t\tif (event->events & WL_SOCKET_CLOSED)\n\tk_ev->ident = event->fd;\n{\nstatic inline void\n\tk_ev->ident = SIGURG;", "partial_line": "in", "completion": "int\t\t\trc; <|endoftext|>"}
{"context": "\t\t\t\tForm_pg_publication_rel prform;\n\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\t\tif (!missing_ok)\n\t\t\t\t\t\t\t object->objectId);\n\t\t\t\tif (subname)", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\tAssert(boundinfo &&\n\t\t\t\t\t\t\tpartition_bound_has_default(boundinfo)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t &cmpval);\n\t\t\t\t\tif (boundinfo->indexes[offset + 1] < 0)\n\t\t\t\t\t\t{", "partial_line": "kind = boundinfo->kin", "completion": "kind = boundinfo->kind[offset + 1]; <|endoftext|>"}
{"context": "\tif (!cmd_name)\n\t\tpolcmd = ACL_DELETE_CHR;\n\t\telog(ERROR, \"unrecognized policy command\");\n\tDatum\t   *role_oids;\n\tListCell   *cell;", "partial_line": "int", "completion": "int\t\t\ti = 0; <|endoftext|>"}
{"context": "}\n\t\tSupportRequestWFuncMonotonic *req = (SupportRequestWFuncMonotonic *) rawreq;\n\t\tPG_RETURN_POINTER(req);\n\t\t\t\t\t\t\t FRAMEOPTION_START_UNBOUNDED_PRECEDING |\n\t\tif (context->boundary <= 0)", "partial_line": "if (IsA(r", "completion": "if (IsA(rawreq, SupportRequestWFuncMonotonic)) <|endoftext|>"}
{"context": "\t\t\t\tscan_type = PGTYPES_TYPE_STRING_MALLOCED;\n\t\t\t\terr = pgtypes_defmt_scan(&scan_val, scan_type, &pstr, pfmt);\n\t\t\t\t\tfor (j = 0; j < szdatetktbl; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t PROGRESS_CREATEIDX_PHASE_WAIT_2);\n\t\tCommitTransactionCommand();\n\t\tCacheInvalidateRelcacheByRelid(oldidx->tableId);\n\t\t{\n\t\t\tObjectAddress object;", "partial_line": "Commi", "completion": "CommitTransactionCommand(); <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t\t List *clauses)\n\t\tExpr\t   *clause = (Expr *) lfirst(lc);\n\t\t\t !DatumGetBool(((Const *) clause)->constvalue)))\n\t\t\t\t{", "partial_line": "lis", "completion": "list_make1(arg)); <|endoftext|>"}
{"context": "\t\t\tvictim = relptr_access(base, fpm->freelist[f]);\n\t\t\t\t}\n\t\trelptr_copy(next->prev, victim->prev);\n\t}\n\t\tif (fpm->singleton_npages > 0)", "partial_line": "FreePagePu", "completion": "FreePagePushSpanLeader(fpm, fpm->singleton_first_page, <|endoftext|>"}
{"context": "\t\tif (shmid < 0)\n\t\t\t\t\t\t(errcode(ERRCODE_LOCK_FILE_EXISTS),\n\t\t\t\t\t\t errmsg(\"pre-existing shared memory block (key %lu, ID %lu) is still in use\",\n\t\t\t\tbreak;\n\t\t}", "partial_line": "*shi", "completion": "*shim = hdr; <|endoftext|>"}
{"context": "\t\tdefault:\n\t\tgoto out_of_frame;\n\t\t*isout = false;\n\tif (set_mark)\n\tecontext->ecxt_outertuple = slot;", "partial_line": "out_of_", "completion": "out_of_frame: <|endoftext|>"}
{"context": "\t{ ECPGdescribe(__LINE__, 0, 0, NULL, \"st_id2\",\n#line 169 \"describe.pgc\"\n\t\t\t\"sqlda1 '%s'\\n\\tsqlda2 '%s'\\n\\tsqlda3 '%s'\\n\",\n\t}\nif (sqlca.sqlcode < 0) exit (1);", "partial_line": "#line 180 \"des", "completion": "#line 180 \"describe.pgc\" <|endoftext|>"}
{"context": "\tif (tyinfo->dobj.dump & DUMP_COMPONENT_SECLABEL)\n\t\t\t\t\t tyinfo->dobj.namespace->dobj.name, tyinfo->rolname,\n\tPQExpBuffer delq = createPQExpBuffer();\n\t\t\t\t\t ARCHIVE_OPTS(.tag = tyinfo->dobj.name,\n{", "partial_line": "char", "completion": "char\t   *typlen; <|endoftext|>"}
{"context": "\t{\n\t\t\tAssert(false);\n\t}\n\tvacrel->tuples_frozen += presult.nfrozen;\n\tvacrel->live_tuples += presult.live_tuples;", "partial_line": "if (presult.a", "completion": "if (presult.all_frozen) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t errmsg(\"invalid DESCRIBE message subtype %d\",\n\t\t\t\t\tvalgrind_report_error_query(\"DESCRIBE message\");\n\t\t\tcase PqMsg_Sync:\n\t\t\t\tproc_exit(0);\n\t\t\tcase PqMsg_CopyData:", "partial_line": "case PqMsg_Cop", "completion": "case PqMsg_CopyFail: <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(arg1 > arg2);\n}\n{\n\tint16\t\targ2 = PG_GETARG_INT16(1);\n\tint16\t\targ2 = PG_GETARG_INT16(1);", "partial_line": "int", "completion": "int32\t\tsum; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  gettext_noop(\"ICU Rules\"));\n\telse\n\t\t\t\t\t\t  gettext_noop(\"ICU Rules\"));\n\t\t\t\t\t\t  gettext_noop(\"yes\"), gettext_noop(\"no\"),\n\tif (verbose)", "partial_line": "\"\\nFROM pg_catalog.pg_collation c, pg_catalo", "completion": "\"\\nFROM pg_catalog.pg_collation c, pg_catalog.pg_namespace n\\n\" <|endoftext|>"}
{"context": "\t\t\tcontinue;\t\t\t\n\t\t\tVirtualTransactionId *newer_snapshots;\n\t\t\tint\t\t\tn_newer_snapshots;\n\t\t\t\t\t\t\t\t\t\t\t\t\t| PROC_IN_SAFE_IC,\n\t\t\t\t\tcontinue;\t", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\tmy_extra = (RecordIOData *) fcinfo->flinfo->fn_extra;\n\t\tmy_extra->record_typmod = 0;\n\t\tmy_extra->record_typmod != tupTypmod)\n\t\tMemSet(my_extra, 0,\n\t\t\t   ncolumns * sizeof(ColumnIOData));", "partial_line": "my_extra->record_type", "completion": "my_extra->record_type = tupType; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tGISTPageSplitInfo *si = palloc(sizeof(GISTPageSplitInfo));\n\t\t{\n\t\t\t{\n\t\t\tif (ptr->next && ptr->block.blkno != GIST_ROOT_BLKNO)", "partial_line": "if (!is", "completion": "if (!is_build && RelationNeedsWAL(rel)) <|endoftext|>"}
{"context": "\tfor (i = 0; i < indnkeyatts; i++)\n}\n\t\t\t\t\t\t\t\t\t Relation hrel,\n\t\t\t\t\t\t\t\t\t Buffer ibuf,\n\tTM_IndexDeleteOp delstate;", "partial_line": "Page\t\tipage = BufferGet", "completion": "Page\t\tipage = BufferGetPage(ibuf); <|endoftext|>"}
{"context": "                z->c--;\n                z->c = z->l - m_test4;\n            return 0;\n            }\nlab0:", "partial_line": "if (z->c <= z->lb || z->p[z->c", "completion": "if (z->c <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((67133440 >> (z->p[z->c - 1] & 0x1f)) & 1)) return 0; <|endoftext|>"}
{"context": "\tTupleTableSlot *outerslot;\n\t\touterslot = ExecProcNode(outerPlan);\n\t\tif (TupIsNull(outerslot))\n\t}\n\tMemoryContextSwitchTo(oldcontext);", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "{\n\tOid\t\t\ttable_id;\n\tParseNamespaceItem *nsitem;\n\tpolcmd = parse_policy_command(stmt->cmd_name);\n\tqual_pstate = make_parsestate(NULL);", "partial_line": "stmt", "completion": "stmt); <|endoftext|>"}
{"context": "\ttypename = makeTypeNameFromNameList(names);\n\t\tereport(ERROR,\n\ttypeOid = typeTypeId(tup);\n\tif (IsTrueArrayType(typTup))\n\t\t\t\t errmsg(\"cannot alter array type %s\",", "partial_line": "OidIsValid(ra", "completion": "OidIsValid(rangetype) ? <|endoftext|>"}
{"context": "\t{\n\t\t\tvalue /= 10;\n\t}\nstatic char *\nstatic bool", "partial_line": "static", "completion": "static bool <|endoftext|>"}
{"context": "\t\t\tcontinue;\n{\n\testate->es_part_prune_infos = plannedstmt->partPruneInfos;\n\tExecDoInitialPruning(estate);\n\t\tforeach(l, plannedstmt->rowMarks)", "partial_line": "PlanRowMark *rc =", "completion": "PlanRowMark *rc = (PlanRowMark *) lfirst(l); <|endoftext|>"}
{"context": "\t\t\t\t\t sizeof(BlockNumber) * num_incremental_blocks);\n\t\t\tif (pg_checksum_update(&checksum_ctx,\n\twhile (1)\n\t\t\t\t\t\t\t\t\t\t\t bytes_done, remaining,\n\t\t{", "partial_line": "if (ibindex >= num_increme", "completion": "if (ibindex >= num_incremental_blocks) <|endoftext|>"}
{"context": "{\npgstat_drop_function(Oid proid)\n{\n\t\t\t\t\t\t\t  MyDatabaseId,\n\t\tAcceptInvalidationMessages();", "partial_line": "if (!SearchSysCacheExists1(PROCOID, ObjectIdGe", "completion": "if (!SearchSysCacheExists1(PROCOID, ObjectIdGetDatum(fcinfo->flinfo->fn_oid))) <|endoftext|>"}
{"context": "\tTSConfigCacheHash = hash_create(\"Tsearch configuration cache\", 16,\n\t\t\t\t\t\t\t\t\t&ctl, HASH_ELEM | HASH_BLOBS);\n\tif (!CacheMemoryContext)\n\tif (TSConfigCacheHash == NULL)\n\t\treturn lastUsedConfig;", "partial_line": "ListDict", "completion": "ListDictionary maplists[MAXTOKENTYPE + 1]; <|endoftext|>"}
{"context": "\t{\n\t\tproc->argstack = node;\n\tAssert(proc->calldepth > 0);\n\t{\n\t{", "partial_line": "plpython_srf_cleanup", "completion": "plpython_srf_cleanup_callback(void *arg) <|endoftext|>"}
{"context": "\tif (ssup->abbreviate)\n\t\tssup->abbrev_full_comparator = uuid_fast_cmp;\n\t\tMemoryContextSwitchTo(oldcontext);\nstatic bool\n\tuuid_sortsupport_state *uss = ssup->ssup_extra;", "partial_line": "retur", "completion": "return false; <|endoftext|>"}
{"context": "\tif (aclequal(new_acl, def_acl))\n\t\t\tmyself.objectSubId = 0;\n\telse\n\t{\n\t\tbool\t\tnulls[Natts_pg_default_acl] = {0};", "partial_line": "bool\t\treplaces[Na", "completion": "bool\t\treplaces[Natts_pg_default_acl] = {0}; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t}\n{\n\t\t(*mapping)[i] = -1;\n\t\tcase PARTITION_STRATEGY_LIST:", "partial_line": "return create_list", "completion": "return create_list_bounds(boundspecs, nparts, key, mapping); <|endoftext|>"}
{"context": "#endif\nstatic void checkTimeLineSwitch(XLogRecPtr lsn, TimeLineID newTLI,\nstatic void ConfirmRecoveryPaused(void);\n\t\t\t\t\t\t\t  TimeLineID replayTLI);\nstatic int\tXLogPageRead(XLogReaderState *xlogreader, XLogRecPtr targetPagePtr,", "partial_line": "bool", "completion": "bool fetching_ckpt, <|endoftext|>"}
{"context": "\t\t\t\t\thline,\n\t\t\t\t\tchars_to_output;\n\t\tif (cancel_pressed)\n\t\t\t\t(hmultiline) &&\n\t\t\tif (!opt_tuples_only)", "partial_line": "lhwidt", "completion": "lhwidth, dwidth, output_columns, <|endoftext|>"}
{"context": "\t\t(*create_upper_paths_hook) (root, UPPERREL_FINAL,\n\t\t\t\t\t\t\t\t\tcurrent_rel, final_rel, &extra);\n\tgd->unsortable_refs = NULL;\n\t\t\tSortGroupClause *gc = lfirst_node(SortGroupClause, lc);\n\t\tforeach(lc, parse->groupingSets)", "partial_line": "errdetail(\"Some of the datatypes only support hashing, while othe", "completion": "errdetail(\"Some of the datatypes only support hashing, while others only support sorting.\"))); <|endoftext|>"}
{"context": "\t\t\t\tok = false;\t\t\n\t\t\tif (have_order && newDateOrder != DATEORDER_DMY)\n\t\telse if (pg_strcasecmp(tok, \"MDY\") == 0 ||\n\t\t\t\t pg_strcasecmp(tok, \"US\") == 0 ||\n\t\t\t{", "partial_line": "ok =", "completion": "ok = false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t*colvars = lappend(*colvars,\n\t\t\t\t\t\tchar\t   *label = strVal(lfirst(colname));\n\t\t\t\t\t\t\t\t\t\t\tmakeString(pstrdup(label)));\n\t\t\t\t\t\t\t\t\t\t\t  sublevels_up);\n\t\t\t\tListCell   *lcc;", "partial_line": "if (col", "completion": "if (colnames) <|endoftext|>"}
{"context": "\tdlist_foreach(iter, &leaf->segments)\n\treturn needsplit;\n}\n\twhile (nrootitems < nitems)\n\t\tsegsize = SizeOfGinPostingList(segment);", "partial_line": "buffer = Gi", "completion": "buffer = GinNewBuffer(index); <|endoftext|>"}
{"context": "{\n\t\t\tif (MyProcPort->gss->ctx != GSS_C_NO_CONTEXT)\n\t\t\t\tgss_delete_sec_context(&min_s, &MyProcPort->gss->ctx, NULL);\n\tstruct addrinfo *addrs = NULL,\n\thint.ai_family = family;", "partial_line": "unixSoc", "completion": "unixSocketPath, <|endoftext|>"}
{"context": "    z->I[0] = z->l;\n    {   int c1 = z->c;\n            z->c += ret;\n            if (ret < 0) goto lab0;\n}", "partial_line": "static int r_perfective_gerund(stru", "completion": "static int r_perfective_gerund(struct SN_env * z) { <|endoftext|>"}
{"context": "\tTransactionId newFrozenXid;\n\tbool\t\tdirty = false;\n\t\t\tif (TransactionIdPrecedes(lastSaneFrozenXid, relfrozenxid))\n\t\t\t\tbogus = true;\n\tAssert(TransactionIdIsNormal(newFrozenXid));", "partial_line": "Assert(Multi", "completion": "Assert(MultiXactIdIsValid(newMinMulti)); <|endoftext|>"}
{"context": "\tpqRecycleCmdQueueEntry(conn, entry);\nint\n\t{\n\t}\n{", "partial_line": "return re", "completion": "return res->errMsg; <|endoftext|>"}
{"context": "\thlparsetext(cfg->cfgId, &prs, query,\n\telse\n\t\t\t\t  PointerGetDatum(&prs),\n\tPG_RETURN_POINTER(out);\n}", "partial_line": "PG_G", "completion": "PG_GETARG_DATUM(2))); <|endoftext|>"}
{"context": "\t\telse\n\tif (tableinfo.relkind == RELKIND_INDEX ||\n\t\t\tappendPQExpBuffer(&buf, \",\\n  CASE WHEN a.attnum <= (SELECT i.indnkeyatts FROM pg_catalog.pg_index i WHERE i.indexrelid = '%s') THEN '%s' ELSE '%s' END AS is_key\",\n\t\tfdwopts_col = cols++;\n\tif (verbose)", "partial_line": "!pset.h", "completion": "!pset.hide_compression && <|endoftext|>"}
{"context": "            break;\n            {   int ret = slice_from_s(z, 5, s_9);\n            {   int ret = slice_from_s(z, 1, s_10);\n    }\n    z->lb = z->c; z->c = z->l;", "partial_line": "lab", "completion": "lab0: <|endoftext|>"}
{"context": "\t\t\tfprintf(conn->Pfdebug, \"Terminate\");\n\t\t\tbreak;\n\tif (logCursor - 1 != length)\n\t\tfprintf(conn->Pfdebug,\n\t\t\t\t\"mismatched message length: consumed %d, expected %d\\n\",", "partial_line": "in", "completion": "int\t\t\tversion; <|endoftext|>"}
{"context": "static DumpId lastDumpId = 0;\t\n\tuint32\t\tstatus;\t\t\t\n#define SH_ELEMENT_TYPE\tCatalogIdMapEntry\n#define SH_DECLARE\nstatic void flagInhIndexes(Archive *fout, TableInfo *tblinfo, int numTables);", "partial_line": "getExtensionMembership(fout, extinfo,", "completion": "getExtensionMembership(fout, extinfo, numExtensions); <|endoftext|>"}
{"context": "\tretval = XLogCtl->SharedRecoveryState;\nbool\n\t\treturn (bool) LocalXLogInsertAllowed;\n\t\treturn false;\n{", "partial_line": "*doPageWrite", "completion": "*doPageWrites_p = doPageWrites; <|endoftext|>"}
{"context": "\t\tPathKey    *old_pathkey = (PathKey *) lfirst(lc);\n{\n\t\t\t\t\t\t\t\t\t\t\t\t  COMPARE_EQ);\n\tif (!OidIsValid(equality_op))\t\n\t\telog(ERROR, \"missing operator %d(%u,%u) in opfamily %u\",", "partial_line": "opfamilies = get_mergejoin_opfamili", "completion": "opfamilies = get_mergejoin_opfamilies(equality_op); <|endoftext|>"}
{"context": "#include <sqlca.h>\n#line 1 \"array.pgc\"", "partial_line": "#include <pgtypes_in", "completion": "#include <pgtypes_interval.h> <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tsnap = change->data.snapshot;\n\t\t\t\tsz += sizeof(SnapshotData) +\n\t\tcase REORDER_BUFFER_CHANGE_TRUNCATE:\n\t\t\t}", "partial_line": "ret", "completion": "return sz; <|endoftext|>"}
{"context": "}\n\tint\t\t\tfd;\n\t{\n\t}\n\t{", "partial_line": "if", "completion": "if (rc < 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t PointerGetDatum(&configOut));\n\t\t\t\t\tconfigOutLeafType = procform->amproclefttype;\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t\t\t\t\t\t\t\tformat_type_be(configOut.leafType),\n\t\t\t\t\t\t{", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tdefault:\n}\n\t\tif (ptr[length] != 0xff)\n\t\tcase ECPGt_int:\n\t\t\t\treturn true;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "static const char *\n\t\t}\n\t\t{\n\t\t\tquery += 2;\n\t}", "partial_line": "sta", "completion": "static bool <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"replication origin with ID %d is already active for PID %d\",\n\t\t\t\t\t\t\tcurstate->roident, curstate->acquired_by)));\n\t}\n\t\t\t\t\t\tnode),\n\t}", "partial_line": "session_re", "completion": "session_replication_state->acquired_by = MyProcPid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   \"timetz\", \"time\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\tvalue = TimeADTGetDatum(result);", "partial_line": "typid = T", "completion": "typid = TIMEOID; <|endoftext|>"}
{"context": "\tBOGUS_MCTX(MCTX_13_UNUSED_ID),\n\tBOGUS_MCTX(MCTX_14_UNUSED_ID),\nMemoryContext CacheMemoryContext = NULL;\nMemoryContext TopTransactionContext = NULL;\n\t\t\t\t\t\t\t\t\tbool print_to_stderr);", "partial_line": "int cur", "completion": "int curr_id, MemoryContext context, <|endoftext|>"}
{"context": "\t\t}\n\t(_n)->multi\t\t= 0;\t\\\n}\nNUM_cache_getnew(const char *str)\n\t\t{", "partial_line": "for (int i = 1; i < NUM_CACHE_", "completion": "for (int i = 1; i < NUM_CACHE_ENTRIES; i++) <|endoftext|>"}
{"context": "\tbool\t\tgot_data_checksum_version = false;\n\tchar\t   *lc_monetary = NULL;\n\tuint32\t\ttli = 0;\n\tchar\t   *resetwal_bin;\n\t\tlc_ctype = pg_strdup(getenv(\"LC_CTYPE\"));", "partial_line": "if (getenv(\"L", "completion": "if (getenv(\"LC_MONETARY\")) <|endoftext|>"}
{"context": "\tBIO_METHOD *bio_method;\n\tBIO_set_data(bio, port);\n\tif (dh == NULL)\n\t{\n\t\tereport(isServerStart ? FATAL : LOG,", "partial_line": "(codes & D", "completion": "(codes & DH_CHECK_P_NOT_SAFE_PRIME)) <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\trInfo = ExecGetTriggerResultRel(estate, evtshared->ats_relid,\n\t\t\t\t\tfinfo = rInfo->ri_TrigFunctions;\n\t\t\t\t\tsrc_rInfo = ExecGetTriggerResultRel(estate,\n\tMemoryContextDelete(per_tuple_context);", "partial_line": "afterTrigge", "completion": "afterTriggers.query_depth < afterTriggers.maxquerydepth); <|endoftext|>"}
{"context": "extern void catalan_UTF_8_close_env(struct SN_env * z);\n#endif\nstatic const symbol s_0_3[2] = { 0xC3, 0xA1 };", "partial_line": "static co", "completion": "static const symbol s_0_6[2] = { 0xC3, 0xAC }; <|endoftext|>"}
{"context": "\t\tAssert(change->txn == txn);\n\tdlist_foreach_modify(iter, &txn->tuplecids)\n\tif (txn->base_snapshot != NULL)\n\t{\n\t\tdclist_delete_from(&rb->catchange_txns, &txn->catchange_node);", "partial_line": "dlist_delet", "completion": "dlist_delete(&change->node); <|endoftext|>"}
{"context": "\t\tconditional_stack_pop(st->cstack);\n\t{\n\t\t\tcommandFailed(st, \"startpipeline\", \"already in pipeline mode\");\n\t\t\treturn CSTATE_ABORTED;\n\t\tif (PQpipelineStatus(st->con) != PQ_PIPELINE_ON)", "partial_line": "commandFailed(st, \"endpipeline\", \"", "completion": "commandFailed(st, \"endpipeline\", \"not in pipeline mode\"); <|endoftext|>"}
{"context": "\t\telse\n\tGetUserIdAndSecContext(&save_userid, &save_sec_context);\n\tRestrictSearchPath();\n\t\t{\n\tAtEOXact_GUC(false, save_nestlevel);", "partial_line": "CommitTran", "completion": "CommitTransactionCommand(); <|endoftext|>"}
{"context": "\t\ttoken_count++;\n\tif (token_count < 2)\n\tif (token_count != 3)\n\t\t\treturn -1;\n\t\t\tif ((start_pos = strstr(str_copy, month_lower_tmp)))", "partial_line": "token[2][1", "completion": "token[2][1] = token[1][1]; <|endoftext|>"}
{"context": "\tif (planstate == NULL)\n\tswitch (nodeTag(planstate))\n\t\t\tif (planstate->plan->parallel_aware)\n\t\t\tExecIndexScanInitializeDSM((IndexScanState *) planstate, d->pcxt);\n\t\t\tbreak;", "partial_line": "case T_Cu", "completion": "case T_CustomScanState: <|endoftext|>"}
{"context": "\t\tbreak;\n\t      case SQL3_CHARACTER:\n\tECPGt_char,(STRINGVAR),(long)1024,(long)1,(1024)*sizeof(char), ECPGd_EODT);\n#line 183 \"dyntest.pgc\"\n\t\tprintf (\"\\\"%s\\\"\\n\", STRINGVAR);", "partial_line": "{ ECPGget_desc(__LINE__, \"", "completion": "{ ECPGget_desc(__LINE__, \"MYDESC\", INDEX,ECPGd_data, <|endoftext|>"}
{"context": "\tif (lineno > 0)\n#else\n\t\tsys = psprintf(\"\\\"%s\\\" %s%d \\\"%s\\\"\",\n\tresult = system(sys);\n\t\tif (!tmpdir)", "partial_line": "if", "completion": "if (fd != -1) <|endoftext|>"}
{"context": "CopySendTextLikeEndOfRow(CopyToState cstate)\n#ifndef WIN32\n\t\t\tbreak;\n\tbuf = pg_hton32((uint32) val);\n\tuint16\t\tbuf;", "partial_line": "ClosePipeTo", "completion": "ClosePipeToProgram(CopyToState cstate) <|endoftext|>"}
{"context": "\t\t\t\t\t\tget_namespace_name(RelationGetNamespace(onerel)),\n\tcaller_context = MemoryContextSwitchTo(anl_context);\n\t\tpg_rusage_init(&ru0);\n\t\t{\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),", "partial_line": "errmsg(\"column \\\"%s\\\" of r", "completion": "errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" appears more than once\", <|endoftext|>"}
{"context": "\t\tworkitem->avw_active = false;\nvoid\n\t\tereport(WARNING,\nAutoVacuumShmemSize(void)\n\tsize = sizeof(AutoVacuumShmemStruct);", "partial_line": "size = add_size(size,", "completion": "size = add_size(size, mul_size(autovacuum_worker_slots, <|endoftext|>"}
{"context": "\t\tconst char *config_val = GetConfigOption(output_config_variable,\n\t\t\t\t\t\t\t\t\t\t\t\t false, false);\n\t}\n\twin32ChildQueue = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 1);\n\tRemovePromoteSignalFiles();", "partial_line": "RemoveLo", "completion": "RemoveLogrotateSignalFiles(); <|endoftext|>"}
{"context": "\tif (!tmpparam)\n\t{\n\tif (strcmp(tmpparam, \"on\") != 0)\n\tif (!RetrieveDataDirCreatePerm(tmpconn))\n\t}", "partial_line": "retu", "completion": "return tmpconn; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  fmtQualifiedIdEnc(PQgetvalue(res, i, 1),\n\t\t\t\t\t\t\t\t\t\t\t\t\tPQclientEncoding(conn)));\n\t\tchar\t   *dbname = PQgetvalue(result, i, 0);\n\t\t\t\t\t\t\t\t progname, echo, verbose,\n\t\t\t\t\t\t\t\t concurrently, 1, tablespace);", "partial_line": "reindex_one_database(cparams, REINDE", "completion": "reindex_one_database(cparams, REINDEX_TABLE, tables, <|endoftext|>"}
{"context": "\t\tcvt > USHRT_MAX)\n\tOffsetNumber offsetNumber;\n}\nDatum\n\toffsetNumber = pq_getmsgint(buf, sizeof(offsetNumber));", "partial_line": "result = (I", "completion": "result = (ItemPointer) palloc(sizeof(ItemPointerData)); <|endoftext|>"}
{"context": "\t\t*tzp = 0;\n\t{\n\t\t\t\t\t\t\treturn dterr;\n\t\t\t\t\t{\n\t\t\tcase DTK_TZ:", "partial_line": "ret", "completion": "return dterr; <|endoftext|>"}
{"context": "\thashtable->cur_eq_func = hashtable->tab_eq_func;\n\tentry = LookupTupleHashEntry_internal(hashtable, slot, isnew, hash);\nTupleHashEntry\n\toldContext = MemoryContextSwitchTo(hashtable->tempcxt);\n\treturn entry;", "partial_line": "hashtable", "completion": "hashtable->exprcontext, <|endoftext|>"}
{"context": "\t\t\t\t\tpg_append_history(line, history_buf);\n\t\t\t\t\t\t\t\t\t\t\t\t cond_stack,\n\t\t\t\t\t\t\t\t\t\t\t\t previous_buf);\n\t\t\t\t\t\tquery_buf = swap_buf;\n\t\t\t\t\t}", "partial_line": "pset.encod", "completion": "pset.encoding, standard_strings()); <|endoftext|>"}
{"context": "static void StartAutovacuumWorker(void);\n#ifdef WIN32\nstatic HANDLE win32ChildQueue;\nPostmasterMain(int argc, char *argv[])\n\tPostmasterPid = MyProcPid;", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\t\t}\n\telse\n\tFinishStrongLockAcquire();\n\tif (log_lock)\nstatic PROCLOCK *", "partial_line": "SetupLockIn", "completion": "SetupLockInTable(LockMethod lockMethodTable, PGPROC *proc, <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tdouble\t\tcutoff = 0.01 / (double) (sslot.nvalues - 1);\n\t\t}\n\t\telse if (sslot.nvalues > 1)\n\t\t\t}", "partial_line": "Oid\t\t\toperato", "completion": "Oid\t\t\toperator = PG_GETARG_OID(1); <|endoftext|>"}
{"context": "\t{\n\t\tMemoryContext oldcontext = MemoryContextSwitchTo(estate->es_query_cxt);\n\t\tMemoryContextSwitchTo(oldcontext);\n\tAssert(resultRelInfo->ri_RootResultRelInfo);\n\t\t\tresultRelInfo->ri_RootToChildMap =", "partial_line": "return perminf", "completion": "return perminfo->updatedCols; <|endoftext|>"}
{"context": "\ttext\t   *result = cstring_to_text(json);\nDatum\n{\n\tpq_begintypsend(&buf);\n\tPG_RETURN_TEXT_P(cstring_to_text_with_len(str, nbytes));", "partial_line": "JsonTypeCategory tcat", "completion": "JsonTypeCategory tcategory, Oid outfuncoid, <|endoftext|>"}
{"context": "\tfor (filename = output_files; *filename != NULL; filename++)\n\t\t\t\t\"-----------------------------------------------------------------\\n\"\n\t\tfclose(fp);\nstatic void\n{", "partial_line": "if (find_my_exec(argv0,", "completion": "if (find_my_exec(argv0, exec_path) < 0) <|endoftext|>"}
{"context": "int\nmain(void)", "partial_line": "fmtlong(-8494493, \"+++$$$$$$", "completion": "fmtlong(-8494493, \"+++$$$$$$$$$$$$$.##\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  container,\n\t}\n\t\t\ttext\t   *subscr = DatumGetTextPP(path[i]);\n\t\t\tjbvp = getKeyJsonValueFromContainer(container,\n\t\t\t\t\t\t\t\t\t\t\t\tVARDATA_ANY(subscr),", "partial_line": "in", "completion": "int\t\t\tlindex; <|endoftext|>"}
{"context": "\treturn slot_updated;\n{\n\tTupleTableSlot *tupslot;\n\tbool\t\tsome_slot_updated = false;\n\tbool\t\tstarted_tx = false;", "partial_line": "d = slot_getattr", "completion": "d = slot_getattr(tupslot, ++col, &isnull); <|endoftext|>"}
{"context": "                break;\n                    if (ret < 0) return ret;\n                break;\n                lab2:\n                    if (ret < 0) return ret;", "partial_line": "goto l", "completion": "goto lab1; <|endoftext|>"}
{"context": "\t\tpam_passwd = NULL;\t\t\n\t}\n\t\tpam_passwd = NULL;\t\t\n\t\tif (!pam_no_password)\n\t\t\t\t\t\t\tpam_strerror(pamh, retval))));", "partial_line": "return pam_no_p", "completion": "return pam_no_password ? STATUS_EOF : STATUS_ERROR; <|endoftext|>"}
{"context": "#include \"utils/jsonpath.h\"\n#include \"utils/xml.h\"\n#define EEO_CASE(name)\t\tCASE_##name:\n#define EEO_CASE(name)\t\tcase name:\n#endif\t\t\t\t\t\t\t", "partial_line": "d", "completion": "do { \\ <|endoftext|>"}
{"context": "\tpathnode->path.startup_cost = subpath->startup_cost +\n\t\ttarget->cost.startup;\n\t\t\t\t\t\t\t RelOptInfo *rel,\n\tsort->nPresortedCols = presorted_keys;\n\treturn sort;", "partial_line": "RelOpt", "completion": "RelOptInfo *rel, <|endoftext|>"}
{"context": "\t{\n\t\t\tbeentry->st_activity_raw[0] = '\\0';\n\t{\n\tif ((beentry->st_state == STATE_RUNNING ||\n\t\tint\t\t\tusecs;", "partial_line": "if (s", "completion": "if (state == STATE_RUNNING) <|endoftext|>"}
{"context": "PQExpBuffer\n\tPQconninfoOption *connOptions;\n\t\tpg_fatal(\"out of memory\");\n\tfor (PQconninfoOption *opt = connOptions; opt && opt->keyword; opt++)\n\t\tappendPQExpBuffer(&conninfo_buf, \"%s=\", opt->keyword);", "partial_line": "appendPQExpBuffer(&conninfo_bu", "completion": "appendPQExpBuffer(&conninfo_buf, \"%s=\", \"dbname\"); <|endoftext|>"}
{"context": "\twhile (segment != endsegment)\n\t\tSlruDeleteSegment(MultiXactMemberCtl, segment);\n\t\telse\n\tSimpleLruTruncate(MultiXactOffsetCtl,\n\t\t\t\t\t  MultiXactIdToOffsetPage(PreviousMultiXactId(newOldestMulti)));", "partial_line": "Mult", "completion": "MultiXactId oldestMulti; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   Oid mytypid,\n\t\t\t\t\t\t   int expected_parents)\n\t\ttargetrelation = relation_open(myrelid, AccessExclusiveLock);\n\t\t{\n\t\t\tchild_oids = find_all_inheritors(myrelid, AccessExclusiveLock,", "partial_line": "find_inheritance_children", "completion": "find_inheritance_children(myrelid, NoLock) != NIL) <|endoftext|>"}
{"context": "\t\treturn false;\n\tif (debug_query_string == NULL)\n\t\tbackend_type_str = MyBgworkerEntry->bgw_type;\n\t{\n\t\tp++;", "partial_line": "padding *", "completion": "padding *= paddingsign; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t MergeWhenClause *mergeWhenClause,\n\tRangeTblEntry *targetRelRTE,\n\t\t\t   mergeWhenClause->commandType == CMD_NOTHING);", "partial_line": "mergeWhenClause->comma", "completion": "mergeWhenClause->commandType == CMD_NOTHING); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  &context);\n\t\t\t\t\t\t\t  &context);\n\t\t\tcontext.paramids = bms_add_members(context.paramids, scan_params);\n\t\t\t\tcontext.paramids = bms_add_members(context.paramids,\n\t\t\t}", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tAssert(len == bytes_encrypted);\n\t\tif (PqGSSResultNext < PqGSSResultLength)\n\t\t\tPqGSSRecvLength += ret;\n\t\t\treturn ret;\n\t\t\t{", "partial_line": "if", "completion": "if (ret < 0) <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\tbreak;\n\t\tdefault:\n\t\t\telog(ERROR, \"unrecognized SQL/JSON expression op %d\",\n\t\t*op->resnull = true;", "partial_line": "else if (jsexpr-", "completion": "else if (jsexpr->on_error->btype != JSON_BEHAVIOR_ERROR) <|endoftext|>"}
{"context": "\tPLy_spi_subtransaction_begin(oldcontext, oldowner);\n\t\t\t\tereport(ERROR,\n\t\t\t\tPy_DECREF(ret);\n\t\t\t\tPLy_input_setup_tuple(&cursor->result, SPI_tuptable->tupdesc,\n\t\t}", "partial_line": "PG_END_", "completion": "PG_END_TRY(); <|endoftext|>"}
{"context": "\treturn true;\nFinishWalRecovery(void)\n\t\tlastRecTLI = CheckPointTLI;\n\t\tInArchiveRecovery = false;\n\t}", "partial_line": "if (endOfLog % XLOG", "completion": "if (endOfLog % XLOG_BLCKSZ != 0) <|endoftext|>"}
{"context": "\t\t{\nstatic Node *\n\tif (location < 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"JSON_FUNCTION\");\n\t\tFuncExpr   *fexpr = makeFuncExpr(F_CONVERT_TO, BYTEAOID,", "partial_line": "fexpr->l", "completion": "fexpr->location = location; <|endoftext|>"}
{"context": "static const symbol s_16_0[3] = { 0xE0, 0xAF, 0x80 };\n{ 3, s_16_0, -1, -1, 0},\nstatic const symbol s_17_6[9] = { 0xE0, 0xAF, 0x81, 0xE0, 0xAE, 0x9F, 0xE0, 0xAF, 0x88 };\nstatic const symbol s_17_9[15] = { 0xE0, 0xAF, 0x86, 0xE0, 0xAE, 0xA9, 0xE0, 0xAF, 0x81, 0xE0, 0xAE, 0xAE, 0xE0, 0xAF, 0x8D };\nstatic const symbol s_17_16[18] = { 0xE0, 0xAE, 0xAA, 0xE0, 0xAE, 0x9F, 0xE0, 0xAE, 0xBF, 0xE0, 0xAE, 0xA4, 0xE0, 0xAE, 0xBE, 0xE0, 0xAE, 0xA9 };", "partial_line": "static const symbol s_17_17[12] = { 0xE0, 0", "completion": "static const symbol s_17_17[12] = { 0xE0, 0xAF, 0x81, 0xE0, 0xAE, 0x9F, 0xE0, 0xAF, 0x88, 0xE0, 0xAE, 0xAF }; <|endoftext|>"}
{"context": "\tdouble\t\tcoord;\n\tout->hasPrefix = true;\n\tout->nodeLabels = NULL;\t\t\n\tout->mapTuplesToNodes = palloc(sizeof(int) * in->nTuples);\n\tfor (i = 0; i < in->nkeys; i++)", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\telog(ERROR, \"expected single-column result descriptor for non-composite SETOF result\");\n\t\t\ttuplestore_begin_heap(rsi->allowedModes & SFRM_Materialize_Random,\n\t\t\t\t\t\t\t\t  \"PL/Perl return_next temporary cxt\",\n\t\t\t\t\t\t\t\t  ALLOCSET_DEFAULT_SIZES);\n\t\tif (!(SvOK(sv) && SvROK(sv) && SvTYPE(SvRV(sv)) == SVt_PVHV))", "partial_line": "current_call_da", "completion": "current_call_data->ret_tdesc); <|endoftext|>"}
{"context": "\tprstate->nredirected++;\n\tprstate->hastup = true;\n}\nheap_prune_record_dead_or_unused(PruneState *prstate, OffsetNumber offnum,\nstatic void", "partial_line": "Assert(!prstate->proc", "completion": "Assert(!prstate->processed[offnum]); <|endoftext|>"}
{"context": "static const symbol s_2_1410[7] = { 'p', 'a', 'n', 'i', 'j', 'o', 'm' };\nstatic const symbol s_2_1415[5] = { 's', 'i', 'j', 'o', 'm' };\nstatic const symbol s_2_1437[4] = { 'i', 'n', 'o', 'm' };\nstatic const symbol s_2_1438[5] = { 'c', 'i', 'n', 'o', 'm' };\nstatic const symbol s_2_1453[4] = { 'e', 's', 'o', 'm' };", "partial_line": "static const symbol s_2_1456", "completion": "static const symbol s_2_1456[4] = { 'a', 't', 'o', 'm' }; <|endoftext|>"}
{"context": "        z->bra = z->c;\n        if (z->c == z->l || z->p[z->c] != 'y') goto lab1;\n                int c5 = z->c;\n                if (in_grouping_U(z, g_v, 97, 121, 0)) goto lab4;\n        goto lab0;", "partial_line": "if (z->c > z->lb)", "completion": "if (z->c > z->lb) return 0; <|endoftext|>"}
{"context": "icregexeqjoinsel(PG_FUNCTION_ARGS)\n{\n}\nDatum\n}", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "{\n\tbool\t\tis_missing = false;\n\taclresult = pg_attribute_aclcheck_ext(tableoid, attnum, roleid,\n\tif (aclresult == ACLCHECK_OK)\n\troleid = get_role_oid_or_public(NameStr(*rolename));", "partial_line": "privresult = column_privileg", "completion": "privresult = column_privilege_check(tableoid, colattnum, roleid, mode); <|endoftext|>"}
{"context": "\t\t\t\t\t\tmallocedval = ecpg_strdup(\"\", lineno);\n\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\tcase ECPGt_timestamp:", "partial_line": "ecpg_fr", "completion": "ecpg_free(str); <|endoftext|>"}
{"context": "\t\t\tminoff++;\n\t\t\t   partindices[maxoff] >= 0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t   partcollation,\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  partcollation,", "partial_line": "partition_rbound_datum_cmp(", "completion": "partition_rbound_datum_cmp(partsupfunc, <|endoftext|>"}
{"context": "\t\t\treturn \"Pc\";\n\t\t\treturn \"Po\";\n\t\t\treturn \"Sk\";\n\t\tcase PG_U_INITIAL_PUNCTUATION:\nstatic bool", "partial_line": "else i", "completion": "else if (code < tbl[mid].first) <|endoftext|>"}
{"context": "static void\n\t\tereport(ERROR,\nstatic void\n\tListCell   *cell;\n\t\tAcl\t\t   *old_acl;", "partial_line": "Oi", "completion": "Oid\t\t\townerId; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tconst char *data, int len,\n\t\t\t\t\t\t\tastreamer_archive_context context)\n\tastreamer_extractor *mystreamer = (astreamer_extractor *) streamer;\n\tswitch (context)\n\t\t\t\tif (mystreamer->link_map)", "partial_line": "create_file_for_ex", "completion": "create_file_for_extract(mystreamer->filename, <|endoftext|>"}
{"context": "}\nchar *\n\treturn MemoryContextAlloc(_SPI_current->savedcxt, size);\n}\n\tpfree(pointer);", "partial_line": "re", "completion": "return result; <|endoftext|>"}
{"context": "\tJoinType\tjointype = (JoinType) PG_GETARG_INT16(3);\n\t\tHeapTuple\tstatsTuple;\n\t\tget_join_variables(root, args, sjinfo, &leftvar, &rightvar, &reversed);\n\t\tresult = 1.0 - nullfrac;\n\t\tOid\t\t\teqop = get_negator(operator);", "partial_line": "col", "completion": "collation, <|endoftext|>"}
{"context": "\t\t\t\tUpdateChangedParamSet(splan, node->chgParam);\n\t\t\tbreak;\n\t\tcase T_BitmapAndState:\n\t\t\tbreak;\n\t\t\tExecReScanBitmapOr((BitmapOrState *) node);", "partial_line": "case T", "completion": "case T_TidScanState: <|endoftext|>"}
{"context": "\t}\n\tCurrentLocaleConv = worklconv;\n#ifdef WIN32\nstatic size_t\n\t\t\t\t const char *format, const struct tm *tm, locale_t locale)", "partial_line": "wformat, lengt", "completion": "wformat, lengthof(wformat)); <|endoftext|>"}
{"context": "\t\t\t\t\tcase OBJECT_CAST:\n\t\t\t\t\tcase OBJECT_DEFAULT:\n\t\t\t\t\tcase OBJECT_TRANSFORM:\n\t\t\t\t\t\telog(ERROR, \"unsupported object type: %d\", objtype);\naclcheck_error_col(AclResult aclerr, ObjectType objtype,", "partial_line": "(errcode(ERRCODE_INS", "completion": "(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE), <|endoftext|>"}
{"context": "\tmemset(state, 0, sizeof(*state));\n\t\t\telog(ERROR, \"SPGiST tuple to be replaced is not a placeholder\");", "partial_line": "Buff", "completion": "Buffer\t\tbuffer; <|endoftext|>"}
{"context": "fsm_search_avail(Buffer buf, uint8 minvalue, bool advancenext,\n\tPage\t\tpage = BufferGetPage(buf);\n\tint\t\t\tnodeno;\n\t{\n\twhile (nodeno < NonLeafNodesPerPage)", "partial_line": "if (childnode", "completion": "if (childnodeno < NodesPerPage && <|endoftext|>"}
{"context": "static int r_ending(struct SN_env * z);\n#ifdef __cplusplus\nstatic const symbol s_0_3[6] = { 0xD5, 0xA1, 0xD5, 0xAC, 0xD5, 0xAB };\nstatic const symbol s_0_9[8] = { 0xD5, 0xA1, 0xD5, 0xAF, 0xD5, 0xA1, 0xD5, 0xB6 };\nstatic const symbol s_0_13[8] = { 0xD5, 0xB8, 0xD6, 0x80, 0xD5, 0xA7, 0xD5, 0xB6 };", "partial_line": "static cons", "completion": "static const symbol s_0_19[4] = { 0xD5, 0xAB, 0xD5, 0xBE }; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   false,\t\n\t\t\t\t\t\t\t\t\t   ownerId,\n\t\t\t\t\t\t\t\t\t   ownerId);\n\t}\n\tsystable_endscan(scan);", "partial_line": "table_close(rel, RowExcl", "completion": "table_close(rel, RowExclusiveLock); <|endoftext|>"}
{"context": "};\n\t{p_iseqC, '-', A_NEXT, TPS_Null, 0, NULL},\nstatic const TParserStateActionItem actionTPS_InHostFirstDomain[] = {\n\t{NULL, 0, A_POP, TPS_Null, 0, NULL}\n\t{p_iseqC, ':', A_PUSH, TPS_InPortFirst, 0, NULL},", "partial_line": "{p_iseqC, '_', A_PUS", "completion": "{p_iseqC, '_', A_PUSH, TPS_InHostFirstAN, 0, NULL}, <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\tattno = var->varattno;\n\t\tif (attno == 0)\n\t\tOid\t\t\tindexoid = lfirst_oid(l);\n\t\tRelation\tidxRel;", "partial_line": "Form_pg_index i", "completion": "Form_pg_index idxForm; <|endoftext|>"}
{"context": "\t{\n\t\t\tremember_to_cleanup_directory(dirname, false);\n\t\tcase -1:\n{\n\tprintf(_(\"  -o, --output=DIRECTORY    output directory\\n\"));", "partial_line": "printf(_(\"      --no-man", "completion": "printf(_(\"      --no-manifest         suppress generation of backup manifest\\n\")); <|endoftext|>"}
{"context": "\t\tparent = gistGetParent(buildstate, childblkno);\n\tLockBuffer(buffer, GIST_EXCLUSIVE);\n\t\tif (ItemPointerGetBlockNumber(&(idxtuple->t_tid)) == childblkno)\n\t\tif (ItemPointerGetBlockNumber(&(idxtuple->t_tid)) == childblkno)\n\t\t}", "partial_line": "elog(ERROR, \"failed to re-", "completion": "elog(ERROR, \"failed to re-find parent for block %u\", childblkno); <|endoftext|>"}
{"context": "\t\t\t\t\t\tscratch2.d.make_readonly.value = resv;\n\t\t\t\t\telse\n\t\t\t\tExecInitExprRec(con->check_expr, state,\n\t\t}\n\tExprEvalStep scratch = {0};", "partial_line": "scratch.re", "completion": "scratch.resvalue = &state->resvalue; <|endoftext|>"}
{"context": "\t\t\t\t&& msecs > 0)\n\t\t\tPG_RETURN_NULL();\n\t\t{\n\t\t\t{\n\t\t\t\telse", "partial_line": "PG_", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "#include \"header.h\"\n#ifdef __cplusplus\n#endif", "partial_line": "static i", "completion": "static int r_verb_suffix(struct SN_env * z); <|endoftext|>"}
{"context": "\tif (!currentEventTriggerState)\n\tMemoryContext oldcxt;\n\t\tlappend(currentEventTriggerState->currentCommand->d.alterTable.subcmds, newsub);\n\tif (!currentEventTriggerState ||\n\t\toldcxt = MemoryContextSwitchTo(currentEventTriggerState->cxt);", "partial_line": "MemoryContext", "completion": "MemoryContext oldcxt; <|endoftext|>"}
{"context": "{\n\ttapeSpace = (int64) maxTapes * TAPE_BUFFER_OVERHEAD;\n{\n\t\tstate->outputTapes[state->nOutputTapes] = state->destTape;\ninit_slab_allocator(Tuplesortstate *state, int numSlots)", "partial_line": "if", "completion": "if (numSlots > 0) <|endoftext|>"}
{"context": "\t\t\tcase 'n':\n\t\t\tcase 'T':\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\tcase '?':", "partial_line": "strcmp(argv[optind", "completion": "strcmp(argv[optind - 1], \"-?\") == 0) <|endoftext|>"}
{"context": "\ttarget.objectSubId = 0;\n\ttarget.objectSubId = 0;\n\tfor (i = 0; i < nitems; i++)\n\trelation_close(target_table, NoLock);\n}", "partial_line": "Rela", "completion": "Relation\tpg_policy_rel; <|endoftext|>"}
{"context": "\t\t\tcase 'c':\n\t\t\t\t\tchar\t   *buf = pg_strdup(optarg);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'E':", "partial_line": "case", "completion": "case 'W': <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   struct adhoc_opts *options);\n\t\t*filename = pset.inputfile;\n#endif\n\tset_pglocale_pgservice(argv[0], PG_TEXTDOMAIN(\"psql\"));\n\tpset.queryFout = stdout;", "partial_line": "pset.popt.topt.unicode_header_linestyle = UNIC", "completion": "pset.popt.topt.unicode_header_linestyle = UNICODE_LINESTYLE_SINGLE; <|endoftext|>"}
{"context": "\t\t\t\tereport(ERROR,\n\t\t\tif (relation->rd_rel->relkind != RELKIND_MATVIEW)\n\t\t\t\tereport(ERROR,\n\t\t\tbreak;\n\taddress.objectId = RelationGetRelid(relation);", "partial_line": "get_object_a", "completion": "get_object_address_relobject(ObjectType objtype, List *object, <|endoftext|>"}
{"context": "\tif (needs_snapshot)\n{\n\tTransactionId xmin;\n\t\t\treturn;\n\tbuilder->xmin = running->oldestRunningXid;", "partial_line": "SnapBuildWaitSnapshot(running, builder->ini", "completion": "SnapBuildWaitSnapshot(running, builder->initial_xmin_horizon); <|endoftext|>"}
{"context": "\t\telse if (recoveryTarget == RECOVERY_TARGET_XID)\n\t\t\tereport(LOG,\n\t\t\tereport(LOG,\n\t\t\t\t(errmsg(\"requested timeline %u does not contain minimum recovery point %X/%X on timeline %u\",\n\t\t\t(errmsg_internal(\"next MultiXactId: %u; next MultiXactOffset: %u\",", "partial_line": "checkPoint.old", "completion": "checkPoint.oldestXid, checkPoint.oldestXidDB))); <|endoftext|>"}
{"context": "\t\treturn InvalidDumpId;\n\t\t\t\t\t\t\t  \"\", fout->remoteVersion, sql))\n\t{\n\t\t\tacls = acldefault;\n\t\t\taclDeps[nDeps++] = altDumpId;", "partial_line": "aclDumpId", "completion": "aclDumpId = createDumpId(); <|endoftext|>"}
{"context": "\t\t\t\tif (get_func_prokind(clist->oid) != PROKIND_PROCEDURE)\n\t\t\t\t\tcontinue;\n\t\tif (OidIsValid(result))\nLookupFuncName(List *funcname, int nargs, const Oid *argtypes, bool missing_ok)\n\t\t\telse", "partial_line": "func_signature_string(func", "completion": "func_signature_string(funcname, nargs, <|endoftext|>"}
{"context": "\t\t\t CachedPlan *cplan,\n\t\t\t\t\t\t\t\tdest, params, queryEnv, 0);\n\t\tAssert(queryDesc->planstate);\n\t{\n\tExecutorRun(queryDesc, ForwardScanDirection, 0);", "partial_line": "case C", "completion": "case CMD_DELETE: <|endoftext|>"}
{"context": "\tif (!es->analyze)\n\t\treturn;\n\tif (es->format != EXPLAIN_FORMAT_TEXT)\n\t{\n\t{", "partial_line": "BitmapHeapScanInstrumentation *si = &planstat", "completion": "BitmapHeapScanInstrumentation *si = &planstate->sinstrument->sinstrument[n]; <|endoftext|>"}
{"context": "\tAssert(!(state->flags & EEO_FLAG_IS_QUAL));\n\tret = ExecEvalExprSwitchContext(state, econtext, &isnull);\n}\n\tscratch.resnull = resnull;\n\t\t\t\t{", "partial_line": "case VAR_RETU", "completion": "case VAR_RETURNING_OLD: <|endoftext|>"}
{"context": "\tif (RelationUsesLocalBuffers(rel))\n\t{\n\t\tbuf_state = pg_atomic_read_u32(&buf_hdr->state);\n\t\tbuf_hdr = GetBufferDescriptor(buf - 1);\n\t\tbuf_state &= ~(BM_VALID | BM_DIRTY);", "partial_line": "bool\t\twait_complete = PG", "completion": "bool\t\twait_complete = PG_GETARG_BOOL(3); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\nstatic void setop_load_group(SetOpStatePerInput *input, PlanState *inputPlan,\n\tAssert(node->strategy == SETOP_HASHED);\n\tsetopstate->hashtable = BuildTupleHashTable(&setopstate->ps,", "partial_line": "node->", "completion": "node->cmpColIdx, <|endoftext|>"}
{"context": "\tqsort(result, *num_vars,\n\t\tstruct config_bool *conf = &ConfigureNamesBool[i];\n\t\tAssert(!found);\n\t\thentry->gucvar = gucvar;\n\tfor (i = 0; ConfigureNamesInt[i].gen.name; i++)", "partial_line": "struct config_generic *gucvar = &C", "completion": "struct config_generic *gucvar = &ConfigureNamesInt[i].gen; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   old_catalog_dir, new_db_dir, moved_db_dir);\n\t\t}\nstatic void\ntransfer_single_new_db(FileNameMap *maps, int size, char *old_tablespace)\n\tif (old_cluster.controldata.cat_ver < VISIBILITY_MAP_FROZEN_BIT_CAT_VER &&", "partial_line": "Assert(!v", "completion": "Assert(!vm_must_add_frozenbit); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\ttypid, typmod,\n\t\t}\n\t\tcolno++;\n\t\tforeach(ns, rtf->namespaces)\n\t\t\tAssert(IsA(r, ResTarget));", "partial_line": "ns_uri = transformExpr(pstate, r->val, EXPR_", "completion": "ns_uri = transformExpr(pstate, r->val, EXPR_KIND_FROM_FUNCTION); <|endoftext|>"}
{"context": "\t\t\treturn 0.0;\n\t\t\treturn 0.0;\t\t\t\nstatic Datum\n\tint64\t\tintresult;\n\t\t\t\tval;", "partial_line": "*t", "completion": "*tm = &tt; <|endoftext|>"}
{"context": "\t\tcase jpiKeyValue:\n\t\t\tbreak;\n\t\t\tif (v->content.like_regex.flags)\n\t\t\t\tif (v->content.like_regex.flags & JSP_REGEX_WSPACE)\n\t\t\t\t\tappendStringInfoChar(buf, 'x');", "partial_line": "jspGetR", "completion": "jspGetRightArg(v, &elem); <|endoftext|>"}
{"context": "\t\t\treturn FILE_ACTION_NONE;\n\t\t\telse\n\t\t\t\telse\n{\n\tfilehash_start_iterate(filehash, &it);", "partial_line": "i =", "completion": "i = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t AclMaskHow how, bool *is_missing)\n\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(table_oid));\n\tclassForm = (Form_pg_class) GETSTRUCT(tuple);\n\t{\n\t{", "partial_line": "case R", "completion": "case RELKIND_SEQUENCE: <|endoftext|>"}
{"context": "\tfor (i = 0; i < MaxOldestSlot; i++)\n\t{\n\t\t\tMultiXactIdPrecedes(thisoldest, oldestMXact))\n\t}\n\tMultiXactOffset prevOffsetStopLimit;", "partial_line": "LWLockAcquire(MultiX", "completion": "LWLockAcquire(MultiXactTruncationLock, LW_SHARED); <|endoftext|>"}
{"context": "\t{\n\t\tForeignKeyCacheInfo *fk = lfirst(cell);\n\ttrigrel = table_open(TriggerRelationId, RowExclusiveLock);\n\t\tAttrNumber\tmapped_conkey[INDEX_MAX_KEYS];\n\t\tOid\t\t\tconppeqop[INDEX_MAX_KEYS];", "partial_line": "int\t\t\tnu", "completion": "int\t\t\tnumfkdelsetcols; <|endoftext|>"}
{"context": "\t\t\t\t\tgoto bad_argument;\n\t\t\t\t}\n\t\t\tcase 'q':\n\t\t\t\t{\n\t\t\t\t\t\texit(EXIT_SUCCESS);", "partial_line": "config.", "completion": "config.filter_by_rmgr_enabled = true; <|endoftext|>"}
{"context": "\t\tsnprintf(dbfilename, MAXPGPATH, \"%u.tar\", db_cell->oid);\n\t\tif (file_exists_in_directory(subdirdbpath, dbfilename))\n\t\t{\n\t\t\t\tPQfinish(test_conn);\n\t\t\t\topts->cparams.dbname = connected_db;", "partial_line": "if (pfile", "completion": "if (pfile == NULL) <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#include \"utils/float.h\"\n\tbool\t\tkilledsomething = false;", "partial_line": "Assert(so->c", "completion": "Assert(so->curBlkno != InvalidBlockNumber); <|endoftext|>"}
{"context": "\tfor (i = 0; i < SLRU_NUM_ELEMENTS; i++)\n{\n\telse if (!LWLockConditionalAcquire(&stats_shmem->lock, LW_EXCLUSIVE))\n\t\tPgStat_SLRUStats *sharedent = &stats_shmem->stats[i];\n#define SLRU_ACC(fld) sharedent->fld += pendingent->fld", "partial_line": "SLRU_ACC(block", "completion": "SLRU_ACC(blocks_hit); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\tappendStringInfoString(buf, \"MERGE_ACTION()\");\n\t\t\t\t{\n\t\t\t\tget_rule_expr((Node *) na->arg, context, showimplicit);\n\t\t\t\tget_rule_expr_paren(arg1, context, true, node);", "partial_line": "get_base_element_ty", "completion": "get_base_element_type(exprType(arg2))), <|endoftext|>"}
{"context": "\t\telse if (bc)\n\t\t{\n\t\t{\n\t}\n\t{", "partial_line": "return DTERR_BAD", "completion": "return DTERR_BAD_FORMAT; <|endoftext|>"}
{"context": "#include \"varatt.h\"\nPG_FUNCTION_INFO_V1(test_shm_mq_pipelined);", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\tTcl_ListObjAppendElement(interp, obj,\n\tTcl_ListObjAppendElement(interp, obj,\n\tUTF_END;\n\t}\n\t\tTcl_ListObjAppendElement(interp, obj,", "partial_line": "Tcl_NewStringOb", "completion": "Tcl_NewStringObj(UTF_E2U(edata->schema_name), -1)); <|endoftext|>"}
{"context": "\t\t\tAssert(outer_map.merged_indexes[outer_index] == -1 &&\n\t\t\t\t   outer_map.merged[outer_index] == false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t &next_index);\n\t\t\t\tgoto cleanup;\n\t\t\t\tgoto cleanup;", "partial_line": "inne", "completion": "inner_default, <|endoftext|>"}
{"context": "            {   int ret = slice_from_s(z, 4, s_13);\n                if (ret <= 0) return ret;\n            }\n                {   int ret = slice_del(z);\n                    case 1:", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase RESTART_COMMAND:\n\t\t\tdo_restart();\n\t\t\tbreak;\n\t\t\tbreak;\n\t\tcase LOGROTATE_COMMAND:", "partial_line": "pgwin32_", "completion": "pgwin32_doRegister(); <|endoftext|>"}
{"context": "\t\tif (tbinfo->relkind == RELKIND_MATVIEW)\n\t\t\t\t\t\t\t\t\t\t\"pg_catalog.pg_class\",\n\t\t\t\tif (tbinfo->attmissingval[j][0] != '\\0')\n\t\t\t\t\tappendStringLiteralAH(q, tbinfo->attnames[j], fout);\n\t\t\t tbinfo->relkind == RELKIND_FOREIGN_TABLE ||", "partial_line": "\"UPDATE pg", "completion": "\"UPDATE pg_catalog.pg_attribute\\n\" <|endoftext|>"}
{"context": "}\n\tMultirangeIOData *cache;\n\tRangeType **ranges;\n\t\tuint32\t\trange_len = pq_getmsgint(buf, 4);\n\t\tconst char *range_data = pq_getmsgbytes(buf, range_len);", "partial_line": "ret = make_multirange(mltrngtypoid, cache-", "completion": "ret = make_multirange(mltrngtypoid, cache->typcache->rngtype, <|endoftext|>"}
{"context": "\tif (!CheckServerVersionForStreaming(conn))\n\tif (stream->replication_slot != NULL)\n\telse\n\tif (stream->sysidentifier != NULL)\n\t\tif (stream->timeline > servertli)", "partial_line": "if (PQnfields(res) != 2 || PQntu", "completion": "if (PQnfields(res) != 2 || PQntuples(res) != 1) <|endoftext|>"}
{"context": "\t\t  struct state *to,\n\trp->tmp = rp;\t\t\t\t\n\tstruct arc *a;\n\tstruct state *to;\n\t{", "partial_line": "ret", "completion": "return; <|endoftext|>"}
{"context": "\t\t\tif (!vattr->attisdropped)\n\t\t\tif (slot->tts_isnull[i])\n\t*op->resnull = false;\n\t\t(op->d.var.varreturningtype == VAR_RETURNING_NEW &&\n\tif (unlikely(*op->resnull))", "partial_line": "elog(ERROR, \"failed to fetch a", "completion": "elog(ERROR, \"failed to fetch attribute from slot\"); <|endoftext|>"}
{"context": "\ttext\t   *str = PG_GETARG_TEXT_PP(0);\n\ttext\t   *pattern = PG_GETARG_TEXT_PP(1);\n\tint\t\t\tn = 1;\n\t\t\t\t\t errmsg(\"invalid value for parameter \\\"%s\\\": %d\",\n\t\tn = PG_GETARG_INT32(3);", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tOperatorElement opstack[STACKDEPTH];\n\t\t\tdefault:\n\t\t\t\t\t\t\t errmsg(\"syntax error in tsquery: \\\"%s\\\"\",\n\t\t}\n\tif (*pos >= nnodes)", "partial_line": "curit", "completion": "curitem->oper == OP_OR || <|endoftext|>"}
{"context": "\t\t\tfkconstraint->fk_upd_action = conform->confupdtype;\n\t\t\tfkconstraint->old_conpfeqop = NIL;\n\t\t\t\tfkconstraint->fk_attrs = lappend(fkconstraint->fk_attrs,\n\t\t\t\t\t\t\t\t\t\t\t\t makeString(NameStr(att->attname)));\n\t\t\trefdRel = table_open(fk->confrelid, ShareRowExclusiveLock);", "partial_line": "conk", "completion": "conkey, <|endoftext|>"}
{"context": "\t{\n\t},\n\t{\n\t}\n};", "partial_line": "if (doserrors[", "completion": "if (doserrors[i].winerr == e) <|endoftext|>"}
{"context": "\t\t\tif (!ecpg_check_PQresult(results, lineno, con->connection, ECPG_COMPAT_PGSQL))\n{\n\t\treturn;\n\tif (sqlstate == NULL)\n\t\tsqlstate = ECPG_SQLSTATE_ECPG_INTERNAL_ERROR;", "partial_line": "sqlcode = ECPG_WARNING_UNK", "completion": "sqlcode = ECPG_WARNING_UNKNOWN_PORTAL; <|endoftext|>"}
{"context": "\t}\nvoid\n\t\tappendStringInfo(buf, \"%\" PRId64, pageno);\n\t\tappendStringInfo(buf, \"%u offset %u nmembers %d: \", xlrec->mid,\n\t\tfor (i = 0; i < xlrec->nmembers; i++)", "partial_line": "appendStringInfo(buf, \"", "completion": "appendStringInfo(buf, \"offsets [%u, %u), members [%u, %u)\", <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t(hmultiline && (format != &pg_asciiformat_old)))\n\t\t\t\t\tswidth++;\n\t\t\t\tint\t\t\ttarget_width = dwidth,\n\t\t\t\t\t\t\tbytes_to_output,", "partial_line": "if ((opt_bo", "completion": "if ((opt_border > 1) || <|endoftext|>"}
{"context": "{\n\tRelids\t\tnominal_inner_relids;\n\t}\n\tif (sjinfo && sjinfo->ojrelid != 0)\n\twhile ((i = bms_next_member(matching_ecs, i)) >= 0)", "partial_line": "if (!ec->", "completion": "if (!ec->ec_broken) <|endoftext|>"}
{"context": "\treturn true;\n\t\treturn false;\n\t\t{\n\t\t\t\t\t\t\t\terrmsg);\n\tencoded_server_signature = read_attr_value(&input, 'v',", "partial_line": "if (!decoded_se", "completion": "if (!decoded_server_signature) <|endoftext|>"}
{"context": "\t\t\t\t\tsaopexpr->args = list_make2(arg1, arrexpr);\n\t\t\t\t\tresult = (Expr *) saopexpr;\n\t\t\t\t\t\t\t\t\t\t\t   false,\n\t\t\t\t\t\t\t\t\t\t\t   arg1, elem,\n\t\t\t\t}", "partial_line": "result = mak", "completion": "result = make_opclause(operoid, <|endoftext|>"}
{"context": "\t\tif (con->contype != CONSTRAINT_NOTNULL)\n\t}\n\ttable_close(pg_constraint, AccessShareLock);\n\tattnum = get_attnum(relid, colname);\n\tif (attnum <= InvalidAttrNumber)", "partial_line": "pg_constraint = table_open(ConstraintRe", "completion": "pg_constraint = table_open(ConstraintRelationId, AccessShareLock); <|endoftext|>"}
{"context": "\t\tprintTableAddCell(&cont, PQgetvalue(res, i, 2), false, false);\n\t\t\t\tappendPQExpBufferStr(&buf,\n\t\t\t\t\t\t\t  \"\\nFROM pg_catalog.pg_class c,\\n\"\n\t\t\t\t\t\t\t  \"     pg_catalog.pg_publication_rel pr\\n\"\n\t\t\t\t\t\t\t  \"  AND c.oid = pr.prrelid\\n\"", "partial_line": "\"  AND pr.prpubid", "completion": "\"  AND pr.prpubid = '%s'\\n\" <|endoftext|>"}
{"context": "\tTimeADT\t\ttime2 = PG_GETARG_TIMEADT(1);\n\t\tPG_RETURN_INT32(-1);\nDatum\ntime_hash_extended(PG_FUNCTION_ARGS)\n{", "partial_line": "TimeADT", "completion": "TimeADT\t\ttime1 = PG_GETARG_TIMEADT(0); <|endoftext|>"}
{"context": "{ 4, s_6_5, -1, 1, 0},\n{ 3, s_6_6, -1, 9, 0},\n{ 6, s_6_15, -1, 2, 0},\n{ 4, s_6_18, -1, 1, 0},\n{ 3, s_6_19, -1, 1, 0},", "partial_line": "{ 4, s_6_28, -1,", "completion": "{ 4, s_6_28, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\tif (isCommit)\n\t\t\tmyTempNamespace = InvalidOid;\n\t\t\tbaseSearchPathValid = false;\t\n\t{\n\tobject.objectId = tempNamespaceId;", "partial_line": "PERFORM", "completion": "PERFORM_DELETION_QUIETLY | <|endoftext|>"}
{"context": "\tif (!stup.tuple)\n\t\treturn NULL;\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\tMemoryContext oldcontext = MemoryContextSwitchTo(base->sortcontext);\n\t\tMemoryContextSwitchTo(oldcontext);", "partial_line": "*val = stup.d", "completion": "*val = stup.datum1; <|endoftext|>"}
{"context": "{\n\tprobin = TextDatumGetCString(tmp);\n\tForm_pg_proc proc;\n\tList\t   *raw_parsetree_list;\n\tListCell   *lc;", "partial_line": "bool\t\thasp", "completion": "bool\t\thaspolyarg; <|endoftext|>"}
{"context": "\t\t\t\tnelems = list_length(((ArrayExpr *) arraynode)->elements);\n}\n\t{true, none, none, none, true, true},\t\n\t{true, none, none, none, none, none},\t\n\tOpExpr\t   *pred_opexpr,", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t\t}\n\t\t\tRecordPageWithFreeSpace(vacrel->rel, blkno, freespace);\n\t\t\t\tblkno - next_fsm_block_to_vacuum >= VACUUM_FSM_EVERY_PAGES)\n\t\t\t\tnext_fsm_block_to_vacuum = blkno;\n\t\t\t}", "partial_line": "vacrel->blkno", "completion": "vacrel->blkno = InvalidBlockNumber; <|endoftext|>"}
{"context": "\t\tcase T_Hash:\n\t\t\tbreak;\n\t\tappendStringInfoString(es->str, pname);\n\t\t\tExplainPropertyText(\"Operation\", operation, es);\n\t\tif (custom_name)", "partial_line": "ExplainPropertyText(\"Custom Plan Provider\"", "completion": "ExplainPropertyText(\"Custom Plan Provider\", custom_name, es); <|endoftext|>"}
{"context": "\t\tuse_own_xacts = true;\n\t\tListCell   *cur;\n\t\tin_vacuum = true;\n\t\tVacuumFailsafeActive = false;\n\t\tVacuumSharedCostBalance = NULL;", "partial_line": "foreach(c", "completion": "foreach(cur, relations) <|endoftext|>"}
{"context": "#include \"storage/fd.h\"\n#define WC_BUF_LEN  3\n}\n\t\treturn false;", "partial_line": "stp->line", "completion": "stp->lineno = 0; <|endoftext|>"}
{"context": "\tchar\t   *pwexpiry = NULL;\n\t\t{\n\t\t\tcase 'd':\n\t\t\t\tbreak;\n\t\t\t\tcreaterole = TRI_YES;", "partial_line": "c", "completion": "case 'S': <|endoftext|>"}
{"context": "{ 14, s_1_9, 8, 1, 0},\n{ 10, s_1_13, -1, 1, 0},\n{ 14, s_1_16, -1, 1, 0},\n{ 6, s_1_24, -1, 1, 0},\n{ 6, s_1_30, -1, 1, 0},", "partial_line": "{ 16, s", "completion": "{ 16, s_1_34, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\tint\t\t\tstrategy;\n\t\t\tif (contain_volatile_functions((Node *) rightop))\n\t\t\tbool\t\telembyval;\n\t\t\tarrval = DatumGetArrayTypeP(arr->constvalue);\n\t\t\t\tConst\t   *elem_expr;", "partial_line": "return PARTCLAUSE", "completion": "return PARTCLAUSE_MATCH_CONTRADICT; <|endoftext|>"}
{"context": "}\nvoid\nvoid\n\tif (!SimpleLruDoesPhysicalPageExist(CommitTsCtl, pageno))\n\t\tint\t\t\tslotno;", "partial_line": "LWLockAcquire", "completion": "LWLockAcquire(lock, LW_EXCLUSIVE); <|endoftext|>"}
{"context": "\tdatum = SysCacheGetAttrNotNull(PARTRELID, tuple,\n\t{\n\t\tchar\t   *exprString;\n\t\texprString = TextDatumGetCString(datum);\n\t\tpfree(exprString);", "partial_line": "key->partattrs = (AttrN", "completion": "key->partattrs = (AttrNumber *) palloc0(key->partnatts * sizeof(AttrNumber)); <|endoftext|>"}
{"context": "{ 5, s_2_70, -1, 1, 0},\n{ 6, s_2_72, -1, 1, 0},\n{ 4, s_2_75, -1, 1, 0},\n{ 3, s_2_90, -1, 1, 0},\n{ 4, s_2_92, -1, 2, 0},", "partial_line": "{ 7, s", "completion": "{ 7, s_2_95, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tcase T_NullTest:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tif (clause_is_strict_for(clause,\n\t\t\t\t\t\t}\n\t\t\t\treturn false;\t", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  checkoption);\n\t}\n\t}\n\tdestroyPQExpBuffer(query);\nstatic int", "partial_line": "c = obj", "completion": "c = obj + strlen(obj) - 1; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   pq_getmsgbytes(msgBuf, argsize),\n\t\t\tOid\t\t\ttypreceive;\n\t\t\t\tbufptr = NULL;\n\t\telse\n\t\t\t\t\t errmsg(\"unsupported format code: %d\", aformat)));", "partial_line": "return (int16) pq_g", "completion": "return (int16) pq_getmsgint(msgBuf, 2); <|endoftext|>"}
{"context": "\t\t\t\ttm->tm_year = val;\n\t\t\telse if (DateOrder == DATEORDER_DMY)\n\t\t\t\t*tmask = DTK_M(MONTH);\n\t\t\t\t{\n\t\t\t\tif (flen >= 3 && *is2digits)", "partial_line": "*tma", "completion": "*tmask = DTK_M(DAY); <|endoftext|>"}
{"context": "#line 19 \"array.pgc\"\n\t\tsprintf(str, \"2000-1-1%d\\n\", j);\n\t\tin[j] = *inter;\n        { ECPGconnect(__LINE__, 0, \"ecpg1_regression\" , NULL, NULL , NULL, 0); \n#line 53 \"array.pgc\"", "partial_line": "#line 55", "completion": "#line 55 \"array.pgc\" <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\tDatum *array_data, int nitems,\n\t\t\t\t\t\t\t\t\t\t\t\tOid operator, TypeCacheEntry *typentry);\nstatic float *calc_hist(const float4 *hist, int nhist, int n);\n\t\tReleaseVariableStats(vardata);\n\t\tReleaseVariableStats(vardata);", "partial_line": "selec = mcelem_array_contain", "completion": "selec = mcelem_array_contain_overlap_selec(sslot.values, <|endoftext|>"}
{"context": "\t\t\t\tmask = NULL;\n\t\t}\n}\n#include <winsock2.h>\nint", "partial_line": "if (sock == INVA", "completion": "if (sock == INVALID_SOCKET) <|endoftext|>"}
{"context": "\tif (lc_monetary)\n\tif (lang)\n\t\tsetenv(\"LC_MESSAGES\", lc_messages, 1);\n\tpg_free(lc_monetary);\n\tif (GET_MAJOR_VERSION(cluster->major_version) <= 902)", "partial_line": "if (got_", "completion": "if (got_tli && got_log_id && got_log_seg) <|endoftext|>"}
{"context": "\t}\n\tTimestamp\ttimestamp = PG_GETARG_TIMESTAMP(1);\n\tlowunits = downcase_truncate_identifier(VARDATA_ANY(units),\n\ttype = DecodeUnits(0, lowunits, &val);\n\t\t\t\tcase DTK_HOUR:", "partial_line": "re", "completion": "result = 0; <|endoftext|>"}
{"context": "\troleid = get_role_oid_or_public(NameStr(*username));\n\tprivresult = column_privilege_check(tableoid, colattnum, roleid, mode);\nhas_column_privilege_id_name_name(PG_FUNCTION_ARGS)\n\tif (privresult < 0)\nDatum", "partial_line": "text\t   *tablename = PG_G", "completion": "text\t   *tablename = PG_GETARG_TEXT_PP(1); <|endoftext|>"}
{"context": "\tfeedbackXmin = pq_getmsgint(&reply_message, 4);\n\tif (message_level_is_interesting(DEBUG2))\n\t\treplyTimeStr = pstrdup(timestamptz_to_str(replyTime));\n\t{\n\t\t&& !TransactionIdIsNormal(feedbackCatalogXmin))", "partial_line": "!TransactionIdInRecentPast(feedback", "completion": "!TransactionIdInRecentPast(feedbackCatalogXmin, feedbackCatalogEpoch)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   bslot->buffer);\nheapam_tuple_insert(Relation relation, TupleTableSlot *slot, CommandId cid,\n\t\t\t\t\tint options, BulkInsertState bistate)\n\ttuple->t_tableOid = slot->tts_tableOid;\n\tHeapTupleHeaderSetSpeculativeToken(tuple->t_data, specToken);", "partial_line": "options |= HEAP_I", "completion": "options |= HEAP_INSERT_SPECULATIVE; <|endoftext|>"}
{"context": "{\n\t\trvcontext->wrap_option = REPLACE_WRAP_NONE;\n\t}\n\tAssert(parse->setOperations == NULL);\n\t\t\totherrte->groupexprs = (List *)", "partial_line": "pullup_replace_vars((Node *) otherr", "completion": "pullup_replace_vars((Node *) otherrte->groupexprs, <|endoftext|>"}
{"context": "\t\t\tvalues[Anum_pg_init_privs_objsubid - 1] = Int32GetDatum(objsubid);\n\t\t\tvalues[Anum_pg_init_privs_privtype - 1] =\n\t\t\t\t\t\t\t\t\t  nnewmembers, newmembers);\n\tsystable_endscan(scan);\n\tbool\t\tisNull;", "partial_line": "ScanKeyI", "completion": "ScanKeyInit(&key[2], <|endoftext|>"}
{"context": "\t\tbool\t\tisNull;\n\t\t{\n\t\telse if (isNull)\t\t\n\t\t\telse\n\t\t\tif (!(scankey->sk_flags & SK_BT_DESC))", "partial_line": "return r", "completion": "return result; <|endoftext|>"}
{"context": "\tDecodedXLogRecord *r;\n\tsize += offsetof(DecodedXLogRecord, blocks[0]);\n#define COPY_HEADER_FIELD(_dst, _size)\t\t\t\\\n\tuint8\t\tblock_id;\n\tdecoded->record_origin = InvalidRepOriginId;", "partial_line": "datat", "completion": "datatotal = 0; <|endoftext|>"}
{"context": "\t\tPG_RETURN_NULL();\nchar *\n\tHeapTuple\ttup;\n\tSnapshot\tsnapshot = RegisterSnapshot(GetTransactionSnapshot());\n\t{", "partial_line": "generate_qualified_type_", "completion": "generate_qualified_type_name(conForm->contypid), <|endoftext|>"}
{"context": "\t\t\t\tappendPQExpBuffer(&sql, \"%s,\", fmtId(cell->val));\n\t}\n\tif (admins.head != NULL)\n\t\t\t\tappendPQExpBufferStr(&sql, fmtId(cell->val));\n\t{", "partial_line": "help(", "completion": "help(const char *progname) <|endoftext|>"}
{"context": "#include \"optimizer/optimizer.h\"\n#include \"utils/lsyscache.h\"", "partial_line": "Attr", "completion": "AttrNumber\tlast_outer; <|endoftext|>"}
{"context": "\t\t\t\tAssert(relation->rd_backend != INVALID_PROC_NUMBER);\n\t\t\telog(ERROR, \"invalid relpersistence: %c\",\n\trelation->rd_fkeyvalid = false;\n\trelation->rd_partdesc_nodetached = NULL;\n\trelation->rd_partdesc_nodetached_xmin = InvalidTransactionId;", "partial_line": "relati", "completion": "relation->rd_partcheckcxt = NULL; <|endoftext|>"}
{"context": "}\n\t{\ninitRandomState(pg_prng_state *state)\n\t\t\t\tuniform,\n\tuniform = 1.0 - pg_prng_double(state);", "partial_line": "rand = -log(cut + (1.0 - cut) * unifo", "completion": "rand = -log(cut + (1.0 - cut) * uniform) / parameter; <|endoftext|>"}
{"context": "\t\toldcxt = MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);\n\t\tbool\t\tnulls[PG_PARTITION_TREE_COLS] = {0};\n\t\tchar\t\trelkind = get_rel_relkind(relid);\n\tFuncCallContext *funcctx;\n\tList\t   *ancestors;", "partial_line": "funcctx = SRF_P", "completion": "funcctx = SRF_PERCALL_SETUP(); <|endoftext|>"}
{"context": "\t\t\t\t\t \"        ON (c.relnamespace = n.oid)\"\n\t\t\t\t\t\tnspname, relname)));\n\t\tresetStringInfo(&cmd);\n\t\t\t\t\t\t \"  (CASE WHEN (array_length(gpt.attrs, 1) = c.relnatts)\"\n\t\tpubres = walrcv_exec(LogRepWorkerWalRcvConn, cmd.data,", "partial_line": "lengthof(att", "completion": "lengthof(attrsRow), attrsRow); <|endoftext|>"}
{"context": "\tSimpleStringListCell *subcell = NULL;\n\tSimpleStringListCell *replslotcell = NULL;\n\t\treplslotcell = opt->replslot_names.head;\n\t\t\tpubcell = pubcell->next;\n\tif (PQstatus(conn) != CONNECTION_OK)", "partial_line": "retu", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t   \"\\nInitialization options:\\n\"\n\t\t   \"  -n, --no-vacuum          do not run VACUUM during initialization\\n\"\n\t\t   \"  --tablespace=TABLESPACE  create tables in the specified tablespace\\n\"\n\t\t   \"  -N, --skip-some-updates  skip updates of pgbench_tellers and pgbench_branches\\n\"\n\t\t   \"  -c, --client=NUM         number of concurrent database clients (default: 1)\\n\"", "partial_line": "\"", "completion": "\"                           protocol for submitting queries (default: simple)\\n\" <|endoftext|>"}
{"context": "\tTocEntry   *te = getTocEntryByDumpId(AH, id);\n\tAH->WriteBytePtr(AH, wasSet);\n\t{\n\tint\t\t\toff;\n\tif (AH->version < K_VERS_1_7)", "partial_line": "return K_OFFSET_", "completion": "return K_OFFSET_POS_NOT_SET; <|endoftext|>"}
{"context": "\t\t\t(*segno)++;\n\t\t\t\t\t(errcode_for_file_access(),\n\t\telse if (readBytes != sizeof(ReorderBufferDiskChange))\n\t\tif (readBytes < 0)\n\t\t\t\t\t(errcode_for_file_access(),", "partial_line": "errmsg(\"could no", "completion": "errmsg(\"could not read from reorderbuffer spill file: read %d instead of %u bytes\", <|endoftext|>"}
{"context": "\tint\t\t\tmy_level = GetCurrentTransactionNestLevel();\n\t\t{\nAfterTriggerEndSubXact(bool isCommit)\n\t\t\treturn;\n\t\t}", "partial_line": "&afterTriggers.tra", "completion": "&afterTriggers.trans_stack[my_level].events); <|endoftext|>"}
{"context": "\tpqsignal(SIGALRM, SIG_IGN);\n\tbefore_shmem_exit(pgstat_before_server_shutdown, 0);\n\t\t\t\t\t\t\t\t\t\t\t\t \"Checkpointer\",\n\t\t\t\t\t\t\t\t\t\t\t\t ALLOCSET_DEFAULT_SIZES);\n\t\tif (ckpt_active)", "partial_line": "bool\t\tdo_checkpo", "completion": "bool\t\tdo_checkpoint = false; <|endoftext|>"}
{"context": "}\n\ttmp = (QueryOperator *) palloc0(sizeof(QueryOperator));\n{\n\t\tereturn(state->escontext,,\n\t\t\t\t errmsg(\"value is too big in tsquery: \\\"%s\\\"\",", "partial_line": "state->polstr = lcons(tmp, st", "completion": "state->polstr = lcons(tmp, state->polstr); <|endoftext|>"}
{"context": "\t\telse if (l == 2)\t\t\n\t\t\tten = euc[1] - 0xa0;\n\t\t\t\tif (noError)\n\t\t\t{\n\t\t\t\t\treport_invalid_encoding(PG_EUC_JIS_2004,", "partial_line": "if (noE", "completion": "if (noError) <|endoftext|>"}
{"context": "\t\t\t\t\t (int) action->matchKind);\n\t\t}\n\t\t\tget_rule_expr(action->qual, context, false);\n\t\tappendContextKeyword(context, \" THEN \",\n\t\t\t\t\t\t\t\t\t   quote_identifier(get_attname(rte->relid,", "partial_line": "tl", "completion": "tle->resno, <|endoftext|>"}
{"context": "\t\t\tdlist_delete(&(predlock->xactLink));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttargettaghash),\n\t\t\tRemoveTargetIfNoLongerUsed(target, targettaghash);\n\t\t\ttag.myXact = OldCommittedSxact;\n\t\t\tif (found)", "partial_line": "predlock", "completion": "predlock->commitSeqNo = sxact->commitSeqNo; <|endoftext|>"}
{"context": "\tScanKeyInit(&key,\n\t\tbool\t\tisnull;\n\t\tDatum\t\trule_datum;\n\t\t\t\t\t\t\t\t  &isnull);\n\t\trule->actions = (List *) stringToNode(rule_str);", "partial_line": "MemoryContextSwitc", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "\tOid\t\t   *typioparams = cstate->typioparams;\n\tExprState **defexprs = cstate->defexprs;\n\tchar\t   *string;\n\tfieldno = 0;\n\t\tstring = field_strings[fieldno++];", "partial_line": "if (i", "completion": "if (is_csv) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   StreamStopReason reason,\nusage(void)\n\tprintf(_(\"Usage:\\n\"));\n\tprintf(_(\"\\nAction to be performed:\\n\"));\n\tprintf(_(\"\\nOptions:\\n\"));", "partial_line": "\"                         time between status packets sent to server (def", "completion": "\"                         time between status packets sent to server (default: %d)\\n\"), (standby_message_timeout / 1000)); <|endoftext|>"}
{"context": "{\n\t{\n\t}\n\tCacheInitialized = true;\n\t\t\t   Datum key2,", "partial_line": "return SearchCatCache(SysCache[cacheId]", "completion": "return SearchCatCache(SysCache[cacheId], key1, key2, key3, key4); <|endoftext|>"}
{"context": "\t\t\tBufferAccessStrategy strategy,\n\tBufferDesc *victim_buf_hdr;\n\tnewPartitionLock = BufMappingPartitionLock(newHash);\n\t\tLWLockRelease(newPartitionLock);\n\tLWLockAcquire(newPartitionLock, LW_EXCLUSIVE);", "partial_line": "existing_bu", "completion": "existing_buf_hdr = GetBufferDescriptor(existing_buf_id); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t   pg_leftmost_one_pos32(list_length(partial_pathlist)) + 1);\n\t\t\t\t\t\t\t   NIL, NULL, parallel_workers,\n\t\tdouble\t\tdNumGroups;\n\t\t}", "partial_line": "-1.0", "completion": "-1.0); <|endoftext|>"}
{"context": "\t\t\t\t\t*r |= *ps >> (BITS_PER_BYTE - ishift);\n}\n\tif (sp <= 0)\n\tresult = bit_catenate(s1, t2);\n\treturn result;", "partial_line": "bitle", "completion": "bitlength(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t\tcase MONTH:\n\t\t\t\t\t\ttm->tm_isdst = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DTZ:\n\t\t\t\t\t\ttmask |= DTK_M(TZ);", "partial_line": "tma", "completion": "tmask |= DTK_M(TZ); <|endoftext|>"}
{"context": "\tNOERR();\n\t\treturn REG_NOMATCH;\n\t{\n\t\t\t\t}\n\t\t\t\tzaptreesubs(v, left);", "partial_line": "mid = longest(v, d, begin", "completion": "mid = longest(v, d, begin, mid - 1, (int *) NULL); <|endoftext|>"}
{"context": "\t\tchar\t   *xmlsn = map_sql_identifier_to_xml_name(nspname, true, false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  nspname,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  NULL);\n\t\t\t\t\t xmlcn, catalogtypename);\n}", "partial_line": "map_sql_type_to_xml_name(Oid", "completion": "map_sql_type_to_xml_name(Oid typeoid, int typmod) <|endoftext|>"}
{"context": "}\n\tif (infofunc == NULL)\n\t\t\tbreak;\n\t\tdefault:\n\tif (entry == NULL)", "partial_line": "ItemPointerEquals(&entr", "completion": "ItemPointerEquals(&entry->fn_tid, &procedureTuple->t_self)) <|endoftext|>"}
{"context": "\t}\n\telse\n}\narray_subscript_handler(PG_FUNCTION_ARGS)\n\t\t.store_leakproof = false\t", "partial_line": ".exec_setup = a", "completion": ".exec_setup = array_exec_setup, <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"out of shared memory\"),\n\tlocktag.myTarget = target;\n\t\t\t\t\t\t\t\t\tHASH_ENTER_NULL, &found);\n\t\tlock->commitSeqNo = InvalidSerCommitSeqNo;\n\tLWLockRelease(partitionLock);", "partial_line": "if (Pre", "completion": "if (PredicateLockExists(targettag)) <|endoftext|>"}
{"context": "\t\t\t\t\t \"parallel\");\n\tsetup_cancel_handler(NULL);\n\t\t\t\t\t\t\t &objects,\n\t\t}\n\t\t{", "partial_line": "int", "completion": "int\t\t\tstage; <|endoftext|>"}
{"context": "\t}\n\t\tSetOperationStmt *op = (SetOperationStmt *) setOp;\n\t\tif (op->op != SETOP_UNION || !op->all)\n\t\t\t (int) nodeTag(setOp));\nstatic bool", "partial_line": "FromExpr", "completion": "FromExpr   *jtnode; <|endoftext|>"}
{"context": "\tdSP;\n\tint\t\t\ti,\n\tTDsv = get_sv(\"main::_TD\", 0);\n\t}\n\t\tLEAVE;", "partial_line": "LE", "completion": "LEAVE; <|endoftext|>"}
{"context": "void\n\tres = LockAcquireExtended(&tag, lockmode, false, false, true, &locallock,\n\tif (res != LOCKACQUIRE_ALREADY_CLEAR)\n\tLOCKTAG\t\ttag;\n\tif (res == LOCKACQUIRE_NOT_AVAIL)", "partial_line": "if (res != LOCKACQUIRE_AL", "completion": "if (res != LOCKACQUIRE_ALREADY_CLEAR) <|endoftext|>"}
{"context": "\t\tattnum = 0;\n\t\tdo_mcv = false;\n\t\t\t\t\t   &atttypid, &atttypmod,\n\t\t\t\t errdetail(\"Cannot set STATISTIC_KIND_HISTOGRAM or STATISTIC_KIND_CORRELATION.\")));\n\t\tereport(WARNING,", "partial_line": "do_bounds_histogram", "completion": "do_bounds_histogram = false; <|endoftext|>"}
{"context": "\telse if (SpGistPageIsLeaf(page))\n\t\t{\n\t\t\tbds->lastFilledBlock = blkno;\n\t\t}\n\t\tif (pitem->done)", "partial_line": "vacuu", "completion": "vacuum_delay_point(false); <|endoftext|>"}
{"context": "{ 2, s_0_99, -1, 1, 0},\n{ 4, s_0_102, 100, 1, 0},\n{ 6, s_0_103, 99, 5, 0},\n{ 2, s_0_104, -1, 1, 0},\nstatic const symbol s_1_7[6] = { 'k', 'a', 'l', 'd', 'e', 'a' };", "partial_line": "static const symbol s_1_11[6] = { 't', 'z', '", "completion": "static const symbol s_1_11[6] = { 't', 'z', 'a', 'l', 'e', 'a' }; <|endoftext|>"}
{"context": "\tdsa_pointer *pagemap;\t\t\n{\n\tsize_t\t\tfreed_segment_counter;\nstatic dsa_area *create_internal(void *place, size_t size,\n{", "partial_line": "dsm_", "completion": "dsm_segment *segment; <|endoftext|>"}
{"context": "{\n\t\t\tcontinue;\n\t\t\t\t\t\t\t errmsg(\"lost connection to parallel worker\")));\n\t\t}\n\t}", "partial_line": "MemoryContex", "completion": "MemoryContextReset(hpm_context); <|endoftext|>"}
{"context": "\t\tAssert(allProcs[procno].pgxactoff - 1 == index);\n\t\tAssert(!TransactionIdIsValid(proc->xid));\n\t\tproc->vxid.lxid = InvalidLocalTransactionId;\n\t\t\tLWLockAcquire(ProcArrayLock, LW_EXCLUSIVE);\n\t\t\tAssert(proc->statusFlags == ProcGlobal->statusFlags[proc->pgxactoff]);", "partial_line": "proc->sta", "completion": "proc->statusFlags &= ~PROC_VACUUM_STATE_MASK; <|endoftext|>"}
{"context": "\t\telog(ERROR, \"invalid dependency magic %d (expected %d)\",\n\t{\n\t\t\t\t\t\t\t\t\t + (k * sizeof(AttrNumber)));\nMVDependencies *\n\tMVDependencies *result;", "partial_line": "HeapTuple", "completion": "HeapTuple\thtup; <|endoftext|>"}
{"context": "\t{\nhas_row_triggers(PlannerInfo *root, Index rti, CmdType event)\n\t\t\tif (trigDesc &&\n\t\tcase CMD_UPDATE:\n\t\tdefault:", "partial_line": "has_stored_generated_columns(", "completion": "has_stored_generated_columns(PlannerInfo *root, Index rti) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tstrlen(conn->pguser), crypt_pwd2,\n\t\t\t\t\tfree(crypt_pwd);\n\t\t\t\tif (!pg_md5_encrypt(crypt_pwd2 + strlen(\"md5\"), md5Salt,\n\t\t\t\t\tlibpq_append_conn_error(conn, \"could not encrypt password: %s\", errstr);\n\t\t\t\t\tfree(crypt_pwd);", "partial_line": "case AUTH_R", "completion": "case AUTH_REQ_PASSWORD: <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_SINGLETON_SQL_JSON_ITEM_REQUIRED),\n}\n\tif (SRF_IS_FIRSTCALL())\n\t\tjb = PG_GETARG_JSONB_P_COPY(0);\n\tSRF_RETURN_NEXT(funcctx, JsonbPGetDatum(JsonbValueToJsonb(v)));", "partial_line": "jsonb_path_query_ar", "completion": "jsonb_path_query_array_internal(FunctionCallInfo fcinfo, bool tz) <|endoftext|>"}
{"context": "\t\t\t\t errhint(\"Use %s instead.\",\n\tif (typTup->typtype == TYPTYPE_COMPOSITE)\n\ttable_close(rel, RowExclusiveLock);\n{\n\tHeapTuple\tnewtup;", "partial_line": "typename = makeTypeNameFr", "completion": "typename = makeTypeNameFromNameList(names); <|endoftext|>"}
{"context": "\t\t\t\tecpg_free_params(stmt, false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinary_length,\n\t\t\t}\n\t\t\tbool\t\trealloc_failed = false;\n\t\t\tchar\t  **newparamvalues;", "partial_line": "int\t\t   *n", "completion": "int\t\t   *newparamlengths; <|endoftext|>"}
{"context": "\t  GET_PREDICATELOCKTARGETTAG_RELATION(covering_target))\t\t\t\t\\\n\t && (((GET_PREDICATELOCKTARGETTAG_OFFSET(covered_target) !=\t\t\t\\\n\t(&MainLWLockArray[PREDICATELOCK_MANAGER_LWLOCK_OFFSET + \\\n#define SxactIsRolledBack(sxact) (((sxact)->flags & SXACT_FLAG_ROLLED_BACK) != 0)", "partial_line": "#define SxactIsReadOnly", "completion": "#define SxactIsReadOnly(sxact) (((sxact)->flags & SXACT_FLAG_READ_ONLY) != 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t COERCE_IMPLICIT_CAST, -1, false);\n}\n\t\t\t   JoinDomain *jdomain, EquivalenceMember *parent, Oid datatype)\n\tem->em_expr = expr;\nstatic EquivalenceMember *", "partial_line": "EquivalenceMe", "completion": "EquivalenceMember *em; <|endoftext|>"}
{"context": "\tvolatile PgBackendStatus *beentry = MyBEEntry;\n\tif (!beentry || !pgstat_track_activities)\n\tPGSTAT_BEGIN_WRITE_ACTIVITY(beentry);\n\tif (!beentry)\n{", "partial_line": "LocalPgBackendStatus *l", "completion": "LocalPgBackendStatus *localtable; <|endoftext|>"}
{"context": "#include <ecpgerrno.h>\n#define POSTGRES_SQLCA_H\n#define PGDLLIMPORT\nstruct sqlca_t", "partial_line": "struct sqlca_t *ECPGget_s", "completion": "struct sqlca_t *ECPGget_sqlca(void); <|endoftext|>"}
{"context": "\tRELNAME_ARG,\n\t[RELPAGES_ARG] = {\"relpages\", INT4OID},", "partial_line": "stat", "completion": "static bool <|endoftext|>"}
{"context": "\tfor (;;)\n\t\t}\n\t\telse\n\t\tif (pq_flush_if_writable() != 0)\n\t\t\tlong\t\tsleeptime;", "partial_line": "int\t\t\twa", "completion": "int\t\t\twakeEvents; <|endoftext|>"}
{"context": "CreateOrAttachShmemStructs(void)\n{\n\tMultiXactShmemInit();\n\tLockManagerShmemInit();\n\tSharedInvalShmemInit();", "partial_line": "Checkpo", "completion": "CheckpointerShmemInit(); <|endoftext|>"}
{"context": "\tsanity_check_array(ta);\n\toffs = ((OffsetNumber *) ARR_DATA_PTR(ta));\n\t\t\titems.iter_tids = repalloc(items.iter_tids, sizeof(ItemPointerData) * items.max_tids);\n{\n\tcheck_tidstore_available();", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\treturn 'x';\n\t\tcase 'Z':\n\t}\nciequal(const char *ap, const char *bp)\n\t\tif (*ap++ == '\\0')", "partial_line": "return fa", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\tPM_TOSTR_CASE(SIGCHLD);\n\t\t\tPM_TOSTR_CASE(SIGINT);\n#undef PM_TOSTR_CASE\n{\n\t\t\t(errmsg_internal(\"sending signal %d/%s to %s process with pid %d\",", "partial_line": "cas", "completion": "case SIGABRT: <|endoftext|>"}
{"context": "\t\t\tbinaryheap_add_unordered(pendingHeap, (void *) (intptr_t) i);\n\t\t{\n\t\t\tif ((--beforeConstraints[id]) == 0)\n\t\t{\n\t\t}", "partial_line": "*nOr", "completion": "*nOrdering = k; <|endoftext|>"}
{"context": "\t{\n\tset_ps_display_remove_suffix();\n\treturn result;\nRemoveFromWaitQueue(PGPROC *proc, uint32 hashcode)\n\tAssert(waitLock->requested[lockmode] > 0);", "partial_line": "LO", "completion": "LOCK\t   *lock; <|endoftext|>"}
{"context": "\t\tif (bits % 8)\n\t\t\treturn order;\n{\n\tssup->comparator = network_fast_cmp;\n\t\tssup->abbrev_abort = network_abbrev_abort;", "partial_line": "inet\t   *arg2", "completion": "inet\t   *arg2 = DatumGetInetPP(y); <|endoftext|>"}
{"context": "\t\treturn &TTSOpsVirtual;\nconst TupleTableSlotOps *\n\t\treturn NULL;\n\treturn result;\n}", "partial_line": "planstate->ps_Resu", "completion": "planstate->ps_ResultTupleSlot, <|endoftext|>"}
{"context": "\t*p_nullsFirst = nullsFirst;\n\treturn lefttree;\n\tOid\t\t   *collations;\n\t\t\t\t\t\t\t\t\t\t  false,\n\tnullsFirst = (bool *) palloc(numsortkeys * sizeof(bool));", "partial_line": "forea", "completion": "foreach(l, sortcls) <|endoftext|>"}
{"context": "#include \"access/table.h\"\n#include \"access/xact.h\"", "partial_line": "#include \"comm", "completion": "#include \"commands/policy.h\" <|endoftext|>"}
{"context": "\t\t file_scanner != NULL;\n\t\tstart_address += len;\nvoid\nRestoreLibraryState(char *start_address)\n\t{", "partial_line": "start_address +=", "completion": "start_address += strlen(start_address) + 1; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t st->id, st->use_file, st->command, qrynum, 0);\n\t\t\t\t\t\tpg_log_error(\"client %d script %d command %d query %d: expected one row, got %d\",\n\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\tcase PGRES_PIPELINE_SYNC:", "partial_line": "PG_DIAG", "completion": "PG_DIAG_SQLSTATE)); <|endoftext|>"}
{"context": "\ttzset();\n\ttm = localtime(&tnow);\n\t\t{\n\t}\n\tstrcpy(resultbuf, std_zone_name);", "partial_line": "retur", "completion": "return resultbuf; <|endoftext|>"}
{"context": "\tint\t\t\tparticipant;\t\n\tMemoryContext context;\t\t\n\tint\t\t\tread_ntuples_available; \n\tBufFile    *write_file;\t\t\n}", "partial_line": "SharedTuplesto", "completion": "SharedTuplestoreAccessor *accessor; <|endoftext|>"}
{"context": "\t\tif (arrin[i].haspos)\n\t\t\t\t   STRPTR(tsv) + SHORTALIGN(arrin[i].pos + arrin[i].len),\n\tAssert(k == indices_count);\n\tTSVector\ttsin = PG_GETARG_TSVECTOR(0),\n\t\tPG_RETURN_POINTER(tsin);", "partial_line": "PG_FREE_IF_", "completion": "PG_FREE_IF_COPY(tlexeme, 1); <|endoftext|>"}
{"context": "\t\tAssert(bms_is_member(relid, root->all_result_relids));\n\t\t*processed_tlist = (List *)\n\t\t\t\t\t\t\t\t\t\t\t\t\trelid,\n\t\t\t\t\t\t\t\t\t\t\t\t\troot->parse->resultRelation);\n\tint\t\t\tcnt = 0;", "partial_line": "appin", "completion": "appinfos = (AppendRelInfo **) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\trelid,\n\t\t\t\t\t\t\t\t\t\t\t\t\troot->parse->resultRelation);\n\tint\t\t\tcnt = 0;\n\tappinfos = (AppendRelInfo **)\n\ti = -1;", "partial_line": "while ((i", "completion": "while ((i = bms_next_member(relids, i)) >= 0) <|endoftext|>"}
{"context": "{ 5, s_2_937, -1, 157, 0},\n{ 6, s_2_960, -1, 122, 0},\n{ 6, s_2_964, 962, 2, 0},\n{ 4, s_2_975, -1, 42, 0},\n{ 4, s_2_976, -1, 43, 0},", "partial_line": "{ 4, s_", "completion": "{ 4, s_2_978, -1, 44, 0}, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tappendStringInfoString(&buffer, \"access method\");\n\t\t\tbreak;\n\t\tcase NamespaceRelationId:\n\t\tcase TSDictionaryRelationId:", "partial_line": "appendStringInfo", "completion": "appendStringInfoString(&buffer, \"role\"); <|endoftext|>"}
{"context": "\t\t\t\ta += k[0];\n\t\t}\n\t\twhile (len >= 12)\n\t\t\ta += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));\n\t\t\tcase 11:", "partial_line": "cas", "completion": "case 10: <|endoftext|>"}
{"context": "\tSize\t\tsize;\n\tSize\t\thoff;\n\tint\t\t\tnatts = tupleDescriptor->natts;\n\tuint16\t\ttupmask = 0;\t\n\t}", "partial_line": "SGLT_SET_NEXTOFFSET(tup, In", "completion": "SGLT_SET_NEXTOFFSET(tup, InvalidOffsetNumber); <|endoftext|>"}
{"context": "                {   int m8 = z->l - z->c; (void)m8;\n                    }\n                    z->c = z->l - m8;\n                    {   int ret = r_noun(z);\n        {   int m10 = z->l - z->c; (void)m10;", "partial_line": "z->c = z-", "completion": "z->c = z->l - m10; <|endoftext|>"}
{"context": "\ttm_tmp = localtime(&time_tmp);\n\t\tXLByteToSeg(ControlFile->checkPointCopy.redo, segno, WalSegSz);\n\tfor (i = 0; i < MOCK_AUTH_NONCE_LEN; i++)\n\t\t   ControlFile->pg_control_version);\n\t\t   ControlFile->catalog_version_no);", "partial_line": "pg", "completion": "pgctime_str); <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\t\tinfomask2_lock_old_tuple;\n\t\t\t\t\t\t\t\t  &xmax_lock_old_tuple, &infomask_lock_old_tuple,\n\t\toldtup.t_data->t_infomask2 &= ~HEAP_KEYS_UPDATED;\n\t\toldtup.t_data->t_infomask2 |= infomask2_lock_old_tuple;", "partial_line": "visibilitymap", "completion": "visibilitymap_clear(relation, block, vmbuffer, <|endoftext|>"}
{"context": "\t\t\tstats->stavalues[slot_idx] = mcelem_values;\n\t\t\tstats->statypid[slot_idx] = extra_data->type_id;\n\t\t{\n\t\t\tint64\t\tfrac;\n\t\t\tsorted_count_items = (DECountItem **)", "partial_line": "hist[i]", "completion": "hist[i] = sorted_count_items[j]->count; <|endoftext|>"}
{"context": "{\n}\n\tRecoveryConflictPending = true;\n\t{\n\t\t\t\t\tGetStartupBufferPinWaitBufId() < 0)", "partial_line": "if (!IsTransactionOrTransac", "completion": "if (!IsTransactionOrTransactionBlock()) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  revoke_admin_option_only, behavior);\n\t\t\treturn true;\n\treturn false;\n\t\t\tplan_recursive_revoke(memlist, actions, i, false, DROP_CASCADE);\n\t\t\t\t\t  int index,", "partial_line": "if (!revoke_adm", "completion": "if (!revoke_admin_option_only) <|endoftext|>"}
{"context": "#include \"common/logging.h\"\n#include \"fe_utils/parallel_slot.h\"\n\tbool\t\tfull;\n\tbool\t\tprocess_toast;\n\tOBJFILTER_SCHEMA_EXCLUDE = (1 << 4),\t", "partial_line": "SimpleStri", "completion": "SimpleStringList *objects, <|endoftext|>"}
{"context": "#include \"executor/execPartition.h\"\n#include \"foreign/fdwapi.h\"\n#include \"miscadmin.h\"\n#include \"utils/backend_status.h\"\n#include \"utils/partcache.h\"", "partial_line": "ExecutorSt", "completion": "ExecutorStart_hook_type ExecutorStart_hook = NULL; <|endoftext|>"}
{"context": "\t\tLWLockRelease(&slot->io_in_progress_lock);\n\t\treturn;\n\tfsync_fname(dir, true);\n\tSpinLockRelease(&slot->mutex);\n\tReplicationSlotOnDisk cp;", "partial_line": "bool\t\tres", "completion": "bool\t\trestored = false; <|endoftext|>"}
{"context": "\t{PG_WIN1254, \"CP1254\"},\n\t{PG_ISO_8859_5, \"ISO8859-5\"},\n\t{PG_ISO_8859_8, \"iso88598\"},\n\t{PG_SJIS, \"PCK\"},\n\t{PG_GBK, \"CP936\"},", "partial_line": "char", "completion": "char\t   *codepage; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  &inner_lb, &inner_ub);\n\t\tint\t\t\tlb_cmpval;\n\t\t\tAssert(outer_map.merged_indexes[outer_index] == -1 &&\n\t\t\t\t   outer_map.merged[outer_index] == false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t &next_index);", "partial_line": "goto", "completion": "goto cleanup; <|endoftext|>"}
{"context": "\t\tif (run_diff(cmd, diff) == 0)\n\t\t\treturn false;\n\t\tfree(alt_expectfile);\n\t\t\t\t basic_diff_opts, default_expectfile, resultsfile, diff);\n\t\t{", "partial_line": "unlink", "completion": "unlink(diff); <|endoftext|>"}
{"context": "}\n\tif (!StartBufferIO(buf, false, false))\n\terrcallback.arg = buf;\n\t\treln = smgropen(BufTagGetRelFileLocator(&buf->tag), INVALID_PROC_NUMBER);\n\tbufBlock = BufHdrGetBlock(buf);", "partial_line": "BufTagGe", "completion": "BufTagGetForkNum(&buf->tag), <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\telse\n\t\t\t\t*tobeinserted_p = mallocedval;\n\t\t\t\tif (!(mallocedval = ecpg_alloc(asize * 30, lineno)))\n\t\t\t\t{", "partial_line": "strcpy(malloced", "completion": "strcpy(mallocedval + strlen(mallocedval) - 1, \"}\"); <|endoftext|>"}
{"context": "\t\t\t\tgot_cluster_state = true;\n\tif (GET_MAJOR_VERSION(cluster->bin_version) <= 906)\n\t\t\t live_check ? \"pg_controldata\\\"\" : resetwal_bin,\n\t\tpg_strip_crlf(bufin);\n\t\t\tp = strchr(p, ':');", "partial_line": "cluster->controldata.c", "completion": "cluster->controldata.ctrl_ver = str2uint(p); <|endoftext|>"}
{"context": "\tnext_in = (uint8 *) data;\n\t\t\t\t\t\t LZ4F_getErrorName(compressed_size));\n\t\t\tenlargeStringInfo(&mystreamer->base.bbs_buffer, out_bound);\n\t\tnext_out = (uint8 *) mystreamer->base.bbs_buffer.data;\n\tcompressed_size = LZ4F_compressUpdate(mystreamer->cctx,", "partial_line": "comp", "completion": "compressed_size, <|endoftext|>"}
{"context": "\t\t\t\t\tfputc(' ', fout);\n\t\t\tfputs(\"\\n\", fout);\n\t\tignore_slash_options(scan_state);\n\treturn PSQL_CMD_SKIP_LINE;\n\t\tif (!encoding)", "partial_line": "pset.encoding = PQclientEncod", "completion": "pset.encoding = PQclientEncoding(pset.db); <|endoftext|>"}
{"context": "\telse if (configdir)\n\telse\n\t\t\t\t\t \"This can be specified as \\\"hba_file\\\" in \\\"%s\\\", \"\n\t\tfname_is_malloced = true;\n\t\t\t\t\t \"or by the -D invocation option, or by the \"", "partial_line": "guc_fr", "completion": "guc_free(fname); <|endoftext|>"}
{"context": "bool\nRS_isRegis(const char *str)\n\tconst char *c = str;\n\t{\n\t\telse if (state == RS_IN_ONEOF)", "partial_line": "state = RS_IN_", "completion": "state = RS_IN_NONEOF; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\tspan_pointer = next_span_pointer;\n\t\tif (segment_map == NULL)\n\t\t\treturn false;\n\t\t}", "partial_line": "LWLockRelease(DSA_AREA_L", "completion": "LWLockRelease(DSA_AREA_LOCK(area)); <|endoftext|>"}
{"context": "\tavl_node   *current = *node;\n\t\tint\t\t\tdir = (1 - b) / 2;\n\t\tnew_node->children[0] = new_node->children[1] = tree->end;\n\t\ttree->count++;\n\telse", "partial_line": "int\t\t\tcmp =", "completion": "int\t\t\tcmp = pivotFieldCompare(&field, &current->field); <|endoftext|>"}
{"context": "{\n\t\tFPle(range_box->right.low, query->high) &&\nstatic bool\n\t\tFPgt(range_box->right.high, query->high);\nstatic bool", "partial_line": "overLeft4D(RectBox", "completion": "overLeft4D(RectBox *rect_box, RangeBox *query) <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\n\t\t\t\treturn NULL;\n\telse\n}\n\tmake_relative_path(ret_path, PGSHAREDIR, PGBINDIR, my_exec_path);", "partial_line": "get_includeserver_path(const cha", "completion": "get_includeserver_path(const char *my_exec_path, char *ret_path) <|endoftext|>"}
{"context": "\t\t}\n\t\telse\n\t\t{\n\t\telog(WARNING, \"can't put more than MaxHeapTuplesPerPage items in a heap page\");\n\t\tlower = phdr->pd_lower + sizeof(ItemIdData);", "partial_line": "temp = (Page", "completion": "temp = (Page) palloc(pageSize); <|endoftext|>"}
{"context": "\tlower.val = PG_ARGISNULL(0) ? (Datum) 0 : arg1;\n\tlower.inclusive = (flags & RANGE_LB_INC) != 0;\n\tRangeType  *r1 = PG_GETARG_RANGE_P(0);\n}\n\tRangeBound\tupper;", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\tparam->paramcollid = exprCollation((Node *) tent->expr);\n\t\t\t\t\t errmsg(\"subquery has too few columns\"),\n\treturn result;\n\t\t{\n\t\t\t{", "partial_line": "Oid\t\t\tnew", "completion": "Oid\t\t\tnewetype = exprType(newe); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\tif (nsitem == NULL)\n\t\t\t\t}\n\t\t\t}\n\t\telse if (hookresult != NULL)", "partial_line": "parser_errposition(pstate,", "completion": "parser_errposition(pstate, cref->location))); <|endoftext|>"}
{"context": "\t\t\t\tForm_pg_ts_template formTmpl;\n\t\t\t\ttup = SearchSysCache1(TSTEMPLATEOID,\n\t\t\t\t\tif (!missing_ok)\n\t\t\t\t\t\telog(ERROR, \"cache lookup failed for text search template %u\",\n\t\t\t\t\t\t\t object->objectId);", "partial_line": "appendString", "completion": "appendStringInfoString(&buffer, <|endoftext|>"}
{"context": "extern struct SN_env * hindi_UTF_8_create_env(void);\n#ifdef __cplusplus\nstatic const symbol s_0_11[9] = { 0xE0, 0xA4, 0x8F, 0xE0, 0xA4, 0x97, 0xE0, 0xA5, 0x80 };\nstatic const symbol s_0_39[6] = { 0xE0, 0xA4, 0x88, 0xE0, 0xA4, 0x82 };\nstatic const symbol s_0_40[9] = { 0xE0, 0xA4, 0x86, 0xE0, 0xA4, 0x88, 0xE0, 0xA4, 0x82 };", "partial_line": "static const symbol s_0_47[6] = { 0", "completion": "static const symbol s_0_47[6] = { 0xE0, 0xA4, 0x8F, 0xE0, 0xA4, 0x82 }; <|endoftext|>"}
{"context": "}\nstatic bool\n\treturn false;\n}\n\texplicit_bzero(conn->oauth_token, strlen(conn->oauth_token));", "partial_line": "free(conn->oau", "completion": "free(conn->oauth_token); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tif (!constraint)\n\t\t\t\telog(ERROR, \"cache lookup failed for constraint %u\",\n\t\t\tappendStringInfoString(buf, \" DO UPDATE SET \");\n\t\t\tget_update_query_targetlist_def(query, confl->onConflictSet,", "partial_line": "if (confl->onConf", "completion": "if (confl->onConflictWhere != NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t   &lastleftinfo->nitems);\n\t\t\telog(DEBUG2, \"appended %d items to block %u; split %d/%d (%d to go)\",\n\t\t\t\t maxitems, BufferGetBlockNumber(buf), (int) leaf->lsize, (int) leaf->rsize,\n\tMarkBufferDirty(buf);\n\tdlist_foreach(iter, &leaf->segments)", "partial_line": "seginfo->items = gin", "completion": "seginfo->items = ginPostingListDecode(seginfo->seg, <|endoftext|>"}
{"context": "\tif (dumpId > AH->maxDumpId)\n\tnewToc->namespace = opts->namespace ? pg_strdup(opts->namespace) : NULL;\n\tnewToc->tableam = opts->tableam ? pg_strdup(opts->tableam) : NULL;\n\tnewToc->defn = opts->createStmt ? pg_strdup(opts->createStmt) : NULL;\n\tif (opts->nDeps > 0)", "partial_line": "memcpy(newToc->dependencies, opts->deps, opts->nD", "completion": "memcpy(newToc->dependencies, opts->deps, opts->nDeps * sizeof(DumpId)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  visibilityrule, &dbbuf, &dotcnt);\n\t{\n\treturn true;\n\t\t\t\t\t\t  \",\\n  pubtruncate AS \\\"%s\\\"\",\n\t}", "partial_line": "printQuery(res, &myopt, pset.queryFout, fa", "completion": "printQuery(res, &myopt, pset.queryFout, false, pset.logfile); <|endoftext|>"}
{"context": "\t\t\tpagehdr->xlp_info |= XLP_FIRST_IS_CONTRECORD;\n\t\tCurrPos += rdata_len;\n\t\tCurrPos += freespace;\n\t\t\tcurrpos = GetXLogBuffer(CurrPos, tli);\n\t\t\tMemSet(currpos, 0, SizeOfXLogShortPHD);", "partial_line": "CurrPos =", "completion": "CurrPos = MAXALIGN64(CurrPos); <|endoftext|>"}
{"context": "\t0x0C60, 0x0C61,\n\t0x0CBE, 0x0CBE,\n\t0x0CC7, 0x0CC8,\n\t0x0CCA, 0x0CCB,\n\t0x0DC0, 0x0DC6,", "partial_line": "0x0E94", "completion": "0x0E94, 0x0E97, <|endoftext|>"}
{"context": "\t\ti_tableoid = PQfnumber(res, \"tableoid\");\n\t\ti_oid = PQfnumber(res, \"oid\");\n\t\t\tOid\t\t\tconrelid = atooid(PQgetvalue(res, j, i_conrelid));\n\t\t\t{\n\t\t\t\ttbinfo = &tblinfo[curtblindx];", "partial_line": "if (numcons != tbinfo", "completion": "if (numcons != tbinfo->ncheck) <|endoftext|>"}
{"context": "#ifndef PGDLLIMPORT\n\tlong\t\tsqlcode;", "partial_line": "char", "completion": "char\t\tsqlerrp[8]; <|endoftext|>"}
{"context": "\t\t\tnew_sources = lappend(new_sources, rinfo);\n\t\t\t}\n\t}\n\tec->ec_sources = new_sources;\n\ta->rinfo_serial = b->rinfo_serial;", "partial_line": "a->rinfo_seria", "completion": "a->rinfo_serial = saved_rinfo_serial; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"query string argument of EXECUTE is null\")));\n\t\tcase SPI_OK_INSERT_RETURNING:\n\t\tcase 0:\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "case SPI_ERROR_TRA", "completion": "case SPI_ERROR_TRANSACTION: <|endoftext|>"}
{"context": "#include \"rewrite/rewriteDefine.h\"\n\tLOCKMODE\tlockmode;\n\t\t{", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tchar\t   *s;\n\t\t\t\t\t  false  ,\n\t\t\t\t\t  &isnull);\n\t\t}\nProcessGUCArray(ArrayType *array,", "partial_line": "List\t   *", "completion": "List\t   *gucNames; <|endoftext|>"}
{"context": "\tItemPointerSetInvalid(&slot->tts_tid);\n\t\tereport(ERROR,\n\treturn heap_getsysattr(hslot->tuple, attnum,\n\tAssert(!TTS_EMPTY(slot));\n\txmin = HeapTupleHeaderGetRawXmin(hslot->tuple->t_data);", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "\treturn true;\n\tBTScanOpaque so = (BTScanOpaque) scan->opaque;\n\tMemoryContext oldContext;\n\t\tarray->high_compare->sk_strategy == BTLessStrategyNumber)\nstatic void", "partial_line": "_bt_skiparray_strat", "completion": "_bt_skiparray_strat_decrement(IndexScanDesc scan, ScanKey arraysk, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  block_id);\n\t\treturn false;\n\tptr = bkpb->bkp_image;\n\t\t\t\t\t\t\t\tBLCKSZ - bkpb->hole_length, true) < 0)\n#ifdef USE_LZ4", "partial_line": "decomp_succes", "completion": "decomp_success = false; <|endoftext|>"}
{"context": "\t\ttypdefault = NULL;\n\tif (dopt->binary_upgrade)\n\t\t\t\t\t  (strcmp(typlen, \"-1\") == 0) ? \"variable\" : typlen);\n\tappendPQExpBuffer(q, \",\\n    INPUT = %s\", typinput);\n\tif (OidIsValid(typmodinoid))", "partial_line": "if (typdefault !", "completion": "if (typdefault != NULL) <|endoftext|>"}
{"context": "{\n\tinet\t   *dst;\n\tdst = (inet *) palloc0(sizeof(inet));\n\ta = ip_addr(ip);\n\ta = ip_addr(ip);", "partial_line": "bits", "completion": "bits -= 8; <|endoftext|>"}
{"context": "\t\t\t\tcase RTE_FUNCTION:\n\t\t\t\t\tsub_action->hasSubLinks =\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\tkeeporig = (!rangeTableEntry_used((Node *) sub_action->jointree,", "partial_line": "rt_index", "completion": "rt_index, 0)) && <|endoftext|>"}
{"context": "\tif (relpersistence == RELPERSISTENCE_PERMANENT && !XLogIsNeeded())\n\tpending->next = pendingDeletes;\n\tpendingDeletes = pending;\n\tPendingRelDelete *next;\n\t\tnext = pending->next;", "partial_line": "&& pending->atCommi", "completion": "&& pending->atCommit == atCommit) <|endoftext|>"}
{"context": "\t\t\tExplainPropertyText(\"Operation\", operation, es);\n\t\tif (custom_name)\n\t\t\tExplainPropertyText(\"Custom Plan Provider\", custom_name, es);\n\t\tcase T_SeqScan:\n\t\tcase T_TidRangeScan:", "partial_line": "case", "completion": "case T_CteScan: <|endoftext|>"}
{"context": "\tint\t\t\tsp = PG_GETARG_INT32(2);\t\n\ttext\t   *t1 = PG_GETARG_TEXT_PP(0);\ntext_overlay(text *t1, text *t2, int sp, int sl)\ntextpos(PG_FUNCTION_ARGS)\n\t\treturn 1;", "partial_line": "resul", "completion": "result = 0; <|endoftext|>"}
{"context": "\tDumpOptions *dopt = fout->dopt;\n\tPQExpBuffer query;\n\tint\t\t\ti_puballtables;\n\tint\t\t\ti_pubdelete;\n\tappendPQExpBufferStr(query, \"SELECT p.tableoid, p.oid, p.pubname, \"", "partial_line": "\"p.pubupdate, p", "completion": "\"p.pubupdate, p.pubdelete, \"); <|endoftext|>"}
{"context": "{ 3, s_1_143, 142, 1, 0},\n{ 5, s_1_144, 142, 1, 0},\n{ 3, s_1_145, 142, 2, 0},\n{ 5, s_1_160, 159, 1, 0},\n{ 5, s_1_165, 164, 1, 0},", "partial_line": "{ 2, s_1_176,", "completion": "{ 2, s_1_176, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t{\n\t\tConst\t   *con = (Const *) node;\n\t\tbaseTypeId = getBaseTypeAndTypmod(targetTypeId, &baseTypeMod);\n\t\t\tinputTypeMod = -1;\n\t\tbaseType = typeidType(baseTypeId);", "partial_line": "inputTy", "completion": "inputTypeMod); <|endoftext|>"}
{"context": "}\n\tAssert(htup->t_tableOid != InvalidOid);\n\t\tif (cmin >= snapshot->curcid)\n\t\t\treturn false;\n\t\t\t\t !TransactionIdDidCommit(xmax)));", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "\t\tGetMultiXactIdHintBits(new_xmax, &new_infomask, &new_infomask2);\n\t\t\t\telse\n\t\t}\n\t\t\t\told_status = MultiXactStatusUpdate;\n\t\t\telse", "partial_line": "old_status = Mul", "completion": "old_status = MultiXactStatusNoKeyUpdate; <|endoftext|>"}
{"context": "\t\tbackupcontext = AllocSetContextCreate(TopMemoryContext,\n\t{\n}\n\tbool\t\tnulls[PG_BACKUP_STOP_V2_COLS] = {0};\n\ttablespace_map = NULL;", "partial_line": "MemoryC", "completion": "MemoryContextDelete(backupcontext); <|endoftext|>"}
{"context": "\t\tvacrel->eager_scan_max_fails_per_region *\n\tBlockNumber orig_rel_pages,\n\tvacrel->relnamespace = get_namespace_name(RelationGetNamespace(rel));\n\terrcallback.arg = vacrel;\n\terrcallback.previous = error_context_stack;", "partial_line": "indnames[i] = pstrdup(Rela", "completion": "indnames[i] = pstrdup(RelationGetRelationName(vacrel->indrels[i])); <|endoftext|>"}
{"context": "static const symbol s_1_286[3] = { 't', 'x', 'u' };\n{ 4, s_1_2, -1, 1, 0},\n{ 5, s_1_3, -1, 1, 0},\n{ 5, s_1_10, -1, 1, 0},\n{ 5, s_1_30, -1, 1, 0},", "partial_line": "{ 4,", "completion": "{ 4, s_1_35, -1, 1, 0}, <|endoftext|>"}
{"context": "\tadd_exact_object_address(&referenced, addrs);\n\t\tObjectAddressSet(referenced, ProcedureRelationId, combinefn);\n\t\tObjectAddressSet(referenced, ProcedureRelationId, serialfn);\n\t{\n\t{", "partial_line": "if (OidIsVali", "completion": "if (OidIsValid(sortop)) <|endoftext|>"}
{"context": " MYNULLTYPE * mynullvar = malloc ( sizeof ( MYNULLTYPE ) ) ;\n}\n#line 40 \"outofscope.pgc\"\n}\n\tECPGt_int,&((*( MYNULLTYPE  *)(ECPGget_var( 1)) ).d1),(long)1,(long)1,sizeof( struct mynulltype ), ", "partial_line": "{ ECPGdo(__LINE__", "completion": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"close mycur\", ECPGt_EOIT, ECPGt_EORT); <|endoftext|>"}
{"context": "\t\tAssert(rk2 == WJB_BEGIN_OBJECT);\n\t\tpushJsonbValue(state, WJB_BEGIN_ARRAY, NULL);\n\tswitch (r)\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t\t errmsg(\"cannot replace existing key\"),", "partial_line": "errdetail(\"The path assumes", "completion": "errdetail(\"The path assumes key is a composite object, \" <|endoftext|>"}
{"context": "\t\t\t\tint\t\t\tflush;\n\t\t\t\tif (flush == -1)\n\t\t\t\t}\n\t\t\tres2 = PQgetResult(conn);\n\t\t\tPQclear(res);", "partial_line": "fprintf(", "completion": "fprintf(stderr, \"Usage:\\n\"); <|endoftext|>"}
{"context": "\t\tjstate->clocations[jstate->clocations_count].location = location;\n\t\tjstate->clocations_count++;\nIsSquashableConst(Node *element)\n{\n\t\t{", "partial_line": "retur", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tDEPENDENCY_AUTO, false);\n\tif (IsBootstrapProcessingMode())\n\tRelation\tindexRelation;\n\tList\t   *indexExprs = NIL;\n\t\t\t\t\t\t\t\t\t\t\tAnum_pg_index_indoption);", "partial_line": "if (oldInfo->", "completion": "if (oldInfo->ii_Predicate != NIL) <|endoftext|>"}
{"context": "\t\tListCell   *lc2;\n\t\tint\t\t\tj;\n\t\tforeach(lc2, partrelpruneinfos)\n\t\t\tPartitionedRelPruneInfo *pinfo = lfirst_node(PartitionedRelPruneInfo, lc2);\n\t\t\tPartitionedRelPruningData *pprune = &prunedata->partrelprunedata[j];", "partial_line": "Partit", "completion": "PartitionKey partkey; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t*colnames = list_concat(*colnames, namelist);\n\t\t\t\t\t\t\tListCell   *l3;\n\t\t\t\t\t\t\tint\t\t\tattnum = atts_done;\n\t\t\t\t\t\t\t\tvarnode = makeVar(rtindex,\n\t\t\t\t\t\t\t\t\t\t\t\t  attrtypmod,", "partial_line": "*colvar", "completion": "*colvars = lappend(*colvars, varnode); <|endoftext|>"}
{"context": "            break;\n            }\n            break;\n        case 71:\n            {   int ret = slice_from_s(z, 3, s_198);", "partial_line": "if (ret < 0) r", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t Node *escontext);\nstatic void set_var_from_num(Numeric num, NumericVar *dest);\nstatic char *get_str_from_var(const NumericVar *var);\nstatic bool apply_typmod(NumericVar *var, int32 typmod, Node *escontext);\nstatic Datum numeric_abbrev_convert(Datum original_datum, SortSupport ssup);", "partial_line": "Numeric", "completion": "NumericSortSupport *nss); <|endoftext|>"}
{"context": "#include \"access/xact.h\"\n#include \"commands/policy.h\"\n#include \"parser/parse_collate.h\"\n#include \"parser/parse_relation.h\"\n#include \"utils/syscache.h\"", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t  JOIN_INNER,\n\t\tnum_sa_scans = Min(num_sa_scans, ceil(index->pages * 0.3333333));\n\t\tdescentCost = ceil(log(index->tuples) / log(2.0)) * cpu_operator_cost;\n\t*indexSelectivity = costs.indexSelectivity;\nhashcostestimate(PlannerInfo *root, IndexPath *path, double loop_count,", "partial_line": "*indexSelectivity", "completion": "*indexSelectivity = costs.indexSelectivity; <|endoftext|>"}
{"context": "\tAssert(object_access_hook != NULL);\nvoid\n\tAssert(object_access_hook != NULL);", "partial_line": "drop_a", "completion": "drop_arg.dropflags = dropflags; <|endoftext|>"}
{"context": "#line 21 \"insupd.pgc\"\n#line 22 \"insupd.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"update insupd_test set ( a , b ) = ( 5 , 5 ) where a = 4\", ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\n#line 26 \"insupd.pgc\"", "partial_line": "#line 33 \"", "completion": "#line 33 \"insupd.pgc\" <|endoftext|>"}
{"context": "standard_ExplainOneQuery(Query *query, int cursorOptions,\n\t\t\t\t\t\t\t\t\t\t\tALLOCSET_DEFAULT_SIZES);\n\t{\n\t\t\t\t   queryEnv,\n\t\tQuery\t   *ctas_query;", "partial_line": "JumbleState *", "completion": "JumbleState *jstate = NULL; <|endoftext|>"}
{"context": "\t\t\t   \"    %s\",\n\tprep_status(\"Checking cluster versions\");\n\t\tpg_fatal(\"This utility can only upgrade from PostgreSQL version %s and later.\",\n\tif (GET_MAJOR_VERSION(new_cluster.major_version) != GET_MAJOR_VERSION(PG_VERSION_NUM))\n\t\tpg_fatal(\"This utility cannot be used to downgrade to older major PostgreSQL versions.\");", "partial_line": "pg_fatal(\"Old cluster data and binary directories ar", "completion": "pg_fatal(\"Old cluster data and binary directories are from different major versions.\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t InvalidOid, -1,\n\t\tresult = pstrdup(\"0\");\n\t\tForm_pg_operator operform = (Form_pg_operator) GETSTRUCT(opertup);\n\t\t\t\tclist->oid == oprid)\n\t\t\t{", "partial_line": "result = (char *) palloc(N", "completion": "result = (char *) palloc(NAMEDATALEN); <|endoftext|>"}
{"context": "\t\t\t\t\t\telog(ERROR, \"cache lookup failed for event trigger %u\",\n\t\t\t\t\t\t\t\t NameStr(((Form_pg_event_trigger) GETSTRUCT(tup))->evtname));\n\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\tif (!HeapTupleIsValid(tup))\n\t\t\t\t\t\telog(ERROR, \"cache lookup failed for parameter ACL %u\",", "partial_line": "object->obje", "completion": "object->objectId); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\ttrue, -1);\n\tReleaseSysCache(opertup);\n{\n\tchar\t   *oprname;\n\tnspname = get_namespace_name(operform->oprnamespace);", "partial_line": "appendStringInfo(buf, \" OPERATOR(%s.\",", "completion": "appendStringInfo(buf, \" OPERATOR(%s.\", quote_identifier(nspname)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode_for_file_access(),\n\twhile (newOffset < 0)\n\t}\n\tfile->curOffset = newOffset;\n\t*fileno = file->curFile;", "partial_line": "*offset", "completion": "*offset = file->curOffset + file->pos; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"division by zero\")));\n\tPG_RETURN_INT16(result);\n\tif (unlikely(pg_add_s32_overflow((int32) arg1, arg2, &result)))\n\tint32\t\targ2 = PG_GETARG_INT32(1);\n\tint32\t\tresult;", "partial_line": "(errcode(ERRCODE_NUMERIC_VA", "completion": "(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE), <|endoftext|>"}
{"context": "            if (ret < 0) return ret;\n    }\n    {   int c4 = z->c;\n        {   int ret = r_remove_question_suffixes(z);\n        }", "partial_line": "z->c", "completion": "z->c = c4; <|endoftext|>"}
{"context": "\tif (count == 1)\n\tif (!subref)\n\t\telse if (desc->arg_is_rowtype[i])\n\t\t\t{\n\t\t\t\tpfree(tmp);", "partial_line": "errmsg(\"%s", "completion": "errmsg(\"%s\", strip_trailing_ws(sv2cstr(ERRSV))))); <|endoftext|>"}
{"context": "\t}\ntypedef struct\n{\n\tRelation\trel;\n\tfakeentry = palloc0(sizeof(FakeRelCacheEntryData));", "partial_line": "rel = (Relati", "completion": "rel = (Relation) fakeentry; <|endoftext|>"}
{"context": "#include <sys/time.h>\n#include <valgrind/valgrind.h>", "partial_line": "#include", "completion": "#include \"access/parallel.h\" <|endoftext|>"}
{"context": "\t}\n\tif (initdb_comment != NULL)\n\t}\n\tif (ncomments > 0)\n\t}", "partial_line": "const char *argtype,", "completion": "const char *argtype, const char *argval) <|endoftext|>"}
{"context": "\t\tpgstat_info->counts.delta_live_tuples = 0;\n\t\trec->tuples_inserted + rec->tuples_updated +\n\t\t\t\t\t\t  void *recdata, uint32 len)\n\t\trec->tuples_inserted + rec->tuples_updated;\n\tdboid = entry_ref->shared_entry->key.dboid;", "partial_line": "lstats = (PgStat_Tab", "completion": "lstats = (PgStat_TableStatus *) entry_ref->pending; <|endoftext|>"}
{"context": "#define EXPRKIND_TABLESAMPLE\t\t9\n{\n\tList\t   *activeWindows;\t\n\t\t\t\t\t\t\t   int64 *offset_est, int64 *count_est);\nstatic void standard_qp_callback(PlannerInfo *root, void *extra);", "partial_line": "Lis", "completion": "List *target_list); <|endoftext|>"}
{"context": "\t\t\treturn +1;\n\t\t\treturn +1;\n\tif (cost1 < cost2)\n\t{\n\t\tif (CONSIDER_PATH_STARTUP_COST(path1) &&", "partial_line": "path2->startup_cost > path1->startup_co", "completion": "path2->startup_cost > path1->startup_cost * fuzz_factor) <|endoftext|>"}
{"context": "\t\t\titup = (IndexTuple) PageGetItem(page, PageGetItemId(page, offnum));\n\t\t\t{\n\t\tAssert(itemIndex <= MaxIndexTuplesPerPage);\n\t\treturn itemIndex;\n\t\t\tif ((so->hashso_buc_populated && !so->hashso_buc_split &&", "partial_line": "_hash_ch", "completion": "_hash_checkqual(scan, itup)) <|endoftext|>"}
{"context": "\tSetServiceStatus(hStatus, (LPSERVICE_STATUS) &status);\npgwin32_ServiceHandler(DWORD request)\n\tswitch (request)\n\t\tcase SERVICE_CONTROL_PAUSE:\n\tDWORD\t\tret;", "partial_line": "if (!CreateRestricte", "completion": "if (!CreateRestrictedProcess(pgwin32_CommandLine(false), &pi, true)) <|endoftext|>"}
{"context": "\t{\n\t\t\telog(ERROR, \"SPI_cursor_open() failed: %s\",\n\t\tPinPortal(portal);\n\t{\n\t\tnargs = PySequence_Length(args);", "partial_line": "pl", "completion": "plan->nargs, <|endoftext|>"}
{"context": "        if (!find_among_b(z, a_2, 3)) return 0;\n    }\n        if (ret < 0) return ret;\n    }\n    }", "partial_line": "if (!(e", "completion": "if (!(eq_s_b(z, 3, s_10))) goto lab0; <|endoftext|>"}
{"context": "static int32 qsort_partition_list_value_cmp(const void *a, const void *b,\nstatic PartitionBoundInfo merge_list_bounds(FmgrInfo *partsupfunc,\n\t\t\t\t\t\t\t\t\t\t\tList **inner_parts);\n\t\t\t\t\t\t\t\t\t\t\t List **inner_parts);\n\t\t\t\t\t\t\t\t\t  PartitionMap *inner_map,", "partial_line": "int *", "completion": "int *null_index); <|endoftext|>"}
{"context": "#error FD_SETSIZE needs to have been increased\n#include <signal.h>\n#include <sys/select.h>\n#include \"common/username.h\"\n#include \"fe_utils/conditional.h\"", "partial_line": "#define SOCKET_WAIT_METH", "completion": "#define SOCKET_WAIT_METHOD \"select\" <|endoftext|>"}
{"context": "\tBlockNumber num_pages;\n\tpg_rusage_init(&ru0);\n\t\tLockRelationOid(OldHeap->rd_rel->reltoastrelid, AccessExclusiveLock);\n\t\t*pSwapToastByContent = false;\n\t{", "partial_line": "RelationGetRelid", "completion": "RelationGetRelid(OldIndex)); <|endoftext|>"}
{"context": "\t\tif (c == '\\'')\n\t}\n\t\t\t  PQExpBuffer escape_err)\n{\n\t{", "partial_line": ".name = \"PQesca", "completion": ".name = \"PQescapeLiteral\", <|endoftext|>"}
{"context": "}\n\tint\t\t\ti,\n\tMVDependency *strongest = NULL;\n\t\t\tMVDependency *dependency = dependencies[i]->deps[j];\n\t\t\t\t\tcontinue;", "partial_line": "c", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\t !TailMatches(\"USER\", \"MAPPING\"))\n\t\t\t\t\t  \"LOGIN\", \"NOBYPASSRLS\",\n\t\tCOMPLETE_WITH(\"(\");\n\t\tif (TailMatches(\"(|*,\"))\n\t\t\t TailMatches(\"CREATE\", \"OR\", \"REPLACE\", \"VIEW\", MatchAny))", "partial_line": "COMPLETE_WITH_LIST(view_optiona", "completion": "COMPLETE_WITH_LIST(view_optional_parameters); <|endoftext|>"}
{"context": "\t\t\t\t\t\tdesc_inlist.arrsize = 1;\n\t\t\t\t\t\tdesc_inlist.offset = 0;\n\t\t\t\t\t\tif (sqlda->sqlvar[i].sqlind)\n\t\t\t\t\t\t\t\t*(sqlda->sqlvar[i].sqlind) = -1;\n\t\t\t\t\t\t\tdesc_inlist.ind_value = desc_inlist.ind_pointer = NULL;", "partial_line": "binary_format", "completion": "binary_format = true; <|endoftext|>"}
{"context": "\tECPGt_int,&(ivar1),(long)1,(long)1,sizeof(int), \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlcode < 0) sqlprint();}\n\tcheck_result_of_insert();\n#line 85 \"prepareas.pgc\"", "partial_line": "{ ECPGdo(__LINE__,", "completion": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"truncate test\", ECPGt_EOIT, ECPGt_EORT); <|endoftext|>"}
{"context": "\t\t}\n\tyyextra->pushback_auxdata[yyextra->num_pushbacks] = *auxdata;\n\tauxdata.lloc = *yyllocp;\n\tauxdata.leng = yyextra->plpgsql_yyleng;\n\t{", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t}\n\tif (buf.len == 0)\n\treturn buf.data;\n\tif (res == NULL)\n\tint\t\t\tprettyFlags;", "partial_line": "PG_RETURN_", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "static int\nList *\n\tRelation\tconrel;\n\t\t\t\t\t\t\t\t NULL, 1, &skey);\n\t\t\t\t\t\t\t\t   info->conkey,", "partial_line": "systabl", "completion": "systable_endscan(conscan); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\n\txl_xact_stats_item item;", "partial_line": "bool isCommit, int ne", "completion": "bool isCommit, int nestDepth); <|endoftext|>"}
{"context": "\t\tcase IFSTATE_FALSE:\n\t\t\tpg_log_error(\"\\\\elif: cannot occur after \\\\else\");\n}\n\t\tcase IFSTATE_FALSE:\n\t\t\tbreak;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_tables_for_rule);\n\telse if (Matches(\"DROP\", \"RULE\", MatchAny, \"ON\", MatchAny))\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_datatypes);\n\t\tCOMPLETE_WITH_QUERY(Query_for_list_of_languages);\n\t\tCOMPLETE_WITH(\"SELECT\", \"INSERT INTO\", \"DELETE FROM\", \"UPDATE\", \"DECLARE\",", "partial_line": "else if (HeadMatches(\"EXPLAI", "completion": "else if (HeadMatches(\"EXPLAIN\", \"(*\") && <|endoftext|>"}
{"context": "\tOid\t\t\ttrigid = PG_GETARG_OID(0);\n\tres = pg_get_triggerdef_worker(trigid, pretty);\n\tHeapTuple\tht_trig;\n\tStringInfoData buf;\n\tRelation\ttgrel;", "partial_line": "char", "completion": "char\t   *tgname; <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\tcase OBJECT_TSTEMPLATE:\n\t\t\t\t\ttag = CMDTAG_CREATE_TEXT_SEARCH_TEMPLATE;\n\t\t\ttag = CMDTAG_CREATE_TYPE;\n\t\t\tbreak;", "partial_line": "case T_CreateFunct", "completion": "case T_CreateFunctionStmt: <|endoftext|>"}
{"context": "\t\t\ttmp = brin_form_tuple(state->bs_bdesc, memtuple->bt_blkno,\n\ttuplesort_end(state->bs_sortstate);\n\treturn reltuples;\n\t\t\t\t\t\t\t  int sortmem, bool progress)\n\tIndexInfo  *indexInfo;", "partial_line": "ConditionVariab", "completion": "ConditionVariableSignal(&brinshared->workersdonecv); <|endoftext|>"}
{"context": "\t\tahprintf(AH, \"%s\\n\\n\", cmd->data);\n{\n\t\tReconnectToServer(AH, dbname);\n\tfree(AH->currUser);\n\tAH->currSchema = NULL;", "partial_line": "if (!us", "completion": "if (!user) <|endoftext|>"}
{"context": "\t\ttidstore = TidStoreCreateShared(tidstore_max_size, tranche_id);\n\tif (ARR_NDIM(ta) > 1)\n\t\t\t\t(errcode(ERRCODE_DATA_EXCEPTION),\ncheck_tidstore_available(void)\n{", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\t\tif (has_shared || has_local || has_temp)\n\t\t{\n\t\t\tif (has_shared)\n\t\t\t\t\t\t\t\t\t usage->shared_blks_hit);\n\t\t\t\t\tappendStringInfo(es->str, \" read=%\" PRId64,", "partial_line": "if (usage->temp_blks_", "completion": "if (usage->temp_blks_read > 0) <|endoftext|>"}
{"context": "#include \"utils/guc.h\"\n} IpcMemoryState;\n\tvoid\t   *requestedAddress = NULL;\n\t}\n\t\tint\t\t\tshmget_errno = errno;", "partial_line": "if (shmget", "completion": "if (shmget_errno == EINVAL) <|endoftext|>"}
{"context": "\t\t}\n\tresetQueryRepresentation(qr, false);\n\text->q = 0;\n\t\t\tbreak;\n\t\tif (TS_execute(GETQUERY(qr->query), qr,", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tlast_was_key = true;\n\t\t\tres = pushJsonbValue(&parseState, type, NULL);\n\tJsonbToCStringIndent(str, &jb->root, VARSIZE(jb));\n\tJsonb\t   *jb1 = PG_GETARG_JSONB_P(0);\n\tJsonb\t   *jb2 = PG_GETARG_JSONB_P(1);", "partial_line": "*", "completion": "*it2; <|endoftext|>"}
{"context": "\ttabentry->dead_tuples += lstats->counts.delta_dead_tuples;\n\tdbentry->tuples_inserted += lstats->counts.tuples_inserted;\n\tdbentry->tuples_updated += lstats->counts.tuples_updated;\nvoid\n\treturn pending;", "partial_line": "trans = (PgStat_T", "completion": "trans = (PgStat_TableXactStatus *) <|endoftext|>"}
{"context": "\t\t\t\ti++;\n\t\tvalues = pg_malloc0((argcount + 1) * sizeof(*values));\n\t\tvalues[i] = (dbname == NULL) ? \"replication\" : dbname;\n\tvalues[i] = progname;\n\tif (dbport)", "partial_line": "values[i]", "completion": "values[i] = dbport; <|endoftext|>"}
{"context": "\t\tif (isnull)\n\t\t\tattrdef[found].adbin = MemoryContextStrdup(CacheMemoryContext, s);\n\t\t\t\tObjectIdGetDatum(RelationGetRelid(relation)));\n\tconrel = table_open(ConstraintRelationId, AccessShareLock);\n\twhile (HeapTupleIsValid(htup = systable_getnext(conscan)))", "partial_line": "relation->rd_att->compact_attrs[attn", "completion": "relation->rd_att->compact_attrs[attnum - 1].attnullability = <|endoftext|>"}
{"context": "\telse\nstatic PQconninfoOption *\n\t{\n\t{\n\treturn options;", "partial_line": "return sizeof(sh", "completion": "return sizeof(short_uri_designator) - 1; <|endoftext|>"}
{"context": "} TBlockState;\n\tint\t\t\tprevSecContext; \n\tbool\t\tprevXactReadOnly;\t\ntypedef struct SerializedTransactionState\n\tint\t\t\tnParallelCurrentXids;", "partial_line": "TransactionId parallelCurrentXids[FLEXI", "completion": "TransactionId parallelCurrentXids[FLEXIBLE_ARRAY_MEMBER]; <|endoftext|>"}
{"context": "{\n\telse\n\t\tresult = standard_planner(parse, query_string, cursorOptions, boundParams);\nPlannedStmt *\n{", "partial_line": "glob->f", "completion": "glob->finalrowmarks = NIL; <|endoftext|>"}
{"context": "\tif (!entry->stmtID[0])\t\t\n{\n\t{\n\t\tstmtCacheEntries = (stmtCacheEntry *)\n\t\tif (stmtCacheEntries == NULL)", "partial_line": "for (ix = 0; ix < stmtC", "completion": "for (ix = 0; ix < stmtCacheEntPerBucket; ++ix) <|endoftext|>"}
{"context": "\tOid\t\t\teq_opr;\t\t\t\n{\nstatic void prune_element_hashtable(HTAB *elements_tab, int b_current);\narray_typanalyze(PG_FUNCTION_ARGS)\n\t\t\t\t\t\t\t\t TYPECACHE_HASH_PROC_FINFO);", "partial_line": "!OidIsValid(typent", "completion": "!OidIsValid(typentry->cmp_proc_finfo.fn_oid) || <|endoftext|>"}
{"context": "\t\t\t\t\t\treturn (Node *) simple;\n\t\t\t}\n\t\t\t\tNode\t   *save_case_val;\n\t\t\t\tsave_case_val = context->case_val;\n\t\t\t\tconst_true_cond = false;", "partial_line": "Const\t   *co", "completion": "Const\t   *const_input = (Const *) casecond; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t{\n\t\t\t\t\t\t\tif (strcmp(replci->keyword, \"user\") == 0 ||\n\t\t\t\t\t\treplci->val = ci->val;\n\t\t{", "partial_line": "if (!(ci->val && strcm", "completion": "if (!(ci->val && strcmp(user, ci->val) == 0)) <|endoftext|>"}
{"context": "\ttrailing_pad(padlen, target);\n}\n\t\tvallen = 3;\n\t\tstatic const double dzero = 0.0;\n\t\t\t\t\t\t (value == 0.0 &&", "partial_line": "memcmp(&value, &dzero, sizeof(do", "completion": "memcmp(&value, &dzero, sizeof(double)) != 0)), <|endoftext|>"}
{"context": "static int\tpg_popcount64_choose(uint64 word);\nstatic uint64 pg_popcount_masked_choose(const char *buf, int bytes, bits8 mask);\nstatic inline int pg_popcount64_fast(uint64 word);\n#endif\t\t\t\t\t\t\t\n\t__cpuid(exx, 1);", "partial_line": "#el", "completion": "#else <|endoftext|>"}
{"context": "\ti_objid = PQfnumber(res, \"objid\");\n\ti_refobjid = PQfnumber(res, \"refobjid\");\n\t\tif (ext == NULL ||\n\t\tif (ext == NULL)\nprocessExtensionTables(Archive *fout, ExtensionInfo extinfo[],", "partial_line": "i_conf", "completion": "i_confrelid; <|endoftext|>"}
{"context": "{ 5, s_6_61, 58, 1, 0},\n{ 5, s_6_69, 58, 1, 0},\n{ 5, s_6_70, 58, 1, 0},\n{ 3, s_6_73, 71, 1, 0},\n{ 5, s_6_75, 73, 1, 0},", "partial_line": "{ 5, s_6_78", "completion": "{ 5, s_6_78, 73, 1, 0}, <|endoftext|>"}
{"context": "\t}\n\t\t\t\t  List *operators,\n\t\t\t\t  List *functions)\n\t\t{\n\t\t\tcase GIST_PICKSPLIT_PROC:", "partial_line": "case GIST", "completion": "case GIST_COMPRESS_PROC: <|endoftext|>"}
{"context": "\t{\n\t\tTcl_WrongNumArgs(interp, 1, objv, \"command\");\n\tif (retcode == TCL_ERROR)\n\treturn retcode;\n\t}", "partial_line": "PG_EN", "completion": "PG_END_TRY(); <|endoftext|>"}
{"context": "\tdlist_iter\titer;\n\t\tReorderBufferTXN *txn;\nstatic void\n\t\t\trb->size > 0))\n\t{", "partial_line": "ReorderBufferS", "completion": "ReorderBufferSerializeTXN(rb, txn); <|endoftext|>"}
{"context": "{\n\tmacaddr8   *a = PG_GETARG_MACADDR8_P(0);\n\tint\t\t\tlen;\n\t\t\t\tlenb;\n\taddrb = (unsigned char *) palloc(ip_addrsize(ipb));", "partial_line": "int", "completion": "int\t\t\tnbits; <|endoftext|>"}
{"context": "\tif (offset > (Oid) INT_MAX)\n\t\treturn 0;\n\tif (enum_known_sorted(enumdata, arg1) &&\n\t\t\treturn 1;\n\t}", "partial_line": "item2 = fin", "completion": "item2 = find_enumitem(enumdata, arg2); <|endoftext|>"}
{"context": "            goto lab2;\n            }\n                if (ret < 0) return ret;\n            if (ret == 0) goto lab6;\n            if (ret < 0) return ret;", "partial_line": "{   int ret", "completion": "{   int ret = r_mark_sUn(z); <|endoftext|>"}
{"context": "\t\t\t\t\t\tDataDir),\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t\t\t errdetail(\"Permissions should be u=rwx (0700) or u=rwx,g=rx (0750).\")));\n#if !defined(WIN32) && !defined(__CYGWIN__)\n{", "partial_line": "fr", "completion": "free(DataDir); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t  PointPGetDatum(&widget->center)));\n\tchar\t   *string = PG_GETARG_CSTRING(0);\n\tnew_string = palloc0(NAMEDATALEN);\n\tlen = i;\n\t\tnew_string[len - i] = string[i];", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "#line 8 \"num_test.pgc\"\nif (sqlca.sqlcode < 0) sqlprint ( );}\n\ttext = PGTYPESnumeric_to_asc(res, -1);\n\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"insert into test ( text , num ) values ( 'test' , $1  )\", \n#line 55 \"num_test.pgc\"", "partial_line": "PGTYPESnumeric", "completion": "PGTYPESnumeric_free(value2); <|endoftext|>"}
{"context": "{ 3, s_6_2, -1, 1, 0},\n{ 4, s_6_30, -1, 1, 0},\n{ 6, s_6_37, -1, 6, 0},\n{ 3, s_6_46, -1, 9, 0},\n{ 5, s_6_48, -1, 1, 0},", "partial_line": "static const s", "completion": "static const symbol s_7_6[3] = { 'e', 'v', 'a' }; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t colname,\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t\tprd->kind = PARTITION_RANGE_DATUM_VALUE;\n\t\tprd->location = exprLocation(expr);\n\t\t\t\t\t\t errmsg(\"every bound following MAXVALUE must also be MAXVALUE\"),", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   arg, flags, chkcond, &Ldata);\n\t\t\t\t\t\t\t\t\t   arg, flags, chkcond, &Rdata);\n\t\t\tif (lmatch == TS_MAYBE || rmatch == TS_MAYBE)\n\t\t\t\tRdata.width = 0;\n\t\t\tLoffset = maxwidth - Ldata.width;", "partial_line": "(void) TS_phrase_output(data, &", "completion": "(void) TS_phrase_output(data, &Ldata, &Rdata, <|endoftext|>"}
{"context": "\t\tPG_RETURN_BOOL(float8_eq(l1->A, l2->A) &&\n\t\t\t\t\t   float8_eq(l1->B, l2->B) &&\n\t\tratio = float8_div(l1->B, l2->B);\n\telse\n\t\tratio = 1.0;", "partial_line": "ret", "completion": "return 0.0; <|endoftext|>"}
{"context": "\tjoinrel->rtekind = RTE_JOIN;\n\tjoinrel->pages = 0;\n\tjoinrel->subplan_params = NIL;\n\tjoinrel->fdwroutine = NULL;\n\tjoinrel->baserestrictcost.per_tuple = 0;", "partial_line": "joinrel->top_parent = parent_joinrel->", "completion": "joinrel->top_parent = parent_joinrel->top_parent ? parent_joinrel->top_parent : parent_joinrel; <|endoftext|>"}
{"context": "\tNumericAggState *state1;\n\tstate1->NaNcount += state2->NaNcount;\n\t\taccum_sum_combine(&state1->sumX2, &state2->sumX2);\n\tif (!PG_ARGISNULL(1))\n{", "partial_line": "NumericAggSt", "completion": "NumericAggState *state1; <|endoftext|>"}
{"context": "\tconst char *username = NULL;\n\twhile ((c = getopt_long(argc, argv, \"ad:eh:i:j:qp:sS:t:U:vwW\", long_options, &optindex)) != -1)\n\t\t\t\tbreak;\n\t\t\tcase 'q':\n\t\t\t\tbreak;", "partial_line": "verb", "completion": "verbose = true; <|endoftext|>"}
{"context": "\tif (debug_query_string)\n\t\tchar\t   *sharedquery;\n\t}\n\tbtleader->sharedsort = sharedsort;\n\tbtleader->walusage = walusage;", "partial_line": "btleade", "completion": "btleader->bufferusage = bufferusage; <|endoftext|>"}
{"context": "\t\t\t\t   PQExpBuffer pattern)\n{\n\tappendPQExpBufferChar(pattern, '\"');\n\tstr++;\n\t\t}", "partial_line": "Assert(fstate->", "completion": "Assert(fstate->linebuff.data); <|endoftext|>"}
{"context": "\tpathnode->path.pathtarget = rel->reltarget;\n\t\tsubpath->parallel_safe;\nMemoizePath *\n\t\tsubpath->parallel_safe;\n\tpathnode->subpath = subpath;", "partial_line": "pathnode->hash_o", "completion": "pathnode->hash_operators = hash_operators; <|endoftext|>"}
{"context": "\tnewtuple = heap_copytuple(tuple);\n\t\t\t\t\t\tisNull);\nGetSysCacheHashValue(int cacheId,\nstruct catclist *\n\t\telog(ERROR, \"invalid cache ID: %d\", cacheId);", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "{\n\tAssert(heaprel != NULL);\n\t\tif (vstate->pendingpages)\n\tpfree(vstate->pendingpages);\n\tif (vstate->npendingpages > 0)", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\tassert(regex != NULL && regex->re_magic == REMAGIC);\n\t\treturn true;\nint\npg_reg_colorisend(const regex_t *regex, int co)\n\t\t\t\t\t pg_wchar *chars, int chars_len)", "partial_line": "ch", "completion": "chr\t\t\tc; <|endoftext|>"}
{"context": "static const symbol s_0_19[5] = { 'h', 'e', 't', 'e', 'r' };\nstatic const symbol s_0_35[3] = { 'h', 'e', 't' };\n{\n{ 3, s_0_7, 6, 1, 0},\n{ 3, s_0_10, 6, 1, 0},", "partial_line": "{ 4, s_0", "completion": "{ 4, s_0_11, 6, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\t}\n\t\t\t\tif (blank)\n\t\t\t\t\ttmp[0] = ' ';\n\t\t\t\t\tsigndone = 1;", "partial_line": "else", "completion": "else if (blank) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tObjectIdGetDatum(accessMethodId),\n\t\topClassId = OpclassnameGetOpcid(accessMethodId, opcname);\n\t\tif (!OidIsValid(opClassId))\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),\n\topClassId = opform->oid;", "partial_line": "NameListToString(opclass), format_type", "completion": "NameListToString(opclass), format_type_be(attrType)))); <|endoftext|>"}
{"context": "\tint\t\t\ti;\n\tcheck_stack_depth();\n\tAssert(partdesc);\n\t\t\thas_partition_attrs(parentrel, parent_updatedCols, NULL);\n\t\trelinfo->all_partrels = bms_add_members(relinfo->all_partrels,", "partial_line": "if (childrel->rd_rel->relkind == RELKIND_", "completion": "if (childrel->rd_rel->relkind == RELKIND_PARTITIONED_TABLE) <|endoftext|>"}
{"context": "#include \"libpq/libpq.h\"\n#include \"mb/stringinfo_mb.h\"\n#include \"parser/analyze.h\"\n#include \"pg_getopt.h\"\n#include \"pg_trace.h\"", "partial_line": "#incl", "completion": "#include \"pgstat.h\" <|endoftext|>"}
{"context": "\treturn result;\ngistSortedBuildCallback(Relation index,\n\t\t\t\t\t\tItemPointer tid,\n\tgistCompressValues(buildstate->giststate, index,\n\ttuplesort_putindextuplevalues(buildstate->sortstate,", "partial_line": "state->pages_alloc", "completion": "state->pages_allocated = 1; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"cannot rename inherited column \\\"%s\\\"\",\nstatic void\n\t\t\t\t\t\t\t\t   void *arg)\n{\n\tHeapTuple\ttuple;", "partial_line": "tuple = SearchSys", "completion": "tuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relid)); <|endoftext|>"}
{"context": "\t\t\tif (item->isnull[dim])\n\t}\n\t\t\tfuncctx->max_calls = mcvlist->nitems;\n\t\t\t\t\t errmsg(\"function returning record called in context \"\n\t\t\t\t\t\t\t\"that cannot accept type record\")));", "partial_line": "if (func", "completion": "if (funcctx->call_cntr < funcctx->max_calls) <|endoftext|>"}
{"context": "            {   int ret = slice_del(z);\n    return 1;\n        goto lab0;\n    {   int ret = slice_from_s(z, 1, s_8);\n    return 1;", "partial_line": "static int r_Step_2(", "completion": "static int r_Step_2(struct SN_env * z) { <|endoftext|>"}
{"context": "\t\tint\t\t\tdotcnt;\n\t\tappendPQExpBufferStr(query,\n\t\t\tsimple_oid_list_append(oids, atooid(PQgetvalue(res, i, 0)));\n\t\t}\n\tquery = createPQExpBuffer();", "partial_line": "PQExpBuffe", "completion": "PQExpBuffer query; <|endoftext|>"}
{"context": "};\n\tStringInfo\ttablespace_map;\n\ttotal_checksum_failures = 0;\n\tdo_pg_backup_start(opt->label, opt->fastcheckpoint, &state.tablespaces,\n\t\tstate.tablespaces = lappend(state.tablespaces, newti);", "partial_line": "tablespace_map->data, -1,", "completion": "tablespace_map->data, -1, &manifest); <|endoftext|>"}
{"context": "\t\tif (PQstatus(conn) == CONNECTION_BAD &&\n\t\t\tPQconnectionNeedsPassword(conn) &&\n\t\t\tnew_pass = true;\n\t}\n\t{", "partial_line": "return", "completion": "return conn; <|endoftext|>"}
{"context": "\tint32\t\thours = PG_GETARG_INT32(4);\n\tint32\t\tmins = PG_GETARG_INT32(5);\n\tif (isinf(secs) || isnan(secs))\n\tPG_RETURN_INTERVAL_P(result);\n\t\t\terrmsg(\"interval out of range\"));", "partial_line": "EncodeSpecialTimes", "completion": "EncodeSpecialTimestamp(Timestamp dt, char *str) <|endoftext|>"}
{"context": "\t\t\t\tsafeOldestXmin,\n\t\t\t\taggressiveXIDCutoff;\n\tmultixact_freeze_min_age = params->multixact_freeze_min_age;\n\tcutoffs->relminmxid = rel->rd_rel->relminmxid;\n\tnextMXID = ReadNextMultiXactId();", "partial_line": "if (TransactionIdPrecedes(cutoffs->Ol", "completion": "if (TransactionIdPrecedes(cutoffs->OldestXmin, safeOldestXmin)) <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\t\tif (mqh->mqh_partial_bytes >= nbytes)\n\t\tstill_needed = nbytes - mqh->mqh_partial_bytes;\n\t\t\trb = still_needed;", "partial_line": "shm_mq", "completion": "shm_mq\t   *mq = mqh->mqh_queue; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t &volatility_item,\n\t\t\t\t\t\t\t\t\t &strict_item,\n\t\t\t\t\t\t\t\t\t &support_item,\n\tif (leakproof_item)\n\t}", "partial_line": "if (cost_", "completion": "if (cost_item) <|endoftext|>"}
{"context": "\t[DO_SEQUENCE_SET] = PRIO_SEQUENCE_SET,\n};\nstatic DumpId postDataBoundId;\n\t\t\t\t\t\t\t\t   char *buf, int bufsize);\n\tint\t\t\tcmpval;", "partial_line": "ret", "completion": "return -1; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tint access);\nstatic OffsetNumber _bt_binsrch(Relation rel, BTScanInsert key, Buffer buf);\nstatic bool _bt_readnextpage(IndexScanDesc scan, BlockNumber blkno,\nstatic void\n\t{", "partial_line": "sp->buf", "completion": "sp->buf = InvalidBuffer; <|endoftext|>"}
{"context": "#else\n#include \"postgres_fe.h\"", "partial_line": "#define PG_U", "completion": "#define PG_U_LC_MASK (PG_U_LU_MASK|PG_U_LL_MASK|PG_U_LT_MASK) <|endoftext|>"}
{"context": "{\n\tPG_FREE_IF_COPY(num1, 0);\n\tPG_FREE_IF_COPY(num2, 1);\nDatum\n\tNumeric\t\tnum2 = PG_GETARG_NUMERIC(1);", "partial_line": "result = cmp_nu", "completion": "result = cmp_numerics(num1, num2) >= 0; <|endoftext|>"}
{"context": "#include \"utils/lsyscache.h\"\n#include \"utils/snapmgr.h\"\n#include \"utils/syscache.h\"\ntypedef struct FlushPosition\n{", "partial_line": "static dlist_head lsn_mapping = DLIST", "completion": "static dlist_head lsn_mapping = DLIST_STATIC_INIT(lsn_mapping); <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\tListCell   *lc;\n\trte = planner_rt_fetch(rel->relid, root);\n\t\tif (ntup > rel->tuples)\n\trel->tuples = 100;", "partial_line": "Assert(rel-", "completion": "Assert(rel->relid > 0); <|endoftext|>"}
{"context": "                    if (z->c <= z->lb || z->p[z->c - 1] != 's') goto lab4;\n                lab4:\n            case 3:\n    }\n    return 1;", "partial_line": "z->c = z", "completion": "z->c = z->l - m_test1; <|endoftext|>"}
{"context": "\toopaque = HashPageGetOpaque(opage);\n\t}\n\t\tmaxbucket = metap->hashm_maxbucket;\n\t}\n\t\tuint32\t\tbuckets_to_add;", "partial_line": "metap->hashm_highmask = new_bucket", "completion": "metap->hashm_highmask = new_bucket | metap->hashm_lowmask; <|endoftext|>"}
{"context": "\t\treturn TM_Deleted;\t\t\n\t\t{\n\t\t\t\t{\n\t\t\t\t\t\t\tInvalidTransactionId);\n\t\t\t\tif (TransactionIdDidCommit(xvac))", "partial_line": "SetHintBits(tuple, buffer, H", "completion": "SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED, <|endoftext|>"}
{"context": "\t\tconst char *rolename;\n\t\tresetPQExpBuffer(buf);\n\t\tif (binary_upgrade)\n\t\t\tappendPQExpBufferStr(buf, \"\\n-- For binary upgrade, must preserve pg_authid.oid\\n\");\n\t\t\tappendPQExpBuffer(buf,", "partial_line": "\"SELECT pg_catalog.binary_upgrade_set_next_pg_authi", "completion": "\"SELECT pg_catalog.binary_upgrade_set_next_pg_authid_oid('%u'::pg_catalog.oid);\\n\\n\", <|endoftext|>"}
{"context": "\t\tparse->jointree->quals = (Node *)\n\tsortcl = makeNode(SortGroupClause);\n\tsortcl->tleSortGroupRef = assignSortGroupRef(tle, subroot->processed_tlist);\n\t\t\t\t\t\t\t\t\t\t   sizeof(int64),\n\tSS_charge_for_initplans(subroot, final_rel);", "partial_line": "NU", "completion": "NULL, <|endoftext|>"}
{"context": "{\n\tTransactionId xmin;\n\t\t\treturn;\n\tbuilder->xmin = running->oldestRunningXid;\n\t\tSnapBuildWaitSnapshot(running, builder->initial_xmin_horizon);", "partial_line": "Assert(Transa", "completion": "Assert(TransactionIdIsNormal(builder->xmax)); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase ACL_CONNECT_CHR:\n\t\t\tcase ACL_ALTER_SYSTEM_CHR:\n\t}\n\t\t\t\t\t errmsg(\"a name must follow the \\\"/\\\" sign\")));", "partial_line": "return re", "completion": "return result_acl; <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"negative substring length not allowed\")));\n\t\t}\n\t{\n\t\tint32\t\tslice_strlen;\n\t\tint32\t\tE1;", "partial_line": "slice_", "completion": "slice_start = 0; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tOid\t\t\tnewetype = exprType(newe);\n\t\t\t\t\t\t\t\tformat_type_be(array_type)),\n\t\telse\n\t}", "partial_line": "if (co", "completion": "if (coerce_hard) <|endoftext|>"}
{"context": "\tgettext_noop(\"Use DROP INDEX to remove an index.\")},\n\t\tgettext_noop(\"foreign table \\\"%s\\\" does not exist, skipping\"),\n\t\tgettext_noop(\"\\\"%s\\\" is not a foreign table\"),\n\t\tgettext_noop(\"\\\"%s\\\" is not an index\"),\n};", "partial_line": "typedef struct Fo", "completion": "typedef struct ForeignTruncateInfo <|endoftext|>"}
{"context": "\tif (val >= 0)\n\ttm->tm_min = 0;\n\t*fsec = 0;\n{\n\tbool\t\tdatepart = true;", "partial_line": "*dt", "completion": "*dtype = DTK_DELTA; <|endoftext|>"}
{"context": "\tSize\t\ttbl_size;\n\t\tn * sizeof(datetkn);\n\tif (!tbl)\n\t\treturn NULL;\n\t{", "partial_line": "strlen(ab", "completion": "strlen(abbr->zone) + 1; <|endoftext|>"}
{"context": "#include \"funcapi.h\"\n#include \"miscadmin.h\"\n#include \"storage/standby.h\"", "partial_line": "#incl", "completion": "#include \"utils/timestamp.h\" <|endoftext|>"}
{"context": "desc_recompress_leaf(StringInfo buf, ginxlogRecompressDataLeaf *insertData)\n\t\tuint8\t\ta_action = *((uint8 *) (walbuf++));\ngin_desc(StringInfo buf, XLogReaderState *record)\n\tuint8\t\tinfo = XLogRecGetInfo(record) & ~XLR_INFO_MASK;\n\t\t\t{", "partial_line": "(xlrec->flags & GIN_INSERT_ISLEAF", "completion": "(xlrec->flags & GIN_INSERT_ISLEAF) ? 'T' : 'F'); <|endoftext|>"}
{"context": "\t\t\t\t\t\tsimple_oid_list_member(&table_include_oids,\n\t\t\t\t\tif (configtbl->dobj.namespace->dobj.dump &\n\t\t\t\t\t\tdumpobj = true;\n\t\tif (extconfigarray)\n\t\t\t\t\t  \"SELECT conrelid, confrelid \"", "partial_line": "ntups", "completion": "ntups = PQntuples(res); <|endoftext|>"}
{"context": "\t\tl *= 10;\n\t\tvalue.digits = i;\n\tvalue.remaining = value.digits;\n\tfor (i = value.digits, j = 0; i > 0; i--, j++)\n\tfor (i = len - 1; i >= 0; i--)", "partial_line": "re", "completion": "return -1; <|endoftext|>"}
{"context": "static const symbol s_4_0[4] = { 'i', 'q', 'U', 'e' };\nstatic const symbol s_4_10[2] = { 'i', 'f' };\nstatic const symbol s_4_13[5] = { 'u', 't', 'i', 'o', 'n' };\nstatic const symbol s_4_24[4] = { 'i', 'v', 'e', 's' };\nstatic const symbol s_4_37[6] = { 'a', 'm', 'm', 'e', 'n', 't' };", "partial_line": "{ 4,", "completion": "{ 4, s_4_0, -1, 1, 0}, <|endoftext|>"}
{"context": "\t{p_isdigit, 0, A_NEXT, TPS_InHost, 0, NULL},\n\t{p_iseqC, '-', A_PUSH, TPS_InHostFirstAN, 0, NULL},\n\t{p_iseqC, '_', A_PUSH, TPS_InHostFirstAN, 0, NULL},\nstatic const TParserStateActionItem actionTPS_InFileFirst[] = {\n\t{NULL, 0, A_POP, TPS_Null, 0, NULL}", "partial_line": "{p_isEOF, 0", "completion": "{p_isEOF, 0, A_POP, TPS_Null, 0, NULL}, <|endoftext|>"}
{"context": "\tunsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3);\n\t\t\t\tk,\n\t\t\t\t\t}\n\t\t\t{\n\t\t\t}", "partial_line": "*p++ = ((c1 & 0x3f", "completion": "*p++ = ((c1 & 0x3f) << 1) + 0xf3 + (c2 > 0x9e); <|endoftext|>"}
{"context": "{\n\tBufferDesc *bufHdr = (BufferDesc *) arg;\n\t\t\t\t\t\t\t\t  MyProcNumber,\n}\nrlocator_comparator(const void *p1, const void *p2)", "partial_line": "re", "completion": "return 1; <|endoftext|>"}
{"context": "\t\t\tLWLockRelease(lock);\n\t\tint\t\t\tbshift;\n\t\t\tLWLock\t   *newlock;\n\t\t\tslotno = SimpleLruReadPage(MultiXactMemberCtl, pageno, true, multi);\n\t\t\tprev_pageno = pageno;", "partial_line": "xactptr = (Tr", "completion": "xactptr = (TransactionId *) <|endoftext|>"}
{"context": "\t\tif (seg->resowner != NULL)\n\t\t\tResourceOwnerForgetDSM(seg->resowner, seg);\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_RESOURCES),\n\t}\n\tdsm_control->item[nitems].impl_private_pm_handle = NULL;", "partial_line": "if (dsm_control->i", "completion": "if (dsm_control->item[i].refcnt <= 1) <|endoftext|>"}
{"context": "#include \"access/skey.h\"\n#define\t\tPROCNUM_CONTAINS\t\t13\t\ntypedef struct InclusionOpaque\n\tFmgrInfo\textra_procinfos[INCLUSION_MAX_PROCNUMS];", "partial_line": "uint16 procnu", "completion": "uint16 procnum, bool missing_ok); <|endoftext|>"}
{"context": "\t}\n\t\tif (release)\n\t\tConditionVariableSleep(&barrier->condition_variable, wait_event_info);\nbool\n}", "partial_line": "SpinLockRelease(&ba", "completion": "SpinLockRelease(&barrier->mutex); <|endoftext|>"}
{"context": "static int\n\tif (l == 1)\n\twhile (ptr - a < l)\n\t\t\ttmppos = LIMITPOS(ptr->pos.pos);\n\t\t\t\t\tres->alen *= 2;", "partial_line": "res->pos.apos = (uint16 *) repalloc(res->pos.ap", "completion": "res->pos.apos = (uint16 *) repalloc(res->pos.apos, sizeof(uint16) * res->alen); <|endoftext|>"}
{"context": "#endif\n\tinit_var(&result);\n\tPG_RETURN_DATUM(DirectFunctionCall2(numeric_div, sumd, countd));\n\tDatum\t\tN_datum;\n\t\tPG_RETURN_NULL();", "partial_line": "PG_RETUR", "completion": "PG_RETURN_NUMERIC(make_result(&const_nan)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   nullkeys,\n\t\t\t\tbreak;\n\t\t\tbreak;\n\tif (boolmatchstatus == PARTCLAUSE_MATCH_CLAUSE)\n\t\tPartClauseInfo *partclause;", "partial_line": "else if (", "completion": "else if (*clause_steps == NIL) <|endoftext|>"}
{"context": "\tparamsz = SizeOfBackendParameters(startup_data_len);\n\t\t\t\t\t\t\t\t\tPAGE_READWRITE,\n\t\t\t\t\t\t\t\t\tparamsz,\n\t\t\t\t\t\t\t\t\tNULL);\n\t\tereport(LOG,", "partial_line": "GetLastEr", "completion": "GetLastError()))); <|endoftext|>"}
{"context": "\t{\n\t\tif (seg->resowner != NULL)\n\t\t\tResourceOwnerForgetDSM(seg->resowner, seg);\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_RESOURCES),\n\t}", "partial_line": "dsm_control->item[nitems].im", "completion": "dsm_control->item[nitems].impl_private_pm_handle = NULL; <|endoftext|>"}
{"context": "\t{\n\tappendStringInfo(&buf, \"rec:%u\\n\", snapshot->takenDuringRecovery);\n\t\t\t\t errmsg(\"could not write to file \\\"%s\\\": %m\", pathtmp)));\n\t\tereport(ERROR,\n\t\t\t\t errmsg(\"invalid snapshot data in file \\\"%s\\\"\", filename)));", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tv.val.string.val = str;\n\tpfree(val_datums);\n{\n\t\t\t   *icursor,\n\t\ticursor = icursor->next;", "partial_line": "return", "completion": "return result; <|endoftext|>"}
{"context": "aloop:\n\terrno = 0;\n\t\t{\n\t\t\t\t\tereport(COMMERROR,\n\t\t\t\telse", "partial_line": "(errcod", "completion": "(errcode(ERRCODE_PROTOCOL_VIOLATION), <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"protrftypes is not a 1-D Oid array or it contains nulls\");\n\t{\n\t\tARR_ELEMTYPE(arr) != TEXTOID)\n\t\tif (ARR_NDIM(arr) != 1 ||\n\t\targmodes = NULL;", "partial_line": "for (i = 0; i < n", "completion": "for (i = 0; i < numargs; i++) <|endoftext|>"}
{"context": "\tchar\t   *location_with_version_dir;\n\tif (in_place)\n\t{\n\t\tif (MakePGDirectory(linkloc) < 0 && errno != EEXIST)\n\t}", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\trestart_lsn,\n\tFreeDecodingContext(ctx);\n\tName\t\tplugin = PG_GETARG_NAME(1);\n\tresult = HeapTupleGetDatum(tuple);\n{", "partial_line": "SpinLockRelease(&s", "completion": "SpinLockRelease(&slot->mutex); <|endoftext|>"}
{"context": "\t\t\thash_ok_operator(expr))\n\tif (leftargs == NIL)\n\t\t contain_aggs_of_level((Node *) rightargs, 1)))\n\t\treturn NULL;\n\tIncrementVarSublevelsUp((Node *) leftargs, -1, 1);", "partial_line": "tlist = lap", "completion": "tlist = lappend(tlist, <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\tstatus->curEntry = curElem->link;\nhash_seq_term(HASH_SEQ_STATUS *status)\nvoid", "partial_line": "hashp-", "completion": "hashp->tabname); <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#endif\n#include \"reconstruct.h\"", "partial_line": "char\t   *tar", "completion": "char\t   *target_path; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"tablespace \\\"%s\\\" does not exist\",\n\ttable_endscan(scan);\n#ifdef ENFORCE_REGRESSION_TEST_NAME_RESTRICTIONS\n#endif\n\tScanKeyInit(&entry[0],", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tnewmembers[nnewmembers++] = members[i];\n\t{\n\t\tAssert(nnewmembers == 1);\n\t}\n\t{", "partial_line": "freeze_x", "completion": "freeze_xmax = false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  dynamic_shared_memory_type, false);\n\tsnprintf(repltok, sizeof(repltok), \"%dkB\",\n\tsnprintf(repltok, sizeof(repltok), \"%dkB\",\n\t\t strcmp(authmethodhost, \"scram-sha-256\") != 0) ||\n\t\t gnames != NULL;\t\t", "partial_line": "conflines[1] = p", "completion": "conflines[1] = pg_strdup(\"# It will be overwritten by the ALTER SYSTEM command.\\n\"); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t\t\t\t   WCO_RLS_UPDATE_CHECK,\n\t\t\t\t\t\t\t\t   conflict_restrictive_policies,\n\t\t}\n\t\tList\t   *merge_update_permissive_policies;", "partial_line": "fals", "completion": "false); <|endoftext|>"}
{"context": "\t\t}\n\t\tpagetable_iterator i;\n\t\twhile ((bpage = pagetable_iterate(b->pagetable, &i)) != NULL)\n\t}\n\t\tfor (wordnum = 0; wordnum < WORDS_PER_CHUNK; wordnum++)", "partial_line": "tbm_mark_p", "completion": "tbm_mark_page_lossy(a, pg); <|endoftext|>"}
{"context": "\t\t}\n\thash_table->control->buckets =\n\t\t\t\t\t\t\t  DSA_ALLOC_NO_OOM | DSA_ALLOC_ZERO);\n}\ndshash_attach(dsa_area *area, const dshash_parameters *params,", "partial_line": "hash_tab", "completion": "hash_table->arg = arg; <|endoftext|>"}
{"context": "\t\t\tswitch (((Var *) vardata->var)->varattno)\n\t\t\t\t\tstadistinct = 1.0;\t\n\t\t}\n\t}\n\t\t*isdefault = true;", "partial_line": "*isdefault =", "completion": "*isdefault = true; <|endoftext|>"}
{"context": "#include \"nodes/makefuncs.h\"\n#include \"utils/acl.h\"\n{\n\tList\t   *policies = NIL;\n\tDatum\t\trole;", "partial_line": "Colu", "completion": "ColumnRef  *c; <|endoftext|>"}
{"context": "\tif (lxid != MyProc->vxid.lxid)\n\t\tparents = palloc(sizeof(TransactionState) * s->nestingLevel);\n\t\t\tparents[parentOffset++] = p;\n\t\tpfree(parents);\n\tif (isSubXact && XLogLogicalInfoActive() &&", "partial_line": "!TopTransactionSt", "completion": "!TopTransactionStateData.didLogXid) <|endoftext|>"}
{"context": "\t\t\tif (tmfc.bc)\n\t\tif (tmfc.bc)\n\t\t\t}\n\t\telse\n\t{", "partial_line": "if (tmfc", "completion": "if (tmfc.mode == FROM_CHAR_DATE_ISOWEEK) <|endoftext|>"}
{"context": "\t}\n\t\t*isdefault = true;\n\t*isdefault = true;\n}\n\tbool\t\thave_data = false;", "partial_line": "if (!statistic_proc_security_c", "completion": "if (!statistic_proc_security_check(vardata, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t &opfname);\n\t\t\t\t\t   get_namespace_name(namespaceoid));\n\tamoid = amform->oid;\n\t\tereport(ERROR,\n\tListCell   *l;", "partial_line": "operators", "completion": "operators = NIL; <|endoftext|>"}
{"context": "\t\treturn;\n\tLLVMInitializeNativeAsmParser();\n\tif (llvm_context == NULL)\n\tcpu = LLVMGetHostCPUName();\n\topt0_tm =", "partial_line": "LLVMCodeMode", "completion": "LLVMCodeModelJITDefault); <|endoftext|>"}
{"context": "\t\t\t\tgotUniqueStartpoint = true;\n\t\t\t\tgotUniqueStartpoint = true;\n\t\t\tWALInsertLockRelease();\n\t\twhile ((de = ReadDir(tblspcdir, PG_TBLSPC_DIR)) != NULL)\n\t\t\tPGFileType\tde_type;", "partial_line": "char", "completion": "char\t   *badp; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"tablespace \\\"%s\\\" does not exist\",\n\tHeapTuple\ttuple;\n\tScanKeyInit(&entry[0],\n\t\t\t\tAnum_pg_tablespace_oid,\n\t\tif (!destroy_tablespace_directories(xlrec->ts_id, true))", "partial_line": "ereport(", "completion": "ereport(LOG, <|endoftext|>"}
{"context": "\t}\n\t\t{\n\t\t\tlfirst(cell1) = lappend((List *) lfirst(cell1), cte);\n\t\t}\n\t{", "partial_line": "if (bms", "completion": "if (bms_is_empty(items[j].depends_on)) <|endoftext|>"}
{"context": "\t\t{\n\t\t\tseginfo->action = GIN_SEGMENT_REPLACE;\n\t\tnewseg->seg = NULL;\n\t\tdlist_push_tail(&leaf->segments, &newseg->node);\n\t\tleafSegmentInfo *cur = (leafSegmentInfo *) dlist_container(leafSegmentInfo, node, iter.cur);", "partial_line": "int\t\t\tnt", "completion": "int\t\t\tntmpitems; <|endoftext|>"}
{"context": "\t\t\t\tReplicationSlotValidateName(opts->slot_name, ERROR);\n\t\t\t\t\t\t\t\t\t PGC_BACKEND, PGC_S_TEST, GUC_ACTION_SET,\n\t\t\t\t strcmp(defel->defname, \"refresh\") == 0)\n\t\t\topts->specified_opts |= SUBOPT_REFRESH;\n\t\telse if (IsSet(supported_opts, SUBOPT_PASSWORD_REQUIRED) &&", "partial_line": "strcmp(de", "completion": "strcmp(defel->defname, \"password_required\") == 0) <|endoftext|>"}
{"context": "\t\twhile (r2 != NULL)\n\t\t{\n\t\t\t}\n\t\t\telse if (range_overlaps_internal(rangetyp, r1, r2))\n\t\t\t}", "partial_line": "return make_multirange(mltrngtypoid, range", "completion": "return make_multirange(mltrngtypoid, rangetyp, range_count3, ranges3); <|endoftext|>"}
{"context": "\tchar\t   *buf1;\t\t\t\n\tbool\t\tcache_blob;\t\t\n} VarStringSortSupport;\n\tTupleDesc\ttupdesc;\n#define DatumGetVarStringP(X)\t\t((VarString *) PG_DETOAST_DATUM(X))", "partial_line": "static int\tvarstrfastcmp_", "completion": "static int\tvarstrfastcmp_c(Datum x, Datum y, SortSupport ssup); <|endoftext|>"}
{"context": "\t\t\trowexpr->args = fields;\n\t\t}\n\t\tnewvar = (Node *) list_nth(rte->joinaliasvars, var->varattno - 1);\n\tif (IsA(node, Query))\n\t\treturn (Node *) newnode;", "partial_line": "Assert(!IsA(node, A", "completion": "Assert(!IsA(node, AlternativeSubPlan)); <|endoftext|>"}
{"context": "\tint\t\t\tnumLockModes,\n\t{\n\t\tPGPROC\t   *leader;\n\t\t\t\t\t}\n\t\tint\t\t\tqueue_size = waitOrders[i].nProcs;", "partial_line": "info->pid = c", "completion": "info->pid = checkProc->pid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t numAllocTids * sizeof(ItemPointerData));\n\t\telse if (tidexpr->exprstate && tidexpr->isarray)\n\t\t\t\tif (!table_tuple_tid_valid(scan, itemptr))\n\t\t\t}\n\t\t\tpfree(ipnulls);", "partial_line": "if (exec", "completion": "if (execCurrentOf(tidexpr->cexpr, econtext, <|endoftext|>"}
{"context": "\tSwitchBackToLocalLatch();\n\tpgstat_reset_wait_event_storage();\n\tDisownLatch(&proc->procLatch);\n\t\t\tresult = proc;\n\tAssert(LWLockHeldByMeInMode(partitionLock, LW_EXCLUSIVE));", "partial_line": "myHeldLocks = MyProc->held", "completion": "myHeldLocks = MyProc->heldLocks = proclock->holdMask; <|endoftext|>"}
{"context": "\t\tPG_RETURN_POINTER(retval);\n\tint32\t   *StopHigh = ((CHKVAL *) checkval)->arre;\n\tint32\t   *StopMiddle;\n\t\treturn TS_MAYBE;\n\t{", "partial_line": "StopMiddle = StopLow + (Stop", "completion": "StopMiddle = StopLow + (StopHigh - StopLow) / 2; <|endoftext|>"}
{"context": "\t\tif (!RestoreBlockImage(record, block_id, primary_image_masked))\n\t\tif (rmgr.rm_mask != NULL)\n\tTransactionId recordXid;\n\t\treturn false;\n\t\trecord->ReadRecPtr >= recoveryTargetLSN)", "partial_line": "recoveryStopXid = Inval", "completion": "recoveryStopXid = InvalidTransactionId; <|endoftext|>"}
{"context": "\tinit_icu_converter();\n\tulen = uchar_convert(icu_converter, uchar, ulen + 1, src, srclen);\n\t\t\t\t\t\t\t\t\t\t(uint8_t *) dest,\nstatic void\n\t\t\t\t errmsg(\"encoding \\\"%s\\\" not supported by ICU\",", "partial_line": "(errmsg(\"could not", "completion": "(errmsg(\"could not open ICU converter for encoding \\\"%s\\\": %s\", <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tpg_fatal(\"Expected to follow PGRES_SINGLE_TUPLE, but received PGRES_TUPLES_OK directly instead\");\n\t\t\t\t\tfprintf(stderr, \", %d tuple: %s\\n\", PQntuples(res), PQgetvalue(res, 0, 0));\n\t\tpg_fatal(\"failed to send flush request\");\n\t\t\t\t PQresStatus(PQresultStatus(res)));\n\tif (PQresultStatus(res) != PGRES_TUPLES_OK)", "partial_line": "if (PQntuples(", "completion": "if (PQntuples(res) != 0) <|endoftext|>"}
{"context": "\t\t{\n\t\t\tfree(fname);\n\t\tignore_slash_options(scan_state);\n\t\t\t\tPQExpBuffer query_buf)\n\t\tconditional_stack_push(cstack, IFSTATE_TRUE);", "partial_line": "conditional_stack_poke(", "completion": "conditional_stack_poke(cstack, IFSTATE_FALSE); <|endoftext|>"}
{"context": "\t\t\t\t #expr, __FILE__, __LINE__); \\\n#define EXPECT_EQ_U64(result_expr, expected_expr)\t\\\n\tint\t\t\tnkeys;\n\t{\n\t},", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t  errdetail_log(\"Client IP address resolved to \\\"%s\\\", forward lookup matches.\", \\\n\t\t\t\t  errdetail_log(\"Could not translate client host name \\\"%s\\\" to IP address: %s.\", \\\n\t\t\t\t\t\t\t HOSTNAME_LOOKUP_DETAIL(port)));\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_AUTHORIZATION_SPECIFICATION),", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\tNOERR();\n\t\tcolor\t   *pco;\n\t\t\tcm->classbits[cv->cclasscode] = cm->hiarraycols;\n\t\t\t\t\t\tNOERR();\n\t\t\t   color *lastsubcolor)", "partial_line": "if (sco != *las", "completion": "if (sco != *lastsubcolor) <|endoftext|>"}
{"context": "\t\t\t\t\tf_lo;\n\t\t\telog(ERROR, \"could not parse filename \\\"%s\\\"\", mapping_de->d_name);\n\t\t\tcontinue;\n\t\tfiles = lappend(files, f);\n\t}", "partial_line": "if (tup", "completion": "if (tuplecid_data == NULL) <|endoftext|>"}
{"context": "\t\t\treturn make_result(&const_nan);\n\t\t{\n\t\t\t\t\t\t\t errmsg(\"division by zero\")));\n\t\t\t\t\treturn make_result(&const_ninf);\n\t\t\t\t\tereport(ERROR,", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "#else\n\tTPARSERSTATEACTION(TPS_InAsciiWord),\n\tTPARSERSTATEACTION(TPS_InXMLBegin),\n\tTPARSERSTATEACTION(TPS_InHostFirstAN),\n\tTPARSERSTATEACTION(TPS_InEmail),", "partial_line": "TPARSERSTAT", "completion": "TPARSERSTATEACTION(TPS_InURLPathStart), <|endoftext|>"}
{"context": "void\nmda_next_tuple(int n, int *curr, const int *span)\n\t\treturn -1;\n\tif (curr[0])\n\t\tereport(ERROR,", "partial_line": "deconstruct_array_builtin(arr, CSTRINGO", "completion": "deconstruct_array_builtin(arr, CSTRINGOID, &elem_values, NULL, n); <|endoftext|>"}
{"context": "\t{\n\t\tif (!dbform->datallowconn && !override_allow_connections)\n\t\t\tereport(FATAL,\n\t\tif (!am_superuser && !override_allow_connections &&\n\t\t\tobject_aclcheck(DatabaseRelationId, MyDatabaseId, GetUserId(),", "partial_line": "(errcode(ERRCODE_TOO_MANY_C", "completion": "(errcode(ERRCODE_TOO_MANY_CONNECTIONS), <|endoftext|>"}
{"context": "\tAssert(dlist_is_empty(blocklist));\n\tdlist_push_head(blocklist, &block->node);\n\tslab->curBlocklistIndex = blocklist_idx;\n}\n{", "partial_line": "Assert(", "completion": "Assert(SlabIsValid(slab)); <|endoftext|>"}
{"context": "{ 6, s_4_17, 16, 2, 0},\n{ 6, s_4_18, 16, 2, 0},\n{ 8, s_4_25, 23, 2, 0},\n{ 4, s_4_30, 29, 2, 0},\n{ 4, s_4_31, 29, 2, 0},", "partial_line": "{ 4,", "completion": "{ 4, s_4_33, 32, 2, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"no collation was derived for column \\\"%s\\\" with collatable type %s\",\n\tnslots = Min(tupdesc->natts,\n\tfor (int i = 0; i < nslots; i++)\n\t\tslot[slotCount]->tts_values[Anum_pg_attribute_attinhcount - 1] = Int16GetDatum(attrs->attinhcount);\n\t\t{", "partial_line": "slot[slotCount]->tts_isnull[Anum_pg_attr", "completion": "slot[slotCount]->tts_isnull[Anum_pg_attribute_attstattarget - 1] = attrs_extra->attstattarget.isnull; <|endoftext|>"}
{"context": "\t\tParamExecData *prm;\n\t\tsz = add_size(sz, sizeof(int)); \nstatic dsa_pointer\n\tint\t\t\tnparams;\n\t\tint16\t\ttypLen;", "partial_line": "if (", "completion": "if (OidIsValid(typeOid)) <|endoftext|>"}
{"context": "#include \"catalog/catversion.h\"\n#include \"catalog/pg_control.h\"\n#include \"fe_utils/string_utils.h\"\n\t\t\t\t\t\t   XLogRecPtr chkptredo);", "partial_line": "int b_nen", "completion": "int b_nentries, <|endoftext|>"}
{"context": "\tecpg_log(\"ECPGget_desc_header: found %d attributes\\n\", *count);\nstatic bool\n\t\tcase ECPGt_short:\n\t\t\t*(unsigned long long int *) var = (unsigned long long int) value;\n\treturn true;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "#include \"utils/rel.h\"\n{\n\tPage\t\tpage = BufferGetPage(stack->buffer);\nstatic void\n\tGinBtreeData btree;", "partial_line": "buffer =", "completion": "buffer = stack->buffer; <|endoftext|>"}
{"context": "\t\t\tchar\t\tweight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1));\n\t\t{\n\t}\n\t\t\t\ti,", "partial_line": "deconstruct_array_builtin(v, TEXT", "completion": "deconstruct_array_builtin(v, TEXTOID, &dlexemes, &nulls, &nitems); <|endoftext|>"}
{"context": "static const symbol s_5_9[2] = { 'a', 'l' };\nstatic const symbol s_5_16[4] = { 'm', 'e', 'n', 't' };\nstatic const symbol s_5_18[2] = { 'o', 'u' };\n{ 4, s_5_3, -1, 1, 0},\nstatic const symbol s_10[] = { 'e', 'n', 't' };", "partial_line": "static", "completion": "static const symbol s_11[] = { 'e' }; <|endoftext|>"}
{"context": "if (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) exit (1);}\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) exit (1);}\n#line 34 \"quote.pgc\"", "partial_line": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"insert into \\\"My_Table\\\" values ( 2 , E'a", "completion": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"insert into \\\"My_Table\\\" values ( 2 , E'a\\\\\\\\\\\\\\\\b' )\", ECPGt_EOIT, ECPGt_EORT); <|endoftext|>"}
{"context": "                    if (ret < 0) return ret;\n                }\n    while(1) {\n        }\n    }", "partial_line": "among_var =", "completion": "among_var = find_among_b(z, a_4, 62); <|endoftext|>"}
{"context": "\t\tremoteslot_part = table_slot_create(partrel, &estate->es_tupleTable);\n\t\t\t\t\t\t\t\t\t\t remoteslot_part,\n\t\tcase CMD_UPDATE:\n\t\t\t\tTupleTableSlot *localslot;\n\t\t\t\tbool\t\tfound;", "partial_line": "ConflictTupleInfo conflict", "completion": "ConflictTupleInfo conflicttuple = {0}; <|endoftext|>"}
{"context": "{\n\tunsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3);\n\tunsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2);\n\tint\t\t\tconverted;\n\tCHECK_ENCODING_CONVERSION_ARGS(PG_WIN1251, PG_MULE_INTERNAL);", "partial_line": "unsigned char *des", "completion": "unsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3); <|endoftext|>"}
{"context": "\tchar\t   *p;\n\tstruct oauth_ctx *ctx = opaq;\n\t*output = NULL;\n\tif (input == NULL)\n\t\t*outputlen = 0;", "partial_line": "if (i", "completion": "if (inputlen == 0) <|endoftext|>"}
{"context": "        case 83:\n                if (ret < 0) return ret;\n            {   int ret = slice_from_s(z, 4, s_120);\n            break;\n            {   int ret = slice_from_s(z, 4, s_124);", "partial_line": "if (ret <", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\telse\n\t\tconst char *sessionname;\n\t\t\t\t\t\t   \"  current_setting('application_name') || '/' || $1,\\n\"\n\t\t}\n\t\tconns[i].backend_pid = PQbackendPID(conns[i].conn);", "partial_line": "res = PQprepare(conns[0].conn, PREP_WAITING, wait", "completion": "res = PQprepare(conns[0].conn, PREP_WAITING, wait_query.data, 0, NULL); <|endoftext|>"}
{"context": "\t\t\treturn config_enum_lookup_by_value((struct config_enum *) record,\nconst char *\n\tAssert(record != NULL);\n\t\t\t\t errdetail(\"Only roles with privileges of the \\\"%s\\\" role may examine this parameter.\",\n\t\t\tsnprintf(buffer, sizeof(buffer), \"%d\",", "partial_line": "write_auto_conf_file(", "completion": "write_auto_conf_file(int fd, const char *filename, ConfigVariable *head) <|endoftext|>"}
{"context": "\t{\n\t\t\t\tpg_log_info(\"while INITIALIZING:\");\n\t\t\t\t\tAH->currentTE->owner ? AH->currentTE->owner : \"(no owner)\");\n\t\texit_nicely(1);\n\t\tAH->public.n_errors++;", "partial_line": "if (strcmp(te->desc, \"", "completion": "if (strcmp(te->desc, \"TABLE DATA\") == 0 && te->nDeps > 0) <|endoftext|>"}
{"context": "toast_fetch_datum_slice(struct varlena *attr, int32 sliceoffset,\n\tstruct varatt_external toast_pointer;\n\tint32\t\tattrsize;\n\tVARATT_EXTERNAL_GET_POINTER(toast_pointer, attr);\n\tattrsize = VARATT_EXTERNAL_GET_EXTSIZE(toast_pointer);", "partial_line": "if (sliceoffset >=", "completion": "if (sliceoffset >= attrsize) <|endoftext|>"}
{"context": "\t\tpg_strncasecmp(\"C.\", collcollate, 2) != 0 &&\n\t\tcollversion = pstrdup(gnu_get_libc_version());\n\t\tif (loc)\n\t\t{\n\t\telse", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tappendStringInfo(&querybuf, \"DELETE FROM %s%s\",\n\t\tfor (int i = 0; i < riinfo->nkeys; i++)\n\t\t\tqueryoids[i] = pk_type;\n\tri_PerformCheck(riinfo, &qkey, qplan,\n\tRelation\tfk_rel;", "partial_line": "oldslot = trigda", "completion": "oldslot = trigdata->tg_trigslot; <|endoftext|>"}
{"context": "\t\tuloc_getLanguage(loc_str, lang, ULOC_LANG_CAPACITY, &status);\n\t\t{\n\tstatus = U_ZERO_ERROR;\n\t{\n\t\t\t\t\t\t\torig_str, u_errorName(status))));", "partial_line": "if (fixed_s", "completion": "if (fixed_str != NULL) <|endoftext|>"}
{"context": "\t\tUnlockTuple(relation, &oldtup.t_self, InplaceUpdateTupleLock);\n\treturn ret;\n\toldlen = oldtup->t_len - htup->t_hoff;\n\tif (oldlen != newlen || htup->t_hoff != tuple->t_data->t_hoff)\n\tdst = (char *) htup + htup->t_hoff;", "partial_line": "&RelcacheInitF", "completion": "&RelcacheInitFileInval); <|endoftext|>"}
{"context": "\tbool\t   *nulls;\n\tbool\t   *replaces;\n\tif (!superuser())\n\t\tif (Anum_owner <= 0)\n\telse if (classId == OperatorFamilyRelationId)", "partial_line": "replaces = palloc0(RelationGetNumberOfAttr", "completion": "replaces = palloc0(RelationGetNumberOfAttributes(rel) * sizeof(bool)); <|endoftext|>"}
{"context": "\tchar\t\tv1,\n\t\t\t   *p;\n\ts = src;\n\t\t}\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "if (!g", "completion": "if (!get_hex(s, &v2)) <|endoftext|>"}
{"context": "\tMemoryContextSwitchTo(oldcontext);\n\t\tRawStmt    *parsetree = lfirst_node(RawStmt, parsetree_item);\n\t\tList\t   *querytree_list,\n\t\tsize_t\t\tcmdtaglen;\n\t\tcmdtagname = GetCommandTagNameAndLen(commandTag, &cmdtaglen);", "partial_line": "errmsg(\"current transact", "completion": "errmsg(\"current transaction is aborted, \" <|endoftext|>"}
{"context": "\t\tappendPQExpBufferStr(query, \" TEMPORARY\");\n\tif (use_new_option_syntax)\n\t\t\t\tAppendStringCommandOption(query, use_new_option_syntax,\n\t{\n\t\t{", "partial_line": "pg_log_error(\"could not drop repl", "completion": "pg_log_error(\"could not drop replication slot \\\"%s\\\": got %d rows and %d fields, expected %d rows and %d fields\", <|endoftext|>"}
{"context": "\t\taccum_sum_add(&numstate.sumX, &tmp_var);\n\t{\n\t\tpfree(numstate.sumX2.pos_digits);\n\t\tpfree(numstate.sumX2.neg_digits);\n#ifdef HAVE_INT128", "partial_line": "state = PG_ARGISNULL(0) ? NUL", "completion": "state = PG_ARGISNULL(0) ? NULL : (PolyNumAggState *) PG_GETARG_POINTER(0); <|endoftext|>"}
{"context": "\t{\n\t\tAssert(var->varno != INNER_VAR);\n\t\treturn (Node *) cexpr;\n\tif (IsA(node, PlaceHolderVar))\n\tif (node == NULL)", "partial_line": "Assert(", "completion": "Assert(!IsA(node, AlternativeSubPlan)); <|endoftext|>"}
{"context": "\t\tif (ZSTD_isError(res))\n\t\telse\n\t\t\t\tbreak;\t\t\t\n\t\tZSTD_freeDStream(zstdcs->dstream);\n}", "partial_line": "stati", "completion": "static bool <|endoftext|>"}
{"context": "\t{\n\t\tShmemSegHdr->freeoffset = newFree;\n}\n\tSize\t\tnewStart;\n\tif (newFree > ShmemSegHdr->totalsize)", "partial_line": "size", "completion": "size))); <|endoftext|>"}
{"context": "\tres = PQexec(conn, \"SELECT pg_catalog.pg_is_in_recovery()\");\n\treturn ret == 0;\n}\n\tint\t\t\tcur_repslots;\n\tif (server_is_in_recovery(conn))", "partial_line": "\" (SELECT count(*", "completion": "\" (SELECT count(*) FROM pg_catalog.pg_stat_activity WHERE backend_type = 'walsender'),\" <|endoftext|>"}
{"context": "                z->bra = z->c;\n    return 1;\n    }\n            {   int m2 = z->l - z->c; (void)m2;\n                if (z->c <= z->lb || z->p[z->c - 1] != 'u') { z->c = z->l - m2; goto lab0; }", "partial_line": "switch", "completion": "switch (among_var) { <|endoftext|>"}
{"context": "#endif\n}\n\t\tcase CURL_POLL_IN:\n\t\t\tbreak;\n\tif (res < 0)", "partial_line": "actx_error(actx, \"could n", "completion": "actx_error(actx, \"could not add to epoll set: %m\"); <|endoftext|>"}
{"context": "#if defined(WIN32)\n#endif\n\tprogname = get_progname(argv[0]);\n\targv = save_ps_display_args(argc, argv);\n\t(void) set_stack_base();", "partial_line": "init_locale(\"LC_", "completion": "init_locale(\"LC_COLLATE\", LC_COLLATE, \"\"); <|endoftext|>"}
{"context": "\t{\n\t\tDatum\t\tresult;\n\t\t\tfor (mode = 0; mode < MAX_LOCKMODES; mode++)\n\t\tif (!granted)\n\t\t\t\tnulls[7] = true;", "partial_line": "case LOCK", "completion": "case LOCKTAG_TUPLE: <|endoftext|>"}
{"context": "dttoasc(timestamp * ts, char *output)\n\tstrcpy(str, tmp);\n\tchar\t\tsign;\n}\t\t\tvalue;\n\tvalue.maxdigits = log10(2) * (8 * sizeof(long) - 1);", "partial_line": "l", "completion": "l *= 10; <|endoftext|>"}
{"context": "static const symbol s_48[] = { 0xD7, 0xA9, 0xD7, 0x98, 0xD7, 0xB2 };\nstatic const symbol s_50[] = { 0xD7, 0x98 };\nstatic const symbol s_54[] = { 0xD7, 0x92, 0xD7, 0xB2 };\nstatic const symbol s_56[] = { 0xD7, 0xA9, 0xD7, 0xA8, 0xD7, 0xB2, 0xD7, 0x91 };\nstatic const symbol s_70[] = { 0xD7, 0xB0, 0xD7, 0x99, 0xD7, 0x98, 0xD7, 0xA9 };", "partial_line": "static const symbol s_78[]", "completion": "static const symbol s_78[] = { 0xD7, 0xA9, 0xD7, 0x98, 0xD7, 0xB2 }; <|endoftext|>"}
{"context": "\t\tereport(FATAL,\n\thash_seq_init(&status, RelationIdCache);\n\t\t\tcontinue;\n\t\t\t\t\t   fp);\n\t\tif (rename(tempfilename, finalfilename) < 0)", "partial_line": "errmsg_internal(\"could not wri", "completion": "errmsg_internal(\"could not write init file: %m\")); <|endoftext|>"}
{"context": "#endif\n\t\t\t\tmember->ref_is_family = true;\n\t\t\t\tmember->refobjid = opfamilyoid;\n\t\t\t\t\t\t errmsg(\"STORAGE cannot be specified in ALTER OPERATOR FAMILY\")));\n\t}", "partial_line": "op", "completion": "operators, <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\t\t\t\t\t parser_errposition(pstate, location)));\n\t\telse\n\t\t\t\t\t errmsg(\"column notation .%s applied to type %s, \"\n\t\t\t\t\t\t\t\"which is not a composite type\",", "partial_line": "transformIndirection(ParseState *pstate, A", "completion": "transformIndirection(ParseState *pstate, A_Indirection *ind) <|endoftext|>"}
{"context": "}\n\t\tcon->constcollid = rcollid;\n\t}\n}\n\tif (IsA(node, FuncExpr))", "partial_line": "RelabelType *r = (RelabelT", "completion": "RelabelType *r = (RelabelType *) node; <|endoftext|>"}
{"context": "\t\t\tereport(LOG,\n\t}\nstatic void\n\tMySubscriptionValid = false;\n{", "partial_line": "char\t\tpath[MA", "completion": "char\t\tpath[MAXPGPATH]; <|endoftext|>"}
{"context": "#ifdef USE_ASSERT_CHECKING\n\t\tPostingItem *tod = GinDataPageGetPostingItem(parentPage, myoff);\nstatic bool\n\tDataPageDeleteStack *me;\n\tPage\t\tpage;", "partial_line": "if", "completion": "if (!parent->child) <|endoftext|>"}
{"context": "\t\tslotCount++;\n\t\t\t\t\t\t\t\t\t\t\t indstate);\n\t\telemno++;\n\tif (slotCount > 0)\n}", "partial_line": "scan = systa", "completion": "scan = systable_beginscan(pg_enum, EnumTypIdLabelIndexId, true, <|endoftext|>"}
{"context": "\tint64\t\targ = PG_GETARG_INT64(0);\ngenerate_series_step_int8(PG_FUNCTION_ARGS)\n{\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t errmsg(\"step size cannot equal zero\")));", "partial_line": "fctx = funcctx->us", "completion": "fctx = funcctx->user_fctx; <|endoftext|>"}
{"context": "\t\t{\n\tdonemap[ssource->no] = 1;\n\t\t\t\tcontinue;\n\t\t\t\tcanmerge = 1;\n\t\t\t\tfor (s = sclone; s->ins; s = s->ins->from)", "partial_line": "outerd", "completion": "outerdonemap, <|endoftext|>"}
{"context": "set_base_rel_sizes(PlannerInfo *root)\n{\n\tIndex\t\trti;\n\t\t\tcontinue;\n\t\trte = root->simple_rte_array[rti];", "partial_line": "set_rel_consider_para", "completion": "set_rel_consider_parallel(root, rel, rte); <|endoftext|>"}
{"context": "\t\treturn unconstify(char *, s);\t\n\t}\n\t\tdest_encoding = ClientEncoding->encoding;\n\t\tereport(ERROR,\n\t\tSize\t\tresultlen = strlen(result);", "partial_line": "return", "completion": "return result; <|endoftext|>"}
{"context": "static bool wait_seconds_arg = false;\nstatic ShutdownMode shutdown_mode = FAST_MODE;\nstatic char *argv0 = NULL;\nstatic bool allow_core_files = false;\nstatic HANDLE shutdownHandles[2];", "partial_line": "static void do_relo", "completion": "static void do_reload(void); <|endoftext|>"}
{"context": "\t\tif (new_attno >= newnatts ||\n\t\t\t(att = TupleDescAttr(new_tupdesc, new_attno))->attisdropped ||\n\t\t\tstrcmp(attname, NameStr(att->attname)) != 0)\n\t\t{\n\t\t\tHeapTuple\tnewtup;", "partial_line": "elog(ERROR, \"could not", "completion": "elog(ERROR, \"could not find inherited attribute \\\"%s\\\" of relation \\\"%s\\\"\", <|endoftext|>"}
{"context": "}\n\tuint32\t\tbtm_version;\n_bt_set_cleanup_info(Relation rel, BlockNumber num_delpages)\n\tBuffer\t\tmetabuf;\n\tmetad = BTPageGetMeta(metapg);", "partial_line": "metad->btm_last_cl", "completion": "metad->btm_last_cleanup_num_heap_tuples = -1.0; <|endoftext|>"}
{"context": "\t\tkeeporig = (!rangeTableEntry_used((Node *) sub_action->jointree,\n\t\t\t\t\t\t\t\t\t\t  rt_index, 0)) &&\n\t\t\t\tlist_concat(newjointree, sub_action->jointree->fromlist);\n\t\t}\n\t\t\t\tif (strcmp(cte->ctename, cte2->ctename) == 0)", "partial_line": "if (sub_action->hasModifyingCTE && rule_ac", "completion": "if (sub_action->hasModifyingCTE && rule_action != sub_action) <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\nstatic const char *cancel_sent_msg = NULL;\nvoid\n{", "partial_line": "EnterCritic", "completion": "EnterCriticalSection(&cancelConnLock); <|endoftext|>"}
{"context": "#line 109 \"describe.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n\t\t{ ECPGget_desc(__LINE__, \"desc3\", i,ECPGd_name,\n#line 120 \"describe.pgc\"\n\t\t{ ECPGget_desc(__LINE__, \"desc4\", i,ECPGd_name,", "partial_line": "#line 121 \"d", "completion": "#line 121 \"describe.pgc\" <|endoftext|>"}
{"context": "\t\t\t\tempty2;\n\treturn false;\n\tRangeType  *r2 = PG_GETARG_RANGE_P(1);\n}\n\ttypcache = range_get_typcache(fcinfo, RangeTypeGetOid(r1));", "partial_line": "range_minus(PG", "completion": "range_minus(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tLogicalDecodingContext *ctx = rb->private_data;\n\treturn ctx->streaming;\n\tLogicalDecodingContext *ctx = rb->private_data;\n\tSnapBuild  *builder = ctx->snapshot_builder;\n\tif (SnapBuildCurrentState(builder) < SNAPBUILD_CONSISTENT)", "partial_line": "if (ReorderBuffe", "completion": "if (ReorderBufferCanStream(rb) && <|endoftext|>"}
{"context": "\t\t\tRelids\t\trequired_outer;\n\t\t\tListCell   *lcp;\n\t\t\t\t\t\t\t\t\t\t\trequired_outer, loop_count, 0);\n}\nstatic void", "partial_line": "IndexO", "completion": "IndexOptInfo *index, <|endoftext|>"}
{"context": "#include \"catalog/pg_statistic_ext.h\"\n#include \"commands/defrem.h\"\n#include \"commands/trigger.h\"\n#include \"foreign/fdwapi.h\"\n#include \"miscadmin.h\"", "partial_line": "#include", "completion": "#include \"nodes/makefuncs.h\" <|endoftext|>"}
{"context": "\tpg_log_debug(\"subscriber: max_logical_replication_workers: %d\",\n\tPQclear(res);\n\t\tfailed = true;\n\tif (max_wprocs < num_dbs + 1)\n\t\tpg_log_error_hint(\"Increase the configuration parameter \\\"%s\\\" to at least %d.\",", "partial_line": "drop_existing_subscripti", "completion": "drop_existing_subscriptions(PGconn *conn, const char *subname, const char *dbname) <|endoftext|>"}
{"context": "ExecShutdownHashJoin(HashJoinState *node)\n\tif (node->hj_HashTable)\n\t{\n\t}\n\t\tbool\t\tisnull;", "partial_line": "ResetExprContext", "completion": "ResetExprContext(econtext); <|endoftext|>"}
{"context": "\t\tcase RTE_JOIN:\n\t}\n\tif (rel->consider_parallel && required_outer == NULL)\nstatic void\n{", "partial_line": "add_partial_path(rel, create_seqscan_path(root, rel, N", "completion": "add_partial_path(rel, create_seqscan_path(root, rel, NULL, parallel_workers)); <|endoftext|>"}
{"context": "{ 14, s_17_44, -1, 2, 0},\nstatic const symbol s_18_7[10] = { 0xCE, 0xB9, 0xCF, 0x84, 0xCF, 0x83, 0xCF, 0x89, 0xCE, 0xBD };\n{ 10, s_18_1, -1, 1, 0},\nstatic const symbol s_19_1[6] = { 0xCF, 0x88, 0xCE, 0xB1, 0xCE, 0xBB };\n{ 6, s_19_1, -1, 1, 0},", "partial_line": "{ 2, s_20", "completion": "{ 2, s_20_0, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\tDEBUG2, LOG, INFO, NOTICE,\n\t\tTcl_SetObjResult(interp, objv[2]);\n\t\t\t\t errmsg(\"%s\", UTF_U2E(Tcl_GetString(objv[2])))));\n\tPG_CATCH();\n\tTcl_ListObjAppendElement(interp, obj,", "partial_line": "Tcl_Lis", "completion": "Tcl_ListObjAppendElement(interp, obj, <|endoftext|>"}
{"context": "\tchar\t   *locale_provider = NULL;\n\tset_pglocale_pgservice(argv[0], PG_TEXTDOMAIN(\"pgscripts\"));\n\t\t\tcase 'E':\n\t\t\tcase 'h':\n\t\t\t\tlocale = pg_strdup(optarg);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t{\n\t\t\tif (conn->asyncStatus == PGASYNC_IDLE)\n\t\t\t\tconn->asyncStatus = PGASYNC_BUSY;\n}\nint", "partial_line": "PQsendQuery(PGconn *conn, cons", "completion": "PQsendQuery(PGconn *conn, const char *query) <|endoftext|>"}
{"context": "\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\t\t\t\tObjectIdGetDatum(relid));\n\t\tint\t\t\ti;\n\t\tForm_pg_statistic_ext staForm;\n\t\tentry->statOid = staForm->oid;", "partial_line": "entry->schema = g", "completion": "entry->schema = get_namespace_name(staForm->stxnamespace); <|endoftext|>"}
{"context": "\telse\n\tOid\t\t\tdbid = PG_GETARG_OID(0);\n\tPgStat_StatDBEntry *dbentry;\n\t\t\t\t\t\t  dbentry->conflict_logicalslot +\npg_stat_get_db_checksum_failures(PG_FUNCTION_ARGS)", "partial_line": "int64", "completion": "int64\t\tresult; <|endoftext|>"}
{"context": "\t\t\t\t errcontext(\"line %d of configuration file \\\"%s\\\"\",\n\t}\n\tparsedline->databases = NIL;\n\tforeach(tokencell, tokens)\n\t\tparsedline->databases = lappend(parsedline->databases, tok);", "partial_line": "parsedline->ro", "completion": "parsedline->roles = NIL; <|endoftext|>"}
{"context": "\t\t\t\t\t\tControlFilePath)));\n\t\t\t\t   pg_file_create_mode)) == -1)\n#endif\n\tpgstat_report_wait_start(WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE);\n\t\tif (pg_fsync(fd) != 0)", "partial_line": "ereport(P", "completion": "ereport(PANIC, <|endoftext|>"}
{"context": "\t\t\t\t\tscratch.d.var.varreturningtype = variable->varreturningtype;\n\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tscratch.opcode = EEOP_SCAN_VAR;\n\t\t\t\t\t\t\t\t\tbreak;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "#include \"common/md5.h\"\n\tlen = VARSIZE_ANY_EXHDR(in_text);\n\tif (pg_md5_hash(VARDATA_ANY(in_text), len, hexsum, &errstr) == false)\n\t\t\t\t(errcode(ERRCODE_INTERNAL_ERROR),\nDatum", "partial_line": "bytea\t   *in = PG_GETA", "completion": "bytea\t   *in = PG_GETARG_BYTEA_PP(0); <|endoftext|>"}
{"context": "\tqual = transformWhereClause(pstate, stmt->whereClause,\n\tif (pstate->p_hasAggs)\n\tList\t   *exprList = NIL;\n\tbool\t\tisGeneralSelect;\n\tAclMode\t\ttargetPerms;", "partial_line": "Assert(pstate->p_ctenamesp", "completion": "Assert(pstate->p_ctenamespace == NIL); <|endoftext|>"}
{"context": "\t\tcase T_VariableShowStmt:\n\t\tdefault:\n\t\tcase CMD_SELECT:\n\t\t\treturn UtilityReturnsTuples(parsetree->utilityStmt);\n\t}", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "\tif (typentry == NULL ||\n\t\t\t\t\t errmsg(\"could not identify a comparison function for type %s\",\n\t}\n\ttypalign = typentry->typalign;\n\tInitFunctionCallInfoData(*locfcinfo, &typentry->cmp_proc_finfo, 2,", "partial_line": "min_nitems = Min(nite", "completion": "min_nitems = Min(nitems1, nitems2); <|endoftext|>"}
{"context": "\t\t\telse\n\tversion = strtoul(buf.data, &ep, 10);\n\tif (errno != 0 || *ep != '\\n')\n\tpg_log_debug(\"read server version %d from file \\\"%s\\\"\", version, filename);\n}", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "#include \"optimizer/cost.h\"\n\tST_ANYSCAN,\t\t\t\t\t\n\tPath\t   *path;\t\t\t\n\tList\t   *preds;\t\t\t\n\t\t\t\t\t\t\t\t\t\t   List **considered_relids);", "partial_line": "IndexClauseSe", "completion": "IndexClauseSet *rclauseset, <|endoftext|>"}
{"context": "\tpp = (Form_pg_proc) GETSTRUCT(func_htp);\n\tfip->namespace = pp->pronamespace;\n\tfip->rettype = pp->prorettype;\n\tfip->funcid = func_id;\n}", "partial_line": "if (aclresult", "completion": "if (aclresult != ACLCHECK_OK) <|endoftext|>"}
{"context": "\t\ttotalsize += fst.st_size;\n\trelation_close(rel, AccessShareLock);\nstatic int64\n\tindexlist = RelationGetIndexList(toastRel);\n\tlist_free(indexlist);", "partial_line": "sta", "completion": "static int64 <|endoftext|>"}
{"context": "\t\t\t\tif (newval->stringval == NULL)\n\t\t\t\tif (!call_string_check_hook(conf, &newval->stringval, newextra,\n\t\t\t}\n\t\t\t\t{\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\tctx->accept_writes = true;\n\tLogicalErrorCallbackState state;\n\tAssert(!ctx->fast_forward);\n\tAssert(ctx->twophase);\n\tctx->end_xact = false;", "partial_line": "state.repor", "completion": "state.report_location = txn->final_lsn; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase ECPGt_timestamp:\n\t}\n\t\t\t\t\t\t\t  struct ECPGtype *type, struct ECPGtype *ind_type, const char *prefix, const char *ind_prefix);\n\t\t\t\tconst char *ind_name, struct ECPGtype *ind_type, const int ind_brace_level,", "partial_line": "type->type != ECPGt_char_variable && type->ty", "completion": "type->type != ECPGt_char_variable && type->type != ECPGt_const && <|endoftext|>"}
{"context": "\t\t\t\t\tstruct state *rp);\n\t\t\t\t\t  struct state *rp);\nstatic int\tscannum(struct vars *v);\nstatic void repeat(struct vars *v, struct state *lp, struct state *rp,\nstatic void wordchrs(struct vars *v);", "partial_line": "static struct subre *subre(struct vars *v,", "completion": "static struct subre *subre(struct vars *v, int op, int flags, <|endoftext|>"}
{"context": "\t{\n\t\t{\n\t\t\tpcxt->nworkers_launched++;\n\t\t{\n\t\t\tpcxt->worker[i].error_mqh = NULL;", "partial_line": "pcxt->known_attached_", "completion": "pcxt->known_attached_workers = <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  InvalidOid,\n\t\tcheck_new_partition_bound(relname, parent, bound, pstate);\n\t\t\tcheck_default_partition_contents(parent, defaultRel, bound);\n\t\t\t\t\t(errcode(ERRCODE_TOO_MANY_COLUMNS),\n\t\t\t\t\t\t  partopclass, partcollation);", "partial_line": "ListC", "completion": "ListCell   *cell; <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint\t\t\ttupleOffset;\n\t\t\t\t\ttupleOffset =\n\t\t\t\tbreak;", "partial_line": "pstate.force", "completion": "pstate.forcenonrequired = false; <|endoftext|>"}
{"context": "\t\t\t   *firstentry;\n\t\t\t}\n\t\t\t\tdoc = (DocRepresentation *) repalloc(doc, sizeof(DocRepresentation) * len);\n\t\tDocRepresentation *rptr = doc + 1,\n\t\t\t\t\tstorage;", "partial_line": "if (rptr->pos ==", "completion": "if (rptr->pos == (rptr - 1)->pos && <|endoftext|>"}
{"context": "}\nstatic int r_perfective_gerund(struct SN_env * z) {\n                if (z->c <= z->lb || z->p[z->c - 1] != 0xD1) return 0;\n                z->c--;\n        lab0:", "partial_line": "{   int re", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\tdst_rel = smgropen(dst_rlocator, INVALID_PROC_NUMBER);\n\t\tif (smgrexists(src_rel, forkNum))\n\t\t\t\t\t\t\t\t\t\t   permanent);\n\t\t\t(buf_state & (BM_VALID | BM_DIRTY)) == (BM_VALID | BM_DIRTY))\n\t\t\tLWLockRelease(BufferDescriptorGetContentLock(bufHdr));", "partial_line": "if (!BufferIsVal", "completion": "if (!BufferIsValid(buffer)) <|endoftext|>"}
{"context": "\t\t\t\tregex_t *result_re)\n\tpg_wchar   *pattern;\n\tint\t\t\tregcomp_result;\n\t\t\t\t\t\t\t\t\t   pattern,\n\t\t\t\t\t\t\t\t\t   text_re_len);", "partial_line": "pa", "completion": "pattern, <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"cannot inherit from temporary relation \\\"%s\\\"\",\n\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\t\t\t\t errmsg(\"cannot inherit from temporary relation of another session\")));\n\t\t\t\t errmsg(\"cannot inherit to temporary relation of another session\")));\n\t\t\t\t\t\tparent->relname)));", "partial_line": "(errcode(ERRCODE_W", "completion": "(errcode(ERRCODE_WRONG_OBJECT_TYPE), <|endoftext|>"}
{"context": "\tMyClientConnectionInfo.auth_method = port->hba->auth_method;\n\tif (log_connections & LOG_CONNECTION_AUTHENTICATION)\nClientAuthentication(Port *port)\n\tif (port->hba->clientcert != clientCertOff)\n\t\t\t\t\t(errcode(ERRCODE_INVALID_AUTHORIZATION_SPECIFICATION),", "partial_line": "case", "completion": "case uaReject: <|endoftext|>"}
{"context": "\t\tcontext->sublevels_up--;\n\t}\n}\n\t\t\t\tsubstitute_grouped_columns_context *context)\n\tvar->varnosyn = nscol->p_varnosyn;", "partial_line": "return", "completion": "return var; <|endoftext|>"}
{"context": "#include \"postgres.h\"\nbool\n\t\tresult_type = CHECKSUM_TYPE_NONE;\n\t\tresult_type = CHECKSUM_TYPE_SHA256;", "partial_line": "case CHECK", "completion": "case CHECKSUM_TYPE_SHA512: <|endoftext|>"}
{"context": "\telse if (info == XLOG_PARAMETER_CHANGE)\n\t\t\t   sizeof(xl_parameter_change));\n\treturn true;\n\twhile (1)\n\t\tif (targetPagePtr + XLOG_BLCKSZ <= private_data->read_upto)", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\treturn;\t\t\t\t\t\n\t\treturn;\n\t\t{\n\t\t\t\tso->qual_ok = false;\n\t\t\t\tScanKey\t\teq = xform[BTEqualStrategyNumber - 1].inkey;", "partial_line": "BTArrayKeyInfo", "completion": "BTArrayKeyInfo *array = NULL; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\tformat_type_be(ptype),\n\t\t\treturn ptype;\n\t\t\tget_type_category_preferred(ntype, &ncategory, &nispreferred);\n\t\t\t\t\t\t\t\tformat_type_be(ntype))));", "partial_line": "pcategor", "completion": "pcategory = ncategory; <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"permission denied to alter role\"),\n\t{\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n\t\t\tereport(ERROR,", "partial_line": "\"BYPASSRLS\"", "completion": "\"BYPASSRLS\", \"BYPASSRLS\"))); <|endoftext|>"}
{"context": "#line 7 \"describe.pgc\"\nint\nmain (void)\n{\n#line 16 \"describe.pgc\"", "partial_line": "int i , count1", "completion": "int i , count1 , count2 ; <|endoftext|>"}
{"context": "\tif (strstr(versionname, \"--\"))\n\t\t\t\t errmsg(\"invalid extension version name: \\\"%s\\\"\", versionname),\nstatic bool\n\tconst char *extension = strrchr(filename, '.');\n\telse", "partial_line": "ecp = pstrdup(Extension_co", "completion": "ecp = pstrdup(Extension_control_path); <|endoftext|>"}
{"context": "\ttext\t   *xpath_expr_text = PG_GETARG_TEXT_PP(0);\n\tArrayType  *namespaces = PG_GETARG_ARRAYTYPE_P(2);\n#ifdef USE_LIBXML\nwellformed_xml(text *data, XmlOptionType xmloption_arg)\n\txmlDocPtr\tdoc;", "partial_line": "xmlFreeDo", "completion": "xmlFreeDoc(doc); <|endoftext|>"}
{"context": "        if (!(ch > max || (ch -= min) < 0 || (s[ch >> 3] & (0X1 << (ch & 0X7))) == 0))\n            return w;\n        z->c -= w;\n    } while (repeat);\nextern int in_grouping(struct SN_env * z, const unsigned char * s, int min, int max, int repeat) {", "partial_line": "int", "completion": "int ch; <|endoftext|>"}
{"context": "\t\t\t\t\t\tgoto fail;\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\tCreateCommandName((Node *) stmt))));\n\t\t\tif (!options->read_only && pushed_active_snap)\n\t\t\t\tQueryDesc  *qdesc;", "partial_line": "snap", "completion": "snap = InvalidSnapshot; <|endoftext|>"}
{"context": "\tforeach(arg, orlist)\n\t\t\tout_list = lappend(out_list, subexpr);\n\t\t\t\t\treturn (Expr *) makeBoolConst(true, false);\n\t\t\t\t}\n\t\t\torlist = lappend(orlist, arg);", "partial_line": "foreach(temp", "completion": "foreach(temp, ((BoolExpr *) qual)->args) <|endoftext|>"}
{"context": "\t\t\t\trelation->rd_pddcxt = newrel->rd_pddcxt;\n\t\t\tnewrel->rd_pdcxt = NULL;\n#undef SWAPFIELD\n{\nRelationForgetRelation(Oid rid)", "partial_line": "relation->rd_", "completion": "relation->rd_firstRelfilelocatorSubid != InvalidSubTransactionId) <|endoftext|>"}
{"context": "\treturn parsedline;\n\tif (strcmp(identLine->usermap, usermap_name) != 0)\n\t{\n\t\t\treturn;\n\t\t\t\t   system_user + matches[1].rm_so,", "partial_line": "expanded_pg_user_token = make_auth_token(expa", "completion": "expanded_pg_user_token = make_auth_token(expanded_pg_user, true); <|endoftext|>"}
{"context": "\tconst char *system_enc_name;\n\t{PG_EUC_JP, \"CP20932\"},\n\t{PG_EUC_CN, \"GB2312\"},\n\t{PG_EUC_KR, \"deckorean\"},\n\t{PG_EUC_KR, \"5601\"},", "partial_line": "{PG_LATIN2, \"ISO8", "completion": "{PG_LATIN2, \"ISO8859-2\"}, <|endoftext|>"}
{"context": "\tsubroot->eq_classes = NIL;\n\tmemset(subroot->upper_targets, 0, sizeof(subroot->upper_targets));\n\tsubroot->processed_groupClause = NIL;\n\tsubroot->wt_param_id = -1;\n\t\tflatten_join_alias_vars(subroot, subroot->parse,", "partial_line": "(Node", "completion": "(Node *) subquery->targetList); <|endoftext|>"}
{"context": "\t{\n\t\t*totalrows = 0.0;\n\t\t\t\t\tliverows, deadrows,\n\tif (oa < ob)\n\tif (oa > ob)", "partial_line": "Relat", "completion": "Relation   *rels; <|endoftext|>"}
{"context": "}\n\t{\n\t\t\tereport(ERROR,\n\t\t\t\t errhint(\"Increase \\\"max_prepared_transactions\\\" (currently %d).\",\n\tgxact->owner = hdr->owner;", "partial_line": "strcpy(gxact->", "completion": "strcpy(gxact->gid, gid); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  context->boundingBox.low.y);\n\t\t\t\tselectthis = true;\n\t\t\tcontext->ratio = ratio;\n\t\t\tcontext->overlap = overlap;\n\t\t\tcontext->rightLower = rightLower;", "partial_line": "in", "completion": "int\t\t\tdim, <|endoftext|>"}
{"context": "\tbase->writetup = writetup_datum;\n\tbase->haveDatum1 = true;\n\tbase->sortKeys = (SortSupport) palloc0(sizeof(SortSupportData));\n\tbase->sortKeys->ssup_cxt = CurrentMemoryContext;\n\thtup.t_len = tuple->t_len + MINIMAL_TUPLE_OFFSET;", "partial_line": "stup.datum1 =", "completion": "stup.datum1 = heap_getattr(&htup, <|endoftext|>"}
{"context": "\tif (FullTransactionIdPrecedes(a, b))\n\t\tqsort(snap->xip, snap->nxip, sizeof(FullTransactionId), cmp_fxid);\n\t\tsnap->nxip = qunique(snap->xip, snap->nxip, sizeof(FullTransactionId),\n\t\treturn true;\n\telse if (!FullTransactionIdPrecedes(value, snap->xmax))", "partial_line": "else if (snap->nxip", "completion": "else if (snap->nxip > USE_BSEARCH_IF_NXIP_GREATER) <|endoftext|>"}
{"context": "getWeights(ArrayType *win, float *ws)\n{\n\tif (ARR_NDIM(win) != 1)\n}\nts_rank_wttf(PG_FUNCTION_ARGS)", "partial_line": "TSVector\ttxt = PG_GETA", "completion": "TSVector\ttxt = PG_GETARG_TSVECTOR(1); <|endoftext|>"}
{"context": "\t{\n\t\tif (operator == OID_ARRAY_CONTAINS_OP)\narraycontjoinsel(PG_FUNCTION_ARGS)\n\tOid\t\t\toperator = PG_GETARG_OID(1);\n\t\tstatistic_proc_security_check(vardata, cmpfunc->fn_oid))", "partial_line": "if (get_attstatsslot(&sslot, varda", "completion": "if (get_attstatsslot(&sslot, vardata->statsTuple, <|endoftext|>"}
{"context": "\t\t\tobjtype = OBJECT_SCHEMA;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t   *new_aip = NULL;\n\t\tACLITEM_GET_GOPTIONS(*mod_aip) != ACL_NO_RIGHTS)", "partial_line": "for (dst", "completion": "for (dst = 0; dst < num; ++dst) <|endoftext|>"}
{"context": "\t\tcase DSM_IMPL_POSIX:\n#endif\n#ifdef USE_DSM_POSIX\n\t\t*mapped_size = 0;\n\t\treturn true;", "partial_line": "if (op == DSM_OP_ATTA", "completion": "if (op == DSM_OP_ATTACH || errno != EEXIST) <|endoftext|>"}
{"context": "static const symbol s_8_85[4] = { 'a', 'r', 0xE1, 's' };\n{ 4, s_8_18, 16, 2, 0},\n{ 5, s_8_19, 16, 2, 0},\n{ 5, s_8_21, 20, 2, 0},\n{ 2, s_8_49, -1, 1, 0},", "partial_line": "{ 6, s", "completion": "{ 6, s_8_61, -1, 2, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION),\n\t\tparameterDefaults = NIL;\n\t\t\t\t\t\t\t\t\t\t  &parameterTypes,\n\t\t\t\t\t\t\t\t\t\t  &parameterNames,\n\t\t\t\t\t\t\t\t\t\t  &variadicArgType,", "partial_line": "Assert", "completion": "Assert(parameterDefaults == NIL); <|endoftext|>"}
{"context": "\t}\n\t\t(*ptr)++;\n{\n\tchar\t   *cp;\n\t\t\tcarry /= 10;", "partial_line": "var->we", "completion": "var->weight++; <|endoftext|>"}
{"context": "\tint\t\t\tdst_fd;\n\tif ((src_fd = open(fromfile, O_RDONLY | PG_BINARY, 0)) < 0)\n\t\tpg_fatal(\"error while copying relation \\\"%s.%s\\\": could not stat file \\\"%s\\\": %m\",\n\t\told_break = old_cur + rewriteVmBytesPerPage;\n\t\twhile (old_break <= old_blkend)", "partial_line": "memcpy(new_vmbuf.data,", "completion": "memcpy(new_vmbuf.data, &pageheader, SizeOfPageHeaderData); <|endoftext|>"}
{"context": "\t\tExecInitQual(node->bitmapqualorig, (PlanState *) scanstate);\n\t{\n\t}\n\tif (node->ss.ps.instrument && pcxt->nworkers > 0)\n\t{", "partial_line": "SpinLock", "completion": "SpinLockInit(&pstate->mutex); <|endoftext|>"}
{"context": "\t\tcase TRANSFER_MODE_SWAP:\n\t{\nvoid\n\t\t old_dbnum < old_db_arr->ndbs;\n\t\t old_dbnum++, new_dbnum++)", "partial_line": "new_db", "completion": "new_db = &new_db_arr->dbs[new_dbnum]; <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\tINTOCON(L_BRE);\n\t\t\t\tdefault:\n\t\t\t}", "partial_line": "assert(NO", "completion": "assert(NOTREACHED); <|endoftext|>"}
{"context": "\t\treturn false;\nstatic void\nvoid\n\tSize\t\tsize = CheckpointerShmemSize();\n\tif (!found)", "partial_line": "RequestCheckpoint(i", "completion": "RequestCheckpoint(int flags) <|endoftext|>"}
{"context": "#include \"access/xlog_internal.h\"\n#include \"lib/binaryheap.h\"", "partial_line": "int", "completion": "int\t\t\tpgprocno; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  \"FROM pg_catalog.pg_class c \"\n\t\t\t\t\t\t\t\t  oid);\n\tif (!echo_hidden_command(query->data))\n\t\t\t\tbreak;\n\t\t\t\t\t\tcase RELKIND_MATVIEW:", "partial_line": "appendPQExpBufferStr(", "completion": "appendPQExpBufferStr(buf, fmtId(relname)); <|endoftext|>"}
{"context": "\tstruct subre *lacons;\t\t\n\tint\t\t\tnlacons;\t\t\n#define CCLASSS\t's'\t\t\t\t\n#define AHEAD\t'a'\t\t\t\t\n#ifdef REG_DEBUG", "partial_line": "if (re ==", "completion": "if (re == NULL || string == NULL) <|endoftext|>"}
{"context": "#include \"access/table.h\"\n#include \"catalog/pg_database_d.h\"\n#include \"catalog/pg_foreign_server.h\"\n#include \"catalog/pg_ts_dict.h\"\n#include \"catalog/pg_ts_template.h\"", "partial_line": "#include", "completion": "#include \"commands/typecmds.h\" <|endoftext|>"}
{"context": "\t\tcount++;\n\t\tIntRBTreeNode node;\n\t\tif (resultNode == NULL)\n\t\tIntRBTreeNode node;\n\t}", "partial_line": "if (lteNode == N", "completion": "if (lteNode == NULL || lteNode->key != searchNode.key) <|endoftext|>"}
{"context": "\tfor (int32_t i = 0; !found && i < uloc_countAvailable(); i++)\n\t\t\tcontinue;\n#else\n\tpg_fatal(\"ICU is not supported in this build\");\n{", "partial_line": "char\t   *", "completion": "char\t   *canonname; <|endoftext|>"}
{"context": "\t\t\t\tcutf[0] = iutf;\n\t\t\tlen = len_save;\n\t\t}\n\t\t\t\tiso = store_coded_char(iso, converted);\n\t\tif (conv_func)", "partial_line": "if (", "completion": "if (converted) <|endoftext|>"}
{"context": "\t\t\tv_incby = l_sizet_const(att->attlen);\n\t\t}\n\t\t\tv_incby = l_call(b,\n\t\telse if (att->attlen == -2)\n\t\t\tl_callsite_ro(v_incby);", "partial_line": "v_incby = LLVMBuildAdd(b, v_", "completion": "v_incby = LLVMBuildAdd(b, v_incby, l_sizet_const(1), \"\"); <|endoftext|>"}
{"context": "\t\tperminfo->selectedCols =\n\t\tif (col == InvalidAttrNumber)\n\t\t\telse\n\t\t\t{\n\t\t\t{", "partial_line": "markRTEForSelectPriv(p", "completion": "markRTEForSelectPriv(pstate, varno, InvalidAttrNumber); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t trivial_pathtarget,\n\t\t\t\treturn create_resultscan_path(root, rel, required_outer);\n\t\t\t\t\t\t\t\t\t   apath->path.parallel_workers,\n\t\t\t{", "partial_line": "required_o", "completion": "required_outer, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\ttag = CMDTAG_DROP_DATABASE;\n\t\tcase T_LoadStmt:\n\t\t\ttag = CMDTAG_LOAD;", "partial_line": "switch (((CreateTableAsSt", "completion": "switch (((CreateTableAsStmt *) parsetree)->objtype) <|endoftext|>"}
{"context": "#include \"commands/explain_state.h\"\nexplain_validate_options_hook_type explain_validate_options_hook = NULL;\n\tExplainOptionHandler option_handler;\n} ExplainExtensionOption;", "partial_line": "else if (strc", "completion": "else if (strcmp(opt->defname, \"buffers\") == 0) <|endoftext|>"}
{"context": "\tRangeType  *r1 = PG_GETARG_RANGE_P(0);\n}\n\tRangeBound\tupper;\nDatum\n\tPG_RETURN_BOOL(flags & RANGE_EMPTY);", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\targs = ((FuncExpr *) expr)->args;\nget_fn_expr_arg_stable(FmgrInfo *flinfo, int argnum)\n\tif (!flinfo || !flinfo->fn_expr)\n\tList\t   *args;\n\t\targs = ((NullIfExpr *) expr)->args;", "partial_line": "arg = (Node *)", "completion": "arg = (Node *) list_nth(args, argnum); <|endoftext|>"}
{"context": "\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\terrmsg(\"not-null constraints for domains cannot be marked NO INHERIT\"),\n\t\t\t\tnullDefined = true;\n\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t errmsg(\"foreign key constraints not possible for domains\"),", "partial_line": "(errcode(ERRCODE_FEATURE_NOT", "completion": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "static const symbol s_3_192[6] = { 'e', 'r', 0xC3, 0xA9, 'i', 's' };\nstatic const symbol s_3_204[8] = { 'i', 'r', 0xC3, 0xAD, 'a', 'm', 'o', 's' };\nstatic const symbol s_3_215[3] = { 'a', 't', 's' };\nstatic const symbol s_3_228[2] = { 'a', 't' };\nstatic const symbol s_3_231[3] = { 'e', 'n', 't' };", "partial_line": "static const symbol s_3_235[2] =", "completion": "static const symbol s_3_235[2] = { 'a', 'u' }; <|endoftext|>"}
{"context": "static int r_i_verb_suffix(struct SN_env * z);\nstatic int r_standard_suffix(struct SN_env * z);\n#ifdef __cplusplus\n#ifdef __cplusplus\n}", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\tXLogRecPtr\tlsn;\nstatic void\n\t\t\t ent->key.rlocator.dbOid,\n}\n\tfd = OpenTransientFile(path, O_RDONLY | PG_BINARY);", "partial_line": "if (readByte", "completion": "if (readBytes < 0) <|endoftext|>"}
{"context": "\t\t\t++strp;\n\t}\n\t\tstrp = getnum(strp, &rulep->r_day, 1, DAYSPERNYEAR);\n\t\tstrp = getnum(strp, &rulep->r_mon, 1, MONSPERYEAR);\n\t\t\treturn NULL;", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t}\n}\n{\n\t\t\t\t\t\t\t\t\t   bslot->buffer);\nheapam_tuple_insert(Relation relation, TupleTableSlot *slot, CommandId cid,", "partial_line": "int options, BulkInsertSt", "completion": "int options, BulkInsertState bistate) <|endoftext|>"}
{"context": "const char *const forkNames[] = {\n\t[MAIN_FORKNUM] = \"main\",", "partial_line": "StaticAsser", "completion": "StaticAssertDecl(lengthof(forkNames) == (MAX_FORKNUM + 1), <|endoftext|>"}
{"context": "\tPG_RETURN_TEXT_P(result);\ninitcap(PG_FUNCTION_ARGS)\n{\n\tout_string = str_initcap(VARDATA_ANY(in_string),\n{", "partial_line": "PG_RE", "completion": "PG_RETURN_TEXT_P(result); <|endoftext|>"}
{"context": "\t\t\t\t BufferGetBlockNumber(buf), blkno);\n\telse\n\t{\n\treturn buf;\nvoid", "partial_line": "_hash_r", "completion": "_hash_relbuf(Relation rel, Buffer buf) <|endoftext|>"}
{"context": "static const symbol s_25_28[12] = { 0xE0, 0xAF, 0x80, 0xE0, 0xAE, 0xAF, 0xE0, 0xAE, 0xB0, 0xE0, 0xAF, 0x8D };\n{ 9, s_25_7, -1, 5, 0},\n{ 12, s_25_16, -1, 1, 0},\n{ 12, s_25_31, 30, 1, 0},\n{ 12, s_25_34, -1, 5, 0},", "partial_line": "{ 12, s_25_39,", "completion": "{ 12, s_25_39, 38, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\tOid dboid, Oid spcoid,\n\t\t\t\t\tRelFileNumber relfilenumber, ForkNumber forknum,\n\t\t\t\t\tBlockNumber *relative_block_numbers,\n\trlocator.spcOid = spcoid;\n\trlocator.dbOid = dboid;", "partial_line": "rloc", "completion": "rlocator.relNumber = 0; <|endoftext|>"}
{"context": "\t\t}\n\t\t\tif (gfile_fout)\n\t\t\t\ttuples_fout = gfile_fout;\n\t\t\t\t\tflush_error = fflush(tuples_fout);\n\t\t\t\ttotal_tuples += PQntuples(result);", "partial_line": "ClosePager(t", "completion": "ClosePager(tuples_fout); <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\tif (x[x_char_len - 1] == y[y_char_len - 1]\n\t\t\t\t\t(x_char_len == 1 || rest_of_char_same(x, y, x_char_len)))\n\t\t\t\tx += x_char_len;\n\t\t\t\tint\t\t\tins;", "partial_line": "if (start_co", "completion": "if (start_column >= stop_column) <|endoftext|>"}
{"context": "\t\treturn pathinfoarray[0]->path;\n\t\t\t\t\t}\n\t\t\t\tclauseidsofar = bms_add_members(clauseidsofar,\n\t\t\t\t\t\t\t\t\t\t\t\tpathinfo->clauseids);\n\t\t\t{", "partial_line": "list_f", "completion": "list_free(qualsofar); <|endoftext|>"}
{"context": "\t\tspgInnerConsistentIn in;\n\t\tspgInitInnerConsistentIn(&in, so, item, innerTuple);\n\telse\n\t\t\tint\t\t\tnodeN = out.nodeNumbers[i];\n\t\t\t\t bool isnull, bool isroot,", "partial_line": "bool *reporte", "completion": "bool *reportedSome, <|endoftext|>"}
{"context": "\t\t\tvar->ind_arrsize = va_arg(args, long);\n\t\t\tif (var->ind_type != ECPGt_NO_INDICATOR\n\t\t\tif (var->pointer == NULL)\n\t\t\tif (ptr == NULL)\n\t\tecpg_do_epilogue(stmt);", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t\telse if (fieldno < list_length(cstate->attnumlist) &&\n\t\t{\n\t\t\tint\t\t\tm = list_nth_int(cstate->attnumlist, fieldno) - 1;\n\t\t\t{\n\t\t\t\t\t\t errmsg(\"unexpected default marker in COPY data\"),", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tnewvar = (Node *) list_nth(rte->joinaliasvars, var->varattno - 1);\n\tif (IsA(node, Query))\n\t\treturn (Node *) newnode;\n\tAssert(!IsA(node, AlternativeSubPlan));\n\tAssert(!IsA(node, PlaceHolderInfo));", "partial_line": "Assert(node != (No", "completion": "Assert(node != (Node *) query); <|endoftext|>"}
{"context": "\treturn NULL;\n\t\t\t\t  JoinType jointype,\n\tRelids\t\trequired_outer;\n\tif (extra->sjinfo->ojrelid != 0 &&\n\tif (required_outer &&", "partial_line": "Assert(!have_unsafe_outer_join_ref(r", "completion": "Assert(!have_unsafe_outer_join_ref(root, outerrelids, inner_paramrels)); <|endoftext|>"}
{"context": "\treturn rootbuf;\n\tif (rel->rd_amcache == NULL)\n\t\tif (metad->btm_root == P_NONE)\n\t\tmemcpy(rel->rd_amcache, metad, sizeof(BTMetaPageData));\n}", "partial_line": "BTMe", "completion": "BTMetaPageData *metad; <|endoftext|>"}
{"context": "}\n{\n}\n{\n\t\t\t\t\t\t\t PG_GETARG_INT64(1));", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\tHELP0(\"  -R, --record-separator=STRING\\n\"\n\t\t  \"                           set field separator for unaligned output to zero byte\\n\");\n\t}\n}\n\tPQExpBufferData buf;", "partial_line": "char", "completion": "char\t   *currdb; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  PointerGetDatum(&partial_matches),\n\t\t\t\t\t\t\t\t\t\t\t  PointerGetDatum(&extra_data),\n\t\t\tsearchMode > GIN_SEARCH_MODE_ALL)\n\t\t\tsearchMode = GIN_SEARCH_MODE_ALL;\n\t\tif (queryValues == NULL || nQueryValues <= 0)", "partial_line": "int3", "completion": "int32\t\tj; <|endoftext|>"}
{"context": "\tif (*cluster_name == '\\0')\n\t{\n\t\treturn false;\n\tlen = strlen(suffix);\n\telse", "partial_line": "memcpy(ps_buffer", "completion": "memcpy(ps_buffer + ps_buffer_cur_len, suffix, len + 1); <|endoftext|>"}
{"context": "\t\t\t\tseq_relids = lappend_oid(seq_relids, seq_relid);\n\t\t\t\trelation_close(seq_rel, NoLock);\n\t\tpalloc(list_length(rels) * sizeof(ResultRelInfo));\n\t\tInitResultRelInfo(resultRelInfo,\n\t\testate->es_opened_result_relations =", "partial_line": "if (run_a", "completion": "if (run_as_table_owner) <|endoftext|>"}
{"context": "\t{\n\tEXPECT_TRUE(!pg_atomic_unlocked_test_flag(&flag));\n\tpg_atomic_init_u32(&var, 0);\n\tEXPECT_EQ_U32(pg_atomic_read_u32(&var), 3);\n\tEXPECT_EQ_U32(pg_atomic_fetch_add_u32(&var, INT_MAX), INT_MAX);", "partial_line": "EXPECT_TRUE(!pg_atomic_compare_e", "completion": "EXPECT_TRUE(!pg_atomic_compare_exchange_u32(&var, &expected, 1)); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\n\tGinState\tginstate;\n\t\t\t\ttmpitems = palloc(sizeof(ItemPointerData) * nitem);\n\t\t\t}\nstatic void", "partial_line": "Assert(!Gin", "completion": "Assert(!GinPageIsData(page)); <|endoftext|>"}
{"context": "\t\tif (fout->remoteVersion >= 90500)\n\t\tif (dopt->binary_upgrade)\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);\n\ti_proowner = PQfnumber(res, \"proowner\");\n\t\tfinfo[i].rolname = getRoleName(PQgetvalue(res, i, i_proowner));", "partial_line": "selectDumpableObject(&(finfo[i]", "completion": "selectDumpableObject(&(finfo[i].dobj), fout); <|endoftext|>"}
{"context": "\t\t\tdefault:\n\t\t}\n\t\tint\t\t\ti;\n\t\t}\n\t\t\t\ticonn = &conns[1 + blocker->step->session];", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tTupleDesc\ttupdesc;\n\tAssert(outerPlan(node) == NULL);\n\tscanstate->rowexpr =\n\t\tExecInitExpr((Expr *) tf->rowexpr, (PlanState *) scanstate);\n\t\tExecInitExprList(tf->coldefexprs, (PlanState *) scanstate);", "partial_line": "scanstate->col", "completion": "scanstate->colvalexprs = <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\tpfree(values1);\n\tpfree(values2);\n\tTupleDesc\ttupdesc1;", "partial_line": "int", "completion": "int\t\t\tncolumns1; <|endoftext|>"}
{"context": "\t\telse\n\t\t\tpg_log_debug(\"creating directory \\\"%s\\\"\", ofulldir);\n\twhile (errno = 0, (de = readdir(dir)) != NULL)\n\t\tchar\t\tifullpath[MAXPGPATH];\n\t\tint\t\t\tchecksum_length = 0;", "partial_line": "uint8\t   *checksu", "completion": "uint8\t   *checksum_payload = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   void *arg)\n{\n\tHeapTuple\ttuple;\n\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relid));\n\t\treturn;\t\t\t\t\t", "partial_line": "Object", "completion": "ObjectAddress <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\t\t   wait_time,\n}\n\treturn leader_pid;\n\tint\t\t\ti;", "partial_line": "InitMaterializedSRF(f", "completion": "InitMaterializedSRF(fcinfo, 0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"c.reltuples, c.relallvisible, \");\n\telse\n\t\t\t\t\t\t \"tc.oid AS toid, \"\n\t\t\t\t\t\t \"tc.relpages AS toastpages, \"\n\t\t\t\t\t\t \"d.refobjid AS owning_tab, \"", "partial_line": "\"tsp.spcname AS relt", "completion": "\"tsp.spcname AS reltablespace, \"); <|endoftext|>"}
{"context": "\t\t\t\t\t errdetail(\"The primary's identifier is %s, the standby's identifier is %s.\",\n\t\t\t\t\t\t\tprimaryTLI, startpointTLI)));\n\t\t\tsnprintf(slotname, sizeof(slotname),\n\t\t\t\t\t (long long int) walrcv_get_backend_pid(wrconn));\n\t\toptions.logical = false;", "partial_line": "option", "completion": "options.startpoint = startpoint; <|endoftext|>"}
{"context": "\tPG_RETURN_POINTER(ret);\n\t*result = *interval;\n{\n\tstatic const int64 IntervalOffsets[MAX_INTERVAL_PRECISION + 1] = {\n\t\tINT64CONST(50000),", "partial_line": "if (INTERVAL_NOT_", "completion": "if (INTERVAL_NOT_FINITE(interval)) <|endoftext|>"}
{"context": "\t\tstate->btps_lowkey->t_info = sizeof(IndexTupleData);\n\t\t\t\t   !isleaf && last_off == P_FIRSTKEY);\n\t\t_bt_buildadd(wstate, state, dstate->base, 0);\n\tdstate->nitems = 0;\n\tdstate->phystupsize = 0;", "partial_line": "uint32", "completion": "uint32\t\trootlevel = 0; <|endoftext|>"}
{"context": "\touter_merged_index = outer_map->merged_indexes[outer_index];\n\touter_merged = outer_map->merged[outer_index];\n\t\tif (!outer_merged && !inner_merged)\n\t\t{\n\t\t\t\touter_map->merged_indexes[outer_index] = inner_merged_index;", "partial_line": "inner_m", "completion": "inner_map->merged[inner_index] = true; <|endoftext|>"}
{"context": "\tHeapTupleHeaderSetTypeId(td, tupleDescriptor->tdtypeid);\n\t\t\tvalues[attoff] = replValues[attoff];\n\tHeapTuple\tnewTuple;\n\tint\t\t\ti;\n\t\tif (attnum <= 0 || attnum > numberOfAttributes)", "partial_line": "isnull[attnum - 1] = rep", "completion": "isnull[attnum - 1] = replIsnull[i]; <|endoftext|>"}
{"context": "\t{\n\t\t{\n\t\t{\n}\n\tinet\t   *ip = PG_GETARG_INET_PP(0);", "partial_line": "unsigned c", "completion": "unsigned char *b; <|endoftext|>"}
{"context": "float4_numeric(PG_FUNCTION_ARGS)\n\t\t\tPG_RETURN_FLOAT4(get_float4_infinity());\n}\n\t\t\t\t errmsg(\"pg_lsn out of range\")));\n}", "partial_line": "typedef stru", "completion": "typedef struct NumericAggState <|endoftext|>"}
{"context": "get_foreign_server_oid(const char *servername, bool missing_ok)\n{\n\t\t\t\tbreak;\n\t\t\tcase T_MergeJoin:\n\t\t\t\tbreak;", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "\telse\n\t}\n\tpairingheap_node *pairs;\n\t\treturn children;\n\t\t{", "partial_line": "pairs = c", "completion": "pairs = curr; <|endoftext|>"}
{"context": "\t\tcell = next;\n\tSimpleStringListCell *cell;\n\tcell = (SimplePtrListCell *) pg_malloc(sizeof(SimplePtrListCell));\n\telse\n{", "partial_line": "pg_free", "completion": "pg_free(cell); <|endoftext|>"}
{"context": "            int ret = out_grouping_U(z, g_v, 97, 117, 1);\n        }\n        {\n        }\n}", "partial_line": "int a", "completion": "int among_var; <|endoftext|>"}
{"context": "\t\t\t\t\t\tcmpval = partition_rbound_datum_cmp(partsupfunc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  boundinfo->kind[off],\n\t\t\t\t}\n\t\t\t\telse\n\tAssert(maxoff >= 0 && maxoff <= boundinfo->ndatums);", "partial_line": "mino", "completion": "minoff++; <|endoftext|>"}
{"context": "} lclContext;\n\tchar\t   *filename;\t\t\n} lclTocEntry;\nstatic void _WriteData(ArchiveHandle *AH, const void *data, size_t dLen);\nstatic void _ReadBuf(ArchiveHandle *AH, void *buf, size_t len);", "partial_line": "static void _EndLO(Archi", "completion": "static void _EndLO(ArchiveHandle *AH, TocEntry *te, Oid oid); <|endoftext|>"}
{"context": "\tnum_res++;\n\tMemoryContextSwitchTo(oldcontext);\n\treturn &re_array[0].cre_re;\n{\n\tchar\t\terrMsg[100];", "partial_line": "regexec_resu", "completion": "regexec_result = pg_regexec(re, <|endoftext|>"}
{"context": "\t\tp++;\n\t\t{\n\t\t\tdepth--;\n\t\t\tbreak;\nbox_in(PG_FUNCTION_ARGS)", "partial_line": "x = bo", "completion": "x = box->high.x; <|endoftext|>"}
{"context": "\t}\n\tOid\t\t   *attioparams;\n\tAttInMetadata *attinmeta;\n\tattioparams = (Oid *) palloc0(natts * sizeof(Oid));\n\tfor (i = 0; i < natts; i++)", "partial_line": "atttypmods[i] =", "completion": "atttypmods[i] = att->atttypmod; <|endoftext|>"}
{"context": "{ 8, s_2_258, -1, 85, 0},\n{ 8, s_2_259, -1, 122, 0},\n{ 7, s_2_278, 277, 120, 0},\n{ 9, s_2_280, 277, 93, 0},\n{ 6, s_2_314, -1, 135, 0},", "partial_line": "{ 6, s_2_315, -", "completion": "{ 6, s_2_315, -1, 131, 0}, <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\t\tvalues[10] = TimestampTzGetDatum(beentry->st_proc_start_timestamp);\n\t\t\tif (beentry->st_state_start_timestamp != 0)\n\t\t\t\tvalues[11] = TimestampTzGetDatum(beentry->st_state_start_timestamp);\n\t\t\t\t{", "partial_line": "remote", "completion": "remote_host, sizeof(remote_host), <|endoftext|>"}
{"context": "            }\n            break;\n                if (ret <= 0) return ret;\n            {   int ret = slice_from_s(z, 3, s_19);\n            }", "partial_line": "if (ret <", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\t\t\t\t  XLogRecPtr abort_lsn)\n\tPGOutputData *data = (PGOutputData *) ctx->output_plugin_private;\n\tAssert(rbtxn_is_streamed(toptxn));\n\tPGOutputData *data PG_USED_FOR_ASSERTS_ONLY = (PGOutputData *) ctx->output_plugin_private;\n{", "partial_line": "static boo", "completion": "static bool relation_callbacks_registered = false; <|endoftext|>"}
{"context": "\tfprintf(OPF, \"\\n\\n\");\n\t\t\t\t\t   \"SELECT datname \"\n\t\tfprintf(OPF, \"--\\n-- Drop databases (except postgres and template1)\\n--\\n\\n\");\n\tfor (i = 0; i < PQntuples(res); i++)\n\t{", "partial_line": "if (strcmp(", "completion": "if (strcmp(dbname, \"template1\") != 0 && <|endoftext|>"}
{"context": "\t\tlink->next = set->freelist[a_fidx];\n\tblock = (AllocBlock) malloc(blksize);\n\t}\n\tblock->aset = set;\n\tVALGRIND_MAKE_MEM_NOACCESS(block->freeptr,", "partial_line": "block->prev", "completion": "block->prev = NULL; <|endoftext|>"}
{"context": "\t\t{\nbool\n{\n\tint\t\t\ti;\n\tint\t\t\tnsyncworkers;", "partial_line": "bool\t\tis_paral", "completion": "bool\t\tis_parallel_apply_worker = (wtype == WORKERTYPE_PARALLEL_APPLY); <|endoftext|>"}
{"context": "\t\t\t0x0D4B,\t\t\t\t\n\t\t\t0x0DCF,\t\t\t\t\n\t\t\t0x0DD0,\t\t\t\t\n\t\t\t0x0F7F,\t\t\t\t\n\t\t\t0x1063,\t\t\t\t", "partial_line": "0x1", "completion": "0x1068, <|endoftext|>"}
{"context": "\t\t\t\t DataDir);\n\tCheckDataVersion();\n\t\tpg_log_error_hint(\"Is a server running?  If not, delete the lock file and try again.\");\n\tif (!read_controlfile())\n\t\tGuessControlValues();", "partial_line": "WalSegSz = Control", "completion": "WalSegSz = ControlFile.xlog_seg_size; <|endoftext|>"}
{"context": "\tappendPQExpBuffer(query, \"SELECT nspname, tmplname \"\n\tappendPQExpBufferStr(q, \"    TEMPLATE = \");\n\t\t\t\t\t ARCHIVE_OPTS(.tag = dictinfo->dobj.name,\n\t\tdumpComment(fout, \"TEXT SEARCH DICTIONARY\", qdictname,\n\t\t\t\t\tdictinfo->dobj.namespace->dobj.name, dictinfo->rolname,", "partial_line": "destroyPQExpBuffe", "completion": "destroyPQExpBuffer(delq); <|endoftext|>"}
{"context": "\t\tif (test_opexpr_is_hashable((OpExpr *) testexpr, param_ids))\n\t\t\treturn true;\n\t\tforeach(l, ((BoolExpr *) testexpr)->args)\n\t\t\tif (!test_opexpr_is_hashable((OpExpr *) andarg, param_ids))\n\tif (contain_exec_param((Node *) linitial(testexpr->args), param_ids))", "partial_line": "hash_o", "completion": "hash_ok_operator(OpExpr *expr) <|endoftext|>"}
{"context": "\tval[2] = list_length(sink->bbs_state->tablespaces);\n\t\t\t\t\t\t\t\t\t sink->bbs_state->tablespace_num + 1);\n\tbbsink_forward_archive_contents(sink, len);\n\t\tval[nparam++] = state->bytes_done;\nbasebackup_progress_wait_checkpoint(void)", "partial_line": "PROGRESS_BAS", "completion": "PROGRESS_BASEBACKUP_PHASE_WAIT_CHECKPOINT); <|endoftext|>"}
{"context": "\t\tindexarg++;\n}\n\t\t\t\t\t\t\t  int indexcol,\n\tList\t   *sresult;\n\t\t\t\t\t\t\t\t\t\t PointerGetDatum(&req)));", "partial_line": "Expr\t   *cl", "completion": "Expr\t   *clause = (Expr *) lfirst(lc); <|endoftext|>"}
{"context": "{\n\tif (lt->buffer == NULL)\n\t\tltsInitReadBuffer(lt);\n\t\tlt->nbytes = TapeBlockPayloadSize;\n\tif (offset > lt->nbytes)", "partial_line": "elog(ERROR, \"invalid", "completion": "elog(ERROR, \"invalid tape seek position\"); <|endoftext|>"}
{"context": "\t\t\tlogit = true;\n\t\t\t\t(maxv < 0 && next + incby > maxv))\n\t\t\t\t\tereport(ERROR,\n\t\t\t\tif (rescnt > 0)\n\t\t\t\tif (!cycle)", "partial_line": "(errcode(E", "completion": "(errcode(ERRCODE_SEQUENCE_GENERATOR_LIMIT_EXCEEDED), <|endoftext|>"}
{"context": "\t\tif (!OidIsValid(opClassId))\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),\n\topClassId = opform->oid;\n\t\t\t\t\t\tNameListToString(opclass), format_type_be(attrType))));\nOid", "partial_line": "if (opclass->opci", "completion": "if (opclass->opcintype == type_id) <|endoftext|>"}
{"context": "#define PG_U_PC_MASK PG_U_CATEGORY_MASK(PG_U_CONNECTOR_PUNCTUATION)\n#define PG_U_P_MASK (PG_U_PC_MASK|PG_U_PD_MASK|PG_U_PS_MASK|PG_U_PE_MASK|\\\n\t\tmid = (min + max) / 2;\n}\nbool", "partial_line": "return unico", "completion": "return unicode_opt_ascii[code].properties & PG_U_PROP_UPPERCASE; <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#define LW_VAL_SHARED\t\t\t\t1\nStaticAssertDecl((MAX_BACKENDS & LW_FLAG_MASK) == 0,", "partial_line": "\"MAX_BACKENDS and LW_FLA", "completion": "\"MAX_BACKENDS and LW_FLAG_MASK overlap\"); <|endoftext|>"}
{"context": "static const symbol s_4_26[12] = { 0xD7, 0xA9, 0xD7, 0x9C, 0xD7, 0x95, 0xD7, 0xA0, 0xD7, 0x92, 0xD7, 0xA0 };\nstatic const symbol s_4_28[8] = { 0xD7, 0x91, 0xD7, 0xB1, 0xD7, 0x92, 0xD7, 0xA0 };\nstatic const symbol s_4_40[10] = { 0xD7, 0xA9, 0xD7, 0x9E, 0xD7, 0x99, 0xD7, 0xA1, 0xD7, 0xA0 };\nstatic const symbol s_4_43[12] = { 0xD7, 0x92, 0xD7, 0x90, 0xD7, 0xA0, 0xD7, 0x92, 0xD7, 0xA2, 0xD7, 0xA0 };\nstatic const symbol s_4_65[4] = { 0xD7, 0x98, 0xD7, 0xA2 };", "partial_line": "static const symbol s_4_71[8] = {", "completion": "static const symbol s_4_71[8] = { 0xD7, 0x98, 0xD7, 0xA2, 0xD7, 0xA0, 0xD7, 0xA2 }; <|endoftext|>"}
{"context": "\tforeach(lcp, all_child_pathkeys)\n\t\tList\t   *total_subpaths = NIL;\n\t\tbool\t\tstartup_neq_total = false;\n\t\t\t pathkeys_contained_in(partition_pathkeys, pathkeys));\n\t\t{", "partial_line": "NUL", "completion": "NULL, <|endoftext|>"}
{"context": "\t\t\t\t\t\t  Oid conrelid)\n\tHeapTuple\tconsttup;\n\t{\n\t\telse\n\t\t\tSysScanDesc scan2;", "partial_line": "ScanK", "completion": "ScanKeyData key2; <|endoftext|>"}
{"context": "static char *\nanybit_typmodout(int32 typmod)\n\tchar\t   *res = (char *) palloc(64);\nbit_in(PG_FUNCTION_ARGS)\n\tint32\t\tatttypmod = PG_GETARG_INT32(2);", "partial_line": "char", "completion": "char\t   *sp; <|endoftext|>"}
{"context": "int\n\tif (allow_sqlstate)\n\t\t\tstrspn(condname, \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 5)\n}\nplpgsql_parse_err_condition(char *condname)", "partial_line": "for (i = 0; exception_label_map[", "completion": "for (i = 0; exception_label_map[i].label != NULL; i++) <|endoftext|>"}
{"context": "\t\t\t\trewriteValuesRTEToNulls(pt, values_rte);\n\t\tif (!instead &&\n\t\t\t\t\t\t\t\t\t\t parsetree->mergeActionList,\n\t\t\t\tif (rev->relation == RelationGetRelid(rt_entry_relation) &&\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),", "partial_line": "rewrite_events = lappend(rewrite", "completion": "rewrite_events = lappend(rewrite_events, rev); <|endoftext|>"}
{"context": "\tCatalogTupleUpdate(conrel, &copyTuple->t_self, copyTuple);\n\tNewConstraint *newcon;\n\tcon = (Form_pg_constraint) GETSTRUCT(contuple);\n\t\t\t\t\t\t\t\t Anum_pg_constraint_conbin);\n\tcopyTuple = heap_copytuple(contuple);", "partial_line": "HeapTuple", "completion": "HeapTuple contuple, bool recurse, bool recursing, <|endoftext|>"}
{"context": "\t\t\targarray[na->argnumber] = (Node *) na->arg;\n\t\t}\n\t{\n\t\tforeach(lc, defaults)\n}", "partial_line": "ndelete = nargsprovided + lis", "completion": "ndelete = nargsprovided + list_length(defaults) - pronargs; <|endoftext|>"}
{"context": "\tPQclear(res);\n\tif (PQpipelineStatus(conn) == PQ_PIPELINE_OFF)\n{\n\tif (PQenterPipelineMode(conn) != 1)\n\tif (PQsendPrepare(conn, \"my_insert\", insert_sql2, 2, insert_param_oids) != 1)", "partial_line": "if (so", "completion": "if (sock < 0) <|endoftext|>"}
{"context": "\tJsonUniqueStackEntry *entry;\n\tif (!state->unique)\n\t\treturn JSON_SUCCESS;\n\t}\n\treturn JSON_SUCCESS;", "partial_line": "JsonSemAction uniqueSemAc", "completion": "JsonSemAction uniqueSemAction = {0}; <|endoftext|>"}
{"context": "\tif (SSL_get_certificate(ssl))\n}\n{\n\tconst unsigned char *namedata;\n}", "partial_line": "const unsigned", "completion": "const unsigned char *addrdata; <|endoftext|>"}
{"context": "\t\t\t\t\tNULL, pubinfo->rolname,\n\tPQExpBuffer query;\n\tint\t\t\ti_tableoid;\n\tj = 0;\n\t\tNamespaceInfo *nspinfo;", "partial_line": "pubsinfo[j].dobj", "completion": "pubsinfo[j].dobj.catId.tableoid = <|endoftext|>"}
{"context": "#include \"common/connect.h\"\n#include \"common/logging.h\"\n#include \"fe_utils/parallel_slot.h\"", "partial_line": "bool", "completion": "bool\t\tfull; <|endoftext|>"}
{"context": "\t\t\tcase AT_DropInherit:\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\t AlterTableUtilityContext *context)\n\t\tATPrepCmd(&wqueue, rel, cmd, recurse, false, lockmode, context);", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "}\n\tpg_log_info(\"table \\\"%s\\\" could not be created, will not restore its data\",\n\t\tTocEntry   *ted = AH->tocsByDumpId[AH->tableDataId[te->dumpId]];\n\t\tted->reqs = 0;\nArchiveHandle *", "partial_line": "clone->connC", "completion": "clone->connCancel = NULL; <|endoftext|>"}
{"context": "\t\tpg_atomic_sub_fetch_u32(VacuumActiveNWorkers, 1);\n\tfor (int i = 0; i < pvs->nindexes; i++)\n\t{\n\t\tPVIndStats *indstats = &(pvs->indstats[i]);\n\t\tif (indstats->parallel_workers_can_process)", "partial_line": "PVIn", "completion": "PVIndStats *indstats) <|endoftext|>"}
{"context": "\t\tcase RTLessStrategyNumber:\n\t\tcase RTLessEqualStrategyNumber:\n\t\tcase RTEqualStrategyNumber:\n\t\tdefault:\n}", "partial_line": "attr = TupleDescCompactAttr(bdesc->bd_tu", "completion": "attr = TupleDescCompactAttr(bdesc->bd_tupdesc, attno - 1); <|endoftext|>"}
{"context": "\t\t\tunend = (OffsetNumber *) ((char *) ptr + len);\n\t\taction = XLogReadBufferForRedoExtended(record, 1, RBM_NORMAL, true, &writebuf);\n\t\tchar\t   *data;\n\t\t\tOffsetNumber *towrite = (OffsetNumber *) data;\n\t\t\tdata += sizeof(OffsetNumber) * xldata->ntups;", "partial_line": "(int) it", "completion": "(int) itemsz); <|endoftext|>"}
{"context": "\t\tbackupEndRequired = false;\n\tif (standbyState == STANDBY_SNAPSHOT_READY &&\n\txlog_outdesc(&buf, record);\n\tpfree(buf.data);\n\tRmgrData\trmgr = GetRmgr(XLogRecGetRmid(record));", "partial_line": "cons", "completion": "const char *id; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tlibpq_append_conn_error(conn, \"could not send SSL negotiation packet: %s\",\n\t\t\t\t\t}\n\t\t\t\tstartpacket = pqBuildStartupPacket3(conn, &packetlen,\n\t\t\t\t}\n\t\t\t\tconn->status = CONNECTION_AWAITING_RESPONSE;", "partial_line": "Postgr", "completion": "PostgresPollingStatusType pollres; <|endoftext|>"}
{"context": "static DestReceiver *\n\tParamListInfo paramLI;\n\tpstmt = (PlannedStmt *) stringToNode(pstmtspace);\n\tint\t\t\ti;\n\t\telog(ERROR, \"plan node %d not found\", plan_node_id);", "partial_line": "Assert(IsParallelW", "completion": "Assert(IsParallelWorker()); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\tif (recurse)\n\t\ttable_close(attr_rel, RowExclusiveLock);\nstatic void\n\tif (!recurse)", "partial_line": "HeapT", "completion": "HeapTuple\ttup; <|endoftext|>"}
{"context": "\t\t\tquestionmarks = false,\nchar\t   *output_filename;\nstruct _include_path *include_paths = NULL;", "partial_line": "help(co", "completion": "help(const char *progname) <|endoftext|>"}
{"context": "\t\tcase OBJECT_CAST:\n\t\tcase OBJECT_EXTENSION:\n\t\tcase OBJECT_FOREIGN_SERVER:\n\t\tcase OBJECT_OPFAMILY:\n\t\tcase OBJECT_TRIGGER:", "partial_line": "ExecSecLabelSt", "completion": "ExecSecLabelStmt(SecLabelStmt *stmt) <|endoftext|>"}
{"context": "\t\tint nranges)\t\t\t\n\tsize_t\t\tn = sizeof(struct cvec) + nc * sizeof(chr);\n\tcv->rangespace = nranges;\n\tcv->nranges = 0;\n}", "partial_line": "int n", "completion": "int nchrs, <|endoftext|>"}
{"context": "\tgrpcl->hashable = hashable;\n{\n\t\t\t\t parser_errposition(pstate,\n\t\t\tstmt->lockingClause || stmt->withClause)\n\t\tQuery\t   *selectQuery;", "partial_line": "\"E", "completion": "\"EXCEPT\")); <|endoftext|>"}
{"context": "\t  PG_ISALPHA | PG_ISUPPER | PG_ISGRAPH | PG_ISPRINT,\n\t  PG_ISALPHA | PG_ISUPPER | PG_ISGRAPH | PG_ISPRINT,\n\t  PG_ISALPHA | PG_ISUPPER | PG_ISGRAPH | PG_ISPRINT,\n\t  PG_ISGRAPH | PG_ISPRINT | PG_ISPUNCT,\n\t  PG_ISGRAPH | PG_ISPRINT | PG_ISPUNCT,", "partial_line": "PG_ISGRAPH | P", "completion": "PG_ISGRAPH | PG_ISPRINT | PG_ISPUNCT, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tbool already_locked)\n\t\tLWLockRelease(ProcArrayLock);\nXidCacheRemoveRunningXids(TransactionId xid,\n\t\t\t\t\t\t  int nxids, const TransactionId *xids,\n\tint\t\t\ti,", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "int\nPQcancelErrorMessage(const PGcancelConn *cancelConn)\n{\n\tpqClosePGconn(&cancelConn->conn);\n}", "partial_line": "if (!", "completion": "if (!conn) <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\t}\n\t\t\t\tGroupingFunc *grp_node = (GroupingFunc *) node;\n\t\t\t\t\tscratch.d.grouping_func.clauses = NIL;\n\t\t\t\t\twfstate->args = ExecInitExprList(wfunc->args,", "partial_line": "elog(ERROR,", "completion": "elog(ERROR, \"MergeSupportFunc found in non-merge plan node\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tsnap, crosscheck_snapshot,\n\t\t\t\t\t\t\t\t\t\t0);\n\t\t\t}\n\t\t\t\tProcessUtilityContext context;\n\t\t\t\tProcessUtility(stmt,", "partial_line": "_SPI", "completion": "_SPI_current->queryEnv, <|endoftext|>"}
{"context": "#include \"replication/walsender.h\"\n#include \"storage/ipc.h\"\n}\n#elif defined(SIGPWR)\n\treturn size;", "partial_line": "ShmemInitStruct(\"PMSignalState\"", "completion": "ShmemInitStruct(\"PMSignalState\", PMSignalShmemSize(), &found); <|endoftext|>"}
{"context": "#line 122 \"sqlda.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n#line 168 \"sqlda.pgc\"\n\tstrcpy(msg, \"deallocate\");\n\tinp_sqlda->sqlvar[0].sqltype = ECPGt_int;", "partial_line": "dump_sqlda(", "completion": "dump_sqlda(outp_sqlda); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n\t\t maintenance_io_concurrency > 0)\n\tuint32\t\tinflight;\n\tuint32\t\thead;\n\t{", "partial_line": "}\t\t\tqueue[FLE", "completion": "}\t\t\tqueue[FLEXIBLE_ARRAY_MEMBER]; <|endoftext|>"}
{"context": "\t\t\t\t\t\t= BoolGetDatum(opts.passwordrequired);\n\t\t\t\tif (IsSet(opts.specified_opts, SUBOPT_TWOPHASE_COMMIT))\n\t\t\t\t\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t\t\t\t\t\t\t errhint(\"Resolve these transactions and try again.\")));\n\t\t\t\t\tvalues[Anum_pg_subscription_subtwophasestate - 1] =", "partial_line": "walrcv_", "completion": "walrcv_check_conninfo(stmt->conninfo, <|endoftext|>"}
{"context": "static const symbol s_2_1583[6] = { 'j', 'e', 't', 'i', 'l', 'o' };\nstatic const symbol s_2_1588[4] = { 'n', 'u', 'l', 'o' };\nstatic const symbol s_2_1606[8] = { 'o', 's', 't', 'a', 'j', 'e', 'm', 'o' };\nstatic const symbol s_2_1607[5] = { 'i', 'j', 'e', 'm', 'o' };\nstatic const symbol s_2_1612[9] = { 'l', 'u', 0xC4, 0x8D, 'u', 'j', 'e', 'm', 'o' };", "partial_line": "static const symbol", "completion": "static const symbol s_2_1620[3] = { 'i', 'm', 'o' }; <|endoftext|>"}
{"context": "static HTAB *SMgrRelationHash = NULL;\nvoid\nsmgrinit(void)\n{\n\tHOLD_INTERRUPTS();", "partial_line": "smgr", "completion": "smgrsw[i].smgr_init(); <|endoftext|>"}
{"context": "#line 26 \"array_of_struct.pgc\"\n } custs3 [ 10 ] ;\n#line 44 \"array_of_struct.pgc\"\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\n#line 54 \"array_of_struct.pgc\"", "partial_line": "#line 54 \"array", "completion": "#line 54 \"array_of_struct.pgc\" <|endoftext|>"}
{"context": "\t\tTerminateBackgroundWorker(wstate->handle[wstate->nworkers]);\n\t\t(void) WaitLatch(MyLatch, WL_LATCH_SET | WL_EXIT_ON_PM_DEATH, 0,\n\t\t\t\t\t\t we_bgworker_startup);\nstatic bool\ncheck_worker_status(worker_state *wstate)", "partial_line": "pi", "completion": "pid_t\t\tpid; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tOid\t\t\tpartIndexId;\n\t\t\t\tmapped_pkattnum = palloc(sizeof(AttrNumber) * numfks);\n\t\t\tpartIndexId = index_get_partition(partRel, indexOid);\n\t\t\t\telog(ERROR, \"index for %u not found in partition %s\",", "partial_line": "partRel, partIndexId,", "completion": "partRel, partIndexId, parentConstr, <|endoftext|>"}
{"context": "{\n\t\t{\n\t\t\tcase jbvNumeric:\n\t\t\t\t\treturn -1;\n\t\t\t\telog(ERROR, \"invalid jsonb scalar type\");", "partial_line": "return", "completion": "return -1; <|endoftext|>"}
{"context": "static const symbol s_2_603[3] = { 'o', 'r', 'e' };\nstatic const symbol s_2_607[4] = { 'g', 'a', 's', 'e' };\nstatic const symbol s_2_615[5] = { 'i', 'r', 'a', 's', 'e' };\nstatic const symbol s_2_617[4] = { 't', 'a', 's', 'e' };\nstatic const symbol s_2_621[5] = { 'i', 'v', 'a', 's', 'e' };", "partial_line": "static const symbol s_2_6", "completion": "static const symbol s_2_624[3] = { 'e', 's', 'e' }; <|endoftext|>"}
{"context": "\t\t\ttbinfo->attgenerated[j] = *(PQgetvalue(res, r, i_attgenerated));\n\t\t\ttbinfo->attislocal[j] = (PQgetvalue(res, r, i_attislocal)[0] == 't');\n\t\t\t\t\t\t\t\t  tbinfo, j,\n\t\t\ttbinfo->attoptions[j] = pg_strdup(PQgetvalue(res, r, i_attoptions));\n\t\tif (hasdefaults)", "partial_line": "if (tblo", "completion": "if (tbloids->len > 1) <|endoftext|>"}
{"context": "\t}\nstatic void\n\t\t\tcase RTE_RELATION:\n\t\t\t\tif (rte->relkind == RELKIND_FOREIGN_TABLE)\n\t\t\t\tbreak;", "partial_line": "case RTE_NAMEDT", "completion": "case RTE_NAMEDTUPLESTORE: <|endoftext|>"}
{"context": "\t{\n\t\t\tbreak;\n\t}\nExecEvalRowNotNull(ExprState *state, ExprEvalStep *op, ExprContext *econtext)\n\ttupType = HeapTupleHeaderGetTypeId(tuple);", "partial_line": "&op->d.nulltest_row.rowca", "completion": "&op->d.nulltest_row.rowcache, NULL); <|endoftext|>"}
{"context": "\t\tif (cstate->line_buf.len != 0)\n\t\t\t\t\t(errcode(ERRCODE_BAD_COPY_FILE_FORMAT),\n\t}\n\t\tstart_ptr = cur_ptr;\n\t\t\tchar\t\tc;", "partial_line": "goto en", "completion": "goto endfield; <|endoftext|>"}
{"context": "\t\tif (!TransactionIdIsNormal(xid) ||\n\t\t\tcontinue;\n\t\tProcGlobal->statusFlags[MyProc->pgxactoff] = MyProc->statusFlags;\n\t\tresult = true;\n{", "partial_line": "RunningTransactions CurrentRunningXacts", "completion": "RunningTransactions CurrentRunningXacts = &CurrentRunningXactsData; <|endoftext|>"}
{"context": "static const symbol s_2_1379[5] = { 'j', 'e', 't', 'i', 'm' };\nstatic const symbol s_2_1388[5] = { 'e', 0xC4, 0x87, 'i', 'm' };\nstatic const symbol s_2_1399[4] = { 'u', 'g', 'o', 'm' };\nstatic const symbol s_2_1410[7] = { 'p', 'a', 'n', 'i', 'j', 'o', 'm' };\nstatic const symbol s_2_1415[5] = { 's', 'i', 'j', 'o', 'm' };", "partial_line": "static const symbol s_2_1437[4] =", "completion": "static const symbol s_2_1437[4] = { 'i', 'n', 'o', 'm' }; <|endoftext|>"}
{"context": "CacheInvalidateRelmap(Oid databaseId)\n\tmsg.rm.dbId = databaseId;\n\t{\n\t}\n\tsyscache_callback_list[syscache_callback_count].id = cacheid;", "partial_line": "++syscache_ca", "completion": "++syscache_callback_count; <|endoftext|>"}
{"context": "#include \"libpq/pqsignal.h\"\n#include \"storage/proc.h\"\n#include \"utils/timestamp.h\"\nstatic TransactionId *ParallelCurrentXids;\n\tTBLOCK_DEFAULT,\t\t\t\t", "partial_line": "TBLOC", "completion": "TBLOCK_IMPLICIT_INPROGRESS, <|endoftext|>"}
{"context": "\tl.l_filename = filename;\n\tl.l_target = ecpyalloc(fields[LF_TARGET]);\n\tl.l_linkname = ecpyalloc(fields[LF_LINKNAME]);\n}\n\tconst struct lookup *lp;", "partial_line": "rp->r_month = lp->", "completion": "rp->r_month = lp->l_value; <|endoftext|>"}
{"context": "\t\t}\n\t\t{\n\t\t\txlrec.infobits_set = compute_infobits(new_infomask, new_infomask2);\n\t\t\t\tcleared_all_frozen ? XLH_LOCK_ALL_FROZEN_CLEARED : 0;\n\tresult = TM_Ok;", "partial_line": "Release", "completion": "ReleaseBuffer(vmbuffer); <|endoftext|>"}
{"context": "\tfor (i = 1; i <= ARR_DIMS(array)[0]; i++)\n\t\tbool\t\tisnull;\n\t\t\t\t\t  TYPALIGN_INT  ,\n\t\t\t\t\t\t\t\t false,\n\t\tpfree(val);", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "        case 3:\n            {   int ret = slice_from_s(z, 4, s_3);\n        z->lb = mlimit1;\n    switch (among_var) {\n            lab1:", "partial_line": "z->c =", "completion": "z->c = z->l - m2; <|endoftext|>"}
{"context": "\t{p_iseqC, '-', A_NEXT, TPS_InCloseCommentFirst, 0, NULL},\n\t{NULL, 0, A_NEXT, TPS_Null, 0, NULL}\n};\n\t{p_iseqC, '-', A_NEXT, TPS_Null, 0, NULL},\nstatic const TParserStateActionItem actionTPS_InHostFirstDomain[] = {", "partial_line": "{NULL,", "completion": "{NULL, 0, A_POP, TPS_Null, 0, NULL} <|endoftext|>"}
{"context": "{ 8, s_3_0, -1, 1, 0},\n{ 6, s_3_2, -1, 1, 0},\n{ 6, s_3_3, -1, 1, 0},\n{ 8, s_3_11, -1, 1, 0},\nstatic const symbol s_4_2[4] = { 0xCF, 0x85, 0xCF, 0x88 };", "partial_line": "{ 4, s", "completion": "{ 4, s_4_3, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tPage\t\tpage = BufferGetPage(hscan->rs_cbuf);\n\t\t\tbool\t\tindexIt;\n\t\t\tTransactionId xwait;\n\t\t\t\tcase HEAPTUPLE_LIVE:\n\t\t\t\t\treltuples += 1;", "partial_line": "if (HeapTup", "completion": "if (HeapTupleIsHotUpdated(heapTuple)) <|endoftext|>"}
{"context": "\t\tdlist_delete(&gconf->nondef_link);\n\t\tconfigdir = make_absolute_path(getenv(\"PGDATA\"));\n\t{\n\t\t\t\t\t\t   strlen(configdir) + strlen(CONFIG_FILENAME) + 2);\n\t\treturn false;", "partial_line": "if (stat", "completion": "if (stat(ConfigFileName, &stat_buf) != 0) <|endoftext|>"}
{"context": "\tkey->partopcintype = (Oid *) palloc0(key->partnatts * sizeof(Oid));\n\t\tAttrNumber\tattno = key->partattrs[i];\n\t\tHeapTuple\topclasstup;\n\t\tForm_pg_opclass opclassform;\n\t\tkey->partopfamily[i] = opclassform->opcfamily;", "partial_line": "&key->parttypl", "completion": "&key->parttyplen[i], <|endoftext|>"}
{"context": "\treturn address;\n\tSysScanDesc scan;\n\tScanKeyData key;\n\tscan = systable_beginscan(catalogRelation, InheritsParentIndexId,\n\t\t\t\t\t\t   get_rel_name(inhForm->inhrelid),", "partial_line": "((Form_pg_inherits) GETSTRUCT(ne", "completion": "((Form_pg_inherits) GETSTRUCT(newtup))->inhdetachpending = true; <|endoftext|>"}
{"context": "\treturn pgaio_io_state_get_name(ioh->state);\n\t\tcase PGAIO_RS_PARTIAL:\n}\n{\n\tioh = pgaio_io_from_wref(iow, &ref_generation);", "partial_line": "if (pgaio_io_was_recycled(ioh, ref_gen", "completion": "if (pgaio_io_was_recycled(ioh, ref_generation, &state)) <|endoftext|>"}
{"context": "\tif ((lp = byword(fields[LP_MONTH], mon_names)) == NULL)\n\twhile (j != month)\n\t}\n\tif (sscanf(cp, \"%d%c\", &day, &xs) != 1 ||\n\t\tday <= 0 || day > len_months[isleap(year)][month])", "partial_line": "if (dayoff", "completion": "if (dayoff < min_time / SECSPERDAY) <|endoftext|>"}
{"context": "\t\tbool\t\tcan_hibernate;\n\t\t\tTimestampTz timeout = 0;\n\t\t\ttimeout = TimestampTzPlusMilliseconds(last_snapshot_ts,\n\t\t\t}\n\t\trc = WaitLatch(MyLatch,", "partial_line": "BgWriterDelay  , WAIT", "completion": "BgWriterDelay  , WAIT_EVENT_BGWRITER_MAIN); <|endoftext|>"}
{"context": "\t\t\t\t procStruct->prolang);\n\t\t\tif (!HeapTupleIsValid(typeTup))\n\t\t\t}\n\t\t\t\ttypeStruct = (Form_pg_type) GETSTRUCT(typeTup);\n\t\t\t\t\tereport(ERROR,", "partial_line": "prodesc", "completion": "prodesc->arg_is_rowtype[i] = false; <|endoftext|>"}
{"context": "\t\tif (!slow)\n\tbool\t\thasnulls = HeapTupleHasNulls(tuple);\n\t\t\t\t\t\t\t\t\t\t\t\t\t natts,\n\t{\n\t.base_slot_size = sizeof(VirtualTupleTableSlot),", "partial_line": ".get_heap_t", "completion": ".get_heap_tuple = NULL, <|endoftext|>"}
{"context": "\t}\n\t\t\tereturn(escontext, (Datum) 0,\n\t\t}\n\tbc += VARHDRSZ;\n\t\t\t\t (tp[2] >= '0' && tp[2] <= '7') &&", "partial_line": "(tp[3]", "completion": "(tp[3] >= '0' && tp[3] <= '7')) <|endoftext|>"}
{"context": "\t\t{\n\t\treturn tokens;\n\t\t\t}\n\t\t}\nFILE *", "partial_line": "if (depth > CONF_FILE_", "completion": "if (depth > CONF_FILE_MAX_DEPTH) <|endoftext|>"}
{"context": "\t\t\t}\n\tHeapTuple\thtup;\n\t\telog(ERROR,\n\ttmptup.t_len = HeapTupleHeaderGetDatumLength(td);\n}", "partial_line": "len += nkeys *", "completion": "len += nkeys * MAXALIGN(sizeof(bool) * numrows); <|endoftext|>"}
{"context": "\t\t\tnewtup = brin_form_tuple(bdesc, heapBlk, dtup, &newsz);\n\t\t\tif (!brin_doupdate(idxRel, pagesPerRange, revmap, heapBlk,\n\t\tMemoryContextDelete(tupcxt);\n\treturn false;\n\tBrinInsertState *bistate = (BrinInsertState *) indexInfo->ii_AmCache;", "partial_line": "bringetbitmap(Index", "completion": "bringetbitmap(IndexScanDesc scan, TIDBitmap *tbm) <|endoftext|>"}
{"context": "\tATController(NULL, rel, cmds, recurse, lockmode, NULL);\n}\n\t\t\tcase AT_AddColumn:\t\n\t\t\tcase AT_EnableReplicaRule:\t\n\t\t\tcase AT_EnableRule: ", "partial_line": "case AT_Enab", "completion": "case AT_EnableAlwaysTrig: <|endoftext|>"}
{"context": "static int r_RV(struct SN_env * z);\nstatic int r_R2(struct SN_env * z);\nstatic int r_R1(struct SN_env * z);\nextern \"C\" {\nextern void irish_UTF_8_close_env(struct SN_env * z);", "partial_line": "static const symbol s_", "completion": "static const symbol s_0_3[2] = { 'b', 'p' }; <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tint\t\t\tresult_relation;\n\t\tList\t   *product_queries;\n\t\t\t\t{\n\t\t\t\t\t\tif (values_rte != NULL)", "partial_line": "elog(ERROR, \"", "completion": "elog(ERROR, \"more than one VALUES RTE found\"); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#include \"tsearch/ts_type.h\"\n\ttext\t   *element;\ntsmatchsel(PG_FUNCTION_ARGS)", "partial_line": "int\t\t\tvarRelid = PG_G", "completion": "int\t\t\tvarRelid = PG_GETARG_INT32(3); <|endoftext|>"}
{"context": "\t\t\t\tappendStringInfoChar(buf, ')');\n\t\t\tappendStringInfoString(buf, \"[*]\");\n\t\t\tbreak;\n\t\t\tappendStringInfoChar(buf, '[');\n\t\t\t\t{", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tbarrier->participants = participants;\nBarrierArriveAndWait(Barrier *barrier, uint32 wait_event_info)\n\t++barrier->arrived;\n\tif (barrier->arrived == barrier->participants)\n\t}", "partial_line": "if (rele", "completion": "if (release) <|endoftext|>"}
{"context": "#include \"postmaster/autovacuum.h\"\n\treturn size;\n\tsize = add_size(size, PGProcShmemSize());\nint\n{", "partial_line": "InitProc", "completion": "InitProcGlobal(void) <|endoftext|>"}
{"context": "\t\t{\n\t\tReleaseSysCache(tup);\n\t\treturn true;\n\t\tRelOptInfo *final_rel;\n\t\t\t(cte->cterefcount <= 1 ||", "partial_line": "subroot = subquery_pl", "completion": "subroot = subquery_planner(root->glob, subquery, root, <|endoftext|>"}
{"context": "\t\t\tForm_pg_attribute attr = TupleDescAttr(tupDesc, attnum - 1);\n\tif (cstate->opts.on_error != COPY_ON_ERROR_STOP)\n\t{\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_COLUMN_REFERENCE),\n\tif (cstate->opts.convert_selectively)", "partial_line": "if (!list", "completion": "if (!list_member_int(cstate->attnumlist, attnum)) <|endoftext|>"}
{"context": "}\nexecuteLikeRegex(JsonPathItem *jsp, JsonbValue *str, JsonbValue *rarg,\n\t\t\tcstring_to_text_with_len(jsp->content.like_regex.pattern,\n\t\t\t\t\t\t\t   str->val.string.len,\n\t\t\t\t\t\t\t   jspThrowErrors(cxt) ? NULL : (Node *) &escontext);", "partial_line": "res = jpe", "completion": "res = jperOk; <|endoftext|>"}
{"context": "\t\t\twhile (++curtblindx < numTables)\n\t\tPQclear(res);\n\t\tint\t\t\tnumConstrs;\n\t\tint\t\t\ti_oid;\n\t\tappendPQExpBuffer(q,", "partial_line": "checkoids-", "completion": "checkoids->data); <|endoftext|>"}
{"context": "\t\tentry->exprs = exprs;\n\tint\t\t\ti;\n\tstats->attrtypmod = exprTypmod(expr);\n\ttyptuple = SearchSysCacheCopy1(TYPEOID,\n\t\telog(ERROR, \"cache lookup failed for type %u\", stats->attrtypid);", "partial_line": "if (!ok || s", "completion": "if (!ok || stats->compute_stats == NULL || stats->minrows <= 0) <|endoftext|>"}
{"context": "\t\telog(ERROR, \"cache lookup failed for type %u\", domainoid);\n\t\t\tdefaultExpr = NULL;\n\t\t\tdefaultValue = deparse_expression(defaultExpr,\n\t\t\tnew_record_repl[Anum_pg_type_typdefault - 1] = true;\n\t}", "partial_line": "GenerateTypeDepen", "completion": "GenerateTypeDependencies(newtuple, <|endoftext|>"}
{"context": "\tif (from->nouts > 1)\n\t}\n\t\t\tcase SATISFIED:\t\t\n\t\t\t\t\tif (s->ins->from == a->from && s->outs->to == to)\n\t\t\t\t\ts = newstate(nfa);", "partial_line": "case R", "completion": "case REPLACEARC: <|endoftext|>"}
{"context": "\t\telse\n\t\t{\n\t\t\t\t\t\t\t\t  joinrel,\n\t\t\t\t\t\t\t\t  cheapest_total_inner,\n\t\t\t{", "partial_line": "if (outerpat", "completion": "if (outerpath == cheapest_startup_outer && <|endoftext|>"}
{"context": "\t\tParallelHashGrowth growth = pstate->growth;\n\tif (pstate->growth != PHJ_GROWTH_DISABLED)\n\t\t\thashtable->batches[0].shared->size +\n\t\t\treturn NULL;\n\t\t\thashtable->batches[0].shared->ntuples += hashtable->batches[0].ntuples;", "partial_line": "MaxAllocSize / sizeof", "completion": "MaxAllocSize / sizeof(dsa_pointer_atomic)) <|endoftext|>"}
{"context": "\t\t\tdohash = true;\n\t\telse\n\t\t\t\t\t\t\t\t\t\t\t false);\n\tint\t\t\tnumDirectArgs;\n\t\t\t\t\t\t\t\t &transfnexpr,", "partial_line": "(FunctionCallInfo) palloc(SizeForFunc", "completion": "(FunctionCallInfo) palloc(SizeForFunctionCallInfo(1)); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tactivate_interpreter(interp_desc);\n\tplperl_interp_desc *interp_desc;\n\tinterp_desc = hash_search(plperl_interp_hash, &user_id,\n\t\t\t\t\t\t\t  &found);", "partial_line": "if (!f", "completion": "if (!found) <|endoftext|>"}
{"context": "\telse\n\t\tTM_IndexDelete *ideltid = &delstate->deltids[i];\n\t\t{\n\t\t\t\t\tcurtargetfreespace /= 2;\n\t\t\tblkno = ItemPointerGetBlockNumber(htid);", "partial_line": "Assert(!del", "completion": "Assert(!delstate->bottomup || <|endoftext|>"}
{"context": "            }\n            if (!find_among_b(z, a_1, 4)) { z->lb = mlimit2; return 0; }\n            z->bra = z->c;\n    {   int ret = slice_del(z);\n        if (!(eq_s_b(z, 2, s_0))) goto lab0;", "partial_line": "{", "completion": "{   int mlimit2; <|endoftext|>"}
{"context": "\t\t\t\tanyone_alive = true;\n\t\t\t}\n\t\t\t\tshm_mq\t   *mq;\n\t\t\t\t\tGetBackgroundWorkerPid(pcxt->worker[i].bgwhandle,\n\t\tResetLatch(MyLatch);", "partial_line": "if (pcxt->toc", "completion": "if (pcxt->toc != NULL) <|endoftext|>"}
{"context": "\tchar\t   *buf;\n\tfflush(stdout);\n\tif (log_locus_callback)\n\tif (!(log_flags & PG_LOG_FLAG_TERSE) || filename)\n\t\t\t\tfprintf(stderr, UINT64_FORMAT \":\", lineno);", "partial_line": "fprintf", "completion": "fprintf(stderr, ANSI_ESCAPE_RESET); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  2 * sizeof(unsigned int));\n\t\t\t\tif (nmoved == 0)\n\t\t\t\tstate->eof_reached = false;\n\t\t\t}\n\t\t\telse", "partial_line": "else if (nmoved", "completion": "else if (nmoved != tuplen + 2 * sizeof(unsigned int)) <|endoftext|>"}
{"context": "\t\t\t\terrno = PGTYPES_TS_BAD_TIMESTAMP;\n\t\t\tresult = SetEpochTimestamp();\n\t\tcase DTK_LATE:\n\t\tcase DTK_EARLY:\n\t\t\terrno = PGTYPES_TS_BAD_TIMESTAMP;", "partial_line": "int\t\t\tDate", "completion": "int\t\t\tDateStyle = 1; <|endoftext|>"}
{"context": "}\n{\n\t\tcase 'M':\n\t\tcase 'N':\n\t\tcase 'U':", "partial_line": "c", "completion": "case 'X': <|endoftext|>"}
{"context": "\t0x10324, 0x1032F,\n\t0x1044E, 0x1CFFF,\n\t0x1D4AD, 0x1D4AD,\n\t0x1D6A4, 0x1D6A7,\n\t0xB0000, 0xBFFFD,", "partial_line": "0xE00", "completion": "0xE0000, 0xE0000, <|endoftext|>"}
{"context": "\tint\t\t\tbase;\n\tconst char *cvt = \"0123456789abcdef\";\n\tchar\t\tconvert[64];\n\t\tcase 'i':\n\t\t\tdosign = 0;", "partial_line": "if (dosign && adju", "completion": "if (dosign && adjust_sign((value < 0), forcesign, &signvalue)) <|endoftext|>"}
{"context": "\t\t\tcase T_Boolean:\n\t\t\tcase T_String:\n\t\t\t\tbreak;\nstatic Bitmapset *\ncopyObjectImpl(const void *from)", "partial_line": "void", "completion": "void\t   *retval; <|endoftext|>"}
{"context": "\tStatsData\tlast,\n\t\t\t\taggs;\n\t\tstate[i].state = CSTATE_CHOOSE_SCRIPT;\n\tlast_report = thread_start;\n\tlast = aggs;", "partial_line": "min_", "completion": "min_usec = PG_INT64_MAX; <|endoftext|>"}
{"context": "format_procedure(Oid procedure_oid)\n{\n\tif (HeapTupleIsValid(proctup))\n\t\tchar\t   *nspname;\n\t\t\tOid\t\t\tthisargtype = procform->proargtypes.values[i];", "partial_line": "if (", "completion": "if (i > 0) <|endoftext|>"}
{"context": "\t\tGeneratePruningStepsContext context;\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   subpart->relids,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnappinfos,\n\t\telse", "partial_line": "partprune", "completion": "partprunequal = (List *) <|endoftext|>"}
{"context": "\t\tif (namestrcmp(&(att->attname), attname) == 0 && !att->attisdropped)\n\t{\n\t}\n\t\treturn sysatt->attnum;\n\t\tsysatt = SystemAttributeDefinition(attid);", "partial_line": "elog(ERROR, \"invalid attr", "completion": "elog(ERROR, \"invalid attribute number %d\", attid); <|endoftext|>"}
{"context": "\tdatum_array = (Datum *) palloc(length * sizeof(Datum));\nPutMemoryContextsStatsTupleStore(Tuplestorestate *tupstore,\n\tList\t   *path = NIL;\n\t{", "partial_line": "elog(ERROR, \"hash table c", "completion": "elog(ERROR, \"hash table corrupted\"); <|endoftext|>"}
{"context": "\t\t}\n\t\t}\n\t}\n\t\tIsA(node, Param))\n\t\treturn node;", "partial_line": "Var", "completion": "Var\t\t   *var = (Var *) node; <|endoftext|>"}
{"context": "\t{p_isEOF, 0, A_POP, TPS_Null, 0, NULL},\n\t{p_iseqC, '-', A_PUSH, TPS_InHyphenAsciiWordFirst, 0, NULL},\n\t{NULL, 0, A_POP, TPS_Null, 0, NULL}\nstatic const TParserStateActionItem actionTPS_InHyphenWord[] = {\n};", "partial_line": "{p_isEOF, 0, A_POP, TPS_Nul", "completion": "{p_isEOF, 0, A_POP, TPS_Null, 0, NULL}, <|endoftext|>"}
{"context": "\tjoinrte->lateral = false;\n\tparse->rtable = lappend(parse->rtable, joinrte);\n\tjoinexpr->alias = NULL;\n\t\tparse->targetList = (List *)\n\t\t\t\t\t\t\t   bms_make_singleton(joinrti));", "partial_line": "foreach_nod", "completion": "foreach_node(MergeAction, action, parse->mergeActionList) <|endoftext|>"}
{"context": "\t\telse\n\tcheck_valid_version_name(versionName);\n\t\t\t\t\t  const char *initialVersion,\n\t\t\t\t\t  List *updateVersions,\n\t\t\t\t\t  bool is_create)", "partial_line": "Lis", "completion": "ListCell   *lcv; <|endoftext|>"}
{"context": "}\n\tif (res == NULL)\n\t}\n}\ndefaultNoticeReceiver(void *arg, const PGresult *res)", "partial_line": "if (res-", "completion": "if (res->noticeHooks.noticeProc != NULL) <|endoftext|>"}
{"context": "\t\t\telse\n\t\tereport(LOG,\n\tport->keepalives_interval = interval;\n\treturn STATUS_OK;\npq_getkeepalivescount(Port *port)", "partial_line": "socklen_t\ts", "completion": "socklen_t\tsize = sizeof(port->default_keepalives_count); <|endoftext|>"}
{"context": "\tnode->scan.scanrelid = scanrelid;\n}\n\tnode->indexid = indexid;\n\tnode->indexorderdir = indexscandir;\nmake_indexonlyscan(List *qptlist,", "partial_line": "node->indexid =", "completion": "node->indexid = indexid; <|endoftext|>"}
{"context": "\t\tcase NUM_L:\n\t\t\t\t errdetail(\"\\\"RN\\\" may only be used together with \\\"FM\\\".\")));\nparse_format(FormatNode *node, const char *str, const KeyWord *kw,\n\t\t}\n\t\t\tn->type = NODE_TYPE_ACTION;", "partial_line": "(s = suff_search(str, suf,", "completion": "(s = suff_search(str, suf, SUFFTYPE_POSTFIX)) != NULL) <|endoftext|>"}
{"context": "#endif\nstatic const symbol s_0_0[1] = { 'a' };\nstatic const symbol s_0_1[4] = { 'a', 'r', 'n', 'a' };\nstatic const symbol s_0_4[4] = { 'o', 'r', 'n', 'a' };\nstatic const symbol s_0_7[3] = { 'a', 'd', 'e' };", "partial_line": "static const symbol s_0_10[3] = { '", "completion": "static const symbol s_0_10[3] = { 'a', 'r', 'e' }; <|endoftext|>"}
{"context": "\t\trblkno = opaque->btpo_next;\n\t_bt_relbuf(rel, insertstate->buf);\n}\n\t\t\t   BTScanInsert itup_key,\n\t\t\t   int postingoff,", "partial_line": "Assert(", "completion": "Assert(isleaf == !BufferIsValid(cbuf)); <|endoftext|>"}
{"context": "\t\t\t\t\t((strlen(trailing_nl) + targetbuf.len > context->wrapColumn) ||\n\t\t\tlast_was_multiline =\n\t\tappendBinaryStringInfo(buf, targetbuf.data, targetbuf.len);\n\tpfree(targetbuf.data);\n\t\t\t}", "partial_line": "get_setop_query(Node", "completion": "get_setop_query(Node *setOp, Query *query, deparse_context *context) <|endoftext|>"}
{"context": "{\n\t\tcase T_BitmapHeapScan:\n\t\t\t*rels_used = bms_add_member(*rels_used,\n\t\t\t*rels_used = bms_add_member(*rels_used,\n\t\t\t\t\t\t\t\t\t\t\t((ModifyTable *) plan)->exclRelRTI);", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (pattern && pattern2)\n\t\telse if (pattern)\n\t\tmyopt.title = _(\"List of settings\");\nbool\ndescribeRoleGrants(const char *pattern, bool showSystem)", "partial_line": "PQExpB", "completion": "PQExpBufferData buf; <|endoftext|>"}
{"context": "\t\t\t\tv = execute_jsp_gin_node(node->args[i], check, ternary);\n\t\t\t\t\tres = GIN_MAYBE;\n\t\t\t}\nDatum\n\tint32\t   *searchMode = (int32 *) PG_GETARG_POINTER(6);", "partial_line": "else if (strategy", "completion": "else if (strategy == JsonbExistsStrategyNumber) <|endoftext|>"}
{"context": "#ifndef WIN32\n#include \"access/xact.h\"\n#include \"pgstat.h\"", "partial_line": "#include \"st", "completion": "#include \"storage/ipc.h\" <|endoftext|>"}
{"context": "\t{\n\t\tBlockNumber blkno;\n\t\t\t\t errmsg(\"out of overflow pages in hash index \\\"%s\\\"\",\n\t\t\t\t\t  uint16 ffactor, bool initpage)\n\tspare_index = _hash_spareindex(num_buckets);", "partial_line": "_hash_pageinit(page, B", "completion": "_hash_pageinit(page, BufferGetPageSize(buf)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t ALLOCSET_DEFAULT_SIZES);\n\tif (scan->numberOfOrderBys > 0)\n\t\t\tpalloc(sizeof(int) * scan->numberOfOrderBys);\n\t\t}\n\t\tscan->xs_orderbyvals = (Datum *)", "partial_line": "CurrentM", "completion": "CurrentMemoryContext); <|endoftext|>"}
{"context": "\t\t\t\tvalues[5] = VXIDGetDatum(instance->locktag.locktag_field1,\n\t\t\t\t\t\t\t\t\t\t instance->locktag.locktag_field2);\n\t\t\t\tnulls[4] = true;\n\t\t\t\tvalues[9] = Int16GetDatum(instance->locktag.locktag_field4);\n\t\t\t\tbreak;", "partial_line": "if (instance->pi", "completion": "if (instance->pid != 0) <|endoftext|>"}
{"context": "strlcpy(char *dst, const char *src, size_t siz)\n\t\t\tif ((*d++ = *s++) == '\\0')\n\t\t}", "partial_line": "return (s", "completion": "return (s - src - 1); <|endoftext|>"}
{"context": "\tappendStringInfo(buf, \"%u \", member->xid);\n\t\t\tappendStringInfoString(buf, \"(fornokeyupd) \");\n\t\t\tappendStringInfoString(buf, \"(nokeyupd) \");", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\treturn EINVAL;\n\t\tfor (i = 0; i < sp->charcnt; ++i)\n\t\t\t\tsp->lsis[leapcnt].ls_corr = prevcorr = corr;\n\t\t\t\tttisp->tt_ttisstd = false;\n\t\t}", "partial_line": "nrea", "completion": "nread -= p - up->buf; <|endoftext|>"}
{"context": "\t\t\tereport(elevel,\n\t\t\t\t\terrmsg(\"replication slot \\\"%s\\\" specified in parameter \\\"%s\\\" does not exist\",\n\t\t\t\t\t\t   name, \"synchronized_standby_slots\"),\n\t\t\t\t\terrcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t\t\tname, \"synchronized_standby_slots\"));", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\tif (att->typoid == attr->atttypid && att->typmod == attr->atttypmod)\n\t\tPLy_input_setup_func(att, arg->mcxt,\n\tif (arg->typoid == RECORDOID && arg->typmod < 0)\n\t}", "partial_line": "for (i", "completion": "for (i = 0; i < desc->natts; i++) <|endoftext|>"}
{"context": "\t\t\tcase EEOP_JSON_CONSTRUCTOR:\n\t\t\t\tbreak;\n\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\tbreak;\n\t\t\tcase EEOP_JSONEXPR_PATH:", "partial_line": "LLVMValueR", "completion": "LLVMValueRef v_jump_error; <|endoftext|>"}
{"context": "static const symbol s_2_406[5] = { 'o', 'v', 'i', 't', 'a' };\nstatic const symbol s_2_408[4] = { 'e', 's', 't', 'a' };\nstatic const symbol s_2_411[4] = { 'o', 's', 't', 'a' };\nstatic const symbol s_2_412[4] = { 'n', 'u', 't', 'a' };\nstatic const symbol s_2_442[5] = { 'v', 'a', 0xC5, 0xA1, 'a' };", "partial_line": "static const symbol s_2_45", "completion": "static const symbol s_2_451[6] = { 'i', 's', 't', 'a', 'd', 'e' }; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase jpiExists:\n\t\t\tappendStringInfoChar(buf, ')');\n\t\t\tappendStringInfoString(buf, \".abs()\");\n\t\t\t\tjspGetArg(v, &elem);", "partial_line": "printJsonPathItem(buf, &el", "completion": "printJsonPathItem(buf, &elem, false, false); <|endoftext|>"}
{"context": "\tassert(n > 0);\n\tMDEBUG((\"%d: setting %d = %ld-%ld\\n\", sub->id, n, LOFF(begin), LOFF(end)));\n\tassert(t != NULL);\n\t\treturn REG_ETOOBIG;\n\t{", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t   &stream->buffers[oldest_buffer_index]);\n\t\t\tstream->oldest_io_index = 0;\n\t\t\tstream->ios[io_index].op.blocknum == stream->seq_until_processed)\n\tstream->buffers[oldest_buffer_index] = InvalidBuffer;\n\t\t\t\t\t\t\t\t\t\t\t  oldest_buffer_index - 1);", "partial_line": "#elif defined(US", "completion": "#elif defined(USE_VALGRIND) <|endoftext|>"}
{"context": "\tFILE\t   *fd;\n\tchar\t   *buf;\n\tParseScript(buf, filename, weight);\n{\n{", "partial_line": "for (i = 0; i", "completion": "for (i = 0; i < lengthof(builtin_script); i++) <|endoftext|>"}
{"context": "\t\telse\n\t\t\tappendPQExpBufferStr(&conn->errorMessage, workBuf.data);\n\t\t{\n\t\t\t\tres->noticeHooks.noticeRec(res->noticeHooks.noticeRecArg, res);\n\t\treturn;", "partial_line": "if (re", "completion": "if (res->errMsg && res->errMsg[0]) <|endoftext|>"}
{"context": "\t\t\t\t\t\t current_call_data->cdomain_oid,\n\t\t\t\t\t\t &current_call_data->cdomain_info,\n\t{\n\t\t\t\t\t\t\t\t\tprodesc->result_oid,\n\t\t\t\t\t\t\t\t\t-1,", "partial_line": "ret, is", "completion": "ret, isNull); <|endoftext|>"}
{"context": "{ 2, s_8_10, -1, 2, 0},\n{ 4, s_8_15, -1, 2, 0},\n{ 3, s_8_32, -1, 2, 0},\n{ 5, s_8_53, -1, 2, 0},\n{ 5, s_8_59, -1, 2, 0},", "partial_line": "{ 8, s_8_", "completion": "{ 8, s_8_73, 70, 2, 0}, <|endoftext|>"}
{"context": "\tint\t\t\ti_acldefault;\n\t\t\t\t\t\t \"typelem, typrelid, typarray, \"\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);\n\ti_typisdefined = PQfnumber(res, \"typisdefined\");\n\t\ttyinfo[i].dobj.objType = DO_TYPE;", "partial_line": "AssignDumpId", "completion": "AssignDumpId(&tyinfo[i].dobj); <|endoftext|>"}
{"context": "\tif (RecoveryInProgress())\n\t\tereport(ERROR,\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\t\tattnum = 0;", "partial_line": "do_", "completion": "do_mcv = false; <|endoftext|>"}
{"context": "void\n{\n\tif (!filename || !(*filename))\n\t{\n\t\t\t\t   *p;", "partial_line": "fn = *fil", "completion": "fn = *filename; <|endoftext|>"}
{"context": "\t\t\t\t\tv_argnull0 = l_funcnull(b, v_fcinfo, 0);\n\t\t\t\t\t\t\t\t\t\t\t\t  l_sbool_const(1), \"\"),\n\t\t\t\t\tLLVMBuildStore(b, v_arg0, v_resvaluep);\n\t\t\t\t\tif (op->d.func.make_ro)\n\t\t\t\t\t\t\t\t   llvm_pg_var_func_type(\"MakeExpandedObjectReadOnlyInternal\"),", "partial_line": "v_params,", "completion": "v_params, lengthof(v_params), \"\"); <|endoftext|>"}
{"context": "static const symbol s_19_1[6] = { 0xCF, 0x88, 0xCE, 0xB1, 0xCE, 0xBB };\n{ 6, s_19_1, -1, 1, 0},\n{ 2, s_20_0, -1, 1, 0},\nstatic const symbol s_21_2[8] = { 0xCE, 0xB9, 0xCE, 0xB4, 0xCE, 0xB9, 0xCE, 0xBF };\n{", "partial_line": "{ 10", "completion": "{ 10, s_23_0, -1, 1, 0}, <|endoftext|>"}
{"context": "static void\n\t}\n\t\tflags |= O_RDONLY;\n\t\t\t\t errmsg(\"could not open file \\\"%s\\\": %m\", fname)));\n\t}", "partial_line": "errno = save_", "completion": "errno = save_errno; <|endoftext|>"}
{"context": "{\n\tint\t\t\tn = t->capno;\n\t\tif ((size_t) n < v->nmatch)\n\tfor (t2 = t->child; t2 != NULL; t2 = t2->sibling)\n\tassert(n > 0);", "partial_line": "MDEBUG((\"%d: setting %d = %ld-", "completion": "MDEBUG((\"%d: setting %d = %ld-%ld\\n\", sub->id, n, LOFF(begin), LOFF(end))); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\ninit_procedure_caches(void)\n\thash_ctl.keysize = sizeof(PLyProcedureKey);\n\t{\n\t\t\tif (use_cache)", "partial_line": "elog(ERROR, \"pr", "completion": "elog(ERROR, \"procedure name would overrun buffer\"); <|endoftext|>"}
{"context": "\tScanKeyInit(&key[0],\n\twhile (HeapTupleIsValid(depTup = systable_getnext(scan)))\n\t\tForm_pg_depend foundDep = (Form_pg_depend) GETSTRUCT(depTup);\n\t\tObjectAddress foundObject;\n\t\tfoundObject.classId = foundDep->classid;", "partial_line": "char\t\trelKind = get_rel_relkind(", "completion": "char\t\trelKind = get_rel_relkind(foundObject.objectId); <|endoftext|>"}
{"context": "\t\tdlist_node *node;\n\tswitch (status)\n\t\tcase MultiXactStatusForKeyShare:\nmxid_to_string(MultiXactId multi, int nmembers, MultiXactMember *members)\n\tstatic char *str = NULL;", "partial_line": "for (i =", "completion": "for (i = 1; i < nmembers; i++) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t available_rels2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t &j->rarg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t child_rels);\n\t\tRelids\t\tchild_rels;\n\t\t\t\t\tj->larg = *jtlink1;", "partial_line": "&child_", "completion": "&child_rels); <|endoftext|>"}
{"context": "\treturn -1;\n}\nreserveFromBuffer(StringInfo buffer, int len)\n{\ncopyToBuffer(StringInfo buffer, int offset, const void *data, int len)", "partial_line": "memcpy(b", "completion": "memcpy(buffer->data + offset, data, len); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   .nDeps = 1,\n\t\tte->dataLength = (BlockNumber) tbinfo->relpages;\n\t\tte->dataLength += (BlockNumber) tbinfo->toastpages;\n\t\tif (sizeof(te->dataLength) == 4 &&\n\t\t\t(tbinfo->relpages < 0 || tbinfo->toastpages < 0 ||", "partial_line": "refreshMatViewData(Archi", "completion": "refreshMatViewData(Archive *fout, const TableDataInfo *tdinfo) <|endoftext|>"}
{"context": "static void\n\t{\n\t\tDatum\t\tdatum;\n\t\tSWAPVAR(sv->spl_ldatum, sv->spl_rdatum, datum);\n\tif (sv->spl_rdatum_exists)", "partial_line": "&sv->spl_rdat", "completion": "&sv->spl_rdatum, &tmpBool); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t INSTR_TIME_GET_DOUBLE(context->base.instr.inlining_counter),\n\t\t\t\t\t\t\t INSTR_TIME_GET_DOUBLE(context->base.instr.emission_counter)),\n\t\t\t errhidestmt(true),\n\tif (llvm_session_initialized)\n\t\treturn;", "partial_line": "LLVMInitializeNativ", "completion": "LLVMInitializeNativeAsmParser(); <|endoftext|>"}
{"context": "static inline int ckpt_buforder_comparator(const CkptSortItem *a, const CkptSortItem *b);\n{\n\tPrefetchBufferResult result = {InvalidBuffer, false};\n\tLWLockRelease(newPartitionLock);\n\t\tif ((io_direct_flags & IO_DIRECT_DATA) == 0 &&", "partial_line": "result.recent", "completion": "result.recent_buffer = buf_id + 1; <|endoftext|>"}
{"context": "    {\"static\", 10},\nstatic int\nstatic int\n\t    c = lookahead();\n\t\tin_comment = false;", "partial_line": "char", "completion": "char        qchar; <|endoftext|>"}
{"context": "SyncRepGetOldestSyncRecPtr(XLogRecPtr *writePtr,\n\t\t\t\t\t\t   SyncRepStandbyData *sync_standbys,\n}\nstatic void\n\t\tapply_array[i] = sync_standbys[i].apply;", "partial_line": "pfree(apply", "completion": "pfree(apply_array); <|endoftext|>"}
{"context": "\treturn numeric_sum(fcinfo);\n#endif\n\tinit_var(&result);\n\tPG_RETURN_DATUM(DirectFunctionCall2(numeric_div, sumd, countd));\n\tDatum\t\tN_datum;", "partial_line": "PG_RETURN_N", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "\tCSTATE_RETRY,\n\tCSTATE_ABORTED,\n\tint\t\t\tuse_file;\t\t\n\tint\t\t\tcommand;\t\t\n\tint\t\t\ttid;\t\t\t", "partial_line": "pg_pr", "completion": "pg_prng_state ts_sample_rs; <|endoftext|>"}
{"context": "\t\t\t\tj->larg = *jtlink2;\n\t\t\tif ((j = convert_EXISTS_sublink_to_join(root, sublink, false,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t available_rels2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t &j->rarg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t child_rels);", "partial_line": "Relid", "completion": "Relids\t\tchild_rels; <|endoftext|>"}
{"context": "\t\t\tMySerializableXact->flags |= SXACT_FLAG_READ_ONLY;\n\t{\n\t\tMySerializableXact->flags |= SXACT_FLAG_ROLLED_BACK;\n\t}\n\t\t\tReleaseRWConflict(possibleUnsafeConflict);", "partial_line": "FirstNormalSerComm", "completion": "FirstNormalSerCommitSeqNo; <|endoftext|>"}
{"context": "#include \"access/nbtree.h\"\n#include \"catalog/catalog.h\"\n#include \"miscadmin.h\"\n#include \"nodes/makefuncs.h\"\n#include \"parser/parser.h\"", "partial_line": "List *src_c", "completion": "List *src_colnames, <|endoftext|>"}
{"context": "\t}\n\t\treturn -1;\n\tif (obja->classId > objb->classId)\nObjectAddresses *\n\tObjectAddresses *addrs;", "partial_line": "item = add", "completion": "item = addrs->refs + addrs->numrefs; <|endoftext|>"}
{"context": "\t\t\t\tif (tmp > 255)\n\t\t\t\t\t isdigit((unsigned char) ch));\n\t{\n\t\tch = *src++;\t\t\t\n\t\t{", "partial_line": "assert(n >= 0 &&", "completion": "assert(n >= 0 && n <= 9); <|endoftext|>"}
{"context": "} BoolAggState;\nmakeBoolAggState(FunctionCallInfo fcinfo)\n\tif (state == NULL)\n\tif (!PG_ARGISNULL(1))\n\t\t\tstate->aggtrue--;", "partial_line": "state = PG_ARGISNULL(0) ? NULL : (BoolAggState *)", "completion": "state = PG_ARGISNULL(0) ? NULL : (BoolAggState *) PG_GETARG_POINTER(0); <|endoftext|>"}
{"context": "static void\n\t\tTTS_SHOULDFREE(srcslot) ||\ntts_buffer_heap_get_heap_tuple(TupleTableSlot *slot)\n\treturn bslot->base.tuple;\n\t\ttts_buffer_heap_materialize(slot);", "partial_line": "BufferHeapTupleTableSlot *bslot = (BufferHeapTu", "completion": "BufferHeapTupleTableSlot *bslot = (BufferHeapTupleTableSlot *) slot; <|endoftext|>"}
{"context": "\t\t\tsignal_pending = false;\n\t\tif (setitimer(ITIMER_REAL, &timeval, NULL) != 0)\n\t\t{\n\tSetLatch(MyLatch);\n\t\t\tTimestampTz now = GetCurrentTimestamp();", "partial_line": "this_t", "completion": "this_timeout->interval_in_ms); <|endoftext|>"}
{"context": "\telse\n\ti = typecnt++;\n{\n\tint\t\t\ti;\n\t{", "partial_line": "error(_(\"too many le", "completion": "error(_(\"too many leap seconds\")); <|endoftext|>"}
{"context": "\tamroutine = GetIndexAmRoutineByAmId(amoid, false);\n\tStrategyNumber result;\nDatum\namvalidate(PG_FUNCTION_ARGS)\n\tif (!HeapTupleIsValid(classtup))", "partial_line": "elog(ERROR, \"function amvalidate is no", "completion": "elog(ERROR, \"function amvalidate is not defined for index access method %u\", <|endoftext|>"}
{"context": "static TupleTableSlot *IndexOnlyNext(IndexOnlyScanState *node);\n\tdirection = ScanDirectionCombine(estate->es_direction,\n\t{\n\t\tscandesc = index_beginscan(node->ss.ss_currentRelation,\n\t\t\t\t\t\t\t\t   &node->ioss_Instrument,", "partial_line": "node->ioss_Sca", "completion": "node->ioss_ScanKeys, <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tcase T_CaseTestExpr:\n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tresult = NULL;\t\t", "partial_line": "parser_errposit", "completion": "parser_errposition(pstate, location))); <|endoftext|>"}
{"context": "\t\tPG_RETURN_NUMERIC(num2);\n\t\tPG_RETURN_NUMERIC(num1);\nDatum\n\tNumeric\t\tnum1 = PG_GETARG_NUMERIC(0);\n\tNumeric\t\tnum2 = PG_GETARG_NUMERIC(1);", "partial_line": "NumericV", "completion": "NumericVar\targ2; <|endoftext|>"}
{"context": "\t\t\t\t\tcase IS_TRUE:\n\t\t\t\t\t\tappendStringInfoString(buf, \" IS TRUE\");\n\t\t\t\t\tdefault:\n\t\t\t}\n\t\tcase T_CoerceToDomainValue:", "partial_line": "appendS", "completion": "appendStringInfoString(buf, \"DEFAULT\"); <|endoftext|>"}
{"context": "\tif (!fout->is_prepared[PREPQUERY_DUMPTABLEATTACH])\n\t\t\t\t\t  \"EXECUTE dumpTableAttach('%u')\",\n\t\t\t\t\t\t\t  .section = SECTION_PRE_DATA,\n\tchar\t   *foreign;\n\tif (!adinfo->separate)", "partial_line": "foreign = tbinfo->relkind == RELKIND_FOREIGN_TAB", "completion": "foreign = tbinfo->relkind == RELKIND_FOREIGN_TABLE ? \"FOREIGN \" : \"\"; <|endoftext|>"}
{"context": "\telse if (have_action[MERGE_WHEN_NOT_MATCHED_BY_SOURCE])\n\tjoinrte->joinmergedcols = 0;\n\tjoinrte->joinaliasvars = vars;\n\tjoinrte->join_using_alias = NULL;\n\tjoinrte->alias = NULL;", "partial_line": "joinrte->l", "completion": "joinrte->lateral = false; <|endoftext|>"}
{"context": "\t}\n\t\treturn SPI_ERROR_ARGUMENT;\n}\n{\n\tMemoryContext oldcxt;", "partial_line": "SPI_res", "completion": "SPI_result = SPI_ERROR_UNCONNECTED; <|endoftext|>"}
{"context": "\t\t\t\"sqlda1 '%s'\\n\\tsqlda2 '%s'\\n\\tsqlda3 '%s'\\n\",\n\tECPGdeallocate_desc(__LINE__, \"desc1\");\n#line 132 \"describe.pgc\"\n\tstrcpy(msg, \"allocate\");\n\tECPGt_descriptor, \"desc2\", 1L, 1L, 1L, ", "partial_line": "#line 1", "completion": "#line 147 \"describe.pgc\" <|endoftext|>"}
{"context": "\treturn result;\n\tArchiveFormat archiveFormat;\n\t\tarchiveFormat = archDirectory;\n\tint\t\t\ti;\n\t\t\t\t\t\t\t \"SELECT oid FROM pg_catalog.pg_namespace n\\n\");", "partial_line": "res = ExecuteSqlQ", "completion": "res = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK); <|endoftext|>"}
{"context": "\treturn construct_md_array(elems, NULL, 1, dims, lbs,\n}\n\tDatum\t   *elems = matchctx->elems;\n\tint\t\t\tlbs[1];\n\t\tif (indices)", "partial_line": "so, so < 0", "completion": "so, so < 0 ? eo : eo - 1); <|endoftext|>"}
{"context": "static void flush_manifest(manifest_writer *mwriter);\n\tsnprintf(mwriter->pathname, MAXPGPATH, \"%s/backup_manifest\", directory);\n\tmwriter->first_file = true;\n\tmwriter->still_checksumming = true;", "partial_line": "appendString", "completion": "appendStringInfo(&mwriter->buf, <|endoftext|>"}
{"context": "\t},\n};\n\t\t{\n\t\t\t\"Vacuum cost delay in milliseconds, for autovacuum\",\n\t\t},", "partial_line": "\"Number of tuple updates or deletes prio", "completion": "\"Number of tuple updates or deletes prior to vacuum as a fraction of reltuples\", <|endoftext|>"}
{"context": "static int r_residual_suffix(struct SN_env * z);\n};\n{ 2, s_1_1, 0, 1, 0},", "partial_line": "static c", "completion": "static const symbol s_2_0[2] = { 'i', 'c' }; <|endoftext|>"}
{"context": "\tconst char *home;\n\thome = getenv(\"HOME\");\n#else\n#endif\n\tchar\t   *end;", "partial_line": "long", "completion": "long\t\tnumval; <|endoftext|>"}
{"context": "{ 2, s_7_0, -1, 1, 0},\n{ 3, s_7_8, -1, 1, 0},\n{ 3, s_7_11, -1, 2, 0},\n{ 5, s_7_17, 16, 1, 0}\nstatic const symbol s_9_1[7] = { 'p', 'r', 'o', 'c', 'e', 'e', 'd' };", "partial_line": "{ 7, s_9_", "completion": "{ 7, s_9_0, -1, -1, 0}, <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tcoll = ((const CoerceToDomain *) expr)->resultcollid;\n\t\t\tbreak;\n\t\t\tcoll = exprCollation((Node *) ((const InferenceElem *) expr)->expr);\n\t\t\tbreak;", "partial_line": "case T", "completion": "case T_FuncExpr: <|endoftext|>"}
{"context": "\tif (span->size_class == DSA_SCLASS_SPAN_LARGE)\n\t{\n\tif (span->nallocatable == 1 && span->fclass == DSA_FULLNESS_CLASSES - 1)\ndsa_get_address(dsa_area *area, dsa_pointer dp)\n{", "partial_line": "check_for_freed", "completion": "check_for_freed_segments(area); <|endoftext|>"}
{"context": "\tif (edata->elevel)\n\tappendJSONKeyValue(&buf, \"message\", edata->message, true);\n\t\tappendJSONKeyValue(&buf, \"internal_query\", edata->internalquery,\n\tif (edata->internalpos > 0 && edata->internalquery != NULL)\n\tif (edata->context && !edata->hide_ctx)", "partial_line": "if (ed", "completion": "if (edata->funcname) <|endoftext|>"}
{"context": "\t}\n\toption->val = value_copy;\n{\n\t\tif (strcmp(option->keyword, keyword) == 0)\n\tPQconninfoOption *connOptions;", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "{\n\tfile->readOnly = true;\n\tint\t\t\ti;\n\tpfree(file);\n\tinstr_time\tio_time;", "partial_line": "if (file->curOffset >= MAX_P", "completion": "if (file->curOffset >= MAX_PHYSICAL_FILESIZE && <|endoftext|>"}
{"context": "\t\t}\n\t\tneww->expr = (Expr *) coerce_to_boolean(pstate,\n\t\twarg = (Node *) w->result;\n\tif (defresult == NULL)\n\t\tn->location = -1;", "partial_line": "errhint(\"You might be able to move the set-re", "completion": "errhint(\"You might be able to move the set-returning function into a LATERAL FROM item.\"), <|endoftext|>"}
{"context": "\t\t    if (*(buf_ptr + 1) == '\\n') {\n\t\t\tif (buf_ptr >= buf_end)\n\t    }\n\t    state->last_u_d = true;\n\t}", "partial_line": "sizeof(spe", "completion": "sizeof(specials[0]), <|endoftext|>"}
{"context": "int\t\t\twal_sender_timeout = 60 * 1000; \nstatic IncrementalBackupInfo *uploaded_manifest = NULL;\nstatic XLogRecPtr sentPtr = InvalidXLogRecPtr;\nstatic StringInfoData tmpbuf;\nstatic volatile sig_atomic_t got_STOPPING = false;", "partial_line": "} WalT", "completion": "} WalTimeSample; <|endoftext|>"}
{"context": "\t\t\t\t(es->verbose && ((Join *) plan)->inner_unique))\n\t\t\t\t\t\t\t\t\t((Join *) plan)->inner_unique,\n\t\tcase T_IndexOnlyScan:\n\t\t\tif (es->analyze)\n\t\t\tshow_indexsearches_info(planstate, es);", "partial_line": "show_tidbit", "completion": "show_tidbitmap_info((BitmapHeapScanState *) planstate, es); <|endoftext|>"}
{"context": "\t\t*objtype = FILTER_OBJECT_TYPE_INDEX;\n\t\t*objtype = FILTER_OBJECT_TYPE_TRIGGER;\n\tva_start(argp, fmt);\n\t\tpg_log_error(\"invalid format in filter read from standard input on line %d: %s\",\n\telse", "partial_line": "const char *ptr", "completion": "const char *ptr = *line; <|endoftext|>"}
{"context": "\t\tAssignDumpId(&opcinfo[i].dobj);\n{\n\tint\t\t\ti_tableoid;\n\tint\t\t\ti_opfname;\n\ti_opfname = PQfnumber(res, \"opfname\");", "partial_line": "opfinfo[i].dobj.catId.oid = atooid(PQgetval", "completion": "opfinfo[i].dobj.catId.oid = atooid(PQgetvalue(res, i, i_oid)); <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#ifdef WIN32", "partial_line": "#in", "completion": "#include \"win32.h\" <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#endif", "partial_line": "pvsnprintf(char *buf, size_t len", "completion": "pvsnprintf(char *buf, size_t len, const char *fmt, va_list args) <|endoftext|>"}
{"context": "static const symbol s_0_3[3] = { 'n', 'i', 'z' };\nstatic const symbol s_0_5[3] = { 'n', 'u', 'z' };\nstatic const symbol s_0_8[4] = { 'm', 0xC3, 0xBC, 'z' };\n{\n{ 4, s_0_8, -1, -1, 0},", "partial_line": "{ 4,", "completion": "{ 4, s_0_9, -1, -1, 0} <|endoftext|>"}
{"context": "\t\tint\t\t\tn = resultRelInfo->ri_TrigDesc->numtriggers;\n\t{\n\telse\n\tresultRelInfo->ri_MergeActions[MERGE_WHEN_MATCHED] = NIL;\n\tresultRelInfo->ri_ChildToRootMap = NULL;", "partial_line": "rInfo = lf", "completion": "rInfo = lfirst(l); <|endoftext|>"}
{"context": "pg_pread(int fd, void *buf, size_t size, off_t offset)\n{\n\tsize = Min(size, 1024 * 1024 * 1024);\n\t\tif (GetLastError() == ERROR_HANDLE_EOF)", "partial_line": "retu", "completion": "return result; <|endoftext|>"}
{"context": "\t}\n\twhile (isspace((unsigned char) *endptr))\n\t\tendptr++;\n\t\tif ((flags & GUC_UNIT) == 0)\n\t\t\treturn false;\t\t", "partial_line": "endptr, (flag", "completion": "endptr, (flags & GUC_UNIT), <|endoftext|>"}
{"context": "\ttable_close(pg_shseclabel, RowExclusiveLock);\n\t{\n\t{\n\t\tnkeys = 2;\n\tprovider->provider_name = pstrdup(provider_name);", "partial_line": "Memory", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "}\n\tTransformInfo *transforminfo;\n\tint\t\t\ti_tableoid;\n\tint\t\t\ti_trftosql;\n\tquery = createPQExpBuffer();", "partial_line": "\"trftype, trflang, trffro", "completion": "\"trftype, trflang, trffromsql::oid, trftosql::oid \" <|endoftext|>"}
{"context": "\trbt_begin_iterate(tree, LeftRightWalk, &iter);\n\trbt_begin_iterate(tree, LeftRightWalk, &iter);\n\t{\n\t\tlastKey = node->key;\n\t\telog(ERROR, \"left-right walk missed some elements\");", "partial_line": "IntRBTre", "completion": "IntRBTreeNode *node; <|endoftext|>"}
{"context": "\treln->smgr_targblock = InvalidBlockNumber;\n\told_blocks[nforks] = smgrnblocks(reln, MAIN_FORKNUM);\n\tfsm = smgrexists(RelationGetSmgr(rel), FSM_FORKNUM);\n\t\tblocks[nforks] = FreeSpaceMapPrepareTruncateRel(rel, nblocks);\n\t\tif (BlockNumberIsValid(blocks[nforks]))", "partial_line": "Assert((MyProc->delayChkptFlags &", "completion": "Assert((MyProc->delayChkptFlags & (DELAY_CHKPT_START | DELAY_CHKPT_COMPLETE)) == 0); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tbuf = next_buf;\n\t}\n\t\tPage\t\tpage;\n\t\tpage = BufferGetPage(bucket_buf);", "partial_line": "XLogRegist", "completion": "XLogRegisterBuffer(0, bucket_buf, REGBUF_STANDARD); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  TRIGGER_TYPE_BEFORE,\n\t\t\t\t\t ItemPointer tupleid,\n\t\t\t\t\t TupleTableSlot *newslot,\n\t\t\t\t\t TM_Result *tmresult,\n\tTupleTableSlot *oldslot = ExecGetTriggerOldSlot(estate, relinfo);", "partial_line": "tmresult, t", "completion": "tmresult, tmfd)) <|endoftext|>"}
{"context": "static const symbol s_7_35[3] = { 'i', 't', 'i' };\nstatic const symbol s_7_37[6] = { 'i', 'r', 'e', 's', 't', 'i' };\nstatic const symbol s_7_41[3] = { 'i', 'v', 'i' };\nstatic const symbol s_7_42[4] = { 'i', 's', 'c', 'o' };\nstatic const symbol s_7_48[5] = { 'e', 'v', 'a', 'm', 'o' };", "partial_line": "static const symbo", "completion": "static const symbol s_7_62[5] = { 'i', 'v', 'a', 'n', 'o' }; <|endoftext|>"}
{"context": "\t\tcteroot = cteroot->parent_root;\n\tif (best_path->param_info)\n\tAssert(rel->fdwroutine != NULL);\n\tif (scan_relid > 0)\n\t\t\t\t\t\t\t\t\t\t\t\ttlist, scan_clauses,", "partial_line": "scan_pl", "completion": "scan_plan->fdw_recheck_quals = (List *) <|endoftext|>"}
{"context": "static void\n\tAssert(!GinPageIsData(page));\n\tAssert(GinPageIsLeaf(page));\n\tXLogRegisterBuffer(0, buffer, REGBUF_FORCE_IMAGE | REGBUF_STANDARD);\n\tbool\t\tisRoot;", "partial_line": "Buf", "completion": "Buffer\t\tpBuffer; <|endoftext|>"}
{"context": "\t\t\tpqPutMsgEnd(conn) < 0)\n\tif (pqPipelineFlush(conn) < 0)\nsendFailed:\n\t\t\t\t\tconst char *stmtName,\n\t\t\t\t\tconst char *const *paramValues,", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\treturn \"PARAMETER\";\n\t\tcase OBJECT_PROCEDURE:\n\t\tcase OBJECT_ROUTINE:\n\t\t\treturn \"TYPE\";\n\t\tcase OBJECT_ACCESS_METHOD:", "partial_line": "case OBJEC", "completion": "case OBJECT_AMOP: <|endoftext|>"}
{"context": "\tAssert(state != NULL);\n\toldslot = econtext->ecxt_oldtuple;\n\t\t\t*isnull = state->resnull;\n\t\t\tCheckOpSlotCompatibility(op, scanslot);\n\t\t\tslot_getsomeattrs(oldslot, op->d.fetch.last_var);", "partial_line": "EEO_NEX", "completion": "EEO_NEXT(); <|endoftext|>"}
{"context": "\t\t\t max_buckets,\n\tbase->comparetup_tiebreak = comparetup_index_hash_tiebreak;\n\targ->index.heapRel = heapRel;\n\targ->low_mask = low_mask;\n\targ->max_buckets = max_buckets;", "partial_line": "sizeof(SortSuppor", "completion": "sizeof(SortSupportData)); <|endoftext|>"}
{"context": "\t\t}\n\t\t\t{\n\t\t\t\t\t\t\t\t  \"FROM pg_catalog.pg_publication p\\n\"\n\t\t\t\t\t\t\t\t  oid, oid, oid, oid);\n\t\t\t\t\t\t\t\t  \"FROM pg_catalog.pg_publication p\\n\"", "partial_line": "goto error_r", "completion": "goto error_return; <|endoftext|>"}
{"context": "\t\tcase '\\\\':\n\treturn 1;\nvoid\t\t_make_compiler_happy(void);\n\tp_isnotalnum(NULL);\n\tp_isprint(NULL);", "partial_line": "p_ispunc", "completion": "p_ispunct(NULL); <|endoftext|>"}
{"context": "\t\t\t\tFieldStore *fstore = (FieldStore *) node;\n\t\tcase T_RelabelType:\n\t\t\t\tif (WALK(acoerce->arg))\n\t\t\tbreak;\n\t\tcase T_CaseExpr:", "partial_line": "forea", "completion": "foreach(temp, caseexpr->args) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n}\n\t\tif (isCommit)\nvoid\n\t}", "partial_line": "char\t   *fu", "completion": "char\t   *function_name; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t*p = pg_toupper((unsigned char) *p);\n\t\t\t\telse\n\t\t\t\t\t*p = toupper_l((unsigned char) *p, loc);\n}", "partial_line": "int\t\t\twasal", "completion": "int\t\t\twasalnum = false; <|endoftext|>"}
{"context": "\t\t\tcase DEPENDENCY_EXTENSION:\n\t\t\t\t\t\tReleaseDeletionLock(object);\n\t\t\t\t\t}\n\t\t\t\t\tif (!OidIsValid(owningObject.classId) ||\n\t\t\t\t\t\t\t\t\t stack,", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\tshm_toc_estimate_keys(&pcxt->estimator, 1);\n\t{\n\t\tfdwroutine->InitializeDSMForeignScan(node, pcxt, coordinate);\n\t}\n\tFdwRoutine *fdwroutine = node->fdwroutine;", "partial_line": "if (fdwroutine->ReIni", "completion": "if (fdwroutine->ReInitializeDSMForeignScan) <|endoftext|>"}
{"context": "\tchar\t\tinfile[MAXPGPATH];\n\tsnprintf(infile, sizeof(infile), \"%s/sql/%s.sql\",\n\t\t\t\t inputdir, testname);", "partial_line": "dbli", "completion": "dblist->str, <|endoftext|>"}
{"context": "\tchar\t\ttypdelim;\n\tbool\t   *nulls;\n\t\t\t\tlBound[MAXDIM];\n\t}\n\t\t\tereturn(escontext, (Datum) 0,", "partial_line": "if (*", "completion": "if (*p != '{') <|endoftext|>"}
{"context": "\tXLogRecPtr\tupto_lsn;\n\tCheckLogicalDecodingRequirements();\n\t\tereport(ERROR,\n\telse if (ndim == 1)\n\t\tint\t\t\tnelems;", "partial_line": "deconstruct_array_builtin(a", "completion": "deconstruct_array_builtin(arr, TEXTOID, &datum_opts, NULL, &nelems); <|endoftext|>"}
{"context": "\t\t\tConf->Spell = (SPELL **) tmpalloc(Conf->mspell * sizeof(SPELL *));\n\t\t\t\t{\n\t\t\t}\n\t\t{\n\t\t\tif (isspace((unsigned char) *s))", "partial_line": "*StopM", "completion": "*StopMiddle; <|endoftext|>"}
{"context": "#line 17 \"func.pgc\"\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\n\tINSERT INTO Log VALUES(TG_NAME, TG_WHEN);\\\n#line 32 \"func.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"insert into My_Table values ( 1234 , 'Some random text' )\", ECPGt_EOIT, ECPGt_EORT);", "partial_line": "if (sqlca.sqlwarn[0] == 'W')", "completion": "if (sqlca.sqlwarn[0] == 'W') sqlprint(); <|endoftext|>"}
{"context": "#define DOMALLOC\t((struct smalldfa *)NULL)\t\n\tint\t\t\teflags;\t\t\t\n\tregmatch_t *pmatch;\nstatic struct sset *initialize(struct vars *v, struct dfa *d, chr *start);\n\tstruct vars var;", "partial_line": "si", "completion": "size_t\t\ti; <|endoftext|>"}
{"context": "\t\t\t\t\t   NameStr(slot->data.name)),\n\t\tstart_lsn = slot->data.confirmed_flush;\n\t\tstart_lsn = slot->data.confirmed_flush;\n\t\t\t\t\t\t\t\t start_lsn, InvalidTransactionId, false,\n\tMemoryContextSwitchTo(old_context);", "partial_line": "SpinLockA", "completion": "SpinLockAcquire(&slot->mutex); <|endoftext|>"}
{"context": "\tPG_CMD_PRINTF(\"COPY information_schema.sql_features \"\n\tPG_CMD_PUTS(\"CREATE DATABASE postgres OID = \" CppAsString2(PostgresDbOid)\n\tsize_t\t\tres;\n\tsetlocale(LC_TIME, locale);\n\t\treturn result;", "partial_line": "resu", "completion": "result = DATEORDER_YMD; <|endoftext|>"}
{"context": "\t\t}\n\t\tWdoc /= log((double) (cnt_length(txt) + 1));\n\t\tWdoc /= ((double) NExtent) / SumDist;\n\tTSVector\ttxt = PG_GETARG_TSVECTOR(1);\n\tres = calc_rank_cd(weights, txt, query, DEF_NORM_METHOD);", "partial_line": "PG_FREE_I", "completion": "PG_FREE_IF_COPY(txt, 1); <|endoftext|>"}
{"context": "#ifdef USE_LIBXML\nwellformed_xml(text *data, XmlOptionType xmloption_arg)\n\txmlDocPtr\tdoc;\n\t\txmlFreeDoc(doc);\nxml_is_well_formed(PG_FUNCTION_ARGS)", "partial_line": "text\t   *data = PG_GETARG", "completion": "text\t   *data = PG_GETARG_TEXT_PP(0); <|endoftext|>"}
{"context": "#line 137 \"declare.pgc\"\n\tECPGt_char_variable,(ECPGprepared_statement(\"con2\", \"stmt_4\", __LINE__)),(long)1,(long)1,(1)*sizeof(char), \n#line 139 \"declare.pgc\"\n\tECPGt_int,&(f1[i]),(long)1,(long)1,sizeof(int), \n        i++;", "partial_line": "{ ECPGdeallocate(__LINE_", "completion": "{ ECPGdeallocate(__LINE__, 0, \"con2\", \"stmt_4\"); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tpfree(ipnulls);\n\t\t\tif (execCurrentOf(tidexpr->cexpr, econtext,\n\t\t\t\tif (numTids >= numAllocTids)\nitemptr_comparator(const void *a, const void *b)", "partial_line": "slot = no", "completion": "slot = node->ss.ss_ScanTupleSlot; <|endoftext|>"}
{"context": "{ 8, s_2_138, 134, 108, 0},\n{ 6, s_2_140, 134, 114, 0},\n{ 5, s_2_152, 134, 99, 0},\n{ 6, s_2_153, 134, 102, 0},\n{ 3, s_2_155, -1, 116, 0},", "partial_line": "{ 6, s_2_1", "completion": "{ 6, s_2_162, 155, 127, 0}, <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\nDatum\n\tint16\t\targ = PG_GETARG_INT16(0);\nDatum\n\tPG_RETURN_INT16(arg);", "partial_line": "int16\t\targ2 = PG_GETARG", "completion": "int16\t\targ2 = PG_GETARG_INT16(1); <|endoftext|>"}
{"context": "\t{\n\t\t\t\tbreak;\n\t\t}\n\t\tECPGmake_struct_member(rm->name, type, &new);\n\t\t\t   *ne =", "partial_line": "ne->n", "completion": "ne->name = mm_strdup(name); <|endoftext|>"}
{"context": "typedef struct QueueBackendStatus\n} QueueBackendStatus;\n\tLISTEN_UNLISTEN,\n\tint\t\t\tnestingLevel;\t\n\tuint16\t\tpayload_len;\t", "partial_line": "char\t\tdata", "completion": "char\t\tdata[FLEXIBLE_ARRAY_MEMBER]; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t newname))\n\tCatalogTupleUpdate(conDesc, &tuple->t_self, tuple);\n\tInvokeObjectPostAlterHook(ConstraintRelationId, conId, 0);\nvoid\n\tScanKeyData key[2];", "partial_line": "Scan", "completion": "ScanKeyInit(&key[0], <|endoftext|>"}
{"context": "\t\tif (IsInParallelMode())\n\t\t{\n\t\t\tif (shared)\n\t\t}\n\t}", "partial_line": "for (i = 0; i <", "completion": "for (i = 0; i < map->num_mappings; i++) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\tif (recoveryApplyDelay(xlogreader))\n\t\t\t\tereport(FATAL,\n\t\t\t\tcase RECOVERY_TARGET_ACTION_SHUTDOWN:\n\t{", "partial_line": "if (ArchiveR", "completion": "if (ArchiveRecoveryRequested && <|endoftext|>"}
{"context": "\t\t\t\t\t\tabort();\t\n\t\t\t\tnwaiting = try_complete_steps(testspec, waiting, nwaiting,\n\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfprintf(stderr, \" %s\",\n\t\t\t}", "partial_line": "mustwait = try_com", "completion": "mustwait = try_complete_step(testspec, pstep, STEP_NONBLOCK); <|endoftext|>"}
{"context": "\t\t\t\tcase F_TIMESTAMP_TIMESTAMPTZ:\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t\texpr = linitial(f->args);\n\t\t\t\t\t  AlterTableCmd *cmd, LOCKMODE lockmode)\n\tForm_pg_attribute attTup,", "partial_line": "ObjectAd", "completion": "ObjectAddress address; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\tif (strstr(versionname, \"--\"))\n\t\t\t\t errmsg(\"invalid extension version name: \\\"%s\\\"\", versionname),", "partial_line": "static", "completion": "static bool <|endoftext|>"}
{"context": "\t\t\t\t\treturn true;\n\t\t\t\tnelems = list_length(((ArrayExpr *) arraynode)->elements);\n}\n\t{true, none, none, none, true, true},\t\n\t{true, none, none, none, none, none},\t", "partial_line": "OpEx", "completion": "OpExpr\t   *pred_opexpr, <|endoftext|>"}
{"context": "}\nget_dbname_oid_list_from_mfile(const char *dumpdirpath, SimpleOidStringList *dbname_oid_list)\n\tchar\t\tline[MAXPGPATH];\n\t\tdbname = line + strlen(db_oid_str) + 1;\n\t\tif (!OidIsValid(db_oid) || strlen(dbname) == 0)", "partial_line": "pg_fatal(\"invalid entry in \\\"%s\\\" at", "completion": "pg_fatal(\"invalid entry in \\\"%s\\\" at line : %d\", map_file_path, <|endoftext|>"}
{"context": "static const symbol s_10_8[6] = { 0xCE, 0xB1, 0xCE, 0xBF, 0xCF, 0x81 };\nstatic const symbol s_10_10[6] = { 0xCE, 0xB1, 0xCF, 0x87, 0xCF, 0x84 };\nstatic const symbol s_10_20[6] = { 0xCE, 0xBB, 0xCF, 0x85, 0xCE, 0xB3 };\nstatic const symbol s_10_21[6] = { 0xCE, 0xBC, 0xCE, 0xB5, 0xCE, 0xB3 };\nstatic const symbol s_10_26[6] = { 0xCE, 0xBA, 0xCE, 0xBB, 0xCE, 0xB5 };", "partial_line": "static const symbol s_10_27[12] = { 0xCE, 0xB5, 0xCF, 0x83, 0xCF, 0x89, 0xCE", "completion": "static const symbol s_10_27[12] = { 0xCE, 0xB5, 0xCF, 0x83, 0xCF, 0x89, 0xCE, 0xBA, 0xCE, 0xBB, 0xCE, 0xB5 }; <|endoftext|>"}
{"context": "\t\tp += 8;\n\t}\n\twhile (p < pend)\n\t\twhile (((uintptr_t) buf & 56) && len >= 8)\n\t\tconst char *limit = buf + len - 64;", "partial_line": "x0 = _mm512_xor", "completion": "x0 = _mm512_xor_si512(_mm512_castsi128_si512(_mm_cvtsi32_si128(crc0)), x0); <|endoftext|>"}
{"context": "\t\tpubsinfo[j].dobj.catId.tableoid =\n\t\tpubsinfo[j].dobj.namespace = nspinfo->dobj.namespace;\n\t\tpubsinfo[j].publication = pubinfo;\n\tDumpOptions *dopt = fout->dopt;\n\tint\t\t\ti_tableoid;", "partial_line": "if (fout->remoteVers", "completion": "if (fout->remoteVersion >= 150000) <|endoftext|>"}
{"context": "\t\t\tgrouping_targets = grouping_targets_contain_srfs = NIL;\n\t\troot->upper_targets[UPPERREL_ORDERED] = final_target;\n\t\troot->upper_targets[UPPERREL_PARTIAL_DISTINCT] = sort_input_target;\n\t\t\t\t\t\t\t\t\t\t\t  wflists,\n\t\t\tif (parse->hasTargetSRFs)", "partial_line": "sort_in", "completion": "sort_input_target); <|endoftext|>"}
{"context": "\tfloat4\t\targ1 = PG_GETARG_FLOAT4(0);\nDatum\n{\n}\nfloat4_cmp_internal(float4 a, float4 b)", "partial_line": "if (float4_gt(", "completion": "if (float4_gt(a, b)) <|endoftext|>"}
{"context": "\t\tcase RTE_RESULT:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   netlevelsup);\n\t\t\t\t\t{\n\t\t\t\t\t\tchar\t   *dummy_name = palloc(32);\n\t\t\t\t\t\t\t attnum);", "partial_line": "pop_child", "completion": "pop_child_plan(dpns, &save_dpns); <|endoftext|>"}
{"context": "\t\tprocstruct = (Form_pg_proc) GETSTRUCT(tuple);\n\t\tReleaseSysCache(tuple);\n\tvalues[Anum_pg_transform_trftype - 1] = ObjectIdGetDatum(typeid);\n\tadd_exact_object_address(&referenced, addrs);\nvoid", "partial_line": "HeapTuple\tla", "completion": "HeapTuple\tlanguageTuple; <|endoftext|>"}
{"context": "\t\t\t\tmsg = gettext_noop(\"transform for type %s language \\\"%s\\\" does not exist, skipping\");\n\t\t\t\tname = TypeNameToString(linitial_node(TypeName, castNode(List, object)));\n\t\tcase OBJECT_POLICY:\n\t\t\tmsg = gettext_noop(\"event trigger \\\"%s\\\" does not exist, skipping\");\n\t\t\tbreak;", "partial_line": "name = strV", "completion": "name = strVal(object); <|endoftext|>"}
{"context": "#include <sys/time.h>\n#include <valgrind/valgrind.h>\n#include \"access/parallel.h\"", "partial_line": "#inc", "completion": "#include \"libpq/libpq.h\" <|endoftext|>"}
{"context": "pgstat_drop_function(Oid proid)\n{\n\t\t\t\t\t\t\t  MyDatabaseId,\n\t\tAcceptInvalidationMessages();\n\t\tif (!SearchSysCacheExists1(PROCOID, ObjectIdGetDatum(fcinfo->flinfo->fn_oid)))", "partial_line": "pgstat_dro", "completion": "pgstat_drop_entry(PGSTAT_KIND_FUNCTION, MyDatabaseId, <|endoftext|>"}
{"context": "\tj = 0;\n\t\tNamespaceInfo *nspinfo;\n\t\tpubsinfo[j].dobj.catId.tableoid =\n\t\tpubsinfo[j].dobj.namespace = nspinfo->dobj.namespace;\n\t\tpubsinfo[j].publication = pubinfo;", "partial_line": "DumpOptions *dopt = f", "completion": "DumpOptions *dopt = fout->dopt; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\t\t\t\t  aggArgTypes,\n\t\t\t\t\t\t\t\t\t\t\t   aggArgTypes,\n\t\t{\n\t\t\t\t\t\t\t\t\t\t   &rettype);", "partial_line": "Assert(OidIsValid(r", "completion": "Assert(OidIsValid(rettype)); <|endoftext|>"}
{"context": "static void\n\tappendPQExpBuffer(qry, \"SET standard_conforming_strings = '%s';\\n\",\n\t\t\t\t\t  stdstrings);\n\t\t\t\t\t\t\t  .section = SECTION_PRE_DATA,\n\tdestroyPQExpBuffer(qry);", "partial_line": "res = ExecuteSqlQu", "completion": "res = ExecuteSqlQueryForSingleRow(AH, <|endoftext|>"}
{"context": "\t\t\tBitmapHeapScanInstrumentation *si = &planstate->sinstrument->sinstrument[n];\n\t\t\tif (es->workers_state)\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsi->lossy_pages, es);\n\t\t\t}", "partial_line": "PlanSta", "completion": "PlanState *planstate, ExplainState *es) <|endoftext|>"}
{"context": "\t\tif (conv_func)\n\t\t\tif (converted)\n\t\t\t}\n\t\t\t\t\t\t\t\t   (const char *) utf, len);\n\t\t   const pg_local_to_utf_combined *cmap, int cmapsize,", "partial_line": "if (!PG_V", "completion": "if (!PG_VALID_ENCODING(encoding)) <|endoftext|>"}
{"context": "\t\t\tbool\t\treplacesAtt[Natts_pg_attribute] = {0};\n\t\t\tmissingval = PointerGetDatum(construct_array(&missingval,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t targettype,\n\t\t\tnullsAtt[Anum_pg_attribute_attmissingval - 1] = false;\n\t\t\tnewTup = heap_modify_tuple(heapTup, RelationGetDescr(attrelation),", "partial_line": "if (list_length(typeN", "completion": "if (list_length(typeName->arrayBounds) > PG_INT16_MAX) <|endoftext|>"}
{"context": "\ttableinfo.checks = atoi(PQgetvalue(res, 0, 0));\n\ttableinfo.hasoids = strcmp(PQgetvalue(res, 0, 7), \"t\") == 0;\n\ttableinfo.ispartition = strcmp(PQgetvalue(res, 0, 8), \"t\") == 0;\n\ttableinfo.relpersistence = *(PQgetvalue(res, 0, 12));\n\t\t*(PQgetvalue(res, 0, 13)) : 'd';", "partial_line": "printfPQE", "completion": "printfPQExpBuffer(&buf, <|endoftext|>"}
{"context": "ObjectAddress\n\t{\n\t\t\t\terrorConflictingDefElem(defel, pstate);\n\t\t{\n\t\telse if (strcmp(defel->defname, \"cascade\") == 0)", "partial_line": "Objec", "completion": "ObjectAddresses *refobjs; <|endoftext|>"}
{"context": "\tint64\t\tminv;\t\t\t\n\tint64\t\tmaxv;\t\t\t\nstatic Oid\tg_last_builtin_oid; \nstatic int\tstrict_names = 0;\nstatic SimpleOidList schema_exclude_oids = {NULL, NULL};", "partial_line": "static Simpl", "completion": "static SimpleStringList table_exclude_patterns = {NULL, NULL}; <|endoftext|>"}
{"context": "\t\t\tif (conn->asyncStatus == PGASYNC_IDLE)\n\t\t\t\tconn->asyncStatus = PGASYNC_BUSY;\n}\nint\nPQsendQuery(PGconn *conn, const char *query)", "partial_line": "libpq_append_conn_error(conn, \"command string", "completion": "libpq_append_conn_error(conn, \"command string is a null pointer\"); <|endoftext|>"}
{"context": "\t\t*transform_source =\n\t\t\t\tvalues[i] = PointerGetDatum(PG_DETOAST_DATUM(values[i]));\n\t\t\tnbytes = att_addlength_datum(nbytes, typlen, values[i]);\n\t\t\tnbytes = att_align_nominal(nbytes, typalign);\n\t\t\tif (!AllocSizeIsValid(nbytes))", "partial_line": "dataoffset = ARR_OVERHEAD", "completion": "dataoffset = ARR_OVERHEAD_WITHNULLS(ndim, nitems); <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include <ctype.h>\n\t\tcase T_Integer:\n\t\tcase T_Boolean:", "partial_line": "do", "completion": "double <|endoftext|>"}
{"context": "\tif (event == EVT_Login)\n\t\t\tevent == EVT_SQLDrop ||\n\t\treturn NIL;\n\t\t}\n\ttrigdata->type = T_EventTriggerData;", "partial_line": "trigda", "completion": "trigdata->parsetree = parsetree; <|endoftext|>"}
{"context": "PG_MODULE_MAGIC_EXT(\nstatic int\teuc_kr2mic(const unsigned char *euc, unsigned char *p, int len, bool noError);\nstatic int\tmic2euc_kr(const unsigned char *mic, unsigned char *p, int len, bool noError);", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\tdecoded->record_origin = InvalidRepOriginId;\n\tdatatotal = 0;\n\t\t\tuint32\t\tmain_data_len;\n\t\t{\n\t\t{", "partial_line": "else if", "completion": "else if (block_id <= XLR_MAX_BLOCK_ID) <|endoftext|>"}
{"context": "\t}\n\t\t\talloc_var(&a1_var, tmp_len);\n\t\t\ta1_var.weight = blen - 1;\n\t\t\talloc_var(&a0_var, tmp_len);\n\t\t\t\t   tmp_len * sizeof(NumericDigit));", "partial_line": "strip_var", "completion": "strip_var(&a0_var); <|endoftext|>"}
{"context": "\t\t\t\t\trelmaxndistinct = mvndistinct;\n\t\t\t\t{\n\t\t\t\t\t\testinfo->flags |= SELFLAG_USED_DEFAULT;\n\t\t\tdouble\t\tclamp = rel->tuples;\n\t} while (varinfos != NIL);", "partial_line": "return hash", "completion": "return hashclauses; <|endoftext|>"}
{"context": "\t\t\t\ttmp_zero_s,\n\tchar\t   *cp;\n\t\terrno = EINVAL;\n\t\t*cp = '\\0';\n\telse", "partial_line": "if", "completion": "if (b != 0) <|endoftext|>"}
{"context": "\t_becomeUser(AH, ropt->superuser);\n_enableTriggersIfNecessary(ArchiveHandle *AH, TocEntry *te)\n\tRestoreOptions *ropt = AH->public.ropt;\nis_load_via_partition_root(TocEntry *te)\n\t\tstrncmp(te->defn, \"-- load via partition root \", 27) == 0)", "partial_line": "destr", "completion": "destroyPQExpBuffer(copyStmt); <|endoftext|>"}
{"context": "\t\t\t\t\tanum++;\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tvaltype = UNKNOWNOID;\n\t\t\t\t\t\t\t\t\t\t\t\t  value,", "partial_line": "&", "completion": "&isnull, <|endoftext|>"}
{"context": "\t\txlogrecovery_redo(xlogreader, *replayTLI);\n\tif (info == XLOG_OVERWRITE_CONTRECORD)\n\t\tmemcpy(&xlrec, XLogRecGetData(record), sizeof(xl_overwrite_contrecord));\n\t\t\t\t(errmsg(\"successfully skipped missing contrecord at %X/%X, overwritten at %s\",\n\t\telse", "partial_line": "contin", "completion": "continue; <|endoftext|>"}
{"context": "{\n\tchar\t\tbuffer[256];\n\t\tdefault:\n\t\t\tbreak;\n\tret = getnameinfo(addr, len, buffer, sizeof(buffer), NULL, 0,", "partial_line": "printf(\"", "completion": "printf(\"%s\", buffer); <|endoftext|>"}
{"context": "\tF_PG_NODE_TREE_IN, F_PG_NODE_TREE_OUT},\n\tOid\t\t\tam_oid;\n};\nstatic Datum values[MAXATTR];\t\n\tOid\t\t\til_heap;", "partial_line": "struc", "completion": "struct _IndexList *il_next; <|endoftext|>"}
{"context": "\t{\n\t\t\tlineno = PyObject_GetAttrString(tb, \"tb_lineno\");\n\t\t\tif (name == NULL)\n\t\tPG_CATCH();\n\t\t\tPy_XDECREF(name);", "partial_line": "long\t\tplain_l", "completion": "long\t\tplain_lineno; <|endoftext|>"}
{"context": "{\n\t\t\t\tAssert(!found);\n\t}\n\t\t\t\t\t dsa_area *area, int max_levels)\n\t\tmemcxt_info[curr_id].name = dsa_allocate(area, namelen + 1);", "partial_line": "idlen = pg_mbcliplen", "completion": "idlen = pg_mbcliplen(ident, idlen, <|endoftext|>"}
{"context": "}\n\tsnapshot->xmin = builder->xmin;\n\tsnapshot->xmax = builder->xmax;\n\tsnapshot->xip =\n\t\t(TransactionId *) ((char *) snapshot + sizeof(SnapshotData));", "partial_line": "SnapBuildInitialSnapshot(SnapB", "completion": "SnapBuildInitialSnapshot(SnapBuild *builder) <|endoftext|>"}
{"context": "{ 8, s_2_128, 127, 3, 0},\n{ 5, s_2_145, 144, 1, 0},\n{ 9, s_2_160, 159, 1, 0},\n{ 2, s_2_176, -1, 1, 0},\n{ 3, s_2_183, -1, 1, 0},", "partial_line": "{ 5, s_2_192", "completion": "{ 5, s_2_192, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\tapage->words[wordnum] = neww;\n\t\t\tAssert(!bpage->ischunk);\n\t\t\tfor (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)\n\t\t\t\tif (apage->words[wordnum] != 0)\n\t\t\t}", "partial_line": "iterator", "completion": "iterator->tbm = tbm; <|endoftext|>"}
{"context": "\t{\n\t{\n\t\t\tbuf = malloc(buflen);\n\t\t\t{\n\t\t\t\tcontinue;", "partial_line": "re", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t\tforeach(arg, pertrans->aggref->args)\n\t\t\tif (strictnulls)\n\t\t\tExprEvalPushStep(state, &scratch);\n\t\t\t\tExecBuildAggTransCall(state, aggstate, &scratch, trans_fcinfo,\n\t\t\t\t\t\t\t\t\t  pertrans, transno, setno, setoff, false,", "partial_line": "int\t\t\tset", "completion": "int\t\t\tsetoff; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t\txmltype    *data;\n\t\t\t\tAssert(list_length(xexpr->args) == 3);\n\t\t\t\tAssert(!argnull[2]);\t\n\t\t\t\tstandalone = DatumGetInt32(argvalue[2]);", "partial_line": "st", "completion": "standalone)); <|endoftext|>"}
{"context": "void\nExecEvalParamExtern(ExprState *state, ExprEvalStep *op, ExprContext *econtext)\n\tParamListInfo paramInfo = econtext->ecxt_param_list_info;\n\t\t{\n\t\t\t\t\t\t\t\tformat_type_be(op->d.param.paramtype))));", "partial_line": "*op->resnull = prm", "completion": "*op->resnull = prm->isnull; <|endoftext|>"}
{"context": "\tRelation\tpg_class;\n\tForm_pg_class rd_rel;\n\tAssert(CheckRelationTableSpaceMove(rel, newTableSpaceId));\n\ttable_close(pg_class, RowExclusiveLock);\n}", "partial_line": "if (classfo", "completion": "if (classform->reloftype && !recursing) <|endoftext|>"}
{"context": "\t\t\t\tread_rate = (double) BLCKSZ * total_blks_read /\n\t\t\t\t\t(1024 * 1024) / (secs_dur + usecs_dur / 1000000.0);\n\t\t\t\t\t\t\t total_blks_dirtied);\n\tinitprog_val[1] = rel_pages;\n\t\t\t\t\t\t\t\t\t\tMAIN_FORKNUM,", "partial_line": "Buffer", "completion": "Buffer\t\tbuf; <|endoftext|>"}
{"context": "\t\tpartitionRel = table_open(partitionId, NoLock);\nEnableDisableTrigger(Relation rel, const char *tgname, Oid tgparent,\n\tRelation\ttgrel;\n\t\t\t\t\t\t\t\tNULL, nkeys, keys);\n\t{", "partial_line": "if (skip_sy", "completion": "if (skip_system) <|endoftext|>"}
{"context": "static PartitionScheme find_partition_scheme(PlannerInfo *root,\n\t\t\t\t\t\t\t\t\t\t\tRelOptInfo *rel);\n\tRelation\trelation;\n\t{\n\tif (!RelationIsPermanent(relation) && RecoveryInProgress())", "partial_line": "for (int i = 0; i < rela", "completion": "for (int i = 0; i < relation->rd_att->natts; i++) <|endoftext|>"}
{"context": "\tif (float8_lt(d, dist))\n\tif (float8_lt(d, dist))\n{\n\tLSEG\t   *lseg = PG_GETARG_LSEG_P(0);\n\tPG_RETURN_BOOL(box_contain_point(box, pt));", "partial_line": "box_co", "completion": "box_contain_pt(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\tstate->routine.segment_close(state);\n}\n\tsegcxt->ws_segsize = segsize;\n\tif (waldir)\n\t\tsnprintf(segcxt->ws_dir, MAXPGPATH, \"%s\", waldir);", "partial_line": "state->record", "completion": "state->record = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  CppAsString2(CONSTRAINT_UNIQUE) \",\"\n\t\t\t\t\t\t\t  CppAsString2(CONSTRAINT_EXCLUSION) \"))\\n\"\n\t\t\t\t\t\t\t\tappendPQExpBufferStr(&buf, \" UNIQUE,\");\n\t\t\t\t\t\tusingpos = strstr(indexdef, \" USING \");\n\t\t\t\t\t\tappendPQExpBufferStr(&buf, \" CLUSTER\");", "partial_line": "appendPQExpBufferStr(&buf,", "completion": "appendPQExpBufferStr(&buf, \" INVALID\"); <|endoftext|>"}
{"context": "\t\t\t}\n}\n\tguc_free(*newval);\nbool\n\tif (!clean)", "partial_line": "pfree(", "completion": "pfree(clean); <|endoftext|>"}
{"context": "\t\t\t\t\t\t  index->rd_indcollation[0],\n\t\t\t\t\t\t\t\t   leafDatums,\n\t\t}\n\t\t\t\t\t\t\t\t   leafDatums,\n\t\t\tleafDatums[spgKeyColumn] = (Datum) 0;", "partial_line": "totalLeafSizes > SP", "completion": "totalLeafSizes > SPGIST_PAGE_CAPACITY, <|endoftext|>"}
{"context": "\t\t}\nIssueACLPerBlob(ArchiveHandle *AH, TocEntry *te)\n\tTocEntry   *blobte = getTocEntryByDumpId(AH, te->dependencies[0]);\n\tbool\t\tinquotes;\n\t\tif (inquotes)", "partial_line": "if (strncmp(en,", "completion": "if (strncmp(en, \"LARGE OBJECT \", 13) == 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t&context->tmfd, &updateCxt->lockmode,\n\t\t\t\t\t\t\t\t\t\t\t   NULL, NIL,\n\tExecARUpdateTriggers(context->estate, resultRelInfo,\n\t\t\t\t\t\t\t\t   ResultRelInfo *destPartInfo,\n\t\t\t\t\t\t\t\t   TupleTableSlot *oldslot,", "partial_line": "ListCell", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\t\t\t\"diff %s %s %s\\n\",\n\t\tfclose(difffile);\n\tint\t\t\ttests_left;\n\t\tDWORD\t\texit_status;\n\t\t\t\tstatuses[i] = (int) exit_status;", "partial_line": "if (", "completion": "if (names) <|endoftext|>"}
{"context": "\t\tfor (i = 0; i < readfds->fd_count; i++)\n\t\t\tnumevents++;\n\t\t\t\tsockets[numevents] = writefds->fd_array[i];\n\t\tif (WSAEventSelect(sockets[i], events[i], flags) != 0)\n\tr = WaitForMultipleObjectsEx(numevents + 1, events, FALSE, timeoutval, TRUE);", "partial_line": "ZeroMemory(&resEvents", "completion": "ZeroMemory(&resEvents, sizeof(resEvents)); <|endoftext|>"}
{"context": "\tif (empty)\n\t\tint32\t\tbnd = DatumGetInt32(lower.val);\n\t\t\t\t\t errmsg(\"integer out of range\")));\n\tif (empty)\n\t\tint64\t\tbnd = DatumGetInt64(lower.val);", "partial_line": "ereturn(escontext", "completion": "ereturn(escontext, (Datum) 0, <|endoftext|>"}
{"context": "\t\tParam\t   *arg = (Param *) linitial(req->args);\n\tDatum\t\tnewelem;\n\tint\t\t\tlb0;\n\teah = fetch_array_arg_replace_nulls(fcinfo, 1);\n\t{", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t}\n\t\twhile (text_position_next(&state))\n\t\t\tnumfields++;\n\t\tif (fldnum == -1)\n\t\t\ttext_position_cleanup(&state);", "partial_line": "if (fldnu", "completion": "if (fldnum <= 0) <|endoftext|>"}
{"context": "};\nstatic HTAB *SMgrRelationHash = NULL;\nvoid\nsmgrinit(void)\n{", "partial_line": "HOLD_", "completion": "HOLD_INTERRUPTS(); <|endoftext|>"}
{"context": "{\n\tsink->elapsed_min_unit = USECS_PER_SEC / THROTTLING_FREQUENCY;\n\treturn &sink->base;\n\tbbsink_forward_begin_backup(sink);\n\tbbsink_forward_archive_contents(sink, len);", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\tpid_t\t\tpid;\n} SlotSyncCtxStruct;\n#define MIN_SLOTSYNC_WORKER_NAPTIME_MS  200\n#define SLOTSYNC_RESTART_INTERVAL_SEC 10\n\tReplicationSlotInvalidationCause invalidated;", "partial_line": "st", "completion": "static bool <|endoftext|>"}
{"context": "\t\t0x63DF676F, 0xCFB07657, 0x3B00451F, 0x976F5427,\n\t\t0x426A454A, 0xEE055472, 0x1AB5673A, 0xB6DA7602,\n\t\t0xE70BEDFB, 0x4B64FCC3, 0xBFD4CF8B, 0x13BBDEB3,\n\t\t0xC6BECFDE, 0x6AD1DEE6, 0x9E61EDAE, 0x320EFC96,\n\t\t0x8FDF7312, 0x23B0622A, 0xD7005162, 0x7B6F405A,", "partial_line": "0xBBB5BC6", "completion": "0xBBB5BC66, 0x17DAAD5E, 0xE36A9E16, 0x4F058F2E, <|endoftext|>"}
{"context": "#include \"optimizer/pathnode.h\"\n\tif (var->varattno == SelfItemPointerAttributeNumber &&\n\t\treturn true;\n\tif (!is_opclause(rinfo->clause))\n\t\treturn true;", "partial_line": "if (!IsBinaryTidClause(r", "completion": "if (!IsBinaryTidClause(rinfo, rel)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t pg_locale_t locale);\n#endif\n#ifdef TRUST_STRXFRM\n#else\n#ifdef WIN32", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\tbreak;\n\t\t\tcase EEOP_RETURNINGEXPR:\n\t\t\t\t\t\t\t\t\t\t\t\"v.state.flags\");\n\t\t\t\t\t\t\t\t\t\t\t\t  LLVMBuildAnd(b, v_flags,", "partial_line": "v_nullfla", "completion": "v_nullflag, \"\"), <|endoftext|>"}
{"context": "        z->bra = z->c;\n    }\n        if (z->c - 2 <= z->lb || z->p[z->c - 1] != 97) { z->lb = mlimit3; return 0; }\n            break;\n    {   int ret = slice_del(z);", "partial_line": "{   int m2 = z->l", "completion": "{   int m2 = z->l - z->c; (void)m2; <|endoftext|>"}
{"context": "static const symbol s_2_1267[8] = { 0xC5, 0xA1, 'n', 'j', 'i', 'j', 'e', 'm' };\nstatic const symbol s_2_1270[7] = { 0xC5, 0xA1, 'k', 'i', 'j', 'e', 'm' };\nstatic const symbol s_2_1278[8] = { 'e', 'v', 'i', 't', 'i', 'j', 'e', 'm' };\nstatic const symbol s_2_1280[6] = { 'o', 't', 'i', 'j', 'e', 'm' };\nstatic const symbol s_2_1288[5] = { 'e', 'n', 'j', 'e', 'm' };", "partial_line": "static cons", "completion": "static const symbol s_2_1319[4] = { 'e', 't', 'e', 'm' }; <|endoftext|>"}
{"context": "#include \"utils/rel.h\"\n\tList\t   *inhRelations;\t\n\tIndexStmt  *pkey;\t\t\t\n\tPartitionBoundSpec *partbound;\t\n\tList\t   *grants;\t\t\t", "partial_line": "TypeName *ofTyp", "completion": "TypeName *ofTypename); <|endoftext|>"}
{"context": "\t\t\t + MAXALIGN(basesz));\n\t}\n\treturn slot;\n}\n\tforeach(lc, tupleTable)", "partial_line": "ret", "completion": "return slot; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\t*r++ = '1';\n\t\t\t\t\t*r++ = '(';\n\t\t\t\t}\n\t\t{", "partial_line": "if (pchar ==", "completion": "if (pchar == '\\\\') <|endoftext|>"}
{"context": "\t\tqry->distinctClause = NIL;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  false);\n\tqry->limitCount = transformLimitClause(pstate, stmt->limitCount,\n\t\t\t\t\t\t\t   (LockingClause *) lfirst(l), false);\n\tassign_query_collations(pstate, qry);", "partial_line": "Assert(stmt->windowClau", "completion": "Assert(stmt->windowClause == NIL); <|endoftext|>"}
{"context": "\t\t\tvalues[i] = pghost;\n\t\tif (pgport)\n\t\t\tkeywords[i] = \"dbname\";\n\t\tvalues[i] = progname;\n\t\ti++;", "partial_line": "if (PQstatu", "completion": "if (PQstatus(conn) == CONNECTION_BAD && <|endoftext|>"}
{"context": "#include \"common/hashfn.h\"\n\tint\t\t\tlength;\t\t\t\n\t\t\t\t\t\t\t\t   AnalyzeAttrFetchFunc fetchfunc,", "partial_line": "void", "completion": "void *arg); <|endoftext|>"}
{"context": "\tcount = 1;\n\tECPGt_varchar,&(curname4),(long)50,(long)1,sizeof(struct varchar_1), \n#line 238 \"cursor.pgc\"\n\t{ ECPGdo(__LINE__, 0, 1, \"test2\", 0, ECPGst_normal, \"drop table t1\", ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "if (sqlca.sqlcode < 0)", "completion": "if (sqlca.sqlcode < 0) exit (1);} <|endoftext|>"}
{"context": "\t\t\t\t\t\twinstate->groupheadpos < winstate->frametailpos)\n\t\t\t\t\t{\n\t\tdefault:\n\t\tgoto out_of_frame;\n\t\t*isout = false;", "partial_line": "if (s", "completion": "if (set_mark) <|endoftext|>"}
{"context": "\t\tfor (i = 0; i < (Size) sizeof(Datum); i++)\n\t{\n\t\t\t\tappendStringInfo(str, \"%d \", (int) (s[i]));\n\tWRITE_BOOL_FIELD(constbyval);\n\tfor (i = 0; i < node->nkeys; i++)", "partial_line": "while (node->ec_", "completion": "while (node->ec_merged) <|endoftext|>"}
{"context": "\ttree->root = tree->end;\n\t\t\t\t\t n->children[1]->height);\n\tavl_node   *current = *node;\n\t\tint\t\t\tdir = (1 - b) / 2;\n\t\tnew_node->children[0] = new_node->children[1] = tree->end;", "partial_line": "tree->cou", "completion": "tree->count++; <|endoftext|>"}
{"context": "\t\tObjectAddress addr;\n\t\t\t\t\tchar\t   *type;\n\t\t\t\t\tif (cmd->type == SCT_Simple)\n\t\t\t\t\t\taddr = cmd->d.createopc.address;\n\t\t\t\t\t\t\t\t\t addr.classId, addr.objectId, addr.objectSubId);", "partial_line": "values[i++] = BoolGetDatum(", "completion": "values[i++] = BoolGetDatum(cmd->in_extension); <|endoftext|>"}
{"context": "\t\t}\n\t\t\tif (!omittype[h])\n\t\tif (thischarcnt != 0)\n\t\t\t}\n\t\tif (utcnt != 0)", "partial_line": "fprint", "completion": "fprintf(fp, \"\\n%s\\n\", string); <|endoftext|>"}
{"context": "\t\tExpr\t   *e = (Expr *) lfirst(lc);\n\t\t}\n\t\t}\n\t{\n\t\t\tereport(ERROR,", "partial_line": "scratch->d.sbsref.subs", "completion": "scratch->d.sbsref.subscriptfunc = methods.sbs_fetch_old; <|endoftext|>"}
{"context": "\t\t\tstrcpy(convert, \"Infinity\");\n\t\t}\n\t\tif (vallen >= 6 &&\n\t\t\tdopr_outchmulti('0', zeropadlen, target);\nfail:", "partial_line": "int\t\t\tv", "completion": "int\t\t\tvallen; <|endoftext|>"}
{"context": "\tLOCALPREDICATELOCK *lock;\n\t\tcase PREDLOCKTAG_RELATION:\n\t\tcase PREDLOCKTAG_PAGE:\n\t\t\treturn true;\n\t\t\treturn true;", "partial_line": "target", "completion": "targettag = parenttag; <|endoftext|>"}
{"context": "\t\t\t{\nstatic TupleTableSlot *\n\tAggStatePerHash perhash;\n\t\tentry = ScanTupleHashTable(hashtable, &perhash->hashiter);\n\t\t\t{", "partial_line": "perhash = &aggstate->perhash[ag", "completion": "perhash = &aggstate->perhash[aggstate->current_set]; <|endoftext|>"}
{"context": "\t\telse\n\t\t\t\t type_suffix,\n\t\t\t\t extent_suffix);\n\t\tunlink(new_file);\n\t\t}", "partial_line": "case TRANSFER_MOD", "completion": "case TRANSFER_MODE_CLONE: <|endoftext|>"}
{"context": "\t\t\tnew_record_repl[Anum_pg_type_typdefault - 1] = true;\n\t}\n\tGenerateTypeDependencies(newtuple,\n\t\t\t\t\t\t\t false, \n\treturn address;", "partial_line": "typename = makeTypeNameFromNam", "completion": "typename = makeTypeNameFromNameList(names); <|endoftext|>"}
{"context": "Datum\narray_to_text_null(PG_FUNCTION_ARGS)\n}\n\tint\t\t\ti;\n\tif (nitems == 0)", "partial_line": "&my_extra->typlen,", "completion": "&my_extra->typlen, &my_extra->typbyval, <|endoftext|>"}
{"context": "static const struct locale_map locale_map_argument[] = {\n};\nmap_locale(const struct locale_map *map, const char *locale)\n\t\tconst char *needle_end = map[i].locale_name_end;\n\t\t\telse", "partial_line": "memcpy(&ali", "completion": "memcpy(&aliasbuf[matchpos], replacement, replacementlen); <|endoftext|>"}
{"context": "\t\t\tmatview_maintenance_depth = old_depth;\n\tAtEOXact_GUC(false, save_nestlevel);\n\treturn address;\n\tQueryDesc  *queryDesc;\n\tQuery\t   *copied_query;", "partial_line": "uint64\t\tproc", "completion": "uint64\t\tprocessed; <|endoftext|>"}
{"context": "\t\t\tfor (i = 0; i < tuples; i++)\n\t\t\t\t\tappendPQExpBuffer(&buf, \" WHERE %s\",\n\t\t\t\t\t\t\t  \"  c.convalidated\\n\"\n\t\t\t\t\t\t\t  \"    (a.attrelid = c.conrelid AND a.attnum = c.conkey[1])\\n\"\n\t\t\t\tgoto error_return;", "partial_line": "PQgetvalue(result", "completion": "PQgetvalue(result, i, 1), <|endoftext|>"}
{"context": "\t}\n}\n\t\tAssert(!JsonContainerIsScalar(jbc));\n\t\telse\n\t\t\telog(ERROR, \"invalid jsonb container type: 0x%08x\", jbc->header);", "partial_line": "return t", "completion": "return type; <|endoftext|>"}
{"context": "{\n\tXLogRecPtr\tend_lsn;\n} backup_file_entry;\n#define SH_SCOPE                static inline\nstatic void manifest_process_file(JsonManifestParseContext *context,", "partial_line": "static void manifest_process_wal_range(Json", "completion": "static void manifest_process_wal_range(JsonManifestParseContext *context, <|endoftext|>"}
{"context": "static void _EndLOs(ArchiveHandle *AH, TocEntry *te);\n\tFILE\t   *tarFH;\ntypedef struct\nstatic void _LoadLOs(ArchiveHandle *AH, TocEntry *te);\n#endif", "partial_line": "static int\ttarPrintf(TAR_MEMBER *", "completion": "static int\ttarPrintf(TAR_MEMBER *th, const char *fmt,...) pg_attribute_printf(2, 3); <|endoftext|>"}
{"context": "static inline void\n{\n\t\tconn->allowed_sasl_mechs[i] = NULL;\n\tfor (int i = 0; i < lengthof(conn->allowed_sasl_mechs); i++)\n\t\t\t\tgoto oom_error;", "partial_line": "Asser", "completion": "Assert(i == conn->nconnhost); <|endoftext|>"}
{"context": "\t\t}\n#endif\n\t\tlink = GetFreeListLink(chunk);\n#ifdef MEMORY_CONTEXT_CHECKING\n#endif", "partial_line": "VALGRIND_MAKE_MEM", "completion": "VALGRIND_MAKE_MEM_DEFINED(link, sizeof(AllocFreeListLink)); <|endoftext|>"}
{"context": "\t\t\t{\n\tif (unlikely(*ptr != '\\0'))\n\tif (neg)\n\t{\n\t\treturn result;", "partial_line": "return (i", "completion": "return (int16) tmp; <|endoftext|>"}
{"context": "\tp = str;\n\tif (xmlStrncmp(p, (xmlChar *) \"<?xml\", 5) != 0)\n\t}\n\t\tp += 8;\n\t\t\tp = q + 1;", "partial_line": "save_p", "completion": "save_p = p; <|endoftext|>"}
{"context": "\t\t\tif (parent_wco->cascaded)\n\t\t\tif (viewquery->jointree->quals != NULL)\n\t\t\t\tif (!parsetree->hasSubLinks &&\n\t\t\t}\n\t\t}", "partial_line": "st", "completion": "static List * <|endoftext|>"}
{"context": "\t\tpfree(arr);\t\t\t\t\n\t\t\t\t\t\t\t\t\tAnum_pg_constraint_confkey);\n\t\tARR_HASNULL(arr) ||\n\t{\n\t\t\t\t\t\t\t\t\t\tAnum_pg_constraint_conpfeqop);", "partial_line": "ARR_HASNULL(a", "completion": "ARR_HASNULL(arr) || <|endoftext|>"}
{"context": "\t\t{\"no-publications\", no_argument, &dopt.no_publications, 1},\n\t\t}\n\tInitDumpOptions(&dopt);\n\t\t{\n\t\t\t\tdata_only = true;", "partial_line": "filename =", "completion": "filename = pg_strdup(optarg); <|endoftext|>"}
{"context": "static const symbol s_11_253[6] = { 't', 0xC3, 0xB5, 'i', 't', 'e' };\nstatic const symbol s_11_261[8] = { 'v', 'i', 'i', 'k', 's', 'i', 'm', 'e' };\nstatic const symbol s_11_265[7] = { 'v', 'i', 'i', 'm', 'a', 't', 'a' };\nstatic const symbol s_11_271[5] = { 'v', 'i', 'i', 't', 'e' };\nstatic const struct among a_11[290] =", "partial_line": "{ 4, s_11_6", "completion": "{ 4, s_11_6, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t AT_PASS_OLD_CONSTR,\n\t\t\t\t\telse\n\t\t\t\tcmd->def = (Node *) stmt;\n\t}\n\t\t\t\t\t   makeString(pstrdup(conname)));", "partial_line": "if (irel->rd_rel->relkind !", "completion": "if (irel->rd_rel->relkind != RELKIND_PARTITIONED_INDEX) <|endoftext|>"}
{"context": "\t\tPROGRESS_VACUUM_INDEXES_PROCESSED,\n\t\tparallel_vacuum_bulkdel_all_indexes(vacrel->pvs, old_live_tuples,\nstatic void\nlazy_vacuum_heap_rel(LVRelState *vacrel)\n\tTidStoreIter *iter;", "partial_line": "Assert(vacrel->num_in", "completion": "Assert(vacrel->num_index_scans > 0); <|endoftext|>"}
{"context": "\tint\t\t\tparse_rc;\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),\n\t\t\t\t\t\t\t\t parse_rc)));\n\tdebug_query_string = cmd_string;", "partial_line": "(errmsg(\"received replication", "completion": "(errmsg(\"received replication command: %s\", cmd_string))); <|endoftext|>"}
{"context": "static DumpableObject *createBoundaryObjects(void);\nstatic void getTableData(DumpOptions *dopt, TableInfo *tblinfo, int numTables, char relkind);\nstatic const char *getFormattedTypeName(Archive *fout, Oid oid, OidOptions opts);\nstatic void dumpEncoding(Archive *AH);\n\t\t\t\t\t\t\t\t\t\t\t\t\t PQExpBuffer upgrade_buffer,", "partial_line": "bool force_ar", "completion": "bool force_array_type, <|endoftext|>"}
{"context": "\tchar\t\tbuf[NAMEDATALEN * 2];\n\treturn pstrdup(buf);\n\tList\t   *newcons;\n\tObjectAddress address = InvalidObjectAddress;\n\t\t\t\t\t\t\t\t\t\tis_readd,\t", "partial_line": "foreach(lcon,", "completion": "foreach(lcon, newcons) <|endoftext|>"}
{"context": "\tconst unsigned char *ptr = (const unsigned char *) name;\n\t\tif (IS_HIGHBIT_SET(*ptr) ||", "partial_line": "ptr->next", "completion": "ptr->next = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\tbest_path->transitionSpace,\n\tList\t   *tlist;\n\troot->minmax_aggs = best_path->mmaggregates;\n\tOid\t\t   *partOperators;\n\tint\t\t\tordNumCols;", "partial_line": "CP_LAB", "completion": "CP_LABEL_TLIST | CP_SMALL_TLIST); <|endoftext|>"}
{"context": "\t\t\t0xA8B4,\t\t\t\t\n\t\t\t0xA8B8,\t\t\t\t\n\t\t\t0xAA33,\t\t\t\t\n\t\t\telse if (*StopMiddle < c)\n\t\t}", "partial_line": "{p_isEOF, 0, A_NEXT,", "completion": "{p_isEOF, 0, A_NEXT, TPS_Null, 0, NULL}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  Oid *collationOids,\n\t\t\t\t\t\t\t  Datum *opclassOptions,\n\t\t\t\t\t\t\t const List *colnames, const List *exclusionOpNames,\n\t\t\t\t\t\t\t bool primary, bool isconstraint);\nstatic void ReindexMultipleInternal(const ReindexStmt *stmt, const List *relids,", "partial_line": "static bool", "completion": "static bool ReindexRelationConcurrently(const ReindexStmt *stmt, <|endoftext|>"}
{"context": "\tForm_pg_language languageStruct;\n\tif (language_item)\n\t\tlanguage = strVal(language_item->arg);\n\t\tlanguage = \"plpgsql\";\n\tif (!HeapTupleIsValid(languageTuple))", "partial_line": "aclresult = obje", "completion": "aclresult = object_aclcheck(LanguageRelationId, codeblock->langOid, GetUserId(), <|endoftext|>"}
{"context": "\t\t\treturn \"Enclosing_Mark\";\n\t\tcase PG_U_PARAGRAPH_SEPARATOR:\n\t\t\treturn \"Close_Punctuation\";\n\t\tcase PG_U_OTHER_PUNCTUATION:\n\t\t\treturn \"Currency_Symbol\";", "partial_line": "case PG_U_", "completion": "case PG_U_MODIFIER_SYMBOL: <|endoftext|>"}
{"context": "    z->ket = z->c;\n    if (z->c - 1 <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((33554576 >> (z->p[z->c - 1] & 0x1f)) & 1)) return 0;\n                    z->c -= ret;\n            }\n            {   int ret = slice_del(z);", "partial_line": "{   in", "completion": "{   int m_test2 = z->l - z->c; <|endoftext|>"}
{"context": "\t\t\tNode\t   *source = (Node *) linitial(expr->args);\n\t\t}\n\tPG_RETURN_POINTER(ret);\n{\n\tint32\t\tlen = PG_GETARG_INT32(1);", "partial_line": "if (", "completion": "if (!isExplicit) <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t   ((change->data.tuplecid.cmax != InvalidCommandId) &&\n\t}\n\tmemcpy(snap->xip, orig_snap->xip, sizeof(TransactionId) * snap->xcnt);\n\treturn snap;", "partial_line": "ReorderBufferFreeSnap(Reord", "completion": "ReorderBufferFreeSnap(ReorderBuffer *rb, Snapshot snap) <|endoftext|>"}
{"context": "\tDateADT\t\tdateVal2 = PG_GETARG_DATEADT(1);\n\tPG_RETURN_BOOL(dateVal1 == dateVal2);\n}\n{\n{", "partial_line": "DateADT", "completion": "DateADT\t\tdateVal2 = PG_GETARG_DATEADT(1); <|endoftext|>"}
{"context": "#include \"utils/rel.h\"\n#define RelCacheMsgs 1\n\tSharedInvalidationMessage *msgs;\t\n\tint\t\t\tmaxmsgs;\t\t\n\tdo { \\", "partial_line": "} Tr", "completion": "} TransInvalidationInfo; <|endoftext|>"}
{"context": "\t\t}\n\t}\nFreePageManagerDumpSpans(FreePageManager *fpm, FreePageSpanLeader *span,\n\t\tif (span->npages != expected_pages)\n}", "partial_line": "Size\t\tvi", "completion": "Size\t\tvictim_page = 0; <|endoftext|>"}
{"context": "\t\tsegment_index = area->control->segment_bins[bin];\n\t\t\t\trebin_segment(area, segment_map);\n\t\t\tif (contiguous_pages >= npages)\n\t\t\tsegment_index = next_segment_index;\n}", "partial_line": "dsa_segm", "completion": "dsa_segment_index new_index; <|endoftext|>"}
{"context": "\t\t\t\t\tmul = 1;\n\t\t\telse if (*cp == '_')\n\t\t\t}\n\t\t}\n\t\t\t\t\tadd_var(dest, &tmp_var, dest);", "partial_line": "if (*", "completion": "if (*cp < '0' || *cp > '1') <|endoftext|>"}
{"context": "\t\t!ItemIdIsNormal(oldlp))\n\t\tLockBuffer(oldbuf, BUFFER_LOCK_UNLOCK);\n\t\t{\n\t\t\t\tbrin_initialize_empty_new_buffer(idxrel, newbuf);\n\t\treturn true;", "partial_line": "LockBuffer(oldbuf, BUFFER_L", "completion": "LockBuffer(oldbuf, BUFFER_LOCK_UNLOCK); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase SVFOP_CURRENT_USER:\n\t\tcase SVFOP_USER:\n\t\t\t*op->resnull = fcinfo->isnull;\n\t\tcase SVFOP_CURRENT_SCHEMA:", "partial_line": "errmsg(\"WHERE CURRENT OF is not supported for", "completion": "errmsg(\"WHERE CURRENT OF is not supported for this table type\"))); <|endoftext|>"}
{"context": "#include \"optimizer/cost.h\"\n#include \"optimizer/placeholder.h\"\n\tint\t\t\tsublevels_up;\n\tphv->phrels = phrels;", "partial_line": "phv->phnullin", "completion": "phv->phnullingrels = NULL; <|endoftext|>"}
{"context": "}\n            if (!find_among_b(z, a_1, 7)) { z->lb = mlimit1; return 0; }\n            z->ket = z->c;\n                z->c = ret;\n        mlimit1 = z->lb; z->lb = z->I[1];", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\telse\n\t{\n#if defined(HAVE_COPY_FILE_RANGE)\n\tlast_backup_label = check_backup_label_files(n_backups, argv + optind);\n\t\t\t\t\t controlpath,", "partial_line": "manifests[i]->system_i", "completion": "manifests[i]->system_identifier, <|endoftext|>"}
{"context": "\t\t\tbool\t\ton_off;\n\t\t\t\treuse_previous = on_off ? TRI_YES : TRI_NO;\n\t\t\t}\n\t}\n\t\tignore_slash_options(scan_state);", "partial_line": "static backsl", "completion": "static backslashResult <|endoftext|>"}
{"context": "\t\t\tmutations++;\n\t\t}\n#elif defined(PX)\n\t\tox1(root, momma->string, daddy->string, kid->string, pool->string_length, city_table);\n\t\tspread_chromo(root, kid, pool);", "partial_line": "elog(LOG, \"[GEQO] fail", "completion": "elog(LOG, \"[GEQO] failures: %d, average: %d\", <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tRowExclusiveLock);\n\telse\n\t\tnulls[Anum_pg_largeobject_metadata_lomacl - 1] = true;\n\ttuple = systable_getnext(scan);\n\t\tereport(ERROR,", "partial_line": "errmsg(\"large object %u does", "completion": "errmsg(\"large object %u does not exist\", loid))); <|endoftext|>"}
{"context": "\t{\n\t\t\tgot_SIGUSR2 = false;\n\t\t\t\tautovac_recalculate_workers_for_balance();\n\t\t\t\tAutoVacuumShmem->av_signal[AutoVacForkFailed] = false;\n\t\t\t\tcontinue;", "partial_line": "LWLockAcquir", "completion": "LWLockAcquire(AutovacuumLock, LW_SHARED); <|endoftext|>"}
{"context": "\t\tgettimeofday(&saved_timeval, NULL);\n\t\t\t\tpg_localtime(&stamp_time, log_timezone));\n\treturn formatted_log_time;\n{\n{", "partial_line": "if (!is_log_level_output(edata->elevel, log_m", "completion": "if (!is_log_level_output(edata->elevel, log_min_error_statement)) <|endoftext|>"}
{"context": "\t\t},\n\t},\n\t\t\tgettext_noop(\"Logs details of pre-authentication connection handshake.\"),\n\t\tNULL, NULL, NULL\n\t\t{\"log_disconnections\", PGC_SU_BACKEND, LOGGING_WHAT,", "partial_line": "gettext_noop(\"Logs end of a session", "completion": "gettext_noop(\"Logs end of a session, including duration.\"), <|endoftext|>"}
{"context": "\tOid\t\t\tdatumtype;\n\tAssert(dno >= 0 && dno < estate->ndatums);\n\t\t\t\t\t\tformat_type_be(datumtype),\nstatic void\n\t\t\t  PLpgSQL_variable *target,", "partial_line": "if (rec->dat", "completion": "if (rec->datatype && <|endoftext|>"}
{"context": "\taddress = index_constraint_create(rel,\n\t\t\t\t\t\t\t\t\t  indexInfo,\n\treturn address;\n\tswitch (newConstraint->contype)\n\t\t\t\t\t\t\t\t\t\t newConstraint->conname))", "partial_line": "newConst", "completion": "newConstraint, <|endoftext|>"}
{"context": "_bt_allocbuf(Relation rel, Relation heaprel)\n\tPage\t\tpage;\n\t\tblkno = GetFreeIndexPage(rel);\n\t\t\t{\n\tbuf = ExtendBufferedRel(BMR_REL(rel), MAIN_FORKNUM, NULL, EB_LOCK_FIRST);", "partial_line": "VALGRIND_M", "completion": "VALGRIND_MAKE_MEM_DEFINED(BufferGetPage(buf), BLCKSZ); <|endoftext|>"}
{"context": "\t\t\t\tunicode = hexval_n(instr + offset, 4);\n\t\t\t\tif (pair_first)\n\t\t\t\t{\n\t\t\t\t\tappendStringInfoString(&str, cbuf);\n\t\t\t\tif (pair_first)", "partial_line": "errcode(ERRCODE_INVALID_PARA", "completion": "errcode(ERRCODE_INVALID_PARAMETER_VALUE), <|endoftext|>"}
{"context": "\tJsonParseErrorType result;\n\tint\t\t\tret = 0;\n\tif (optind < argc)\n\t}\n\tinitStringInfo(&json);", "partial_line": "pg_fatal(\"error st", "completion": "pg_fatal(\"error statting input: %m\"); <|endoftext|>"}
{"context": "#include \"catalog/pg_statistic_ext_data.h\"\n#include \"statistics/extended_stats_internal.h\"\n#define SizeOfItem(natts) \\\n#define MinSizeOfItems(nitems)\t\\", "partial_line": "int", "completion": "int\t\t   *combinations; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  NULL, nkeys, key);\n\t\tForm_pg_shdepend shdepForm = (Form_pg_shdepend) GETSTRUCT(tup);\n\tsystable_endscan(scan);\n{\n}", "partial_line": "swi", "completion": "switch (classId) <|endoftext|>"}
{"context": "WalRcvForceReply(void)\n}\n\t\t\treturn \"starting\";\n\tXLogRecPtr\tflushed_lsn;\n\tTimestampTz latest_end_time;", "partial_line": "char\t\tco", "completion": "char\t\tconninfo[MAXCONNINFO]; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   extra,\n\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t trialsortkeys);\n\t\t\t}\n\t\t\tcheapest_startup_inner = innerpath;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (tle->resjunk)\n\t\tassignedCols = bms_add_member(assignedCols, targetattnum);\n\t\tif (attr->attisdropped)\n\t\tbreak;\n\t\tif (attr->attisdropped)", "partial_line": "(errcode(ERRCODE_DATATYPE", "completion": "(errcode(ERRCODE_DATATYPE_MISMATCH), <|endoftext|>"}
{"context": "\t\t\t\tif (strcmp(key, \"service\") == 0)\n\t\t\t\t\tresult = 3;\n\t\t\t\t\t\tif (options[i].val == NULL)\n\t\t\t\t}\n\t\t}", "partial_line": "e", "completion": "exit: <|endoftext|>"}
{"context": "\t\t\t\tconf->gen.extra = conf->reset_extra = extra;\n\t\t\t\tbreak;\n\t\t\t{\n\t\t\t\t\t\t conf->gen.name, newval ? newval : \"\");\n\t\t\t\t\t\t conf->gen.name, newval);", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "\tcheck_with_filler(intset, filler_min + 1,\n\t\t\t\t\t  value, filler_min, filler_max);\n\tcheck_with_filler(intset, value,\n\t\t\t\t\t  value, filler_min, filler_max);\n\t{", "partial_line": "mem_usage = intset_memory_us", "completion": "mem_usage = intset_memory_usage(intset); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  &xmax_lock_old_tuple, &infomask_lock_old_tuple,\n\t\toldtup.t_data->t_infomask2 &= ~HEAP_KEYS_UPDATED;\n\t\toldtup.t_data->t_infomask2 |= infomask2_lock_old_tuple;\n\t\t\tvisibilitymap_clear(relation, block, vmbuffer,\n\t\t\txl_heap_lock xlrec;", "partial_line": "XLogBeg", "completion": "XLogBeginInsert(); <|endoftext|>"}
{"context": "\t\tgettext_noop(\"foreign table \\\"%s\\\" does not exist, skipping\"),\n\t\tgettext_noop(\"\\\"%s\\\" is not a foreign table\"),\n\t\tgettext_noop(\"\\\"%s\\\" is not an index\"),\n};\ntypedef struct ForeignTruncateInfo", "partial_line": "typedef enum addFkC", "completion": "typedef enum addFkConstraintSides <|endoftext|>"}
{"context": "\t\t\t\t\tif (view_tle != NULL && !view_tle->resjunk && IsA(view_tle->expr, Var))\n\t{\n\t\tforeach(lc, parsetree->onConflict->onConflictSet)\n\t\told_exclRelIndex = parsetree->onConflict->exclRelIndex;\n\t\t\tBuildOnConflictExcludedTargetlist(base_rel, new_exclRelIndex);", "partial_line": "ChangeVarNodes", "completion": "ChangeVarNodes((Node *) tmp_tlist, new_rt_index, <|endoftext|>"}
{"context": "\t\t\t\t  \"could not initialize ACL: error code %lu\", GetLastError());\n\t\tgoto cleanup;\n\t}\n\tif (!AddAccessAllowedAceEx(pacl, ACL_REVISION, OBJECT_INHERIT_ACE, GENERIC_ALL, pTokenUser->User.Sid))\n\t\t\t\t  \"could not set token information: error code %lu\",", "partial_line": "goto c", "completion": "goto cleanup; <|endoftext|>"}
{"context": "        i++;\n#line 85 \"declare.pgc\"\nif (sqlca.sqlcode < 0) sqlprint();}\n#line 87 \"declare.pgc\"\n#line 98 \"declare.pgc\"", "partial_line": "#line", "completion": "#line 99 \"declare.pgc\" <|endoftext|>"}
{"context": "\t{\n\t\t\tcase DTK_MICROSEC:\n\t\t\t\tbreak;\n\t\t\tcase DTK_DAY:\n\t\t\t\tintresult = tm->tm_mday;", "partial_line": "case DT", "completion": "case DTK_WEEK: <|endoftext|>"}
{"context": "\t\t\tfound_escape = false;\n\t\t\t\tif (*p1 == '\\\\')\n\t\t\t\t\t\tereport(ERROR,\n\t\t\t\t}\n\t\t\t\tsubpatlen = b - buf;", "partial_line": "subpatlen = p", "completion": "subpatlen = p1 - p; <|endoftext|>"}
{"context": "\tmy_extra = (RecordIOData *) fcinfo->flinfo->fn_extra;\n\t\tmy_extra = (RecordIOData *) fcinfo->flinfo->fn_extra;\n\twhile (*ptr && isspace((unsigned char) *ptr))\n\tinitStringInfo(&buf);\n\t\tchar\t   *column_data;", "partial_line": "if", "completion": "if (*ptr == ',') <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\tbreak;\n\t\t\t\tv->now++;\n\t\t\t\tRETV(PLAIN, c);\n\t\t\tbreak;", "partial_line": "if (c == CHR(':'", "completion": "if (c == CHR(':') && NEXT1(']')) <|endoftext|>"}
{"context": "\t\taccum2 = svadd_u64_x(pred, accum2, svcnt_u64_x(pred, vec));\n\t\t\t\tmask64 = ~UINT64CONST(0) / 0xFF * mask;\n\t\tvec = svand_n_u64_x(pred, svld1_u64(pred, (const uint64 *) buf), mask64);\n\t}\n\treturn popcnt;", "partial_line": "#e", "completion": "#else <|endoftext|>"}
{"context": "\tcurrent_varno = rt_index;\n\trt_length = list_length(parsetree->rtable);\n\tChangeVarNodes((Node *) sub_action,\n\t\t\t\t\t\tcheckExprHasSubLink((Node *) rte->tablesample);\n\t\t\t\tcase RTE_FUNCTION:", "partial_line": "sub_act", "completion": "sub_action->hasSubLinks = <|endoftext|>"}
{"context": "static const symbol s_1_43[5] = { 'a', 'n', 'a', 't', 'a' };\nstatic const symbol s_1_73[5] = { 'v', 'o', 'j', 'c', 'i' };\nstatic const symbol s_1_86[4] = { 'i', 't', 'a', 'k' };\nstatic const symbol s_1_87[4] = { 'o', 't', 'a', 'k' };\nstatic const symbol s_1_97[4] = { 'a', 'l', 'a', 'n' };", "partial_line": "static const symbol s_1_111[4] = { 'a',", "completion": "static const symbol s_1_111[4] = { 'a', 't', 'a', 'n' }; <|endoftext|>"}
{"context": "{\n\tSize\t\tsz;\n\t\t\t\t(errcode(ERRCODE_DATA_CORRUPTED),\n\t\t\t\t((char *) ondisk) + SnapBuildOnDiskNotChecksummedSize,\n\tif (ondisk->builder.catchange.xcnt > 0)", "partial_line": "if (Close", "completion": "if (CloseTransientFile(fd) != 0) <|endoftext|>"}
{"context": "\t\tfprintf(debug, \"\\n\\n\\n========= RAW ==========\\n\");\n\tcleanst(v);\nfreev(struct vars *v,\n\t\t   struct nfa *nfa)\n\t}", "partial_line": "if (", "completion": "if (a != NULL) <|endoftext|>"}
{"context": "\tif (f->wwmethod->compression_algorithm == PG_COMPRESSION_GZIP)\n\t\t{\n\t\t\tremaining -= chunk;\n\t\t\terrno = 0;\n\t\t\tf->wwmethod->lasterrno = errno ? errno : ENOSPC;", "partial_line": "stati", "completion": "static int <|endoftext|>"}
{"context": "\t\t\t\t\t\tset_extra_field(&conf->gen, &conf->reset_extra,\n\t\t\t\t\t\t\t\t\t\tnewextra);\n\t\t\t\t\t\tconf->gen.reset_srole = srole;\n\t\t\t\t\t{\n\t\t\t\t\t\t\tstack->srole = srole;", "partial_line": "#un", "completion": "#undef newval <|endoftext|>"}
{"context": "static const char *\n{\n\tpqsignal(SIGTERM, signal_remove_temp);\n\t{\n\t\t\t{", "partial_line": "re", "completion": "return true; <|endoftext|>"}
{"context": "\t\t!heap_attisnull(procedureTuple, Anum_pg_proc_proconfig, NULL) ||\n\t}\n\t\tcase SQLlanguageId:\n\t\t\t*fn = NULL;\t\t\t\n}", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "}\n            z->c = c2;\n        z->c = c1;\nstatic int r_remove_tense_suffix(struct SN_env * z) {\n    z->I[1] = 0;", "partial_line": "{   in", "completion": "{   int m_test2 = z->l - z->c; <|endoftext|>"}
{"context": "}\n\t\t\tcase 'c':\n\t\t\t\t\t{\n\t\t\t\tuserDoption = pstrdup(optarg);\n\t\t\t\tbootstrap_data_checksum_version = PG_DATA_CHECKSUM_VERSION;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tresult->dataoffset = 0;\t\t\n}\n\t\twhile (*oidString && isspace((unsigned char) *oidString))\n\t\t{\n\t\tif (SOFT_ERROR_OCCURRED(escontext))", "partial_line": "nnums", "completion": "nnums = oidArray->dim1; <|endoftext|>"}
{"context": "\tStringInfoData buf;\n\t{\n\t\t\toldcxt = MemoryContextSwitchTo(tokenize_context);\n\t\t\t\t\t  int elevel,\n\t\t{", "partial_line": "return", "completion": "return tokens; <|endoftext|>"}
{"context": "#define IsSet(val, bits)  (((val) & (bits)) == (bits))\n\tbool\t\tconnect;\n\tchar\t\tstreaming;\nstatic List *merge_publications(List *oldpublist, List *newpublist, bool addpub, const char *subname);\nstatic void CheckAlterSubOption(Subscription *sub, const char *option,", "partial_line": "if (IsSet(support", "completion": "if (IsSet(supported_opts, SUBOPT_CONNECT) && <|endoftext|>"}
{"context": "\t}\n\t\tcase RELKIND_PARTITIONED_TABLE:\n\t\t\tbreak;\n\tstmt->tableElts =\n\t\t\t\t\t\tstmt->partbound != NULL,", "partial_line": "cook", "completion": "cooked->attnum = attnum; <|endoftext|>"}
{"context": "\t\t\tctequery = linitial_node(Query, newstuff);\n\t\t\tif (!(ctequery->commandType == CMD_SELECT ||\n\t\t\t\t\t\t errmsg(\"DO INSTEAD NOTIFY rules are not supported for data-modifying statements in WITH\")));\n\t\t\tereport(ERROR,\n\t\tint\t\t\tresult_relation;", "partial_line": "List\t   *product_", "completion": "List\t   *product_queries; <|endoftext|>"}
{"context": "\t\t\t\tCharGetDatum(relkind));\n\tDefElem    *dnspnames = NULL;\n\tconst char *errormsg;\n\tif (dnspnames)\n\tif (drolespecs)", "partial_line": "d", "completion": "default: <|endoftext|>"}
{"context": "\tPG_RETURN_POINTER(entries);\n\t{\n\t\t*recheck = true;\n\t\t\tif (!check[i])\n\t\t\t\tres = false;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "#endif\n\t\t\to++;\n\t\t}\n}\nget_icu_locale_comment(const char *localename)", "partial_line": "status = U_ZE", "completion": "status = U_ZERO_ERROR; <|endoftext|>"}
{"context": "\tPUTPAD(ctx->c.b8[3]);\n}\nstatic void\n\tdigest[6] = ctx->h.b8[5];\n\tdigest[11] = ctx->h.b8[8];", "partial_line": "H(2", "completion": "H(2) = 0x98badcfe; <|endoftext|>"}
{"context": "\t\t}\n\t\telse if (item->flags & A_PUSH)\n\t\t\twhile (prs->state->prev)\n\t\t\tprs->state->lenchartoken = ptr->lenchartoken;\n\t\t\tpfree(ptr);", "partial_line": "prs->sta", "completion": "prs->state->posbyte += prs->state->charlen; <|endoftext|>"}
{"context": "\t\t\tmatches = 0;\n\tPG_RETURN_DATUM(matches);\n\t\t\t\t\t\t\t\t\t\tattr->attbyval, attr->attlen);\n\t{\nminmax_get_strategy_procinfo(BrinDesc *bdesc, uint16 attno, Oid subtype,", "partial_line": "Assert(strate", "completion": "Assert(strategynum >= 1 && <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tparamname, fk_type,\n\treturn result;\nDatum\n{\n{", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "recoveryApplyDelay(XLogReaderState *record)\n\tdelayUntil = TimestampTzPlusMilliseconds(xtime, recovery_min_apply_delay);\n\twhile (true)\n\t\tif (CheckForStandbyTrigger())\n\t\t(void) WaitLatch(&XLogRecoveryCtl->recoveryWakeupLatch,", "partial_line": "WL_LATCH_SET |", "completion": "WL_LATCH_SET | WL_TIMEOUT | WL_EXIT_ON_PM_DEATH, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t leftsib, opaque->btpo_prev, target,\n\t\tleaftopparent = InvalidBlockNumber;\n\t}\n\trbuf = _bt_getbuf(rel, rightsib, BT_WRITE);\n\t\t\t\t\t\t\t\t \"and scanblkno %u spuriously links to non-target %u \"", "partial_line": "if (Buffe", "completion": "if (BufferIsValid(lbuf)) <|endoftext|>"}
{"context": "static const symbol s_2_1288[5] = { 'e', 'n', 'j', 'e', 'm' };\nstatic const symbol s_2_1319[4] = { 'e', 't', 'e', 'm' };\nstatic const symbol s_2_1325[4] = { 'a', 'v', 'e', 'm' };\nstatic const symbol s_2_1332[6] = { 'g', 'a', 0xC5, 0xA1, 'e', 'm' };\nstatic const symbol s_2_1339[5] = { 'i', 0xC5, 0xA1, 'e', 'm' };", "partial_line": "static const symbol s_2_1342", "completion": "static const symbol s_2_1342[4] = { 'a', 'c', 'i', 'm' }; <|endoftext|>"}
{"context": "\tif (wal_recycle &&\n\t\t\treturn;\n\t\t}\n{\n\tstruct stat stat_buf;", "partial_line": "if (sta", "completion": "if (stat(XLOGDIR, &stat_buf) != 0 || <|endoftext|>"}
{"context": "{\n\tArrayBuildState *state;\n\t\tPG_RETURN_NULL();\n\t\tPG_RETURN_NULL();\n\tranges = palloc0(range_count * sizeof(RangeType *));", "partial_line": "multirange_agg_t", "completion": "multirange_agg_transfn(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\tappendStringInfoString(buf, \".abs()\");\n\t\t\t\tjspGetArg(v, &elem);\n\t\t\t\tprintJsonPathItem(buf, &elem, false, false);\n\t\tcase jpiKeyValue:\n\t\t\tbreak;", "partial_line": "if (v->co", "completion": "if (v->content.like_regex.flags) <|endoftext|>"}
{"context": "\t\t\t\tcell = opt->nullPrint ? opt->nullPrint : \"\";\n\t\t\t\t\tmustfree = true;\n\t{\n\t\t\tbreak;\n\t\tdefault:", "partial_line": "ret", "completion": "return align; <|endoftext|>"}
{"context": "static const symbol s_3_53[5] = { 0xC3, 0xA1, 'v', 'e', 'm' };\nstatic const symbol s_3_54[6] = { 'i', 'r', 0xC3, 0xAC, 'e', 'm' };\nstatic const symbol s_3_79[5] = { 'i', 'r', 'i', 'e', 'n' };\nstatic const symbol s_3_84[5] = { 0xC3, 0xAF, 'r', 'e', 'n' };\nstatic const symbol s_3_94[7] = { 0xC3, 0xAF, 's', 'q', 'u', 'e', 'n' };", "partial_line": "static const symbo", "completion": "static const symbol s_3_104[5] = { 'a', 's', 's', 'i', 'n' }; <|endoftext|>"}
{"context": "\t\t}\n\t\ttyptup = SearchSysCache1(TYPEOID, ObjectIdGetDatum(att->atttypid));\n\t\tif (!HeapTupleIsValid(typtup))\n\t\t\telog(ERROR, \"cache lookup failed for type %u\", att->atttypid);\n\t\tReleaseSysCache(typtup);", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\tjsestate->jump_empty = jsestate->jump_error = -1;\n\t\tjsestate->jump_error = state->steps_len;\n\t\tscratch->opcode = EEOP_JUMP_IF_NOT_TRUE;\n\t\tif (jsexpr->on_empty->coerce)\n\t\t\tscratch->resnull = resnull;", "partial_line": "bool exists_c", "completion": "bool exists_coerce, <|endoftext|>"}
{"context": "#endif\n\ttmp = (tmp >> 32) | (tmp << 32); \\\n\t(x) = ((tmp & 0xffff0000ffff0000ULL) >> 16) | \\\n#define Sigma0_256(x)\t(S32(2,  (x)) ^ S32(13, (x)) ^ S32(22, (x)))", "partial_line": "#define sigma1_256(x)\t(S32", "completion": "#define sigma1_256(x)\t(S32(17, (x)) ^ S32(19, (x)) ^ R(10,   (x))) <|endoftext|>"}
{"context": "\t\t\tLWLockRelease(ProcArrayLock);\n\t\t\t\t\tDescribeLockTag(&locktagbuf, &locktag_copy);\n\t\t\t\t\t\t\t\t\t GetLockmodeName(lockmethod_copy, lockmode),\n\t\t\t\t\t\t\t\t\t\tpid)));\n\t\t\t\t\t\tlock_holders_sbuf;", "partial_line": "GetCurrentTim", "completion": "GetCurrentTimestamp(), <|endoftext|>"}
{"context": "\tOid\t\t\ttypelem = PG_GETARG_OID(1);\n\tfsec_t\t\tfsec;\n\t\t  ;\n\t\t\t\t(errcode(ERRCODE_DATETIME_VALUE_OUT_OF_RANGE),\nDatum", "partial_line": "pq_begintypse", "completion": "pq_begintypsend(&buf); <|endoftext|>"}
{"context": "#ifdef USE_LZ4\n\t\treturn psprintf(_(\"this build does not support compression with %s\"),\nCompressorState *\nvoid\nInitCompressFileHandle(const pg_compress_specification compression_spec)", "partial_line": "compression_sp", "completion": "compression_spec.algorithm = PG_COMPRESSION_NONE; <|endoftext|>"}
{"context": "    z->bra = z->c;\n        if (ret < 0) return ret;\n    {   int m1 = z->l - z->c; (void)m1;\n        z->bra = z->c;\n        if (in_grouping_b_U(z, g_v, 945, 969, 0)) goto lab1;", "partial_line": "if (", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\tif (cur_event->events & WL_LATCH_SET)\n\t\t{\n#if defined(WAIT_USE_EPOLL)\n\tif (events == WL_EXIT_ON_PM_DEATH)\n\t\tset->exit_on_postmaster_death = true;", "partial_line": "if ((events &", "completion": "if ((events & WL_LATCH_SET) != WL_LATCH_SET) <|endoftext|>"}
{"context": "\tif (success || in_log_streamer)\n\t\t\tpg_log_info(\"removing data directory \\\"%s\\\"\", basedir);\n\t\t\tpg_log_info(\"removing contents of data directory \\\"%s\\\"\", basedir);\n\t\t\tpg_log_info(\"removing contents of WAL directory \\\"%s\\\"\", xlog_dir);\n\t\t}", "partial_line": "if (made_new_xlogdir || found_ex", "completion": "if (made_new_xlogdir || found_existing_xlogdir) <|endoftext|>"}
{"context": "\t\t  bool print_to_stderr)\n{\n\tSize\t\ttotalspace;\n\ttotalspace += dclist_count(&slab->emptyblocks) * slab->blockSize;\n\t\t{", "partial_line": "Asser", "completion": "Assert(SlabIsValid(slab)); <|endoftext|>"}
{"context": "}\n\tfloat8\t\tresult = 0.0;\t\n\t\tif (i > 0)\n\t\t\tif (!path->closed)\n\t\ttmp = lseg_closept_point(NULL, &lseg, pt);", "partial_line": "dist_", "completion": "dist_ppath(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tif (collation != att2->attcollation)\n\t\t\t}\n\tpfree(values1);\n\tReleaseTupleDesc(tupdesc1);", "partial_line": "PG_RETURN_B", "completion": "PG_RETURN_BOOL(result); <|endoftext|>"}
{"context": "\treturn ExecScan(&node->ss,\nFunctionScanState *\n\tFunctionScanState *scanstate;\n\tint\t\t\ti,\n\tscanstate->ordinality = node->funcordinality;", "partial_line": "if (nfun", "completion": "if (nfuncs == 1 && !node->funcordinality) <|endoftext|>"}
{"context": "{ 3, s_2_630, -1, 123, 0},\n{ 4, s_2_640, 634, 113, 0},\n{ 4, s_2_659, 646, 13, 0},\n{ 8, s_2_661, 659, 111, 0},\n{ 6, s_2_663, 646, 115, 0},", "partial_line": "{ 5, s_2", "completion": "{ 5, s_2_681, 679, 113, 0}, <|endoftext|>"}
{"context": "}\nparseOidArray(const char *str, Oid *array, int arraysize)\n\t\t\t{\n\t\t\t\tarray[argNum++] = atooid(temp);\n\t\t\t\tj >= sizeof(temp) - 1)", "partial_line": "array[argNum++] = In", "completion": "array[argNum++] = InvalidOid; <|endoftext|>"}
{"context": "\t\tcase ACL_UPDATE:\n\t\t\treturn \"UPDATE\";\n\t\tcase ACL_TRUNCATE:\n\t\t\treturn \"TRUNCATE\";\n\t\tcase ACL_USAGE:", "partial_line": "case ACL", "completion": "case ACL_ALTER_SYSTEM: <|endoftext|>"}
{"context": "TeardownHistoricSnapshot(bool is_error)\n{\n\t\tsize = add_size(size,\n\tserialized_snapshot.subxcnt = snapshot->subxcnt;\n\tif (serialized_snapshot.subxcnt > 0)", "partial_line": "Sn", "completion": "Snapshot <|endoftext|>"}
{"context": "\trelids = pull_varnos(root, clause);\n\tAssert(bms_is_subset(relids, qualscope));\n\t\trelids = get_join_domain_min_rels(root, qualscope);\n\t}\n\t\t\t\t\t\t\t\t\t\t   PVC_RECURSE_WINDOWFUNCS |", "partial_line": "return restric", "completion": "return restrictinfo; <|endoftext|>"}
{"context": "\t\telse\n\t\t\telog(ERROR, \"unrecognized commandType: %d\", (int) event);\n\t\tproduct_queries = fireRules(parsetree,\n\t\t\t\t{\n\t\t\t\t\t{", "partial_line": "rewriteV", "completion": "rewriteValuesRTEToNulls(pt, values_rte); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  Oid rangeopfamily, Oid rangeopcintype, Oid *inRangeFunc,\n\t\tNode\t   *n = lfirst(fl);\n\t\tsetNamespaceLateralState(namespace, true, true);\n\tint\t\t\tcolcount = 0;\n\tattnum = 0;", "partial_line": "char\t   *colname =", "completion": "char\t   *colname = strVal(lfirst(lc)); <|endoftext|>"}
{"context": "\tbool\t\tslownext = false;\n\t\t\t*offp = thisatt->attcacheoff;\n\t\tvalues[attnum] = fetchatt(thisatt, tp + *offp);\n\t\tif (!slow)\n\tbool\t\thasnulls = HeapTupleHasNulls(tuple);", "partial_line": "n", "completion": "natts, <|endoftext|>"}
{"context": "\t\toriginid = replorigin_create(originname);\n\torigin_startpos = replorigin_session_get_progress(false);\n\tCommitTransactionCommand();\n\t\t\t\t errmsg(\"apply worker for subscription \\\"%s\\\" could not connect to the publisher: %s\",\n\t\t\t\t\t\tMySubscription->name, err)));", "partial_line": "if (am_l", "completion": "if (am_leader_apply_worker()) <|endoftext|>"}
{"context": "\t\t\tSnapBuildSnapIncRefcount(builder->snapshot);\n\t\t}\n\t\tSnapBuildSnapIncRefcount(builder->snapshot);\n\t\t\t\t\t\t\t\t xlrec->target_locator, xlrec->target_tid,\n\t\t\t\t\t\t\t\t xlrec->combocid);", "partial_line": "elog(ERROR, \"xl_heap_new_cid record without", "completion": "elog(ERROR, \"xl_heap_new_cid record without a valid CommandId\"); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t_SPI_connected--;\n\t\t\t_SPI_current = &(_SPI_stack[_SPI_connected]);\n\t\t\t\t(errcode(ERRCODE_WARNING),\n\t\t\t_SPI_current = &(_SPI_stack[_SPI_connected]);", "partial_line": "slist_foreach_modify(siter, &_SPI_cur", "completion": "slist_foreach_modify(siter, &_SPI_current->tuptables) <|endoftext|>"}
{"context": "\t\tcase LCS_FORSHARE:\n{\n\tAssert(strength != LCS_NONE);\t\n\t\t\t\t\t\tLCS_asString(strength))));\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "bool pushed", "completion": "bool pushedDown) <|endoftext|>"}
{"context": "\t\t\t\t\t\tnspname, relname)));\n\t\tresetStringInfo(&cmd);\n\t\t\t\t\t\t \"  (CASE WHEN (array_length(gpt.attrs, 1) = c.relnatts)\"\n\t\tpubres = walrcv_exec(LogRepWorkerWalRcvConn, cmd.data,\n\t\t\t\t\t\t\t lengthof(attrsRow), attrsRow);", "partial_line": "errcode(ERRCODE_FEATURE", "completion": "errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "\t\tereport(LOG,\n\t\t\t\t errhidecontext(true),\n\tctl.entrysize = sizeof(lwlock_stats);\n\twhile ((lwstats = (lwlock_stats *) hash_seq_search(&scan)) != NULL)\n\tkey.instance = lock;", "partial_line": "lwstat", "completion": "lwstats->sh_acquire_count = 0; <|endoftext|>"}
{"context": "static int r_postlude(struct SN_env * z);\nextern struct SN_env * spanish_ISO_8859_1_create_env(void);\n#endif\n{ 1, s_0_2, 0, 2, 0},", "partial_line": "static const symb", "completion": "static const symbol s_1_0[2] = { 'l', 'a' }; <|endoftext|>"}
{"context": "\t\t}\n\t\t\tPG_RETURN_NULL();\n\t\tif (TIMESTAMP_LT(ts1, te2))\n\t\tPG_RETURN_BOOL(false);\n\t\t\tPG_RETURN_BOOL(true);", "partial_line": "timesta", "completion": "timestamp_smaller(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\tInitializeQueryCompletion(qc);\n\tif (log_executor_stats && portal->strategy != PORTAL_MULTI_QUERY)\n\t\t\tCurrentResourceOwner = portal->resowner;\n\t\t\t\tnprocessed = PortalRunSelect(portal, true, count, dest);\n\t\t\t\t\tCopyQueryCompletion(qc, &portal->qc);", "partial_line": "elog(ERROR, \"unrecognized po", "completion": "elog(ERROR, \"unrecognized portal strategy: %d\", <|endoftext|>"}
{"context": "\t\tAssert(!procstruct->proretset);\n\t\tConst\t   *cons;\n\t\tAssert(OidIsValid(funcId));\n\t\t{\n\t\t\t\t\t\t\t sizeof(int32),", "partial_line": "BoolGetDatum(ccontext", "completion": "BoolGetDatum(ccontext == COERCION_EXPLICIT), <|endoftext|>"}
{"context": "\tfcinfo->args[0].isnull = false;\n\tresult = FunctionCallInvoke(fcinfo);\nDatum\n\tfcinfo->args[2].value = arg3;\n\tresult = FunctionCallInvoke(fcinfo);", "partial_line": "if (fcinfo-", "completion": "if (fcinfo->isnull) <|endoftext|>"}
{"context": "\t\t\t\tbool\t\thas_null_input = false;\n\t\t\t\t\t\treturn makeBoolConst(true, false);\n\t\t\t\t\t\treturn (Node *) csimple;\n\t\t\t\tnewexpr = makeNode(DistinctExpr);\n\t\t\t\tNullIfExpr *expr;", "partial_line": "has_noncon", "completion": "has_nonconst_input = true; <|endoftext|>"}
{"context": "\tif (unlikely(uflow))\n\t\t\t\t\t\t\t\t\t\tdec_sk_argument,\n\t\treturn false;\n\t}\n\t\tpfree(DatumGetPointer(skey->sk_argument));", "partial_line": "re", "completion": "return true; <|endoftext|>"}
{"context": "rt_box_union(BOX *n, const BOX *a, const BOX *b)\n\tn->high.y = float8_max(a->high.y, b->high.y);\n{\n\treturn float8_mi(size_box(&unionbox), size_box(original));\n\tStrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);", "partial_line": "bool\t   *recheck = (bool *) P", "completion": "bool\t   *recheck = (bool *) PG_GETARG_POINTER(4); <|endoftext|>"}
{"context": "#line 41 \"prep.pgc\"\nif (sqlca.sqlcode < 0) sqlprint();}\n#line 45 \"prep.pgc\"\n#line 46 \"prep.pgc\"\n#line 48 \"prep.pgc\"", "partial_line": "in", "completion": "int main () <|endoftext|>"}
{"context": "void\n\tinfo.num_partitions = NUM_LOCK_PARTITIONS;\n\tmax_table_size *= 2;\n\tinfo.hash = proclock_hash;\n\tFastPathStrongRelationLocks =", "partial_line": "ShmemInitStruct(\"Fast Path Stron", "completion": "ShmemInitStruct(\"Fast Path Strong Relation Lock Data\", <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\t\t\tpkattnum, pktypoid, pkcolloid,\n\t\t\t\t\t\t\t\t\t\t fkconstraint->pk_attrs,\n\tfor (i = 0; i < numfks; i++)\n\t\t\t\tfkconstraint->fk_upd_action == FKCONSTR_ACTION_SETDEFAULT ||", "partial_line": "errmsg(\"invalid %s action for fo", "completion": "errmsg(\"invalid %s action for foreign key constraint containing generated column\", <|endoftext|>"}
{"context": "\t\treturn;\n\tif (strcmp(fdwinfo->fdwhandler, \"-\") != 0)\n\tappendPQExpBuffer(delq, \"DROP FOREIGN DATA WRAPPER %s;\\n\",\n\t\tArchiveEntry(fout, fdwinfo->dobj.catId, fdwinfo->dobj.dumpId,\n\tif (fdwinfo->dobj.dump & DUMP_COMPONENT_COMMENT)", "partial_line": "DumpOptions *do", "completion": "DumpOptions *dopt = fout->dopt; <|endoftext|>"}
{"context": "static void ResolveRecoveryConflictWithVirtualXIDs(VirtualTransactionId *waitlist,\nstatic XLogRecPtr LogCurrentRunningXacts(RunningTransactions CurrRunningXacts);\n\t\t\t\t\t\t\t\t   64,\n\thash_ctl.keysize = sizeof(TransactionId);\n\tvxid.procNumber = MyProcNumber;", "partial_line": "vxid.localTransaction", "completion": "vxid.localTransactionId = GetNextLocalTransactionId(); <|endoftext|>"}
{"context": "void\n\tIsUnderPostmaster = true;\t\n#ifdef WIN32\n\tInitProcessGlobals();\n#endif", "partial_line": "InitPro", "completion": "InitProcessLocalLatch(); <|endoftext|>"}
{"context": "\t}\n\ton_shmem_exit(pgaio_worker_die, 0);\npgaio_worker_error_callback(void *arg)\n\tAssert(MyBackendType == B_IO_WORKER);\n\t\t{", "partial_line": "Assert(", "completion": "Assert(error_errno != 0); <|endoftext|>"}
{"context": "\tif (result != NULL)\n\tJsonbValue *v;\n\t\telse\n\t\tPG_RETURN_JSONB_P(JsonbValueToJsonb(v));\n}", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\tsegno = str2uint(p);\n\t\t\tgot_log_seg = true;\n\t\telse if ((p = strstr(bufin, \"Latest checkpoint's NextXID:\")) != NULL)\n\t\t\tp++;\t\t\t\t\n\t\t\tif (p == NULL || strlen(p) <= 1)", "partial_line": "pg_fatal(\"%", "completion": "pg_fatal(\"%d: controldata retrieval problem\", __LINE__); <|endoftext|>"}
{"context": "{ 3, s_21_1, -1, -1, 0},\n{ 3, s_21_3, -1, -1, 0},\nstatic const symbol s_22_4[3] = { 0xE0, 0xAE, 0xAA };\nstatic const symbol s_23_7[3] = { 0xE0, 0xAE, 0x8F };\nstatic const symbol s_23_9[3] = { 0xE0, 0xAE, 0x92 };", "partial_line": "static const struc", "completion": "static const struct among a_23[12] = <|endoftext|>"}
{"context": "    z->I[1] = z->l;\n        z->lb = mlimit1;\n            break;\n                if (ret < 0) return ret;\n        }", "partial_line": "z-", "completion": "z->ket = z->c; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t HASH_FIND,\n{\n\tfunction->fn_hashkey = &hentry->key;\ncfunc_hashtable_delete(CachedFunction *function)\n\tif (tupdesc)", "partial_line": "compute_function_hashkey(FunctionC", "completion": "compute_function_hashkey(FunctionCallInfo fcinfo, <|endoftext|>"}
{"context": "\tSpinLockAcquire(&Insert->insertpos_lck);\n\tSpinLockRelease(&Insert->insertpos_lck);\n{\n\tsegleft = wal_segment_size - XLogSegmentOffset(*EndPos, wal_segment_size);\nCopyXLogRecordToWAL(int write_len, bool isLogSwitch, XLogRecData *rdata,", "partial_line": "XLogRecPtr StartPos, X", "completion": "XLogRecPtr StartPos, XLogRecPtr EndPos, TimeLineID tli) <|endoftext|>"}
{"context": "\tlimit = tooBig ? in->nTuples - 1 : in->nTuples;\n\t\t\tout->nodeLabels[i] = theLabel;\n\t}\n\treturn true;\n}", "partial_line": "int level, bool isNul", "completion": "int level, bool isNulls, bool isNew) <|endoftext|>"}
{"context": "{ 2, s_1_1, -1, -1, 0},\n{ 2, s_1_2, -1, -1, 0},\nstatic const symbol s_2_1[3] = { 'l', 'i', 'g' };\n};\nstatic const unsigned char g_v[] = { 17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 128 };", "partial_line": "static const unsigned char g_s_ending[] = { 239, 25", "completion": "static const unsigned char g_s_ending[] = { 239, 254, 42, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 }; <|endoftext|>"}
{"context": "\tset_var_from_num(num, &arg);\n\tint32\t\tscale = PG_GETARG_INT32(1);\n\tNumeric\t\tres;\n\tif (scale < 0)\n{", "partial_line": "generate_series_", "completion": "generate_series_numeric(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\tbreak;\n\t\tcase T_MergeAppend:\n\t\t\tpname = sname = \"Recursive Union\";\n\t\tcase T_NestLoop:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tdigit = (*ptr - '0');\n\tif (unlikely(tmp > PG_INT64_MAX))\n\t\tgoto out_of_range;\n\t\tfirstdigit = ptr += 2;\n\t\t\t\tif (unlikely(tmp > -(PG_INT64_MIN / 8)))", "partial_line": "if (*ptr >= '0'", "completion": "if (*ptr >= '0' && *ptr <= '1') <|endoftext|>"}
{"context": "\t\tLockBuffer(buffer, BUFFER_LOCK_UNLOCK);\n\tresult = HeapTupleSatisfiesUpdate(&tp, cid, buffer);\n\t}\n\t\tuint16\t\tinfomask;\n\t\txwait = HeapTupleHeaderGetRawXmax(tp.t_data);", "partial_line": "if (infomask", "completion": "if (infomask & HEAP_XMAX_IS_MULTI) <|endoftext|>"}
{"context": "\t\tisfixed = op->d.fetch.kind != NULL;\n\t\t\tisfixed = true;\n\t\t{\n\t\t\ttts_ops = ExecGetResultSlotOps(os, &isfixed);\n\t\t\tdesc = ExecGetResultType(os);", "partial_line": "opcode", "completion": "opcode == EEOP_OLD_FETCHSOME || <|endoftext|>"}
{"context": "\t\tif (t >= 16)\n\t}\n\t\ts = t & 0x0f;\n\t}\n\tfor (t = 60; t < 80; t++)", "partial_line": "e", "completion": "e = d; <|endoftext|>"}
{"context": "\twinstate->frametailgroup = 0;\n\t\t\tExecCopySlot(winstate->first_part_slot, outerslot);\n\t\t}\n\t\tagg_winobj->markpos = -1;\n\t}", "partial_line": "winstate->spool", "completion": "winstate->spooled_rows++; <|endoftext|>"}
{"context": "#include \"foreign/fdwapi.h\"\n#include \"miscadmin.h\"\n#include \"optimizer/paramassign.h\"\nstatic Plan *create_scan_plan(PlannerInfo *root, Path *best_path,", "partial_line": "int fla", "completion": "int flags); <|endoftext|>"}
{"context": "\tbool\t\tinclause = op->d.hashedscalararrayop.inclause;\n\tbool\t\tstrictfunc = op->d.hashedscalararrayop.finfo->fn_strict;\n\t\telements_tab = (ScalarArrayOpExprHashTable *)\n\t\tfmgr_info(saop->hashfuncid, &elements_tab->hash_finfo);\n\t\t\t\t\t\t\t\t &elements_tab->hash_finfo,", "partial_line": "NU", "completion": "NULL); <|endoftext|>"}
{"context": "\t\tSpinLockAcquire(&FastPathStrongRelationLocks->mutex);\n\t\tbool\t\txactLock;\t\n\t} PerLockTagEntry;\n\thash_seq_init(&status, LockMethodLocalHash);\n\t\tPerLockTagEntry *hentry;", "partial_line": "bool\t\tfo", "completion": "bool\t\tfound; <|endoftext|>"}
{"context": "static uint64 pg_popcount_masked_choose(const char *buf, int bytes, bits8 mask);\nstatic inline int pg_popcount64_fast(uint64 word);\n#endif\t\t\t\t\t\t\t\n\t__cpuid(exx, 1);\n#else", "partial_line": "return", "completion": "return (exx[2] & (1 << 23)) != 0; <|endoftext|>"}
{"context": "void\n{\n\tpq_sendbyte(out, LOGICAL_REP_MSG_BEGIN);\n\tpq_sendint64(out, txn->final_lsn);\n}", "partial_line": "logicalrep_write_commit(StringInfo ou", "completion": "logicalrep_write_commit(StringInfo out, ReorderBufferTXN *txn, <|endoftext|>"}
{"context": "\t\t{\n\t\tmask = (~(bitmapword) 0);\n\telse\nuint32\n{", "partial_line": "Assert(bms_", "completion": "Assert(bms_is_valid_set(a)); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tif (!indexcol_is_bool_constant_for_query(root, index, i))\nstatic bool\n\tforeach(lc, partrel->baserestrictinfo)\nstatic bool", "partial_line": "matches_bo", "completion": "matches_boolean_partition_clause(RestrictInfo *rinfo, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t(errmsg(\"SYSID can no longer be specified\")));\n\t\t\tdcreatedb = defel;\n\t\t{\n\t\telse if (strcmp(defel->defname, \"addroleto\") == 0)", "partial_line": "errorConflictingDefElem(def", "completion": "errorConflictingDefElem(defel, pstate); <|endoftext|>"}
{"context": "\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, \n\tECPGt_char,(t),(long)64,(long)1,(64)*sizeof(char), \n#line 83 \"cursor.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n\tstrcpy(msg, \"fetch :count\");", "partial_line": "ECPGt_int,&(id),(long)1,(l", "completion": "ECPGt_int,&(id),(long)1,(long)1,sizeof(int), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   false);\n\t\t\t\tbreak;\n\t\t\t\t\tTupleTableSlot *epqslot,\n\t\t\t\t\t{\n\t\t\t\t\t\t\t\tepqslot = EvalPlanQual(epqstate,", "partial_line": "if (!table", "completion": "if (!table_tuple_fetch_row_version(resultRelationDesc, <|endoftext|>"}
{"context": "\t\t\t\texit(1);\n\t\t}\n\tpid = get_pgpid(false);\n\tif (pid == 0)\t\t\t\t\n\t}", "partial_line": "write_stderr(_(\"HINT: The \\\"-m fast\\\" option immediately disconn", "completion": "write_stderr(_(\"HINT: The \\\"-m fast\\\" option immediately disconnects sessions rather than\\n\" <|endoftext|>"}
{"context": "\t\tif (strcmp(ttype->name, name) == 0)\n\t\t{\n\t\tinitialize_target_list();\n{\nstatic void", "partial_line": "oldcontext = Me", "completion": "oldcontext = MemoryContextSwitchTo(TopMemoryContext); <|endoftext|>"}
{"context": "\tfree(schemanames);\n\tdestroyPQExpBuffer(path);\n{\n\tPGresult   *res;\n\tres = ExecuteSqlQuery(fout, loQry->data, PGRES_TUPLES_OK);", "partial_line": "i_acldefault = PQfnumb", "completion": "i_acldefault = PQfnumber(res, \"acldefault\"); <|endoftext|>"}
{"context": "\tVarBit\t   *arg1 = PG_GETARG_VARBIT_P(0);\n\t\t\t\t(errcode(ERRCODE_STRING_DATA_LENGTH_MISMATCH),\n\tp1 = VARBITS(arg1);\n\t\t*r++ = *p1++ & *p2++;\n\tPG_RETURN_VARBIT_P(result);", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t}\nPLy_input_setup_func(PLyDatumToOb *arg, MemoryContext arg_mcxt,\n\tif (typeOid != RECORDOID)\n\t\targ->typlen = typentry->typlen;\n\t\t\t\t\t\t\t\t\t\t\t   proc->trftypes)))", "partial_line": "arg->func = PLyObject_Fro", "completion": "arg->func = PLyObject_FromTransform; <|endoftext|>"}
{"context": "\t\tstatus = PSQL_CMD_ERROR;\n\t{\n\t\t\t\tpg_log_warning(\"\\\\%s: extra argument \\\"%s\\\" ignored\", cmd, arg);\n\t\twhile ((arg = psql_scan_slash_option(scan_state,\n\tfree(cmd);", "partial_line": "status = exec_com", "completion": "status = exec_command_cd(scan_state, active_branch, cmd); <|endoftext|>"}
{"context": "\t\t\t\tuser_opts.do_statistics = false;\n\t\tpfree(pgoptions);\n\t}\n\t\tsetenv(\"PGOPTIONS\", FIX_DEFAULT_READ_ONLY, 1);\n\t\t\t\t\t\t\t \"-b\", _(\"old cluster binaries reside\"), false);", "partial_line": "\"-s\", _(\"sockets will be", "completion": "\"-s\", _(\"sockets will be created\"), false); <|endoftext|>"}
{"context": "\treturn timestamptz_cmp_internal(dt1, dt2);\nDatum\n\tPG_RETURN_BOOL(timestamp_cmp_timestamptz_internal(timestampVal, dt2) == 0);\n\tTimestamp\ttimestampVal = PG_GETARG_TIMESTAMP(0);\n\tTimestamp\ttimestampVal = PG_GETARG_TIMESTAMP(0);", "partial_line": "TimestampTz dt2 = PG_", "completion": "TimestampTz dt2 = PG_GETARG_TIMESTAMPTZ(1); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  (Datum) 0);\n\t\t\t\t\t\t\t\t\t  RoleMembershipCacheCallback,\n\t\tCacheRegisterSyscacheCallback(DATABASEOID,\n\t}\n\t\t\t\t   Oid admin_of, Oid *admin_role)", "partial_line": "ListC", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\t\t\t\t\tPGresult   *res;\n\t\t\t\t\tdestroyPQExpBuffer(query);\n\t\t\t\t\tbreak;\n\t\t\tfor (j = 0; j < tbinfo->numatts; j++)\n\t\t\t\t\tif (actual_atts == 0)", "partial_line": "tbinfo", "completion": "tbinfo->attrdefs[j]->adef_expr); <|endoftext|>"}
{"context": "\tSize\t\tfirstBlockSize;\n\tStaticAssertDecl(sizeof(AllocFreeListLink) <= (1 << ALLOC_MINBITS),\n\t\tinitBlockSize == ALLOCSET_DEFAULT_INITSIZE)\n\t\tfreeListIndex = 0;\n\t\t\tset = freelist->first_free;", "partial_line": "MemoryContextCre", "completion": "MemoryContextCreate((MemoryContext) set, <|endoftext|>"}
{"context": "\t--nfile;\n{\n\tDO_DB(elog(LOG, \"Insert %d (%s)\",\n\tDO_DB(_dump_lru());\n}", "partial_line": "vfdP->fi", "completion": "vfdP->fileMode); <|endoftext|>"}
{"context": "{\n\tParamListInfo paramLI = NULL;\n\tif (!entry->plansource->fixed_result)\n\t}\n\tif (es->memory)", "partial_line": "MemoryContext", "completion": "MemoryContextSwitchTo(saved_ctx); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t errmsg(\"routine name \\\"%s\\\" is not unique\",\n\t\t\t\t}\n{\n\t{\n\t\tcase EXPR_KIND_JOIN_ON:", "partial_line": "parser_errpos", "completion": "parser_errposition(pstate, <|endoftext|>"}
{"context": "static const symbol s_2_327[5] = { 'e', 't', 'i', 'm', 'a' };\nstatic const symbol s_2_340[8] = { 'l', 'a', 'j', 'e', 'v', 'i', 'm', 'a' };\nstatic const symbol s_2_342[9] = { 0xC4, 0x87, 'a', 'j', 'e', 'v', 'i', 'm', 'a' };\nstatic const symbol s_2_350[7] = { 'o', 'l', 'o', 'v', 'i', 'm', 'a' };\nstatic const symbol s_2_362[7] = { 'n', 'a', 0xC5, 0xA1, 'i', 'm', 'a' };", "partial_line": "static const", "completion": "static const symbol s_2_380[6] = { 'a', 0xC4, 0x8D, 'e', 'n', 'a' }; <|endoftext|>"}
{"context": "\tif (d->cnfa->flags & MATCHALL)\n\t\tcss = initialize(v, d, cp);\n\t\treturn 0;\n\t\t{\n\t{", "partial_line": "if (ss", "completion": "if (ss == NULL) <|endoftext|>"}
{"context": "\t\tXLogBeginInsert();\n\t\tif (target != leafblkno)\n\t\txlrec.safexid = safexid;\n\t\txlrec.leafrightsib = leafrightsib;\n\t\t\tXLogRegisterBuffer(4, metabuf, REGBUF_WILL_INIT | REGBUF_STANDARD);", "partial_line": "xlmeta.f", "completion": "xlmeta.fastlevel = metad->btm_fastlevel; <|endoftext|>"}
{"context": "\tchar\t   *qcfgname;\n\tchar\t   *nspname;\n\t\treturn;\n\tres = ExecuteSqlQueryForSingleRow(fout, query->data);\n\t\t\t\t\t  \"FROM pg_catalog.pg_ts_config_map AS m\\n\"", "partial_line": "char\t   *tokenname = PQget", "completion": "char\t   *tokenname = PQgetvalue(res, i, i_tokenname); <|endoftext|>"}
{"context": "\t*isnull = false;\n\t\t{\n\t\t\t\t\t\t\t\t errmsg(\"multidimensional arrays must have array expressions with matching dimensions\")));\n\t\t\t\t\tif (cur_depth >= MAXDIM)\n\t\t\t\t\t\t\t\t\t\tMAXDIM)));", "partial_line": "errmsg(\"multidimensional arrays must have array expre", "completion": "errmsg(\"multidimensional arrays must have array expressions with matching dimensions\"))); <|endoftext|>"}
{"context": "\t}\n\t{\n\t\tPQconsumeInput(stmt->connection->connection);\n\t\t\t\t const char *connection_name, const bool questionmarks,\n\tchar\t   *prepname;", "partial_line": "bool\t\tis_prep", "completion": "bool\t\tis_prepared_name_set; <|endoftext|>"}
{"context": "{\n\tif (fd >= 0)\n\t\tzstdcs->output.dst = pg_malloc0(zstdcs->output.size);\n\t\tzstdcs->cstream = _ZstdCStreamParams(CFH->compression_spec);\n\treturn CFH->open_func(fname, -1, mode, CFH);", "partial_line": "stati", "completion": "static const char * <|endoftext|>"}
{"context": "\t\t}\n\t\tereport(ERROR,\nget_foreign_server_oid(const char *servername, bool missing_ok)\n{\n\t\t\t\tbreak;", "partial_line": "cas", "completion": "case T_MergeJoin: <|endoftext|>"}
{"context": "PLy_result_coltypes(PyObject *self, PyObject *unused)\n\tif (!ob->tupdesc)\n}\n\t\tPyList_SetItem(list, i, PyLong_FromLong(attr->atttypmod));\n}", "partial_line": "stati", "completion": "static Py_ssize_t <|endoftext|>"}
{"context": "\t\tsos = castNode(SetOperationStmt, ctequery->setOperations);\n\t\tif (!IsA(sos->larg, RangeTblRef))\n\t\t\t\t\t errmsg(\"with a SEARCH or CYCLE clause, the left side of the UNION must be a SELECT\")));\n\t\tListCell   *lc;\n\t\t\tString\t   *colname = lfirst_node(String, lc);", "partial_line": "if (list_member(se", "completion": "if (list_member(seen, colname)) <|endoftext|>"}
{"context": "\t\tcase TRIGGER_EVENT_TRUNCATE:\n\t\t\tAssert(newslot == NULL);\n\t\tif (row_trigger && event == TRIGGER_EVENT_UPDATE)\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\trootslot);", "partial_line": "TRIGGER_T", "completion": "TRIGGER_TYPE_AFTER, <|endoftext|>"}
{"context": "\tif (!AllocateAndInitializeSid(&NtAuthority, 2,\n\tif (!AllocateAndInitializeSid(&NtAuthority, 2,\n\t\texit(1);\n\t\tlog_error(_(\"could not check access token membership: error code %lu\\n\"),\n\t\texit(1);", "partial_line": "pgwin32", "completion": "pgwin32_is_service(void) <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"  FROM pg_publication p,\"\n\t\tres = walrcv_exec(LogRepWorkerWalRcvConn, cmd.data, 1, qualRow);\n\t\t\telse\n\t\t\t}\n\t}", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tif (conf->show_hook)\n\t\tcase PGC_ENUM:\n\t\t\t\tif (conf->show_hook)\n\t\t\t}", "partial_line": "va", "completion": "val = \"???\"; <|endoftext|>"}
{"context": "#line 14 \"dynalloc.pgc\"\n int * i5 = 0 ;\n#line 33 \"dynalloc.pgc\"\n#line 37 \"dynalloc.pgc\"\n#line 38 \"dynalloc.pgc\"", "partial_line": "#line 45 \"dyn", "completion": "#line 45 \"dynalloc.pgc\" <|endoftext|>"}
{"context": "\t\t\t\t\t struct state *newState);\nstatic void copyouts(struct nfa *nfa, struct state *oldState,\nstatic void deltraverse(struct nfa *nfa, struct state *leftend,\nstatic void dupnfa(struct nfa *nfa, struct state *start, struct state *stop,\nstatic struct state *single_color_transition(struct state *s1,", "partial_line": "static void speci", "completion": "static void specialcolors(struct nfa *nfa); <|endoftext|>"}
{"context": "enum\n#define PGDLLIMPORT\n#endif\n\tchar\t\tsqlwarn[8];\n};", "partial_line": "#if", "completion": "#ifdef __cplusplus <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tncopy = first - src;\n\t\t\t\t\t\tncopy = values_cnt - src;", "partial_line": "nvals = d", "completion": "nvals = dest; <|endoftext|>"}
{"context": "\tMaterialState *node = castNode(MaterialState, pstate);\n\tScanDirection dir;", "partial_line": "int\t\t\tptrno PG_USED_FOR_A", "completion": "int\t\t\tptrno PG_USED_FOR_ASSERTS_ONLY; <|endoftext|>"}
{"context": "}\n{\nDatum\nDatum\npg_ls_replslotdir(PG_FUNCTION_ARGS)", "partial_line": "char\t   *slo", "completion": "char\t   *slotname; <|endoftext|>"}
{"context": "\tPoint\t   *point = PG_GETARG_POINT_P(0);\n\t\t\t\t\t\t\t\t\t\t\t\t  PointPGetDatum(&widget->center)));\n\tchar\t   *string = PG_GETARG_CSTRING(0);\n\tnew_string = palloc0(NAMEDATALEN);\n\tlen = i;", "partial_line": "new_string[l", "completion": "new_string[len - i] = string[i]; <|endoftext|>"}
{"context": "\t\t\t\tcost_agg(&agg_path, root,\n\t\t\t\t\t\t having_qual,\n\t\t\t}\n\tMinMaxAggPath *pathnode = makeNode(MinMaxAggPath);\n\tpathnode->path.pathtype = T_Result;", "partial_line": "pathnode->path.parallel_w", "completion": "pathnode->path.parallel_workers = 0; <|endoftext|>"}
{"context": "#ifdef NOT_USED\n\t\t{\n\t\telse\n\t\tif (!success && die_on_error)\n\t}", "partial_line": "!conditional_stack", "completion": "!conditional_stack_empty(cond_stack)) <|endoftext|>"}
{"context": "\t\telse\n\tif (malloced)\n}\n\tfor (n = 0; n < stmt->nparams; n++)\nstatic bool", "partial_line": "insert_tobeinserted(int position, i", "completion": "insert_tobeinserted(int position, int ph_len, struct statement *stmt, char *tobeinserted) <|endoftext|>"}
{"context": "\tItemId\t\tcuritemid = NULL;\n\tOffsetNumber maxoff;\n\tPage\t\tpage;\n\tint\t\t\tcurposti = 0;\n\toffset = _bt_binsrch_insert(rel, insertstate);", "partial_line": "if (!i", "completion": "if (!inposting) <|endoftext|>"}
{"context": "\tif (is_to_char)\n\t{\n\t\t{\n\t\t{\n\t\t\t\t\tNp->Num->flag &= ~NUM_F_BRACKET;", "partial_line": "Np->out_pre_s", "completion": "Np->out_pre_spaces = to_char_out_pre_spaces; <|endoftext|>"}
{"context": "\t\tfcinfo_out->args[0].value = *op->resvalue;\n\t}\n\t\tfcinfo_in = op->d.iocoerce.fcinfo_data_in;\n\t}\n\tswitch (svf->op)", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "#include \"header.h\"\nstatic int r_R1(struct SN_env * z);\n#ifdef __cplusplus", "partial_line": "extern void germa", "completion": "extern void german_ISO_8859_1_close_env(struct SN_env * z); <|endoftext|>"}
{"context": "min_join_parameterization(PlannerInfo *root,\n\t\t\t\t\t\t  RelOptInfo *inner_rel)\n\tforeach(vars, input_rel->reltarget->exprs)\n\t{\n\t\tif (IsA(var, PlaceHolderVar))", "partial_line": "PlaceHolderInfo *phinfo = fin", "completion": "PlaceHolderInfo *phinfo = find_placeholder_info(root, phv); <|endoftext|>"}
{"context": "\tECPGt_timestamp,&(tmp),(long)1,(long)1,sizeof(timestamp), \nif (sqlca.sqlcode < 0) sqlprint ( );}\n\ttest_null(CLONGTYPE, (char *) &l);\n\ttest_null(CDOUBLETYPE, (char *) &dbl);\n\ttest_null(CDATETYPE, (char *) &dat);", "partial_line": "ECPGt_long,&(l),(l", "completion": "ECPGt_long,&(l),(long)1,(long)1,sizeof(long), <|endoftext|>"}
{"context": "#include \"catalog/pg_class_d.h\"\n#include \"catalog/pg_largeobject_d.h\"\n#include \"catalog/pg_publication_d.h\"\n#include \"common/connect.h\"\n#include \"getopt_long.h\"", "partial_line": "#inclu", "completion": "#include \"parallel.h\" <|endoftext|>"}
{"context": "\t\tif (infomask & HEAP_XMAX_IS_MULTI)\n\t\t\tif (DoesMultiXactIdConflict((MultiXactId) xwait, infomask,\n\t\t\t\tif (!current_is_member)\n\t\t\t\t\theap_acquire_tuplock(relation, &(tp.t_self), LockTupleExclusive,\n\t\t\t\tLockBuffer(buffer, BUFFER_LOCK_EXCLUSIVE);", "partial_line": "else if (!Transaction", "completion": "else if (!TransactionIdIsCurrentTransactionId(xwait)) <|endoftext|>"}
{"context": "#include \"access/transam.h\"\n#include \"storage/bufmgr.h\"", "partial_line": "#define VACUUM_F", "completion": "#define VACUUM_FSM_EVERY_PAGES \\ <|endoftext|>"}
{"context": "\t\t\t*err_msg = \"end-of-line before IP address specification\";\n\t\t{\n\t\t\t\t\t errhint(\"Specify one address range per line.\"),\n\t\t\t*err_msg = \"multiple values specified for host address\";\n\t\t}", "partial_line": "token = linitia", "completion": "token = linitial(tokens); <|endoftext|>"}
{"context": "\t}\n#line 89 \"execute.pgc\"\nif (sqlca.sqlcode < 0) sqlprint();}\n#line 93 \"execute.pgc\"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, ", "partial_line": "ECPGt_NO_INDICATOR, NU", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, <|endoftext|>"}
{"context": "\t\t\tif (get_typlen(exprType((Node *) tle->expr)) == -1)\n\t\t\telse\n}\n\t\t\t\t\t\t  TupleTableSlot *slot,\n\tProjectionInfo *projInfo = makeNode(ProjectionInfo);", "partial_line": "ExprState", "completion": "ExprState  *state; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t\t  .namespace = tbinfo->dobj.namespace->dobj.name,\n\t\t\t\t\t\t\t\t\t  .tablespace = indxinfo->tablespace,\n\t\t\t\t\tindxinfo->dobj.dumpId);\n\tdestroyPQExpBuffer(delq);", "partial_line": "free(qindxn", "completion": "free(qindxname); <|endoftext|>"}
{"context": "\trelmaps = (SerializedActiveRelMaps *) startAddress;\n\trelmaps->active_local_updates = active_local_updates;\n\trelmaps = (SerializedActiveRelMaps *) startAddress;\nstatic void\n}", "partial_line": "read_relmap_file(RelMapFile *map, char *dbpath, bool", "completion": "read_relmap_file(RelMapFile *map, char *dbpath, bool lock_held, int elevel) <|endoftext|>"}
{"context": "\t\tget_coercion_expr(arg, context,\n\t\tereport(ERROR,\n\t{\n\t\t\targnames = lappend(argnames, ((NamedArgExpr *) arg)->name);\n\t\tnargs++;", "partial_line": "arg", "completion": "argnames, argtypes, <|endoftext|>"}
{"context": "\t\t\t   IndexBulkDeleteCallback callback, void *callback_state)\n\tif (stats == NULL)\n{\n\tif (!stats)\n\tbrin_vacuum_scan(info->index, info->strategy);", "partial_line": "brinsummarize(info->index, heapRel, BR", "completion": "brinsummarize(info->index, heapRel, BRIN_ALL_BLOCKRANGES, false, <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\tif (varcharsize == 0)\n\t\t\t\t\t\t\tif (variable->len > varcharsize)\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tsqlca->sqlwarn[0] = sqlca->sqlwarn[1] = 'W';", "partial_line": "nres = PGTYPESn", "completion": "nres = PGTYPESnumeric_from_asc(pval, &scan_length); <|endoftext|>"}
{"context": "ExplainXMLTag(const char *tagname, int flags, ExplainState *es)\n\tfor (s = tagname; *s; s++)\n\t\tappendStringInfoChar(es->str, ',');\n\tappendStringInfoChar(es->str, '\\n');\n{", "partial_line": "appendStringIn", "completion": "appendStringInfoChar(es->str, '\\n'); <|endoftext|>"}
{"context": "\t\telog(ERROR, \"return type must be a row type\");\n\tif (!crc_ok)\n\tbool\t\tnulls[12];\n\tbool\t\tcrc_ok;\n\t\tereport(ERROR,", "partial_line": "nul", "completion": "nulls[3] = false; <|endoftext|>"}
{"context": "\t}\n\tif (lo_initialize(conn) < 0)\n\t\treturn -1;\n\targv[2].isint = 1;\n\targv[2].len = 4;", "partial_line": "&retval, &result_len", "completion": "&retval, &result_len, 1, argv, 3); <|endoftext|>"}
{"context": "get_partition_operator(PartitionKey key, int col, StrategyNumber strategy,\n\t\t\t\t\t\t\t\t  key->partopcintype[col],\n\t\t\t strategy, key->partopcintype[col], key->partopcintype[col],\n\t\t\t\t\t !IsPolymorphicType(key->partopcintype[col]));\nmake_partition_op_expr(PartitionKey key, int keynum,", "partial_line": "(need_rel", "completion": "(need_relabel || <|endoftext|>"}
{"context": "\t\t\t\t\t\tstring = \"RESTRICT\";\n\t\t\t\t\t\tstring = \"SET NULL\";\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase FKCONSTR_ACTION_RESTRICT:\n\t\t\t\t\t\tstring = \"CASCADE\";", "partial_line": "string =", "completion": "string = NULL; <|endoftext|>"}
{"context": "            }\n            {   int ret = slice_del(z);\n                if (ret < 0) return ret;\n            }\n        case 6:", "partial_line": "{   int ret = s", "completion": "{   int ret = slice_from_s(z, 5, s_6); <|endoftext|>"}
{"context": "\tstruct in6_addr dummy6;\n\t\t\t\t\t\t\t\t\t\t\t\tint *names_examined,\n{\n\tSTACK_OF(GENERAL_NAME) * peer_san;\n\t\t\t\telse", "partial_line": "sk_GENERAL_NAME_pop_f", "completion": "sk_GENERAL_NAME_pop_free(peer_san, GENERAL_NAME_free); <|endoftext|>"}
{"context": "\t[PG_LATIN10] = DEF_ENC2NAME(LATIN10, 0),\n\t[PG_KOI8R] = DEF_ENC2NAME(KOI8R, 20866),\n\t[PG_WIN1251] = DEF_ENC2NAME(WIN1251, 1251),\n\t[PG_WIN1257] = DEF_ENC2NAME(WIN1257, 1257),\n\t[PG_MULE_INTERNAL] = NULL,", "partial_line": "[PG_LATIN2] = \"L", "completion": "[PG_LATIN2] = \"LATIN2\", <|endoftext|>"}
{"context": "\t\treturn;\n\t\t\t\t*dependencies = (DumpId *) pg_realloc(*dependencies,\n\t\t\t\tfindDumpableDependencies(AH, otherdobj,\n\t\t\t\t\t\t\t\t\t\t dependencies, nDeps, allocDeps);\n\tchar\t   *result;", "partial_line": "typeInfo", "completion": "typeInfo = findTypeByOid(oid); <|endoftext|>"}
{"context": "\t\treturn (RangeIsEmpty(r) && MultirangeIsEmpty(mr));\n\tAssert(!empty);\n\tmultirange_get_bounds(typcache, mr, 0, &lower2, &tmp);\n\t\t\t\t\t\t\t\tStrategyNumber strategy,\n\t\t\t\treturn false;", "partial_line": "case RA", "completion": "case RANGESTRAT_OVERRIGHT: <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\ttrigger_name = FindTriggerIncompatibleWithInheritance(child_rel->trigdesc);\n{\n\tint32\t\tinhseqno;\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,", "partial_line": "while (HeapTupleIsV", "completion": "while (HeapTupleIsValid(inheritsTuple = systable_getnext(scan))) <|endoftext|>"}
{"context": "#if defined(WAIT_USE_EPOLL)\n\tif (events == WL_EXIT_ON_PM_DEATH)\n\t\tset->exit_on_postmaster_death = true;\n\t\tif ((events & WL_LATCH_SET) != WL_LATCH_SET)\n\tif (fd == PGINVALID_SOCKET && (events & WL_SOCKET_MASK))", "partial_line": "#ifdef", "completion": "#ifdef WIN32 <|endoftext|>"}
{"context": "\tif (con == NULL)\nECPGtrans(int lineno, const char *connection_name, const char *transaction)\n\tstruct connection *con = ecpg_get_connection(connection_name);\n\t\t\tstrncmp(transaction, \"commit prepared\", 15) != 0 &&\n\t\tPQclear(res);", "partial_line": "ecpg_log(\"ECPG", "completion": "ecpg_log(\"ECPGdebug: set to %d\\n\", simple_debug); <|endoftext|>"}
{"context": "\t{\n\t\tPresortedKeyData *key;\n\t\tkey->fcinfo->args[1].value = datumB;\nstatic void\n\tint64\t\tnTuples;", "partial_line": "tupDesc = ExecG", "completion": "tupDesc = ExecGetResultType(outerNode); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\t(tm->tm_hour == 24 && (tm->tm_min > 0 || tm->tm_sec > 0)))\n\t\t\t\t{\n\t\t\t\t\tif (tzp == NULL)\n\t\t\t\t\t\tftype[i - 1] == DTK_TZ &&", "partial_line": "cas", "completion": "case DTK_SECOND: <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"executor/executor.h\"\n#include \"optimizer/optimizer.h\"\n} StatExtEntry;\nstatic void statext_store(Oid statOid, bool inh,", "partial_line": "} AnlExp", "completion": "} AnlExprData; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  sanitize_char(*p)));\n\tif (!validate(ctx->port, auth))\n\t\tstatus = PG_SASL_EXCHANGE_CONTINUE;\n\telse\n\t\tctx->state = OAUTH_STATE_FINISHED;", "partial_line": "stati", "completion": "static char * <|endoftext|>"}
{"context": "}\n\t{\n\t\tpid_t\t\tpid;\n\t\tif (result)\n\t\tResetLatch(MyLatch);", "partial_line": "sender =", "completion": "sender = mq->mq_sender; <|endoftext|>"}
{"context": "\t\tvalues[2] = BoolGetDatum(portal->cursorOptions & CURSOR_OPT_HOLD);\n\t}\n}\n\tHASH_SEQ_STATUS status;\n\twhile ((hentry = (PortalHashEnt *) hash_seq_search(&status)) != NULL)", "partial_line": "Hold", "completion": "HoldPinnedPortals(void) <|endoftext|>"}
{"context": "\t\t\t\t\tif (!ExecutorStart(queryDesc, myeflags))\n\t\t\t\t}\n\t\t\t\tportal->atStart = true;\n\t\t\t\tbreak;\n\t\t\t\t\tportal->tupDesc = UtilityTupleDescriptor(pstmt->utilityStmt);", "partial_line": "portal->", "completion": "portal->portalPos = 0; <|endoftext|>"}
{"context": "{ 12, s_3_4, -1, 1, 0},\n{ 6, s_3_5, -1, 1, 0},\n{ 9, s_3_13, -1, 1, 0},\n{ 6, s_3_15, -1, 1, 0},\n{ 9, s_3_25, -1, 1, 0},", "partial_line": "{ 6,", "completion": "{ 6, s_3_31, -1, 1, 0}, <|endoftext|>"}
{"context": "{ 14, s_1_36, -1, 2, 0},\n{ 12, s_1_37, -1, 4, 0},\nstatic const symbol s_2_18[12] = { 0xCF, 0x80, 0xCE, 0xB5, 0xCF, 0x81, 0xCE, 0xB9, 0xCF, 0x80, 0xCE, 0xB1 };\nstatic const symbol s_2_28[8] = { 0xCE, 0xBA, 0xCE, 0xBF, 0xCF, 0x81, 0xCE, 0xBD };\nstatic const symbol s_2_30[14] = { 0xCF, 0x83, 0xCF, 0x85, 0xCE, 0xBD, 0xCE, 0xB1, 0xCE, 0xB8, 0xCF, 0x81, 0xCE, 0xBF };", "partial_line": "{ 2, s_2_0, -1,", "completion": "{ 2, s_2_0, -1, 2, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\tECPGset_noind_null(ECPGt_numeric, sqlda->sqlvar[i].sqldata);\n\t\t\t\t\t\tECPGset_noind_null(ECPGt_numeric, sqlda->sqlvar[i].sqldata);\n\t\t\t\t\tmemcpy(sqlda->sqlvar[i].sqldata, num, sizeof(numeric));\n\t\t\t\t\t{\n\t\t\t\t\t\tmemcpy((char *) sqlda + offset, num->buf, num->digits - num->buf + num->ndigits);", "partial_line": "PGTYPESnumer", "completion": "PGTYPESnumeric_free(num); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t&aggstate->hash_planned_partitions);\n\t}\n\t\tExpr\t   *finalfnexpr;\n\t\taggTuple = SearchSysCache1(AGGFNOID,\n\t\tserialfn_oid = InvalidOid;", "partial_line": "if (!OidIsValid(aggf", "completion": "if (!OidIsValid(aggform->aggdeserialfn)) <|endoftext|>"}
{"context": "\tListCell   *lc1,\n\t\tif (!equal(tle1->expr, tle2->expr))\n\t}\n\treturn true;\n{", "partial_line": "ListCel", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "    switch (among_var) {\n            if (!(eq_s_b(z, 2, s_3))) return 0;\n                z->bra = z->c;\n    return 1;\n        among_var = find_among_b(z, a_7, 14);", "partial_line": "cas", "completion": "case 1: <|endoftext|>"}
{"context": "\t\t\t\tINSTR_TIME_SET_CURRENT(starttimes[i]);\n\t\t}\n\t\t\t\t\t   *el,\n\t\t\t\t\t   *tl;\n\t\t\tif (statuses[i] != 0)", "partial_line": "log_ch", "completion": "log_child_failure(statuses[i]); <|endoftext|>"}
{"context": "\t\tnap->tv_usec = 0;\n\t\trebuild_database_list(InvalidOid);\n{\n\tHASHCTL\t\thctl;\n\tdlist_iter\titer;", "partial_line": "tmpcxt = AllocSetContextCr", "completion": "tmpcxt = AllocSetContextCreate(newcxt, <|endoftext|>"}
{"context": "void\npgaio_io_get_id(PgAioHandle *ioh)\nProcNumber\n\treturn ioh->owner_procno;\n{", "partial_line": "pgaio_i", "completion": "pgaio_io_state_get_name(new_state)); <|endoftext|>"}
{"context": "            z->bra = z->c;\n            {   int ret = slice_del(z);\n        }\n    return 1;\n            {   int m1 = z->l - z->c; (void)m1;", "partial_line": "la", "completion": "lab0: <|endoftext|>"}
{"context": "\tbool\t\tfound;\n\tAssert(LWLockHeldByMe(SerializablePredicateListLock));\n\tif (!lockheld)\n\tPREDICATELOCKTARGET *rmtarget PG_USED_FOR_ASSERTS_ONLY;\n\tAssert(rmtarget == target);", "partial_line": "PREDICATELO", "completion": "PREDICATELOCKTAG oldlocktag; <|endoftext|>"}
{"context": "\t\t\telse if (tupleData->colstatus[remoteattnum] == LOGICALREP_COLUMN_BINARY)\n\t\t\t\tslot->tts_values[i] = (Datum) 0;\n\t\t\t\tslot->tts_isnull[i] = true;\n\t\telse\n\t\t{", "partial_line": "slot->tts_isn", "completion": "slot->tts_isnull[i] = true; <|endoftext|>"}
{"context": "\t\t\tMemoryContextGetParent(DatumGetEOHP(newValue)->eoh_context) == CurrentMemoryContext)\n\tif (!oldValueIsNull)\n\t\t\t\t\t\t\t\t\t\t   false,\nExecEvalPreOrderedDistinctSingle(AggState *aggstate, AggStatePerTrans pertrans)\n\t\t{", "partial_line": "oldContext = MemoryConte", "completion": "oldContext = MemoryContextSwitchTo(aggstate->curaggcontext->ecxt_per_tuple_memory); <|endoftext|>"}
{"context": "\tfinal_rel = fetch_upper_rel(root, UPPERREL_FINAL, NULL);\n\treturn root;\n\t\t!(kind == EXPRKIND_RTFUNC ||\n\t\texpr = flatten_join_alias_vars(root, root->parse, expr);\n\t\texpr = (Node *) make_ands_implicit((Expr *) expr);", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t SpecialJoinInfo *sjinfo,\nSelectivity\n{\n\tRangeQueryClause *rqlist = NULL;\n\t{", "partial_line": "Node\t   *clause =", "completion": "Node\t   *clause = (Node *) lfirst(l); <|endoftext|>"}
{"context": "static JsonParseErrorType\nsn_array_end(void *state)\n\tStripnullState *_state = (StripnullState *) state;\n\t\t_state->strval->data[_state->strval->len - 1] != '[')\n\t{", "partial_line": "Assert(", "completion": "Assert(tokentype == JSON_TOKEN_NULL); <|endoftext|>"}
{"context": "\tif (node == NULL)\n\t\t\t\tif (attno > context->attno_map->maplen ||\n\t\t\t\tif (OidIsValid(context->to_rowtype) &&\n\t\t\t}\n\t\tVar\t\t   *var = (Var *) r->arg;", "partial_line": "var->varno == conte", "completion": "var->varno == context->target_varno && <|endoftext|>"}
{"context": "static void ExecPrepareTuplestoreResult(SetExprState *sexpr,\n\t\t\t\t\t\t\t\t\t\tExprContext *econtext,\nSetExprState *\n{\n\tstate->func.fn_oid = InvalidOid;", "partial_line": "state->funcReturnsSe", "completion": "state->funcReturnsSet = func->funcretset; <|endoftext|>"}
{"context": "{\n\tstruct guts *g;\n\t\tif (!NULLCNFA(g->search))\nstatic void\n\tfprintf(f, \"nsub %d, info 0%lo, csize %d, ntree %d\\n\",", "partial_line": "fprintf(f, \"\\ns", "completion": "fprintf(f, \"\\nsearch:\\n\"); <|endoftext|>"}
{"context": "\t\t}\n}\n\t\tissue_xlog_fsync(recvFile, recvSegNo, tli);\n\t\t\twalrcv->receivedTLI = tli;\n\t\tSpinLockRelease(&walrcv->mutex);", "partial_line": "snprintf(activitymsg, sizeof(activit", "completion": "snprintf(activitymsg, sizeof(activitymsg), \"streaming %X/%X\", <|endoftext|>"}
{"context": "\t\t\t}\nCopySendTextLikeEndOfRow(CopyToState cstate)\n#ifndef WIN32\n\t\t\tbreak;\n\tbuf = pg_hton32((uint32) val);", "partial_line": "uint", "completion": "uint16\t\tbuf; <|endoftext|>"}
{"context": "check_multixact_member_buffers(int *newval, void **extra, GucSource source)\n{\n\tLWLock\t   *lock;\n\tpageno = MultiXactIdToOffsetPage(MultiXactState->nextMXact);\n\t\tslotno = ZeroMultiXactOffsetPage(pageno, false);", "partial_line": "pg_atomic_write_u64(", "completion": "pg_atomic_write_u64(&MultiXactMemberCtl->shared->latest_page_number, <|endoftext|>"}
{"context": "\t\tExecDropSingleTupleTableSlot(tupslot);\n}\n{\n\tAssert(bound && bound->strategy == PARTITION_STRATEGY_HASH);\n}", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\treturn;\n\t\t\tbreak;\n\t\t\tif (!relentry->pubactions.pubdelete)\n\t\t\t{\n\t\t\t}", "partial_line": "Assert(fa", "completion": "Assert(false); <|endoftext|>"}
{"context": "\tRelation\trel;\n\t\trelation_close(rel, AccessShareLock);\n\t\t{\n\t\t{\n\t\t\t\tevents |= (1 << CMD_UPDATE);", "partial_line": "if (fdwroutine->ExecF", "completion": "if (fdwroutine->ExecForeignDelete != NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  econtext,\n\t\t\t\t\t\t\t\t\t\t  &isnull);\n\ttsm->BeginSampleScan(scanstate,\n\t\t\t\t\t\t\t\tscanstate->use_bulkread,\n\tscanstate->begun = true;", "partial_line": "TableScanDesc scan =", "completion": "TableScanDesc scan = scanstate->ss.ss_currentScanDesc; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t(void) history_truncate_file(fname, nlines);\n\t\t\telse\n\t\t{\n\t\t\tif (errnum == 0)", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "            if (!(eq_s_b(z, 2, s_6))) return 0;\n        case 3:\n            {   int ret = slice_del(z);\n    return 1;\n                if (ret < 0) return ret;", "partial_line": "{", "completion": "{   int mlimit4; <|endoftext|>"}
{"context": "\t\telse\n\t\t\trandomize_mem((char *) pointer + chunk->requested_size,\n\t\t\t\t\t\t  size - chunk->requested_size);\n\t\tset_sentinel(pointer, size);\n\tAssert(AllocBlockIsValid(block));", "partial_line": "size - oldreq", "completion": "size - oldrequest); <|endoftext|>"}
{"context": "\t\t}\n\treturn DISPATCH_POSTMASTER;\n\t\tsetvbuf(stdout, NULL, _IONBF, 0);\n\t\t{\n\t\t_set_abort_behavior(_CALL_REPORTFAULT | _WRITE_ABORT_MSG,", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\t\t{\n\t\t\t}\n\t\telse\n{\n\t\t\tbreak;", "partial_line": "Asser", "completion": "Assert(!so->needPrimScan); <|endoftext|>"}
{"context": "}\n\tif (ssup->abbreviate)\n\t\tssup->abbrev_full_comparator = uuid_fast_cmp;\n\t\tMemoryContextSwitchTo(oldcontext);\nstatic bool", "partial_line": "uuid_sortsupport_state *uss", "completion": "uuid_sortsupport_state *uss = ssup->ssup_extra; <|endoftext|>"}
{"context": "assign_locale_messages(const char *newval, void *extra)\n\t(void) pg_perm_setlocale(LC_MESSAGES, newval);\n}\n\tfree(s->thousands_sep);\n\t\treturn false;", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "#include \"commands/dbcommands.h\"\n#include \"parser/parse_func.h\"\nstatic Node *transformAExprOpAll(ParseState *pstate, A_Expr *a);\n\t\t\t\t\t\t\t\t\t   SQLValueFunction *svf);\nstatic Node *transformJsonArrayQueryConstructor(ParseState *pstate,", "partial_line": "JsonReturning", "completion": "JsonReturning *returning); <|endoftext|>"}
{"context": "\t\tchar\t   *ptr;\n\t\tlocfcinfo->args[0].value = operand;\n\t\tlocfcinfo->args[1].value = fetch_att(ptr, typbyval, typlen);\n\t\tcmpresult = DatumGetInt32(FunctionCallInvoke(locfcinfo));\n\t}", "partial_line": "TypeCac", "completion": "TypeCacheEntry *typentry) <|endoftext|>"}
{"context": "\tcheckDomainOwner(tup);\n\t\ttable_close(typrel, RowExclusiveLock);\n\t\treturn address;\n\telse\n{", "partial_line": "rel = table_open(Typ", "completion": "rel = table_open(TypeRelationId, RowExclusiveLock); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tAssert(spec->remainder >= 0);\n\t\t\t\t\t(errcode(ERRCODE_INVALID_TABLE_DEFINITION),\n\t\tchar\t   *colname;\n\t\t\tcolname = deparse_expression((Node *) linitial(partexprs),", "partial_line": "deparse_context_for(", "completion": "deparse_context_for(RelationGetRelationName(parent), <|endoftext|>"}
{"context": "\tint\t\t\tr;\n\tevents[0] = pgwin32_signal_event;\n\t\t\t\tchar\t\tc;\n\t\t\t\tWSABUF\t\tbuf;\n\t\t\t\tbuf.len = 0;", "partial_line": "if", "completion": "if (r == 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t  List *indirection,\n\tforeach(idx, indirection)\n\t\t\t\tsubexpr = NULL;\n\t\t\tAssert(ai->lidx == NULL && !ai->is_slice);\n\t\t\t\t\t\t parser_errposition(pstate, exprLocation(ai->uidx))));", "partial_line": "upperInde", "completion": "upperIndexpr = lappend(upperIndexpr, subexpr); <|endoftext|>"}
{"context": "{\nstatic void prune_element_hashtable(HTAB *elements_tab, int b_current);\narray_typanalyze(PG_FUNCTION_ARGS)\n\t\t\t\t\t\t\t\t TYPECACHE_HASH_PROC_FINFO);\n\t\t!OidIsValid(typentry->cmp_proc_finfo.fn_oid) ||", "partial_line": "extra_data->eq_opr = t", "completion": "extra_data->eq_opr = typentry->eq_opr; <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\t\tpushJsonbValue(state, WJB_BEGIN_OBJECT, NULL);\n\telse\n\t\tAssert(rk2 == WJB_BEGIN_OBJECT);", "partial_line": "pushJsonbValue(state, WJB_B", "completion": "pushJsonbValue(state, WJB_BEGIN_ARRAY, NULL); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t substitute_actual_parameters_context *context)\n\tif (syntaxerrposition > 0)\n\t{\n\tEState\t   *estate;\n\tbool\t\tresultTypByVal;", "partial_line": "const_val = ExecEva", "completion": "const_val = ExecEvalExprSwitchContext(exprstate, <|endoftext|>"}
{"context": "\tLogMemoryContextPending = false;\n\t\t\t(errhidestmt(true),\nvoid\n{\n\tMemoryStatsEntry *meminfo;", "partial_line": "int\t\t\tidx = MyP", "completion": "int\t\t\tidx = MyProcNumber; <|endoftext|>"}
{"context": "static ObjectAddress ATAddCheckNNConstraint(List **wqueue,\n\t\t\t\t\t\t\t\t\tbool with_period);\nstatic void CloneFkReferencing(List **wqueue, Relation parentRel,\n\t\t\t\t\t\t\t\t\t\t  Oid indexOid,\n\t\t\t\t\t\t\t\t\t\t  Oid parentInsTrigger, Oid parentUpdTrigger,", "partial_line": "Oid *insertTrigOid,", "completion": "Oid *insertTrigOid, Oid *updateTrigOid); <|endoftext|>"}
{"context": "\tTimeStamp\texpiry;\n\tSecBufferDesc outbuf;\n\tSecBuffer\tOutBuffers[1];\n\tHANDLE\t\ttoken;\n\t\t\t{", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\tvoid\t   *extra = NULL;\n\t\t\t\tAssert(newval <= conf->max);\n\t\t\t\tif (!call_int_check_hook(conf, &newval, &extra,\n\t\t\t\t\t\t conf->gen.name, newval);\n\t\t\t\t\tconf->assign_hook(newval, extra);", "partial_line": "struct config_real *co", "completion": "struct config_real *conf = (struct config_real *) gconf; <|endoftext|>"}
{"context": "\t\t\tcur_em = (EquivalenceMember *) lfirst(lc1);\n\t\t\t\trinfo = create_join_clause(root, ec, eq_op,\n{\n\t\tOid\t\t\topno;\n\t\topno = get_opfamily_member_for_cmptype(opfamily, lefttype, righttype, COMPARE_EQ);", "partial_line": "EquivalenceMember *rightp = rightem->em_parent ? right", "completion": "EquivalenceMember *rightp = rightem->em_parent ? rightem->em_parent : rightem; <|endoftext|>"}
{"context": "\t\tsubnet_bitmask = (((Datum) 1) << subnet_size) - 1;\n\t\tnetwork <<= (ABBREV_BITS_INET4_NETMASK_SIZE +\n\t\tsubnet = ipaddr_datum & subnet_bitmask;\n\t\tres |= network | netmask_size | subnet;\n\t}", "partial_line": "tmp = (ui", "completion": "tmp = (uint32) res; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tPGSTAT_KIND_CUSTOM_MIN, PGSTAT_KIND_CUSTOM_MAX)));\n\t\t\t\t(errmsg(\"failed to register custom cumulative statistics \\\"%s\\\" with ID %u\", kind_info->name, kind),\n\t\t\t\t errdetail(\"Custom cumulative statistics must be registered while initializing modules in \\\"shared_preload_libraries\\\".\")));\n\tfor (PgStat_Kind existing_kind = PGSTAT_KIND_CUSTOM_MIN; existing_kind <= PGSTAT_KIND_CUSTOM_MAX; existing_kind++)\n\t\t\t\t\t errdetail(\"Existing cumulative statistics with ID %u has the same name.\", existing_kind)));", "partial_line": "int", "completion": "int\t\t\trc; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tAppendRelInfo *containing_appendrel);\nstatic Node *pullup_replace_vars_callback(Var *var,\n\t\t\t\t\t\t\t\t\t int rtindex, Relids relids);\n\t\t\t\t\t\t\t\t\t\t\tNode **parent_quals,\ntransform_MERGE_to_join(Query *parse)", "partial_line": "ret", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t\tmatches = DatumGetBool(FunctionCall2Coll(finfo, colloid, val, value));\n\t\t\t\t\tbreak;\n\t\tif (matching)\n\t\t\t\t\t\t\t\t\t  ranges_a->maxvalues,\n\t\t\t\t\terrcode(ERRCODE_INVALID_OBJECT_DEFINITION),", "partial_line": "return &opaque->", "completion": "return &opaque->extra_procinfos[basenum]; <|endoftext|>"}
{"context": "\t{\n\t}\n\tfor_multi_wrap = false;\n\t\telse if (for_xid_wrap)\n\t\t\tif (dbp->adl_datid == tmp->adw_datid)", "partial_line": "current_tim", "completion": "current_time, 0) && <|endoftext|>"}
{"context": "\t\t\treturn DTERR_BAD_FORMAT;\t\n\t\t\t*str++ = '\\0';\n\t\t\t\t\ttm->tm_mon = val;\n\t\t\t*tmask |= dmask;\nValidateDate(int fmask, bool isjulian, bool is2digits, bool bc,", "partial_line": "el", "completion": "else if (bc) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   missing_ok);\n\t\t\t\t\t\t\t\t\t\t   quote_identifier(srv->servername));\n\t\tcase UserMappingRelationId:\n\t\t\t\tForm_pg_user_mapping umform;\n\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));", "partial_line": "appendStringI", "completion": "appendStringInfo(&buffer, \"%s on server %s\", <|endoftext|>"}
{"context": "static void CopyToBinaryOneRow(CopyToState cstate, TupleTableSlot *slot);\n};\n\t\treturn &CopyToRoutineBinary;\nCopyToTextLikeStart(CopyToState cstate, TupleDesc tupDesc)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  cstate->file_encoding);", "partial_line": "foreac", "completion": "foreach(cur, cstate->attnumlist) <|endoftext|>"}
{"context": "\t\tpg_fatal(\"expected FATAL_ERROR, got %s\", PQresStatus(PQresultStatus(res)));\n\tfor (PQconninfoOption *opt = opts; opt->keyword != NULL; ++opt)\n\t\t\tkeywords[i] = opt->keyword;\n\tkeywords[i] = vals[i] = NULL;\n\tconn = PQconnectdbParams(keywords, vals, false);", "partial_line": "vals[max", "completion": "vals[max_protocol_version_index] = \"3.1\"; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"must be superuser to create an operator class\")));\n\ttypeoid = typenameTypeId(NULL, stmt->datatype);\n\t{\n\t\t\t\t\t\t\t  PointerGetDatum(opcname),\n\t\t\tCreateOpFamilyStmt *opfstmt;", "partial_line": "proced", "completion": "procedures = NIL; <|endoftext|>"}
{"context": "\t\tfmgr_info_set_expr(NULL, finfo);\n\t\tscratch.opcode = EEOP_OUTER_VAR;\n\t\tscratch.resnull = &fcinfo->args[1].isnull;\n\t\tscratch.resnull = &state->resnull;\n\t\t\t\t\t\t\t\t   state->steps_len - 1);", "partial_line": "ExprEvalS", "completion": "ExprEvalStep *as = &state->steps[lfirst_int(lc)]; <|endoftext|>"}
{"context": "{\n\t{\n\t\tres->type = (JsonContainerIsArray(jbc)) ? jbvArray : jbvObject;\n\t\treturn false;\n\t}", "partial_line": "it = JsonbIterat", "completion": "it = JsonbIteratorInit(jbc); <|endoftext|>"}
{"context": "\t\t\t\tcontext.exit_on_error = true;\n\t\t\t\tcanonicalize_path(manifest_path);\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tno_parse_wal = true;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tappendPQExpBufferStr(buf, \" NOREPLICATION\");\n\t\t}\n\t\t\tappendPQExpBuffer(buf, \" VALID UNTIL '%s'\",\n\t\tif (!no_security_labels)\n\t\t\tbuildShSecLabels(conn, \"pg_authid\", auth_oid,", "partial_line": "PQExpBuffer buf = createPQ", "completion": "PQExpBuffer buf = createPQExpBuffer(); <|endoftext|>"}
{"context": "\t\t\t\tAggSplit aggsplit,\n\t\t\t\tconst AggClauseCosts *aggcosts,\n\tpathnode->path.parallel_aware = false;\n\tpathnode->path.parallel_safe = rel->consider_parallel &&\n\tpathnode->transitionSpace = aggcosts ? aggcosts->transitionSpace : 0;", "partial_line": "pathnode->groupClause", "completion": "pathnode->groupClause = groupClause; <|endoftext|>"}
{"context": "\telse\n\tif (message_level_is_interesting(DEBUG1))\n\t\thentry->present = present;\n\t}\n\tHASH_SEQ_STATUS status;", "partial_line": "if (invalid_pa", "completion": "if (invalid_page_tab == NULL) <|endoftext|>"}
{"context": "\t}\n\telse if (newval[0] == '\\0')\nstatic bool\nautocommit_hook(const char *newval)\n\treturn ParseVariableBool(newval, \"AUTOCOMMIT\", &pset.autocommit);", "partial_line": "return Pars", "completion": "return ParseVariableBool(newval, \"QUIET\", &pset.quiet); <|endoftext|>"}
{"context": "\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t\t\tmapfilename)));\n\tr = read(fd, map, sizeof(RelMapFile));\n\tint\t\t\tfd;\n\tchar\t\tmapfilename[MAXPGPATH];", "partial_line": "COMP_CRC32C(newmap->crc, newma", "completion": "COMP_CRC32C(newmap->crc, newmap, offsetof(RelMapFile, crc)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tequal(predntest->arg, clausentest->arg))\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclause_is_strict_for((Node *) predicate,\n\t\t\t{", "partial_line": "NullTest   *pr", "completion": "NullTest   *predntest = (NullTest *) predicate; <|endoftext|>"}
{"context": "\t\t*dst++ = (u_char) tmp;\n\t\tif (ch == '\\0' || ch == '/')\n\t\t\tgoto enoent;\n\terrno = ENOENT;\nemsgsize:", "partial_line": "st", "completion": "static int <|endoftext|>"}
{"context": "\t\t\tif (node->iss_ReachedEnd ||\n\t\t\t\t\t\t\t\ttopmost->orderbynulls,\n\t\t\t\t\t\t\t\t  node);\n\t\t}\n\t\t\twas_exact = true;", "partial_line": "lastfetched_nulls", "completion": "lastfetched_nulls = scandesc->xs_orderbynulls; <|endoftext|>"}
{"context": "\t\tif ((insert_tli = GetWALInsertionTimeLineIfSet()) != 0)\n\t\tflush_lsn = GetWalRcvFlushRecPtr(NULL, &flush_tli);\n\tif (ProcSignalBarrierPending)\n\tif (PublishMemoryContextPending)\n\t\tsummary_start_lsn = start_lsn;", "partial_line": "if (private_data-", "completion": "if (private_data->end_of_wal) <|endoftext|>"}
{"context": "\t\treturn Min(60 * 1000, ms);\n\t\t\t\t\t\t\t\t\t accept_connections ? (1 + NumListenSockets) : 1);\n\tif (accept_connections)\n{\n\t\ttime_t\t\tnow;", "partial_line": "ResetLat", "completion": "ResetLatch(MyLatch); <|endoftext|>"}
{"context": "static const symbol s_0_62[3] = { 0xEF, 0xBA, 0xAB };\nstatic const symbol s_0_75[3] = { 0xEF, 0xBA, 0xB8 };\nstatic const symbol s_0_85[3] = { 0xEF, 0xBB, 0x82 };\nstatic const symbol s_0_103[3] = { 0xEF, 0xBB, 0x94 };\nstatic const symbol s_0_104[3] = { 0xEF, 0xBB, 0x95 };", "partial_line": "static const symbol s_0_131[3] = { 0x", "completion": "static const symbol s_0_131[3] = { 0xEF, 0xBB, 0xB0 }; <|endoftext|>"}
{"context": "\t\t\t\tecontext->ecxt_outertuple = slot;\n\t\t\t}\n\t\t\tBarrierDetach(&pstate->grow_batches_barrier);\n\thashtable->log2_nbuckets = my_log2(hashtable->nbuckets);\n}", "partial_line": "hashstate->ps.ExecP", "completion": "hashstate->ps.ExecProcNode = ExecHash; <|endoftext|>"}
{"context": "static char *\n\tchar\t   *pos = *input;\n\twhile (*pos)\n\t\tchar\t   *value;\n\t\t\t\t\terrcode(ERRCODE_PROTOCOL_VIOLATION),", "partial_line": "if (!s", "completion": "if (!sep) <|endoftext|>"}
{"context": "                    {   int ret = slice_from_s(z, 1, s_4);\n                    }\n                }\n                }\nstatic int r_remove_second_order_prefix(struct SN_env * z) {", "partial_line": "if (z->c + 1 >= z->l |", "completion": "if (z->c + 1 >= z->l || z->p[z->c + 1] != 101) return 0; <|endoftext|>"}
{"context": "\tif (fd != -1)\n\t{\n\t}\n\t\tdest_flags = p.flags & (PIPE_PROTO_DEST_STDERR |\n\t\t\tList\t   *buffer_list;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "}\n\t\t*memlen += IndexTupleSize(vec[i]);\n\tptr = ret = palloc(*memlen);\n\t\t\t\t   Datum *attr, bool *isnull)\n\tevec = (GistEntryVector *) palloc((len + 2) * sizeof(GISTENTRY) + GEVHDRSZ);", "partial_line": "evec->n", "completion": "evec->n = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OBJECT_AMOP:\n\t\t\t\t\tcase OBJECT_DEFACL:", "partial_line": "cas", "completion": "case OBJECT_ROLE: <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"lib/bloomfilter.h\"\n\tconst char *name;\n\tAclMode\t\tvalue;\nstatic void putid(char *p, const char *s);", "partial_line": "static bool aclitem", "completion": "static bool aclitem_match(const AclItem *a1, const AclItem *a2); <|endoftext|>"}
{"context": "\t\t\tAssert(resultnum >= 0 && resultnum < resultslot->tts_tupleDescriptor->natts);\n\t\t\t\tresultslot->tts_values[resultnum] = state->resvalue;\n\t\tEEO_CASE(EEOP_FUNCEXPR)\n\t\t\t*op->resvalue = d;\n\t\t\t\t{", "partial_line": "*op->resnull", "completion": "*op->resnull = fcinfo->isnull; <|endoftext|>"}
{"context": "\t\t\tupdate_slot = true;\n\t\tSpinLockRelease(&MyReplicationSlot->mutex);\n\t{\n\t\tReplicationSlotMarkDirty();\n\tReplicationSlotRelease();", "partial_line": "MyReplicationSlot", "completion": "MyReplicationSlot = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),\n\t\t\tcase CONSTR_ATTR_IMMEDIATE:\n\t\t\t\t\t\t\t parser_errposition(cxt->pstate, con->location)));\n\t\t\t\tsaw_enforced = true;\n\t\t\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),", "partial_line": "saw_enfo", "completion": "saw_enforced = true; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t &next_index);\n\t\t\t\tgoto cleanup;\n\t\t\t\tgoto cleanup;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   inner_default,\n\t\t\t\tif (merged_index == -1)", "partial_line": "merged_u", "completion": "merged_ub = outer_ub; <|endoftext|>"}
{"context": "\tprevbit++;\n\t\tif (w != 0)\n\t\t{\n\t\tmask = (~(bitmapword) 0);\n\telse", "partial_line": "uint", "completion": "uint32 <|endoftext|>"}
{"context": "\t\t\t\t\tisNull2;\n\t\t\t!datum_image_eq(datum1, datum2, att->attbyval, att->attlen))\n}\n\tBTPageOpaque opaque = BTPageGetOpaque(page);\n\tint\t\t\ttupnatts;", "partial_line": "if (", "completion": "if (P_IGNORE(opaque)) <|endoftext|>"}
{"context": "\t\t\tcase GIN_EXTRACTQUERY_PROC:\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tINTERNALOID, INTERNALOID,\n\t\t\t\tbreak;\n\t\t\tcase GIN_OPTIONS_PROC:", "partial_line": "cont", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\tif (N > 0)\n\t\t\t\tstadistinct = 0;\n\t\tif (stats->stadistinct > 0.1 * totalrows)\n\t\t{\n\t\t}", "partial_line": "stats->stacoll[slot_idx] =", "completion": "stats->stacoll[slot_idx] = stats->attrcollid; <|endoftext|>"}
{"context": "\tfmt = \"abc%n %C %B %%%d %H:%M:%S %Z %y\";\n\tin = \"  1976, July 14. Time: 9:15am\";\n\tfmt = \"%Y,   %B %d. Time: %I:%M%p\";\n\ti = PGTYPEStimestamp_defmt_asc(in, fmt, &ts1);\n\tin = \"1234567890\";", "partial_line": "text = PGTYPEStimestamp_t", "completion": "text = PGTYPEStimestamp_to_asc(ts1); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\tereport(ERROR,\n\t\t\t\t\t\trelname, get_rel_name(partdesc->oids[with])),\n\tList\t   *new_part_constraints;\n\tdef_part_constraints =", "partial_line": "all_parts = find_all_inheritors", "completion": "all_parts = find_all_inheritors(RelationGetRelid(default_rel), <|endoftext|>"}
{"context": "\tint\t\t\ti,\n\tcommonLen = VARSIZE_ANY_EXHDR(text0);\n\t{\n\t\tif (tmp < commonLen)\n\t\tout->hasPrefix = true;", "partial_line": "nodes[i].c =", "completion": "nodes[i].c = *(unsigned char *) (VARDATA_ANY(texti) + commonLen); <|endoftext|>"}
{"context": "\t\t\tif (xldata->offnumHeadLeaf != InvalidOffsetNumber)\n\t\t\t{\n\t\t\t\telog(ERROR, \"failed to add item of size %u to SPGiST index page\",\n\t\t\t\t\t leafTupleHdr.size);\n\t\tMarkBufferDirty(buffer);", "partial_line": "BlockNumber blk", "completion": "BlockNumber blknoLeaf; <|endoftext|>"}
{"context": "#include \"libpq/pqformat.h\"\n#include \"utils/memutils.h\"\nint", "partial_line": "WordEnt", "completion": "WordEntryPos *ptr, <|endoftext|>"}
{"context": "\t\tmemset(&ctx->m.b8[padstart], 0, padlen);\n\t\tsha1_step(ctx);\n\tCOUNT += (padlen - 8);\n\tCOUNT %= 64;\n\tPUTPAD(ctx->c.b8[0]);", "partial_line": "PUTP", "completion": "PUTPAD(ctx->c.b8[1]); <|endoftext|>"}
{"context": "\t\tif (IsA(lfirst(arg), Const))\n\tnewexpr = makeNode(FuncExpr);\n\tnewexpr->funcretset = false;\n\t\t\t\tOid input_collid, List *args,\n\t\t\t\tHeapTuple func_tuple,", "partial_line": "ch", "completion": "char\t   *src; <|endoftext|>"}
{"context": "\t\t\tdisreplication = defel;\n\t\t\tif (dconnlimit)\n\t\t\t\t stmt->action != 0)\n\t\t{\n\t\t\t\t\t errdetail(\"Only roles with the %s attribute and the %s option on role \\\"%s\\\" may alter this role.\",", "partial_line": "errmsg(\"permissi", "completion": "errmsg(\"permission denied to alter role\"), <|endoftext|>"}
{"context": "#include \"catalog/indexing.h\"\n#include \"catalog/objectaccess.h\"", "partial_line": "#include \"c", "completion": "#include \"catalog/pg_type.h\" <|endoftext|>"}
{"context": "#include \"optimizer/cost.h\"\n#include \"optimizer/placeholder.h\"\n\tint\t\t\tsublevels_up;\n\tphv->phrels = phrels;\n\tphv->phnullingrels = NULL;\t", "partial_line": "phv-", "completion": "phv->phlevelsup = 0; <|endoftext|>"}
{"context": "\t\tres = table_tuple_lock(rel, &(outslot->tts_tid), GetActiveSnapshot(),\n\t\t\t\t\t\t\t   LockWaitBlock,\n\t\t\t\t\t\t\t   &tmfd);\n\tAssert(slot1->tts_tupleDescriptor->natts ==\n\t\t   slot2->tts_tupleDescriptor->natts);", "partial_line": "if (att-", "completion": "if (att->attisdropped || att->attgenerated) <|endoftext|>"}
{"context": "\tfree_variable(stmt->inlist);\n#endif\n\t\tif (string && !std_strings && text[p] == '\\\\')\t\n\t\t\t\t\tisascii((unsigned char) text[i]) && text[i] != '_')\n\t\t\t{", "partial_line": "ret", "completion": "return p; <|endoftext|>"}
{"context": "#include \"storage/standbydefs.h\"\ninfobits_desc(StringInfo buf, uint8 infobits, const char *keyname)\n\t\tappendStringInfoString(buf, \"LOCK_ONLY, \");", "partial_line": "if (infobits &", "completion": "if (infobits & XLHL_XMAX_KEYSHR_LOCK) <|endoftext|>"}
{"context": "\tnOutputRuns = (nInputRuns + nInputTapes - 1) / nInputTapes;\n\t}\n\tif (trace_sort)\n\t\tLogicalTapeSetCreate(false,\n{", "partial_line": "tapeSpace", "completion": "tapeSpace = (int64) maxTapes * TAPE_BUFFER_OVERHEAD; <|endoftext|>"}
{"context": "\tvoid\t   *junk_mapped_address = NULL;\n\tnitems = dsm_control->nitems;\n\t{\n\t\tdsm_handle\thandle;\n\t\tdsm_impl_op(DSM_OP_DESTROY, handle, 0, &junk_impl_private,", "partial_line": "if (!dsm_control_segment_sa", "completion": "if (!dsm_control_segment_sane(dsm_control, dsm_control_mapped_size)) <|endoftext|>"}
{"context": "\t{\n\t\t\tcontinue;\n\t\t\t\t\t\t  extraUpdatedCols))\n\tif (!hasexpression)\n\tif (!extraUpdatedCols)", "partial_line": "list_free(idxE", "completion": "list_free(idxExprs); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tneed_full_snapshot, in_create, slot->data.two_phase_at);\n\tctx->reorder->private_data = ctx;\n\tctx->reorder->apply_truncate = truncate_cb_wrapper;\n\tctx->reorder->stream_prepare = stream_prepare_cb_wrapper;\n\t\t(ctx->callbacks.commit_prepared_cb != NULL) ||", "partial_line": "(ctx->callbacks.stream_prepare_", "completion": "(ctx->callbacks.stream_prepare_cb != NULL) || <|endoftext|>"}
{"context": "\t\t gnames != NULL;\t\t\n\tconflines[1] = pg_strdup(\"# It will be overwritten by the ALTER SYSTEM command.\\n\");\n\tconflines[2] = NULL;\n\twritefile(path, conflines);\n\t\tint\t\t\terr = 0;", "partial_line": "WSADATA", "completion": "WSADATA\t\twsaData; <|endoftext|>"}
{"context": "\tOffsetNumber lower;\n\t\tuint32\t\thashkey;\n\t\tif (hashkey < hash_value)\n\tOffsetNumber upper;\n\tlower = FirstOffsetNumber - 1;", "partial_line": "Assert(Offset", "completion": "Assert(OffsetNumberIsValid(off)); <|endoftext|>"}
{"context": "\t\t\tpg_fatal(\"cannot use the \\\"%s\\\" option when performing only analyze\",\n\t\t\t\t\t \"no-truncate\");\n\t{\n\t\t\t\t\t \"parallel\");\n\tsetup_cancel_handler(NULL);", "partial_line": "&", "completion": "&objects, <|endoftext|>"}
{"context": "\t\t\t\t(errmsg(\"recovery stopping after reaching consistency\")));\n\t\trecoveryStopAfter = true;\n\t\t\t\t LSN_FORMAT_ARGS(recoveryStopLSN));\n\tif (endOfRecovery)\nrecoveryApplyDelay(XLogReaderState *record)", "partial_line": "delayUntil = TimestampTzPlusMilliseconds(xti", "completion": "delayUntil = TimestampTzPlusMilliseconds(xtime, recovery_min_apply_delay); <|endoftext|>"}
{"context": "\tplansource->is_valid = false;\n\tMemoryContext oldcxt;\n\tplansource->query_list = NIL;\n\tplansource->search_path = NULL;\n\tplansource->num_generic_plans = 0;", "partial_line": "MemoryContext qu", "completion": "MemoryContext querytree_context, <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t PG_GETARG_INT64(1));\nDatum\n}\n\t}", "partial_line": "inet\t   *a2 =", "completion": "inet\t   *a2 = PG_GETARG_INET_PP(1); <|endoftext|>"}
{"context": "\t\tif (node->shared_info && node->am_worker)\n\t\t}\n\tif (node->datumSort)\n\t{\n\t\tif (tuplesort_getdatum(tuplesortstate, ScanDirectionIsForward(dir),", "partial_line": "SortSt", "completion": "SortState  *sortstate; <|endoftext|>"}
{"context": "\t\t\tif (recurse)\n\t\ttable_close(attr_rel, RowExclusiveLock);\nstatic void\n\tif (!recurse)\n\t\t\t\tHeapTuple\ttup;", "partial_line": "if (conForm->conno", "completion": "if (conForm->connoinherit) <|endoftext|>"}
{"context": "\t\tnumIndexPages = 1.0;\n\tget_tablespace_page_costs(index->reltablespace,\n\t\t\t\t\t\t\t  &spc_random_page_cost,\n\tqual_op_cost = cpu_operator_cost *\n\t\t(list_length(indexQuals) + list_length(indexOrderBys));", "partial_line": "costs->index", "completion": "costs->indexSelectivity = indexSelectivity; <|endoftext|>"}
{"context": "\t\t\t\tmask = mask | 2;\n\t\t\t\tmask = mask | 1;\n\t\t\t\t\t\t errmsg(\"unrecognized weight: \\\"%c\\\"\", char_weight)));\n\tfor (i = j = 0; i < tsin->size; i++)\n\t\tint\t\t\tnpos = 0;", "partial_line": "arrout[j].haspos", "completion": "arrout[j].haspos = true; <|endoftext|>"}
{"context": "\tlog_timezone = *((pg_tz **) extra);\n}\n\t\treturn false;\n}\n{", "partial_line": "if (*newval == false && XactReadOnly", "completion": "if (*newval == false && XactReadOnly && IsTransactionState() && !InitializingParallelWorker) <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),\nvoid\nmda_next_tuple(int n, int *curr, const int *span)\n\t\treturn -1;\n\tif (curr[0])", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tmy_extra->record_type = tupType;\n\t\tColumnIOData *column_info = &my_extra->columns[i];\n\t\tbool\t\tnq;\n\t\tif (att->attisdropped)\n\t\t\tgetTypeOutputInfo(column_type,", "partial_line": "fcinfo->flin", "completion": "fcinfo->flinfo->fn_mcxt); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\"OPERATOR CLASS\", nameusing->data,\n\tif (opcinfo->dobj.dump & DUMP_COMPONENT_DEFINITION)\n\t\tdumpComment(fout, \"OPERATOR CLASS\", nameusing->data,\n\tPQExpBuffer query;\n\tint\t\t\ti_amname;", "partial_line": "int", "completion": "int\t\t\ti_sortfamilynsp; <|endoftext|>"}
{"context": "\t\t*defined = false;\n\toprcode = get_opcode(operatorObjectId);\n{\n\tDatum\t\tvalues[Natts_pg_operator];\n\t\t\t\t(errcode(ERRCODE_INVALID_NAME),", "partial_line": "makeOperator", "completion": "makeOperatorDependencies(tup, true, false); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t}\n\t\t}\n\tLWLockRelease(SerializableXactHashLock);\n}", "partial_line": "NUL", "completion": "NULL, InvalidPid); <|endoftext|>"}
{"context": "\tfor (i = 0; i < path->npts; i++)\n\t\tpoint_sub_point(&path->p[i], &path->p[i], point);\n}\n}\nDatum", "partial_line": "path_div_pt", "completion": "path_div_pt(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\tcase 6:\n}\n\ta = b = c = 0x9e3779b9 + len + 3923095;\n\tif (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)\n\t\t}", "partial_line": "case", "completion": "case 8: <|endoftext|>"}
{"context": "#line 26 \"dynalloc2.pgc\"\n#line 29 \"dynalloc2.pgc\"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);\nif (sqlca.sqlcode < 0) sqlprint ( );}\n#line 35 \"dynalloc2.pgc\"", "partial_line": "{ ECPGget_", "completion": "{ ECPGget_desc(__LINE__, \"mydesc\", 2,ECPGd_indicator, <|endoftext|>"}
{"context": "}\n\tint\t\t\ti;\n\tif (nitems == 0)\n\t\t\t\t\t\t &my_extra->typlen, &my_extra->typbyval,\n\t\tchar\t   *value;", "partial_line": "appendStri", "completion": "appendStringInfo(&buf, \"%s%s\", fldsep, null_string); <|endoftext|>"}
{"context": "\tconst struct zone *zp;\n\tbool\t\tusestart,\n\tbool\t\tstartttisstd;\n\tint\t\t\ttype;\n\t\t\twarning(\"%s %s\",", "partial_line": "\" distant", "completion": "\" distant timestamps\"), <|endoftext|>"}
{"context": "static List *pull_ands(List *andlist);\nnegate_clause(Node *node)\n\t\t\t\tOid\t\t\tnegator = get_negator(opexpr->opno);\n\t\t\t\t{", "partial_line": "return (Node *) ne", "completion": "return (Node *) newopexpr; <|endoftext|>"}
{"context": "\t\ti_rule = ZF_RULE;\n\tz.z_stdoff = gethms(fields[i_stdoff], _(\"invalid UT offset\"));\n\t}\n\t\t\t\ttod;\n\t}", "partial_line": "j = EPOCH_", "completion": "j = EPOCH_YEAR; <|endoftext|>"}
{"context": "\t.ReleaseResource = ResOwnerReleaseCachedPlan,\nInitPlanCache(void)\n{\n}\nCreateCachedPlan(RawStmt *raw_parse_tree,", "partial_line": "plansource->", "completion": "plansource->param_types = NULL; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t bool skipped, StatsData *agg)\n\tdouble\t\tlatency = 0.0,\n\t\tuse_log || per_script_stats;\n\tif (latency_limit && latency > latency_limit)", "partial_line": "\"pgbench_hist", "completion": "\"pgbench_history, \" <|endoftext|>"}
{"context": "\t\t\tconn->notifyTail->next = newNotify;\n\t}\n\tfree(svname);\nstatic int\n\t\tgoto failure;", "partial_line": "nfields = result", "completion": "nfields = result->numAttributes; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t vacrel->tuples_deleted,\n\t\t\t\t\t\t\t\t _(\"tuples missed: %\" PRId64 \" dead from %u pages not removed due to cleanup lock contention\\n\"),\n\t\t\t\t\t\t\t vacrel->cutoffs.OldestXmin, diff);\n\t\t\t\t\t\t\t\t vacrel->NewRelfrozenXid, diff);\n\t\t\t\t\t\t\t\t vacrel->NewRelminMxid, diff);", "partial_line": "orig_rel", "completion": "orig_rel_pages == 0 ? 100.0 : <|endoftext|>"}
{"context": "\t{\n\t\t\tcontinue;\t\t\t\n\t\tif (is_redundant_with_indexclauses(rinfo, indexclauses))\n\t\tqpqual = lappend(qpqual, rinfo);\n\t\tindexorderbys = (List *)", "partial_line": "exprty", "completion": "exprtype, <|endoftext|>"}
{"context": "\tif (TransactionIdIsValid(sxact->topXid) && !SxactIsReadOnly(sxact))\nstatic Snapshot\n\t\t\t\t SxactIsROUnsafe(MySerializableXact)))\n\t\tLWLockRelease(SerializableXactHashLock);\n\t\tif (sxact->pid == blocked_pid)", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tHeapTupleHeaderSetCmax(tp.t_data, cid, iscombo);\n\t\tif (all_visible_cleared)\n\t\txlrec.infobits_set = compute_infobits(tp.t_data->t_infomask,\n\t\tXLogRegisterData(&xlrec, SizeOfHeapDelete);\n\t\t\txlhdr.t_hoff = old_key_tuple->t_data->t_hoff;", "partial_line": "old_", "completion": "old_key_tuple->t_len <|endoftext|>"}
{"context": "\tpt = (Form_pg_type) GETSTRUCT(typeTuple);\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t*typIOParam = getTypeIOParam(typeTuple);\nvoid\ngetTypeBinaryOutputInfo(Oid type, Oid *typSend, bool *typIsVarlena)", "partial_line": "*typSend = pt->t", "completion": "*typSend = pt->typsend; <|endoftext|>"}
{"context": "\ttext\t   *result;\n\tresult = cstring_to_text(out_string);\n\tPG_RETURN_TEXT_P(result);", "partial_line": "initcap(PG", "completion": "initcap(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\tappendStringInfo(buf, \" isdata: %c isleaf: %c\",\n\t\t\t\t\t\t\t\t (xlrec->flags & GIN_INSERT_ISDATA) ? 'T' : 'F',\n\t\t\t\t\tif (XLogRecBlockImageApply(record, 0))\n\t\t\t\t\t\t(ginxlogVacuumDataLeafPage *) XLogRecGetBlockData(record, 0, NULL);\n\t\t\tbreak;", "partial_line": "case XLOG_GIN_", "completion": "case XLOG_GIN_SPLIT: <|endoftext|>"}
{"context": "\tTimestampTz last_status = -1;\n\tif (verbose)\n\tquery = createPQExpBuffer();\n\twhile (!time_to_abort)\n\t\tTimestampTz now;", "partial_line": "if (co", "completion": "if (copybuf != NULL) <|endoftext|>"}
{"context": "\t*best_path = NIL;\n\t{\n\t\tif (!evi1->installable)\n\t\t\tcontinue;\nCreateExtensionInternal(char *extensionName,", "partial_line": "char\t   *f", "completion": "char\t   *filename; <|endoftext|>"}
{"context": "\t\t\t\t\t   int rt_index,\n\t\t\t\t\t\t\t\t\t\t\t REPLACEVARS_CHANGE_VARNO :\n\treturn parsetree;\nstatic List *\n\t\t  CmdType event,", "partial_line": "List *l", "completion": "List *locks, <|endoftext|>"}
{"context": "\toutput_str = range_deparse(flags, lbound_str, ubound_str);\n\tOid\t\t\trngtypoid = PG_GETARG_OID(1);\n\tchar\t\tflags;\n\tcheck_stack_depth();\t\t\n\t{", "partial_line": "initStringInfo(&bo", "completion": "initStringInfo(&bound_buf); <|endoftext|>"}
{"context": "\treturn patternsel_common(root,\n\t\t\t\t\t\t\t args,\nDatum\n}\nDatum", "partial_line": "prefi", "completion": "prefixsel(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "#include \"utils/snapmgr.h\"\n#define MAX_PORTALNAME_LEN\t\tNAMEDATALEN\n} PortalHashEnt;\nstatic HTAB *PortalHashTable = NULL;", "partial_line": "#define PortalHash", "completion": "#define PortalHashTableInsert(PORTAL, NAME) \\ <|endoftext|>"}
{"context": "\t}\n\t\t\tcase T_Boolean:\n\t\t\tcase T_String:\n\t\t\t\tbreak;\nstatic Bitmapset *", "partial_line": "copyObjectImpl(const v", "completion": "copyObjectImpl(const void *from) <|endoftext|>"}
{"context": "\t\t\t\ttypeStruct = (Form_pg_type) GETSTRUCT(typeTup);\n\t\t\t\t\tereport(ERROR,\n\t\t\t\t\tprodesc->arg_is_rowtype[i] = false;\n\t\t}\n\t\tselect_perl_context(prodesc->lanpltrusted);", "partial_line": "HASH_ENTE", "completion": "HASH_ENTER, NULL); <|endoftext|>"}
{"context": "\t\t\tid = \"NEXTOID\";\n\t\tcase XLOG_END_OF_RECOVERY:\n\tint\t\t\tblock_id;\n\t\tForkNumber\tforknum;\n\t\t\tif (pretty)", "partial_line": "appe", "completion": "appendStringInfo(buf, <|endoftext|>"}
{"context": "}\nstatic void\n\t\t\t\t\t\t\t\t  InvalidateTableSpaceCacheCallback,\n\tif (!TableSpaceCacheHash)\n\t\t\t\t\t\t\t\t\t\t\t   HASH_FIND,", "partial_line": "bool", "completion": "bool\t\tisNull; <|endoftext|>"}
{"context": "\t\tif (!ssl_done && !gss_done)\n\t\tif (!LoadedSSL || port->laddr.addr.ss_family == AF_UNIX || port->ssl_in_use)\n\t\telse\n\t\t\t\tereport(LOG,\n\t\t{", "partial_line": "retu", "completion": "return STATUS_ERROR; <|endoftext|>"}
{"context": "\t\t(!(psrc->raw_parse_tree &&\n\t\t{\n\t\t\tStringInfoData pbuf;\n\t\t\tone_param_data.paramval = NULL;\n\t\t\telse", "partial_line": "pbuf.", "completion": "pbuf.data = NULL; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\telse if (TRIGGER_FIRED_BY_DELETE(trigdata->tg_event))\n\t\t\t{\n\t\t\t\tTcl_ListObjAppendElement(NULL, tcl_cmd,\n\t\t\t\t\t\t\t\t\t\t pltcl_build_tuple_argument(trigdata->tg_newtuple,", "partial_line": "true", "completion": "true)); <|endoftext|>"}
{"context": "\t\tNode\t   *colexpr;\n\t\tNode\t   *coldefexpr;\n\t\t\ttypid = INT4OID;\n\t\t{\n\t\t\t\t\t\t\t\trawc->colname),", "partial_line": "tf->coltypmods = lapp", "completion": "tf->coltypmods = lappend_int(tf->coltypmods, typmod); <|endoftext|>"}
{"context": "\t{p_iseqC, 'E', A_PUSH, TPS_InMantissaFirst, 0, NULL},\n\t{p_iseqC, '/', A_BINGO, TPS_Base, SPACE, NULL},\n\t{p_isnotalnum, 0, A_NEXT, TPS_InSpace, 0, NULL},\n};\nstatic const TParserStateActionItem actionTPS_InDecimal[] = {", "partial_line": "{p_isdigit, 0, A_NEXT, TPS_InDec", "completion": "{p_isdigit, 0, A_NEXT, TPS_InDecimal, 0, NULL}, <|endoftext|>"}
{"context": "\t\t\t\tlex->prev_token_terminator = lex->token_terminator;\n\t\t\t\tlex->token_type = JSON_TOKEN_COMMA;\n\t\t\tcase ':':\n\t\t\t\t\treturn result;\n\t\t\tcase '2':", "partial_line": "case '", "completion": "case '6': <|endoftext|>"}
{"context": "\t{\n\t\t\tbreak;\n\t\t\t\t{\n\tMemoryContext oldcontext;\n\t\t\t\t\twdatum->idents = NIL;", "partial_line": "ns->item", "completion": "ns->itemtype); <|endoftext|>"}
{"context": "\t\tif (context->outer_itlist)\n\t\t\t\t\t\t\t\t\t\t\t\t  context->outer_itlist,\n\t\tif (context->inner_itlist)\n\t\t\t\t\t\t\t\t\t\t\t\t  context->inner_itlist,\n\t\t\tvar->varno += context->rtoffset;", "partial_line": "elog(ERROR, \"vari", "completion": "elog(ERROR, \"variable not found in subplan target lists\"); <|endoftext|>"}
{"context": "\tfor (;;)\n\t\t\told_buf_state = WaitBufHdrUnlocked(bufHdr);\n\t\tbuf_state = old_buf_state;\n\t\tif (pg_atomic_compare_exchange_u32(&bufHdr->state, &old_buf_state,\n\t}", "partial_line": "if (VacuumCo", "completion": "if (VacuumCostActive) <|endoftext|>"}
{"context": "\t\tcase T_CommonTableExpr:\n\t\t\t\t\treturn true;\n\t\t\tbreak;\n\t\tcase T_JsonObjectConstructor:\n\t\t\t\tif (LIST_WALK(ctor->exprs))", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tPath\t   *input_path = (Path *) lfirst(lc);\n\t\t\tList\t   *useful_pathkeys_list = NIL;\n\t\t\t\t\t\t\t\t\t\t\t\tinput_path,\n\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\tFLOAT8PASSBYVAL);", "partial_line": "add_path(dis", "completion": "add_path(distinct_rel, (Path *) <|endoftext|>"}
{"context": "#include \"common/string.h\"\nstatic void notice_processor(void *arg, const char *message);\n\tremoteversion_str = PQparameterStatus(AH->connection, \"server_version\");", "partial_line": "ropt->cparams.overri", "completion": "ropt->cparams.override_dbname = pg_strdup(dbname); <|endoftext|>"}
{"context": "\tint\t\t\tinner_default = inner_bi->default_index;\n\tPartitionRangeBound outer_lb;\n\t\t\t\t\t\t\t\t\t  &inner_lb, &inner_ub);\n\t\tint\t\t\tlb_cmpval;\n\t\t\tAssert(outer_map.merged_indexes[outer_index] == -1 &&", "partial_line": "outer_map.merged[outer_i", "completion": "outer_map.merged[outer_index] == false); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\tsqlda->sqlvar[i].sqlind = isnull ? &value_is_null : &value_is_not_null;\n\tecpg_log(\"ecpg_build_native_sqlda on line %d sqld = %d\\n\", line, sqlda->sqld);\n\treturn sqlda;\n{", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "{\n\tconst FileNameMap *map1 = (const FileNameMap *) a;\n\tchar\t   *endp;\n\tdir = opendir(new_db_dir);\n\tif (dir == NULL)", "partial_line": "rfn = parse", "completion": "rfn = parse_relfilenumber(de->d_name); <|endoftext|>"}
{"context": "\t\t\t\t\t\t &my_extra->typlen, &my_extra->typbyval,\n\t\tchar\t   *value;\n\t\t\t\t\tappendStringInfo(&buf, \"%s%s\", fldsep, null_string);\n\t\t\t\telse\n\t\tif (bitmap)", "partial_line": "if (bitm", "completion": "if (bitmask == 0x100) <|endoftext|>"}
{"context": "\t\t\treturn;\n\t\t\tendp = scanplain(v);\n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tNEXT();", "partial_line": "de", "completion": "default: <|endoftext|>"}
{"context": "\t\telse\n\t\t\t(void) pushJsonbValue(st, WJB_BEGIN_ARRAY, NULL);\n\t\t\ttpath[i - level] = jbvArray;\n\t}\n\tif (tpath[(path_len - level) - 1] == jbvArray)", "partial_line": "for (int i = path_len - 1; i", "completion": "for (int i = path_len - 1; i > level; i--) <|endoftext|>"}
{"context": "\t\t}\n\t\t\tAssert(rel->rd_indexcxt == NULL);\n\t\t\tAssert(rel->rd_opcintype == NULL);\n\t\trel->rd_partkey = NULL;\n\t\trel->rd_exclprocs = NULL;", "partial_line": "rel->rd_pkinde", "completion": "rel->rd_pkindex = InvalidOid; <|endoftext|>"}
{"context": "\t\t\t\t\t*d++ = '\\\\';\n\t\t}\n\t}\n\t\t\tchar\t   *name = strVal(lfirst(cell));\n\t\tvalues[Anum_pg_trigger_tgqual - 1] = CStringGetTextDatum(qual);", "partial_line": "nulls[Anum_pg_trigger_", "completion": "nulls[Anum_pg_trigger_tgoldtable - 1] = true; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t&isnull);\n\tCatalogTupleUpdate(rel, &tp->t_self, tp);\n\t\tObjectAddress referenced;\n\t\t{", "partial_line": "recordDependencyOn(&myself, &referen", "completion": "recordDependencyOn(&myself, &referenced, DEPENDENCY_NORMAL); <|endoftext|>"}
{"context": "\t\t\t\telse if (padding != 0)\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t\tchar\t\tstrfbuf[128];\n\t\t\t\t\tsnprintf(strfbuf, sizeof(strfbuf) - 1, INT64_HEX_FORMAT \".%x\",", "partial_line": "if", "completion": "if (MyProc) <|endoftext|>"}
{"context": "\tphv->phrels = phrels;\n\tphv->phnullingrels = NULL;\t\n\tphv->phlevelsup = 0;\t\t\nPlaceHolderInfo *\n\tRelids\t\trels_used;", "partial_line": "Assert(phi", "completion": "Assert(phinfo->phid == phv->phid); <|endoftext|>"}
{"context": "#include \"nodes/nodeFuncs.h\"\n#include \"parser/parsetree.h\"\n{\n{\n\t\t\t\t\t\t\t\t\t\t   List *prunequal,", "partial_line": "GeneratePruningStepsCo", "completion": "GeneratePruningStepsContext *context); <|endoftext|>"}
{"context": "\tdshash_table_item *item;\n\t\t\t\t\t\t\t\thash_table->params.entry_size +\nstatic bool\n\t\t\tdsa_pointer next;\n\t\t\tnext = item->next;", "partial_line": "dsa_free(hash_table->area, *", "completion": "dsa_free(hash_table->area, *bucket_head); <|endoftext|>"}
{"context": "\tunary_delim = true;\n    case '>':\n    case '<':\n    case '!':\t\t\t\n\t    *e_token++ = *buf_ptr++;", "partial_line": "c", "completion": "case '*': <|endoftext|>"}
{"context": "#endif\n{\n#if defined(EWOULDBLOCK) && (!defined(EAGAIN) || (EWOULDBLOCK != EAGAIN))\n\t\t\tcase EWOULDBLOCK:\n\t\t\t\tBIO_set_retry_write(h);", "partial_line": "defa", "completion": "default: <|endoftext|>"}
{"context": "\t{\n\t\tVar\t\t   *newvar;\n\t\t\t\t\t\t tle->resno,\n\t\t}\n\t\ttle = flatCopyTargetEntry(tle);", "partial_line": "tle->expr =", "completion": "tle->expr = (Expr *) newvar; <|endoftext|>"}
{"context": "#include \"postgres.h\"\nstatic PyObject *PLy_subtransaction_exit(PyObject *self, PyObject *args);", "partial_line": "Py_tp_doc, (char *) PLy_subtr", "completion": "Py_tp_doc, (char *) PLy_subtransaction_doc <|endoftext|>"}
{"context": "{ 4, s_5_1, -1, 2, 0},\n{ 5, s_5_11, -1, 8, 0},\n{ 5, s_5_13, -1, 11, 0},\n};\nstatic const symbol s_6_7[3] = { 'f', 'u', 'l' };", "partial_line": "static", "completion": "static const struct among a_6[9] = <|endoftext|>"}
{"context": "\t\telse\n}\n}\n\tchar\t   *thresholds_data;\n\tint\t\t\tleft;", "partial_line": "right = Array", "completion": "right = ArrayGetNItems(ARR_NDIM(thresholds), ARR_DIMS(thresholds)); <|endoftext|>"}
{"context": "\t\t\tcontext->rightLower = rightLower;\n\tint\t\t\tdim,\n\tint\t\t\tnentries;\n\tfor (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))\n\t\telse", "partial_line": "context.firs", "completion": "context.first = true; <|endoftext|>"}
{"context": "\t\treturn -1;\n\t\tstateP->hasMessages = true;\n\t\t\t\tnumMsgs,\n\t\t\tstateP->resetState = true;\n\t\tif (n < minsig && !stateP->signaled)", "partial_line": "if (num", "completion": "if (numMsgs < CLEANUP_MIN) <|endoftext|>"}
{"context": "\t\tBufferDesc *buf_hdr = GetLocalBufferDescriptor(buffid);\n\t\treturn false;\nstatic Block\n\tstatic char *cur_block = NULL;\n\tstatic MemoryContext LocalBufferContext = NULL;", "partial_line": "if (next_buf_in_b", "completion": "if (next_buf_in_block >= num_bufs_in_block) <|endoftext|>"}
{"context": "\t}\n\t}\n\t}\n\t}\n\t\tresult = find_nonnullable_rels_walker((Node *) phv->phexpr, top_level);", "partial_line": "var->varattno -", "completion": "var->varattno - FirstLowInvalidHeapAttributeNumber); <|endoftext|>"}
{"context": "pgwin32_is_service(void)\n\tstatic int\t_is_service = -1;\n\tif (!AllocateAndInitializeSid(&NtAuthority, 1,\n\t\t\t\t\t\t\t\t  &LocalSystemSid))\n\t}", "partial_line": "fprintf(stderr, \"could", "completion": "fprintf(stderr, \"could not check access token membership: error code %lu\\n\", <|endoftext|>"}
{"context": "};\n{", "partial_line": "((FPM_PAGE_SIZE - sizeof(", "completion": "((FPM_PAGE_SIZE - sizeof(FreePageBtreeHeader)) / \\ <|endoftext|>"}
{"context": "\t\t\t\tlower2,\n\tif (MultirangeTypeGetOid(mr1) != MultirangeTypeGetOid(mr2))\n\tRangeType  *r = PG_GETARG_RANGE_P(0);\nstatic int\n\t\t\t\t\t\t\t\t\t\t\t void *key, bool *match)", "partial_line": "RangeBound *keyLower = (R", "completion": "RangeBound *keyLower = (RangeBound *) key; <|endoftext|>"}
{"context": "\tnewec->ec_sortref = sortref;\n\t\t\tcontain_agg_clause((Node *) expr) ||\n\t{\n\t}\nEquivalenceMember *", "partial_line": "Equiv", "completion": "EquivalenceMemberIterator it; <|endoftext|>"}
{"context": "char *\n\telse\n\t\tnspname = NULL;\nstatic text *\nstatic void", "partial_line": "appendStringInfoStri", "completion": "appendStringInfoString(buf, \", \"); <|endoftext|>"}
{"context": "\t\tint\t\t\tnumfkdelsetcols;\n\t\tObjectAddress address;\n\t\tbool\t\twith_period;\n\t\tif (list_member_oid(clone, constrForm->conparentid))\n\t\t\t\t\t\t\t\t\t\t\t confkey,", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t{\n\tfor (p = result; *p != '\\0'; ++p)\n\t\tswitch (state)\n\t\t\t\t{\n\t\t\t\t{", "partial_line": "libpq_append_err", "completion": "libpq_append_error(errorMessage, <|endoftext|>"}
{"context": "\t\t\tif (predicate != NULL)\n\t\t\t{\n\t\t\t\t\tVacAttrStats *stats = thisdata->vacattrstats[i];\n\t\t\t\t\t}\n\t\tMemoryContextSwitchTo(ind_context);", "partial_line": "Hea", "completion": "HeapTuple\tatttuple; <|endoftext|>"}
{"context": "\t{\n\t\t\tAssert((pageopaque->hasho_flag & LH_PAGE_TYPE) == LH_BUCKET_PAGE);\n\tfirst_page = orig_firstfree >> BMPG_SHIFT(metap);\n\t\tPage\t\tmappage;\n\t\t\tlast_inpage = BMPGSZ_BIT(metap) - 1;", "partial_line": "for (; bit", "completion": "for (; bit <= last_inpage; j++, bit += BITS_PER_MAP) <|endoftext|>"}
{"context": "\t\t&astreamer_gzip_decompressor_ops;\n\tstreamer->base.bbs_next = next;\n\tinitStringInfo(&streamer->base.bbs_buffer);\n\tzs = &streamer->zstream;\n\tastreamer_gzip_decompressor *mystreamer;", "partial_line": "mystreamer->byt", "completion": "mystreamer->bytes_written = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\tappendPQExpBufferChar(&catalog_query, ',');\n\t\t\t\t\t\t\t\t\t \" ORDER BY c.relpages DESC;\");\n\tres = executeQuery(conn, catalog_query.data, echo);\n\ttermPQExpBuffer(&catalog_query);\n\tntups = PQntuples(res);", "partial_line": "if (", "completion": "if (ntups == 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   jspThrowErrors(cxt) ? NULL : (Node *) &escontext);\n\t\t\tres = jperOk;\n\t\t\t\"HH24:MI:SS.USTZ\",\t\n\t\t\t\"yyyy-mm-dd\\\"T\\\"HH24:MI:SS.USTZ\",\n\t\tif (jsp->type != jpiDatetime && jsp->type != jpiDate &&", "partial_line": "if (e", "completion": "if (elem.type != jpiNumeric) <|endoftext|>"}
{"context": "\t\t\t\t   NULL);\n\t\treturn false;\n\tecpg_init_sqlca(sqlca);\n\t\tsqlca = malloc(sizeof(struct sqlca_t));\n\t}", "partial_line": "if", "completion": "if (con == NULL) <|endoftext|>"}
{"context": "\t{\n{\n\tif (plan == NULL)\n\t\t\telog(ERROR, \"parallel-aware plan node is not below a Gather\");\n\t\t\tbreak;", "partial_line": "&cont", "completion": "&context); <|endoftext|>"}
{"context": "\tif (node->sinstrument != NULL && IsParallelWorker())\n\t}\n\tscanstate = makeNode(BitmapHeapScanState);\n\tscanstate->ss.ps.plan = (Plan *) node;\n\tscanstate->ss.ps.ExecProcNode = ExecBitmapHeapScan;", "partial_line": "scan", "completion": "scanstate->ss.ps.qual = <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t{\n\t\t\t (int) nodeTag(jtnode));\n\t\tremove_useless_results_recurse(root,\n\t\t\tremove_nulling_relids((Node *) root->parse,", "partial_line": "NUL", "completion": "NULL); <|endoftext|>"}
{"context": "#endif\n}\nextern void lithuanian_UTF_8_close_env(struct SN_env * z);\n#endif\nstatic const symbol s_0_0[1] = { 'a' };", "partial_line": "static const symbo", "completion": "static const symbol s_0_10[2] = { 'i', 'e' }; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t List *forced_null_vars)\n\t\t\t\tif (bms_overlap(nonnullable_rels, right_state->relids))\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t right_state->relids);", "partial_line": "tmp", "completion": "tmparg = j->larg; <|endoftext|>"}
{"context": "\t\t\tlev = LOGSTMT_MOD;\n\t\tcase T_SelectStmt:\n\t\t\t\tlev = LOGSTMT_DDL;\t\n\t\t\tlev = LOGSTMT_ALL;\n\t\t\tlev = LOGSTMT_ALL;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\tgoto change_done;\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tif (RelationIsValid(relation))\n\t\t\t\t\t{", "partial_line": "ReorderBu", "completion": "ReorderBufferToastReset(rb, txn); <|endoftext|>"}
{"context": "typedef struct\nstatic void _LoadLOs(ArchiveHandle *AH, TocEntry *te);\n#endif\nstatic int\ttarPrintf(TAR_MEMBER *th, const char *fmt,...) pg_attribute_printf(2, 3);\n\tAH->ArchiveEntryPtr = _ArchiveEntry;", "partial_line": "AH->formatData", "completion": "AH->formatData = ctx; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   CP_EXACT_TLIST);\n\tcplan->custom_relids = best_path->path.parent->relids;\n\tif (best_path->path.param_info)\n}\n\tRelids\t\tsaveOuterRels = root->curOuterRels;", "partial_line": "if (IS_OUTER_JOIN(best_path->jp", "completion": "if (IS_OUTER_JOIN(best_path->jpath.jointype)) <|endoftext|>"}
{"context": "\treturn true;\n\t\t\tbreak;\n\t\t\t*target = *(const long long int *) var;\n\t\tcase ECPGt_double:\n}", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t[PGSTAT_KIND_CHECKPOINTER] = {\n\t\t.write_to_file = true,\n\t\t.snapshot_ctl_off = offsetof(PgStat_Snapshot, checkpointer),\n\t\t.init_shmem_cb = pgstat_checkpointer_init_shmem_cb,\n\t\t.have_static_pending_cb = pgstat_io_have_pending_cb,", "partial_line": ".reset_all_cb =", "completion": ".reset_all_cb = pgstat_io_reset_all_cb, <|endoftext|>"}
{"context": "\t\t\t\taddress = CreateExtension(pstate, (CreateExtensionStmt *) parsetree);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t &secondaryObject);\n\t\t\tcase T_CreateForeignServerStmt:\n\t\t\t\tbreak;\n\t\t\t\taddress = AlterForeignServer((AlterForeignServerStmt *) parsetree);", "partial_line": "address = AlterUserMappin", "completion": "address = AlterUserMapping((AlterUserMappingStmt *) parsetree); <|endoftext|>"}
{"context": "}\nlogicalmsg_decode(LogicalDecodingContext *ctx, XLogRecordBuffer *buf)\n\tuint8\t\tinfo = XLogRecGetInfo(r) & ~XLR_INFO_MASK;\n\tRepOriginId origin_id = XLogRecGetOrigin(r);\n\t\t!SnapBuildProcessChange(builder, xid, buf->origptr))", "partial_line": "else if (!message->trans", "completion": "else if (!message->transactional && <|endoftext|>"}
{"context": "\t\tdefault:\n\t}\n\tif (relation != NULL)\n\tSysScanDesc scan;\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,", "partial_line": "ObjectIdGetDat", "completion": "ObjectIdGetDatum(object->classId)); <|endoftext|>"}
{"context": "\tfunction->out_param_varno = -1; \n\tfunction->has_exception_block = false;\n\tfunction->fn_retset = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNULL),\n\terror_context_stack = plerrcontext.previous;", "partial_line": "plpgsql_", "completion": "plpgsql_compile_error_callback(void *arg) <|endoftext|>"}
{"context": "\tarray_iter\titer;\n\t\tmy_extra = (ArrayMetaState *) fcinfo->flinfo->fn_extra;\n\t}\n\tvalues = (char **) palloc(nitems * sizeof(char *));\n\tneedquotes = (bool *) palloc(nitems * sizeof(bool));", "partial_line": "overall_l", "completion": "overall_length = 0; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t*objargs = list_make1(pubname);\n\t\tcase PublicationRelRelationId:\n\t\t\t\ttup = SearchSysCache1(PUBLICATIONREL,\n\t\t\t\t\t\t\t object->objectId);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_TOO_MANY_ARGUMENTS),\n\t\tallParamCount = ARR_DIMS(allParamArray)[0];\n\t\tallParams = (Oid *) ARR_DATA_PTR(allParamArray);\n\t\tallParams = parameterTypes->values;\n\t}", "partial_line": "parameterTy", "completion": "parameterTypes->values, <|endoftext|>"}
{"context": "\t\t\t\t\t errhint(\"Specify one address range per line.\"),\n\t\t\t*err_msg = \"multiple values specified for host address\";\n\t\t}\n\t\ttoken = linitial(tokens);\n\t\t}", "partial_line": "else if (token_is_keyword(t", "completion": "else if (token_is_keyword(token, \"samehost\")) <|endoftext|>"}
{"context": "\t\tcastinfo[i].dobj.objType = DO_CAST;\n\tdestroyPQExpBuffer(query);\n\tquery = createPQExpBuffer();\n}\n\tTransformInfo *transforminfo;", "partial_line": "int", "completion": "int\t\t\ti_tableoid; <|endoftext|>"}
{"context": "\t\tAcceptInvalidationMessages();\n\t\t\t\t\t   classid,\n\tLockRelease(&tag, lockmode, false);\nvoid\n\t\t\t\t\t   objid,", "partial_line": "LOCKMODE l", "completion": "LOCKMODE lockmode) <|endoftext|>"}
{"context": "\t\tcase PARTITION_STRATEGY_LIST:\n\t\t\treturn create_list_bounds(boundspecs, nparts, key, mapping);\ncreate_hash_bounds(PartitionBoundSpec **boundspecs, int nparts,\n\tint\t\t\ti;\n\tboundinfo->datums = (Datum **) palloc0(nparts * sizeof(Datum *));", "partial_line": "boundinfo->nind", "completion": "boundinfo->nindexes = greatest_modulus; <|endoftext|>"}
{"context": "\t\t\tcase 'S':\t\t\t\n\t\t\tcase 'v':\t\t\t\n\t\t\tcase 0:\n\t\t\t\tset_dump_section(optarg, &dopt.dumpSections);\n\t\t\tcase 6:\t\t\t\t", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tOid\t\t\troleid = PG_GETARG_OID(0);\n\ttext\t   *priv_type_text = PG_GETARG_TEXT_PP(2);\n\tAclMode\t\tmode;\n\tOid\t\t\troleid = PG_GETARG_OID(0);\n\tmode = convert_server_priv_string(priv_type_text);", "partial_line": "static const priv", "completion": "static const priv_map server_priv_map[] = { <|endoftext|>"}
{"context": "\t\t\txl_heap_lock xlrec;\n\t\t\tXLogBeginInsert();\n\t\t\tPageSetLSN(page, recptr);\n\t\tLockBuffer(buffer, BUFFER_LOCK_UNLOCK);\n\t\telse", "partial_line": "buffer", "completion": "buffer, 0, NULL, <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t\t\t\t \"message type 0x%02x arrived from server while idle\",\n\t\t\t\t\t\tif (!conn->result)\n\t\t\t\t\t\t\tpqSaveErrorResult(conn);\n\t\t\t\tcase PqMsg_ErrorResponse:", "partial_line": "if (pqGetErrorNotice", "completion": "if (pqGetErrorNotice3(conn, true)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  PQgetvalue(result, 0, 0));\n\t\t\t\t\tbreak;\n\t}\n\t\ttableinfo.relkind == RELKIND_MATVIEW ||\n\t\ttableinfo.relkind == RELKIND_FOREIGN_TABLE ||", "partial_line": "col", "completion": "cols = 0; <|endoftext|>"}
{"context": "\tSPIExecuteOptions options;\n\tif (before_lxid != after_lxid)\n\t\testate->simple_eval_estate = NULL;\n\tPLpgSQL_row *row;\n\tint\t\t\ti;", "partial_line": "(argmodes[i] =", "completion": "(argmodes[i] == PROARGMODE_INOUT || <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tOT_NORMAL, NULL, false);\n\t\t}\n\t\t{\n\t\tfree(envval);", "partial_line": "bool\t\tshow_linenumbers = (strch", "completion": "bool\t\tshow_linenumbers = (strchr(cmd, '+') != NULL); <|endoftext|>"}
{"context": "#define CLVCHARPTRTYPE\t124\n#define SQLVCHAR\tECPGt_char\nstatic void\n{\n\t\telse", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase jpiAnyArray:\n\t\t\t\t\t\t errmsg(\"LAST is allowed only in array subscripts\")));\n\t\t\t\t\t\t\t\t   &item->value.anybounds.last,\n\t\tcase jpiDate:", "partial_line": "if (ite", "completion": "if (item->next) <|endoftext|>"}
{"context": "\tnodes = palloc(sizeof(SpGistNodeTuple) * innerTuple->nNodes);\n\t\t\t\t\t\t\t\t\t out->result.splitTuple.postfixPrefixDatum,\n\t{\n\t}\n\t\tMarkBufferDirty(newBuffer);", "partial_line": "spgUpdateNodeLink(prefixTuple, out->result.sp", "completion": "spgUpdateNodeLink(prefixTuple, out->result.splitTuple.childNodeN, <|endoftext|>"}
{"context": "\t\t\t\t\tcase SETOPCMD_EXCEPT:\n\t\t\t\t}\n\t}\n\t\t{\n\t\t\tappendStringInfo(es->str, \"  (cost=%.2f..%.2f rows=%.0f width=%d)\",", "partial_line": "if (es->a", "completion": "if (es->analyze && <|endoftext|>"}
{"context": "\tgzret = gzread(gzfp, ptr, size);\n\t\tint\t\t\terrnum;\n\tif (rsize)\n}\nstatic bool", "partial_line": "gzFile\t\tgzfp = (gzFile) CFH->", "completion": "gzFile\t\tgzfp = (gzFile) CFH->private_data; <|endoftext|>"}
{"context": "\t\t\t\t((char *) ondisk) + SnapBuildOnDiskNotChecksummedSize,\n\tif (ondisk->builder.catchange.xcnt > 0)\n\tif (CloseTransientFile(fd) != 0)\n\t\tgoto snapshot_not_interesting;\n\t\tbuilder->committed.xip = ondisk.builder.committed.xip;", "partial_line": "builder->ca", "completion": "builder->catchange.xcnt = ondisk.builder.catchange.xcnt; <|endoftext|>"}
{"context": "\t\t\tind = strtoint(tpath[i], &endptr, 10);\n\t\t\telse\n\tif (result != NULL)\n\t\tPG_RETURN_TEXT_P(result);\n\telse", "partial_line": "state->npath", "completion": "state->npath = npath; <|endoftext|>"}
{"context": "\t\tdata_len = pg_mb2wchar_with_len(newword, data, newword_len);\n\t\t{\n\t\t\tpfree(data);\n\t\t\treturn newword;\n}", "partial_line": "NormalizeSubWord(IspellDict *Conf, const ch", "completion": "NormalizeSubWord(IspellDict *Conf, const char *word, int flag) <|endoftext|>"}
{"context": "\t\tcase PqMsg_NoticeResponse:\n\t\t\tbreak;\n\t\t\telse\n\t\t\tbreak;\n\t\tcase PqMsg_NegotiateProtocolVersion:", "partial_line": "case PqMsg_Function", "completion": "case PqMsg_FunctionCallResponse: <|endoftext|>"}
{"context": "\tObjectAddress address;\n\t\t\t\t errmsg(\"must specify relation and object name\")));\n\t\t\t\t\t\t\t\t\t missing_ok);\n\t\tcase OBJECT_RULE:\n\t\t\taddress.objectSubId = 0;", "partial_line": "address.o", "completion": "address.objectSubId = 0; <|endoftext|>"}
{"context": "\t\t\t\tif (!option_parse_int(optarg, \"--min-xid-age\", 1, INT_MAX,\n\t\t\tcase 7:\n\t\t\t\tvacopts.no_index_cleanup = true;\n\t\t\tcase 9:\n\t\t\t\t\t argv[optind]);", "partial_line": "check_objfil", "completion": "check_objfilter(); <|endoftext|>"}
{"context": "\t\tSetUserIdAndSecContext(fcache->userid,\n\tif (fmgr_hook)\n\tPG_CATCH();\n\treturn result;\n\tLOCAL_FCINFO(fcinfo, 1);", "partial_line": "result = (", "completion": "result = (*func) (fcinfo); <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_TABLE_DEFINITION),\n\t\tif (list_length(spec->upperdatums) != partnatts)\n\t\tPartitionRangeDatum *prd = NULL;\n\t\tif (IsA(expr, ColumnRef))\n\t\t\tchar\t   *cname = NULL;", "partial_line": "if (list_length(cr", "completion": "if (list_length(cref->fields) == 1 && <|endoftext|>"}
{"context": "static void\n{\n\t\tdlist_delete(&gconf->nondef_link);\n\t\tconfigdir = make_absolute_path(getenv(\"PGDATA\"));\n\t{", "partial_line": "strlen(configd", "completion": "strlen(configdir) + strlen(CONFIG_FILENAME) + 2); <|endoftext|>"}
{"context": "\tArchiveHandle *AH = (ArchiveHandle *) AHX;\nProcessArchiveRestoreOptions(Archive *AHX)\n\tteSection\tcurSection;\n\t\t\t\t\t\tpg_log_warning(\"archive items not in correct section order\");\n\t\t\t\tcase SECTION_POST_DATA:", "partial_line": "defau", "completion": "default: <|endoftext|>"}
{"context": "\tAssert(param->paramkind == PARAM_EXTERN);\n{\n\t\t\treturn op;\n\t\treturn false;\n\t\tcase T_GroupingFunc:", "partial_line": "return !IsA(pa", "completion": "return !IsA(parentNode, FieldSelect); <|endoftext|>"}
{"context": "\t\t\t;\n\t\t\tmalloc(offsetof(DynamicFileList, filename) + strlen(libname) + 1);\n\t\t\t\t\t(errcode(ERRCODE_OUT_OF_MEMORY),\n\t\t{\n\t\t\tdlsym(file_scanner->handle, PG_MAGIC_FUNCTION_NAME_STRING);", "partial_line": "Pg_magic_struct", "completion": "Pg_magic_struct module_magic_data = *magic_data_ptr; <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_DATA_EXCEPTION),\n\t\t}\n\t\t\t\t\t\t errmsg(\"invalid Datum pointer\")));\n\t\t\tsize = (Size) (strlen(s) + 1);\n\t\t{", "partial_line": "if (VARATT_IS_EXTE", "completion": "if (VARATT_IS_EXTERNAL_EXPANDED(vl)) <|endoftext|>"}
{"context": "{\n\tfloat8\t\tresult;\n\t\tresult = 0.0;\nDatum\n\tfloat8\t\td;", "partial_line": "d = point_dt(&circle->", "completion": "d = point_dt(&circle->center, point); <|endoftext|>"}
{"context": "\t\tresult |= ((unsigned char *) VARDATA_ANY(v))[i];\nbytea_int4(PG_FUNCTION_ARGS)\n\tbytea\t   *v = PG_GETARG_BYTEA_PP(0);\n\t\t\t\terrmsg(\"integer out of range\"));\n\tfor (int i = 0; i < len; i++)", "partial_line": "uint64", "completion": "uint64\t\tresult; <|endoftext|>"}
{"context": "\t\tqidx[cno] = qoffset;\n\t\tif (ch == '\\t')\n\t\telse if (ch == '\\r' || ch == '\\n')\n\t\tif (mb_encoding)\n\t\t{", "partial_line": "qof", "completion": "qoffset++; <|endoftext|>"}
{"context": "\treturn true;\n}\nDatum\n}\n\tPG_RETURN_POINT_P(result);", "partial_line": "dist = lseg_closept_point(result, on_lseg", "completion": "dist = lseg_closept_point(result, on_lseg, &to_lseg->p[0]); <|endoftext|>"}
{"context": "\t}\n\t\tfor (i = 0; i < nInsert; i++)\n\t\tMarkBufferDirty(buffer);\n\t\t\t\t\t\t\t\tstate.isBuild ? SPGIST_PLACEHOLDER : SPGIST_REDIRECT,\nstatic void", "partial_line": "XLogRec", "completion": "XLogRecPtr\tlsn = record->EndRecPtr; <|endoftext|>"}
{"context": "\tgatherstate->ps.ExecProcNode = ExecGather;\nstatic TupleTableSlot *\n\tTupleTableSlot *slot;\n\t{\n\t\t\t\t\t\t\t\t\t\t gather->initParam);", "partial_line": "node->nreaders = pcxt->nwork", "completion": "node->nreaders = pcxt->nworkers_launched; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tATSimplePermissions(cmd->subtype, rel,\n\t\t\tpass = AT_PASS_MISC;", "partial_line": "pass", "completion": "pass = AT_PASS_MISC; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   ops,\n\t\t\t\t\t\t\t\t\t   &aggstate->ss.ps);\n\t}\n\tpertrans->sortstates = (Tuplesortstate **)\n{", "partial_line": "return", "completion": "return initVal; <|endoftext|>"}
{"context": "\t\tpiv_flags = PIV_LOG_WARNING;\n\t\t\tpiv_flags |= PIV_IGNORE_CHECKSUM_FAILURE;\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t forkNum);\n\t\thash_search(pendingSyncHash, &rlocator, HASH_FIND, NULL) == NULL)", "partial_line": "HASH_S", "completion": "HASH_SEQ_STATUS scan; <|endoftext|>"}
{"context": "\t\tparam = sql_fn_resolve_param_name(pinfo, name2, cref->location);\n\t\t}\n\tif (!param)\n\t\t\t\t\t\t\t\t  pstate->p_last_srf,\nstatic Node *", "partial_line": "SQLFunctionParseInfoPtr", "completion": "SQLFunctionParseInfoPtr pinfo = (SQLFunctionParseInfoPtr) pstate->p_ref_hook_state; <|endoftext|>"}
{"context": "#include \"catalog/pg_operator.h\"\n#include \"utils/float.h\"\n#include \"utils/lsyscache.h\"\n#include \"varatt.h\"", "partial_line": "AnalyzeAttrFetchFunc fetchfunc,", "completion": "AnalyzeAttrFetchFunc fetchfunc, int samplerows, <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_ATTR(prev3_wd);\n\telse if (Matches(\"REASSIGN\", \"OWNED\"))\n\t\tCOMPLETE_WITH(\"BY\");\n\t\tCOMPLETE_WITH(\"NO DATA\", \"DATA\");\n\telse if (Matches(\"REFRESH\", \"MATERIALIZED\", \"VIEW\", MatchAny, \"WITH\", \"NO\"))", "partial_line": "Matches(\"REINDEX\", \"(", "completion": "Matches(\"REINDEX\", \"(*)\", \"INDEX\")) <|endoftext|>"}
{"context": "\t\t\t\t\tforeach(lc, namelist)\n\t\t\t\t\t\t\tappendStringInfoString(&buf, \", \");\n\t\tprosrc = TextDatumGetCString(tmp);\n\t\tappendStringInfoString(&buf, prosrc);\n\tPG_RETURN_TEXT_P(string_to_text(buf.data));", "partial_line": "pg_get_function_arguments(PG_F", "completion": "pg_get_function_arguments(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "}\nstatic char *\n\t\t\t\t   bool *is_zero, bool *is_before)\n\t\t\t(*is_before && value > 0) ? \"+\" : \"\",\n\t\t\t\t  bool *is_zero, bool *is_before)", "partial_line": "valu", "completion": "value = -value; <|endoftext|>"}
{"context": "static const symbol s_3_1[3] = { 'i', 'n', 'e' };\nstatic const symbol s_4_3[2] = { 'n', 'i' };\nstatic const symbol s_5_2[2] = { 'i', 'i' };\n{ 2, s_5_2, -1, -1, 0},\nstatic const symbol s_6_4[2] = { 't', 'a' };", "partial_line": "static const symbol s_6_", "completion": "static const symbol s_6_5[3] = { 'l', 't', 'a' }; <|endoftext|>"}
{"context": "\t}\npgtypes_defmt_scan(union un_fmt_comb *scan_val, int scan_type, char **pstr, char *pfmt)\n\tlast_char = *pstr_end;\n\t*pstr_end = '\\0';\n\t\t\terrno = 0;", "partial_line": "*ps", "completion": "*pstr = strtol_end; <|endoftext|>"}
{"context": "\t\t\t\tPOLYGON    *query = PG_GETARG_POLYGON_P(1);\n\t\t\t\t\tAssert(box->high.x == box->low.x\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  PointerGetDatum(entry),\n\t\t\t\tif (GIST_LEAF(entry) && result)", "partial_line": "Assert(box->", "completion": "Assert(box->high.x == box->low.x <|endoftext|>"}
{"context": "{\n\tResourceOwnerForgetBuffer(CurrentResourceOwner, b);\n\tBuffer\t\tb = BufferDescriptorGetBuffer(buf);\n\t\tfor (;;)\n\t\t{", "partial_line": "buf_state", "completion": "buf_state -= BUF_REFCOUNT_ONE; <|endoftext|>"}
{"context": "\t\tinner_has_null = false;\n\tif (outer_has_null || inner_has_null)\n\t\tAssert(*outer_parts != NIL);\n\t\t\t\t\t\t\t\t\t\t\t\t\t  NIL,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  merged_indexes,", "partial_line": "free_partition_map", "completion": "free_partition_map(&outer_map); <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(aclresult == ACLCHECK_OK);\nhas_function_privilege_name(PG_FUNCTION_ARGS)\n\tOid\t\t\troleid;\n\tOid\t\t\tfunctionoid;\n\troleid = GetUserId();", "partial_line": "mode = convert_function_priv_st", "completion": "mode = convert_function_priv_string(priv_type_text); <|endoftext|>"}
{"context": "\t\t\tPGresult   *result = PQgetResult(sa->slots[i].connection);\n\t\t\t{\n\t\t\t\tif (!processQueryResult(&sa->slots[i], result))\n\t\t\t\t\treturn false;\n\t\t\t}", "partial_line": "ParallelSlot", "completion": "ParallelSlotClearHandler(&sa->slots[i]); <|endoftext|>"}
{"context": "static bool have_lookahead;\t\t\nstatic int\tlookahead_token;\t\nstatic YYSTYPE lookahead_yylval;\t\nstatic int\tbase_yylex_location(void);\nstatic bool check_uescapechar(unsigned char escape);", "partial_line": "filtered_base_yyl", "completion": "filtered_base_yylex(void) <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t errmsg(\"-c %s requires a value\",\n\t\t\t\t\tEchoQuery = true;\n\t\t\tcase 'h':", "partial_line": "case", "completion": "case 'j': <|endoftext|>"}
{"context": "\tbool\t\ttypbyval;\n\tint\t\t\ti;\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t\t\tDatum\t\telt2;\n\t\t\t\t\t\t\t\t   typlen, typbyval, typalign);", "partial_line": "locfcinfo", "completion": "locfcinfo->args[1].value = elt2; <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\t\t\t quote_identifier(NameStr(con->conname)));\n\t\t\t\t{\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t getObjectIdentityParts(&colobject,", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "{\n\t\tstr->data[str->len] = '\\0';\n}\nvoid\n{", "partial_line": "str->data[", "completion": "str->data[str->len] = '\\0'; <|endoftext|>"}
{"context": "\tPG_RETURN_VARBIT_P(result);\nvarbit_out(PG_FUNCTION_ARGS)\n{\n\tVarBit\t   *s = PG_GETARG_VARBIT_P(0);\n\t\t}", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t ALLOCSET_DEFAULT_SIZES);\n\t\tEmitErrorReport();\n\t\tConditionVariableCancelSleep();\n\t\tAtEOXact_Buffers(false);\n\t\tbool\t\tcan_hibernate;", "partial_line": "TimestampTz ti", "completion": "TimestampTz timeout = 0; <|endoftext|>"}
{"context": "#endif\n#define LIST_HEADER_OVERHEAD  \\\n#define IsPointerList(l)\t\t((l) == NIL || IsA((l), List))\n\t\t   list->type == T_IntList ||\n#else", "partial_line": "new_list(NodeTag type, in", "completion": "new_list(NodeTag type, int min_size) <|endoftext|>"}
{"context": "\telse\n}\n\tif (active_branch)\n\t\t\tpg_log_error(\"no query buffer\");\n\t\t\t\t\tif (!lines)", "partial_line": "if (stat", "completion": "if (status != PSQL_CMD_ERROR) <|endoftext|>"}
{"context": "PLy_function_restore_args(PLyProcedure *proc, PLySavedArgs *savedargs)\n\t}\n\tif (savedargs->td)\n\t{\n\t\tPy_DECREF(savedargs->td);", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t\talpha = 0.7213 / (1.0 + 1.079 / cState->nRegisters);\n}\nvoid\n\t}", "partial_line": "uint8", "completion": "uint8\t\tcount; <|endoftext|>"}
{"context": "\t\t\tGUC_NOT_IN_SAMPLE\n\t},\n\t\t\tgettext_noop(\"Register JIT-compiled functions with perf profiler.\"),\n\t\t\tGUC_NOT_IN_SAMPLE\n\t{", "partial_line": "fal", "completion": "false, <|endoftext|>"}
{"context": "\tall_bounds = (PartitionRangeBound **)\n\t\t\tdefault_index = i;\n\t\tall_bounds[ndatums++] = lower;\n\tAssert(ndatums == nparts * 2 ||\n\tqsort_arg(all_bounds, ndatums,", "partial_line": "sizeof", "completion": "sizeof(PartitionRangeBound *), <|endoftext|>"}
{"context": "\tif (overflow > 0)\n\tstream->pending_read_blocknum += nblocks;\n{\n\t\tint16\t\tbuffer_index;\n\t\tblocknum = read_stream_get_block(stream, per_buffer_data);", "partial_line": "if (blocknum == InvalidB", "completion": "if (blocknum == InvalidBlockNumber) <|endoftext|>"}
{"context": "\t\tappendPQExpBuffer(query,\n\t\tappendPQExpBufferStr(query,\n\t\t\t\t\t\t  \" 't' AS subpasswordrequired,\\n\"\n\tif (fout->remoteVersion >= 170000)\n\t\tappendPQExpBufferStr(query,", "partial_line": "i_oid", "completion": "i_oid = PQfnumber(res, \"oid\"); <|endoftext|>"}
{"context": "\t\t\t   *nodes;\n\tBuffer\t\tnewBuffer = InvalidBuffer;\n\t\telog(ERROR, \"invalid number of prefix nodes: %d\",\n\tfor (i = 0; i < out->result.splitTuple.prefixNNodes; i++)\n\tnodes = palloc(sizeof(SpGistNodeTuple) * innerTuple->nNodes);", "partial_line": "out->result.splitTupl", "completion": "out->result.splitTuple.postfixPrefixDatum, <|endoftext|>"}
{"context": "\t\t}\n\t\t\tinterval->time = 0;\n\t\t}\n\t\t{\n\t\t}", "partial_line": "USECS_", "completion": "USECS_PER_HOUR; <|endoftext|>"}
{"context": "\tpopulate_compact_attribute(desc, attributeNumber - 1);\n\tatt->atttypmod = typmod;\n\t\t\tatt->attbyval = false;\n\t\t\tatt->attlen = 8;\n\t\t\tatt->attbyval = FLOAT8PASSBYVAL;", "partial_line": "cas", "completion": "case OIDOID: <|endoftext|>"}
{"context": "\t\tquery = lfirst_node(Query, l);\n\t\tif (query->resultRelation == PRS2_NEW_VARNO)\n\t\t\t\t\t\t\tRelationGetRelationName(event_relation)),\n\t\t\t\t\t errmsg(\"INSTEAD NOTHING rules on SELECT are not implemented\"),\n\t\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_INVALID_OBJEC", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "\t\tif (xact_info == XLOG_XACT_COMMIT_PREPARED)\n\t\t\trecordXid = XLogRecGetXid(record);\n\t\t\trecoveryStopName[0] = '\\0';\n\t\t\tif (xact_info == XLOG_XACT_COMMIT ||\n\t\t\t\t\t\t(errmsg(\"recovery stopping after commit of transaction %u, time %s\",", "partial_line": "if (recoveryTarget == RECOVERY_TARGET_IMME", "completion": "if (recoveryTarget == RECOVERY_TARGET_IMMEDIATE && reachedConsistency) <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n#line 7 \"describe.pgc\"\nint\nmain (void)\n{", "partial_line": "#line 16 \"descri", "completion": "#line 16 \"describe.pgc\" <|endoftext|>"}
{"context": "\tPG_RETURN_FLOAT8(Sx / N);\n\tfloat8\t   *transvalues;\n\ttransvalues = check_float8_array(transarray, \"float8_var_pop\", 3);\n\t\t\t\tSxx;\nDatum", "partial_line": "ArrayType  *transarray = PG_GETARG_", "completion": "ArrayType  *transarray = PG_GETARG_ARRAYTYPE_P(0); <|endoftext|>"}
{"context": "WriteToc(ArchiveHandle *AH)\n\tint\t\t\ttocCount;\n\t\tsprintf(workbuf, \"%u\", te->catalogId.oid);\n\t\tWriteStr(AH, te->desc);\n\t\tWriteStr(AH, te->namespace);", "partial_line": "for (i =", "completion": "for (i = 0; i < te->nDeps; i++) <|endoftext|>"}
{"context": "\tif (options.actions.head == NULL && pset.notty)\n\tif (options.single_txn && options.actions.head == NULL)\n\t{\n\t\tpset.popt.topt.recordSep.separator = pg_strdup(DEFAULT_RECORD_SEP);\n\tif (pset.getPassword == TRI_YES)", "partial_line": "keywords", "completion": "keywords[1] = \"port\"; <|endoftext|>"}
{"context": "{ 6, s_0_126, 123, -1, 0},\n{ 4, s_0_129, 123, -1, 0},\n{ 4, s_0_134, 123, -1, 0},\n{ 4, s_0_135, 123, -1, 0},\n{ 4, s_0_145, 118, -1, 0},", "partial_line": "{ 3, s_0_148, 1", "completion": "{ 3, s_0_148, 147, -1, 0}, <|endoftext|>"}
{"context": "\t\tcancelConn->connhost[0].port = strdup(originalHost.port);\n\tcancelConn->addr[0].addr = conn->raddr;\n\tlibpq_append_conn_error(cancelConn, \"out of memory\");\n\treturn (PGcancelConn *) cancelConn;\nint", "partial_line": "ret", "completion": "return 0; <|endoftext|>"}
{"context": "#include \"catalog/pg_aggregate.h\"\n#include \"parser/parse_func.h\"", "partial_line": "#include \"par", "completion": "#include \"parser/parse_relation.h\" <|endoftext|>"}
{"context": "\t\tstate->decode_buffer = palloc(state->decode_buffer_size);\n\t\tstate->decode_buffer_head = state->decode_buffer;\n\t{\n\t\t}\n\t}", "partial_line": "state->decode_buffer_head - state->de", "completion": "state->decode_buffer_head - state->decode_buffer_tail) <|endoftext|>"}
{"context": "#include \"utils/builtins.h\"\ndomain_check_input(Datum value, bool isnull, DomainIOData *my_extra,", "partial_line": "ExprContext *econtext = m", "completion": "ExprContext *econtext = my_extra->econtext; <|endoftext|>"}
{"context": "\t\t}\n\t\tif (XLogReadBufferForRedo(record, 0, &buffer) == BLK_NEEDS_REDO)\n\t\t\tSpGistDeadTuple dt;\n\t\t\t\t\t\t\t\t\t  InvalidOffsetNumber);\n\t\t\tif (state.isBuild)", "partial_line": "parentTuple = (", "completion": "parentTuple = (SpGistInnerTuple) PageGetItem(page, <|endoftext|>"}
{"context": "\tfor (i = 0; i < NUM_XLOGINSERT_LOCKS; i++)\n\t\tdo\n\t\tif (insertingat != InvalidXLogRecPtr && insertingat < finishedUpto)\n\tif (ptr / XLOG_BLCKSZ == cachedPage)\n\t\tAssert(((XLogPageHeader) cachedPos)->xlp_magic == XLOG_PAGE_MAGIC);", "partial_line": "if (ptr % XLOG_BLC", "completion": "if (ptr % XLOG_BLCKSZ == SizeOfXLogShortPHD && <|endoftext|>"}
{"context": "\t\tnew_neg_digits = palloc0(accum_ndigits * sizeof(int32));\n\t\t\tmemcpy(&new_neg_digits[weightdiff], accum->neg_digits,\n\t\taccum->weight = accum_weight;\n\t\taccum->ndigits = accum_ndigits;\n\t\taccum->dscale = val->dscale;", "partial_line": "init_var(&pos", "completion": "init_var(&pos_var); <|endoftext|>"}
{"context": "\t\t}\n\t\tif (i < len)\n\t\telog(COMMERROR, \"incomplete GSS error report\");\n\t\t\t OM_uint32 maj_stat, OM_uint32 min_stat)\n{", "partial_line": "OM_", "completion": "OM_uint32\tmajor, <|endoftext|>"}
{"context": "\ttime_t\t\tcurtime = time(NULL);\n}\n\tbool\t\tfound;\n\tSlotSyncCtx = (SlotSyncCtxStruct *)\n\tif (MyReplicationSlot != NULL)", "partial_line": "ReplicationS", "completion": "ReplicationSlotRelease(); <|endoftext|>"}
{"context": "\t\t\tcase DO_EXTENSION:\n\t\t\tcase DO_AGG:\n\t\t\tcase DO_COLLATION:\n\t\t\tcase DO_REFRESH_MATVIEW:\n\t\t\tcase DO_POLICY:", "partial_line": "case DO_PUBL", "completion": "case DO_PUBLICATION_REL: <|endoftext|>"}
{"context": "\tchar\t   *objname;\n\t\tif (comtype == FILTER_COMMAND_TYPE_INCLUDE)\n\t\t\t\tcase FILTER_OBJECT_TYPE_TABLE_DATA:\n\t\t\t\t\t\t\t\t\t\tfilter_object_type_name(objtype));\n\t\t\t\t\tbreak;", "partial_line": "opt", "completion": "opts->selTypes = 1; <|endoftext|>"}
{"context": "static List *\n\tList\t   *result = NIL;\n\tList\t   *inner_members = NIL;\n\t\tEquivalenceMember *best_inner_em = NULL;\n\t\tOid\t\t\tbest_eq_op = InvalidOid;", "partial_line": "forea", "completion": "foreach(lc1, outer_members) <|endoftext|>"}
{"context": "                    if (i > 0) goto lab4;\n                    {   int ret = r_Suffix_Verb_Step2a(z);\n                        if (ret < 0) return ret;\n                    }\n                    z->c = z->l - m6;", "partial_line": "goto l", "completion": "goto lab3; <|endoftext|>"}
{"context": "\t\t\t   Datum key2,\n\treturn SearchCatCache(SysCache[cacheId], key1, key2, key3, key4);\n}\n\t\t\t\tDatum key1)\n\treturn SearchCatCache2(SysCache[cacheId], key1, key2);", "partial_line": "return SearchCatCache3(S", "completion": "return SearchCatCache3(SysCache[cacheId], key1, key2, key3); <|endoftext|>"}
{"context": "\tINJECTION_POINT(\"backend-initialize\");\n\t\tport->remote_hostname = MemoryContextStrdup(TopMemoryContext, remote_host);\n\tif (status == STATUS_OK)\n\t\tswitch (cac)\n\t\t{", "partial_line": "case CAC_S", "completion": "case CAC_STARTUP: <|endoftext|>"}
{"context": "\t\t\t\tif (conn->gsslib && (pg_strcasecmp(conn->gsslib, \"gssapi\") == 0))\n\t\t\t\t\tr = pg_SSPI_startup(conn, 0, payloadlen);\n\t\t\t\t\tr = pg_GSS_continue(conn, payloadlen);\n\t\t\t}\n\t\t\treturn STATUS_ERROR;", "partial_line": "char\t   *", "completion": "char\t   *password; <|endoftext|>"}
{"context": "\t\t\tpergroupstate->noTransValue = false;\n\t\tDatumGetPointer(newVal) != DatumGetPointer(pergroupstate->transValue))\n{\nstatic void\n\t\t\thaveOldVal &&", "partial_line": "oldAbbrevVal == ne", "completion": "oldAbbrevVal == newAbbrevVal && <|endoftext|>"}
{"context": "#line 2 \"define.pgc\"\nif (sqlca.sqlcode < 0) sqlprint ( );}\n   { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"create table test ( a int , b text )\", ECPGt_EOIT, ECPGt_EORT);\n   { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"insert into test values ( 29 , 'abcdef' )\", ECPGt_EOIT, ECPGt_EORT);\n#line 23 \"define.pgc\"", "partial_line": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"select 1 , 29 :: text", "completion": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"select 1 , 29 :: text || '-' || 'abcdef'\", ECPGt_EOIT, <|endoftext|>"}
{"context": "\tfk_trigger->replace = false;\n\tfk_trigger->trigname = \"RI_ConstraintTrigger_a\";\n\tfk_trigger->relation = NULL;\n\tfk_trigger->args = NIL;\n\tfk_trigger->row = true;", "partial_line": "fk_trigger->", "completion": "fk_trigger->whenClause = NULL; <|endoftext|>"}
{"context": "\t\t\tif (sslot.nvalues == 2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t NULL);\n\t\t\t\t\t\t\t\t\t\t\t\t\t   constval));\n\t\t\t\t\thibound = probe;\n\t\t\t{", "partial_line": "double", "completion": "double\t\tval, <|endoftext|>"}
{"context": "}\n\tWorkTableScan *scan_plan;\n\tIndex\t\tscan_relid = best_path->parent->relid;\n\trte = planner_rt_fetch(scan_relid, root);\n\tlevelsup--;", "partial_line": "cteroot = cteroot-", "completion": "cteroot = cteroot->parent_root; <|endoftext|>"}
{"context": "#include \"catalog/pg_am.h\"\n#include \"catalog/pg_type.h\"\n#include \"optimizer/cost.h\"\n\tST_ANYSCAN,\t\t\t\t\t", "partial_line": "Path", "completion": "Path\t   *path; <|endoftext|>"}
{"context": "\tparallel_worker_main_type entrypt;\n\tSnapshot\ttsnapshot;\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\terror_queue_space = shm_toc_lookup(toc, PARALLEL_KEY_ERROR_QUEUE, false);\n\tif (!BecomeLockGroupMember(fps->parallel_leader_pgproc,", "partial_line": "libraryspace", "completion": "libraryspace = shm_toc_lookup(toc, PARALLEL_KEY_LIBRARY, false); <|endoftext|>"}
{"context": "\t\t\"Omsk Standard Time\", \"Omsk Daylight Time\",\n\t\t\"Asia/Omsk\"\n\t\t\"America/Tijuana\"\n\t\t\"Paraguay Standard Time\", \"Paraguay Daylight Time\",\n\t},", "partial_line": "\"Europe/", "completion": "\"Europe/Kaliningrad\" <|endoftext|>"}
{"context": "\tresult[0] = '\\0';\n\t\tif (rp->r_hiwasnum || rp->r_hiyear != ZIC_MAX)\n\t\t}\n\t\t{\n\t\t\t\tdstrp = rp;", "partial_line": "rp = &zp", "completion": "rp = &zp->z_rules[i]; <|endoftext|>"}
{"context": "    z->ket = z->c;\n    }\n        {   int ret = r_shortv(z);\n            if (ret < 0) return ret;\n    lab2:", "partial_line": "z->c = z->", "completion": "z->c = z->l - m1; <|endoftext|>"}
{"context": "\ty[6] = b64[5];\n\ty[10] = b64[9];\n\ty[25] = b64[26];\n\ty[26] = b64[25];\n\ty[29] = b64[30];", "partial_line": "y[54] = b", "completion": "y[54] = b64[53]; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\t\t fkinfo->con_relid == leftvar->varno &&\n\t\t\t\t\t\tfkinfo->nmatched_ri++;\n\t\t\t\tfkinfo->nmatched_rcols++;\n\t\t}", "partial_line": "if ((fkinfo->", "completion": "if ((fkinfo->nmatched_ec + fkinfo->nmatched_rcols) == fkinfo->nkeys) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t bool tableforest, const char *targetns);\n\t\t\t\t\t\t\t\t\t\t\t\t\t  bool nulls, bool tableforest,\n#define XMLTABLE_CONTEXT_MAGIC\t46922182\n} XmlTableBuilderData;\nstatic void XmlTableSetDocument(struct TableFuncScanState *state, Datum value);", "partial_line": "static void XmlT", "completion": "static void XmlTableSetNamespace(struct TableFuncScanState *state, const char *name, <|endoftext|>"}
{"context": "\t\tcase T_GatherState:\n\t\t\tExecEndGather((GatherState *) node);\n\t\t\tbreak;\n\t\t\tExecEndBitmapHeapScan((BitmapHeapScanState *) node);\n\t\t\tbreak;", "partial_line": "ExecEndTidRangeScan((Tid", "completion": "ExecEndTidRangeScan((TidRangeScanState *) node); <|endoftext|>"}
{"context": "\t\tOid\t\t\top_lefttype;\t\n\t\t\tDatum\t\tscanvalue;\n\t\t\tleftop = (Expr *) get_leftop(clause);\n\t\t\t\telog(ERROR, \"bogus index qualification\");\n\t\t\t\t\t\t\t\t\t   &op_lefttype,", "partial_line": "&op_", "completion": "&op_righttype); <|endoftext|>"}
{"context": "\t\tif (currChar == 'V')\n\t\t\tint\t\t\tnextValue = romanValues[i + 1];\n\t\t\t{\n\t\t\t\tif (!IS_VALID_SUB_COMB(currChar, nextChar))\n\t\t\t\tif (repeatCount > 1)", "partial_line": "ret", "completion": "return -1; <|endoftext|>"}
{"context": "\ton_shmem_exit(ReleaseAuxProcessResourcesCallback, 0);\nReleaseAuxProcessResources(bool isCommit)\n\tResourceOwnerRelease(AuxProcessResourceOwner,\n{\n\t\t\towner->nlocks--;", "partial_line": "dlist_delete_from(&owner->aio", "completion": "dlist_delete_from(&owner->aio_handles, ioh_node); <|endoftext|>"}
{"context": "static const symbol s_25[] = { 'a', 'l' };\nstatic const symbol s_26[] = { 'i', 'c' };\nstatic const symbol s_33[] = { 'g', 'e', 'n', 't', 'l' };\nstatic int r_prelude(struct SN_env * z) {\n    z->I[2] = 0;", "partial_line": "z->bra =", "completion": "z->bra = z->c; <|endoftext|>"}
{"context": "\t\tappendPQExpBufferStr(&conn->errorMessage, conn->write_err_msg);\n\t\tlibpq_append_conn_error(conn, \"write to server failed\");\n{\n\t}\n\t\t\tpqSetResultError(res, &conn->errorMessage, conn->errorReported);", "partial_line": "char\t\tmsgBu", "completion": "char\t\tmsgBuf[1024]; <|endoftext|>"}
{"context": "\t\t\trecptr = GistBuildLSN;\n\t\t\t\trecptr = gistXLogSplit(is_leaf,\n\t\t\tfor (ptr = dist->next; ptr; ptr = ptr->next)\n\t\tSTART_CRIT_SECTION();\n\t\t\tif (ntup == 1)", "partial_line": "if (!PageIn", "completion": "if (!PageIndexTupleOverwrite(page, oldoffnum, (Item) *itup, <|endoftext|>"}
{"context": "static const symbol s_3_72[3] = { 0xED, 'a', 'n' };\nstatic const symbol s_3_78[5] = { 'a', 'r', 'i', 'e', 'n' };\nstatic const symbol s_3_85[4] = { 'a', 's', 'e', 'n' };\nstatic const symbol s_3_106[5] = { 'i', 's', 's', 'i', 'n' };\nstatic const symbol s_3_117[3] = { 'i', 'd', 'o' };", "partial_line": "static const sym", "completion": "static const symbol s_3_122[4] = { 'e', 'i', 'x', 'o' }; <|endoftext|>"}
{"context": "}\n\tTargetEntry *tle = makeNode(TargetEntry);\n\tmemcpy(tle, src_tle, sizeof(TargetEntry));\n\tf->quals = quals;\n\tcnst->consttype = consttype;", "partial_line": "(i", "completion": "(int) typLen, <|endoftext|>"}
{"context": "\tStringInfo\tbuf;\n\t\tgoto bad_format;\n\t{\n\t\tstr = endp;\n\treturn buf_finalize(buf);", "partial_line": "pg_current_xact_id", "completion": "pg_current_xact_id(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "                    {   int ret = skip_utf8(z->p, z->c, z->l, 1);\n                        if (ret < 0) goto lab0;\n            z->c = c2;\n            break;\n            }", "partial_line": "z->c", "completion": "z->c = c4; <|endoftext|>"}
{"context": "\tstats->relations = list_make1(heapRel);\n\tstats->transformed = true;\t\n\tReleaseSysCache(ht_stats);\n\tHeapTuple\tht_coll;\n\treturn result;", "partial_line": "List\t   *re", "completion": "List\t   *result = NIL; <|endoftext|>"}
{"context": "\ta = b = c = 0x9e3779b9 + len + 3923095;\n\tif (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)\n\t\t}\n\t\t\tcase 8:\n\t\t\tcase 10:", "partial_line": "c += ((", "completion": "c += ((uint32) k[8] << 8); <|endoftext|>"}
{"context": "\t\t\t\t\t\tts->ttis[i].tt_desigidx = j;\n\t\t\t\tif (!(j < charcnt))\n\t\t\t\t\tif (j + tsabbrlen < TZ_MAX_CHARS)\n\t\t\t\twhile (1 < sp->timecnt\n\t\t\t\t\t   && (sp->types[sp->timecnt - 1]", "partial_line": "|| (sp->", "completion": "|| (sp->ats[sp->timecnt - 1] <|endoftext|>"}
{"context": "\t}\n\tif (hasNulls)\n\t\thoff = len = MAXALIGN(len); \n\t\t\tnullBits = (bits8 *) ((char *) (*targetHeapTuple)->t_data\n\t\t(*targetMinimalTuple)->t_hoff = hoff + MINIMAL_TUPLE_OFFSET;", "partial_line": "if (targetN", "completion": "if (targetNullLen > 0) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t\t\tlibpq_append_conn_error(conn, \"SSL SYSCALL error: %s\",\n\t\t\tlibpq_append_conn_error(conn, \"SSL connection has been closed unexpectedly\");\n\t}\npgtls_write(PGconn *conn, const void *ptr, size_t len)", "partial_line": "ERR_clear_", "completion": "ERR_clear_error(); <|endoftext|>"}
{"context": "GetLatestXTime(void)\n\tSpinLockRelease(&XLogRecoveryCtl->info_lck);\n\t\t\tbool\t\twarned_for_promote = false;\n\t\t\t\t\t\t\t   param_name,\n\t\t\t\tProcessStartupProcInterrupts();", "partial_line": "ere", "completion": "ereport(WARNING, <|endoftext|>"}
{"context": "\t\tchar\t\tfname[MAXFNAMELEN];\n\t\t\t\t\t\t\t  \"invalid info bits %04X in WAL segment %s, LSN %X/%X, offset %u\",\n\t\t\t\t\t\t\t  fname,\n\t\t\t\t\t\t\t  LSN_FORMAT_ARGS(recptr),\n\t}", "partial_line": "state->system", "completion": "state->system_identifier); <|endoftext|>"}
{"context": "\t\t\t\t int nodeN, Datum nodeLabel)\n\tspgxlogAddNode xlrec;\n\tnewInnerTuple = addNode(state, innerTuple, nodeLabel, nodeN);\n\t\tif (RelationNeedsWAL(index) && !state->isBuild)\n\t\t{", "partial_line": "recptr = XLogIns", "completion": "recptr = XLogInsert(RM_SPGIST_ID, XLOG_SPGIST_ADD_NODE); <|endoftext|>"}
{"context": "\t\t\t\taggfnoid = F_JSON_OBJECT_AGG_UNIQUE_STRICT;\n\t\t\t\t\t\t\t\t JS_FORMAT_DEFAULT, InvalidOid, false);\n\tif (returning->format->format_type == JS_FORMAT_JSONB)\n\t{\n\treturning = transformJsonConstructorOutput(pstate, ctor->output, args);", "partial_line": "JsonV", "completion": "JsonValueExpr *jve; <|endoftext|>"}
{"context": "#define CCLASSS\t's'\t\t\t\t\n#define AHEAD\t'a'\t\t\t\t\n#ifdef REG_DEBUG\n\tif (re == NULL || string == NULL)\n\tv->re = re;", "partial_line": "v->", "completion": "v->now = string; <|endoftext|>"}
{"context": "\t{\n\t\txstrcat(&result->before_tofrom, token);\n\t\t\tgoto error;\n\t\t\t\t\t\t0, false, false, pset.encoding);\n\t\t\ttoken = strtokx(NULL, whitespace, \"()\", \"\\\"\",", "partial_line": "xstrcat(&re", "completion": "xstrcat(&result->before_tofrom, \" \"); <|endoftext|>"}
{"context": "\t}\n\t\taccum2 = vpadalq_u32(accum2, vpaddlq_u16(vpaddlq_u8(vcntq_u8(vec))));\n\t\tbytes -= bytes_per_iteration;\n\t\tpopcnt += pg_popcount64(*((uint64 *) buf));\n}", "partial_line": "buf +", "completion": "buf += sizeof(uint8x16_t); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\thaystack_end - hptr >= needle_len &&\n\t\t\t\t}\n\telse if (needle_len == 1)\n\t\tchar\t\tnchar = *needle;", "partial_line": "while (hptr < hays", "completion": "while (hptr < haystack_end) <|endoftext|>"}
{"context": "\tDatum\t   *key_datums,\n\t\t\t\t(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),\n\t\t\tv.val.string.val = str;\n\tpfree(val_datums);\n{", "partial_line": "*i", "completion": "*icursor, <|endoftext|>"}
{"context": "\t\tif (missing_name != NULL)\n\t}\n\t{\n\t\tmissing_name = simple_string_list_not_touched(&ropt->functionNames);\n\t{", "partial_line": "if (missing_nam", "completion": "if (missing_name != NULL) <|endoftext|>"}
{"context": "const char *const forkNames[] = {\n\t[MAIN_FORKNUM] = \"main\",\nStaticAssertDecl(lengthof(forkNames) == (MAX_FORKNUM + 1),", "partial_line": "ret", "completion": "return forkNum; <|endoftext|>"}
{"context": "\t\ttype_array_oid = binary_upgrade_next_array_pg_type_oid;\n\t\tbinary_upgrade_next_array_pg_type_oid = InvalidOid;\n\t{\n\t\ttype_array_oid = GetNewOidWithIndex(pg_type, TypeOidIndexId,\n\tOid\t\t\ttype_multirange_oid;", "partial_line": "table_close(pg_type, Acces", "completion": "table_close(pg_type, AccessShareLock); <|endoftext|>"}
{"context": "\t\t state->rs_num_rewrite_mappings);\n\t\tchar\t   *waldata;\n\t\tuint32\t\tnum_mappings = dclist_count(&src->mappings);\n\t\tif (num_mappings == 0)\n\t\t\tdboid = InvalidOid;", "partial_line": "dboi", "completion": "dboid = MyDatabaseId; <|endoftext|>"}
{"context": "\tresult = (Interval *) palloc(sizeof(Interval));\nout_of_range:\n\t\t\terrmsg(\"interval out of range\"));\n\tdouble\t\tmonth_remainder_days,\n\tInterval   *result;", "partial_line": "result = (Interval *) palloc(siz", "completion": "result = (Interval *) palloc(sizeof(Interval)); <|endoftext|>"}
{"context": "#include \"optimizer/optimizer.h\"\n\tGatherState *gatherstate;", "partial_line": "Assert(in", "completion": "Assert(innerPlan(node) == NULL); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t partsupfunc,\nstatic PruneStepResult *\n\t\t\t\t\t\t\t PartitionPruneStepCombine *cstep,\n\tPruneStepResult *result = (PruneStepResult *) palloc0(sizeof(PruneStepResult));\n\t{", "partial_line": "case PARTPRUNE", "completion": "case PARTPRUNE_COMBINE_UNION: <|endoftext|>"}
{"context": "\telementAllocCnt = choose_nelem_alloc(entrysize);\n\tnElementAllocs = (num_entries - 1) / elementAllocCnt + 1;\n{\n\t\t\t\tnDirEntries;\n{", "partial_line": "if (has", "completion": "if (hashp != NULL) <|endoftext|>"}
{"context": "ProcessArchiveRestoreOptions(Archive *AHX)\n\tteSection\tcurSection;\n\t\t\t\t\t\tpg_log_warning(\"archive items not in correct section order\");\n\t\t\t\tcase SECTION_POST_DATA:\n\t\t\t\tdefault:", "partial_line": "bool", "completion": "bool\t\tparallel_mode; <|endoftext|>"}
{"context": "\t\t\t\tCppAsString2(RELKIND_SEQUENCE) \");\\n\\n\");\n\t\t\t\t\"        oid,\"\n\t\t\t\t\"    WHERE\"\n\t\t\t\t\"        typacl IS NOT NULL;\\n\\n\");\n\tPG_CMD_PUTS(\"INSERT INTO pg_init_privs \"", "partial_line": "\"  (objoid, classoid, objsubid,", "completion": "\"  (objoid, classoid, objsubid, initprivs, privtype)\" <|endoftext|>"}
{"context": "static const symbol s_5_18[5] = { 'i', 'r', 'o', 'n', 's' };\nstatic const symbol s_5_26[8] = { 'i', 's', 's', 'a', 'I', 'e', 'n', 't' };\nstatic const struct among a_5[35] =\n{ 3, s_5_0, -1, 1, 0},\n{ 2, s_5_1, -1, 1, 0},", "partial_line": "{ 7, s_5_3, -", "completion": "{ 7, s_5_3, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\trelation->rd_islocaltemp = true;\n\t\t\t\tAssert(relation->rd_backend != INVALID_PROC_NUMBER);\n\t\t\telog(ERROR, \"invalid relpersistence: %c\",\n\trelation->rd_fkeyvalid = false;\n\trelation->rd_partdesc_nodetached = NULL;", "partial_line": "relation->rd_partdesc_no", "completion": "relation->rd_partdesc_nodetached_xmin = InvalidTransactionId; <|endoftext|>"}
{"context": "#include \"optimizer/geqo_selection.h\"\nvoid", "partial_line": "geqo_selection(PlannerInfo *root, Chromoso", "completion": "geqo_selection(PlannerInfo *root, Chromosome *momma, Chromosome *daddy, <|endoftext|>"}
{"context": "\tAH->StartLOsPtr = _StartLOs;\n\tAH->StartLOPtr = _StartLO;\n\tAH->PrepParallelRestorePtr = _PrepParallelRestore;\n\tAH->formatData = ctx;\n\t\tif (AH->fSpec && strcmp(AH->fSpec, \"\") != 0)", "partial_line": "pg_fatal(\"co", "completion": "pg_fatal(\"could not open output file \\\"%s\\\": %m\", AH->fSpec); <|endoftext|>"}
{"context": "\t\t\t\t\t   new_item, MAXALIGN(IndexTupleSize(new_item)),\n{\n\trbuf = _bt_getbuf(rel, lpageop->btpo_next, BT_WRITE);\n\t{\n\t\tBuffer\t\tmetabuf;", "partial_line": "_bt_relbuf(rel, m", "completion": "_bt_relbuf(rel, metabuf); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase ECPGt_array:\n\t\t\t\t\tcase '.':\nfind_struct(const char *name, char *next, char *end)\n\t\t{", "partial_line": "if (p->type->u.element->type != ECPGt_struct && p->t", "completion": "if (p->type->u.element->type != ECPGt_struct && p->type->u.element->type != ECPGt_union) <|endoftext|>"}
{"context": "\t\t\t\t\t\t CommonTableExpr *cte,\n\trte->self_reference = !IsA(cte->ctequery, Query);\n\tif (!rte->self_reference)\n\t\t\tctequery->returningList == NIL)\n\trte->colcollations = list_copy(cte->ctecolcollations);", "partial_line": "eref = ma", "completion": "eref = makeAlias(refname, NIL); <|endoftext|>"}
{"context": "\tchar\t\tbackuptime[128];\n\t\t\t\t\t errmsg(\"could not read file \\\"%s\\\": %m\",\n\tif (fscanf(lfp, \"START WAL LOCATION: %X/%X (file %08X%16s)%c\",\n\tRedoStartLSN = ((uint64) hi) << 32 | lo;\n\t}", "partial_line": "errmsg(\"this is an incremental", "completion": "errmsg(\"this is an incremental backup, not a data directory\"), <|endoftext|>"}
{"context": "\tOid\t\t\townerId;\n\tlocation = pstrdup(stmt->location);\n\tif (!in_place && !is_absolute_path(location))\n\t\tOIDCHARS + 1 + OIDCHARS + 1 + FORKNAMECHARS + 1 + OIDCHARS > MAXPGPATH)\n\t\t\t\t\t\tlocation)));", "partial_line": "ere", "completion": "ereport(WARNING, <|endoftext|>"}
{"context": "\t\tresult = false;\n\t}\n\tPG_FREE_IF_COPY(arg1, 0);\n\tOid\t\t\tcollid = ssup->ssup_collation;\n\tMemoryContext oldcontext;", "partial_line": "PG_RETUR", "completion": "PG_RETURN_VOID(); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tDatum\t\tcfval = slot_getattr(tslot, 1, &isnull);\n\t\t\t\t\t \"       ON (i.indexrelid = pg_get_replica_identity_index(%u))\"\n\t\t\t\t\t  \"AND a.attgenerated = ''\" : \"\"),\n\t\t\t\t errmsg(\"could not fetch table info for table \\\"%s.%s\\\" from publisher: %s\",", "partial_line": "nspname, rel", "completion": "nspname, relname, res->err))); <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\ttp,\n\t\trepl_repl[Anum_pg_foreign_server_srvoptions - 1] = true;\nstatic void\n\tOid\t\t\tcuruserid = GetUserId();", "partial_line": "servern", "completion": "servername); <|endoftext|>"}
{"context": "\t\t\t   &result[0],\nDatum\n\tchar\t   *result = (char *) palloc(16 * 4);\n\t\t\t an_array[0],\n}", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\tExecBuildProjectionInfo(returningList, econtext, slot,\n\t}\n\t\t\tList\t   *childIdxs;\n\t\t\t\tList\t   *ancestors;\n\t\t\t\tforeach(lc2, rootResultRelInfo->ri_onConflictArbiterIndexes)", "partial_line": "if", "completion": "if (map == NULL) <|endoftext|>"}
{"context": "\t\tInitializeSessionUserId(username, useroid, false);\n\tif (MyProcPort != NULL)\n\t\tAssert(!bootstrap);\n\t{\n\t\t\t\t\t(errcode(ERRCODE_TOO_MANY_CONNECTIONS),", "partial_line": "errmsg(\"remaining connection slots ar", "completion": "errmsg(\"remaining connection slots are reserved for roles with privileges of the \\\"%s\\\" role\", <|endoftext|>"}
{"context": "\t\t\t\ttable_close(polDesc, AccessShareLock);\n\t\t\t}\n\t\t\t\t\t*objargs = list_make1(pubname);\n\t\tcase PublicationRelRelationId:\n\t\t\t\ttup = SearchSysCache1(PUBLICATIONREL,", "partial_line": "obj", "completion": "object->objectId); <|endoftext|>"}
{"context": "\t\t\t\tcase RTGreaterEqualStrategyNumber:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t}\n\t{", "partial_line": "whi", "completion": "which = ~0; <|endoftext|>"}
{"context": "    }\n        if (z->c - 2 <= z->lb || z->p[z->c - 1] != 97) { z->lb = mlimit3; return 0; }\n            break;\n    {   int ret = slice_del(z);\n        {   int m2 = z->l - z->c; (void)m2;", "partial_line": "if (z->c", "completion": "if (z->c <= z->lb) goto lab0; <|endoftext|>"}
{"context": "\t\tint16\t\ttypLen;\n\t\tbool\t\ttypByVal;\n\t*start_address += sizeof(int);\n\tparamLI = makeParamList(nparams);\n\tfor (int i = 0; i < nparams; i++)", "partial_line": "*start_addre", "completion": "*start_address += sizeof(Oid); <|endoftext|>"}
{"context": "\t\t\tif (operform->oprnamespace == namespaceId)\n\t\t\t\tReleaseSysCacheList(catlist);\n\t\t\t}\n\t\t}\nFuncCandidateList", "partial_line": "ret", "completion": "return NULL; <|endoftext|>"}
{"context": "}\n\tforeach(lc, tupleTable)\n\treturn slot;\n\t\tif (slot->tts_values)\n\t\t\tpfree(slot->tts_values);", "partial_line": "pfree(slot->tt", "completion": "pfree(slot->tts_isnull); <|endoftext|>"}
{"context": "}\n    z->I[0] = z->l;\n            if (in_grouping_U(z, g_v, 97, 250, 0)) goto lab2;\n                if (out_grouping_U(z, g_v, 97, 250, 0)) goto lab4;\n                    int ret = out_grouping_U(z, g_v, 97, 250, 1);", "partial_line": "l", "completion": "lab4: <|endoftext|>"}
{"context": "cashsmaller(PG_FUNCTION_ARGS)\n\tCash\t\tresult;\n\tCash\t\tm2;\n\tCash\t\tm4;\n\tCash\t\tm6;", "partial_line": "initSt", "completion": "initStringInfo(&buf); <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\touter_lb, inner_lb) == lb_cmpval);\n\tswitch (jointype)\n\t\t\t*merged_lb = (lb_cmpval < 0) ? *outer_lb : *inner_lb;\n\t\t\tbreak;", "partial_line": "elog(ERROR, \"unrecognized join type: %d\"", "completion": "elog(ERROR, \"unrecognized join type: %d\", (int) jointype); <|endoftext|>"}
{"context": "}\n\t\t   datalen);\n\theader->t_infomask2 = xlhdr.t_infomask2;\n}\nstatic bool", "partial_line": "DecodeTXNNeedSkip(LogicalDecodingContext *ctx, X", "completion": "DecodeTXNNeedSkip(LogicalDecodingContext *ctx, XLogRecordBuffer *buf, <|endoftext|>"}
{"context": "                }\n                    if (ret < 0) return ret;\n                break;\n                break;\n                if (z->c >= z->l) goto lab0;", "partial_line": "cont", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t \"(see server log for list)\",\n\t\t\t\t\t errdetail_log(\"%s\", logdetail.data),\n\t\t\t\t\t(errcode(ERRCODE_DEPENDENT_OBJECTS_STILL_EXIST),\n\t\t\t\t\t\t\t   \"drop cascades to %d other objects\",\n\tpfree(logdetail.data);", "partial_line": "DropObjectById(const ObjectAdd", "completion": "DropObjectById(const ObjectAddress *object) <|endoftext|>"}
{"context": "\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t}\n\t\tif (opts->filename)\n\t\tpg_fatal(\"options -s/--schema-only and -a/--data-only cannot be used together\");\n\tif (data_only && no_data)", "partial_line": "pg_fatal(\"options -a/", "completion": "pg_fatal(\"options -a/--data-only and --no-data cannot be used together\"); <|endoftext|>"}
{"context": "\t\t\t\t(void) TS_phrase_output(data, &Ldata, &Rdata,\n\t\t\t{\n\t\t\t\tdata->negate = true;\n\t\t\t}\n\t\t\telse", "partial_line": "TSPO_BOTH | TSP", "completion": "TSPO_BOTH | TSPO_L_ONLY | TSPO_R_ONLY, <|endoftext|>"}
{"context": "\t\t econtext != NULL;\n\tint\t\t\tfd,\n\t}\n\t\t\t\t\t  \"0123456789_\"\n\t\t\t\t\t  \", \\n\\t\");", "partial_line": "*ext", "completion": "*extra = NULL; <|endoftext|>"}
{"context": "\t\t\telog(PANIC, \"failed to add new item to block %u in index \\\"%s\\\"\",\n\t\t\tmetad->btm_fastlevel = opaque->btpo_level;\n\t\t\txlrec.offnum = newitemoff;\n\t\t\t\txlinfo = XLOG_BTREE_INSERT_LEAF;\n\t\t\t}", "partial_line": "XLogRegisterBuffer(1, cbuf, REG", "completion": "XLogRegisterBuffer(1, cbuf, REGBUF_STANDARD); <|endoftext|>"}
{"context": "\tPLpgSQL_row *row;\n\tint\t\t\ti;\n\t\t\t(argmodes[i] == PROARGMODE_INOUT ||\n\t\t\t argmodes[i] == PROARGMODE_OUT))\n\t\t\t{", "partial_line": "in", "completion": "int\t\t\tdno; <|endoftext|>"}
{"context": "\t\t\t*err_msg = psprintf(\"could not open file \\\"%s\\\": %m\",\n\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t \"tokenize_context\",\n}\n\tErrorContextCallback tokenerrcontext;", "partial_line": "while (!feof(file)", "completion": "while (!feof(file) && !ferror(file)) <|endoftext|>"}
{"context": "\t\tpq_putemptymessage(PqMsg_NoData);\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_CURSOR),\n\t\t\t\t\t\t\t\t  FetchPortalTargetList(portal),\n\t\txact_started = true;\n#ifdef MEMORY_CONTEXT_CHECKING", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\tBTPageOpaque opaque;\n\t\t\t\t\tneedheaptidspace ? BTMaxItemSize : BTMaxItemSizeNoHeapTid,\n\t\t\t\t\t \"or use full text indexing.\"),\n\t\tIndexRelationGetNumberOfKeyAttributes(rel))\n\t\tequalimageproc = get_opfamily_proc(opfamily, opcintype, opcintype,", "partial_line": "if (!OidIsValid(equa", "completion": "if (!OidIsValid(equalimageproc) || <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\t\t\t\t   PointerGetDatum(&lex),\n\t{\n\t\t{\n\t\t\tst->len = 2 * st->len;", "partial_line": "st->list[st->cur].lexeme[l", "completion": "st->list[st->cur].lexeme[llen] = '\\0'; <|endoftext|>"}
{"context": "        break;\n    }\n}\n            if (ret == 0) goto lab0;\n        switch (among_var) {", "partial_line": "{   int m2 = z->l - z->c", "completion": "{   int m2 = z->l - z->c; (void)m2; <|endoftext|>"}
{"context": "            {   int ret = slice_del(z);\n            {   int m3 = z->l - z->c; (void)m3;\n                }\n                if (ret < 0) return ret;\n        mlimit1 = z->lb; z->lb = z->I[1];", "partial_line": "if (in_groupin", "completion": "if (in_grouping_b_U(z, g_c, 98, 122, 0)) { z->lb = mlimit1; return 0; } <|endoftext|>"}
{"context": "#endif\nint\t\t\twal_segment_size = DEFAULT_XLOG_SEG_SIZE;\n#define NUM_XLOGINSERT_LOCKS  8\nstatic double CheckPointDistanceEstimate = 0;\n\t{\"fsync\", WAL_SYNC_METHOD_FSYNC, false},", "partial_line": "{\"open_s", "completion": "{\"open_sync\", WAL_SYNC_METHOD_OPEN, false}, <|endoftext|>"}
{"context": "\tTriggerData LocTriggerData = {0};\n\t\treturn;\n\tLocTriggerData.type = T_TriggerData;\n\tLocTriggerData.tg_relation = relinfo->ri_RelationDesc;\n\t\t\t\t\t\t\t\t  TRIGGER_TYPE_STATEMENT,", "partial_line": "TRIGGER_TY", "completion": "TRIGGER_TYPE_BEFORE, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\triinfo->pf_eq_oprs[i],\n\t\tif (riinfo->hasperiod && is_no_action)\n\t\t\tOid\t\t\tpk_period_type = RIAttType(pk_rel, riinfo->pk_attnums[riinfo->nkeys - 1]);\n\t\t\tOid\t\t\tfk_period_type = RIAttType(fk_rel, riinfo->fk_attnums[riinfo->nkeys - 1]);", "partial_line": "appendStringInfoChar(&in", "completion": "appendStringInfoChar(&intersectbuf, '('); <|endoftext|>"}
{"context": "\t\t\t\t\telog(ERROR, \"cannot set value in column %d to DEFAULT\", i);\n\t\t\t\telse\n\t\t\t\tif (!new_expr)\n\t\t\t\t\tif (isAutoUpdatableView)\n\t\t\t\t\t\tallReplaced = false;", "partial_line": "att_tup", "completion": "att_tup->atttypmod, <|endoftext|>"}
{"context": "\t\t\t}\n\t\t{\n}\n#ifdef NOT_USED\t\t\t\t\t\n\telse", "partial_line": "INTE", "completion": "INTERRUPT(nfa->v->re); <|endoftext|>"}
{"context": "\ttext\t   *column = PG_GETARG_TEXT_PP(2);\n\tOid\t\t\troleid;\n\tAclMode\t\tmode;\n\tint\t\t\tprivresult;\n\troleid = get_role_oid_or_public(NameStr(*username));", "partial_line": "privresult = column_privilege_check", "completion": "privresult = column_privilege_check(tableoid, colattnum, roleid, mode); <|endoftext|>"}
{"context": "\tAssert(data == NULL || data->npos == 0);\n\t\tWordEntryPosVector *posvec;\n\t\t\twhile (posvec_iter < posvec->pos + posvec->npos)\n\t\t\t\tif (val->weight & (1 << WEP_GETWEIGHT(*posvec_iter)))\n\t\t\t\tdata->pos = NULL;", "partial_line": "result =", "completion": "result = TS_YES; <|endoftext|>"}
{"context": "\twhile (*pattern != '\\0')\n\t\tif (strncmp(pattern, LPH_USERNAME, LPH_USERNAME_LEN) == 0)\n\t\t}\n\t\telse\n\t}", "partial_line": "return output", "completion": "return output.data; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tReorderBufferTXN *txn, XLogRecPtr commit_lsn);\n\t\t\t\t\t\t\t\t  ReorderBufferTXN *txn);", "partial_line": "static void p", "completion": "static void pgoutput_stream_abort(struct LogicalDecodingContext *ctx, <|endoftext|>"}
{"context": "\tif (removeOld)\n\t\tAssert(!outOfShmem);\n{\n\tPREDICATELOCKTARGET *heaptarget;\n\trelId = relation->rd_id;", "partial_line": "heap", "completion": "heapId = relId; <|endoftext|>"}
{"context": "\t\t\t\t\tfputs(\" \", fout);\n\tbool\t\topt_tuples_only = cont->opt->tuples_only;\n\tif (cont->opt->start_table)\n\t}\n\t\t{", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "fix_expr_common(PlannerInfo *root, Node *node)\n\tif (IsA(node, Aggref))\n\telse if (IsA(node, WindowFunc))\n\t{\n\t{", "partial_line": "set_opfuncid", "completion": "set_opfuncid((OpExpr *) node); <|endoftext|>"}
{"context": "extract_strong_not_arg(Node *clause)\n\tif (clause == NULL)\n\t\t\treturn (Node *) linitial(bexpr->args);\n\t{\n\tif (clause == NULL || subexpr == NULL)", "partial_line": "clause = (Node *) ((Rela", "completion": "clause = (Node *) ((RelabelType *) clause)->arg; <|endoftext|>"}
{"context": "static const symbol s_34[] = { 'u', 'g', 'l', 'i' };\n    }\n    {   int c2 = z->c;\n        z->bra = z->c;\n        if (z->c == z->l || z->p[z->c] != 'y') goto lab1;", "partial_line": "int c", "completion": "int c5 = z->c; <|endoftext|>"}
{"context": "\t{\n\t\tif (!opt_tuples_only && cont->title)\n\t\tif (opt_tuples_only)\n\t\tcurrent_format = 2;\t\t\n\t\t\t\tif (opt_border != 1)", "partial_line": "troff_ms_esc", "completion": "troff_ms_escaped_print(cont->headers[i % cont->ncolumns], fout); <|endoftext|>"}
{"context": "\tTidStore   *dead_items;\n\tshared = (PVShared *) shm_toc_lookup(toc, PARALLEL_VACUUM_KEY_SHARED, false);\n\t\t\t\t\t\t\t\tshared->dead_items_handle);\n\tpvs.dead_items = dead_items;\n\tInstrStartParallelQuery();", "partial_line": "table_close(rel, ShareUpdateEx", "completion": "table_close(rel, ShareUpdateExclusiveLock); <|endoftext|>"}
{"context": "\t\tif (rt_index == parsetree->resultRelation &&\n\t\t\tcontinue;\n\t\t\tfor (i = 0; i < rules->numLocks; i++)\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\tcte->ctequery = (Node *)", "partial_line": "fireRIRrules((Query *) cte->ctequer", "completion": "fireRIRrules((Query *) cte->ctequery, activeRIRs); <|endoftext|>"}
{"context": "\t\t\tcase REINDEX_TABLE:\n\t\t\t\tpg_log_error(\"reindexing of table \\\"%s\\\" in database \\\"%s\\\" failed: %s\",\n\t}\n\t\t\t\t\t\t\t\t \" ORDER BY c.relpages DESC;\");\n\t\t\t\tAssert(user_list != NULL);", "partial_line": "CppAsString2(RELKIND_REL", "completion": "CppAsString2(RELKIND_RELATION) \", \" <|endoftext|>"}
{"context": "\t{\n\t\tif (pcontrol->default_version)\n\t\t\tereport(ERROR,\n\tif (stat(filename, &fst) == 0)\n\t{", "partial_line": "evi_start", "completion": "evi_start = find_install_path(evi_list, evi_target, <|endoftext|>"}
{"context": "{\nstatic void\n\tflags->cflags = REG_ADVANCED;\n\t\t{\n\t\t\t\tcase 'm':\t\t", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "static int\n{\n\tif (cac == CAC_OK)\n\t\t\tcac = CAC_TOOMANY;\n\tstartup_data.canAcceptConnections = cac;", "partial_line": "ereport", "completion": "ereport(LOG, <|endoftext|>"}
{"context": "\t\tmemcpy(newToc->dependencies, opts->deps, opts->nDeps * sizeof(DumpId));\n\t}\n\tTocEntry   *te;\n\t\tcase archCustom:\n\t\t\tfmtName = \"UNKNOWN\";", "partial_line": "curSection = te", "completion": "curSection = te->section; <|endoftext|>"}
{"context": "\t\t\t\t\t\t NULL, session_timezone) != 0)\n\t\t\tereport(ERROR,\n\t\tcache_ts = cur_ts;\n\t\tcp = pg_ultostr_zeropad(cp, abs(sec), 2);\n\t{", "partial_line": "va", "completion": "value /= 10; <|endoftext|>"}
{"context": "\ttime = jd;\n\ttime -= (*min) * USECS_PER_MINUTE;\n{\n\t\t\t*(str + 4) = '\\0';\n\t\t}", "partial_line": "tm->tm_mo", "completion": "tm->tm_mon = 1; <|endoftext|>"}
{"context": "\tPQclear(res);\nstatic bool\n{\n\tprintfPQExpBuffer(&buf,\n\t\t\t\t\t  \" WHERE p.oid = '%s'\\n\"", "partial_line": "\"UNION AL", "completion": "\"UNION ALL\\n\" <|endoftext|>"}
{"context": "\t\t\t\t\tif (pset.on_error_stop)\n\t\t\t\t\t\tgoto loop_exit;\n\t\t   result_status == PGRES_COPY_IN);\n\t\t{\n\t}", "partial_line": "return", "completion": "return success; <|endoftext|>"}
{"context": "\tsize = add_size(size, sizeof(PgArchData));\n\tif (!found)\n\t\tpg_atomic_init_u32(&PgArch->force_dir_scan, 0);\nvoid\nPgArchiverMain(const void *startup_data, size_t startup_data_len)", "partial_line": "Auxiliar", "completion": "AuxiliaryProcessMainCommon(); <|endoftext|>"}
{"context": "\t\tif (leftarray)\n\t\t\treturn _bt_compare_array_scankey_args(scan, rightarg, leftarg,\n\tlefttype = leftarg->sk_subtype;\n\trighttype = rightarg->sk_subtype;\n\t{", "partial_line": "st", "completion": "strat); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t{\n\t\t\t\tfor (ca = cnfa->states[i]; ca->co != COLORLESS; ca++)\n\t\t\t\t\t}\n\t\t\t\t\tif (!(cnfa->stflags[ca->to] & CNFA_NOPROGRESS))", "partial_line": "if (no", "completion": "if (noprogress) <|endoftext|>"}
{"context": "\t\t\tString\t   *ns_node = lfirst_node(String, lc2);\n\t\t\t{\n\t\t\tbool\t\tnotnull = bms_is_member(colnum, tf->notnulls);\n\t\t\t\tcontinue;\n\t\t\tif (colexpr != NULL)", "partial_line": "if (no", "completion": "if (notnull) <|endoftext|>"}
{"context": "\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, \n#line 48 \"nan_test.pgc\"\n#line 48 \"nan_test.pgc\"\n\t\t\tprintf(\"%d %sInf '%s'\\n\", id, (d < 0 ? \"-\" : \"+\"), val);\n#line 56 \"nan_test.pgc\"", "partial_line": "#line 61 \"nan_te", "completion": "#line 61 \"nan_test.pgc\" <|endoftext|>"}
{"context": "AfterTriggerEndSubXact(bool isCommit)\n\t\t\treturn;\n\t\t}\n\t\t\t\t\t\t\t\t\t &afterTriggers.trans_stack[my_level].events);\n\t\t}", "partial_line": "for_each_event_chunk(e", "completion": "for_each_event_chunk(event, chunk, afterTriggers.events) <|endoftext|>"}
{"context": "\tswitch (strategy)\n\t\tcase GinOverlapStrategy:\n\t\t\tfor (i = 0; i < nkeys; i++)\n\t\t\tbreak;\n\t\t\tres = true;", "partial_line": "res = f", "completion": "res = false; <|endoftext|>"}
{"context": "static const symbol s_2_538[6] = { 'l', 'u', 'c', 'i', 'l', 'e' };\nstatic const symbol s_2_544[7] = { 'l', 'u', 0xC4, 0x8D, 'i', 'l', 'e' };\nstatic const symbol s_2_549[4] = { 'r', 'a', 'm', 'e' };\nstatic const symbol s_2_553[5] = { 'u', 'c', 'o', 'm', 'e' };\nstatic const symbol s_2_557[7] = { 0xC5, 0xA1, 'n', 'j', 'o', 'm', 'e' };", "partial_line": "static const symbol s_2_566[5] = { 'a', 't", "completion": "static const symbol s_2_566[5] = { 'a', 't', 'o', 'm', 'e' }; <|endoftext|>"}
{"context": "\t\taclresult = object_aclcheck(TableSpaceRelationId, curoid, GetUserId(),\n\t\tif (aclresult != ACLCHECK_OK)\n}\n\ttuple = heap_getnext(scandesc, ForwardScanDirection);\n\tif (HeapTupleIsValid(tuple))", "partial_line": "errmsg(\"tabl", "completion": "errmsg(\"tablespace \\\"%s\\\" does not exist\", <|endoftext|>"}
{"context": "CopyFromCSVOneRow(CopyFromState cstate, ExprContext *econtext, Datum *values,\n\t\t\t\t  bool *nulls)\n\treturn CopyFromTextLikeOneRow(cstate, econtext, values, nulls, true);\n\tTupleDesc\ttupDesc;\n\tOid\t\t   *typioparams = cstate->typioparams;", "partial_line": "ExprState **defexprs", "completion": "ExprState **defexprs = cstate->defexprs; <|endoftext|>"}
{"context": "{ 5, s_2_1476, -1, 15, 0},\n{ 2, s_2_1488, -1, 104, 0},\n{ 4, s_2_1489, 1488, 128, 0},\n{ 5, s_2_1497, 1488, 102, 0},\n{ 4, s_2_1517, 1503, 98, 0},", "partial_line": "{ 2,", "completion": "{ 2, s_2_1521, -1, 20, 0}, <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_GROUPING_ERROR),\n\t}\n\t\t\t\t\tList *directargs,\n\t\t\t\t\tList *args,", "partial_line": "check_agg_arguments_conte", "completion": "check_agg_arguments_context context; <|endoftext|>"}
{"context": "static void reduce_dependencies(ArchiveHandle *AH, TocEntry *te,\n{\n\topts->include_everything = true;\n\topts->cparams.promptPassword = TRI_DEFAULT;\n\topts->dumpData = true;", "partial_line": "opts->dumpStatis", "completion": "opts->dumpStatistics = true; <|endoftext|>"}
{"context": "\t\t\tlocale = colllocale;\n\t\t\t\t\t\t\t collcollate,\n\treturn address;\n\t\t\t\t\t\t\t  CStringGetDatum(collname),\n\tif (!object_ownercheck(CollationRelationId, collOid, GetUserId()))", "partial_line": "aclcheck_error(ACLCHECK_NO", "completion": "aclcheck_error(ACLCHECK_NOT_OWNER, OBJECT_COLLATION, <|endoftext|>"}
{"context": "\tdouble\t\tspc_seq_page_cost;\n\tselectivity = clauselist_selectivity(root, tidrangequals, baserel->relid,\n\tstartup_cost += qpqual_cost.startup + tid_qual_cost.per_tuple;\n\tQualCost\tqpqual_cost;\n\tAssert(baserel->relid > 0);", "partial_line": "if (param_", "completion": "if (param_info) <|endoftext|>"}
{"context": "\tmemcpy(&(state->ptr[state->cur]), node->valnode, sizeof(QueryItem));\n\t\tstate->ptr[state->cur].qoperator.left = 1;\n\t}\n\telse\n\t{", "partial_line": "state->cu", "completion": "state->cur++; <|endoftext|>"}
{"context": "\tif (use_setsessauth)\n\t\tappendPQExpBufferStr(pgdumpopts, \" --no-comments\");\n\tif (no_data)\n\tif (no_statistics)\n\tif (with_schema)", "partial_line": "if (st", "completion": "if (statistics_only) <|endoftext|>"}
{"context": "\t\tif (p.current_blocknum >= num_pages)\n\tSpGistUpdateMetaPage(index);\n\tif (bds->stats->pages_deleted > 0)\n\t{\n\tbds->stats->pages_free = bds->stats->pages_deleted;", "partial_line": "IndexBulkDele", "completion": "IndexBulkDeleteResult * <|endoftext|>"}
{"context": "#include <fcntl.h>\n#include \"catalog/pg_subscription.h\"\n#include \"utils/syscache.h\"", "partial_line": "IsSyste", "completion": "IsSystemRelation(Relation relation) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase T_ReturningExpr:\n\t\tcase T_TargetEntry:\n\t\t\t}\n\t\t\t\tconst A_Expr *aexpr = (const A_Expr *) expr;", "partial_line": "loc = leftmostLoc", "completion": "loc = leftmostLoc(aexpr->location, <|endoftext|>"}
{"context": "\tECPGt_short,&(s),(long)1,(long)1,sizeof(short), \n\tECPGt_double,&(dbl),(long)1,(long)1,sizeof(double), \n\trsetnull(CDECIMALTYPE, (char *) &dec);\n\t{ ECPGdo(__LINE__, 1, 0, NULL, 0, ECPGst_normal, \"insert into test ( id , c , s , i , b , f , l , dbl , dec , dat , tmp ) values ( 2 , $1  , $2  , $3  , $4  , $5  , $6  , $7  , $8  , $9  , $10  )\", \n\tECPGt_double,&(dbl),(long)1,(long)1,sizeof(double), ", "partial_line": "if (sqlca.sqlcode", "completion": "if (sqlca.sqlcode < 0) sqlprint ( );} <|endoftext|>"}
{"context": "\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) exit (1);}\nif (sqlca.sqlwarn[0] == 'W') sqlprint();", "partial_line": "if (sqlca.sql", "completion": "if (sqlca.sqlcode < 0) exit (1);} <|endoftext|>"}
{"context": "\treturn REG_NOMATCH;\nciterdissect(struct vars *v,\n\tassert(t->child != NULL && t->child->cnfa.nstates > 0);\n\tassert(begin <= end);\n\tendpts[0] = begin;", "partial_line": "if (endpts[", "completion": "if (endpts[k] == NULL) <|endoftext|>"}
{"context": "#line 40 \"quote.pgc\"\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\n#line 43 \"quote.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"declare C cursor for select * from \\\"My_Table\\\"\", ECPGt_EOIT, ECPGt_EORT);\n  {", "partial_line": "ECPGt_char,(var", "completion": "ECPGt_char,(var),(long)25,(long)1,(25)*sizeof(char), <|endoftext|>"}
{"context": "\t\tReleaseSysCache(tuple);\n\t\tPG_RETURN_NULL();\n\troutine = GetIndexAmRoutineByAmId(amoid, true);\n\t\tif (isnull)\n\t\tHeapTuple\ttuple;", "partial_line": "&& attno > rd_index->in", "completion": "&& attno > rd_index->indnkeyatts) <|endoftext|>"}
{"context": "\t\t\t    fill_buffer();\n\tend_of_comment:\n\t\tif (++buf_ptr >= buf_end)\n\t    do {\n\t\t++e_com;", "partial_line": "*e_com++ = ' ', *e_com++ = '*',", "completion": "*e_com++ = ' ', *e_com++ = '*', *e_com++ = ' '; <|endoftext|>"}
{"context": "\tpathnode->subpath = subpath;\n\t\tpathnode->path.rows = subpath->rows;\n\telse\nPath *\n\tQualCost\toldcost;", "partial_line": "if (!is_projection_capable", "completion": "if (!is_projection_capable_path(path)) <|endoftext|>"}
{"context": "\t\tAssert(nthistime > 0);\n\t\tfile->pos += nthistime;\n\t\t\t\t\t   nread, start_size));\n\treturn nread;\nsize_t", "partial_line": "BufFileReadCommon(file,", "completion": "BufFileReadCommon(file, ptr, size, true, false); <|endoftext|>"}
{"context": "#include <unistd.h>\n#include \"utils/hsearch.h\"\nstatic HTAB *invalid_page_tab = NULL;", "partial_line": "report_invalid", "completion": "report_invalid_page(int elevel, RelFileLocator locator, ForkNumber forkno, <|endoftext|>"}
{"context": "\t\tif (!port->peer_dn)\n\t\t\tereport(LOG,\n}\n#define RADIUS_MAX_PASSWORD_LENGTH 128\n\tuint8\t\tattribute;", "partial_line": "uint8\t\tdata[FLEXIBLE_ARR", "completion": "uint8\t\tdata[FLEXIBLE_ARRAY_MEMBER]; <|endoftext|>"}
{"context": "\t\tLockBuffer(buf, BUFFER_LOCK_SHARE);\n\telse\n\t\t\t   itemIndex <= so->currPos.lastItem);\n\t\t\tItemId\t\tiid = PageGetItemId(page, offnum);\n\t\t\t}", "partial_line": "if (killed", "completion": "if (killedsomething) <|endoftext|>"}
{"context": "static const symbol s_4_30[3] = { 0xC5, 0xCE, 0xCF };\n{ 2, s_4_17, 15, 2, 0},\n{ 1, s_4_18, -1, 1, 0},\n{ 2, s_4_19, 18, 2, 0},\n{ 1, s_4_24, -1, 1, 0},", "partial_line": "static const symbol s_5", "completion": "static const symbol s_5_7[2] = { 0xC1, 0xC8 }; <|endoftext|>"}
{"context": "\tarrayelems = (Datum *) palloc(lockData->nlocks * sizeof(Datum));\n\tfor (i = 0; i < lockData->nprocs; i++)\n\t\t\t\tcontinue;\n\t\t\tif (conflictMask & instance->holdMask)\n\tPG_RETURN_ARRAYTYPE_P(construct_array_builtin(arrayelems, narrayelems, INT4OID));", "partial_line": "int\t\t\tblocked_pid = PG_", "completion": "int\t\t\tblocked_pid = PG_GETARG_INT32(0); <|endoftext|>"}
{"context": "\t\tcase JOIN_SEMI:\n\t\tcase JOIN_RIGHT:\n\t\tcase JOIN_FULL:\n\t\tcase JOIN_UNIQUE_OUTER:\n\t\t\tbreak;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "error(const char *string,...)\n}\n\tva_end(args);\n\t\t\t\te);\n\t}", "partial_line": "change_directory(ch", "completion": "change_directory(char const *dir) <|endoftext|>"}
{"context": "#include \"access/timeline.h\"\n#include \"postmaster/auxprocess.h\"\n#include \"storage/procarray.h\"\n#include \"tcop/tcopprot.h\"\n#include \"utils/builtins.h\"", "partial_line": "int\t\t\twal_receiver", "completion": "int\t\t\twal_receiver_timeout; <|endoftext|>"}
{"context": "\tReleaseBuffer(phbuf);\n}\n\theapNumBlocks = RelationGetNumberOfBlocks(heapRel);\n\t}\n\t{", "partial_line": "state = i", "completion": "state = initialize_brin_buildstate(index, revmap, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t\tconn->require_auth, selected_mechanism);\n\t\tif (password == NULL)\n\t\t}\n\t}", "partial_line": "&initialresponse, &", "completion": "&initialresponse, &initialresponselen); <|endoftext|>"}
{"context": "\t\t\tnewcol_attno++;\n\t\tif (list_length(columns) > MaxHeapAttributeNumber)\n\t\t\tereport(ERROR,\n\tif (is_partition)\n\t\t\t\t\t\tereport(ERROR,", "partial_line": "coldef->generated ==", "completion": "coldef->generated == ATTRIBUTE_GENERATED_STORED ? \"STORED\" : \"VIRTUAL\", <|endoftext|>"}
{"context": "\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type, NULL);\n\t\t\t\tjb.val.string.len = strlen(outputstr);\n\tif (!is_null && !scalar_jsonb &&\n\t\tJsonbValue\tva;", "partial_line": "va.val.array.n", "completion": "va.val.array.nElems = 1; <|endoftext|>"}
{"context": "static int\n#else\n\t\t\tif (WSAGetLastError() == WSAEINTR)\n\t\t\tcontinue;\nstatic int", "partial_line": "find_uncon", "completion": "find_unconnected_slot(const ParallelSlotArray *sa) <|endoftext|>"}
{"context": "\tdo\n\t\t{\n\t\tcold = NULL;\n\t\t\t\telse\n\t\t\t\t{", "partial_line": "if (end ==", "completion": "if (end == NULL) <|endoftext|>"}
{"context": "\t\tFileClose(src->vfd);\nstatic void\nlogical_rewrite_log_mapping(RewriteState state, TransactionId xid,\n\tbool\t\tfound;\n\t\t\t\t\t errmsg(\"could not create file \\\"%s\\\": %m\", path)));", "partial_line": "bool\t\tdo_log_", "completion": "bool\t\tdo_log_xmin = false; <|endoftext|>"}
{"context": "\toldchunks = hashtable->chunks;\n\t\t\t{\n\t\t\t\t\t\t\t\t\t  hashTuple->hashvalue,\n\t\t}\n\t\thashtable->growEnabled = false;", "partial_line": "printf(\"Hashjoin %p: disabling further inc", "completion": "printf(\"Hashjoin %p: disabling further increase of nbatch\\n\", <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstruct config_int *conf = (struct config_int *) gconf;\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\t\tconf->assign_hook(newval, newextra);\n\t\t\t\t\t\t\t\tset_extra_field(&conf->gen, &conf->gen.extra,", "partial_line": "cha", "completion": "changed = true; <|endoftext|>"}
{"context": "\trechdr->xl_tot_len = (uint32) total_len;\n\t\tsource = tmp.data;\n\t\t\tbreak;\n\t{\n\t\t\tmemcpy(copied_buffer.data + upper, origdata + upper, BLCKSZ - upper);", "partial_line": "flags = REGBUF_F", "completion": "flags = REGBUF_FORCE_IMAGE; <|endoftext|>"}
{"context": "ParallelQueryMain(dsm_segment *seg, shm_toc *toc)\n\tFixedParallelExecutorState *fpes;\n\tQueryDesc  *queryDesc;\n\tjit_instrumentation = shm_toc_lookup(toc, PARALLEL_KEY_JIT_INSTRUMENTATION,\n\tpgstat_report_activity(STATE_RUNNING, debug_query_string);", "partial_line": "if (DsaPointerIsValid(fpes->", "completion": "if (DsaPointerIsValid(fpes->param_exec)) <|endoftext|>"}
{"context": "{\n\tMySerializableXact = sxid->myXact;\n\t\tLWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);\n\t\tsxact->commitSeqNo = InvalidSerCommitSeqNo;\n\t\t\t\t\t\t\t\t\t\t\t   &sxidtag,", "partial_line": "SerialSetActiveSerXmi", "completion": "SerialSetActiveSerXmin(sxact->xmin); <|endoftext|>"}
{"context": "\t\t\t\t\tPostgresPollingStatusType status;\n\t\t\t\t\tbreak;\n\t\t{\n\t\t\t\tif (!check_issuer(actx, conn))\n\t\t\t\tif (!start_device_authz(actx, conn))", "partial_line": "goto error_r", "completion": "goto error_return; <|endoftext|>"}
{"context": "\t{\n\t\tif (frameOptions & FRAMEOPTION_ROWS)\n\t\t\telse\n\t\t}\n\t}", "partial_line": "if (endOffset->con", "completion": "if (endOffset->constisnull) <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\tif (!nspName)", "partial_line": "errmsg(\"schema \\\"%s\\\" already", "completion": "errmsg(\"schema \\\"%s\\\" already exists\", nspName))); <|endoftext|>"}
{"context": "TidStoreUnlock(TidStore *ts)\n\tif (TidStoreIsShared(ts))\nTidStoreDestroy(TidStore *ts)\nvoid\n\tbitmapword\tword;", "partial_line": "int\t\t\ti", "completion": "int\t\t\tidx = 0; <|endoftext|>"}
{"context": "\t\t\t\tparsetree->onConflict->action == ONCONFLICT_UPDATE)\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\tCMD_UPDATE,\n\t\t\t\t\t\t\t\t\t\tNULL, 0, NULL);\n\t\t}", "partial_line": "switch (", "completion": "switch (action->commandType) <|endoftext|>"}
{"context": "\tif (rewritten == NIL)\n\t\t\t\t\t\t\tCURSOR_OPT_PARALLEL_OK, NULL, es,\n\t\t\t\t\t\t\tpstate, params);\n\tExplainEndOutput(es);\n\tend_tup_output(tstate);", "partial_line": "Explain", "completion": "ExplainResultDesc(ExplainStmt *stmt) <|endoftext|>"}
{"context": "\t\tHeapTuple\tfttuple;\n\t\tif (!HeapTupleIsValid(fttuple))\n\t\tCatalogTupleDelete(ftrel, &fttuple->t_self);\n\tif (rel->rd_rel->relkind == RELKIND_PARTITIONED_TABLE)\n\t\tRemovePartitionKeyByRelId(relid);", "partial_line": "if (reli", "completion": "if (relid == defaultPartOid) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tint nresources);\n\tManyTestResource *mres = (ManyTestResource *) DatumGetPointer(res);\n\tdlist_delete(&mres->node);\nPrintManyTest(Datum res)\n\t\tmres->kind = &kinds[kind_idx];", "partial_line": "int\t\t\tn", "completion": "int\t\t\tntotal; <|endoftext|>"}
{"context": "\t\t50, 0, INT_MAX,\n\t\t100000000, -1, INT_MAX,\n\t},\n\t{\n\t\t\tgettext_noop(\"Minimum number of tuple inserts, updates, or deletes prior to analyze.\"),", "partial_line": "NULL, NU", "completion": "NULL, NULL, NULL <|endoftext|>"}
{"context": "fmtQualifiedIdEnc(const char *schema, const char *id, int encoding)\n\tPQExpBuffer lcl_pqexp = createPQExpBuffer();\n{\n\t\t\t\t\t version_number % 10000);\n\t\telse", "partial_line": "appendStri", "completion": "appendStringLiteral(PQExpBuffer buf, const char *str, <|endoftext|>"}
{"context": "\t\t\tAssert(ItemPointerCompare(BTreeTupleGetHeapTID(itup),\n\t\tif (!BTreeTupleIsPosting(itup))\n\t\t\t\tif (ptidcmp >= 0)\n\t\t\t}\n\t\t\t{", "partial_line": "if (", "completion": "if (vacposting == NULL) <|endoftext|>"}
{"context": "\t\tforeach(l, indexoidlist)\n\t\t\tForm_pg_index index;\n\t\t\tindexRelation = index_open(indexoid, lmode);\n\t\t\t\tcontinue;\n\t\t\tif (index->indcheckxmin &&", "partial_line": "info->i", "completion": "info->indexoid = index->indexrelid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t PointerGetDatum(NULL), \n\tprocOid2 = LookupFuncName(procname, 3, argList, true);\n\t\t\t\t\t errmsg(\"type input function %s has multiple matches\",\n\telse\n\t{", "partial_line": "if (!OidIs", "completion": "if (!OidIsValid(procOid)) <|endoftext|>"}
{"context": "#include \"common/int.h\"\n#include \"executor/spi.h\"\n#include \"lib/qunique.h\"\n\tWordEntry  *arrb;\n\tchar\t\tlexeme[FLEXIBLE_ARRAY_MEMBER];", "partial_line": "static TSTernaryValue", "completion": "static TSTernaryValue TS_execute_recurse(QueryItem *curitem, void *arg, <|endoftext|>"}
{"context": "\tif (max_inuse == 0)\n\t{\n\t\t{\n\t\t\treturn cached;\n\t\tif (generation % 2 == 0)", "partial_line": "memcpy(&local_copy, en", "completion": "memcpy(&local_copy, entry, sizeof(InjectionPointEntry)); <|endoftext|>"}
{"context": "\t{\n\tExecutorRun(queryDesc, ForwardScanDirection, 0);\n\t\t\tcase CMD_DELETE:\n\t\t\tPlannedStmt *pstmt = (PlannedStmt *) stmt;\n\t\t\t\t\t\treturn PORTAL_ONE_MOD_WITH;", "partial_line": "return POR", "completion": "return PORTAL_ONE_SELECT; <|endoftext|>"}
{"context": "\t\tif (NUMERIC_IS_NINF(num1))\n\t\t\t\treturn make_result(&const_nan); \n\t\tif (NUMERIC_IS_PINF(num2))\n\tinit_var_from_num(num1, &arg1);\nnumeric_sub_opt_error(Numeric num1, Numeric num2, bool *have_error)", "partial_line": "if (NUMERI", "completion": "if (NUMERIC_IS_PINF(num1)) <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_INVALID_TABLE_DEFINITION),\n\t\t\t\t errmsg(\"primary keys cannot use NULLS NOT DISTINCT indexes\")));\n\t{\n\t\t\telog(ERROR, \"cache lookup failed for attribute %d of relation %u\",\n\t\tif (!attform->attnotnull)", "partial_line": "errmsg(\"primary key column \\\"%s\\\" is not", "completion": "errmsg(\"primary key column \\\"%s\\\" is not marked NOT NULL\", <|endoftext|>"}
{"context": "\tint\t\t\tl1 = strlen((const char *) s1) - 1,\n\t\t\t\tl2 = strlen((const char *) s2) - 1,\n\t{\n\t\t\treturn 1;\n\t\treturn 1;", "partial_line": "const AFFIX *a1 =", "completion": "const AFFIX *a1 = (const AFFIX *) s1; <|endoftext|>"}
{"context": "\t\t\t\tadd_exact_object_address(&oprobject, addrs_normal);\n\t\t\t\toprobject.objectId = ffEqOp[i];\n\t\t\t\tadd_exact_object_address(&oprobject, addrs_normal);\n\t\t\t\tAnum_pg_constraint_contypid,\n\t\t\t\tAnum_pg_constraint_conname,", "partial_line": "CStringGetDatum", "completion": "CStringGetDatum(conname)); <|endoftext|>"}
{"context": "\tvolatile bool result = true;\n\tif (!conf->check_hook)\n\tPG_TRY();\n\t\tGUC_check_errmsg_string = NULL;\n\t\t{", "partial_line": "(errcode(GUC_check_errc", "completion": "(errcode(GUC_check_errcode_value), <|endoftext|>"}
{"context": "};\n{\n\t\t\t\t\t\tconst void *startup_data, size_t startup_data_len,\n\t\t}\n\t\tClosePostmasterPorts(child_type == B_LOGGER);", "partial_line": "if (!child_process_kinds[", "completion": "if (!child_process_kinds[child_type].shmem_attach) <|endoftext|>"}
{"context": "\t\t\tif (pronargs > nargs && expand_defaults)\n\t\t\t\tif (nargs + procform->pronargdefaults < pronargs)\n\t\t\t\t\tcontinue;\n\t\t\t\tuse_defaults = true;\n\t\t\tif (!MatchNamedCall(proctup, nargs, argnames,", "partial_line": "if (pron", "completion": "if (pronargs > nargs && expand_defaults) <|endoftext|>"}
{"context": "\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), \\\nstruct varlena *\n\t\t\t\t\t\tNULL);\n\treturn tmp;\n\tstruct varlena *result;", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tif (!call_enum_check_hook(conf, &newval, &newextra,\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\tnewval = conf->reset_val;", "partial_line": "conf-", "completion": "conf->gen.name))); <|endoftext|>"}
{"context": "static const symbol s_9[] = { 'u' };\n                        if (ret < 0) return ret;\n                    }\n                    {   int ret = skip_utf8(z->p, z->c, z->l, 1);\n                        if (ret < 0) goto lab0;", "partial_line": "z->c =", "completion": "z->c = c2; <|endoftext|>"}
{"context": "static void\n\tbool\t\tmerge_sort_collations;\n\t}\n\t\tassign_collations_context paircontext;\n\t\tpaircontext.strength = COLLATE_NONE;", "partial_line": "(void) assign_collat", "completion": "(void) assign_collations_walker((Node *) s_tle->expr, &paircontext); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t}\n\tJsonbValue\tv;", "partial_line": "case WJB_BE", "completion": "case WJB_BEGIN_OBJECT: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  bool mcv_exists, Datum *mcv_values, int mcv_nvalues,\n\t\t\t\t\t\t\t\t\t  bool hist_exists, Datum *hist_values, int hist_nvalues,\n\tint\t\t\tvarRelid = PG_GETARG_INT32(3);\n\t\t\t\tmcv_selec,\n\t\tPG_RETURN_FLOAT8(DEFAULT_SEL(operator));", "partial_line": "if (", "completion": "if (!IsA(other, Const)) <|endoftext|>"}
{"context": "\t\tfor (;;)\n\t\t{\n\t\t\t\tbreak;\n\t{\n\t\t\t{", "partial_line": "entry->cu", "completion": "entry->curItem = entry->list[entry->offset++]; <|endoftext|>"}
{"context": "}\n\tpadstart = COUNT % 64;\n\t\tmemset(&ctx->m.b8[padstart], 0, padlen);\n\t\tsha1_step(ctx);\n\tCOUNT += (padlen - 8);", "partial_line": "CO", "completion": "COUNT %= 64; <|endoftext|>"}
{"context": "static int32_t\n\tint32_t\t\tlen;\n\t*status = U_ZERO_ERROR;\n\twhile ((token = strsep(&str, \";\")))\n\t\tchar\t   *e = strchr(token, '=');", "partial_line": "uattr =", "completion": "uattr = UCOL_STRENGTH; <|endoftext|>"}
{"context": "\t\t\t\t\t\tRelationGetRelationName(rel),\n\t\tif ((opaque->hasho_flag & flags) == 0)\n\t\t\t\t\t errmsg(\"index \\\"%s\\\" contains corrupted page at block %u\",\n\t\t\t\t\t errmsg(\"index \\\"%s\\\" is not a hash index\",\n\t\t\tereport(ERROR,", "partial_line": "RelationGetRela", "completion": "RelationGetRelationName(rel)), <|endoftext|>"}
{"context": "\t\tlconvert->mon_decimal_point[1] == '\\0')\n\t\t}\n\t\t\tif (cs_precedes)\n\t\t\t\tresult = psprintf(\"(%s%s%s)\",\n\t\t\tbreak;", "partial_line": "(sep_by_space == 1) ?", "completion": "(sep_by_space == 1) ? \" \" : \"\", <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\tLockErrorCleanup();\n\t\t\t\t\t\t\t errmsg(\"canceling statement due to conflict with recovery\"),\n\t\tdefault:\n}", "partial_line": "for (ProcSignalRea", "completion": "for (ProcSignalReason reason = PROCSIG_RECOVERY_CONFLICT_FIRST; <|endoftext|>"}
{"context": "static inline int pg_popcount64_fast(uint64 word);\n#endif\t\t\t\t\t\t\t\n\t__cpuid(exx, 1);\n#else\n\treturn (exx[2] & (1 << 23)) != 0;\t", "partial_line": "choose_popco", "completion": "choose_popcount_functions(void) <|endoftext|>"}
{"context": "static void fmtstr(const char *value, int leftjust, int minlen, int maxwidth,\n\t\t\t\t\t int leftjust, int minlen, int zpad, int precision, int pointflag,\n#endif\t\t\t\t\t\t\t\n\tint\t\t\tch;\n\tbool\t\tafterstar;", "partial_line": "int", "completion": "int\t\t\tcvalue; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\t\t\t\tfalse, false) == InvalidOffsetNumber)\n\t\t\t\t\t\t\tfalse, false) == InvalidOffsetNumber)\n\t\t\t\t\t\t\tfalse, false) == InvalidOffsetNumber)\n\t\t\tleftoff = OffsetNumberNext(leftoff);", "partial_line": "PageRestoreTempPage(left", "completion": "PageRestoreTempPage(leftpage, origpage); <|endoftext|>"}
{"context": "        {\n            int ret = out_grouping(z, g_v, 97, 251, 1);\n        }\n    }\n        z->bra = z->c;", "partial_line": "if (z->c >= z->l || z-", "completion": "if (z->c >= z->l || z->p[z->c + 0] >> 5 != 2 || !((35652352 >> (z->p[z->c + 0] & 0x1f)) & 1)) among_var = 7; else <|endoftext|>"}
{"context": "\t\tif (tmpMXact < FirstMultiXactId)\n\t\tif (pageno != prev_pageno)\n\t\t\tLWLock\t   *newlock;\n\t\t\tslotno = SimpleLruReadPage(MultiXactOffsetCtl, pageno, true, tmpMXact);\n\t\toffptr += entryno;", "partial_line": "LWLock", "completion": "LWLockRelease(lock); <|endoftext|>"}
{"context": "\t\tPROCLOCK   *proclock;\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_OUT_OF_MEMORY),\n\tuint32\t\thashcode;\n\tint\t\t\twaiters = 0;", "partial_line": "&fou", "completion": "&found); <|endoftext|>"}
{"context": "\t\t\tcase PLPGSQL_RWOPT_TRANSFER:\n\t\t\t\tplpgsql_param_eval_var_transfer(state, op, econtext);\n\t\t\t\t\tplpgsql_param_eval_var(state, op, econtext);\n{\n\t\t\t\t\t\t\t\t\t\t\t   get_eval_mcontext(estate));", "partial_line": "*op->r", "completion": "*op->resnull = false; <|endoftext|>"}
{"context": "\tint64\t\tprev;\t\t\t\n\t (- TapeBlockGetTrailer(buf)->next) : TapeBlockPayloadSize)\n\t(TapeBlockGetTrailer(buf)->next = -(nbytes))\n#define TAPE_WRITE_PREALLOC_MIN 8\n\tLogicalTapeSet *tapeSet;\t", "partial_line": "char\t   *bu", "completion": "char\t   *buffer; <|endoftext|>"}
{"context": "}\nbool\n\tRangeBound\tupper1;\n\tRangeBound\tupper2;\n\tbool\t\tempty2;", "partial_line": "els", "completion": "else if (empty1) <|endoftext|>"}
{"context": "\t\t\t\tDateTimeErrorExtra extra;\n\t\t\t\tif (tzp != NULL)\n\t\t\t\t}\n\t\t\t}\n\titm_in->tm_mday = 0;", "partial_line": "typ", "completion": "type, <|endoftext|>"}
{"context": "\tuint32\t\tper_backend_iovecs = io_max_concurrency * io_max_combine_limit;\n\t\tShmemInitStruct(\"AioHandleIOV\", AioHandleIOVShmemSize(), &found);\n\t\tdclist_init(&bs->in_flight_ios);\n\t\t{\n\t\t\tioh->report_return = NULL;", "partial_line": "pgaio_method_ops->shmem_i", "completion": "pgaio_method_ops->shmem_init(!found); <|endoftext|>"}
{"context": "\t},\t\t\t\t\t\t\t\n\t\t\"iso88598\", PG_ISO_8859_8\n\t\t\"johab\", PG_JOHAB\n\t},\t\t\t\t\t\t\t\n\t{", "partial_line": "\"mskanji\", P", "completion": "\"mskanji\", PG_SJIS <|endoftext|>"}
{"context": "{ 2, s_0_20, 0, 6, 0},\n{ 2, s_0_31, 0, 17, 0},\n{ 2, s_0_36, 0, 22, 0},\n};\nstatic const symbol s_1_38[16] = { 0xCF, 0x84, 0xCE, 0xB1, 0xCF, 0x84, 0xCE, 0xBF, 0xCE, 0xB3, 0xCE, 0xB9, 0xCF, 0x89, 0xCE, 0xBD };", "partial_line": "{ 10, s_1_6,", "completion": "{ 10, s_1_6, -1, 9, 0}, <|endoftext|>"}
{"context": "\t\t\ttbinfo->dobj.components |= DUMP_COMPONENT_POLICY;\n\t\t\tpolinfo->polroles = NULL;\n\t\t\tpolinfo->polqual = NULL;\n\tif (fout->remoteVersion >= 100000)\n\tappendPQExpBuffer(query,", "partial_line": "\"FROM unne", "completion": "\"FROM unnest('%s'::pg_catalog.oid[]) AS src(tbloid)\\n\" <|endoftext|>"}
{"context": "\t\tstr = pg_ultostr_zeropad(str, min, 2);\n\t}\n\t{\n\t\t\t*str++ = '-';\n\t\t\t{", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t void *per_buffer_data)\n{\n\t}\n\t{\n\t\tif (vacrel->next_unskippable_block - next_block >= SKIP_PAGES_THRESHOLD)", "partial_line": "find_next_unskippab", "completion": "find_next_unskippable_block(LVRelState *vacrel, bool *skipsallvis) <|endoftext|>"}
{"context": "\t\t\t\tnew_path = (Path *) bhpath;\n\t\t\tbreak;\n\t\t\t}\n\t\t\t\tForeignPath *fpath = (ForeignPath *) path;\n\t\t\t\tif (fpath->fdw_outerpath)", "partial_line": "fpath->fdw_private = r", "completion": "fpath->fdw_private = rfpc_func(root, fpath->fdw_private, <|endoftext|>"}
{"context": "\tCacheInvalidateRelcache(target_table);\n\tfree_parsestate(qual_pstate);\n\treturn myself;\nObjectAddress\n\tArrayType  *role_ids = NULL;", "partial_line": "List\t   *qual_pa", "completion": "List\t   *qual_parse_rtable = NIL; <|endoftext|>"}
{"context": "\t{\n\t}\n\tProcessClientReadInterrupt(false);\n}\n}", "partial_line": "int\t\t\tw", "completion": "int\t\t\twaitfor; <|endoftext|>"}
{"context": "\t\t\t\t errhint(\"WAL control functions cannot be executed during recovery.\")));\n\tcurrent_recptr = GetXLogInsertRecPtr();\n}\n\tif (RecoveryInProgress())\n{", "partial_line": "if (recpt", "completion": "if (recptr == 0) <|endoftext|>"}
{"context": "static const symbol s_4_17[3] = { 'a', 't', 'e' };\nstatic const symbol s_4_22[3] = { 'u', 't', 'e' };\nstatic const symbol s_4_29[3] = { 'o', 's', 'i' };\nstatic const symbol s_4_34[4] = { 'i', 's', 't', 'i' };\nstatic const symbol s_4_37[3] = { 'i', 'v', 'i' };", "partial_line": "static const symbol s_4_40[7] = { 'i', 't',", "completion": "static const symbol s_4_40[7] = { 'i', 't', 0xC4, 0x83, 0xC8, 0x9B, 'i' }; <|endoftext|>"}
{"context": "volatile int pg_signal_queue;\n\t\treturn;", "partial_line": "if (WaitForSi", "completion": "if (WaitForSingleObject(pgwin32_signal_event, <|endoftext|>"}
{"context": "{\n\tswitch (var->type)\n\t\tcase ECPGt_long_long:\n\t\tcase ECPGt_array:\nvoid", "partial_line": "if (atoi(t", "completion": "if (atoi(type_index) >= 0) <|endoftext|>"}
{"context": "\t}\n\t\t\telog(ERROR, \"rbt_find_great() didn't find a greater key\");\n\tsearchNode.key = -1;\n\tif (node != NULL)\n\t\telog(ERROR, \"leftmost node of empty tree is not NULL\");", "partial_line": "result = (IntRBTreeNode", "completion": "result = (IntRBTreeNode *) rbt_leftmost(tree); <|endoftext|>"}
{"context": "                        break;\n                            if (ret < 0) return ret;\n                        }\n                            if (ret < 0) return ret;\n                            if (ret < 0) return ret;", "partial_line": "{   int ret = slice_fro", "completion": "{   int ret = slice_from_s(z, 2, s_23); <|endoftext|>"}
{"context": "static int\t_bt_splitcmp(const void *arg1, const void *arg2);\n\t\t\t\t\t\t\t\t\t\t\t  SplitPoint *split);\n\t\t\t\t Size newitemsz,\n{\n\t\t\t\tolddataitemstotal,", "partial_line": "olddataitem", "completion": "olddataitemstoleft, <|endoftext|>"}
{"context": "\t\t\tparam->paramcollid = var->varcollid;\n\tnlp = makeNode(NestLoopParam);\n\tNestLoopParam *nlp;\n\t\t\t\t\t\t\t\t\texprCollation((Node *) phv->phexpr));\n\troot->curOuterParams = lappend(root->curOuterParams, nlp);", "partial_line": "return pa", "completion": "return param; <|endoftext|>"}
{"context": "\tAssert(!resultRelInfo->ri_needLockTagTuple);\n\ttest = table_tuple_lock(relation, conflictTid,\n\t\t\t\tereport(ERROR,\n\tecontext->ecxt_innertuple = excludedSlot;\n\tif (!ExecQual(onConflictSetWhere, econtext))", "partial_line": "ret", "completion": "return true; <|endoftext|>"}
{"context": "\t\t\t\ttrack[j].count = track[j - 1].count;\n\t\t\t\t\tsummultiple;\n\t\t\tif (N > 0)\n\t\t\tif (stadistinct > N)\n\t\t\tstats->stadistinct = floor(stadistinct + 0.5);", "partial_line": "if (num_mcv", "completion": "if (num_mcv > track_cnt) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\treturn DTERR_BAD_FORMAT;\n\t\t\tdefault:\n\t\tfmask |= tmask;\n\tdterr = ValidateDate(fmask, isjulian, is2digits, bc, tm);\n\t\tif (fmask & DTK_M(DTZMOD))", "partial_line": "struct", "completion": "struct pg_tm tt, <|endoftext|>"}
{"context": "#include \"storage/smgr.h\"\n#include \"storage/read_stream.h\"\n\tint16\t\tmax_ios;\n\tint16\t\tmax_pinned_buffers;\n\tint16\t\toldest_io_index;", "partial_line": "void *callback_p", "completion": "void *callback_private_data, <|endoftext|>"}
{"context": "\tif (proc->waitLock)\n\t\t}\nvoid\n{\n\tPROCLOCK   *proclock;", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "{ 4, s_11_89, -1, 14, 0},\n{ 7, s_11_98, 95, 7, 0},\n{ 8, s_11_99, 95, 7, 0},\n{ 7, s_11_116, 114, 5, 0},\n{ 10, s_11_121, 117, 5, 0},", "partial_line": "{ 7, s_", "completion": "{ 7, s_11_122, -1, 5, 0}, <|endoftext|>"}
{"context": "\t\t\t\tdefault:\n\t}\n\t{\n\t\twhich = ~0;\n\t\t{", "partial_line": "inet\t   *leaf = Da", "completion": "inet\t   *leaf = DatumGetInetPP(in->leafDatum); <|endoftext|>"}
{"context": "{\n}\nstatic text *\n{\n\treturn res;", "partial_line": "timestamp_to_char(PG_FUN", "completion": "timestamp_to_char(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\tstate->buflen = size;\n\t\tchar\t   *rend;\n\t\trp = (char *) readbuf;\n\t\t\tsize_t\t\toutlen = state->buflen;\n\t\t\t}", "partial_line": "rp += r", "completion": "rp += read_remain; <|endoftext|>"}
{"context": "{\n\t\t\t\tPredXact->SxactGlobalXminCount++;\n}\nvoid\n\t\t{", "partial_line": "Relea", "completion": "ReleasePredicateLocksLocal(); <|endoftext|>"}
{"context": "{ 6, s_2_1206, -1, 86, 0},\n{ 4, s_2_1208, 1207, 1, 0},\n{ 4, s_2_1210, -1, 104, 0},\n{ 4, s_2_1215, -1, 123, 0},\n{ 4, s_2_1237, 1236, 128, 0},", "partial_line": "{ 4, s_2_1243, 1", "completion": "{ 4, s_2_1243, 1236, 98, 0}, <|endoftext|>"}
{"context": "\t\tif (!_bt_vacuum_needs_cleanup(info->index))\n\t\tbtvacuumscan(info, stats, NULL, NULL, 0);\n\tbool\t\tneedLock;\n\t\t\tLockRelationForExtension(rel, ExclusiveLock);\n\t\twhile (true)", "partial_line": "vacuum_delay_point", "completion": "vacuum_delay_point(false); <|endoftext|>"}
{"context": "\t\t\t\tif (P_RIGHTMOST(opaque))\n\t\t\tcurposti = 0;\n\t\t}\n\t\t\t\t errhint(\"This may be because of a non-immutable index expression.\"),\n\t\t\t\t\t\t\t\t\tRelationGetRelationName(rel))));", "partial_line": "if (unlikely(insertstate-", "completion": "if (unlikely(insertstate->itemsz > BTMaxItemSize)) <|endoftext|>"}
{"context": "\telse\nGatherMergePath *\n{\n\tAssert(pathkeys);\n\tinput_disabled_nodes += subpath->disabled_nodes;", "partial_line": "st", "completion": "static List * <|endoftext|>"}
{"context": "\t\t\t\t\t\tq++;\n\t\t\t\tcase 'Y':\n\t\t\t\t\ttm->tm_mon -= 1;\n\t\t\t\t\twhile (*q)\n\t\t\t\tcase 'Z':", "partial_line": "if (i", "completion": "if (i == 0) <|endoftext|>"}
{"context": "\t\tif (is_strict_saop(expr, true))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  top_level);\n\t\t\tcase OR_EXPR:\n\t\t\t\t{\n\t\t\tcase NOT_EXPR:", "partial_line": "elog(ERROR, \"unrecogniz", "completion": "elog(ERROR, \"unrecognized boolop: %d\", (int) expr->boolop); <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t   void *recdata, uint32 len)\n\t\tpgstat_info->counts.delta_live_tuples = 0;\n\t\trec->tuples_inserted + rec->tuples_updated +\n\t\t\t\t\t\t  void *recdata, uint32 len)", "partial_line": "rec->tuples_inserted + rec->tu", "completion": "rec->tuples_inserted + rec->tuples_updated; <|endoftext|>"}
{"context": "\t\t\t\t\t errhint(\"Please REINDEX it.\")));\n\t}\n\t\t\t\t\t\t\t\t\t  sizeof(HashOptions),\n{\n\tattp = (char *) itup + IndexInfoFindDataOffset(itup->t_info);", "partial_line": "return *((", "completion": "return *((uint32 *) attp); <|endoftext|>"}
{"context": "\t\t\t\tresult = ConditionalXactLockTableWait(memxid, logLockFailure);\n\t}\n\t\treturn true;\n\t{\n\t\t\t\t\t\t TransactionId *NoFreezePageRelfrozenXid,", "partial_line": "Transactio", "completion": "TransactionId xid; <|endoftext|>"}
{"context": "\tset_locale_and_encoding();\n\tstop_postmaster(false);\n\t\tuser_opts.transfer_mode == TRANSFER_MODE_SWAP)\n\t\t\t\t\t\t\t\t old_cluster.pgdata, new_cluster.pgdata);\n\texec_prog(UTILITY_LOG_FILE, NULL, true, true,", "partial_line": "exec_prog(UTILITY_", "completion": "exec_prog(UTILITY_LOG_FILE, NULL, true, true, <|endoftext|>"}
{"context": "\t\t&&CASE_EEOP_DOMAIN_TESTVAL_EXT,\n\t\t&&CASE_EEOP_HASHDATUM_NEXT32,\n\t\t&&CASE_EEOP_CONVERT_ROWTYPE,\n\t\t&&CASE_EEOP_SCALARARRAYOP,\n\t\t&&CASE_EEOP_SUBPLAN,", "partial_line": "Assert(s", "completion": "Assert(state != NULL); <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"could not rewind hash-join temporary file\")));\n\tif (hashtable->outerBatchFile[curbatch] != NULL)\n\t\t\t\t\t(errcode_for_file_access(),\nExecParallelHashJoinNewBatch(HashJoinState *hjstate)\n\t}", "partial_line": "WAIT_EVENT_HASH_B", "completion": "WAIT_EVENT_HASH_BATCH_ELECT)) <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t\t\t errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" is already an identity column\",\n\t\t\t\t errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" already has a default value\",\n\tInvokeObjectPostAlterHook(RelationRelationId,", "partial_line": "stat", "completion": "static ObjectAddress <|endoftext|>"}
{"context": "\tbool\t   *nulls;\n\tHeapTuple\ttup;\n\tvalues = palloc0(sizeof(Datum) * td->natts);\n\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\t\t\t\t\t errmsg(\"Perl hash contains nonexistent column \\\"%s\\\"\",", "partial_line": "key)", "completion": "key))); <|endoftext|>"}
{"context": "\tif (InHotStandby)\n\t\tRelFileLocator rlocator;\n\taction = XLogReadBufferForRedoExtended(record, 0, RBM_NORMAL, true, &buffer);\n\t\tpageopaque->hasho_flag &= ~LH_PAGE_HAS_DEAD_TUPLES;\n\tif (BufferIsValid(buffer))", "partial_line": "metapage =", "completion": "metapage = BufferGetPage(metabuf); <|endoftext|>"}
{"context": "#ifdef BGW_DEBUG\n\t\t\t\t strategy_delta);\n\t\t\tnext_to_clean = strategy_buf_id;\n#ifdef BGW_DEBUG\n\t\t\t strategy_passes, strategy_buf_id);", "partial_line": "bufs_to_lap =", "completion": "bufs_to_lap = NBuffers; <|endoftext|>"}
{"context": "{\n\t\tif (other_xids[index] == xid)\n\t\t\tPGPROC\t   *proc = &allProcs[pgprocno];\n{\n\tLWLockAcquire(ProcArrayLock, LW_SHARED);", "partial_line": "int\t\t\tpgprocno =", "completion": "int\t\t\tpgprocno = arrayP->pgprocnos[index]; <|endoftext|>"}
{"context": "\tprintTableAddCell(&cont, paramval ? paramval : _(\"unknown\"), false, false);\n\treturn PSQL_CMD_SKIP_LINE;\n}\nexec_command_copy(PsqlScanState scan_state, bool active_branch)\n\telse", "partial_line": "static back", "completion": "static backslashResult <|endoftext|>"}
{"context": "dispatch_compare_ptr(const void *a, const void *b)\n\tconst ExprEvalOpLookup *la = (const ExprEvalOpLookup *) a;\n\t\treturn 1;\n\treturn 0;\n\t\t\t  sizeof(ExprEvalOpLookup),", "partial_line": "key.opcode = (void", "completion": "key.opcode = (void *) op->opcode; <|endoftext|>"}
{"context": "\t\t\t\tAssert(status == jpdsNonDateTime);\n\t\t\t\tAssert(status == jpdsNonDateTime);\n\t\t\t\tbreak;\n\t\t\t\t\tJsonPathItem from;\n\t\t\t\t\tJsonPathItem to;", "partial_line": "status = jpdsNo", "completion": "status = jpdsNonDateTime; <|endoftext|>"}
{"context": "\t}\nDatum\ntypedef struct generate_subscripts_fctx\n\tMemoryContext oldcontext;\n\t{", "partial_line": "MemoryContextSwit", "completion": "MemoryContextSwitchTo(oldcontext); <|endoftext|>"}
{"context": "\t\trelationId == PgTablespaceToastIndex)\nbool\n\tif (classId == NamespaceRelationId &&\n\t\tobjectId == PG_PUBLIC_NAMESPACE)\nGetNewOidWithIndex(Relation relation, Oid indexId, AttrNumber oidcolumn)", "partial_line": "if (IsBoo", "completion": "if (IsBootstrapProcessingMode()) <|endoftext|>"}
{"context": "\tAssert(tli != 0);\n\t\treturn;\n\t\tcase WAL_SYNC_METHOD_FSYNC_WRITETHROUGH:\n#endif\n\t\t\t\t\terrmsg_internal(\"unrecognized \\\"wal_sync_method\\\": %d\", wal_sync_method));", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tret = check_usermap(port->hba->usermap, port->user_name, princ,\n}\n\t\t\t\t\t  FORMAT_MESSAGE_FROM_SYSTEM,\n\t\t\t\tnewctx;\n\tTimeStamp\texpiry;", "partial_line": "SecBufferDes", "completion": "SecBufferDesc outbuf; <|endoftext|>"}
{"context": "\tpg_free(linebuf.data);\n{\n\tconst char *mode;\n\t\tfn = fileno(AH->FH);\nSaveOutput(ArchiveHandle *AH)", "partial_line": "errn", "completion": "errno = 0; <|endoftext|>"}
{"context": "\tMemSet(&clauseset, 0, sizeof(clauseset));\n\t\t\t\t\tlappend(clauseset.indexclauses[indexcol], iclause);\n\t\t\t}\n\t\t\t\t\tList *indexjoinclauses)\nstatic void", "partial_line": "get_index_paths(PlannerInfo *r", "completion": "get_index_paths(PlannerInfo *root, RelOptInfo *rel, <|endoftext|>"}
{"context": "\tfor (coln = 0; coln < nRetTypes; coln++)\n\t\tMemoryContextSwitchTo(oldcontext);\n\tMemoryContextDelete(rowcontext);\n}\n{", "partial_line": "PGresult   *", "completion": "PGresult   *pgres = NULL; <|endoftext|>"}
{"context": "struct sqlca_t *ECPGget_sqlca(void);\n#endif\nvoid commitTable(void);\n int f1 [ ARRAY_SIZE ] ;\nif (sqlca.sqlcode < 0) sqlprint();}", "partial_line": "{ ECPGdo(__LINE__, 0, 1, \"con1\", 0, ECP", "completion": "{ ECPGdo(__LINE__, 0, 1, \"con1\", 0, ECPGst_normal, \"insert into source values ( 2 , 20 , 'db on con1' )\", ECPGt_EOIT, ECPGt_EORT); <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION),\n\t{\n\t\t\t\t\t errmsg(\"only boolean operators can have restriction selectivity\")));\n\t\t\t\t\t(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION),\n\t{", "partial_line": "otherNamespace == operator", "completion": "otherNamespace == operatorNamespace && <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   &relation, lockmode,\n\t\t\tcase OBJECT_TABCONSTRAINT:\n\t\t\t\t\tobjlist = castNode(List, object);\n\t\t\t\t\t\t\t\t\t\t\t\t\t  missing_ok);\n\t\t\tcase OBJECT_ROLE:", "partial_line": "case", "completion": "case OBJECT_FDW: <|endoftext|>"}
{"context": "#include \"utils/lsyscache.h\"\n#include \"utils/pg_locale.h\"\n#include \"utils/snapmgr.h\"\n#include \"utils/syscache.h\"\nstatic double eqjoinsel_inner(Oid opfuncoid, Oid collation,", "partial_line": "Form_pg_statist", "completion": "Form_pg_statistic stats1, Form_pg_statistic stats2, <|endoftext|>"}
{"context": "\t\tforeach(l, indexinfo->indextlist)\n\t\t}\n\tif (indexonly)\n\t\t\t\t\t\t\t\t\t\t\t\tbest_path->indexscandir);\n\t\t\t\t\t\t\t\t\t\t\tqpqual,", "partial_line": "bitmap_subplan_ma", "completion": "bitmap_subplan_mark_shared(bitmapqualplan); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#include \"storage/read_stream.h\"", "partial_line": "IndexV", "completion": "IndexVacuumInfo *info; <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\t  prs.words[count].word,\n\t\t\tcntpos++;\n\tdata.cfg_id = PG_GETARG_OID(0);\n{", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\tcase TBLOCK_SUBCOMMIT:\n\t\t\t\t\tRestoreTransactionCharacteristics(&savetc);\n\t\t\t}\n\t\t\t\tCleanupSubTransaction();\n\t\t\t\tDefineSavepoint(NULL);", "partial_line": "Assert(s", "completion": "Assert(s->blockState == TBLOCK_SUBBEGIN); <|endoftext|>"}
{"context": "\t\tif (aclequal(new_acl, acldefault(istmt->objtype, ownerId)))\n\t\t\tHeapTuple\tnewtuple;\n\t\treturn ACL_DELETE;\n\tif (strcmp(privname, \"truncate\") == 0)\n\t\treturn ACL_TRIGGER;", "partial_line": "if (strcmp(privname, \"con", "completion": "if (strcmp(privname, \"connect\") == 0) <|endoftext|>"}
{"context": "static const symbol s_6_49[4] = { 'i', 'd', 'a', 's' };\nstatic const symbol s_6_98[7] = { 'i', 'r', 0xED, 'a', 'm', 'o', 's' };\nstatic const symbol s_6_99[4] = { 'e', 'm', 'o', 's' };\nstatic const symbol s_6_114[2] = { 'e', 'u' };\nstatic const symbol s_6_117[3] = { 'a', 'r', 0xE1 };", "partial_line": "{ 4, s_6_12, -1,", "completion": "{ 4, s_6_12, -1, 1, 0}, <|endoftext|>"}
{"context": "\twhile (**str)\n\t\t\t\treturn false;\n\tbool\t\tvalid = false;\n\t\t\t\tbreak;\n\t\t\t\tbreak;", "partial_line": "valid = get_n", "completion": "valid = get_nextfield(&str, repl); <|endoftext|>"}
{"context": "\t\t\tpfree(acl);\n{\n\tif ((mask & ACLITEM_ALL_GOPTION_BITS) &&\n\t\t{\n\t\t\tresult |= aidata->ai_privs & mask;", "partial_line": "if ((how == ACLMASK_ALL)", "completion": "if ((how == ACLMASK_ALL) ? (result == mask) : (result != 0)) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t JOIN_FULL, sjinfo,\n\t\t\tif (joinrel->pathlist == NIL)\n\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "restriction_is_constant_false(restrictlist", "completion": "restriction_is_constant_false(restrictlist, joinrel, false)) <|endoftext|>"}
{"context": "\t{\n\tif (IsA(clause, Var))\n\t\tConst\t   *con = (Const *) clause;\n\telse if (IsA(clause, Param))\n\t{", "partial_line": "Node\t   *subst = estim", "completion": "Node\t   *subst = estimate_expression_value(root, clause); <|endoftext|>"}
{"context": "\t\tcase MinCommandIdAttributeNumber:\n\t\t\tbreak;\n\t\t\tresult = 0;\t\t\t\n\treturn result;\n\tnewTuple = (HeapTuple) palloc(HEAPTUPLESIZE + tuple->t_len);", "partial_line": "memcpy(dest->t_data, src->t", "completion": "memcpy(dest->t_data, src->t_data, src->t_len); <|endoftext|>"}
{"context": "\t{\"document\", XMLOPTION_DOCUMENT, false},\n};\n\t{\"true\", COMPUTE_QUERY_ID_ON, true},\n\t{\"on\", CONSTRAINT_EXCLUSION_ON, false},\n\t{NULL, 0, false}", "partial_line": "{\"remote_write\", SYNCHRONOUS", "completion": "{\"remote_write\", SYNCHRONOUS_COMMIT_REMOTE_WRITE, false}, <|endoftext|>"}
{"context": "\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\t\tnewtuple = heap_form_tuple(RelationGetDescr(description),\n\t\theap_freetuple(newtuple);\n\tHeapTuple\toldtuple;", "partial_line": "values[Anum_pg_shdescription", "completion": "values[Anum_pg_shdescription_classoid - 1] = ObjectIdGetDatum(classoid); <|endoftext|>"}
{"context": "\treturn true;\nbool\n\tstatic const bool translate_columns[] = {false, false, false, false, false, false, false, true, false};\n\tinitPQExpBuffer(&buf);\n\t\t\t\t\t  \"  n.nspname AS \\\"%s\\\",\\n\"", "partial_line": "\"  'libc' AS \\\"%", "completion": "\"  'libc' AS \\\"%s\\\",\\n\", <|endoftext|>"}
{"context": "#endif\n\t{\n\t}\n\tnew_record[Anum_pg_authid_rolcreatedb - 1] = BoolGetDatum(createdb);\n\tnew_record[Anum_pg_authid_rolconnlimit - 1] = Int32GetDatum(connlimit);", "partial_line": "erepor", "completion": "ereport(NOTICE, <|endoftext|>"}
{"context": "\t}\nBlockRefTableEntry *\n\treturn entry;\n\tif (stop_chunkno > entry->nchunks)\n\t\t\tstop_offset = stop_blkno - (chunkno * BLOCKS_PER_CHUNK);", "partial_line": "unsigne", "completion": "unsigned\ti; <|endoftext|>"}
{"context": "\tif (to->ins)\n\t\tto->ins->inchainRev = a;\n\ta->outchainRev = NULL;\n\tfrom->nouts++;\n}", "partial_line": "a = nfa->fre", "completion": "a = nfa->freearcs; <|endoftext|>"}
{"context": "\tint\t\t\tndigits;\n\t\t\tprintf(\"NEG\");\n\t\tdefault:\ndump_var(const char *str, NumericVar *var)\n\t{", "partial_line": "case", "completion": "case NUMERIC_NAN: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tlockflags,\n\t\tswitch (test)\n\t\t\t\tgoto lnext;\n\t\t\tcase TM_SelfModified:\n\t\t\tcase TM_Updated:", "partial_line": "if (Isola", "completion": "if (IsolationUsesXactSnapshot()) <|endoftext|>"}
{"context": "\tPlannedStmt *plan;\n#ifdef DEBUG_NODE_TESTS_ENABLED\n\t{\n#ifdef NOT_USED\n#endif", "partial_line": "plan = ne", "completion": "plan = new_plan; <|endoftext|>"}
{"context": "\t\tappendStringInfoString(&buf, \" billion \");\n\tif (m3)\n\tpfree(buf.data);\n\tPG_RETURN_TEXT_P(res);\n\t\tDatum\t\tquotient;", "partial_line": "result = Dir", "completion": "result = DirectFunctionCall2(numeric_round, <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tereport(ERROR,\nREGRESS_object_access_hook(ObjectAccessType access, Oid classId, Oid objectId, int subId, void *arg)\n{\n\tif (next_object_access_hook)", "partial_line": "audit_", "completion": "audit_success(\"object access\", <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tcontinue;\t\t\n\t\t\t\t\t errmsg(\"operator family \\\"%s\\\" of access method %s is missing support function %d for type %s\",\n\t\t\t\t\t\topclassname, \"spgist\")));\n\tReleaseCatCacheList(proclist);", "partial_line": "List *", "completion": "List *functions) <|endoftext|>"}
{"context": "\treturn area;\ndsa_attach_in_place(void *place, dsm_segment *segment)\ndsa_on_dsm_detach_release_in_place(dsm_segment *segment, Datum place)\n\tdsa_release_in_place(DatumGetPointer(place));\n\tdsa_area_control *control = (dsa_area_control *) place;", "partial_line": "LWLockRelease(&", "completion": "LWLockRelease(&control->lock); <|endoftext|>"}
{"context": "\tStringInfoData err_buf;\n\t\t\t\t\t\t   XmlOptionType *parsed_xmloptiontype,\n\t\t\t\t\t\t\t\t\t\tconst char *targetns, bool top_level);\n\t\t\t\t\t\t\t\t\t\t\t\t\t bool tableforest, const char *targetns);\n\t\t\t\t\t\t\t\t\t\t\t\t\t  bool nulls, bool tableforest,", "partial_line": "#define XMLTABLE_CONTEX", "completion": "#define XMLTABLE_CONTEXT_MAGIC\t46922182 <|endoftext|>"}
{"context": "{\nstatic AclMode\n\t\t{\"CREATE WITH GRANT OPTION\", ACL_GRANT_OPTION_FOR(ACL_CREATE)},\n\tmode = convert_type_priv_string(priv_type_text);\nDatum", "partial_line": "Oid", "completion": "Oid\t\t\troleid; <|endoftext|>"}
{"context": "\t\t\t--gatherstate->nreaders;\n\t\tif (tup)\n\t\tif (gatherstate->nextreader >= gatherstate->nreaders)\n\t\tnvisited++;\n\t\t{", "partial_line": "re", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\tmystatus->lockData = GetLockStatusData();\n\tfuncctx = SRF_PERCALL_SETUP();\n\t{\n\t\tDatum\t\tresult;\n\t\t\tfor (mode = 0; mode < MAX_LOCKMODES; mode++)", "partial_line": "if (!gr", "completion": "if (!granted) <|endoftext|>"}
{"context": "GetRecordedFreeSpace(Relation rel, BlockNumber heapBlk)\n{\n\tif (!BufferIsValid(buf))\n\tFSMAddress\tfirst_removed_address;\n\t\treturn InvalidBlockNumber;", "partial_line": "LockBuffer(buf, BUF", "completion": "LockBuffer(buf, BUFFER_LOCK_EXCLUSIVE); <|endoftext|>"}
{"context": "\tuint32_t\tstate[2];\n\tsize_t\t\tuchar_bsize;\n\tAssert(GetDatabaseEncoding() != PG_UTF8);\n\tinit_icu_converter();\n\tulen = uchar_convert(icu_converter, uchar, ulen + 1, src, srclen);", "partial_line": "(ui", "completion": "(uint8_t *) dest, <|endoftext|>"}
{"context": "{\n\tHeapTuple\tcolltup;\nOid\n\tListCell   *l;\n\t\tOid\t\t\tnamespaceId = lfirst_oid(l);", "partial_line": "ConversionIsVisibleExt(Oi", "completion": "ConversionIsVisibleExt(Oid conid, bool *is_missing) <|endoftext|>"}
{"context": "{\n\t\t\t\tbreak;\n\t\t\t\trel->relname = strVal(linitial(typeName->names));\n\t\t\tcase 3:\n\t\t\t\t\t\t errmsg(\"improper %%TYPE reference (too many dotted names): %s\",", "partial_line": "NameListToStri", "completion": "NameListToString(typeName->names)), <|endoftext|>"}
{"context": "\treturn result;\nnumeric_abbrev_abort(int memtupcount, SortSupport ssup)\n{\n\tif (abbr_card < nss->input_count / 10000.0 + 0.5)\n\t\tif (trace_sort)", "partial_line": "\" below threshold %f after \" INT64_FO", "completion": "\" below threshold %f after \" INT64_FORMAT \" values (%d rows)\", <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t\trulename = pstrdup(ViewSelectRuleName);\n\t\t}\n\t\t\t\t\t\t errmsg(\"cannot have multiple RETURNING lists in a rule\")));", "partial_line": "have", "completion": "haveReturning = true; <|endoftext|>"}
{"context": "\t\t\t\t\tchar\t\toriginname[NAMEDATALEN];\n\t\t\t\t\tXLogRecPtr\tremote_lsn;\n\t\tWalReceiverConn *wrconn;\n\t\t\tereport(ERROR,\n\t\t\t\t\t errmsg(\"subscription \\\"%s\\\" could not connect to the publisher: %s\",", "partial_line": "walrc", "completion": "walrcv_disconnect(wrconn); <|endoftext|>"}
{"context": "\tOid\t\t\tresult_typid;\t\n\tFmgrInfo\tresult_in_func; \n\tbool\t   *arg_is_rowtype; \ntypedef struct pltcl_proc_key\n\tOid\t\t\tproc_id;\t\t", "partial_line": "static char *pltcl", "completion": "static char *pltcl_start_proc = NULL; <|endoftext|>"}
{"context": "#endif\n\t\t\t{\n\t\t*Np->number_p = *Np->inout_p;\n\t\t\tNp->read_pre++;\n\t\t\telse if ((x = strlen(Np->L_positive_sign)) &&", "partial_line": "AMOUN", "completion": "AMOUNT_TEST(x) && <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t dsa_pointer *bucket);\nstatic bool delete_key_from_bucket(dshash_table *hash_table,\n\t(&(hash_table)->control->partitions[(i)].lock)\n#define ASSERT_NO_PARTITION_LOCKS_HELD_BY_ME(hash_table) \\\n\tAssert(!LWLockAnyHeldByMe(&(hash_table)->control->partitions[0].lock, \\", "partial_line": "control = d", "completion": "control = dsa_allocate(area, sizeof(dshash_table_control)); <|endoftext|>"}
{"context": "\tif (found == 1)\n\t{\n\t\tchar\t   *badp;\n\t\t(*script)[namelen] = '\\0';\n\t\t\tpg_fatal(\"invalid weight specification: %s\", sep);", "partial_line": "INT_MAX, (long lon", "completion": "INT_MAX, (long long) wtmp); <|endoftext|>"}
{"context": "\t}\n{\n\tchar\t\ttzbuf[1024];\n\tchar\t   *line;\n\t{", "partial_line": "my_exec_p", "completion": "my_exec_path); <|endoftext|>"}
{"context": "\tmatchctx->orig_str = orig_str;\n\tif (use_subpatterns && cpattern->re_nsub > 0)\n\t\tuse_subpatterns = false;\n\t}\n\twhile (test_re_execute(cpattern, wide_str, wide_len,", "partial_line": "re_", "completion": "re_flags->eflags)) <|endoftext|>"}
{"context": "\tConf->nCompoundAffixFlag++;\n\tuint32\t\tflag = 0;\n\t\tif (found != NULL)\n\tchar\t\tsflag[BUFSIZ];\n\t{", "partial_line": "if (*recoded ==", "completion": "if (*recoded == '\\0' || isspace((unsigned char) *recoded) || t_iseq(recoded, '#')) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t PointerGetDatum(NULL), \n\t\t\t\t\t\t\t NIL,\t\n\tallParamTypes = ObjectIdGetDatum(rangeArrayOid);\n\tparamModes = CharGetDatum(FUNC_PARAM_VARIADIC);\n\tmyself = ProcedureCreate(name,\t", "partial_line": "f", "completion": "false, <|endoftext|>"}
{"context": "\t\t\t\t\t\t RESOURCE_RELEASE_AFTER_LOCKS,\n\tAtEOXact_GUC(true, s->gucNestLevel);\n\tAtEOSubXact_Files(true, s->subTransactionId,\n}\nAbortSubTransaction(void)", "partial_line": "pgstat_repor", "completion": "pgstat_report_wait_end(); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase T_FetchStmt:\n\t\tcase T_CreateTableSpaceStmt:\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "SetQueryCompletion(qc, CMDTA", "completion": "SetQueryCompletion(qc, CMDTAG_COPY, processed); <|endoftext|>"}
{"context": "\treturn true;\n\t\tif (q->canSetTag)\n\t\t\tparse = q;\n\telse if (parse &&\nCreateSQLFunctionDestReceiver(void)", "partial_line": "static", "completion": "static bool <|endoftext|>"}
{"context": "\t}\nchoose_best_statistics(List *stats, char requiredkind, bool inh,\n\t\t\t\tcontinue;\n\t\t\t\tcontinue;\n\t\tbms_free(matched_attnums);", "partial_line": "bms_free(", "completion": "bms_free(matched_exprs); <|endoftext|>"}
{"context": "\telse if (polinfo->polcmd == 'a')\n\tappendPQExpBuffer(delqry, \"DROP POLICY %s\", fmtId(polinfo->polname));\n\tDumpOptions *dopt = fout->dopt;\n\tPQExpBuffer query;\n\tint\t\t\ti_puballtables;", "partial_line": "int\t\t\ti_p", "completion": "int\t\t\ti_pubdelete; <|endoftext|>"}
{"context": "\t\tif (r < 0)\n\tchar\t   *filename = pg_malloc0(MAXPGPATH * sizeof(char));\n}\n\t\ttar_data->fd = open(tar_data->tarfilename,\n#ifdef HAVE_LIBZ", "partial_line": "if (wwmetho", "completion": "if (wwmethod->compression_algorithm == PG_COMPRESSION_GZIP) <|endoftext|>"}
{"context": "\treturn true;\n}\nstatic PQconninfoOption *\nconninfo_uri_parse(const char *uri, PQExpBuffer errorMessage,\n\t\t{", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t}\n\t\tbytes_written += bytes_to_write;\n\t\t*blockpos += bytes_to_write;\n\t\t\t\t\t\t\t\t PQerrorMessage(conn));\n\t\t{", "partial_line": "PQer", "completion": "PQerrorMessage(conn)); <|endoftext|>"}
{"context": "\tlong\t\tsqlcode;\n\tchar\t\tsqlerrp[8];\n#include <stdlib.h>\n char ** d4 = 0 ;\n#line 14 \"dynalloc.pgc\"", "partial_line": "in", "completion": "int * i5 = 0 ; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),\n\t\t{\n\t\t\t\tchar\t   *keyptr;\n\t\t\t}\nDatum", "partial_line": "errmsg(\"can", "completion": "errmsg(\"cannot delete from scalar\"))); <|endoftext|>"}
{"context": "\tplan.parse_mode = options->parseMode;\n\tplan.argtypes = NULL;\n\t_SPI_prepare_plan(src, &plan);\n\tresult = _SPI_make_plan_non_temp(&plan);\nSPIPlanPtr", "partial_line": "if (src", "completion": "if (src == NULL) <|endoftext|>"}
{"context": "static const symbol s_0_37[3] = { 0xEF, 0xBA, 0x92 };\nstatic const symbol s_0_55[3] = { 0xEF, 0xBA, 0xA4 };\nstatic const symbol s_0_56[3] = { 0xEF, 0xBA, 0xA5 };\nstatic const symbol s_0_59[3] = { 0xEF, 0xBA, 0xA8 };\nstatic const symbol s_0_62[3] = { 0xEF, 0xBA, 0xAB };", "partial_line": "static const symbol s", "completion": "static const symbol s_0_75[3] = { 0xEF, 0xBA, 0xB8 }; <|endoftext|>"}
{"context": "\tGinNullCategory *categories;\n\tentries = ginExtractEntries(ginstate, attnum, value, isNull,\n}\n\t\t  IndexUniqueCheck checkUnique,\n\t\t\t\t\t\t\t\t\t  ALLOCSET_DEFAULT_SIZES);", "partial_line": "for (i = 0; i < ginstate->origTupde", "completion": "for (i = 0; i < ginstate->origTupdesc->natts; i++) <|endoftext|>"}
{"context": "\telse if (att->attlen == -2)\n\telse\n\t\t\t\tconst Datum *values, const bool *isnull,\n\t{\n\t\tif (tupleDesc &&", "partial_line": "TupleDescCompactAttr(tupleDesc, attnum -", "completion": "TupleDescCompactAttr(tupleDesc, attnum - 1)->atthasmissing) <|endoftext|>"}
{"context": "\t\t\telse\n\t\t}\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),\n\t\t\t\t\t\t\t  plan_owner, _SPI_current->queryEnv);", "partial_line": "if (snapshot == I", "completion": "if (snapshot == InvalidSnapshot && <|endoftext|>"}
{"context": "{\n\t{\n\t\tcase GROUPING_SET_EMPTY:\n\t\t\t\tif (!omit_parens || list_length(gset->content) != 1)\n\tforeach(l, gset->content)", "partial_line": "StringInfo\tbuf", "completion": "StringInfo\tbuf = context->buf; <|endoftext|>"}
{"context": "\t\telse\n\t\t\tnewelemorder = 1;\n\t\tnbr_en = (Form_pg_enum) GETSTRUCT(existing[nbr_index]);\n\t\tif (other_nbr_index < 0)\n\t\telse if (other_nbr_index >= nelems)", "partial_line": "if (midpoint ==", "completion": "if (midpoint == nbr_en->enumsortorder || <|endoftext|>"}
{"context": "Datum\n\tPG_RETURN_BYTEA_P(pq_endtypsend(&buf));\nDatum\n\tif (pg_database_encoding_max_length() == 1)\n\telse", "partial_line": "VARS", "completion": "VARSIZE_ANY_EXHDR(t))); <|endoftext|>"}
{"context": "\t\t*containerType = INT2ARRAYOID;\n\tOid\t\t\telementType;\n\tif (!sbsroutines)\n\t\tereport(ERROR,\n\t\t\t\t parser_errposition(pstate, exprLocation(containerBase))));", "partial_line": "sbsre", "completion": "sbsref->refassgnexpr = NULL; <|endoftext|>"}
{"context": "\t\tnewrc->rti = newrc->prti = rc->rti;\n\t\tnewrc->strength = rc->strength;\n\tforeach(l, parse->rtable)\n\t\tPlanRowMark *newrc;\n\t\ti++;", "partial_line": "newrc->markType = sel", "completion": "newrc->markType = select_rowmark_type(rte, LCS_NONE); <|endoftext|>"}
{"context": "{\n\t   sizeof(AfterTriggerEventDataOneCtid) : \\\ntypedef struct AfterTriggerEventChunk\n\tchar\t   *tailfree;\t\t\n#define for_each_chunk(cptr, evtlist) \\", "partial_line": "#define for_each_eve", "completion": "#define for_each_event_chunk(eptr, cptr, evtlist) \\ <|endoftext|>"}
{"context": "\t\t\t\titems[i - 1] |= MULTIRANGE_ITEM_OFF_BIT;\n\t\t\tprev_offset = ptr - begin;\n\t\tmemcpy(ptr, (Pointer) (ranges[i] + 1), len);\n\t\tptr += att_align_nominal(len, elemalign);\n\twhile (i > 0)", "partial_line": "Ran", "completion": "RangeType * <|endoftext|>"}
{"context": "\tif (VirtualTransactionIdIsRecoveredPreparedXact(vxid))\n\tif (proc == NULL)\n\t\tLWLockRelease(&proc->fpInfoLock);\n\t\tPROCLOCK   *proclock;\n\t\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_OU", "completion": "(errcode(ERRCODE_OUT_OF_MEMORY), <|endoftext|>"}
{"context": "\t\tif (pgaio_wref_valid(&iow))\n\t\t{\nbool\n\t\tif (nowait)\n\t\tWaitIO(buf);", "partial_line": "uint32", "completion": "uint32\t\tbuf_state; <|endoftext|>"}
{"context": "int\n\t\t\t\t\t   O_DSYNC |\n\t\t\t\t\t   O_RDONLY |\n\t{\n#ifdef PG_O_DIRECT_USE_F_NOCACHE", "partial_line": "(errcode(ERRCODE_INS", "completion": "(errcode(ERRCODE_INSUFFICIENT_RESOURCES), <|endoftext|>"}
{"context": "\tHELP0(\"  SHOW_CONTEXT\\n\"\n\t\t  \"    if set, end of line terminates SQL commands (same as -S option)\\n\");\n\tHELP0(\"  expanded (or x)\\n\"\n\tHELPN(\"  fieldsep\\n\"\n\t\t  \"    field separator for unaligned output (default \\\"%s\\\")\\n\",", "partial_line": "HELP0(\"  nu", "completion": "HELP0(\"  null\\n\" <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase T_SortState:\n\t\tcase T_GroupState:\n\t\tcase T_HashState:\n\t\tcase T_SetOpState:", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\treturn NULL;\n\t{", "partial_line": "Dat", "completion": "Datum\t\tdatum; <|endoftext|>"}
{"context": "\t\t\t\t\tif (sdepForm->classid != AuthMemRelationId)\n\t\t\t\t\tif (sdepForm->dbid == MyDatabaseId ||\n\t\t\t\t\t\tobj.objectSubId = sdepForm->objsubid;\n\t\t\t}\n\t}", "partial_line": "performMultipleDeletions(delet", "completion": "performMultipleDeletions(deleteobjs, behavior, 0); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\twe_message_queue = WaitEventExtensionNew(\"TestShmMqMessageQueue\");\n\t\t\t\t\t\t\t we_message_queue);\n\t\t\tCHECK_FOR_INTERRUPTS();\n\t\t\t\t(errmsg(\"message corrupted\"),", "partial_line": "errdetail(\"The new and original m", "completion": "errdetail(\"The new and original messages differ at byte %zu of %zu.\", i, origlen))); <|endoftext|>"}
{"context": "\tecontext->caseValue_isNull = true;\n\tecontext->domainValue_datum = (Datum) 0;\n\tecontext->ecxt_estate = NULL;\n\t\testate->es_exprcontexts = list_delete_ptr(estate->es_exprcontexts,\n{", "partial_line": "ExecGetResultType(P", "completion": "ExecGetResultType(PlanState *planstate) <|endoftext|>"}
{"context": "share_tupledesc(dsa_area *area, TupleDesc tupdesc, uint32 typmod)\n\tshared->tdtypmod = typmod;\n\treturn shared_dp;\n}\nstatic TupleDesc", "partial_line": "if (CurrentSession->", "completion": "if (CurrentSession->shared_typmod_registry == NULL) <|endoftext|>"}
{"context": "\t\tif (aclresult != ACLCHECK_OK)\n\t\t{\n\t\t}\n\t\tif (OidIsValid(finalfn_oid))\n\t\t\t\taclcheck_error(aclresult, OBJECT_FUNCTION,", "partial_line": "peraggsta", "completion": "peraggstate->numFinalArgs = numArguments + 1; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\t\t ADJUST_YEAR(date2isoyear(tm->tm_year,\n\t\t\t\t\tstr_numth(s, s, S_TH_TYPE(n->suffix));\n\t\t\t\tbreak;\n\t\t\tcase DCH_IY:", "partial_line": "S_FM(n", "completion": "S_FM(n->suffix) ? 0 : <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t}\n\tif (!have_polymorphic_result)\n\t\treturn true;\n\t\t\t\tbreak;", "partial_line": "argtypes[i] = po", "completion": "argtypes[i] = poly_actuals.anyarray_type; <|endoftext|>"}
{"context": "\tvarattno = 0;\n\t\tAssert(varattno == te->resno);\n\t\tif (varattno > numaliases)\n\t\tereport(ERROR,\n}", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t\t\taddFamilyMember(&procedures, member);\n\tdropOperators(stmt->opfamilyname, amoid, opfamilyoid, operators);\n\ttypeName = (TypeName *) linitial(args);\n\t\t*righttype = typenameTypeId(NULL, typeName);\n\t}", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\twhile ((c = getopt_long(argc, argv, \"ad:D:np:P:R:s:t:TU:v\",\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\topt.sub_port = pg_strdup(optarg);\n\t\t\t\tbreak;", "partial_line": "opt.config", "completion": "opt.config_file = pg_strdup(optarg); <|endoftext|>"}
{"context": "\t\t\t\t\tlog = 0,\n\t\t{\n\t\t}\n\t{\n\t\tint\t\t\targs;", "partial_line": "s", "completion": "seg = 0, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   originname,\n\tstart_apply(origin_startpos);\nUpdateTwoPhaseState(Oid suboid, char new_state)\n\tRelation\trel;\n\tHeapTuple\ttup;", "partial_line": "elo", "completion": "elog(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t range_count * sizeof(uint8), elemalign);\n\t\t\t\t\t\t\t\t  sizeof(RangeType) -\nwrite_multirange_data(MultirangeType *multirange, TypeCacheEntry *rangetyp,\n\t\t\t\t\t  int32 range_count, RangeType **ranges)\n\tint32\t\ti;", "partial_line": "items[i - 1] -= pre", "completion": "items[i - 1] -= prev_offset; <|endoftext|>"}
{"context": "pg_u_islower(pg_wchar code)\n\treturn pg_u_prop_lowercase(code);\n\t\treturn false;\n\t\treturn category_mask & (PG_U_P_MASK | PG_U_S_MASK);\npg_u_isspace(pg_wchar code)", "partial_line": "switch (", "completion": "switch (category) <|endoftext|>"}
{"context": "\tbool\t\tret = true;\n\t\t\t\t errmsg(\"access method \\\"%s\\\" does not exist\",\n\t\t\t\t\t\taccessMethodName)));\n\taccessMethodForm = (Form_pg_am) GETSTRUCT(tuple);\n\tindexInfo = makeIndexInfo(numberOfAttributes, numberOfAttributes,", "partial_line": "typeIds =", "completion": "typeIds = palloc_array(Oid, numberOfAttributes); <|endoftext|>"}
{"context": "\t\toffsetof(StdRdOptions, autovacuum) + offsetof(AutoVacOpts, vacuum_max_threshold)},\n\t\t{\"autovacuum_freeze_table_age\", RELOPT_TYPE_INT,\n\t\t{\"autovacuum_analyze_scale_factor\", RELOPT_TYPE_REAL,\n\t\t\t\t\t\t\t\t\t  sizeof(StdRdOptions),\n\t\t\t\t   validate, relopt_elems, num_relopt_elems);", "partial_line": "foreach(", "completion": "foreach(lc, relopts->options) <|endoftext|>"}
{"context": "\t\t\ttmp = (t + 1) / term;\n\t\t\trhs = (((t + X) / (term + S)) * term) / t;\n\t\t\ty = (((U * (t + 1)) / term) * (t + S + 1)) / (t + X);\n\t\t\t\tnumer_lim = t + 1;\n\t\t\tif (exp(log(y) / n) <= (t + X) / t)", "partial_line": "pg_prng_see", "completion": "pg_prng_seed(randstate, (uint64) seed); <|endoftext|>"}
{"context": "int\t\t\tSPI_result = 0;\nstatic _SPI_connection *_SPI_current = NULL;\nstatic int\t_SPI_stack_depth = 0;\t\n\tRawParseMode mode;\nstatic ParamListInfo _SPI_convert_params(int nargs, Oid *argtypes,", "partial_line": "Datum *Values, co", "completion": "Datum *Values, const char *Nulls); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\t\tcase VAR_RETURNING_OLD:\n\t\t\t\t\t\t\t}\n\t\t\t\t\tscratch.d.var.varreturningtype = variable->varreturningtype;\n\t\t\t\t\t{", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tgetDumpableObjects(&dobjs, &numObjs);\n\tsortDumpableObjects(dobjs, numObjs,\n\tropt->cparams.dbname = dopt.cparams.dbname ? pg_strdup(dopt.cparams.dbname) : NULL;\n\tropt->column_inserts = dopt.column_inserts;\n\tropt->dumpSections = dopt.dumpSections;", "partial_line": "ropt->acl", "completion": "ropt->aclsSkip = dopt.aclsSkip; <|endoftext|>"}
{"context": "\tadd_exact_object_address(&referenced, addrs);\n\tchar\t   *prsname;\n\tOid\t\t\tnamespaceoid;\n\tnamespaceoid = QualifiedNameGetCreationNamespace(names, &prsname);\n\tvalues[Anum_pg_ts_parser_prsnamespace - 1] = ObjectIdGetDatum(namespaceoid);", "partial_line": "foreach(p", "completion": "foreach(pl, parameters) <|endoftext|>"}
{"context": "\t\t\t\tdbname = pg_strdup(optarg);\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase 'j':\n\t\t\tcase 'n':", "partial_line": "objfilter", "completion": "objfilter |= OBJFILTER_SCHEMA; <|endoftext|>"}
{"context": "static const symbol s_104[] = { 'c', 'e', 'n', 't', 'r', 'a' };\nstatic const symbol s_105[] = { 'i', 's', 't', 'r', 'a' };\nstatic const symbol s_108[] = { 'd', 'b', 'a' };\nstatic const symbol s_116[] = { 'r', 'c', 'a' };\nstatic const symbol s_127[] = { 's', 'k' };", "partial_line": "static const symbol s_128[] =", "completion": "static const symbol s_128[] = { 0xC5, 0xA1, 'k' }; <|endoftext|>"}
{"context": "\t\tstruct statement stmt;\n\t\t\tdata_var.ind_value = (char *) data_var.ind_value + data_var.ind_offset;\n}\n\telse\n\t\t\treturn false;", "partial_line": "if (!(var = (struct variable *) ecpg_alloc(sizeof(str", "completion": "if (!(var = (struct variable *) ecpg_alloc(sizeof(struct variable), lineno))) <|endoftext|>"}
{"context": "\t\t\t\tfree(tmp);\n\t\t\t{\n\t\t\t\tte->dependencies = deps;\n\t\t\t}\n\t\t\t{", "partial_line": "fre", "completion": "free(deps); <|endoftext|>"}
{"context": "\t\t\t\t\t\tGetLastError())));\n\t\t\t\t\t(errmsg_internal(\"could not terminate unstarted process: error code %lu\",\n\t\tCloseHandle(pi.hProcess);\n\t\t}\n\t\telog(FATAL, \"invalid subpostmaster invocation\");", "partial_line": "child_kind", "completion": "child_kind = argv[1] + 12; <|endoftext|>"}
{"context": "\t\t}\n\t}\n\t\treturn;\n\t\t\t\t*dependencies = (DumpId *) pg_realloc(*dependencies,\n\t\t\t\tfindDumpableDependencies(AH, otherdobj,", "partial_line": "dependencies, nD", "completion": "dependencies, nDeps, allocDeps); <|endoftext|>"}
{"context": "void\n\t\t\t\t\t\t\t\tNULL, 1, &skey);\n\t\tbool\t\tisnull;\n\t\tbuild->tgoid = pg_trigger->oid;\n\t\tbuild->tgenabled = pg_trigger->tgenabled;", "partial_line": "Anum_pg_trigg", "completion": "Anum_pg_trigger_tgargs, <|endoftext|>"}
{"context": "static BlockNumber\n\t\t\t\t\t\t void *per_buffer_data)\n{\n\t}\n\t{", "partial_line": "if (vacrel->next_unskippable_block - next_block >=", "completion": "if (vacrel->next_unskippable_block - next_block >= SKIP_PAGES_THRESHOLD) <|endoftext|>"}
{"context": "\t\t\t\tsnprintf(dbfilepath, MAXPGPATH, \"\\\"%s\\\"/\\\"%s\\\".tar\", db_subdir, oid);\n\t\t\telse\n\t\t{\n\t\t\tif (archDumpFormat != archNull)\nrunPgDump(const char *dbname, const char *create_opts, char *dbfile,", "partial_line": "termPQExpBuff", "completion": "termPQExpBuffer(&cmd); <|endoftext|>"}
{"context": "#endif\n\t\t\tereport(ERROR,\n\t}\n\trepl_val[Anum_pg_authid_rolname - 1] = DirectFunctionCall1(namein,\n\t\trepl_repl[Anum_pg_authid_rolpassword - 1] = true;", "partial_line": "(errmsg(\"MD5 pass", "completion": "(errmsg(\"MD5 password cleared because of role rename\"))); <|endoftext|>"}
{"context": "\tpstatus = conn->pstatus;\n\t}\n\tconn->client_encoding = PG_SQL_ASCII;\n\tconn->scram_sha_256_iterations = SCRAM_SHA_256_DEFAULT_ITERATIONS;\n\t\t\t\t  int expand_dbname)", "partial_line": "return", "completion": "return conn; <|endoftext|>"}
{"context": "\t\tif (res != NULL)\n\t}\n\tif (ldap_set_option(ld, LDAP_OPT_NETWORK_TIMEOUT, &time) != LDAP_SUCCESS)\n\t\tfree(url);\n\t}", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\t\ts += strlen(s);\n\t\t\t\tif (S_THth(n->suffix))\n\t\t\t\t\tif (strlen(str) <= (n->key->len + TM_SUFFIX_LEN) * DCH_MAX_ITEM_SIZ)\n\t\t\t\t\t\t\t\t errmsg(\"localized string format value too long\")));", "partial_line": "char\t   *str = str_in", "completion": "char\t   *str = str_initcap_z(localized_full_days[tm->tm_wday], collid); <|endoftext|>"}
{"context": "\t\t\"pg_catalog.simple\",\n\t\t\tgettext_noop(\"An empty string means use the default cipher suites.\"),\n\t\t},\n\t\t\"\",\n\t\t{\"ssl_groups\", PGC_SIGHUP, CONN_AUTH_SSL,", "partial_line": "#ifdef", "completion": "#ifdef USE_SSL <|endoftext|>"}
{"context": "\tMemoryContextReset(mstate->tableContext);\n\tmstate->hashtable = NULL;\n\tdlist_mutable_iter iter;\n\t{\n\t\tif (key == specialkey)", "partial_line": "return", "completion": "return entry; <|endoftext|>"}
{"context": "\ty[25] = b64[26];\n\ty[26] = b64[25];\n\ty[29] = b64[30];\n\ty[54] = b64[53];\n\ty[59] = b64[56];", "partial_line": "ROUND1(D, A, B", "completion": "ROUND1(D, A, B, C, 1, Sb, 2); <|endoftext|>"}
{"context": "{\n}\n\t\tlen = pg_mbstrlen_with_len(VARDATA_ANY(arg), len);\ncheck_collation_set(Oid collid)\n{", "partial_line": "pg_locale_t my", "completion": "pg_locale_t mylocale; <|endoftext|>"}
{"context": "\tAARR_FREE_IF_COPY(array1, 0);\n{\n\tPG_RETURN_BOOL(array_cmp(fcinfo) <= 0);\n\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t\t\t errmsg(\"cannot compare arrays of different element types\")));", "partial_line": "if (ty", "completion": "if (typentry == NULL || <|endoftext|>"}
{"context": "struct pg_encoding\n};", "partial_line": "char", "completion": "char\t   *namebuf; <|endoftext|>"}
{"context": "\tif (location < 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"JSON_FUNCTION\");\n\t\tFuncExpr   *fexpr = makeFuncExpr(F_CONVERT_TO, BYTEAOID,\n\t\tfexpr->location = location;\n\tif (!res && report_error)", "partial_line": "format_typ", "completion": "format_type_be(returning->typid)), <|endoftext|>"}
{"context": "\ttup = SearchSysCache1(PROCOID, ObjectIdGetDatum(transfn));\n\t}\n\tif (aggmtransfnName)\n\t\t\t\t\t\t\t\t\t   fnArgs, variadicArgType,\n\t\t\tereport(ERROR,", "partial_line": "Assert(", "completion": "Assert(aggmtransfnName); <|endoftext|>"}
{"context": "\t{\n\t\tOid\t\t\targtypeid = get_fn_expr_argtype(fcinfo->flinfo, 0);\n\t{\n{\n\t\tif (typlen == 0)\t\t", "partial_line": "fcinfo->flinfo->fn_extra = MemoryContextAlloc(fci", "completion": "fcinfo->flinfo->fn_extra = MemoryContextAlloc(fcinfo->flinfo->fn_mcxt, <|endoftext|>"}
{"context": "\t}\n\tset_ps_display(\"idle\");\n\t\tResetLatch(MyLatch);\n\t\tCHECK_FOR_INTERRUPTS();\n\t\t}", "partial_line": "WAIT_EVENT", "completion": "WAIT_EVENT_WAL_RECEIVER_WAIT_START); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   InvalidOffsetNumber);\n\t\t\t}\n\t\t{\n\t\t\tcontinue;\n\t\tif (ginCompareItemPointers(&entry->curItem, &advancePast) <= 0)", "partial_line": "if (entry->isFi", "completion": "if (entry->isFinished) <|endoftext|>"}
{"context": "\t{\n\t\tif (tuptab == NULL)\n\t\t\t\t\terrdetail = NULL;\n\t\t}\n}", "partial_line": "portal = exec_dynquery_with_params(estate, stmt-", "completion": "portal = exec_dynquery_with_params(estate, stmt->query, stmt->params, <|endoftext|>"}
{"context": "\t\trecoveryStopLSN = InvalidXLogRecPtr;\n\t\t{\n\tuint8\t\tinfo;\n\t\t\tstrlcpy(recoveryStopName, recordRestorePointData->rp_name, MAXFNAMELEN);\n\t\t\t\t\t\t\ttimestamptz_to_str(recoveryStopTime))));", "partial_line": "record->ReadRecPtr >= re", "completion": "record->ReadRecPtr >= recoveryTargetLSN) <|endoftext|>"}
{"context": "\telse if (strcmp(token->string, \"peer\") == 0)\n\telse if (strcmp(token->string, \"gss\") == 0)\n\t\tparsedline->auth_method = uaGSS;\n#else\n#endif", "partial_line": "#i", "completion": "#ifdef USE_SSL <|endoftext|>"}
{"context": "\t\t{\n\t\t\tinvalid_system_index = true;\n\tReleaseSysCache(tuple);\n\t\tstate->heapOid = IndexGetRelation(relOid, true);\n}", "partial_line": "ListCell", "completion": "ListCell   *cell; <|endoftext|>"}
{"context": "\tMemoryContextDelete(node->partcontext);\n\tpfree(node->perfunc);\n\touterPlan = outerPlanState(node);\n\trelease_partition(node);\n\tExecClearTuple(node->ss.ss_ScanTupleSlot);", "partial_line": "ExecClearTuple", "completion": "ExecClearTuple(node->framehead_slot); <|endoftext|>"}
{"context": "{\n\tif (next_object_access_hook)\n\taudit_success(\"object access\",\n\tif (do_abort && !allow)\n\t\tereport(ERROR,", "partial_line": "errmsg(\"permission den", "completion": "errmsg(\"permission denied: %s\", \"execute\"))); <|endoftext|>"}
{"context": "#include \"utils/rangetypes.h\"\n\tFmgrInfo\ttypioproc;\t\t\n} MultirangeIOData;\n\tMULTIRANGE_IN_RANGE_ESCAPED,", "partial_line": "MULTIRANGE_IN", "completion": "MULTIRANGE_IN_RANGE_QUOTED, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tTableOidAttributeNumber,\n\tIndex\t\trelid;\n\tAssert(IS_SIMPLE_REL(rel));\n\textraUpdatedCols = get_dependent_generated_columns(root, rel->relid,\n{", "partial_line": "int", "completion": "int\t\t\tattno; <|endoftext|>"}
{"context": "\tobjsMoved = new_object_addresses();\n\twhile (HeapTupleIsValid(depTup = systable_getnext(depScan)))\n\t\tObjectAddress dep;\n\t\t\tforeach(lc, dcontrol->no_relocate)\n\t\t\t{", "partial_line": "char\t   *nrextname = (ch", "completion": "char\t   *nrextname = (char *) lfirst(lc); <|endoftext|>"}
{"context": "static const symbol s_8_70[4] = { 'a', 'm', 'o', 's' };\nstatic const symbol s_8_75[7] = { 'a', 'r', 0xED, 'a', 'm', 'o', 's' };\nstatic const symbol s_8_81[6] = { 'i', 'r', 'e', 'm', 'o', 's' };\nstatic const symbol s_8_83[7] = { 'i', 0xE9, 's', 'e', 'm', 'o', 's' };\nstatic const symbol s_8_85[4] = { 'a', 'r', 0xE1, 's' };", "partial_line": "{ 4,", "completion": "{ 4, s_8_18, 16, 2, 0}, <|endoftext|>"}
{"context": "\tXLogFilePath(path, ControlFile.checkPointCopy.ThisTimeLineID,\n\tfd = open(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY,\n\t\t\t  pg_file_create_mode);\n\t\t{\n\tif (fsync(fd) != 0)", "partial_line": "printf(_(\" [-D,", "completion": "printf(_(\" [-D, --pgdata=]DATADIR  data directory\\n\")); <|endoftext|>"}
{"context": "\t\t\treturn -1;\n\t\t\twhile (match_len--)\n\t\t}\n\t\tint\t\t\tctrlc;\n\t\t\t\toff = ((sp[0] & 0xf0) << 4) | sp[1];", "partial_line": "off", "completion": "off += off; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t\trewrite_events = lappend(rewrite_events, rev);\n\t\t\t\t\t\t\t\t\t\tpt == parsetree ?\n\t\t\tparsetree->returningList &&\n\t\t\t\t\telog(ERROR, \"unrecognized commandType: %d\",", "partial_line": "if (parsetree->onCo", "completion": "if (parsetree->onConflict && <|endoftext|>"}
{"context": "\t\t\t\t\ttarfilename = tarfilenamebuf;\n\t}\n\t\t RelFileNumber relfilenumber, unsigned segno,\n{\n\tint\t\t\tchecksum_failures = 0;", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tCollationOidIndexId,\n\t\tOBJECT_COLLATION,\n\t\tAnum_pg_constraint_conname,\n\t\t-1,\n\t\t\"conversion\",", "partial_line": "CON", "completion": "CONNAMENSP, <|endoftext|>"}
{"context": "\twhile (buf->cursor < buf->len)\n\t\t\t\t\tpg_fatal(\"could not write file \\\"%s\\\": %m\", output_filename);\n\t\t\t\telse\n\t\t}\n\tchecksum_length = pg_checksum_final(&checksum_ctx, checksum_payload);", "partial_line": "if (mwrite", "completion": "if (mwriter != NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t\t PQerrorMessage(conn));\n\t\t\t\t\t\t PQerrorMessage(conn));\n\t\tres = PQgetResult(conn);\n\t\tAppendPlainCommandOption(&buf, use_new_option_syntax, \"PROGRESS\");\n\tif (includewal != NO_WAL)", "partial_line": "AppendInteger", "completion": "AppendIntegerCommandOption(&buf, use_new_option_syntax, \"MAX_RATE\", <|endoftext|>"}
{"context": "\t\tend_offset++;\n\tNumeric\t\tres;\n\t\tif (NUMERIC_IS_NINF(num1))\n\t\t\t\treturn make_result(&const_nan); \n\t\tif (NUMERIC_IS_PINF(num2))", "partial_line": "init_var_fro", "completion": "init_var_from_num(num1, &arg1); <|endoftext|>"}
{"context": "\t\t}\n\tstd_strings = PQparameterStatus(conn, \"standard_conforming_strings\");\n\tif (!std_strings)\n\t}\n\t\texecuteCommand(conn, \"SET quote_all_identifiers = true\");", "partial_line": "fprintf(OPF, \"SET client_encodi", "completion": "fprintf(OPF, \"SET client_encoding = '%s';\\n\", <|endoftext|>"}
{"context": "static char *\n\t}\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n\t\t\t\t errmsg(\"path must be in or below the data directory\")));\n{", "partial_line": "return N", "completion": "return NULL; <|endoftext|>"}
{"context": "\ttupledata = XLogRecGetBlockData(r, 0, &datalen);\n\tchange->data.tp.newtuple =\n\t\tReorderBufferAllocTupleBuf(ctx->reorder, tuplelen);\n\tDecodeXLogTuple(tupledata, datalen, change->data.tp.newtuple);\nDecodeUpdate(LogicalDecodingContext *ctx, XLogRecordBuffer *buf)", "partial_line": "Reord", "completion": "ReorderBufferChange *change; <|endoftext|>"}
{"context": "\tif (frameOptions & FRAMEOPTION_EXCLUDE_CURRENT_ROW)\n\t\tif (pos == winstate->currentpos)\n\t}\n\treturn 1;\nstatic void", "partial_line": "winstate->fra", "completion": "winstate->framehead_valid = true; <|endoftext|>"}
{"context": "#include \"access/xloginsert.h\"\n#include \"catalog/storage.h\"\n#define MAX_MAPPINGS\t\t\t64\n\tOid\t\t\tmapoid;\t\t\t\nstatic void apply_map_update(RelMapFile *map, Oid relationId,", "partial_line": "static void merge_map", "completion": "static void merge_map_updates(RelMapFile *map, const RelMapFile *updates, <|endoftext|>"}
{"context": "CompressorState *\nvoid\nInitCompressFileHandle(const pg_compress_specification compression_spec)\n\tcompression_spec.algorithm = PG_COMPRESSION_NONE;\n\treturn CFH;", "partial_line": "bool\t\tret", "completion": "bool\t\tret = false; <|endoftext|>"}
{"context": "\tLWLockAcquire(BtreeVacuumLock, LW_EXCLUSIVE);\n\t\tBTOneVacInfo *vac = &btvacinfo->vacuums[i];\n\t_bt_end_vacuum((Relation) DatumGetPointer(arg));\n\treturn size;\n\tbtvacinfo = (BTVacInfo *) ShmemInitStruct(\"BTree Vacuum State\",", "partial_line": "byt", "completion": "bytea * <|endoftext|>"}
{"context": "\tAssert(ReservedRefCountEntry != NULL);\n\tAssert(BufferIsValid(buffer));\n\t\t\treturn res;\n\t{\n\t\treturn res;", "partial_line": "bo", "completion": "bool\t\tfound; <|endoftext|>"}
{"context": "\t\t\tconstExpr = (Node *) ((RelabelType *) constExpr)->arg;\n\t\t\tfirstTime = false;\n\t\t}\n\t\t{\n\t\t\tif (opno != matchOpno ||", "partial_line": "iclause->ind", "completion": "iclause->indexcols = NIL; <|endoftext|>"}
{"context": "{ 2, s_2_2, -1, 2, 0},\n{ 6, s_2_10, 2, 2, 0},\n{ 14, s_2_11, 2, 2, 0},\n{ 6, s_2_17, 15, 1, 0},\n{ 2, s_2_27, -1, 2, 0},", "partial_line": "{ 8,", "completion": "{ 8, s_3_0, -1, 1, 0}, <|endoftext|>"}
{"context": "\t}\n\t\t\tPG_RETURN_FLOAT8(get_float8_nan());\n\t\telse\t\t\t\t\t\n\t{\n\t\tif (arg2 == 0.0)", "partial_line": "else if (a", "completion": "else if (arg1 > 0.0) <|endoftext|>"}
{"context": "\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\tecpg_free(str);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tecpg_free(str);\n\t\t\t\t\telse", "partial_line": "mallocedval = ecpg_str", "completion": "mallocedval = ecpg_strdup(\"\", lineno); <|endoftext|>"}
{"context": "\tpath = (PATH *) palloc(size);\n\t{\n\tPG_RETURN_PATH_P(path);\n{\n\tint32\t\ti;", "partial_line": "PATH", "completion": "PATH\t   *p2 = PG_GETARG_PATH_P(1); <|endoftext|>"}
{"context": "Datum\n\tif (OidIsValid(roident))\npg_replication_origin_session_setup(PG_FUNCTION_ARGS)\n}\n\treplorigin_check_prerequisites(false, false);", "partial_line": "pg_replication_origin_xact_setup(PG", "completion": "pg_replication_origin_xact_setup(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tfound);\n\t\tcase jpiCeiling:\n\t\t\t\t\tdouble\t\tval;\n\t\t\t\t\t\t\t\t\t\t\ttmp,\n\t\t\t\t\tif (escontext.error_occurred)", "partial_line": "RETURN_ERROR(erepo", "completion": "RETURN_ERROR(ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\tcase DTK_MONTH:\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\ttmask = DTK_M(MONTH);\n\t\t\t\t\t\t\ttm->tm_hour = value;\n\t\t\t\t\t\tcase DTK_SECOND:", "partial_line": "if (*cp ==", "completion": "if (*cp == '.') <|endoftext|>"}
{"context": "\t\tif (strcmp(name, inj_state->name[i]) == 0)\n\t\t{\n\t\t\tindex = i;\n\t\t}\n\tinjection_point_local = true;", "partial_line": "before_shmem_exit(injection", "completion": "before_shmem_exit(injection_points_cleanup, (Datum) 0); <|endoftext|>"}
{"context": "\tPlanState  *outerPlan = outerPlanState(winstate);\n\twinstate->currentpos = 0;\n\twinstate->frametailgroup = 0;\n\t\t\tExecCopySlot(winstate->first_part_slot, outerslot);\n\t\t}", "partial_line": "agg_win", "completion": "agg_winobj->markpos = -1; <|endoftext|>"}
{"context": "\t\t}\n\t}\n\t\treturn;\n\t}\n\treturn start_request(actx);", "partial_line": "actx_error(actx,", "completion": "actx_error(actx, \"out of memory\"); <|endoftext|>"}
{"context": "\t\t\tcase 'l':\n\t\t\t\tif (lcltime == NULL)\n\t\t\t\tbreak;\n\t\t\t\t{\n\t\t\t\t\t\t\t_(\"%s: More than one -L option specified\\n\"),", "partial_line": "case", "completion": "case 'v': <|endoftext|>"}
{"context": "\t\t\t\t\tcase TRANS_STMT_BEGIN:\n\t\t\t\t\t\t\tBeginTransactionBlock();\n\t\t\t\t\t\t\tforeach(lc, stmt->options)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t{", "partial_line": "if (!Pre", "completion": "if (!PrepareTransactionBlock(stmt->gid)) <|endoftext|>"}
{"context": "\tCommandCounterIncrement();\n\taclresult = object_aclcheck(ForeignServerRelationId, server->serverid, ownerId, ACL_USAGE);\n\tif (aclresult != ACLCHECK_OK)\n\tftoptions = transformGenericOptions(ForeignTableRelationId,\n\trecordDependencyOn(&myself, &referenced, DEPENDENCY_NORMAL);", "partial_line": "ForeignDataWrapp", "completion": "ForeignDataWrapper *fdw; <|endoftext|>"}
{"context": "}\n\twhile (nbytes > 0)\n\t\t\tXLogSegNo\tnextSegNo;\n\t\t\t\tstate->routine.segment_close(state);\n\t\t\tstate->seg.ws_tli = tli;", "partial_line": "if (nbytes > (state->segcxt.ws", "completion": "if (nbytes > (state->segcxt.ws_segsize - startoff)) <|endoftext|>"}
{"context": "\t{\n\t\tlock = SimpleLruGetBankLock(MultiXactMemberCtl, pageno);\n\t\tSimpleLruWritePage(MultiXactMemberCtl, slotno);\n\t\t\t\t\t\t\t\t  xlrec->moff + xlrec->nmembers);\n\t\t}", "partial_line": "SizeOfMultiX", "completion": "SizeOfMultiXactTruncate); <|endoftext|>"}
{"context": "\t\t\t\t\t  \"2 day 12 hour 59 minute 10 second\",\n char * text ;\n interval * i1 ;\n\tECPGdebug(1, stderr);\n\tts1 = PGTYPEStimestamp_from_asc(\"2003-12-04 17:34:29\", NULL);", "partial_line": "dc = PGTY", "completion": "dc = PGTYPESdate_new(); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\nPLy_plan_new(void)", "partial_line": "#e", "completion": "#endif <|endoftext|>"}
{"context": "\t\tGISTInitBuffer(buffer, F_LEAF);\n\t\t\t\t\t\t\t\t\t\t   gistBuildCallback,\n\t\t\t\t\t\t\t  true);\n\tfreeGISTstate(buildstate.giststate);\n\treturn result;", "partial_line": "gistSortedBuildCallback", "completion": "gistSortedBuildCallback(Relation index, <|endoftext|>"}
{"context": "\trt_iter    *iter;\n#endif\n\tEXPECT_TRUE(rt_find(radixtree, 0) == NULL);\n\trt_free(radixtree);\n\tradixtree = rt_create(dsa, tranche_id);", "partial_line": "#el", "completion": "#else <|endoftext|>"}
{"context": "\tSET_VARSIZE(out, len);\n\tout->size = in->size;\n}\ntsvector_length(PG_FUNCTION_ARGS)\n\t\t\t\tj;", "partial_line": "WordE", "completion": "WordEntry  *entry; <|endoftext|>"}
{"context": "\t\tforeach(item, addroleto)\n\t\t\tOid\t\t\toldroleid = oldroleform->oid;\n\t\tif (createrole_self_grant_enabled)\n\t}\n\tForm_pg_authid authform;", "partial_line": "char", "completion": "char\t   *password = NULL; <|endoftext|>"}
{"context": "#endif\n\tINJECTION_POINT(\"hash-aggregate-enter-spill-mode\");\n\t\taggstate->hash_ever_spilled = true;\n\t\t\tHashAggSpill *spill = &aggstate->hash_spills[setno];\n\t\t\thashagg_spill_init(spill, aggstate->hash_tapeset, 0,", "partial_line": "aggstate->ha", "completion": "aggstate->hashentrysize); <|endoftext|>"}
{"context": "\tCost\t\tstartup_cost = 0;\n\tCost\t\tcpu_per_tuple;\n\t\tpath->rows = baserel->rows;\n\tstartup_cost += qpqual_cost.startup;\n\tCost\t\trun_cost = 0;", "partial_line": "Asser", "completion": "Assert(baserel->relid > 0); <|endoftext|>"}
{"context": "{ 3, s_4_2, 0, 3, 0},\n{ 3, s_4_5, 3, 1, 0}\nstatic int r_remove_particle(struct SN_env * z) {\n    z->ket = z->c;\n    }", "partial_line": "if (z->I[0", "completion": "if (z->I[0] == 3) return 0; <|endoftext|>"}
{"context": "\t\t\t}\n\tvacrel->blkno = InvalidBlockNumber;\n\t\tMax(vacrel->new_live_tuples, 0) + vacrel->recently_dead_tuples +\n\tif (vacrel->dead_items_info->num_items > 0)\n\tif (rel_pages > next_fsm_block_to_vacuum)", "partial_line": "sta", "completion": "static BlockNumber <|endoftext|>"}
{"context": "{\n{\n\tint\t\t\tpattern_id;\n\tconst char *comma;\n\t\t\tappendPQExpBuffer(buf, \"%s\\n(%d, \", comma, pattern_id);", "partial_line": "comma =", "completion": "comma = \",\"; <|endoftext|>"}
{"context": "\t\tint\t\t\tpartidx = -1;\n\t\t\t\t\t\t\t   val_desc) : 0,\n\t\t\t\tAssert(dispatch->indexes[partidx] < proute->num_partitions);\n\t\t\t\t\tCheckValidResultRel(rri, CMD_INSERT, NIL);\n\t\t\t\t}", "partial_line": "if (likely(dispatch->indexes[p", "completion": "if (likely(dispatch->indexes[partidx] >= 0)) <|endoftext|>"}
{"context": "parseNameAndArgTypes(const char *string, bool allowNone, List **names,\n\tchar\t   *rawname;\n\tbool\t\tin_quote;\n\tfor (ptr = rawname; *ptr; ptr++)\n\t\tereturn(escontext, false,", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t}\n\tProcessClientReadInterrupt(false);\n}\n}\n\tint\t\t\twaitfor;", "partial_line": "if (n < 0 && !port->noblock && (errno == EWOULDBLOC", "completion": "if (n < 0 && !port->noblock && (errno == EWOULDBLOCK || errno == EAGAIN)) <|endoftext|>"}
{"context": "\t\t\t\tflag = DatumGetBool(DirectFunctionCall2(box_left, leaf,\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tquery));\n\t\t\tcase RTOverRightStrategyNumber:\n\t\t\tcase RTAboveStrategyNumber:", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t{\n\t{\n\t\t\t}\nDatum\n\t\t\t\t\t\t\t\t   \"expanded record\",", "partial_line": "tmptup.t_", "completion": "tmptup.t_tableOid = InvalidOid; <|endoftext|>"}
{"context": "\t\tappendStringInfoChar(&buf, '\"');\n}\n\t\t\t\t\t\t   TimeLineID endtli)\n\tbool\t\tfound_start_timeline = false;\n\t\t\t\t\t\t   starttli, entry->tli));", "partial_line": "if (starttli == en", "completion": "if (starttli == entry->tli) <|endoftext|>"}
{"context": "\tif (tbm->dsa == NULL)\n\telse if (DsaPointerIsValid(tbm->dsapagetableold))\n\tnbuckets = Max(nbuckets, 16);\t\n}\n{", "partial_line": "if (DsaP", "completion": "if (DsaPointerIsValid(dsp)) <|endoftext|>"}
{"context": "\t\tr.ru_utime.tv_usec += 1000000;\n\t{\n\t\t\t\t\t (long) (r.ru_stime.tv_usec - Save_r.ru_stime.tv_usec),\n\t\t\t\t\t (long) (elapse_t.tv_usec - Save_t.tv_usec));\n\t\t\t\t\t (long) sys.tv_usec);", "partial_line": "#ifndef", "completion": "#ifndef WIN32 <|endoftext|>"}
{"context": "\tchar\t   *rawname;\n\trawname = text_to_cstring(textval);\n\t\t\t\t errmsg(\"invalid name syntax\")));\nbool\n\tdo", "partial_line": "char", "completion": "char\t   *curname; <|endoftext|>"}
{"context": "\t\t\tif (SSL_set_tlsext_host_name(conn->ssl, host) != 1)\n\t\t}\n\t\t}\n\t\t\t)\n\t\t\t\tfree(engine_str);", "partial_line": "conn->engi", "completion": "conn->engine = NULL; <|endoftext|>"}
{"context": "\t\tif (xlrec->nupdated > 0)\n\t\t\tOffsetNumber *updatedoffsets;\n\t\t\txl_btree_update *updates;\n\t\t\tupdatedoffsets = (OffsetNumber *)\n\t\tPageSetLSN(page, lsn);", "partial_line": "(ptr + xl", "completion": "(ptr + xlrec->ndeleted * sizeof(OffsetNumber)); <|endoftext|>"}
{"context": "\t\tif (!allLocks)\n\t\t\tLOCALLOCKOWNER *lockOwners = locallock->lockOwners;\n\t\t\t{\n\t\t\t\t\tlockOwners[0] = lockOwners[i];\n\t\t\t\tlocallock->numLockOwners = 1;", "partial_line": "Oid", "completion": "Oid\t\t\trelid; <|endoftext|>"}
{"context": "\tDumpOptions *savDopt;\n\t\ttarClose(AH, th);\t\t\n\t\tctx->isSpecialScript = 1;\n\t\tsavDopt = AH->public.dopt;\n\t\t\tif (fputc(0, ctx->tarFH) == EOF)", "partial_line": "return tarWrite(buf,", "completion": "return tarWrite(buf, len, ctx->scriptTH); <|endoftext|>"}
{"context": "\tJsonbInState *res;\n\tOid\t\t\tkey_output_func;\nstatic void jsonb_put_escaped_value(StringInfo out, JsonbValue *scalarVal);\nstatic void array_dim_to_jsonb(JsonbInState *result, int dim, int ndims, int *dims,\n\t\t\t\t\t\t\t   const Datum *vals, const bool *nulls, int *valcount,", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "ecpg_dynamic_type_DDT(Oid type)\n\t{\n\t\tcase TIMETZOID:\n\tECPGresult = ecpg_result_by_descriptor(lineno, desc_name);\n\t\treturn false;", "partial_line": "ecpg_log(\"EC", "completion": "ecpg_log(\"ECPGget_desc_header: found %d attributes\\n\", *count); <|endoftext|>"}
{"context": "#define CCID_ARRAY_SIZE\t\t\t100\n\tif (tup->t_infomask & HEAP_COMBOCID)\n\t\treturn cid;\n\tAssert(CritSectionCount > 0 ||\n\t\t   TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetUpdateXid(tup)));", "partial_line": "return", "completion": "return cid; <|endoftext|>"}
{"context": "\t\t{\n\t\telse\n\toldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);\n\tfor (j = 0; j < numArrayKeys; j++)\n\t\tExprState  *array_expr = arrayKeys[j].array_expr;", "partial_line": "Datum", "completion": "Datum\t\tarraydatum; <|endoftext|>"}
{"context": "static const symbol s_11_243[5] = { 't', 'o', 'o', 'm', 'e' };\nstatic const symbol s_11_248[7] = { 't', 'u', 'u', 'a', 'k', 's', 'e' };\nstatic const symbol s_11_253[6] = { 't', 0xC3, 0xB5, 'i', 't', 'e' };\nstatic const symbol s_11_261[8] = { 'v', 'i', 'i', 'k', 's', 'i', 'm', 'e' };\nstatic const symbol s_11_265[7] = { 'v', 'i', 'i', 'm', 'a', 't', 'a' };", "partial_line": "static const symbol s_11_271[5] = { '", "completion": "static const symbol s_11_271[5] = { 'v', 'i', 'i', 't', 'e' }; <|endoftext|>"}
{"context": "{\n\t\tdlist_delete(&gconf->nondef_link);\n\t\tconfigdir = make_absolute_path(getenv(\"PGDATA\"));\n\t{\n\t\t\t\t\t\t   strlen(configdir) + strlen(CONFIG_FILENAME) + 2);", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\tATPostAlterTypeParse(oldId, relid, confrelid,\n\t\t\tdef_item, tab->changedIndexDefs)\n\t\tOid\t\t\trelid;\n\t\t\t\t\t\t\t (char *) lfirst(def_item),\n\t\t\t\t\t\t\t wqueue, lockmode, tab->rewrite);", "partial_line": "wqueue, lockmode", "completion": "wqueue, lockmode, tab->rewrite); <|endoftext|>"}
{"context": "\tif (conn->cmd_queue_head == NULL)\n\t\tlibpq_append_conn_error(conn, \"%s not allowed in pipeline mode\", \"PQfn\");\n\t\tpgHavePendingResult(conn))\n\t\t(conn->asyncStatus == PGASYNC_IDLE ||\n\t\t conn->asyncStatus == PGASYNC_PIPELINE_IDLE) &&", "partial_line": "case PG", "completion": "case PGASYNC_BUSY: <|endoftext|>"}
{"context": "\t\t\tif (last < posb)\n\t\t\tfor (int i = 0; i < prs->curwords; i++)\n\t\t\t\t\t*nextpos = posb + 1;\n\t\tpos = posb + 1;\n}", "partial_line": "if (prs->wo", "completion": "if (prs->words[i].item) <|endoftext|>"}
{"context": "\t\t}\n\t\tcase 1:\n\t\t\tset_var_from_var(base, result);\n\t\t\tround_var(result, rscale);\n\t\tcase 2:", "partial_line": "if (base->n", "completion": "if (base->ndigits == 0) <|endoftext|>"}
{"context": "\tint\t\t\tnfields = result->numAttributes;\n\t{\n\tif (tupnfields != nfields)\n\t}\n\t\trowbuf = (PGdataValue *) realloc(rowbuf,", "partial_line": "errm", "completion": "errmsg = NULL; <|endoftext|>"}
{"context": "\t\t    }\n\tint tcur;\n    char *buf;\t\t\n\tcase '\\t':\n    return (count_spaces_until(cur, buffer, NULL));", "partial_line": "\\", "completion": "\\n\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   nappinfos, appinfos);\n\t\t\t\tchild_scanjoin_targets = lappend(child_scanjoin_targets,\n\t\t\tpfree(appinfos);\n\tset_cheapest(rel);\n\t\t\t\t\t\t\t\t\tRelOptInfo *input_rel,", "partial_line": "RelOptInfo *parti", "completion": "RelOptInfo *partially_grouped_rel, <|endoftext|>"}
{"context": "static char *\n\t\treturn NULL;\n\t\tif (size < sizeof \"0\")\n\t\t\tgoto emsgsize;\n\t\t\t*dst++ = '.';", "partial_line": "b = bits", "completion": "b = bits % 8; <|endoftext|>"}
{"context": "\t\t\theap_page_prune_opt(hscan->xs_base.rel, hscan->xs_cbuf);\n\t}\n\t}\n}\n{", "partial_line": "bsl", "completion": "bslot->buffer); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\"sslmode\", conn->sslmode);\n\t\t\tlibpq_append_conn_error(conn, \"%s value \\\"%s\\\" invalid when SSL support is not compiled in\",\n\t\t}\n\t}\n\telse", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tif (targrows < thisdata->vacattrstats[i]->minrows)\n\trows = (HeapTuple *) palloc(targrows * sizeof(HeapTuple));\n\t\t\t\t\t\t\t\t\t\t\t\t&totalrows, &totaldeadrows);\n\t\t{", "partial_line": "if (ao", "completion": "if (aopt != NULL) <|endoftext|>"}
{"context": "\t{NULL, 0, false}\nextern const struct config_enum_entry wal_level_options[];\nbool\t\tDebug_print_rewritten = false;\nbool\t\tDebug_pretty_print = true;\nbool\t\tDebug_copy_parse_plan_trees;", "partial_line": "bool\t\tlog_btree_bu", "completion": "bool\t\tlog_btree_build_stats = false; <|endoftext|>"}
{"context": "\t\treturn;\n\tapply_error_callback_arg.rel = rel;\n\tcheck_relation_updatable(rel);\n\tremoteslot = ExecInitExtraTupleSlot(estate,\n\tMemoryContextSwitchTo(oldctx);", "partial_line": "apply_error_ca", "completion": "apply_error_callback_arg.rel = NULL; <|endoftext|>"}
{"context": "\ttermPQExpBuffer(&cmd);\nbuildShSecLabels(PGconn *conn, const char *catalog_name, Oid objectId,\n{\nstatic void\n}", "partial_line": "else if", "completion": "else if (pg_strcasecmp(format, \"d\") == 0) <|endoftext|>"}
{"context": "\t\t\t\tecontext->ecxt_outertuple = outerTupleSlot;\n\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t  &hashtable->outerBatchFile[batchno],\n\t\t\t\t\t\theap_free_minimal_tuple(mintuple);\n\t\t\t\t\tif (!ExecScanHashBucket(node, econtext))", "partial_line": "node->hj_MatchedOute", "completion": "node->hj_MatchedOuter = true; <|endoftext|>"}
{"context": "\t\treturn NULL;\n\tstate->conn = conn;\n\t\treturn NULL;\n\t\t{\n\t}", "partial_line": "ret", "completion": "return state; <|endoftext|>"}
{"context": "    return 1;\n    return z->I[0] <= z->c;\n    among_var = find_among_b(z, a_2, 11);\n            }\n            }", "partial_line": "if (", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\trte->self_reference = !IsA(cte->ctequery, Query);\n\tif (!rte->self_reference)\n\t\t\tctequery->returningList == NIL)\n\trte->colcollations = list_copy(cte->ctecolcollations);\n\t\teref = makeAlias(refname, NIL);", "partial_line": "varattn", "completion": "varattno++; <|endoftext|>"}
{"context": "\t\tif (indexScan != NULL)\n\t\t\t\tbreak;\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\t heapScan->rs_nblocks);\n\t\t\t\t\t\t\t\t\t\t\t (heapScan->rs_cblock +", "partial_line": "prev_cblock = hea", "completion": "prev_cblock = heapScan->rs_cblock; <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"catalog/pg_opclass.h\"\n\tOpFamilyOpFuncGroup *opclassgroup;", "partial_line": "erepor", "completion": "ereport(INFO, <|endoftext|>"}
{"context": "\t\t\t\t   typeName,\t\n\t\t\t\t   typmodoutOid,\t\n\t\t\t\t   subscriptOid,\t\n\t\t\t\t   byValue,\t\t\n\t\t\t\t   0,\t\t\t", "partial_line": "col", "completion": "collation); <|endoftext|>"}
{"context": "\tnumRels = bms_num_members(relids);\n\ti = 0;\n\t\t\t\tRelids\t\tgroup = NULL;\n\t\t\t\t{\n\t\t\t\t}", "partial_line": "group = bms_del_members(grou", "completion": "group = bms_del_members(group, removed); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"could not format inet value: %m\")));\n\tinet\t   *ip = PG_GETARG_INET_PP(0);\n\tchar\t   *dst;\n\t\t\t\t\t\t   ip_bits(ip), tmp, sizeof(tmp));\n\tif (dst == NULL)", "partial_line": "errmsg(\"", "completion": "errmsg(\"could not format inet value: %m\"))); <|endoftext|>"}
{"context": "\t\tdlist_push_tail(&proc->myProcLocks[partition],\n\tlock->nRequested++;\n\t\t\t lock->tag.locktag_field1, lock->tag.locktag_field2,\n\t\tuint32\t\tfasthashcode = FastPathStrongLockHashPartition(hashcode);\n\tTwoPhaseLockRecord *rec = (TwoPhaseLockRecord *) recdata;", "partial_line": "LOCKTAG    *lo", "completion": "LOCKTAG    *locktag; <|endoftext|>"}
{"context": "\t}\n\tif (total_months > INT_MAX || total_months < INT_MIN)\n\t\t\t\t\t\t\t&span->time))\nint\n\tint64\t\ttotal_months = (int64) itm_in->tm_year * MONTHS_PER_YEAR + itm_in->tm_mon;", "partial_line": "tm->", "completion": "tm->tm_mon = t0->tm_mon; <|endoftext|>"}
{"context": "#include \"access/ginxlog.h\"\n#include \"utils/acl.h\"", "partial_line": "( (Size) BLCKSZ - MAXALIGN(SizeOfPageHeaderD", "completion": "( (Size) BLCKSZ - MAXALIGN(SizeOfPageHeaderData) - MAXALIGN(sizeof(GinPageOpaqueData)) ) <|endoftext|>"}
{"context": "\tif (kill(pid, sig) != 0)\n\t\tif (unlink(logrotate_file) != 0)\n\t\t\twrite_stderr(_(\"%s: could not remove log rotation signal file \\\"%s\\\": %m\\n\"),\n}\n\tpid_t\t\tpid;", "partial_line": "pid", "completion": "pid = get_pgpid(true); <|endoftext|>"}
{"context": "\t\tcase RECOVERY_PAUSED:\n\t\t\tbreak;\nDatum\n\txtime = GetLatestXTime();\npg_wal_lsn_diff(PG_FUNCTION_ARGS)", "partial_line": "PG_RETU", "completion": "PG_RETURN_DATUM(result); <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\ttag = CMDTAG_CREATE_TRANSFORM;\n\t\tcase T_CreateEventTrigStmt:\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "tag = CMD", "completion": "tag = CMDTAG_ALTER_ROLE; <|endoftext|>"}
{"context": "psql_add_command(StringInfo buf, const char *query,...)\n\t\tneeded = appendStringInfoVA(&cmdbuf, query, args);\n\t\tappendStringInfoChar(buf, *cmdptr);\n\tpfree(cmdbuf.data);\nstatic void", "partial_line": "bail(\"comma", "completion": "bail(\"command failed: %s\", buf->data); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t{\n\t\t\t\tScanKeyData skey[1];\n\t\t\t\ttrigDesc = table_open(TriggerRelationId, AccessShareLock);\n\t\t\t\tgetRelationDescription(&rel, trig->tgrelid, false);", "partial_line": "NameStr(t", "completion": "NameStr(trig->tgname), rel.data); <|endoftext|>"}
{"context": "\ttupTypmod = HeapTupleHeaderGetTypMod(td);\n\t\tif (att->attisdropped)\n\t\tval = heap_getattr(tuple, i + 1, tupdesc, &isnull);\n\t\t\toutfuncoid = InvalidOid;\n\t\t}", "partial_line": "StringInf", "completion": "StringInfo\tresult; <|endoftext|>"}
{"context": "\tdlist_init(&segments);\n\t\t\tmemcpy(tuple->data, DatumGetPointer(key), keylen);\n\t\tpfree(seginfo->seg);\nstatic Datum\n_gin_parse_tuple_key(GinTuple *a)", "partial_line": "return (Da", "completion": "return (Datum) 0; <|endoftext|>"}
{"context": "\tif (dpartitions > HASHAGG_MAX_PARTITIONS)\n\t\t\t\t\t  TupleHashEntry entry)\n\t\tAggStatePerGroup pergroupstate = &pergroup[transno];\n\t\tAggStatePerHash perhash = &aggstate->perhash[setno];\n\t\t\tif (isnew)", "partial_line": "ExprCon", "completion": "ExprContext *tmpcontext; <|endoftext|>"}
{"context": "\t\thptr = start_ptr + needle_len - 1;\n\treturn state->last_match;\n\tstate->refpoint = state->str1;\n}\n\t\t\treturn 0;", "partial_line": "result = memc", "completion": "result = memcmp(arg1, arg2, Min(len1, len2)); <|endoftext|>"}
{"context": "{ 5, s_2_1989, -1, 61, 0},\n{ 4, s_2_1995, -1, 67, 0},\n{ 3, s_2_2002, -1, 104, 0},\nstatic const symbol s_3_6[2] = { 'o', 'g' };\nstatic const symbol s_3_15[4] = { 'e', 'n', 'o', 'j' };", "partial_line": "static const symbol s_3_16[4] = {", "completion": "static const symbol s_3_16[4] = { 'a', 'n', 'i', 'm' }; <|endoftext|>"}
{"context": "\t\t\t\tappendPQExpBufferStr(curbuf, \"^(\");\n\t\t\ti = PQmblenBounded(cp, encoding);\n\t\t\t\tappendPQExpBufferChar(curbuf, *cp++);\n\t}\n\tif (schemabuf && curbuf >= buf)", "partial_line": "appendPQExpBufferStr(schema", "completion": "appendPQExpBufferStr(schemabuf, curbuf->data); <|endoftext|>"}
{"context": "\t\t\tloc = ((const RangeVar *) expr)->location;\n\t\tcase T_Aggref:\n\t\t\tbreak;\n\t\t\tloc = exprLocation((Node *) ((const SubscriptingRef *) expr)->refexpr);\n\t\tcase T_NamedArgExpr:", "partial_line": "ca", "completion": "case T_OpExpr: <|endoftext|>"}
{"context": "\tbool\t\thadTupDescOrOpclass;\n\thadTupDescOrOpclass = (typentry->tupDesc != NULL) ||\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   HASH_FIND, NULL);\n\t\t\t}", "partial_line": "typentry = typentry->n", "completion": "typentry = typentry->nextDomain) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tif (haveNull)\n\t\t\t\t\t\t\t\t\t\t\t\t  makeBoolConst(false, true));\n\t\t\t\t\t\t\treturn negate_clause(arg);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\telog(ERROR, \"unrecognized boolop: %d\",", "partial_line": "Node\t   *formatted_expr = (Node *) jve", "completion": "Node\t   *formatted_expr = (Node *) jve->formatted_expr; <|endoftext|>"}
{"context": "\t\ttablespaceOid = MyDatabaseTableSpace;\n\t\tPG_RETURN_TEXT_P(cstring_to_text(\"\"));\n{\n\t\telse if (delay > 0.0)\n\t\t(void) WaitLatch(MyLatch,", "partial_line": "de", "completion": "delay_ms, <|endoftext|>"}
{"context": "\t\t}\n\t\tif (GetExitCodeThread((HANDLE) bgchild_handle, &status) == 0)\n\t\t\t\t(void) sync_dir_recurse(basedir, sync_method);\n\t{\n\t\tif (verbose)", "partial_line": "if (rename(tmp_filen", "completion": "if (rename(tmp_filename, filename) != 0) <|endoftext|>"}
{"context": "\treturn expr;\n\t\t\t\t\t  const Oid *eqOperators,\n\t\t\t\t\t  FmgrInfo **hashFunctions)\n\tint\t\t\ti;\n\t\t\t\t\tint numCols,", "partial_line": "bool", "completion": "bool\t\tallow_jit; <|endoftext|>"}
{"context": "\t\t\tExecEndSort((SortState *) node);\n\t\tcase T_IncrementalSortState:\n\t\t\tbreak;\n\t\t\tExecEndAgg((AggState *) node);\n\t\tcase T_HashState:", "partial_line": "case T_Values", "completion": "case T_ValuesScanState: <|endoftext|>"}
{"context": "\tif (vmbuffer != InvalidBuffer)\n\t}\n\t\t\t\t\t\t GetCurrentCommandId(true), InvalidSnapshot,\n\t\t\telog(ERROR, \"tuple already updated by self\");\n\t\t\tbreak;", "partial_line": "Pa", "completion": "Page\t\tpage; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\tfor (block_id = 0; block_id <= XLogRecMaxBlockId(record); block_id++)", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\tGetCurrentDateTime(tmp);\n\t\t\tif ((fmask & DTK_DATE_M) != DTK_DATE_M)\n\t\t\tGetCurrentDateTime(tmp);\n\t\t\ttmp->tm_mon = tm->tm_mon;\n\tint\t\t\ttype,", "partial_line": "return DTERR", "completion": "return DTERR_BAD_FORMAT; <|endoftext|>"}
{"context": "\tif (TransactionIdToPgIndex(xid) != 0)\n\t\tMemSet(byteptr + 1, 0, BLCKSZ - byteno - 1);\n\tTRACE_POSTGRESQL_CLOG_CHECKPOINT_DONE(true);\n\txid2 = ((TransactionId) page2) * CLOG_XACTS_PER_PAGE;\n\treturn (TransactionIdPrecedes(xid1, xid2) &&", "partial_line": "XLogFlush(", "completion": "XLogFlush(recptr); <|endoftext|>"}
{"context": "\t\t}\n\telse\n\t\tconst char *needle_last = &needle[needle_len - 1];\n\t\thptr = start_ptr + needle_len - 1;\n\treturn state->last_match;", "partial_line": "state->refpoint =", "completion": "state->refpoint = state->str1; <|endoftext|>"}
{"context": "{ 5, s_2_1006, 997, 105, 0},\n{ 4, s_2_1007, 997, 113, 0},\n{ 5, s_2_1013, 997, 98, 0},\n{ 5, s_2_1015, 997, 99, 0},\n{ 4, s_2_1030, -1, 13, 0},", "partial_line": "{ 5, s_2_1039, 1034", "completion": "{ 5, s_2_1039, 1034, 96, 0}, <|endoftext|>"}
{"context": "\tSize\t\tsize;\n\treturn result;\nIndexTuple\n\tIndexTuple\ttruncated;\n\tif (leavenatts == sourceDescriptor->natts)", "partial_line": "return", "completion": "return CopyIndexTuple(source); <|endoftext|>"}
{"context": "\t\tcase T_SampleScan:\n\t\t\t\t\t\t\t\t\t\t\t\t  scan_clauses,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttlist,\n\t\t\tplan = (Plan *) create_tidscan_plan(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t scan_clauses);", "partial_line": "case T_Val", "completion": "case T_ValuesScan: <|endoftext|>"}
{"context": "\tlo_close(conn, lobj_fd);\nstatic void\n\tint\t\t\tlobj_fd;\n\tlobj_fd = lo_open(conn, lobjId, INV_READ);\n\t\tfprintf(stderr, \">>> %s\", buf);", "partial_line": "nread +=", "completion": "nread += nbytes; <|endoftext|>"}
{"context": "\t\t\t Matches(\"CREATE\", \"OR\", \"REPLACE\", \"RULE\", MatchAny, \"AS\", \"ON\"))\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_tables);\n\t\tCOMPLETE_WITH_CS(\"smallint\", \"integer\", \"bigint\");\n\t\tCOMPLETE_WITH(\"(\", \"ON\");\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny))", "partial_line": "else if (TailMatches(\"CREATE\", \"TABLE\",", "completion": "else if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"OF\") || <|endoftext|>"}
{"context": "\tcontext.colNamesVisible = colNamesVisible;\n\tset_deparse_for_query(&dpns, query, parentnamespace);\n\t\tcase CMD_UPDATE:\n\t\t\tget_update_query_def(query, &context);\n\t\t\tbreak;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t}\n\tfor (wentry = dropmsgstringarray; wentry->kind != '\\0'; wentry++)\n\tereport(ERROR,\n\t\t\t errmsg(rentry->nota_msg, relname),\n\t}", "partial_line": "relkind = RELK", "completion": "relkind = RELKIND_INDEX; <|endoftext|>"}
{"context": "\tMemoryContext context;\t\t\n\tint\t\t\tread_ntuples_available; \n\tBufFile    *write_file;\t\t\n}\n\tSharedTuplestoreAccessor *accessor;", "partial_line": "sts->me", "completion": "sts->meta_data_size = meta_data_size; <|endoftext|>"}
{"context": "{\n\t{\n\t\t\tint\t\t\tj;\n#ifdef SHA2_UNROLL_TRANSFORM\n\t(d) += T1;\t\t\t\t\t\t\t\t\\", "partial_line": "uint64", "completion": "uint64\t\tT1, <|endoftext|>"}
{"context": "\t\tif (xldata->newPage)\n\t\t}\n\t\tif (XLogReadBufferForRedo(record, 0, &buffer) == BLK_NEEDS_REDO)\n\t\t\tSpGistDeadTuple dt;\n\t\t\t\t\t\t\t\t\t  InvalidOffsetNumber);", "partial_line": "if (s", "completion": "if (state.isBuild) <|endoftext|>"}
{"context": "\t\t\treturn false;\n#define JUMBLE_ELEMENTS(list) \\\ndo { \\\n\t\tAppendJumble8(jstate, (const unsigned char *) &(expr->item)); \\\n\t\tAppendJumble(jstate, (const unsigned char *) &(expr->item), sizeof(expr->item)); \\", "partial_line": "}", "completion": "} while(0) <|endoftext|>"}
{"context": "\tScanKeyInit(&key[0],\n\t{\n\t\tchar\t\trelkind;\n\t\tif (relkind == RELKIND_RELATION)\n\t\t\tresult = lappend_oid(result, relid);", "partial_line": "table_", "completion": "table_endscan(scan); <|endoftext|>"}
{"context": "\tnode->sort.sortOperators = sortOperators;\nprepare_sort_from_pathkeys(Plan *lefttree, List *pathkeys,\n\t\t\t\t\t\t   bool adjust_tlist_in_place,\n\t\t\t\t\t\t   bool **p_nullsFirst)\n\tforeach(i, pathkeys)", "partial_line": "Oi", "completion": "Oid\t\t\tsortop; <|endoftext|>"}
{"context": "\t\tPGresult   *result;\n\t\tprintfPQExpBuffer(&buf,\n\t\t\tappendPQExpBufferStr(&buf,\n\t\tappendPQExpBuffer(&buf,\n\t\t\t\t\t\t  \" ON c.oid = inhrelid\"", "partial_line": "\"\\nWHERE c.oid", "completion": "\"\\nWHERE c.oid = '%s';\", oid); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  sbsrefstate->replacenull,\n\t\t\t\t\t\t\t\t\t  workspace->refelemlength,\n\tDatum\t\tarraySource = *op->resvalue;\n\t}\n\t\t\t\t\t\t\t\t\tsbsrefstate->upperprovided,", "partial_line": "workspace->ref", "completion": "workspace->refelembyval, <|endoftext|>"}
{"context": "\tSysScanDesc scan;\n\tslot = palloc(sizeof(TupleTableSlot *) * max_slots);\n\twhile (HeapTupleIsValid(tup = systable_getnext(scan)))\n\t\tslot[slot_stored_count]->tts_values[Anum_pg_shdepend_dbid - 1] = ObjectIdGetDatum(newDbId);\n\t\tslot[slot_stored_count]->tts_values[Anum_pg_shdepend_classid - 1] = shdep->classid;", "partial_line": "BTEqualStrat", "completion": "BTEqualStrategyNumber, F_OIDEQ, <|endoftext|>"}
{"context": "void\n\t\tPGPROC\t   *proc = &allProcs[pgprocno];\n\tif (nprepared > 0)\n\t\t\t\t\t\t\t\t  \"There are %d prepared transactions using the database.\",\n\t\t\t\t\t\t\t\t  nprepared)));", "partial_line": "foreac", "completion": "foreach(lc, pids) <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t\t\"private key file \\\"%s\\\" has group or world access; file must have permissions u=rw (0600) or less if owned by the current user, or permissions u=rw,g=r (0640) or less if owned by root\",\n\t\t\tif (SSL_use_PrivateKey_file(conn->ssl, fnbuf, SSL_FILETYPE_ASN1) != 1)\n\t\t\t\treturn -1;\n\tif (have_cert &&", "partial_line": "char\t   *err", "completion": "char\t   *err = SSLerrmessage(ERR_get_error()); <|endoftext|>"}
{"context": "\tRelation\tpg_rewrite_desc;\n\t\t\t\t\t\t\t\t  ObjectIdGetDatum(relid),\n\t\t\t\t errmsg(\"rule \\\"%s\\\" for relation \\\"%s\\\" does not exist\",\n\tif (IsDefinedRewriteRule(relid, newName))\n\t\t\t\t\t\tnewName, RelationGetRelationName(targetrel))));", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tif (hash_search(hash, &ent, HASH_FIND, NULL))\n\t\t\t\tsnprintf(rm_path, sizeof(rm_path), \"%s/%s\",\n\t\t\tForkNumber\tforkNum;\n\t\t\tRelFileNumber relNumber;\n\t\t\telse", "partial_line": "elog(DEBUG2, \"copyin", "completion": "elog(DEBUG2, \"copying %s to %s\", srcpath, dstpath); <|endoftext|>"}
{"context": "static XLogRecPtr\n\telse\n\t\treturn Min(a, b);\n\t\thistory->begin = history->end = InvalidXLogRecPtr;\n\telse", "partial_line": "TLHistoryFi", "completion": "TLHistoryFilePath(path, tli); <|endoftext|>"}
{"context": "\t\t\t\tslab->curBlocklistIndex = SlabFindNextBlockListIndex(slab);\n\tSlabBlock  *block;\n\t\telog(WARNING, \"detected write past chunk end in %s %p\",\n\t*(MemoryChunk **) pointer = block->freehead;\n#endif", "partial_line": "newBlocklis", "completion": "newBlocklistIdx = SlabBlocklistIndex(slab, block->nfree); <|endoftext|>"}
{"context": "static const symbol s_52_18[6] = { 0xCE, 0xB1, 0xCE, 0xB3, 0xCE, 0xBA };\n{ 16, s_52_6, -1, 1, 0},\n{ 4, s_52_22, 21, 1, 0},\n};\nstatic const symbol s_54_4[4] = { 0xCF, 0x83, 0xCF, 0x86 };", "partial_line": "static", "completion": "static const struct among a_54[12] = <|endoftext|>"}
{"context": "\tchar\t   *funcsig;\t\t\n\tchar\t   *qual_funcsig;\n\tchar\t   *funciargs;\n\tchar\t   *protrftypes;\n\tchar\t   *prokind;", "partial_line": "delqry = cr", "completion": "delqry = createPQExpBuffer(); <|endoftext|>"}
{"context": "\tresult->errQuery = NULL;\n\t\t{\n\t\t\tcase PGRES_TUPLES_CHUNK:\n\t\t\t\tbreak;\n\t\t\t\tbreak;", "partial_line": "&res", "completion": "&result->memorySize); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\tif (padding != 0)\n\t\t\t\t\t\tappendStringInfoString(buf, strfbuf);\n\t\t\tcase 's':\n\t\t\t\t\tif (padding != 0)", "partial_line": "padding >", "completion": "padding > 0 ? padding : -padding); <|endoftext|>"}
{"context": "void\nPgAioTargetData *\npgaio_io_get_target_description(PgAioHandle *ioh)\n{\n{", "partial_line": "pgaio_io_reopen(PgA", "completion": "pgaio_io_reopen(PgAioHandle *ioh) <|endoftext|>"}
{"context": "{ 6, s_0_65, -1, -1, 0},\n{ 12, s_0_66, 65, -1, 0},\n{ 12, s_0_81, 80, -1, 0},\n{ 6, s_0_83, 74, -1, r_CONSONANT},\n{ 9, s_0_102, 100, -1, 0},", "partial_line": "{ 9, s_0_109,", "completion": "{ 9, s_0_109, 108, -1, 0}, <|endoftext|>"}
{"context": "\t\tpg_fatal(\"Unexpected result code %s instead of sync result, error: %s\",\n\t\t\t\t PQerrorMessage(conn));\n\t\t\t\t PQresStatus(PQresultStatus(res)));\n\tres = PQgetResult(conn);\n\tif (PQresultStatus(res) != PGRES_TUPLES_OK)", "partial_line": "if (PQsendFlushReque", "completion": "if (PQsendFlushRequest(conn) != 1) <|endoftext|>"}
{"context": "\ttm->tm_mon = t0->tm_mon;\n\tstruct pg_tm tt,\n\t\t\t   *tm = &tt;\n\treturn dt;\ntimestamp_cmp_internal(Timestamp dt1, Timestamp dt2)", "partial_line": "return (dt1 < dt2)", "completion": "return (dt1 < dt2) ? -1 : ((dt1 > dt2) ? 1 : 0); <|endoftext|>"}
{"context": "\t\t\t\t\t\tApplyLauncherShmemSize(),\n\tif (!found)\n\t\tint\t\t\tslot;\n\t\tLogicalRepCtx->last_start_dsh = DSHASH_HANDLE_INVALID;\n\t}", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "        z->c--;\n        z->c = z->l - m1;\n            return 0;\n        lab2:\n        if (z->c <= z->lb || z->p[z->c - 1] != 'y') goto lab1;", "partial_line": "z-", "completion": "z->c--; <|endoftext|>"}
{"context": "}\n{\n\t\tif (showtype >= 0)\n\t\t\tappendStringInfo(buf, \"::%s\",\n\t\tcase INT4OID:", "partial_line": "appendStrin", "completion": "appendStringInfo(buf, \"'%s'\", extval); <|endoftext|>"}
{"context": "\t\t\t\t\tres = pred->item_type == JS_TYPE_ARRAY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\telse if (exprtype == JSONBOID)\nint", "partial_line": "em", "completion": "empty = false; <|endoftext|>"}
{"context": "\t{\n\t\tint\t\t\tlen = strlen(c);\n\t\tAH->WriteBufPtr(AH, c, len);\nchar *\n\tif (l < 0)", "partial_line": "AH->Read", "completion": "AH->ReadBufPtr(AH, buf, l); <|endoftext|>"}
{"context": "{ 7, s_0_81, -1, 3, 0},\n{ 2, s_0_97, -1, 1, 0},\n{ 6, s_0_103, 99, 5, 0},\nstatic const symbol s_1_22[3] = { 't', 'e', 'a' };\nstatic const symbol s_1_26[5] = { 'e', 't', 'x', 'e', 'a' };", "partial_line": "static const symbol s_1_31", "completion": "static const symbol s_1_31[6] = { 't', 'a', 'l', 'd', 'i', 'a' }; <|endoftext|>"}
{"context": "\t\t\t}\nsync_dir_recurse(const char *dir, DataDirSyncMethod sync_method)\n\t\tcase DATA_DIR_SYNC_METHOD_SYNCFS:\n#endif\t\t\t\t\t\t\t\n\t\t\tbreak;", "partial_line": "#ifdef PG_FLUSH", "completion": "#ifdef PG_FLUSH_DATA_WORKS <|endoftext|>"}
{"context": "\t\t}\n\t}\n\t{\n\t\t(result->ndigits)--;\n\terr = 0;\t\t\t\t\t", "partial_line": "for (int i = 1; i <", "completion": "for (int i = 1; i < 10; i++) <|endoftext|>"}
{"context": "\tEND_CRIT_SECTION();\n\tif (LogwrtResult.Flush < record)\nbool\n\tif (WriteRqst.Write <= LogwrtResult.Flush)\n\t\tif (openLogFile >= 0)", "partial_line": "XLogFi", "completion": "XLogFileClose(); <|endoftext|>"}
{"context": "\t{\n\t}\n\t\treturn sysatt->attnum;\n\t\tsysatt = SystemAttributeDefinition(attid);\n\t\telog(ERROR, \"invalid attribute number %d\", attid);", "partial_line": "if", "completion": "if (attid <= 0) <|endoftext|>"}
{"context": "\t\t\t\tfloat_overflow_error();\n\t\t\tSxx = get_float8_nan();\n\t\t}\n\t\ttransvalues[0] = N;\n\t\tArrayType  *result;", "partial_line": "transdatums[2] = Float8GetDa", "completion": "transdatums[2] = Float8GetDatumFast(Sxx); <|endoftext|>"}
{"context": "typedef struct f_smgr\n\t\t\t\t\t\t\t\tbool isRedo);\n} f_smgr;\n\t\t.smgr_extend = mdextend,\n};", "partial_line": "static HTAB *SMgrRelat", "completion": "static HTAB *SMgrRelationHash = NULL; <|endoftext|>"}
{"context": "\t\tmerged_bounds = build_merged_partition_bounds(outer_bi->strategy,\n\tlist_free(merged_kinds);\n\tfree_partition_map(&outer_map);\ninit_partition_map(RelOptInfo *rel, PartitionMap *map)\n\tfor (i = 0; i < nparts; i++)", "partial_line": "free_partition", "completion": "free_partition_map(PartitionMap *map) <|endoftext|>"}
{"context": "\tif ((fctx->step.sign == NUMERIC_POS &&\n\t\t cmp_var(&fctx->current, &fctx->stop) >= 0))\nDatum\n{\n\tif (IsA(rawreq, SupportRequestRows))", "partial_line": "if (is_funcclause", "completion": "if (is_funcclause(req->node)) <|endoftext|>"}
{"context": "\tmy_extra = (ColumnsHashData *) fcinfo->flinfo->fn_extra;\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\tfor (j = 0; j < key->partnatts; ++j)\n\t\t\t\t\t\t\t   &key->partsupfunc[j],\n\t\t\tfcinfo->flinfo->fn_extra =", "partial_line": "j +", "completion": "j + 1, <|endoftext|>"}
{"context": "\t\tfor (i = 0; i < nInsert; i++)\n\t\tMarkBufferDirty(buffer);\n\t\t\t\t\t\t\t\tstate.isBuild ? SPGIST_PLACEHOLDER : SPGIST_REDIRECT,\nstatic void\n\tXLogRecPtr\tlsn = record->EndRecPtr;", "partial_line": "xldata->of", "completion": "xldata->offnum, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tRelationGetRelationName(relation)),\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\tif (relation != NULL)", "partial_line": "SysScanDes", "completion": "SysScanDesc scan; <|endoftext|>"}
{"context": "\t\t\t\t !selected_mechanism)\n\tif (!selected_mechanism)\n\t}\n\t\tbool\t\tallowed = false;\n\t\tfor (int i = 0; i < lengthof(conn->allowed_sasl_mechs); i++)", "partial_line": "allowed =", "completion": "allowed = true; <|endoftext|>"}
{"context": "\t\t\t\tHeapTuple func_tuple,\n\tchar\t   *src;\n\tTupleDesc\trettupdesc;\n\tint\t\t   *usecounts;\n\t\tfuncform->proretset ||", "partial_line": "oldcxt = MemoryContext", "completion": "oldcxt = MemoryContextSwitchTo(mycxt); <|endoftext|>"}
{"context": "\tdata.cfg_id = PG_GETARG_OID(0);\n{\nDatum\n{\n\ttext\t   *in = PG_GETARG_TEXT_PP(0);", "partial_line": "PG_RETURN_DATUM(Direct", "completion": "PG_RETURN_DATUM(DirectFunctionCall2(plainto_tsquery_byid, <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\tbreak;\n\t\t\tbreak;\n\telse\n\tlclContext *ctx = (lclContext *) AH->formatData;", "partial_line": "used = av", "completion": "used = avail; <|endoftext|>"}
{"context": "\tDCH_AM,\n\tDCH_BC,\n\tDCH_US,\n\tDCH_Y_YYY,\n\tDCH_Y,", "partial_line": "D", "completion": "DCH_ad, <|endoftext|>"}
{"context": "_gin_parallel_scan_and_build(GinBuildState *state,\n\t\t\t\t\t\t\t Relation heap, Relation index,\n\tdouble\t\treltuples;\n\tstate->bs_worker_sort = tuplesort_begin_index_gin(heap, index,\n{", "partial_line": "LOCKMODE\tindexLo", "completion": "LOCKMODE\tindexLockmode; <|endoftext|>"}
{"context": "\t\ttermPQExpBuffer(&word_buf);\n\tmy_command->type = META_COMMAND;\n\t\tyyscan_t\tyyscanner;\n\t\t{\n\t\tyyscanner = expr_scanner_init(sstate, source, lineno, start_offset,", "partial_line": "if", "completion": "if (j >= MAX_ARGS) <|endoftext|>"}
{"context": "{\n\trel = table_open(TypeRelationId, RowExclusiveLock);\n\tif ((contup = systable_getnext(conscan)) != NULL)\n\t{\n\ttable_close(conrel, RowExclusiveLock);", "partial_line": "if (!m", "completion": "if (!missing_ok) <|endoftext|>"}
{"context": "{ 2, s_5_3, -1, -1, 0},\nstatic const symbol s_6_3[3] = { 's', 's', 'a' };\nstatic const symbol s_6_6[3] = { 's', 't', 'a' };\nstatic const symbol s_6_15[3] = { 'h', 'e', 'n' };\nstatic const symbol s_6_19[3] = { 'h', 'o', 'n' };", "partial_line": "static const symbol s_6_21[4", "completion": "static const symbol s_6_21[4] = { 'h', 0xC3, 0xB6, 'n' }; <|endoftext|>"}
{"context": "\t\t\t\t\tfield;\n\t\t\tfor (field = 0; field < src->numAttributes; field++)\n\t\t\t{\n\t{\n\t\t{", "partial_line": "re", "completion": "return NULL; <|endoftext|>"}
{"context": "_bt_scanbehind_checkkeys(IndexScanDesc scan, ScanDirection dir,\n{\n\tif (_bt_tuple_before_array_skeys(scan, dir, finaltup, tupdesc,\n\treturn _bt_oppodir_checkkeys(scan, dir, finaltup);\n}", "partial_line": "_bt_set_startikey(IndexScanDesc scan, BTRea", "completion": "_bt_set_startikey(IndexScanDesc scan, BTReadPageState *pstate) <|endoftext|>"}
{"context": "\t\t\t\t\t\t  \"max_wal_senders\", cur_walsenders + num_dbs);\n\t}\n\t{\n\t\tpg_log_error(\"target server must be a standby\");\n\t\t\t\t \"SELECT setting FROM pg_catalog.pg_settings WHERE name IN (\"", "partial_line": "\"'pr", "completion": "\"'primary_slot_name') \" <|endoftext|>"}
{"context": "\t\t}\n\t\tGinBufferStoreTuple(buffer, tup);\n\t\tntup = _gin_build_tuple(buffer->attnum, buffer->category,\n}\n_gin_parallel_scan_and_build(GinBuildState *state,", "partial_line": "Relation", "completion": "Relation heap, Relation index, <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\topcode == EEOP_BOOLTEST_IS_NOT_FALSE)\n\t\t\t\t\telse\n\t\t\t\t\t\t\tl_load(b, TypeSizeT, v_resvaluep, \"\");\n\t\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);", "partial_line": "case EEOP_PARAM_C", "completion": "case EEOP_PARAM_CALLBACK: <|endoftext|>"}
{"context": "\t\tcase T_BumpContext:\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tHASH_ELEM | HASH_BLOBS | HASH_CONTEXT);\n\tInitMaterializedSRF(fcinfo, 0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t HASH_ENTER, &found);", "partial_line": "contex", "completion": "contexts = lappend(contexts, c); <|endoftext|>"}
{"context": "\t\t\t\t\t int encoding,\n\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t{", "partial_line": "len", "completion": "len--; <|endoftext|>"}
{"context": "\tpathnode->path.pathtype = T_TidRangeScan;\n\treturn pathnode;\n\tpathnode->path.pathtype = T_Append;\n\tpathnode->path.parallel_aware = parallel_aware;\n\t\tlist_sort(partial_subpaths, append_startup_cost_compare);", "partial_line": "if (chil", "completion": "if (child->parallel_aware == parallel_aware) <|endoftext|>"}
{"context": "\tPG_ENSURE_ERROR_CLEANUP(createdb_failure_callback,\n\t\t\t\t\t\t\t\t\t  dst_deftablespace);\n\t\t\tCreateDatabaseUsingFileCopy(src_dboid, dboid, src_deftablespace,\n\t\ttable_close(pg_database_rel, NoLock);\n\t\tForceSyncCommit();", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "#define MaxBlocktableEntrySize \\\n#define RT_DECLARE\nstruct TidStore\n\tunion\n\t\tlocal_ts_radix_tree *local;", "partial_line": "share", "completion": "shared_ts_radix_tree *shared; <|endoftext|>"}
{"context": "static void make_template0(FILE *cmdfd);\nstatic void check_ok(void);\nstatic bool check_locale_encoding(const char *locale, int user_enc);\nvoid\t\tsetup_locale_encoding(void);\nvoid\t\tinitialize_data_directory(void);", "partial_line": "#define PG_CM", "completion": "#define PG_CMD_OPEN(cmd) \\ <|endoftext|>"}
{"context": "\tAssert(AmStartupProcess() || !IsUnderPostmaster);\n}\nXLogPrefetcher *\n{\n\tprefetcher->reader = reader;", "partial_line": "ctl.keysize =", "completion": "ctl.keysize = sizeof(RelFileLocator); <|endoftext|>"}
{"context": "\t\t\t\tch1 = tolower(ch1);\n\t\t\tif (ch1 != ch2)\n{\n\telse if (IS_HIGHBIT_SET(ch) && islower(ch))\npg_tolower(unsigned char ch)", "partial_line": "ch", "completion": "ch += 'a' - 'A'; <|endoftext|>"}
{"context": "\t\t\t\t\tint\t\t\twhenstep;\n\t\t\t\t\tsave_innermost_casenull = state->innermost_casenull;\n\t\t\t\t\tExprEvalPushStep(state, &scratch);\n\t\t\t\t\tExprEvalPushStep(state, &scratch);\n\t\t\t\t}", "partial_line": "as->d.jump.jumpdone = s", "completion": "as->d.jump.jumpdone = state->steps_len; <|endoftext|>"}
{"context": "\tdestroyPQExpBuffer(query);\n\t\t\t\t\t \"READ_REPLICATION_SLOT\", PQerrorMessage(conn));\n\t\tPQclear(res);\n\t\treturn false;\n\t\tpg_log_error(\"could not read replication slot \\\"%s\\\": got %d rows and %d fields, expected %d rows and %d fields\",", "partial_line": "PQgetvalue", "completion": "PQgetvalue(res, 0, 1), slot_name); <|endoftext|>"}
{"context": "\t[PG_LATIN7] = \"LATIN7\",\n\t[PG_WIN1252] = \"CP1252\",\n\t[PG_WIN1253] = \"CP1253\",\n\t[PG_EUC_JIS_2004] = \"EUC-JP\",\n\t[PG_UHC] = \"UHC\",", "partial_line": "[PG_L", "completion": "[PG_LATIN6] = \"ISO-8859-10\", <|endoftext|>"}
{"context": "\tinputProcedure = F_DOMAIN_IN;\n\tdatum = SysCacheGetAttr(TYPEOID, typeTup,\n\t\t{\n\t\t\tcase CONSTR_DEFAULT:\n\t\t\t\t\t}", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t   sizeof(int16) * partnatts);\n\tmemcpy(part_scheme->parttypbyval, partkey->parttypbyval,\nset_baserel_partition_key_exprs(Relation relation,\n\tpartexprs = (List **) palloc(sizeof(List *) * partnatts);\n\t\tif (attno != InvalidAttrNumber)", "partial_line": "partexpr = (Expr *) make", "completion": "partexpr = (Expr *) makeVar(varno, attno, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t conn))\n\t\t\t\t{\n\t\t\t\t\tif (pqGetErrorNotice3(conn, true))\n\t\t\t\t\t{\n\t\t\t\t\tif (pqGetNegotiateProtocolVersion3(conn))", "partial_line": "msg", "completion": "msgLength -= 4; <|endoftext|>"}
{"context": "\t\t\t\t\tRestrictInfo *rinfo2 = lfirst_node(RestrictInfo, lc2);\n\t\t\t\t\t   int relid, int subst)\n\tAssert(ec->ec_childmembers == NULL);\n\t\t\t\t\t\t\t\t\t\t\t cur_em->em_relids)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t sjinfo->ojrelid, subst);", "partial_line": "ec->ec_membe", "completion": "ec->ec_members = foreach_delete_current(ec->ec_members, lc); <|endoftext|>"}
{"context": "\t\t\tif (p == NULL || strlen(p) <= 1)\n\t\t\tp = strchr(p, ':');\n\t\t\tcluster->controldata.blocksz = str2uint(p);\n\t\t{\n\t\t}", "partial_line": "got_wa", "completion": "got_walsz = true; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\telse\n\t\t\t\t\tPG_RETURN_NULL();\n\t\tMemoryContextSwitchTo(TopMemoryContext);\n#define PG_GET_PROCESS_MEMORY_CONTEXTS_COLS\t12", "partial_line": "Datum\t\tvalues[PG_GET_PROC", "completion": "Datum\t\tvalues[PG_GET_PROCESS_MEMORY_CONTEXTS_COLS]; <|endoftext|>"}
{"context": "\t{\n\t\t\ts = &per_ts_stat[num_spaces - 1];\n\t\t\ts->tsId = cur_tsid;\n\t\t}\n\tnum_processed = 0;", "partial_line": "num_wri", "completion": "num_written++; <|endoftext|>"}
{"context": "\t\treturn false;\nstatic bool\n\t\t\treturn false;\n#define JUMBLE_ELEMENTS(list) \\\ndo { \\", "partial_line": "AppendJumble", "completion": "AppendJumble8(jstate, (const unsigned char *) &(expr->item)); \\ <|endoftext|>"}
{"context": "\t{\n\t\tForm_pg_class classForm = (Form_pg_class) GETSTRUCT(tuple);\n\t\tOid\t\t\trelid = classForm->oid;\n\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  relid,", "partial_line": "MemoryCont", "completion": "MemoryContextSwitchTo(oldcontext); <|endoftext|>"}
{"context": "\t\t\t\tif (parsed_nodes != NULL)\n\t\t\t\t\t*parsed_nodes = node_list;\n\t\tPG_RE_THROW();\nstatic void\n\t\tLibxmlContext = AllocSetContextCreate(TopMemoryContext,", "partial_line": "\"Libxm", "completion": "\"Libxml context\", <|endoftext|>"}
{"context": "static const symbol s_3_12[2] = { 'i', 'z' };\n};\nstatic const symbol s_4_2[3] = { 'i', 'n', 'g' };\nstatic const symbol s_4_4[5] = { 'e', 'e', 'd', 'l', 'y' };\nstatic const symbol s_5_1[4] = { 'e', 'n', 'c', 'i' };", "partial_line": "static const symbol", "completion": "static const symbol s_5_2[3] = { 'o', 'g', 'i' }; <|endoftext|>"}
{"context": "static char *\n\treturn &copybuf[startpos];\n\t\tpg_fatal(\"empty COPY message\");\n\telse\nstatic void", "partial_line": "ReceiveTarFile(PGcon", "completion": "ReceiveTarFile(PGconn *conn, char *archive_name, char *spclocation, <|endoftext|>"}
{"context": "\t\tif (!(old_state & LW_FLAG_LOCKED))\n}\n\tproclist_head wakeup;\n\tproclist_foreach_modify(iter, &lock->waiters, lwWaitLink)\n\t{", "partial_line": "wokeup_some", "completion": "wokeup_somebody = true; <|endoftext|>"}
{"context": "\t\tif (num_replslots == 0)\n\t\t\tdbinfo[i].replslotname = pg_strdup(dbinfo[i].subname);\n\t\t\t\t\t\tdbinfo[i].replslotname);\n\t\t\tPGresult   *res;\n\tres = PQexec(conn, \"SELECT pg_catalog.pg_is_in_recovery()\");", "partial_line": "retu", "completion": "return ret == 0; <|endoftext|>"}
{"context": "\t\telog(DEBUG3, \"plperl_fini: skipped\");\n\t\treturn;\n\t}\n\t\t{\n\t\t\tactivate_interpreter(interp_desc);", "partial_line": "plperl_interp_desc", "completion": "plperl_interp_desc *interp_desc; <|endoftext|>"}
{"context": "#include <io.h>\n#include <win32.h>\n#include \"help.h\"\nenum _actions\ntypedef struct SimpleActionListCell", "partial_line": "SimpleActionL", "completion": "SimpleActionListCell *tail; <|endoftext|>"}
{"context": "\tTupleDesc\ttupdesc;\nstatic void\n\tListCell   *lc;\n\tTupleDescInitBuiltinEntry(tupdesc, (AttrNumber) 2, \"spclocation\", TEXTOID, -1, 0);\n\tforeach(lc, tablespaces)", "partial_line": "null", "completion": "nulls[1] = true; <|endoftext|>"}
{"context": "\t\t\t\t\t  fmtId(rinfo->dobj.name));\n\t\t\t\t\t ARCHIVE_OPTS(.tag = tag,\n\tif (rinfo->dobj.dump & DUMP_COMPONENT_COMMENT)\n\tdestroyPQExpBuffer(query);\n\tint\t\t\tntups,", "partial_line": "int", "completion": "int\t\t\ti_classid, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tB_DEAD_END_BACKEND,\n\t\tif (CountChildren(targetMask) == 0)\n\t\t\t\tUpdatePMState(PM_WAIT_DEAD_END);\n\t\t\t\tSignalChildren(SIGQUIT, btmask(B_DEAD_END_BACKEND));\n\t\t\t\t{", "partial_line": "HandleFatalError(PMQU", "completion": "HandleFatalError(PMQUIT_FOR_CRASH, false); <|endoftext|>"}
{"context": "\treturn true;\n{\n\tneeded += variables->nvars;\n\t\t\tpg_realloc(variables->vars, variables->max_vars * sizeof(Variable));\n\tvar = lookupVariable(variables, name);", "partial_line": "if (!valid_variabl", "completion": "if (!valid_variable_name(name)) <|endoftext|>"}
{"context": "\t\tif (strcmp(de->d_name, \".\") == 0 ||\n\t\t\t\t errmsg(\"could not remove directory \\\"%s\\\": %m\",\n\t\t\t\t\t\tlinkloc_with_version_dir)));\nremove_symlink:\n\tget_parent_directory(linkloc);", "partial_line": "errmsg(\"could not stat f", "completion": "errmsg(\"could not stat file \\\"%s\\\": %m\", <|endoftext|>"}
{"context": "\t\tRangeVar   *rel = makeRangeVarFromNameList((List *) lfirst(cell));\n\t\tstate.partParentOid = InvalidOid;\n\t\t{\n\t\t\tcontinue;\n\t\tif (drop->concurrent &&", "partial_line": "state.actu", "completion": "state.actual_relpersistence != RELPERSISTENCE_TEMP) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  .owner = tbinfo->rolname,\n\t\t\t\t\t\t\t\t\t  .deps = &(tbinfo->dobj.dumpId),\n\t\t\t\t\t\t\t  fmtId(tbinfo->dobj.name));\n\t\t\t\t\t\t\t\t\t  .owner = tbinfo->rolname,\n\t\t\t\t\t\t\t\t\t  .nDeps = 1));", "partial_line": "nc", "completion": "ncomments--; <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"unexpected node type found in partexprs: %d\",\n\tpartexpr_item = list_head(partexprs);\n\tinitStringInfo(&buf);\n\t\tcase PARTITION_STRATEGY_HASH:\n\t\t\tif (!attrsOnly)", "partial_line": "case PARTITION_STRATE", "completion": "case PARTITION_STRATEGY_RANGE: <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"DH: could not load DH parameters\")));\n\t\treturn false;\n\t\tereport(isServerStart ? FATAL : LOG,\n\t\treturn false;\n\telse", "partial_line": "const ch", "completion": "const char *errreason; <|endoftext|>"}
{"context": "\t{\n\t}\n\t\tcase PASSWORD_TYPE_MD5:\n\t\t\t{\n\t*logdetail = psprintf(_(\"Password of user \\\"%s\\\" is in unrecognized format.\"),", "partial_line": "retu", "completion": "return STATUS_ERROR; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\trawc->colname),\n\t\ttf->coltypmods = lappend_int(tf->coltypmods, typmod);\n\t\tif (rawc->colexpr)\n\t\t}", "partial_line": "typid", "completion": "typid, typmod, <|endoftext|>"}
{"context": "\t\t\t{\n\t{\n\t\t\t\t(errcode(ERRCODE_CONNECTION_FAILURE),\n\tattnamelist = make_copy_attnamelist(relmapentry);\n{", "partial_line": "RepOriginId", "completion": "RepOriginId originid; <|endoftext|>"}
{"context": "\tBuffer\t\tb = BufferDescriptorGetBuffer(buf);\n\t\tfor (;;)\n\t\t{\n\t\t\tbuf_state -= BUF_REFCOUNT_ONE;\n\t}", "partial_line": "int", "completion": "int\t\t\tnum_to_scan; <|endoftext|>"}
{"context": "\t\t\t\tif (LIST_WALK(subplan->args))\n\t\t\t\tFieldStore *fstore = (FieldStore *) node;\n\t\tcase T_RelabelType:\n\t\t\t\tif (WALK(acoerce->arg))\n\t\t\tbreak;", "partial_line": "case T_Ca", "completion": "case T_CaseExpr: <|endoftext|>"}
{"context": "\t\t.init_shmem_cb = pgstat_archiver_init_shmem_cb,\n\t\t.shared_data_off = offsetof(PgStatShared_BgWriter, stats),\n\t\t.shared_data_len = sizeof(((PgStatShared_BgWriter *) 0)->stats),\n\t\t.init_shmem_cb = pgstat_bgwriter_init_shmem_cb,\n\t[PGSTAT_KIND_CHECKPOINTER] = {", "partial_line": ".write_to_file", "completion": ".write_to_file = true, <|endoftext|>"}
{"context": "get_sync_bit(int method)\n\tint\t\t\to_direct_flag = 0;\n\t\treturn o_direct_flag;\n#ifdef O_DSYNC\n{", "partial_line": "if (openLo", "completion": "if (openLogFile >= 0) <|endoftext|>"}
{"context": "\trevmapBuf = brinLockRevmapPageForUpdate(revmap, heapBlk);\n\tif (!ItemPointerIsValid(iptr))\n\tregOffset = ItemPointerGetOffsetNumber(iptr);\n\t\t\t\t(errcode(ERRCODE_INDEX_CORRUPTED),\n\tPageIndexTupleDeleteNoCompact(regPg, regOffset);", "partial_line": "END_CRI", "completion": "END_CRIT_SECTION(); <|endoftext|>"}
{"context": "\t}\n{\n\tbuf = (char *) pg_malloc(buflen);\n\t\tsize_t\t\tnread;\n\tFILE\t   *fd;", "partial_line": "char", "completion": "char\t   *buf; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include <wctype.h>\n#include <unicode/ustring.h>\n#include \"catalog/pg_collation.h\"\n#include \"utils/numeric.h\"", "partial_line": "#define", "completion": "#define KeyWord_INDEX_SIZE\t\t('~' - ' ') <|endoftext|>"}
{"context": "\t\t\tTSCurrentConfigCache = InvalidOid;\t\n\t\tOid\t\t\tcfgId;\n\t\t\t\t\t\t\t\t\t\t\t (Node *) &escontext);\n\t\tif (namelist != NIL)\n\t\tif (!OidIsValid(cfgId))", "partial_line": "ereport(NO", "completion": "ereport(NOTICE, <|endoftext|>"}
{"context": "\t\t\tif (eq_opfamilies == NIL)\n\t\t\tbtree_opfamily = part_scheme->partopfamily[ipk];\n\t\t\tif (pk_known_equal[ipk])\nmatch_expr_to_partition_keys(Expr *expr, RelOptInfo *rel, bool strict_op)\n\tfor (cnt = 0; cnt < rel->part_scheme->partnatts; cnt++)", "partial_line": "foreac", "completion": "foreach(lc, rel->partexprs[cnt]) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tadd_object_address(RelationRelationId, rte->relid, tle->resno,\n\telse if (IsA(node, RangeTblFunction))\n\t\t\tadd_object_address(TypeRelationId, lfirst_oid(ct), 0,\n\t\t\t\tadd_object_address(CollationRelationId, collid, 0,", "partial_line": "else if (IsA(no", "completion": "else if (IsA(node, TableSampleClause)) <|endoftext|>"}
{"context": "\t\t}\ntypedef struct\n\tLOCKMODE\tlockmode;\t\t\n\tOid\t\t\tcheck_as_user;\t\n\t\t\tchar\t   *relname = get_rel_name(relid);", "partial_line": "relk", "completion": "relkind != RELKIND_VIEW) <|endoftext|>"}
{"context": "\tList\t   *newlist;\n\tcheck_list_invariants(newlist);\n}\n\tif (oldlist == NIL || nskip >= oldlist->length)\n\t\treturn NIL;", "partial_line": "memcpy(newlist->elements, &oldl", "completion": "memcpy(newlist->elements, &oldlist->elements[nskip], <|endoftext|>"}
{"context": "\t\tcase T_CustomScanState:\n\t\t\tbreak;\n\t\tcase T_AggState:\n\t\t\tbreak;\nParallelQueryMain(dsm_segment *seg, shm_toc *toc)", "partial_line": "FixedParallelExecut", "completion": "FixedParallelExecutorState *fpes; <|endoftext|>"}
{"context": "\tOid\t\t\ttypid;\n\t\ttypid = GetSysCacheOid2(TYPENAMENSP, Anum_pg_type_oid,\n\t\tif (OidIsValid(typid))\n\treturn InvalidOid;\n}", "partial_line": "Form_pg_type", "completion": "Form_pg_type typform; <|endoftext|>"}
{"context": "\t\t\t\t\tv_params[1] = l_ptr_const(op, l_ptr(StructExprEvalStep));\n\t\t\t\t\tv_params[2] = v_econtext;\n\t\t\t\t\t\t   LLVMGetFunctionType(ExecEvalSubroutineTemplate),\n\t\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\t\t\t\t\t\t\t\t  l_ptr(TypeStorageBool));", "partial_line": "LLVMBuildBr(b, opbloc", "completion": "LLVMBuildBr(b, opblocks[opno + 1]); <|endoftext|>"}
{"context": "static void\n\tprintf(_(\"Usage:\\n\"));\n\tprintf(_(\"  -F, --format=c|d|t       backup file format (should be automatic)\\n\"));\n\tprintf(_(\"  -j, --jobs=NUM               use this many parallel jobs to restore\\n\"));\n\t\t\t \"                               match at least one entity each\\n\"));", "partial_line": "printf(_(\"  -p, --por", "completion": "printf(_(\"  -p, --port=PORT          database server port number\\n\")); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tbreak;\n\t{\n\t\tif (pending_since > 0 &&\n\t\t}", "partial_line": "nowait =", "completion": "nowait = !force; <|endoftext|>"}
{"context": "\tPQExpBuffer query;\n\tint\t\t\ti_amname;\n\tint\t\t\ti_sortfamilynsp;\n\tint\t\t\ti_amprocnum;\n\tchar\t   *amopstrategy;", "partial_line": "appendPQE", "completion": "appendPQExpBuffer(query, \"SELECT amopstrategy, \" <|endoftext|>"}
{"context": "\t\t\telse if (*ptr == '_')\n\t\t\t{\n\t\t\t\tptr++;\n\t\t\t\tbreak;\n\t\tfor (;;)", "partial_line": "tmp = tmp * 2 +", "completion": "tmp = tmp * 2 + (*ptr++ - '0'); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   OT_NORMAL, NULL, false);\n\t\t{\n\t\t}\nstatic backslashResult\n\t\t\t\t   const char *cmd)", "partial_line": "if (activ", "completion": "if (active_branch) <|endoftext|>"}
{"context": "\t\t\tVar\t\t   *var = (Var *) lfirst(l);\n\t\t\t\tcontinue;\t\t\n\t\tif (rc->rti != rc->prti)\n\t\tif (rc->allMarkTypes & ~(1 << ROW_MARK_COPY))\n\t\t{", "partial_line": "Inv", "completion": "InvalidOid, <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"access/brin_revmap.h\"\n\t\t\t\t\t\t\t\t\tBlockNumber heapBlk);", "partial_line": "static Buffer revmap_get_buff", "completion": "static Buffer revmap_get_buffer(BrinRevmap *revmap, BlockNumber heapBlk); <|endoftext|>"}
{"context": "\t\tcase PqMsg_NegotiateProtocolVersion:\n\t\tcase PqMsg_FunctionCallResponse:\n\t\tcase PqMsg_Terminate:\n\t\t\tfprintf(conn->Pfdebug, \"Terminate\");\n\t\t\tbreak;", "partial_line": "if (logCursor - 1 !", "completion": "if (logCursor - 1 != length) <|endoftext|>"}
{"context": "\tforeach(cell, publist)\n\t\tforeach(pcell, publist)\n\t\t\t\t\t\t(errcode(ERRCODE_DUPLICATE_OBJECT),\n\tcheck_duplicates_in_publist(newpublist, NULL);\n\t{", "partial_line": "ListCell", "completion": "ListCell   *lc2; <|endoftext|>"}
{"context": "\t\tdescr[i - 1].descr = pstrdup(lex_descr[i]);\nprsd_start(PG_FUNCTION_ARGS)\n\tPG_RETURN_POINTER(TParserInit((char *) PG_GETARG_POINTER(0), PG_GETARG_INT32(1)));\n\tchar\t  **t = (char **) PG_GETARG_POINTER(1);\n\t\tPG_RETURN_INT32(0);", "partial_line": "prsd_", "completion": "prsd_end(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t}\n\tmaxfd = connsocket;\n\t{\n\t\t\treturn 0;\t\t\t\n\t{", "partial_line": "if (ra", "completion": "if (rawlen == 0) <|endoftext|>"}
{"context": "#include \"catalog/pg_aggregate.h\"\n\tbool\t\trescan_needed;\n\tOid\t\t\tsortColType;\n\tint16\t\ttypLen;\n\tchar\t\ttypAlign;", "partial_line": "Tuplesortstate", "completion": "Tuplesortstate *sortstate; <|endoftext|>"}
{"context": "\t\t\t   *p;\n\ts = src;\n\t\t}\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tif (!get_hex(s, &v2))", "partial_line": "(errcode(ERRCODE_INVALID_PARA", "completion": "(errcode(ERRCODE_INVALID_PARAMETER_VALUE), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   inputslot);\n\t\t\t\t\t\t\t\treturn NULL;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   SnapshotAny,\n\t\t\t\t\t\tcase TM_SelfModified:\n\t\t\t\t\t\t\t\t\t\t errmsg(\"tuple to be updated was already modified by an operation triggered by the current command\"),", "partial_line": "if (IsolationUse", "completion": "if (IsolationUsesXactSnapshot()) <|endoftext|>"}
{"context": "\t{\n\t\t\t   Oid namespaceoid, Oid amoid)\n\tNameData\topfName;\n\t\t\t\t\t\t\t  ObjectIdGetDatum(amoid),\n\t\tereport(ERROR,", "partial_line": "values[Anum_pg_opf", "completion": "values[Anum_pg_opfamily_opfname - 1] = NameGetDatum(&opfName); <|endoftext|>"}
{"context": "}\n\t\t\tbreak;\n\t\tva_end(args);\n\t{\n\t\tvoid\t   *var;", "partial_line": "var = va_arg(arg", "completion": "var = va_arg(args, void *); <|endoftext|>"}
{"context": "\tOutputPluginWrite(ctx, true);\n\tbool\t\tsent_begin_txn;\n\tAssert(txndata);\n\tlogicalrep_write_commit(ctx->out, txn, commit_lsn);\npgoutput_begin_prepare_txn(LogicalDecodingContext *ctx, ReorderBufferTXN *txn)", "partial_line": "Relation relation,", "completion": "Relation relation, RelationSyncEntry *relentry) <|endoftext|>"}
{"context": "\t\tfree(save_lc_ctype);\n\t\t_wsetlocale(LC_MONETARY, save_lc_monetary);\n\tif (save_lc_numeric)\n\tmonetary_locale = newlocale(LC_ALL_MASK, lc_monetary, 0);\n#if defined(TRANSLATE_FROM_LANGINFO)", "partial_line": "num", "completion": "numeric_locale); <|endoftext|>"}
{"context": "\t\t\t\t\tconflicttuple.slot = localslot;\n\t\t\t\tslot_modify_data(remoteslot_part, localslot, part_entry,\n\t\t\t\tif (!partrel->rd_rel->relispartition ||\n\t\t\t\t\tInitConflictIndexes(partrelinfo);\n\t\t\t\t\t}", "partial_line": "EvalPlan", "completion": "EvalPlanQualSetSlot(&epqstate, localslot); <|endoftext|>"}
{"context": "\t\t\t   constraint->contype == CONSTR_UNIQUE ||\n\t\tindex = lfirst(lc);\n\t\t\t\tequal(index->indexIncludingParams, priorindex->indexIncludingParams) &&\n\t\t\t\tindex->initdeferred == priorindex->initdeferred)\n}", "partial_line": "transformIndexConstraint(Constraint *constr", "completion": "transformIndexConstraint(Constraint *constraint, CreateStmtContext *cxt) <|endoftext|>"}
{"context": "\t\tif ((jso)->is_json) \\\nstatic JsonParseErrorType get_object_start(void *state);\nstatic JsonParseErrorType elements_scalar(void *state, char *token, JsonTokenType tokentype);\n\t\t\t\t\t\t\t\t\t\t  const char *funcname,\nstatic void get_record_type_from_query(FunctionCallInfo fcinfo,", "partial_line": "static Datum", "completion": "static Datum populate_composite(CompositeIOData *io, Oid typid, <|endoftext|>"}
{"context": "\t0x3190, 0x31B7,\n\t0x3260, 0x327B,\n\t0x33E0, 0x33FE,\n\t0xFA30, 0xFA6A,\n\t0x1D18C, 0x1D1A9,", "partial_line": "0x1D4AE,", "completion": "0x1D4AE, 0x1D4B9, <|endoftext|>"}
{"context": "static int\tMyTriggerDepth = 0;\nstatic bool TriggerEnabled(EState *estate, ResultRelInfo *relinfo,\n\t\t\t\t\t\t   Bitmapset *modifiedCols,\n\t\t\t\t\t\t   TupleTableSlot *oldslot, TupleTableSlot *newslot);\n\t\t\t\t\t\t\t\t  int event, bool row_trigger,", "partial_line": "CreateTrigger(Crea", "completion": "CreateTrigger(CreateTrigStmt *stmt, const char *queryString, <|endoftext|>"}
{"context": "Datum\nDatum\ncash_mul_flt8(PG_FUNCTION_ARGS)\n\tfloat8\t\tf = PG_GETARG_FLOAT8(1);\n\tfloat4\t\tf = PG_GETARG_FLOAT4(1);", "partial_line": "float4", "completion": "float4\t\tf = PG_GETARG_FLOAT4(1); <|endoftext|>"}
{"context": "\t\t\treturn \"+\";\n\t\tcase jpiMinus:\n\t\tcase jpiMod:\n\t\t\treturn \"size\";\n\t\t\treturn \"ceiling\";", "partial_line": "return", "completion": "return \"integer\"; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t NameStr(((Form_pg_event_trigger) GETSTRUCT(tup))->evtname));\n\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\tif (!HeapTupleIsValid(tup))\n\t\t\t\t\t\telog(ERROR, \"cache lookup failed for parameter ACL %u\",\n\t\t\t\t\t\t\t object->objectId);", "partial_line": "ScanKe", "completion": "ScanKeyInit(&skey[0], <|endoftext|>"}
{"context": "\t\tcase B_BACKEND:\n\t\t\tbreak;\n\t\tcase B_WAL_SENDER:\n\t\t\tbreak;\n\t\tereport(FATAL,", "partial_line": "errmsg(\"specified data directo", "completion": "errmsg(\"specified data directory \\\"%s\\\" is not a directory\", <|endoftext|>"}
{"context": "\t\t{\n\trcestate->es_unpruned_relids = parentestate->es_unpruned_relids;\n\t\tPlanState  *subplanstate;\n\tforeach(l, epqstate->resultRelations)\n\t\tepqstate->relsubs_blocked[rtindex - 1] = true;", "partial_line": "if (estate", "completion": "if (estate == NULL) <|endoftext|>"}
{"context": "\tOffsetNumber attrnum;\n\tItemPointerSetInvalid(&heapptr);\n\t\tDatum\t\tcurkey;\n\t}\n\tPage\t\tmetapage,", "partial_line": "Blo", "completion": "BlockNumber blkno, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tlev = LOGSTMT_DDL;\n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tlev = LOGSTMT_DDL;", "partial_line": "case T_Creat", "completion": "case T_CreatePolicyStmt: <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t}\n\t{\n\t\t\t\t errmsg(\"encrypted password is too long\"),\n\t\t\t\t errmsg(\"setting an MD5-encrypted password\"),", "partial_line": "errhint(\"Refer to the PostgreSQL documentation for details abou", "completion": "errhint(\"Refer to the PostgreSQL documentation for details about migrating to another password type.\"))); <|endoftext|>"}
{"context": "\t\t\t\tif (iskey &&\n\t\t\tcase AMPROP_DESC:\n\t\t\tcase AMPROP_ORDERABLE:\n\t\t\t\t\tisnull = false;\n\t\t\t\t\tindex_close(indexrel, AccessShareLock);", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tpg_fatal(\"failed sanity check, table with OID %u not found\",\n\t\tsubrinfo[i].dobj.objType = DO_SUBSCRIPTION_REL;\n\t\tsubrinfo[i].subinfo = subinfo;\n\t\t\t\t\t\t\t \"SELECT pg_catalog.binary_upgrade_add_sub_rel_state(\");\n\t\t\t\t\t\t  subrinfo->srsubstate);", "partial_line": "appendPQExpBuffer(que", "completion": "appendPQExpBuffer(query, \", NULL\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tLogicalOutputWrite, NULL);\n\t\tif (XLogRecPtrIsInvalid(upto_lsn))\n\t\t\t\tbreak;\n\t\tCurrentResourceOwner = old_resowner;\n\t\t\tLogicalConfirmReceivedLocation(ctx->reader->EndRecPtr);", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\tgettext_noop(\"Sets the shell command that will be called to archive a WAL file.\"),\n\t\t\tgettext_noop(\"An empty string means use \\\"archive_library\\\".\")\n\t{\n\t\tNULL, NULL, NULL\n\t\t},", "partial_line": "NULL, NU", "completion": "NULL, NULL, NULL <|endoftext|>"}
{"context": "\tresult = sin(arg1);\n\tif (errno != 0 || isinf(arg1))\n\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\n}\n#define INIT_DEGREE_CONSTANTS() \\", "partial_line": "init_", "completion": "init_degree_constants(); \\ <|endoftext|>"}
{"context": "\ti_tgname = PQfnumber(res, \"tgname\");\n\t\t}\n\t\t\tAssignDumpId(&tginfo[j].dobj);\n}\nvoid", "partial_line": "i_oid = PQfnumber(", "completion": "i_oid = PQfnumber(res, \"oid\"); <|endoftext|>"}
{"context": "get_sortgroupclause_tle(SortGroupClause *sgClause,\n}\nNode *\n\t\tSortGroupClause *sortcl = (SortGroupClause *) lfirst(l);\n\t{", "partial_line": "SortGroupClause *cl", "completion": "SortGroupClause *cl = (SortGroupClause *) lfirst(l); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tbreak;\n\t\t\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t}\n\t{", "partial_line": "pg_log_error_hint(\"Try \\\"%s --help\\\" for more inf", "completion": "pg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname); <|endoftext|>"}
{"context": "\tint\t\t\tneedle_len = state->len2;\n\tif (state->is_multibyte_char_in_char && state->locale->deterministic)\n\t{\n\t\twhile (state->refpoint < matchptr)\n\t\t\t{", "partial_line": "const char *hay", "completion": "const char *haystack_end = &haystack[haystack_len]; <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t}\n\t\tereport(ERROR,\n\t\ttypes[ntypes++] = CharGetDatum(STATS_EXT_MCV);\n\tif (build_expressions)", "partial_line": "exprsString", "completion": "exprsString = nodeToString(stxexprs); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   TIMESTAMPTZOID, NULL);\n\t\t\t\t\tsem.scalar = jsonb_in_scalar;\n\t\t\t\t}\n\t\t\t\t\t\t{", "partial_line": "type, NU", "completion": "type, NULL); <|endoftext|>"}
{"context": "ApplyRetrieveRule(Query *parsetree,\n\tRangeTblEntry *rte;\n\tint\t\t\tnumCols;\n\t\t\tTargetEntry *tle;\n\t\t\tparsetree->returningList = copyObject(parsetree->returningList);", "partial_line": "rule_action = c", "completion": "rule_action = copyObject(linitial(rule->actions)); <|endoftext|>"}
{"context": "\t\t\t\tif (TransactionIdPrecedes(xid, cutoffs->OldestXmin))\n\t\tif (TransactionIdIsValid(update_xid))\n\t\t\t\t\t errmsg_internal(\"multixact %u has two or more updating members\",\n\t\t\t\t\t errdetail_internal(\"First updater XID=%u second updater XID=%u.\",\n\t\tif (TransactionIdPrecedes(xid, cutoffs->OldestXmin))", "partial_line": "errmsg_internal(\"multixact %u contains committed update XID %u from", "completion": "errmsg_internal(\"multixact %u contains committed update XID %u from before removable cutoff %u\", <|endoftext|>"}
{"context": "\tint\t\t\tdim,\n\tint\t\t\tnentries;\n\tfor (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))\n\t\telse\n\tcontext.first = true;\t\t", "partial_line": "int", "completion": "int\t\t\ti1, <|endoftext|>"}
{"context": "#include <limits.h>\n#include \"commands/tablespace.h\"\n#define INITIAL_MEMTUPSIZE Max(1024, \\", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"optimizer/clauses.h\"\n#include \"parser/parse_coerce.h\"", "partial_line": "#include", "completion": "#include \"utils/datum.h\" <|endoftext|>"}
{"context": "\tListCell   *lc;\n\t\t\t\t\t generate_relation_name(rte->relid, NIL));\n\t{\n\t\t\thaveNotMatchedBySource = true;\n\t\t\t\t\t\t\t -PRETTYINDENT_STD, PRETTYINDENT_STD, 2);", "partial_line": "if (haveNotMatched", "completion": "if (haveNotMatchedBySource) <|endoftext|>"}
{"context": "\tif (OidIsValid(invtransfn_oid) &&\n\t\tereport(ERROR,\n\treturn initVal;\nwindow_gettupleslot(WindowObject winobj, int64 pos, TupleTableSlot *slot)\n\tif (pos < winobj->markpos)", "partial_line": "if (winobj->see", "completion": "if (winobj->seekpos < pos - 1) <|endoftext|>"}
{"context": "\t\t\t\t\t&jsestate->pathspec.isnull);\n\tjsestate->args = NIL;\n\tforboth(argexprlc, jsexpr->passing_values,\n\t\tas->d.jump.jumpdone = state->steps_len;\n\tjsestate->escontext.type = T_ErrorSaveContext;", "partial_line": "FmgrInfo   *", "completion": "FmgrInfo   *finfo; <|endoftext|>"}
{"context": "\t\tVALGRIND_MAKE_MEM_NOACCESS(link, sizeof(AllocFreeListLink));\n\t\treturn MemoryChunkGetPointer(chunk);\n\treturn AllocSetAllocChunkFromBlock(context, block, size, chunk_size, fidx);\n\tVALGRIND_MAKE_MEM_DEFINED(chunk, ALLOC_CHUNKHDRSZ);\n\t\t}", "partial_line": "#e", "completion": "#endif <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\nint\nPQregisterEventProc(PGconn *conn, PGEventProc proc,\n\t\t\te = (PGEvent *) malloc(newSize * sizeof(PGEvent));\n\t\tconn->nEvents--;", "partial_line": "retur", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\t manifests[i]->system_identifier,\n\t\t\t\t\t system_identifier);\n\t\t\tcreate_output_directory(ts->new_dir, &opt);\n\t\t\tpg_fatal(\"cannot generate a manifest because no manifest is available for the final input backup\");\n\t\tmwriter = NULL;", "partial_line": "snprintf(linkpath, MAXPGPATH, \"%s/%s/%u\"", "completion": "snprintf(linkpath, MAXPGPATH, \"%s/%s/%u\", opt.output, PG_TBLSPC_DIR, <|endoftext|>"}
{"context": "static const symbol s_9[] = { 'a', 'r', 'c' };\n    z->I[2] = z->l;\n        }\n            int ret = in_grouping(z, g_v, 97, 250, 1);\n            z->c += ret;", "partial_line": "switch (am", "completion": "switch (among_var) { <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tRelation conrel, Relation tgrel,\n\t\t\t\t\t\t\t\t\t\t\tOid ReferencingParentInsTrigger,\n\t\t\t\t\t\t\t\t\t\t\t Oid fkrelid, Oid pkrelid,\nstatic void ATExecCmd(List **wqueue, AlteredTableInfo *tab,\n\t\t\t\t\t  AlterTableCmd *cmd, LOCKMODE lockmode, AlterTablePass cur_pass,", "partial_line": "List **wqueue, LOCK", "completion": "List **wqueue, LOCKMODE lockmode, <|endoftext|>"}
{"context": "\t\t\tif (cur_copy == NULL || xmlerrcxt->err_occurred)\n\t\t\tbytes = xmlNodeDump(buf, NULL, cur_copy, 0, 0);\n\t\t\tif (bytes == -1 || xmlerrcxt->err_occurred)\n\t\t\t\txmlBufferFree(buf);\n\t\t}", "partial_line": "PG", "completion": "PG_TRY(); <|endoftext|>"}
{"context": "\t\tif (cur >= d->len)\n\t\t\t{\n\t}\n{\n\tTSLexeme   *res;", "partial_line": "PG_RETURN", "completion": "PG_RETURN_POINTER(res); <|endoftext|>"}
{"context": "\t\tignore_slash_options(scan_state);\n\t\tsuccess = do_pset(\"title\", opt, &pset.popt, pset.quiet);\n\t\tfree(opt);\n\treturn success ? PSQL_CMD_SKIP_LINE : PSQL_CMD_ERROR;\n\t\tenum trivalue reuse_previous = TRI_DEFAULT;", "partial_line": "bool", "completion": "bool\t\ton_off; <|endoftext|>"}
{"context": "\t\t\tmask1 = BITMASK >> is;\n\t\t\t{\n\t\t\t\tcmp = *s >> is;\n\t\t\t\tif (s == VARBITEND(substr) - 1)\n\t\t\t\tif (p == VARBITEND(str))", "partial_line": "cmp = *s << (", "completion": "cmp = *s << (BITS_PER_BYTE - is); <|endoftext|>"}
{"context": "dumpPublication(Archive *fout, const PublicationInfo *pubinfo)\n\tDumpOptions *dopt = fout->dopt;\n\tPQExpBuffer delq;\n\tif (!dopt->dumpSchema)\n\tqpubname = pg_strdup(fmtId(pubinfo->dobj.name));", "partial_line": "appendP", "completion": "appendPQExpBufferStr(query, \"delete\"); <|endoftext|>"}
{"context": "\t}\n\tint\t\t\tnum_to_scan;\n\tint\t\t\tmask = BM_DIRTY;\n\t\t}\n\t\tUnlockBufHdr(bufHdr, buf_state);", "partial_line": "if (", "completion": "if (num_to_scan == 0) <|endoftext|>"}
{"context": "\t\t\tskey->sk_subtype = InvalidOid;\n\t}\n\t\tScanKey\t\tsubkey = (ScanKey) DatumGetPointer(skey->sk_argument);\n\t\t\t\tsubkey->sk_strategy = BTCommuteStrategyNumber(subkey->sk_strategy);\n\treturn true;", "partial_line": "switch (sk", "completion": "switch (skey->sk_strategy) <|endoftext|>"}
{"context": "\t\t\t\tif (WALK(rs->subquery))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\tRangeFunction *rf = (RangeFunction *) node;\n\t\t\t\t\treturn true;", "partial_line": "if (WALK(rts->repe", "completion": "if (WALK(rts->repeatable)) <|endoftext|>"}
{"context": "\ttypenameTypeIdAndMod(NULL, inhdef->typeName, &inhtypeid, &inhtypmod);\n\t\t\t\t\t\tattributeName),\n\t\tif (strcmp(inhdef->compression, newdef->compression) != 0)\n\t\tif (newdef->raw_default && !newdef->generated)\n\t\t\t\t\t errmsg(\"column \\\"%s\\\" inherits from generated column but specifies default\",", "partial_line": "(errcode(ERRCODE_INVAL", "completion": "(errcode(ERRCODE_INVALID_COLUMN_DEFINITION), <|endoftext|>"}
{"context": "\tSize\t\tsz;\n\t\t\t\t(errcode(ERRCODE_DATA_CORRUPTED),\n\t\t\t\t((char *) ondisk) + SnapBuildOnDiskNotChecksummedSize,\n\tif (ondisk->builder.catchange.xcnt > 0)\n\tif (CloseTransientFile(fd) != 0)", "partial_line": "goto snapshot_not_int", "completion": "goto snapshot_not_interesting; <|endoftext|>"}
{"context": "\t\t\treturn;\n\t}\n\tif (relation->rd_newRelfilelocatorSubid == mySubid)\n\t{\n\t\t\trelation->rd_newRelfilelocatorSubid = InvalidSubTransactionId;", "partial_line": "if (is", "completion": "if (isCommit) <|endoftext|>"}
{"context": "\t\t\tvalues[2] = CStringGetTextDatum(convert_aclright_to_string(priv_bit));\n\t\t\ttuple = heap_form_tuple(funcctx->tuple_desc, values, nulls);\n\t\t\tresult = HeapTupleGetDatum(tuple);\n}\n\ttableoid = convert_table_name(tablename);", "partial_line": "text\t   *tablename = PG_G", "completion": "text\t   *tablename = PG_GETARG_TEXT_PP(0); <|endoftext|>"}
{"context": "\tchar\t   *ptr = str;\n\tbool\t\tres = false;\n\t\tif (plen == clen)\n}\nbool", "partial_line": "char", "completion": "char\t   *c = str; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey->partcollation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey->partnatts);\n\t\t\t\t\t{\n\t\t\t\tbound_offset = partition_range_datum_bsearch(key->partsupfunc,", "partial_line": "bound", "completion": "boundinfo, <|endoftext|>"}
{"context": "\t\t\tif (NEXT2('\\\\', ')'))\n\t\tcase CHR('<'):\n\t\tcase CHR('6'):\n\tconst chr  *start = v->now;\n\tint\t\t\te;", "partial_line": "cv = range(v,", "completion": "cv = range(v, c, c, 0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\tJsonTablePathSpec *pathspec);\nstatic void CheckDuplicateColumnOrPathNames(JsonTableParseContext *cxt,\nParseNamespaceItem *\n\tbool\t\tis_lateral;\n\tif (jt->on_error &&", "partial_line": "jfe->pathspec = (Node *) ro", "completion": "jfe->pathspec = (Node *) rootPathSpec->string; <|endoftext|>"}
{"context": "static List *pull_ands(List *andlist);\nnegate_clause(Node *node)", "partial_line": "Oid\t\t\tnegator =", "completion": "Oid\t\t\tnegator = get_negator(opexpr->opno); <|endoftext|>"}
{"context": "get_attr_stat_type(Oid reloid, AttrNumber attnum,\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\telse\n\t\t\t*atttypcoll = exprCollation(expr);\n\trelation_close(rel, NoLock);", "partial_line": "sta", "completion": "static bool <|endoftext|>"}
{"context": "\t\t    memcpy(sc_buf, in_buffer, buf_ptr - in_buffer - 4);\n\t\t    goto sw_buffer;\n\t\t\tforce_nl = false;\n\t\t    while (sc_end > save_com && isblank((unsigned char)sc_end[-1])) {\n\t\t    }", "partial_line": "diag2(0,", "completion": "diag2(0, \"Line broken\"); <|endoftext|>"}
{"context": "\treturn LockHeldByMe(&tag, lockmode, orstronger);\nLockRelationIdForSession(LockRelId *relid, LOCKMODE lockmode)\nUnlockRelationIdForSession(LockRelId *relid, LOCKMODE lockmode)\nConditionalLockRelationForExtension(Relation relation, LOCKMODE lockmode)\n{", "partial_line": "relation->rd_lockInfo.", "completion": "relation->rd_lockInfo.lockRelId.dbId, <|endoftext|>"}
{"context": "\t\tinterp_desc->interp = interp;\n\tPG_CATCH();\n\telse\n\t\tpltcl_init_interp(interp_desc, prolang, pltrusted);\n\tconst char *gucname;", "partial_line": "procStruct = (Form", "completion": "procStruct = (Form_pg_proc) GETSTRUCT(procTup); <|endoftext|>"}
{"context": "\telse\n\t{\n\t\tif (!OidIsValid(procOid))\n\tif (get_func_rettype(procOid) != typeOid)\n\tOid\t\t\tprocOid;", "partial_line": "argList[", "completion": "argList[0] = typeOid; <|endoftext|>"}
{"context": "\tfor (i = 0; i < b1->nindexes; i++)\n\t}\n#ifdef USE_ASSERT_CHECKING\n\t\t\t\t\tb1->datums[i][1] == b2->datums[i][1]));\n\t\t{", "partial_line": "partty", "completion": "parttypbyval[j], parttyplen[j])) <|endoftext|>"}
{"context": "static const symbol s_0_23[3] = { 'e', 'r', 's' };\n{ 1, s_0_0, -1, 1, 0},\n{ 3, s_0_6, 1, 1, 0},\n{ 6, s_0_7, 6, 1, 0},\n{ 3, s_0_23, 14, 1, 0},", "partial_line": "{ 3, s_0_", "completion": "{ 3, s_0_24, 14, 1, 0}, <|endoftext|>"}
{"context": "\tPQclear(res);\nstatic void\n\tPQExpBuffer delqry;\n\tif (!dopt->dumpSchema)\n\t\tif (funcInfo == NULL)", "partial_line": "appendPQExpBufferSt", "completion": "appendPQExpBufferStr(defqry, \"WITHOUT FUNCTION\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  v_argnull0,\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t   &v_fcinfo_isnull);\n\t\t\t\t\tLLVMBuildStore(b, v_retval, v_resvaluep);\n\t\t\t\t\tCompareType cmptype = op->d.rowcompare_final.cmptype;", "partial_line": "LLVMValueRef v_", "completion": "LLVMValueRef v_result; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tcontrol->name),\n\t\telog(DEBUG1, \"executing extension script for \\\"%s\\\" update from version '%s' to '%s'\", control->name, from_version, version);\n\t\tGetUserIdAndSecContext(&save_userid, &save_sec_context);\n\tif (log_min_messages < WARNING)\n\t\t\t\t\t\t\t\t PGC_USERSET, PGC_S_SESSION,", "partial_line": "GUC_ACTION_SAVE, tr", "completion": "GUC_ACTION_SAVE, true, 0, false); <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n{\n\tHeapTuple\tutup;\n\t\tresult = ((Form_pg_authid) GETSTRUCT(utup))->rolreplication;\n\tSetConfigOption(\"session_authorization\", rname,", "partial_line": "er", "completion": "ereport(FATAL, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  false, NULL);\n\t}\n\tJsonbValue *prev;\n\tprev = cxt->current;\n\tcxt->current = prev;", "partial_line": "executeAnyItem(JsonPathE", "completion": "executeAnyItem(JsonPathExecContext *cxt, JsonPathItem *jsp, JsonbContainer *jbc, <|endoftext|>"}
{"context": "if (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) exit (1);}\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "#line", "completion": "#line 34 \"quote.pgc\" <|endoftext|>"}
{"context": "\treturn pg_cmp_u32(v1, v2);\n\tPG_RETURN_BOOL(arg1 == arg2);\nDatum\n\tOid\t\t\targ1 = PG_GETARG_OID(0);\n\tOid\t\t\targ1 = PG_GETARG_OID(0);", "partial_line": "PG_RE", "completion": "PG_RETURN_BOOL(arg1 > arg2); <|endoftext|>"}
{"context": "\tif (GetEpochTime(tm) < 0)\n\t{\n\tdDate += date0;\n\t\t\ttm->tm_min = tx->tm_min;\n#if defined(HAVE_STRUCT_TM_TM_ZONE)", "partial_line": "if (tzn", "completion": "if (tzn != NULL) <|endoftext|>"}
{"context": "\t\tcur = so->keyData;\n\t\tcurattr = 1;\n\t\t\t\t\tfor (int arridx = 0; arridx < so->numArrayKeys; arridx++)\n\t\t\t\t\telse\n\t\t\t\t\tAssert(chosen == NULL ||", "partial_line": "(SK_SEARC", "completion": "(SK_SEARCHNOTNULL | SK_ISNULL | <|endoftext|>"}
{"context": "#include \"access/heapam.h\"\n#include \"commands/vacuum.h\"\n#include \"storage/latch.h\"", "partial_line": "#includ", "completion": "#include \"storage/proc.h\" <|endoftext|>"}
{"context": "\t\t\tif (WALK(rte->functions))\n\t\t\t\treturn true;\n\t\t\tbreak;\n\t\tcase RTE_GROUP:\n\t\t\t\t\treturn true;", "partial_line": "check_stack_", "completion": "check_stack_depth(); <|endoftext|>"}
{"context": "                if (ret < 0) return ret;\n            }\n    int among_var;\n            break;\nstatic int r_sing_owner(struct SN_env * z) {", "partial_line": "int among", "completion": "int among_var; <|endoftext|>"}
{"context": "\t\t\t\t\t parser_errposition(pstate, opt->location)));\n\t\telse if (strcmp(opt->defname, \"disable_page_skipping\") == 0)\n\t\t\tif (!opt->arg)\n\t\t\t\telse\n\t\t}", "partial_line": "MAX_PARALL", "completion": "MAX_PARALLEL_WORKER_LIMIT), <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\tmul = 1;\n\t\t\telse if (*cp == '_')\n\t\t\t}\n\t\t}", "partial_line": "add_var(dest, &tmp", "completion": "add_var(dest, &tmp_var, dest); <|endoftext|>"}
{"context": "\t{\n\t\telog(ERROR, \"AccessExclusiveLock required to add toast table.\");\n\t\t\t \"pg_toast_%u\", relOid);\n\tTupleDescInitEntry(tupdesc, (AttrNumber) 3,\n\tTupleDescAttr(tupdesc, 2)->attstorage = TYPSTORAGE_PLAIN;", "partial_line": "TupleDescAttr(tupdesc, 1)->attcompression = Inva", "completion": "TupleDescAttr(tupdesc, 1)->attcompression = InvalidCompressionMethod; <|endoftext|>"}
{"context": "}\n}\n\tnum = rint(num);\n\tfloat4\t\tresult;\n}", "partial_line": "i8tooid(PG_FUNCTI", "completion": "i8tooid(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tRelation\tpg_constraint;\n\t\t\t\tObjectIdGetDatum(InvalidOid));\n\t\t\t\tBTEqualStrategyNumber, F_NAMEEQ,\n\tscan = systable_beginscan(pg_constraint, ConstraintRelidTypidNameIndexId, true,\n\t\t\t\t\t\t\t  NULL, 3, skey);", "partial_line": "Datum", "completion": "Datum\t\tadatum; <|endoftext|>"}
{"context": "{\npgstat_wal_have_pending_cb(void)\n{\npgstat_wal_init_shmem_cb(void *stats)\n\tPgStatShared_Wal *stats_shmem = (PgStatShared_Wal *) stats;", "partial_line": "pgstat_wal_reset_all_cb(Tim", "completion": "pgstat_wal_reset_all_cb(TimestampTz ts) <|endoftext|>"}
{"context": "\toldctx = MemoryContextSwitchTo(TopMemoryContext);\n\tif (superuser_arg(member))\n\t\treturn true;\n\tif (superuser_arg(member))\n{", "partial_line": "(errcode(ERRCODE_INSUFFI", "completion": "(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE), <|endoftext|>"}
{"context": "\t\t\t\t\telog(ERROR, \"cache lookup failed for access method %u\",\n\t\t\t\tReleaseSysCache(opcTup);\n\t\t\t\tbreak;\n\t\tcase AccessMethodRelationId:\n\t\t\t\tchar\t   *amname;", "partial_line": "*objname = list_make1", "completion": "*objname = list_make1(amname); <|endoftext|>"}
{"context": "#include \"utils/syscache.h\"\n\tint\t\t\tio,\n\telse\n\t\t\t\toprform = NULL;\n\t\t}", "partial_line": "procform->amproclefttype == thisgro", "completion": "procform->amproclefttype == thisgroup->lefttype && <|endoftext|>"}
{"context": "}\n\tint\t\t\tnatts = typeinfo->natts;\n\t\twhile (tlist_item &&\n\t\tif (tlist_item)\n\t\t\tformat = formats[i];", "partial_line": "pq_endmess", "completion": "pq_endmessage_reuse(buf); <|endoftext|>"}
{"context": "\t\t\t\tsuccess = PQsendQuery(pset.db, query);\n\tif (pset.requested_results == 0 && !end_pipeline &&\n\t{\n\t{\n\t{", "partial_line": "PGresult   *", "completion": "PGresult   *next_result = NULL; <|endoftext|>"}
{"context": "\t\trepl_null[Anum_pg_db_role_setting_setconfig - 1] = false;\n\t\ta = isnull ? NULL : DatumGetArrayTypeP(datum);\n\t\tif (valuestr)\n\t\t\t\t\t\t\t\t databaseid, 0, roleid, false);\nvoid", "partial_line": "F_OI", "completion": "F_OIDEQ, <|endoftext|>"}
{"context": "\t\t\tresult = reindex_relation(stmt, relid,\n\t\t\t\t\t\t\t\tget_rel_name(relid))));\n\tPGRUsage\tru0;\n\t\tPROGRESS_CREATEIDX_COMMAND,\n\t\tPROGRESS_CREATEIDX_PHASE,", "partial_line": "relationName = g", "completion": "relationName = get_rel_name(relationOid); <|endoftext|>"}
{"context": "\t\telog(ERROR, \"unrecognized A_Expr kind: \\\"%.*s\\\"\", length, token);\n\tREAD_NODE_FIELD(lexpr);\nstatic ExtensibleNode *\n\tExtensibleNode *local_node;\n\ttoken = pg_strtok(&length); ", "partial_line": "local_node = (ExtensibleNode *) new", "completion": "local_node = (ExtensibleNode *) newNode(methods->node_size, <|endoftext|>"}
{"context": "\t\t\tint32\t\tj;\n\t\t\t\t}\n\t\tginFillScanKey(so, skey->sk_attno,\n\t}\n\t{", "partial_line": "hasNullQ", "completion": "hasNullQuery = true; <|endoftext|>"}
{"context": "\tappendPQExpBuffer(q, \"CREATE TYPE %s;\\n\",\n\t\t\t\t\t\t\t\t  .section = SECTION_PRE_DATA,\nstatic void\n\t\tappendPQExpBuffer(defqry, \"CREATE %sPROCEDURAL LANGUAGE %s\",\n\t\tif (OidIsValid(plang->lanvalidator))", "partial_line": "fmtQual", "completion": "fmtQualifiedDumpable(validatorInfo)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t \"SELECT 1 FROM pg_range r \"\n\t\t\t\t\t\t\t \"castsource, casttarget, castfunc, castcontext, \"\n\t\t\t\t\t\t\t \"castmethod \"\n\t}\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);", "partial_line": "ntups", "completion": "ntups = PQntuples(res); <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\tsbsrefstate->upperprovided,\n\t\t\t\t\t\t\t\t\tworkspace->refelembyval,\n\t\t\t\t\t\t  ExprContext *econtext)\n\t\t\t\t\t\t\t\t\t\t\t\t   &sbsrefstate->prevnull);", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\t\tAssert(subkey->sk_flags & SK_ROW_MEMBER);\n\t}\n\tOid\t\t\tlefttype,\n\t\t\t\trighttype,\n\t\t\t\tcmp_op;", "partial_line": "Assert((leftarg->sk_flags | righta", "completion": "Assert((leftarg->sk_flags | rightarg->sk_flags) & SK_SEARCHNOTNULL); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   List *prunequal,\n\t\t\t\t\t\t\t\tGeneratePruningStepsContext *context);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   bool *clause_is_not_null,\nstatic List *get_steps_using_prefix_recurse(GeneratePruningStepsContext *context,\nstatic PruneStepResult *get_matching_list_bounds(PartitionPruneContext *context,", "partial_line": "make_partition_pruneinfo(PlannerInfo *r", "completion": "make_partition_pruneinfo(PlannerInfo *root, RelOptInfo *parentrel, <|endoftext|>"}
{"context": "\t\tappendStringInfo(&buf, \", children: %u\", s->childXids[0]);\n\t\t\tappendStringInfo(&buf, \" %u\", s->childXids[i]);\n\t\t\t(errmsg_internal(\"%s(%d) name: %s; blockState: %s; state: %s, xid/subid/cid: %u/%u/%u%s%s\",\n\tswitch (blockState)\n\t\t\treturn \"BEGIN\";", "partial_line": "return", "completion": "return \"ABORT\"; <|endoftext|>"}
{"context": "\tassign_query_collations(pstate, qry);\n}\n\tif ((stmt->options & CURSOR_OPT_SCROLL) &&\n\t\t\t\t errmsg(\"cannot specify both %s and %s\",\n\t\t\t\t errmsg(\"DECLARE CURSOR must not contain data-modifying statements in WITH\")));", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\telog(DEBUG2, \"removing 2PC data for transaction %u\", xid);\n\t\t\tTimestampTz origin_prepare_timestamp)\n\tbool\t\tfound = false;\n\t\t\t\thdr->origin_timestamp == origin_prepare_timestamp)\nvoid", "partial_line": "(errcode(ERRCO", "completion": "(errcode(ERRCODE_PROTOCOL_VIOLATION), <|endoftext|>"}
{"context": "be_lo_import(PG_FUNCTION_ARGS)\n}\n\tchar\t\tbuf[BUFSIZE];\n\tif (fd < 0)\n\toid = inv_create(lobjOid);", "partial_line": "while ((nbytes = read(", "completion": "while ((nbytes = read(fd, buf, BUFSIZE)) > 0) <|endoftext|>"}
{"context": "\t\tnpages = size / FPM_PAGE_SIZE;\n\t{\n\t\tfor (;;)\n\t\t\tseg->handle = pg_prng_uint32(&pg_global_prng_state) << 1;\n\t\t\tif (seg->handle == DSM_HANDLE_INVALID)\t", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "\tStringInfoData buf;\n\tNumericVar\ttmp_var;\n\tif (state == NULL)\n\t\t\tPG_RETURN_NULL();\n}", "partial_line": "state->sumX -", "completion": "state->sumX -= newval; <|endoftext|>"}
{"context": "\t\t((Const *) rightop)->constisnull)\n\t\t\t\teqopr = TextEqualOperator;\n\t\t\t{\n\t\t\t}\n\t\t\teqopr = ByteaEqualOperator;", "partial_line": "retur", "completion": "return NIL; <|endoftext|>"}
{"context": "#include \"storage/procarray.h\"\n#include \"utils/pg_locale.h\"\n#include \"utils/syscache.h\"\n} CreateDBStrategy;\nstatic bool get_db_info(const char *name, LOCKMODE lockmode,", "partial_line": "Oid *dbTablespace, c", "completion": "Oid *dbTablespace, char **dbCollate, char **dbCtype, char **dbLocale, <|endoftext|>"}
{"context": "\tif (tzp != NULL)\n\t\treturn -1;\n\tif (GetEpochTime(tm) < 0)\n\t{\n\tdDate += date0;", "partial_line": "tm->tm_mi", "completion": "tm->tm_min = tx->tm_min; <|endoftext|>"}
{"context": "\t\t\t\t\t\tRETURN_ERROR(ereport(ERROR,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tInvalidOid, -1,\n\t\t\t\t\tif (!noerr || escontext.error_occurred)\n\t\t\t\t\t\tRETURN_ERROR(ereport(ERROR,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  datum));", "partial_line": "res = executeNextItem(cxt,", "completion": "res = executeNextItem(cxt, jsp, NULL, jb, found, true); <|endoftext|>"}
{"context": "static void text_position_setup(text *t1, text *t2, Oid collid, TextPositionState *state);\nstatic char *text_position_get_match_ptr(TextPositionState *state);\nstatic bytea *bytea_catenate(bytea *t1, bytea *t2);\n\t\t\t\t\t\t\t\t\tconst char *fldsep, const char *null_string);\n\t\t\t\t\t\t\t\t\t\t  Datum value, bool isNull,", "partial_line": "int flags, int", "completion": "int flags, int width); <|endoftext|>"}
{"context": "\treturn result;\n\t}\n\tSpinLockAcquire(&XLogRecoveryCtl->info_lck);\n\t\tXLogRecoveryCtl->lastReplayedReadRecPtr = InvalidXLogRecPtr;\n\t}", "partial_line": "XLogRecoveryCtl->re", "completion": "XLogRecoveryCtl->replayEndTLI = XLogRecoveryCtl->lastReplayedTLI; <|endoftext|>"}
{"context": "\t\t\t\tindlist = build_paths_for_OR(root, rel,\n\t\t\t\t\t\t\t\t\t\t\t all_clauses);\n\t\t}\n\t\tif (i < npaths)\n\t\t\tpathinfoarray[npaths++] = pathinfo;", "partial_line": "return pathinfo", "completion": "return pathinfoarray[0]->path; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  bool expand_external)\n\t\tcheck_domain_for_new_tuple(erh, tuple);\n\t\t{\n\t\t\tMemoryContextSwitchTo(oldcxt);\n\tnewflags = oldflags & ER_FLAGS_NON_DATA;", "partial_line": "if (expand_e", "completion": "if (expand_external) <|endoftext|>"}
{"context": "\t\t\t\t\tif (typmod == -1)\n\t\t\t\t\t\t\t\t\t\t \"  </xsd:restriction>\\n\", typmod - VARHDRSZ, tz);\n\t\t\t\t\tbreak;\n\t\t\tcase TIMESTAMPOID:\n\t\t\t\t\t\tappendStringInfo(&result,", "partial_line": "\"    <xsd:pattern value=\\\"\\\\p{Nd}{4}-\\\\p{Nd}{2}-\\\\p{Nd}{2}T\\\\p{Nd}{", "completion": "\"    <xsd:pattern value=\\\"\\\\p{Nd}{4}-\\\\p{Nd}{2}-\\\\p{Nd}{2}T\\\\p{Nd}{2}:\\\\p{Nd}{2}:\\\\p{Nd}{2}.\\\\p{Nd}{%d}%s\\\"/>\\n\" <|endoftext|>"}
{"context": "static TypeFuncClass\n\t*base_typeid = typid;\n\t\tcase TYPTYPE_COMPOSITE:\n\t\t\t\t  Oid **p_argtypes, char ***p_argnames, char **p_argmodes)\n\tDatum\t   *elems;", "partial_line": "int", "completion": "int\t\t\tnelems; <|endoftext|>"}
{"context": "\t\tAssert(!*isnull || SOFT_ERROR_OCCURRED(escontext));\n\t}\n\t\t\t\t\t\t   escontext))\n\t{\nstatic void", "partial_line": "int", "completion": "int32 typmod, <|endoftext|>"}
{"context": "\t\tfor (a = s->ins; a != NULL; a = b)\n\t}\nstatic struct subre *\n\t  int type,\t\t\t\t\t\n\t\tleft = newstate(v->nfa);", "partial_line": "assert(sto", "completion": "assert(stopper == ')' && SEE(EOS)); <|endoftext|>"}
{"context": "    z->lb = z->c; z->c = z->l;\n                    if (i > 0) goto lab4;\n                    {   int ret = r_Suffix_Verb_Step2a(z);\n                        if (ret < 0) return ret;\n                    }", "partial_line": "z->c =", "completion": "z->c = z->l - m6; <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) exit (1);}\n\tstrcpy(msg, \"fetch :count\");\n\tECPGt_int,&(id),(long)1,(long)1,sizeof(int), \n#line 95 \"cursor.pgc\"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, ECPGt_EORT);", "partial_line": "strcpy(msg, \"", "completion": "strcpy(msg, \"declare\"); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase T_CreateForeignTableStmt:\n\t\tcase T_DropStmt:\n\t\t\t\tcase OBJECT_VIEW:\n\t\t\t\t\ttag = CMDTAG_DROP_MATERIALIZED_VIEW;", "partial_line": "case OBJE", "completion": "case OBJECT_SCHEMA: <|endoftext|>"}
{"context": "\t{\n\t\tvoid\t   *var;\n\t\tvar = va_arg(args, void *);\n\t\tarrsize = va_arg(args, long);\n\t\t\t\tdata_var.ind_varcharsize = varcharsize;", "partial_line": "if (!get_char_item(lineno, var,", "completion": "if (!get_char_item(lineno, var, vartype, PQfname(ECPGresult, index), varcharsize)) <|endoftext|>"}
{"context": "\tPREDICATELOCKTAG locktag;\n\tbool\t\tfound;\n\tif (!target)\n\t\t\t\t errmsg(\"out of shared memory\"),\n\tlocktag.myTarget = target;", "partial_line": "HASH_ENTER_NULL,", "completion": "HASH_ENTER_NULL, &found); <|endoftext|>"}
{"context": "\t\twhile (PqRecvPointer >= PqRecvLength)\n\t\tamount = PqRecvLength - PqRecvPointer;\n\t\twhile (PqRecvPointer >= PqRecvLength)\n\t\t{\n\t}", "partial_line": "return", "completion": "return (PqRecvLength - PqRecvPointer); <|endoftext|>"}
{"context": "static void\n\t{\n\t{\n\t}\n\t\t\t\t errmsg(\"money out of range\")));", "partial_line": "cash_m", "completion": "cash_mul_float8(Cash c, float8 f) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t   NULL,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase RTE_VALUES:\n\t\tget_rte_alias(rte, varno, false, context);", "partial_line": "get_from_clause_", "completion": "get_from_clause_coldeflist(rtfunc1, colinfo, context); <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\tif (keysz == 0)\n\t\treturn _bt_endpoint(scan, dir);\n\t{\n\t\t\t{", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\telog(ERROR, \"failed to finalize checksum of backup manifest: %s\",\n\tchecksumstringbuf[PG_SHA256_DIGEST_STRING_LENGTH - 1] = '\\0';\n\tAppendStringToManifest(manifest, \"\\\"}\\n\");\n\t\tmanifest_bytes_done += bytes_to_read;", "partial_line": "manifest->ma", "completion": "manifest->manifest_size += len; <|endoftext|>"}
{"context": "\tif (IdleStatsUpdateTimeoutPending &&\n\tif (LogMemoryContextPending)\n\tif (PublishMemoryContextPending)\n\tif (ParallelApplyMessagePending)\n\t\tGUC_check_errdetail(\"\\\"client_connection_check_interval\\\" must be set to 0 on this platform.\");", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "#include \"utils/resowner.h\"\nstatic char *PrintString(Datum res);\nstatic const ResourceOwnerDesc string_desc = {\n\t.release_phase = RESOURCE_RELEASE_AFTER_LOCKS,\n\t.DebugPrint = PrintString", "partial_line": "ch", "completion": "child; <|endoftext|>"}
{"context": "\tif (nchrs <= 0 || nchrs > 100000)\n\taddrange(cv, a, b);\n\t\t}\n{\nstatic struct cvec *", "partial_line": "struct c", "completion": "struct cvec *cv; <|endoftext|>"}
{"context": "\tbool\t\tis_prepared_name_set;\n\t{\n\tecpg_pthreads_init();\n\tif (stmt == NULL)\n#ifdef HAVE_USELOCALE", "partial_line": "Assert(e", "completion": "Assert(ecpg_clocale); <|endoftext|>"}
{"context": "\t\t\t   *target;\n\t\t\t\ttolen,\n\twhile (m > 0)\n\t\tif (i < fromlen)\n\t\t\t\tp += pg_mblen(p);", "partial_line": "if (p < to", "completion": "if (p < to_end) <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH(\"RULE\", \"TRIGGER\");\n\t{\n\t}\n\t{\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_rule_of_table);", "partial_line": "else if (Matches(\"A", "completion": "else if (Matches(\"ALTER\", \"TABLE\", MatchAny, \"DISABLE\", \"RULE\")) <|endoftext|>"}
{"context": "\tuint32\t\ttli = 0;\n\tchar\t   *resetwal_bin;\n\t\tlc_ctype = pg_strdup(getenv(\"LC_CTYPE\"));\n\tif (getenv(\"LC_MONETARY\"))\n\tif (getenv(\"LC_TIME\"))", "partial_line": "if (get", "completion": "if (getenv(\"LANG\")) <|endoftext|>"}
{"context": "\tif (stmt == NULL)\n#ifdef HAVE_USELOCALE\n\tAssert(ecpg_clocale);\n\t\tecpg_do_epilogue(stmt);\n\t}", "partial_line": "stmt->oldthreadlocale = _configthreadlocal", "completion": "stmt->oldthreadlocale = _configthreadlocale(_ENABLE_PER_THREAD_LOCALE); <|endoftext|>"}
{"context": "\t\treturn ptr + nitems * ((Size) att_align_nominal(typlen, typalign));\n\t\t\t\tptr = (char *) att_align_nominal(ptr, typalign);\n\t\t\tif (bitmask == 0x100)\n\t\t\t\tnullbitmap++;\n\t\t\tptr = (char *) att_align_nominal(ptr, typalign);", "partial_line": "array_copy(char *destptr,", "completion": "array_copy(char *destptr, int nitems, <|endoftext|>"}
{"context": "\t\t\tif (!can_coerce_type(1, &nodeType, &procform->amprocrighttype,\n\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t\t\t\tformat_type_be(rangeopcintype)),\n\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t\t errmsg(\"RANGE with offset PRECEDING/FOLLOWING is not supported for column type %s and offset type %s\",", "partial_line": "construct", "completion": "constructName = \"RANGE\"; <|endoftext|>"}
{"context": "\t\tappendStringInfoCharMacro(out, '\\n');\n\tif (is_null)\n\t{\n\t\t\t\telse\n\t\t\t\t\tjb.val.boolean = DatumGetBool(val);", "partial_line": "jb.val.string.v", "completion": "jb.val.string.val = outputstr; <|endoftext|>"}
{"context": "\t\t\t\t PQerrorMessage(conn));\n\t\t\t\t PQresStatus(PQresultStatus(res)));\n\tres = PQgetResult(conn);\n\tif (PQresultStatus(res) != PGRES_TUPLES_OK)\n\tif (PQsendFlushRequest(conn) != 1)", "partial_line": "f", "completion": "for (;;) <|endoftext|>"}
{"context": "\t\tint\t\t\tindex = distances[i].index;\n\t\teranges[i].maxval = values[2 * i + 1];\n\t\t\t\t\t\t\t\t\t\t\t   &values[2 * i + 1],\n\t\t\t\t\t\t\t\t\t\t\t   &cxt) == 0);\n\t\treturn false;", "partial_line": "neranges = reduce_expanded_rang", "completion": "neranges = reduce_expanded_ranges(eranges, neranges, distances, <|endoftext|>"}
{"context": "\t{\n\t\t\tFreeCachedExpression(expr_entry->cast_cexpr);\n\t\telse\n\t\t\tcast_expr = coerce_to_target_type(NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t  dsttype, dsttypmod,", "partial_line": "MemoryContext", "completion": "MemoryContextSwitchTo(oldcontext); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tastate->dnulls,\n\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t\t\tndims,\n\t\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),\n\t\tastate->lbs[0] = 1;", "partial_line": "memcpy(&as", "completion": "memcpy(&astate->lbs[1], lbs, ndims * sizeof(int)); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t}\n\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),\n\tPLpgSQL_nsitem *nse;\n\tconst char *fldname = NULL;", "partial_line": "MemoryContext", "completion": "MemoryContext oldCxt; <|endoftext|>"}
{"context": "\t\t\t\tmember->object = operOid;\n\t\t\t\tmember->ref_is_hard = false;\n#endif\n\t\t\t\tmember->ref_is_family = true;\n\t\t\t\tmember->refobjid = opfamilyoid;", "partial_line": "errmsg(\"STORAGE cannot be specified in", "completion": "errmsg(\"STORAGE cannot be specified in ALTER OPERATOR FAMILY\"))); <|endoftext|>"}
{"context": "\tHeapTuple\ttup;\n\tint\t\t\tnslots,\n\t{\n\t\t{\n\t\t\treturn;", "partial_line": "if (!object_", "completion": "if (!object_ownercheck(DatabaseRelationId, db_id, GetUserId())) <|endoftext|>"}
{"context": "\tenum r_type r_type;\t\t\t\nstatic struct pg_tm tm;\n\ts->tt_ttisstd = false;\nstatic int32\n{", "partial_line": "int32\t\tminval", "completion": "int32\t\tminval = -1 - maxval; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tgxact->ondisk, false, true);\n\t\t\tif (nxids == allocsize)\n\treturn result;\n\t\tGlobalTransaction gxact = TwoPhaseState->prepXacts[i];\n\t\txid = gxact->xid;", "partial_line": "buf = Proces", "completion": "buf = ProcessTwoPhaseBuffer(xid, <|endoftext|>"}
{"context": "\tif (!found)\ninit_dsm_registry(void)\n}\nGetNamedDSMSegment(const char *name, size_t size,\n\t\t\t\t(errmsg(\"DSM segment name cannot be empty\")));", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "}\n}\n\t\t\t\t\t  INT64_FORMAT \"\\t\" INT64_FORMAT \"\\t0\\t\\\\N\\n\",\n\t\t\t\t\t  curr + 1, curr / ntellers + 1);\n}", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t{\n\tif (use_hashing)\n\t\t\t\t\t\t\t&aggstate->hash_planned_partitions);\n\t}\n\t\tExpr\t   *finalfnexpr;", "partial_line": "aggTuple = SearchS", "completion": "aggTuple = SearchSysCache1(AGGFNOID, <|endoftext|>"}
{"context": "static void quoteOneName(char *buffer, const char *name);\nstatic void quoteRelationName(char *buffer, Relation rel);\n\t\t\t\t\t\t\tconst char *leftop, Oid leftoptype,\n\t\t\t\t\t\t\tOid opoid,\n\t\t\t\t\t\t const RI_ConstraintInfo *riinfo, bool rel_is_pk);", "partial_line": "static bool ri_KeysEqual(Relation rel, Tuple", "completion": "static bool ri_KeysEqual(Relation rel, TupleTableSlot *oldslot, TupleTableSlot *newslot, <|endoftext|>"}
{"context": "\t\t\tif (res->entry.haspos)\n\t\t\t{\n\tWordEntryIN *arr;\n\tWordEntry  *inarr;\n\tchar\t   *strbuf;", "partial_line": "int\t\t\tbuf", "completion": "int\t\t\tbuflen = 256; <|endoftext|>"}
{"context": "\t{\nstatic void\n\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t\t  sizeof(JsonbValue) * pstate->size);\nJsonbIteratorToken", "partial_line": "(*it)->cur", "completion": "(*it)->curIndex = 0; <|endoftext|>"}
{"context": "\tInitMaterializedSRF(fcinfo, 0);\n\tforeach(lc1, evi_list)\n\t{\n\t\tListCell   *lc2;\n\t\t{", "partial_line": "memset(values, 0, sizeo", "completion": "memset(values, 0, sizeof(values)); <|endoftext|>"}
{"context": "\treturn slotname;\n\t\tSubscriptionRelState *rstate;\n\t\t{\n\t\t\tHasSubscriptionRelations(MySubscription->oid);\n}", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "}\nDatum\n\tAclMode\t\tmode;\n\tAclResult\taclresult;\n}", "partial_line": "AclResult\taclr", "completion": "AclResult\taclresult; <|endoftext|>"}
{"context": "\tif (PQresultStatus(res) == PGRES_TUPLES_OK && PQntuples(res) == 1)\n\t\tcase EditableView:\n\t\t\t\t\t\t\t\t  \"FROM pg_catalog.pg_class c \"\n\t\t\t\t\t\t\t\t  oid);\n\tif (!echo_hidden_command(query->data))", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t}\n\tcolor\t   *newrowptr;\n\t\tcm->maxarrayrows *= 2;\n\t}\n\t\t   &cm->hicolormap[oldrow * cm->hiarraycols],", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\ta = array_set(array, 1, &index,\n\t\t\t\t\t  -1  ,\n\tint\t\t\ti;\n\t(void) validate_option_array_item(name, NULL, false);\n\t\tbool\t\tisnull;", "partial_line": "-1", "completion": "-1  , <|endoftext|>"}
{"context": "\tLLVMContextRef lc;\n\tv_fcinfo = l_ptr_const(fcinfo, l_ptr(StructFunctionCallInfoData));\n\tv_retval = l_call(b, LLVMGetFunctionType(AttributeTemplate), v_fn, &v_fcinfo, 1, \"funccall\");\n\t\tLLVMValueRef v_lifetime = create_LifetimeEnd(mod);\n\t\tl_call(b, LLVMGetFunctionType(v_lifetime), v_lifetime, params, lengthof(params), \"\");", "partial_line": "stati", "completion": "static LLVMValueRef <|endoftext|>"}
{"context": "do_interval_accum(IntervalAggState *state, Interval *newval)\n\t{\n\t}\n\tstate->N++;\n\telse", "partial_line": "PG_RETURN_POINT", "completion": "PG_RETURN_POINTER(state); <|endoftext|>"}
{"context": "{ 10, s_4_19, 18, 14, 0},\n{ 12, s_4_27, 18, 24, 0},\n{ 10, s_4_35, 31, 19, 0},\n{ 6, s_4_38, 31, 1, 0},\n{ 10, s_4_51, 18, 21, 0},", "partial_line": "{ 6, s_4_57, 56,", "completion": "{ 6, s_4_57, 56, 4, 0}, <|endoftext|>"}
{"context": "\tif (IsA(node, Query))\n\t\t\t\t\t\t\t\t   context);\n\t\t\t\t\t\t\t\t\t relids,\n\t\t\tnewphv = make_placeholder_expr(root, (Expr *) newnode, phrels);\n\telse if (root)", "partial_line": "Relids\t\tphrels = pull_varnos_of", "completion": "Relids\t\tphrels = pull_varnos_of_level(root, newnode, levelsup); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\testinfo->flags |= SELFLAG_USED_DEFAULT;\n\t\t\tdouble\t\tclamp = rel->tuples;\n\t} while (varinfos != NIL);\n\t\treturn hashclauses;", "partial_line": "Grou", "completion": "GroupVarInfo *varinfo; <|endoftext|>"}
{"context": "\t\tcase T_CaseExpr:\n\t\t\t\tforeach(temp, caseexpr->args)\n\t\t\t\t\tif (WALK(when->expr))\n\t\t\t\t\tif (WALK(when->result))\n\t\t\t\tif (WALK(xexpr->named_args))", "partial_line": "case T_JsonV", "completion": "case T_JsonValueExpr: <|endoftext|>"}
{"context": "\t}\n\t\tif (context->min_sublevels_up == 0)\n\t}\n\t\t{\n\t\tcontext->min_sublevels_up++;", "partial_line": "cont", "completion": "context, <|endoftext|>"}
{"context": "\t{\n\t\t\telmlen = sizeof(int16);\n\t\t\telmalign = TYPALIGN_INT;\n\t\t\telmlen = 0;\narray_contains_nulls(ArrayType *array)", "partial_line": "bits8", "completion": "bits8\t   *bitmap; <|endoftext|>"}
{"context": "\t\treturn -1;\n\tif (oldact)\n{\n\t\t\t\t\t\t   PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,\nvoid", "partial_line": "r", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t Tcl_NewStringObj(UTF_E2U(edata->internalquery), -1));\n\t\tUTF_END;\n\t{\n\t\t\t\t\t\t\t\t Tcl_NewIntObj(edata->internalpos));\n\tif (edata->filename)", "partial_line": "Tcl_ListObjAppendE", "completion": "Tcl_ListObjAppendElement(interp, obj, <|endoftext|>"}
{"context": "\tjoinrel->partexprs = NULL;\n\tbuild_joinrel_tlist(root, joinrel, outer_rel, sjinfo, pushed_down_joins,\n\t\t\t\t\t\t\t\t\t\t\t  sjinfo);\n\t\t\t\t\t\t\t   sjinfo, restrictlist);\n}", "partial_line": "List *restrictlist, SpecialJoi", "completion": "List *restrictlist, SpecialJoinInfo *sjinfo, <|endoftext|>"}
{"context": "\t\tPG_RETURN_NULL();\n\tfor (; clist; clist = clist->next)\n\t{\n\t\t\tbreak;\n\tchar\t   *pro_name = text_to_cstring(PG_GETARG_TEXT_PP(0));", "partial_line": "(Node *)", "completion": "(Node *) &escontext, <|endoftext|>"}
{"context": "\tfloat4\t\tf = PG_GETARG_FLOAT4(1);\ncash_mul_int8(PG_FUNCTION_ARGS)\n\tCash\t\tc = PG_GETARG_CASH(1);\n\tCash\t\tc = PG_GETARG_CASH(0);\n\tPG_RETURN_CASH(cash_div_int64(c, i));", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\t\t\t RelationGetRelid(relation));\n\telse\n\t\t\telog(ERROR, \"could not find relation mapping for relation \\\"%s\\\", OID %u\",\n\t}\n{", "partial_line": "relation->rd_index =", "completion": "relation->rd_index = (Form_pg_index) GETSTRUCT(relation->rd_indextuple); <|endoftext|>"}
{"context": "\t}\n\t{\n\t\ttmfd->xmax = HeapTupleHeaderGetUpdateXid(tuple->t_data);\n\t\tLockBuffer(*buffer, BUFFER_LOCK_EXCLUSIVE);\n\told_infomask = tuple->t_data->t_infomask;", "partial_line": "compute_new_xmax_info", "completion": "compute_new_xmax_infomask(xmax, old_infomask, tuple->t_data->t_infomask2, <|endoftext|>"}
{"context": "static bool\n\tif (node == NULL)\n\tif (IsA(node, RangeVar))\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_RECURSION),\n\t\t\t\t\t\t\t\t\t\t\t\trv->location)));", "partial_line": "if (I", "completion": "if (IsA(node, SelectStmt)) <|endoftext|>"}
{"context": "\t\tif (cd->flags & COLMARK)\ndumpcolors(struct colormap *cm,\n\t\t\telse\n\t\t\t\tfprintf(f, \"#%2ld(%2d): \", (long) co, cd->nschrs + cd->nuchrs);\n\t\tconst color *rowptr;", "partial_line": "for (c = 0;", "completion": "for (c = 0; c < cm->hiarraycols; c++) <|endoftext|>"}
{"context": "\t{\ntypedef struct floating_decimal_64\n{\n\t{\n\t\te2 = 1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS - 2;", "partial_line": "m2 = ie", "completion": "m2 = ieeeMantissa; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tscram_sha_256_iterations, password,\n\t}\n\t}\n\tchar\t   *salt_str;\n\tchar\t   *decoded_salt_buf;", "partial_line": "v = pstr", "completion": "v = pstrdup(secret); <|endoftext|>"}
{"context": "\t\tif (!bms_is_subset(innerrel->attr_needed[attroff], inputrelids))\n\t\t\tcontinue;\t\t\t\n\t\t\tcontinue;\t\t\t\n\t\t\t\t\t  Relids joinrelids)\n\t\tSpecialJoinInfo *sjinf = (SpecialJoinInfo *) lfirst(l);", "partial_line": "sjinf->syn_righthand = adjust_", "completion": "sjinf->syn_righthand = adjust_relid_set(sjinf->syn_righthand, relid, subst); <|endoftext|>"}
{"context": "\tControlFile = palloc_object(ControlFileData);\n#ifdef FRONTEND\nretry:\n#else\n\t\telse", "partial_line": "#", "completion": "#else <|endoftext|>"}
{"context": "\tStringInfoData buf;\n\telse\n\t{\n{\n\tstart_xact_command();", "partial_line": "if (stmt_n", "completion": "if (stmt_name[0] != '\\0') <|endoftext|>"}
{"context": "\tCommitTransactionCommand();\n\tStringInfoData buf;\n\t\t MyBgworkerEntry->bgw_name, table->schema, table->name);\n\t\t\t\t\t \"RETURNING %s.value\",\n\t\tif (ConfigReloadPending)", "partial_line": "PushActiveSnapshot(GetTrans", "completion": "PushActiveSnapshot(GetTransactionSnapshot()); <|endoftext|>"}
{"context": "static const symbol s_2_1076[5] = { 'n', 'u', 'v', 's', 'i' };\nstatic const symbol s_2_1081[8] = { 'o', 's', 't', 'a', 'j', 'a', 't', 'i' };\nstatic const symbol s_2_1083[5] = { 'i', 'k', 'a', 't', 'i' };\nstatic const symbol s_2_1084[4] = { 'l', 'a', 't', 'i' };\nstatic const symbol s_2_1087[4] = { 't', 'a', 't', 'i' };", "partial_line": "static const symbol s_2_1103[6] = { 'j',", "completion": "static const symbol s_2_1103[6] = { 'j', 'e', 't', 'i', 't', 'i' }; <|endoftext|>"}
{"context": "}\n\t\t\t\t   AttrNumber attributeNumber,\n\tAssert(attdim >= 0);\n\t\tMemSet(NameStr(att->attname), 0, NAMEDATALEN);\n\tatt->atthasdef = false;", "partial_line": "if (!Hea", "completion": "if (!HeapTupleIsValid(tuple)) <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\t\t\tif (!OidIsValid(typid) && column)\n\t\t\tiparam->name = pstrdup(key);", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t{\n\t\tfree(envval);\n\t\tbool\t\tshow_linenumbers = (strchr(cmd, '+') != NULL);\n\t\tPQExpBuffer buf;\n\t\tbuf = createPQExpBuffer();", "partial_line": "OT_WHOLE_LINE, N", "completion": "OT_WHOLE_LINE, NULL, true); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tconn->ssl_max_protocol_version))\n\tif (conn->sslcertmode)\n\t\t\treturn false;\n#endif\n\t{", "partial_line": "goto oom_e", "completion": "goto oom_error; <|endoftext|>"}
{"context": "BlockRefTableWriteEntry(BlockRefTableWriter *writer, BlockRefTableEntry *entry)\n\t\t\t\t\t\t   sentry.nchunks * sizeof(uint16));\n\t{\n\t\tBlockRefTableWrite(&writer->buffer, entry->chunk_data[j],\n\t}", "partial_line": "BlockRefTableFileTermi", "completion": "BlockRefTableFileTerminate(&writer->buffer); <|endoftext|>"}
{"context": "\t\t\tareq->request_complete = false;\n\t\t}\n\tnode->as_whichplan = INVALID_SUBPLAN_INDEX;\n\tLWLockInitialize(&pstate->pa_lock, LWTRANCHE_PARALLEL_APPEND);\n\tnode->as_pstate = pstate;", "partial_line": "if (n", "completion": "if (node->as_nasyncplans > 0) <|endoftext|>"}
{"context": "\t\tint\t\t\ttmp = 0;\n\t\t*fprec = tmfc.ff;\t\t\n\tif (fmask != 0)\n\t\t\tgoto fail;\n\t{", "partial_line": "tz->gmtof", "completion": "tz->gmtoffset = -tmfc.gmtoffset; <|endoftext|>"}
{"context": "#include \"utils/builtins.h\"\n\tbbsink\t\tbase;\n\tTimestampTz last_progress_report_time;", "partial_line": "static void bbsink_copystrea", "completion": "static void bbsink_copystream_begin_backup(bbsink *sink); <|endoftext|>"}
{"context": "\t.release_priority = RELEASE_PRIO_DSMS,\nstatic inline void\n\tResourceOwnerRemember(owner, PointerGetDatum(seg), &dsm_resowner_desc);\n\tmaxitems = PG_DYNSHMEM_FIXED_SLOTS\n\t{", "partial_line": "dsm_control_handle = pg_prng_uint32(&p", "completion": "dsm_control_handle = pg_prng_uint32(&pg_global_prng_state) << 1; <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t get_func_name(funcOid));\n\t\t\trecordDependencyOn(&address, &referenced, DEPENDENCY_NORMAL);\n\t\tbool\t\tisnull;\n\t\ta = update_proconfig_value(a, set_items);", "partial_line": "repl_repl[Anu", "completion": "repl_repl[Anum_pg_proc_proconfig - 1] = true; <|endoftext|>"}
{"context": "        break;\n}\nstatic int r_R2(struct SN_env * z) {\nstatic int r_standard_suffix(struct SN_env * z) {\n                if (ret <= 0) return ret;", "partial_line": "if (ret <= 0) r", "completion": "if (ret <= 0) return ret; <|endoftext|>"}
{"context": "\tstate = pg_malloc0(sizeof(*state));\n\tcs->private_data = state;\n\tLZ4State   *state = (LZ4State *) CFH->private_data;\n\tsize_t\t\tstatus;\n\t\t\treturn false;", "partial_line": "state->errcode", "completion": "state->errcode = status; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t security_level,\n\telse\n\t\t\t\t\t\t\t\t\t\t\t\tclause,\n\t\t\t\t\t\t\t\t\t\t\t\tincompatible_relids,\n}", "partial_line": "OpExpr", "completion": "OpExpr\t   *newclause; <|endoftext|>"}
{"context": "\t\t\t\t\t\tstat->weight |= 0;\n\t\t}\n\t\tuint64\t\ti;\n\t\tfor (i = 0; i < SPI_processed; i++)\n\t\tSPI_freetuptable(SPI_tuptable);", "partial_line": "ret", "completion": "return stat; <|endoftext|>"}
{"context": "\t{\n\t\t{\n\t\t\tif (v->spl_dontcare == NULL)\n\t\t\t{\n\t\t\t}", "partial_line": "OffsetNumber *map = (OffsetNumber *) palloc", "completion": "OffsetNumber *map = (OffsetNumber *) palloc(len * sizeof(OffsetNumber)); <|endoftext|>"}
{"context": "{\n\t{\n\t\t\tActiveSnapshot->as_snap->regd_count == 0)\nAtEOXact_Snapshot(bool isCommit, bool resetXmin)\n\t\t\tExportedSnapshot *esnap = (ExportedSnapshot *) lfirst(lc);", "partial_line": "esnap->snap", "completion": "esnap->snapfile); <|endoftext|>"}
{"context": "static const symbol s_4_9[4] = { 0xD1, 0x82, 0xD1, 0x8C };\nstatic const symbol s_4_23[6] = { 0xD0, 0xB9, 0xD1, 0x82, 0xD0, 0xB5 };\nstatic const symbol s_4_24[8] = { 0xD1, 0x83, 0xD0, 0xB9, 0xD1, 0x82, 0xD0, 0xB5 };\nstatic const symbol s_4_38[2] = { 0xD0, 0xBD };\nstatic const symbol s_4_40[4] = { 0xD0, 0xBB, 0xD0, 0xBE };", "partial_line": "static const symbol s_4_45[6] = { 0xD0, 0xBD, 0xD", "completion": "static const symbol s_4_45[6] = { 0xD0, 0xBD, 0xD0, 0xBD, 0xD0, 0xBE }; <|endoftext|>"}
{"context": "\t\tTLHistoryFileName(histfname, parentTLI);\n\t}\n\telse\n\t\t\t (srcfd < 0) ? \"\" : \"\\n\",\n\t\t\t LSN_FORMAT_ARGS(switchpoint),", "partial_line": "errmsg(\"could no", "completion": "errmsg(\"could not write to file \\\"%s\\\": %m\", tmppath))); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t -1);\n\treturn my_rc;\n\t{\n\t\tTcl_WrongNumArgs(interp, 1, objv, \"command\");", "partial_line": "if (retcode == TC", "completion": "if (retcode == TCL_ERROR) <|endoftext|>"}
{"context": "#define SH_SCOPE\t\t\t\tstatic inline\n#define SH_DECLARE\nstatic filehash_hash *filehash;\nstatic char *datasegpath(RelFileLocator rlocator, ForkNumber forknum,\n#define SH_EQUAL(tb, a, b)\t\t(strcmp(a, b) == 0)", "partial_line": "\"pg_s", "completion": "\"pg_subtrans\", <|endoftext|>"}
{"context": "\t\t{\n\t\treturn NULL;\n\t\t\tAssert(!nulls[i]);\n\t\telse\n\treturn key_tuple;", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\trelease_callback(arg);\n\t\t\trelease_callback(arg);\n\t\t\t\t\t\t\t  XLTW_Update);\n\t\t}\n\t\tUnlockTuple(relation, &oldtup.t_self, InplaceUpdateTupleLock);", "partial_line": "ret", "completion": "return ret; <|endoftext|>"}
{"context": "\taction = XLogReadBufferForRedoExtended(record, 0, RBM_NORMAL, true, &buffer);\n\t\tpageopaque->hasho_flag &= ~LH_PAGE_HAS_DEAD_TUPLES;\n\tif (BufferIsValid(buffer))\n\t\tmetapage = BufferGetPage(metabuf);\n\t\tPageSetLSN(metapage, lsn);", "partial_line": "if (BufferIsV", "completion": "if (BufferIsValid(metabuf)) <|endoftext|>"}
{"context": "{\n\t{\n\t\t\t\ttoken = optarg;\n\t\t\tcase 1005:\t\t\t\n\t\t\tdefault:", "partial_line": "r", "completion": "return 1; <|endoftext|>"}
{"context": "\tchar\t   *cmd_str;\n\t\tpg_fatal(\"control file appears to be corrupt\");\n\tgettimeofday(&tv, NULL);\n\t\t\t\t\t   subscriber_dir, DEVNULL);\n\tpg_log_debug(\"pg_resetwal command is: %s\", cmd_str);", "partial_line": "pg", "completion": "pg_free(cf); <|endoftext|>"}
{"context": "\t{\"no\", WAL_COMPRESSION_NONE, true},\n\t{NULL, 0, false}\nextern const struct config_enum_entry wal_level_options[];\nbool\t\tDebug_print_rewritten = false;\nbool\t\tDebug_pretty_print = true;", "partial_line": "bool\t\tDebug_copy_par", "completion": "bool\t\tDebug_copy_parse_plan_trees; <|endoftext|>"}
{"context": "\t\tSetDatabaseHasLoginEventTriggers();\n\tDatum\t   *data;\n\t\tchar\t   *result,\n\t\t\t*p = pg_ascii_toupper((unsigned char) *p);\n\t\tpfree(result);", "partial_line": "LockSharedObject(DatabaseRelationId,", "completion": "LockSharedObject(DatabaseRelationId, MyDatabaseId, 0, AccessExclusiveLock); <|endoftext|>"}
{"context": "\telse\n\telse\n\t\tvalues[Anum_pg_extension_extcondition - 1] = extCondition;\n\tfree_object_addresses(refobjs);\nRemoveExtensionById(Oid extId)", "partial_line": "Anum_p", "completion": "Anum_pg_extension_oid, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t \"tuplestore tuples\",\n\tstate->memtupcount = 0;\n\treturn state;\n\tTuplestorestate *state;\n\tstate->readtup = readtup_heap;", "partial_line": "return", "completion": "return state; <|endoftext|>"}
{"context": "\t\t\tdefault:\n\t\t\ttypmod = -1;\n\t\tif (tl[1] < 0)\n\t\t\t\t\t\t\ttl[1], MAX_INTERVAL_PRECISION)));\n\t\t\ttypmod = INTERVAL_TYPMOD(tl[1], tl[0]);", "partial_line": "(errcode(ERRCODE_INVALID_", "completion": "(errcode(ERRCODE_INVALID_PARAMETER_VALUE), <|endoftext|>"}
{"context": "\telse if (strncmp(res->cmdStatus, \"FETCH \", 6) == 0 ||\n\treturn p;\n\t\t\t\t\t \"could not interpret result from server: %s\",\n\t\treturn 0;\n\t\treturn 1;", "partial_line": "PQnparams(const PG", "completion": "PQnparams(const PGresult *res) <|endoftext|>"}
{"context": "\tif (strlen(old_rel->tablespace) == 0)\n\t\tmap->old_tablespace_suffix = \"/base\";\n\t\tmap->new_tablespace = new_data;\n\telse\n\t\tmap->new_tablespace_suffix = new_cluster.tablespace_suffix;", "partial_line": "map->reln", "completion": "map->relname = old_rel->relname; <|endoftext|>"}
{"context": "\tif (fgets(res, sizeof(res), fp) == NULL)\n\t\t(void) pclose(fp);\n\t}\n\t}\n}", "partial_line": "pg_log_error(\"client %d abo", "completion": "pg_log_error(\"client %d aborted in command %d (%s) of script %d; %s\", <|endoftext|>"}
{"context": "\t\t\t!IS_VALID_TIMESTAMP(result))\n\tPG_RETURN_TIMESTAMPTZ(result);\n}\n\t\t\t\t\t\t\t\t\t\t\tfalse);\n\ttype = DecodeUnits(0, lowunits, &val);", "partial_line": "if (TIMESTAMP_NOT_", "completion": "if (TIMESTAMP_NOT_FINITE(timestamp)) <|endoftext|>"}
{"context": "#line 1 \"regression.h\"\nif (sqlca.sqlcode < 0) sqlprint();}\n#line 33 \"oldexec.pgc\"\n#line 41 \"oldexec.pgc\"", "partial_line": "printf(\"Insert", "completion": "printf(\"Inserted %ld tuples via prepared execute\\n\", sqlca.sqlerrd[2]); <|endoftext|>"}
{"context": "\tfmt = \"yy/mm/dd\";\n\tPGTYPESdate_defmt_asc(&date1, fmt, in);\n\tPGTYPESdate_defmt_asc(&date1, fmt, in);\n\ttext = PGTYPESdate_to_asc(date1);\n\tfmt = \"mm/dd/yy\";", "partial_line": "PGTYPEStimes", "completion": "PGTYPEStimestamp_current(&ts1); <|endoftext|>"}
{"context": "appendPGArray(PQExpBuffer buffer, const char *value)\n\tconst char *tmp;\n\t\tappendPQExpBufferChar(buffer, ',');\n\t\t\t}\n\t\tchar\t   *value;", "partial_line": "const char *schemavar, co", "completion": "const char *schemavar, const char *namevar, <|endoftext|>"}
{"context": "static const symbol s_2[] = { 0xCE, 0xB3 };\nstatic const symbol s_7[] = { 0xCE, 0xB8 };\nstatic const symbol s_10[] = { 0xCE, 0xBB };\nstatic const symbol s_11[] = { 0xCE, 0xBC };\nstatic const symbol s_24[] = { 0xCF, 0x86, 0xCE, 0xB1 };", "partial_line": "static const symbol s_30[] = { 0xCF, 0x80, 0xCE", "completion": "static const symbol s_30[] = { 0xCF, 0x80, 0xCE, 0xB5, 0xCF, 0x81 }; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t}\n\t\tvalue = conninfo_uri_decode(value, errorMessage);\n\t\tif (value == NULL)\n\t\t\tfree(keyword);", "partial_line": "keyword", "completion": "keyword = \"sslmode\"; <|endoftext|>"}
{"context": "\tplan->targetlist = tlist;\n\t\t\t   List *runCondition, List *qual, bool topWindow, Plan *lefttree)\n\tWindowAgg  *node = makeNode(WindowAgg);\n\tnode->runConditionOrig = runCondition;\n\t\t   AttrNumber *grpColIdx,", "partial_line": "node->numCols", "completion": "node->numCols = numGroupCols; <|endoftext|>"}
{"context": "\tECPGt_varchar,&(custs4->name),(long)50,(long)-1,sizeof( struct customer4 ), \nif (sqlca.sqlcode < 0) sqlprint();}\n    printf(\"\\ncusts4:\\n\");\n    { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"select c from customers limit 2\", ECPGt_EOIT, \nif (sqlca.sqlwarn[0] == 'W') sqlprint();", "partial_line": "if (sqlca.", "completion": "if (sqlca.sqlcode < 0) sqlprint();} <|endoftext|>"}
{"context": "#include \"access/hash_xlog.h\"\n#include \"utils/rel.h\"\nrestart_insert:\n\tmetapage = BufferGetPage(metabuf);", "partial_line": "buf = _hash_getbucketbuf_from_hashkey", "completion": "buf = _hash_getbucketbuf_from_hashkey(rel, hashkey, HASH_WRITE, <|endoftext|>"}
{"context": "\t\t\tappendPQExpBufferStr(query,\n\t\t\t\t\t\t\t\t \"classid = 'pg_proc'::regclass AND \"\n\t\t\t\t\t\t\t\t \"deptype = 'e')\");\n\t\tagginfo[i].aggfn.nargs = atoi(PQgetvalue(res, i, i_pronargs));\n\t\tif (agginfo[i].aggfn.nargs == 0)", "partial_line": "agginfo[i].", "completion": "agginfo[i].aggfn.postponed_def = false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t&ctl,\n\t\t\t\t\t\t\t\t   summary);\n\t\tMemoryStatsDsaArea = dsa_create(memCxtArea->lw_lock.tranche);\n\tmemCxtState[idx].proc_id = MyProcPid;\n\tif (DsaPointerIsValid(memCxtState[idx].memstats_dsa_pointer))", "partial_line": "memCxtState[idx", "completion": "memCxtState[idx].memstats_dsa_pointer); <|endoftext|>"}
{"context": "} NODE;\n\t\tnode->right = maketree(in + 1);\n\tint\t\t\tcur;\t\t\t", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\tint\t\t\tnopers = list_length(rcexpr->opnos);\n\t\t\t\t\t\tl_right_expr, rcexpr->rargs,\n\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t   &righttype);\n\t\t\t\t\t\t\t BTORDER_PROC, lefttype, righttype, opfamily);", "partial_line": "fcinfo = palloc0(SizeForFun", "completion": "fcinfo = palloc0(SizeForFunctionCallInfo(2)); <|endoftext|>"}
{"context": "{ 6, s_8_61, -1, 2, 0},\n{ 3, s_8_64, -1, 1, 0},\n{ 5, s_8_67, 64, 2, 0},\n{ 3, s_8_90, -1, 2, 0},\n{ 2, s_8_95, -1, 2, 0}", "partial_line": "static const symbol s_9_0[1", "completion": "static const symbol s_9_0[1] = { 'a' }; <|endoftext|>"}
{"context": "\tcontent->title = title;\n\t\t\t\ttotal_cells,\n\t{\n\t\texit(EXIT_FAILURE);\n\t\t\t\t\t\t\t\t\t\t   content->opt->encoding);", "partial_line": "#ifdef ENA", "completion": "#ifdef ENABLE_NLS <|endoftext|>"}
{"context": "\tstatic const priv_map any_priv_map[] = {\n\t\t{\"SET\", ACL_SET},\n\t};\n\tACLITEM_SET_PRIVS_GOPTIONS(*result, priv,\n\t\t\t\t\t\tconst priv_map *privileges)", "partial_line": "while (*c", "completion": "while (*chunk && isspace((unsigned char) *chunk)) <|endoftext|>"}
{"context": "{ 3, s_1_269, 263, 1, 0},\n{ 4, s_1_279, -1, 2, 0},\n{ 4, s_1_280, -1, 1, 0},\n{ 3, s_1_281, -1, 1, 0},\nstatic const symbol s_2_3[3] = { 'e', 'r', 'a' };", "partial_line": "static c", "completion": "static const symbol s_2_9[2] = { 'k', 'i' }; <|endoftext|>"}
{"context": "\t\tMergeActionState *action = (MergeActionState *) lfirst(l);\n\t\t\t\tnewslot = ExecProject(action->mas_proj);\n{\n\tResultRelInfo *resultRelInfo;\n\tmtstate->mt_merge_subcommands = 0;", "partial_line": "ExecAssignExprContext(esta", "completion": "ExecAssignExprContext(estate, &mtstate->ps); <|endoftext|>"}
{"context": "\t\telse\n\t{\n\tif (AH->connection)\n\t}\n}", "partial_line": "SortTocFrom", "completion": "SortTocFromFile(Archive *AHX) <|endoftext|>"}
{"context": "\treturn oid;\n\t\tif (item->enabled == TRIGGER_FIRES_ON_ORIGIN)\n\telse\n\tif (event == EVT_Login)\n\t\t\tevent == EVT_SQLDrop ||", "partial_line": "return", "completion": "return NIL; <|endoftext|>"}
{"context": "\treturn 0;\t\t\t\t\t\n\tswitch (pg_regex_strategy)\n\t\t\tif (sizeof(wchar_t) >= 4 || c <= (pg_wchar) 0xFFFF)\n\t\tcase PG_REGEX_STRATEGY_ICU:\n\t\t\tbreak;", "partial_line": "case PG_REGE", "completion": "case PG_REGEX_STRATEGY_C: <|endoftext|>"}
{"context": "            {   int ret = slice_from_s(z, 5, s_63);\n        case 30:\n        case 33:\n                if (ret < 0) return ret;\n            {   int ret = slice_from_s(z, 5, s_73);", "partial_line": "case", "completion": "case 39: <|endoftext|>"}
{"context": "XLogSegNo\n\tXLogSegNo\tlastRemovedSegNo;\n\tSpinLockRelease(&XLogCtl->info_lck);\n\txldir = AllocateDir(XLOGDIR);\n\t{", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\tAssert(stmtStartTimestamp != 0);\nTransactionIdIsCurrentTransactionId(TransactionId xid)\n\t\tlow = 0;\n\t\tint\t\t\tlow,\n\t\tif (!FullTransactionIdIsValid(s->fullTransactionId))", "partial_line": "if (TransactionIdEquals(p", "completion": "if (TransactionIdEquals(probe, xid)) <|endoftext|>"}
{"context": "\t\t\t\tif (tuptable == SPI_tuptable)\n\t\t}\nbool\n\t\treturn false;\t\t\t\n\t\treturn false;\t\t\t", "partial_line": "if (src == N", "completion": "if (src == NULL || tcount < 0) <|endoftext|>"}
{"context": "\t\t  \"    [full, column, page, integer value]\\n\");\n\t\t  \"    password file name\\n\");\n\t\t  \"    editor used by the \\\\e, \\\\ef, and \\\\ev commands\\n\");\n\t\t  \"    alternative location for the command history file\\n\");\n\t\t  \"    name of external pager program used for \\\\watch\\n\");", "partial_line": "helpSQL(const char *topic,", "completion": "helpSQL(const char *topic, unsigned short int pager) <|endoftext|>"}
{"context": "\t{\n\t\topcentry->opcintype = opclassform->opcintype;\n\tif (numSupport > 0)\n\t\tScanKeyInit(&skey[0],\n\t\t\t\t\tAnum_pg_amproc_amprocfamily,", "partial_line": "Anum_pg_amproc_amp", "completion": "Anum_pg_amproc_amprocrighttype, <|endoftext|>"}
{"context": "\ta->colorchainRev = NULL;\n\tcolor\t\tco;\n\t\t\t\tstruct colormap *cm,\n\tcolor\t\tco;\n\t\treturn;", "partial_line": "cd = &cm", "completion": "cd = &cm->cd[a->co]; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t extra);\nhash_inner_and_outer(PlannerInfo *root,\n\tJoinType\tsave_jointype = jointype;\n\t\tRestrictInfo *restrictinfo = (RestrictInfo *) lfirst(l);\n\t\tif (!restrictinfo->outer_is_left &&", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\t\tresult = (unsigned char *) repalloc(result, resultlen + 1);\n\t\t\t\t\t\t\t  Int32GetDatum(srclen),\n\tchar\t   *dest_encoding_name = NameStr(*PG_GETARG_NAME(2));\n\tchar\t   *dest_str;\n\tif (src_encoding < 0)", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "lookup_fdw_handler_func(DefElem *handler)\n\tif (handler == NULL || handler->arg == NULL)\n\t\treturn InvalidOid;\n\tif (get_func_rettype(handlerOid) != FDW_HANDLEROID)\n\treturn handlerOid;", "partial_line": "lookup_fdw_validator_func(D", "completion": "lookup_fdw_validator_func(DefElem *validator) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t const Oid *paramTypes, int numParams)\n\tparstate->paramTypes = paramTypes;\nsetup_parse_variable_parameters(ParseState *pstate,\n\tparam->paramid = paramno;\nstatic Node *", "partial_line": "parser_errposition", "completion": "parser_errposition(pstate, pref->location))); <|endoftext|>"}
{"context": "match_boolean_index_clause(PlannerInfo *root,\n\t\t\t\t\t\t   IndexOptInfo *index)\n{\n\t{\n\telse if (clause && IsA(clause, BooleanTest))", "partial_line": "else if (btest->booltesttype =", "completion": "else if (btest->booltesttype == IS_FALSE && <|endoftext|>"}
{"context": "static int\theap_compare_slots(Datum a, Datum b, void *arg);\n{\n\tBitmapset  *validsubplans;\n\t\t\t\tj;", "partial_line": "PartitionPru", "completion": "PartitionPruneState *prunestate; <|endoftext|>"}
{"context": "\tpgstat_count_io_op(io_object, io_context, io_op, cnt, bytes);\n{\n{\n\tLWLock\t   *bktype_lock;\n\tPgStat_BktypeIO *bktype_shstats;", "partial_line": "if (!no", "completion": "if (!nowait) <|endoftext|>"}
{"context": "                    break;\n                    }\n                    break;\n        z->bra = z->c;\n        if (z->c == z->l || z->p[z->c] != 'y') { z->c = c3; goto lab1; }", "partial_line": "if (", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "static int r_R1(struct SN_env * z) {\n            {   int ret = r_R2(z);\n                if (ret < 0) return ret;\n        case 4:\n            }", "partial_line": "{   int re", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "            }\n    lab1:\n            int ret = out_grouping_U(z, g_v, 97, 252, 1);\n            if (ret < 0) goto lab7;\n        }", "partial_line": "int ret = in_grouping_", "completion": "int ret = in_grouping_U(z, g_v, 97, 252, 1); <|endoftext|>"}
{"context": "\t\tuint32\t\tbuckets_to_add;\n\t\tmetap->hashm_highmask = new_bucket | metap->hashm_lowmask;\n\t{\n\t}\n\tnopaque->hasho_page_id = HASHO_PAGE_ID;", "partial_line": "xlrec.new_b", "completion": "xlrec.new_bucket = maxbucket; <|endoftext|>"}
{"context": "\treturn freeze_xmin || replace_xvac || replace_xmax || freeze_xmax;\n\tfor (int i = 0; i < ntuples; i++)\n\t\t\tAssert(!HeapTupleHeaderXminFrozen(htup));\n\t\t\t\t\t\t errmsg_internal(\"uncommitted xmin %u needs to be frozen\",\n\t\t\tTransactionId xmax = HeapTupleHeaderGetRawXmax(htup);", "partial_line": "ItemId\t\titemid = PageGetItemId", "completion": "ItemId\t\titemid = PageGetItemId(page, frz->offset); <|endoftext|>"}
{"context": "\tfor (i = 0; i < indexInfo->ii_NumIndexAttrs; i++)\n\t\texprsDatum = CStringGetTextDatum(exprsString);\n\t}\n\tvalues[Anum_pg_index_indimmediate - 1] = BoolGetDatum(immediate);\n\tvalues[Anum_pg_index_indkey - 1] = PointerGetDatum(indkey);", "partial_line": "nulls[Anum_p", "completion": "nulls[Anum_pg_index_indpred - 1] = true; <|endoftext|>"}
{"context": "\t\t\tcontinue;\n}\n{\n\tList\t   *tidquals;\n\tList\t   *tidrangequals;", "partial_line": "if (!ena", "completion": "if (!enable_tidscan) <|endoftext|>"}
{"context": "{\n\tfor (int attno = 0; attno < num_attributes; attno++)\n}\n\t\tllvm_copy_attributes_at_index(v_from, v_to, paramidx);\n}", "partial_line": "LLVMVa", "completion": "LLVMValueRef <|endoftext|>"}
{"context": "\tAssert(BufferGetBlockNumber(root->buffer) == btree->rootBlkno);\n\troot->off = InvalidOffsetNumber;\n\tblkno = root->blkno;\n\t\tif (GinPageIsIncompleteSplit(page))\n\t\t\t{", "partial_line": "Rele", "completion": "ReleaseBuffer(buffer); <|endoftext|>"}
{"context": "static bool\n\t\treturn false;\n\t{\n\t{\n\t\tcompare_tlist_datatypes(subquery->targetList,", "partial_line": "if (!recurse_pushdown_safe(op->rarg", "completion": "if (!recurse_pushdown_safe(op->rarg, topquery, safetyInfo)) <|endoftext|>"}
{"context": "\t\t\t   *icursor,\n\t\ticursor = icursor->next;\n\treturn result;\n\tJsonbValue\tv;\n\t\tresult->res = pushJsonbValue(&result->parseState,", "partial_line": "json_categorize_type(arg_type, tru", "completion": "json_categorize_type(arg_type, true, &state->val_category, <|endoftext|>"}
{"context": "\t\tchar\t\tlastoff[MAXFNAMELEN];\n\t\t\t\tstrcmp(de->d_name + 8, firstoff + 8) >= 0 &&\n\t\t\t{\n\t\tCheckXLogRemoved(startsegno, state.starttli);\n\t\t\t\t\t\t &tli, &segno, wal_segment_size);", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "}\n\tint64\t\targ = PG_GETARG_INT64(0);\n\t\tereport(ERROR,\n}\n}", "partial_line": "num", "completion": "num = rint(num); <|endoftext|>"}
{"context": "\tBlockNumber last_blkno;\n\t\t\t\t\t\t\t\t\tbool tupleIsAlive, void *state);\n\t\t\t\t\t\t\t\t\t\t\t   GistSortedBuildLevelState *levelstate,\nstatic void gistInitBuffering(GISTBuildState *buildstate);\n\t\t\t\t\t\t\t  bool tupleIsAlive,", "partial_line": "void *s", "completion": "void *state); <|endoftext|>"}
{"context": "\treturn psprintf(\"OPERATOR(%s.%s)\",\n{\n\t\treturn;\n\t{\n\t\t\tappendPQExpBufferStr(q, \"TYPE INDEX \");", "partial_line": "case AMTYPE_", "completion": "case AMTYPE_TABLE: <|endoftext|>"}
{"context": "\tsnapshot.xcnt = xcnt = parseIntFromText(\"xcnt:\", &filebuf, path);\n\t\t\t\t(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),\n\t{\n\t\t\t\t\t(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),\n\t\t\t\t\t errmsg(\"a serializable transaction cannot import a snapshot from a non-serializable transaction\")));", "partial_line": "(errcode(ERRCODE_FEA", "completion": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "\tfor (i = 0; i < indnkeyatts; i++)\n\t\tint\t\t\tkeycol = indexInfo->ii_IndexAttrNumbers[i];\n\t\tDatum\t\tiDatum;\n\t\t\tiDatum = slot_getsysattr(slot, keycol, &isNull);\n\t\t\tiDatum = slot_getattr(slot, keycol, &isNull);", "partial_line": "index_update_stats(", "completion": "index_update_stats(Relation rel, <|endoftext|>"}
{"context": "\t\t\t\tif (readptr->eof_reached && i != state->activeptr)\n\t\t\tstate->memtuples[state->memtupcount++] = tuple;\n\t\t\tstate->backward = (state->eflags & EXEC_FLAG_BACKWARD) != 0;\n\t\t\t\t\tBufFileTell(state->myfile,\n\t\t\t\t}", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "static void ReindexMultipleInternal(const ReindexStmt *stmt, const List *relids,\nstatic bool ReindexRelationConcurrently(const ReindexStmt *stmt,\n{\nCheckIndexCompatible(Oid oldId,\n\tForm_pg_am\taccessMethodForm;", "partial_line": "boo", "completion": "bool\t\tret = true; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tint\t\t\tj;\n\t\t\t\t\t\t\t\t\t&splitPageInfo->entry[j],\n\t\t\t\t\t\t\t\t\tsplitPageInfo->isnull[j],\n\t\t\t\t\tzero_penalty = false;", "partial_line": "zero_penalty =", "completion": "zero_penalty = false; <|endoftext|>"}
{"context": "#include \"optimizer/geqo_random.h\"\nstatic int\tgimme_edge(PlannerInfo *root, Gene gene1, Gene gene2, Edge *edge_table);\n\tEdge\t   *edge_table;\n}\nfree_edge_table(PlannerInfo *root, Edge *edge_table)", "partial_line": "int", "completion": "int\t\t\tedge_total; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  \"rolname = current_user AS is_current_user \"\n\t\t\t\t\t\t  \"ORDER BY 2\", role_catalog);\n\t\t\t\t\t\t  \"ORDER BY 2\", role_catalog);\n\tres = executeQuery(conn, buf->data);\n\ti_rolcreaterole = PQfnumber(res, \"rolcreaterole\");", "partial_line": "i_rolcreatedb = PQfnumber(res, \"", "completion": "i_rolcreatedb = PQfnumber(res, \"rolcreatedb\"); <|endoftext|>"}
{"context": "\tZSTD_DStream *dstream;\nstatic void WriteDataToArchiveZstd(ArchiveHandle *AH, CompressorState *cs,\n\t\t\t\t paramname, ZSTD_getErrorName(res));", "partial_line": "ZSTD_c_enableLongDistan", "completion": "ZSTD_c_enableLongDistanceMatching, <|endoftext|>"}
{"context": "};\n\t\tslot->tts_values = (Datum *)\n\t\t\t(((char *) slot)\n\t\t\t + MAXALIGN(basesz));\n\t}", "partial_line": "return s", "completion": "return slot; <|endoftext|>"}
{"context": "\thasNext = jspGetNext(jsp, &next);\n\t{\n\t\tJsonbValue\tobj;\n\t\tAssert(tok == WJB_VALUE);\n\t\tpushJsonbValue(&ps, WJB_BEGIN_OBJECT, NULL);", "partial_line": "pushJsonbValue(", "completion": "pushJsonbValue(&ps, WJB_KEY, &valstr); <|endoftext|>"}
{"context": "\t\t\t\t   curitem->oper == OP_OR ||\n{\n\tuint32\t\tpos;\n\t*needcleanup = false;\n\tint\t\t\tcommonlen;", "partial_line": "QueryItem", "completion": "QueryItem  *ptr; <|endoftext|>"}
{"context": "\t\t\t   GinBtreeEntryInsertData *insertData,\n\t\t\t\tsize;\n\tPGAlignedBlock tupstore[2]; \n\t\ttotalsize += size + sizeof(ItemIdData);\n\tfor (i = FirstOffsetNumber; i <= maxoff; i++)", "partial_line": "lsize += MAXALIGN(IndexT", "completion": "lsize += MAXALIGN(IndexTupleSize(itup)) + sizeof(ItemIdData); <|endoftext|>"}
{"context": "\t\t\treturn -1;\n\t\t\tcomplete_next = true;\n\t\t\tmemcpy(PqGSSSendBuffer, &netlen, sizeof(uint32));\n\t\t\t\t\t\t\t\t\t   PqGSSSendLength - PqGSSSendNext);\n\t\t\t\t\treturn -1;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\theaders[cols++] = gettext_noop(\"FDW options\");\n\tif (attstorage_col >= 0)\n\tif (attcompression_col >= 0)\n\tif (attdescr_col >= 0)\n\t\t{", "partial_line": "fa", "completion": "false, false); <|endoftext|>"}
{"context": "\t\trequiredExtensions = NIL;\n\t\tdeleteDependencyRecordsForClass(ExtensionRelationId, extensionOid,\n\t\t\t\t\t\t\t\t requiredSchemas,\n}\n\t\tcase OBJECT_DATABASE:", "partial_line": "case", "completion": "case OBJECT_STATISTIC_EXT: <|endoftext|>"}
{"context": "\t}\n\t\tchar\t   *linkalloc = absolute ? NULL : relname(target, linkname);\n\t\t\tif (!fp)\n\t\t\tif (!tp)\n\t\t\twhile ((c = getc(fp)) != EOF)", "partial_line": "close_", "completion": "close_file(fp, directory, target); <|endoftext|>"}
{"context": "\t\t\t\tstrcpy(startbuf, zp->z_format);\n\t\t\t\ttype = addtype(startoff, startbuf, isdst,\n\t\t\tstarttime = zp->z_untiltime;\n\t\t\tif (!startttisstd)\n\tif (defaulttype < 0)", "partial_line": "addtt(rpytime", "completion": "addtt(rpytime(&xr, max_year + 1), <|endoftext|>"}
{"context": "{ 6, s_2_43, 3, 94, 0},\n{ 5, s_2_44, 3, 77, 0},\n{ 7, s_2_69, 3, 92, 0},\n{ 4, s_2_83, 81, 30, 0},\n{ 4, s_2_89, -1, 33, 0},", "partial_line": "{ 4, s_2_92,", "completion": "{ 4, s_2_92, -1, 39, 0}, <|endoftext|>"}
{"context": "\t}\n\ti_null_frac = PQfnumber(res, \"null_frac\");\n\ti_n_distinct = PQfnumber(res, \"n_distinct\");\n\t{\n\t\tappendStringLiteralAH(out, rsinfo->dobj.name, fout);", "partial_line": "for (int i = 0; i < rsinfo->nind", "completion": "for (int i = 0; i < rsinfo->nindAttNames; i++) <|endoftext|>"}
{"context": "\t\t    if (buf_ptr >= buf_end) {\n\t\t    }\n\t    if (verbose) {\n\t\t       ps.out_lines, ps.out_coms);\n\t}", "partial_line": "e_code +", "completion": "e_code += len; <|endoftext|>"}
{"context": "\t\t\tgettext_noop(\"Sets the time stamp up to which recovery will proceed.\"),\n\t\t\"\",\n\t\t{\"client_encoding\", PGC_USERSET, CLIENT_CONN_LOCALE,\n\t\t\"SQL_ASCII\",\n\t\t\tgettext_noop(\"An empty string means no prefix.\")", "partial_line": "NULL", "completion": "NULL, NULL, NULL <|endoftext|>"}
{"context": "AfterTriggerSetState(ConstraintsSetStmt *stmt)\n\tif (stmt->constraints == NIL)\n\t{\n\t\t\tRangeVar   *constraint = lfirst(lc);\n\t\t\t\t\telse if (stmt->deferred)", "partial_line": "constraint-", "completion": "constraint->relname))); <|endoftext|>"}
{"context": "\t\tprd->location = exprLocation(expr);\n\t\t\t\t\t\t errmsg(\"every bound following MAXVALUE must also be MAXVALUE\"),\n\t\t\t\tbreak;\n\t\t\t\tereport(ERROR,\n\t\t\t\tbreak;", "partial_line": "transformPartitionBound", "completion": "transformPartitionBoundValue(ParseState *pstate, Node *val, <|endoftext|>"}
{"context": "\tPG_FREE_IF_COPY(mr, 0);\nDatum\n\tuint64\t\tresult = 1;\n\t\t\t\t\t\t\tformat_type_be(scache->type_id))));\n\t\tmultirange_get_bounds(typcache->rngtype, mr, i, &lower, &upper);", "partial_line": "if (RANGE_HAS_LB", "completion": "if (RANGE_HAS_LBOUND(flags)) <|endoftext|>"}
{"context": "\t{\n\t\t\tec1->ec_min_security = Min(ec1->ec_min_security,\n\t\tem2 = add_eq_member(ec1, item2, item2_relids,\n\t\t\t\t\t\t\tjdomain, item2_type);\n\t}", "partial_line": "restrict", "completion": "restrictinfo->left_ec = ec2; <|endoftext|>"}
{"context": "\t\t\treturn table;\n\tMemoryContextSwitchTo(oldcxt);\n\t\tMemoryContext oldcxt;\n\tif (trigdesc == NULL)\n\t\t\tneed_old_upd = need_new_upd = need_new_ins = false;", "partial_line": "case CM", "completion": "case CMD_MERGE: <|endoftext|>"}
{"context": "\trecord->sourceline = sourceline;\nSetConfigOption(const char *name, const char *value,\n\t\t\t\t\t\t\t GUC_ACTION_SET, true, 0, false);\n\t\t\treturn buffer;\n\t\t\treturn config_enum_lookup_by_value((struct config_enum *) record,", "partial_line": "const", "completion": "const char * <|endoftext|>"}
{"context": "\t\t}\n\t\tsnprintf(new_tablespace_dir, MAXPGPATH, \"%s%s\",\n\tFILE\t   *script = NULL;\n\t\t\t\t\t\t\t\t\t\t  SCRIPT_PREFIX, SCRIPT_EXT);\n\t\t\t   \"\\nWARNING:  new data directory should not be inside the old data directory, i.e. %s\", old_cluster_pgdata);", "partial_line": "char\t\told_tablespace_", "completion": "char\t\told_tablespace_dir[MAXPGPATH]; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t  assign_collations_walker,\n\t\t\t\t\t\t\t\t\t\t\t  &loccontext);\n\t\t\t\t\tcollation = InvalidOid;\n\t\t\tif (strength == COLLATE_CONFLICT &&", "partial_line": "errhint(\"You can choose the collation b", "completion": "errhint(\"You can choose the collation by applying the COLLATE clause to one or both expressions.\"), <|endoftext|>"}
{"context": "#else\n{\n#ifdef MEMORY_CONTEXT_CHECKING\n\treturn MemoryChunkGetPointer(chunk);\n\tdlist_push_head(&set->blocks, &block->node);", "partial_line": "required_", "completion": "required_size = chunk_size + Bump_CHUNKHDRSZ; <|endoftext|>"}
{"context": "static RelationSyncEntry *\nget_rel_sync_entry(PGOutputData *data, Relation relation)\n\tbool\t\tfound;\n\t\t\t\t\t\t\t\t\t\t\t  &relid,\n\tif (!found)", "partial_line": "entry->re", "completion": "entry->replicate_valid = false; <|endoftext|>"}
{"context": "\t{p_isdigit, 0, A_NEXT, TPS_InDecimal, 0, NULL},\n\t{p_iseqC, 'E', A_PUSH, TPS_InMantissaFirst, 0, NULL},\n};\n\t{p_isEOF, 0, A_POP, TPS_Null, 0, NULL},\n\t{NULL, 0, A_POP, TPS_Null, 0, NULL}", "partial_line": "{p_iseqC,", "completion": "{p_iseqC, '_', A_NEXT, TPS_InXMLEntity, 0, NULL}, <|endoftext|>"}
{"context": "\t\t\tpathnode->path.startup_cost = child->startup_cost;\n\t\treturn -cmp;\n\tint\t\t\tcmp;\nMergeAppendPath *\n{", "partial_line": "MergeAppendPath *pathnode = make", "completion": "MergeAppendPath *pathnode = makeNode(MergeAppendPath); <|endoftext|>"}
{"context": "}\n\tint\t\t\tpadlen,\n\t\tvallen = strlen(value);\nstatic void\nfmtint(long long value, char type, int forcesign, int leftjust,", "partial_line": "in", "completion": "int\t\t\tbase; <|endoftext|>"}
{"context": "}\n\t\t\t\t\tLockClauseStrength strength, LockWaitPolicy waitPolicy,\n\tif (IsA(jtnode, RangeTblRef))\n\t\t\tperminfo->requiredPerms |= ACL_SELECT_FOR_UPDATE;\n\t\t\tmarkQueryForLocking(rte->subquery, (Node *) rte->subquery->jointree,", "partial_line": "markQueryForLocking(qry, j->rarg, strength, wai", "completion": "markQueryForLocking(qry, j->rarg, strength, waitPolicy, pushedDown); <|endoftext|>"}
{"context": "\t\t\t\tpset.bind_params[nparams - 1] = opt;\n\t\tignore_slash_options(scan_state);\n\t\tsuccess = do_pset(\"title\", opt, &pset.popt, pset.quiet);\n\t\tfree(opt);\n\treturn success ? PSQL_CMD_SKIP_LINE : PSQL_CMD_ERROR;", "partial_line": "enum trivalu", "completion": "enum trivalue reuse_previous = TRI_DEFAULT; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\t\t errmsg(\"unit \\\"%s\\\" not supported for type %s\",\n\t\t\t\tintresult = 0;\n\t\t}\n\t\tswitch (val)", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\tExecASInsertTriggers(estate, target_resultRelInfo, cstate->transition_capture);\n\tAfterTriggerEndQuery(estate);\n\t\t\t  const char *filename,\n\tFmgrInfo   *in_functions;\n\tcstate->copycontext = AllocSetContextCreate(CurrentMemoryContext,", "partial_line": "\"C", "completion": "\"COPY\", <|endoftext|>"}
{"context": "\tresult->magic = STATS_NDISTINCT_MAGIC;\n\t\t{\n\t\t\tAssert(itemcnt <= result->nitems);\n\t\t\t\t\t\t   ObjectIdGetDatum(mvoid), BoolGetDatum(inh));\n\tndist = SysCacheGetAttr(STATEXTDATASTXOID, htup,", "partial_line": "for (i = 0;", "completion": "for (i = 0; i < ndistinct->nitems; i++) <|endoftext|>"}
{"context": "                    {   int ret = r_reflexive(z);\n                        if (ret < 0) return ret;\n                {   int m8 = z->l - z->c; (void)m8;\n                    }\n                    z->c = z->l - m8;", "partial_line": "{   int", "completion": "{   int ret = r_noun(z); <|endoftext|>"}
{"context": "\t\t}\nstatic int\n\tint\t\t\ti,\n\tcommonLen = VARSIZE_ANY_EXHDR(text0);\n\t{", "partial_line": "if (tmp <", "completion": "if (tmp < commonLen) <|endoftext|>"}
{"context": "\tAssert(*unit != NULL);\nconvert_real_from_base_unit(double base_value, int base_unit,\n\tif (base_unit & GUC_UNIT_MEMORY)\n\t{\n\t\t\t*value = base_value / table[i].multiplier;", "partial_line": "if (*value", "completion": "if (*value > 0 && <|endoftext|>"}
{"context": "\t}\n\t\t\treturn JSON_EXPECTED_END;\n\t\tcase JSON_PARSE_STRING:\n\t\t\treturn JSON_EXPECTED_STRING;\n\t\t\treturn JSON_EXPECTED_ARRAY_FIRST;", "partial_line": "return J", "completion": "return JSON_EXPECTED_COLON; <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\t\t   bslot->buffer);\nheapam_tuple_insert(Relation relation, TupleTableSlot *slot, CommandId cid,\n\t\t\t\t\tint options, BulkInsertState bistate)\n\ttuple->t_tableOid = slot->tts_tableOid;", "partial_line": "HeapTupleHeaderSet", "completion": "HeapTupleHeaderSetSpeculativeToken(tuple->t_data, specToken); <|endoftext|>"}
{"context": "\t\t\theap_freetuple(tuple);\n\tattTup->attgenerated = '\\0';\n\tRemoveAttrDefault(RelationGetRelid(rel), attnum, DROP_RESTRICT,\n\tbool\t\tnewtarget_default;\n\tHeapTuple\ttuple,", "partial_line": "Form_", "completion": "Form_pg_attribute attrtuple; <|endoftext|>"}
{"context": "\t\t\t\t\t\tmsg = gettext_noop(\"must be owner of subscription %s\");\n\t\t\t\t\tcase OBJECT_CAST:\n\t\t\t\t\tcase OBJECT_DEFAULT:\n\t\t\t\t\tcase OBJECT_TRANSFORM:\n\t\t\t\t\t\telog(ERROR, \"unsupported object type: %d\", objtype);", "partial_line": "aclcheck_error_col(AclResult acle", "completion": "aclcheck_error_col(AclResult aclerr, ObjectType objtype, <|endoftext|>"}
{"context": "\t\t\treturn NULL;\n\t\t}\n{\n\t\treturn;\nstatic void", "partial_line": "while", "completion": "while (sr != NULL) <|endoftext|>"}
{"context": "\tIndexTuple\tres = NULL;\n\tif (compressedList)\n\tif (!res)\nvoid\n\t{", "partial_line": "items,", "completion": "items, nitem, <|endoftext|>"}
{"context": "\telse\n\t\t\t\t\t\t   save_sec_context | SECURITY_RESTRICTED_OPERATION);\n\t\tconst int\tprogress_index[] = {\n\t\t\tPROGRESS_SCAN_BLOCKS_DONE,\n\t\tpgstat_progress_update_multi_param(6, progress_index, progress_vals);", "partial_line": "Form_pg_index in", "completion": "Form_pg_index indexForm; <|endoftext|>"}
{"context": "calc_non_nestloop_required_outer(Path *outer_path, Path *inner_path)\n\tRelids\t\tinnerrelids PG_USED_FOR_ASSERTS_ONLY;\n\t\touterrelids = outer_path->parent->relids;\n\trequired_outer = bms_union(outer_paramrels, inner_paramrels);\n}", "partial_line": "List", "completion": "List\t   *jclauses = NIL; <|endoftext|>"}
{"context": "\t\t\t\t\t\tchar\t   *endptr;\n\t\t\t\t\t\tval = (TransactionId) strtoul(token, &endptr, 10);\n\t\t\t\t\tBitmapset  *bms = NULL;\n\t\t\t\t\t\tif (token == NULL)\n\t\t\t\t\t\t\telog(ERROR, \"unterminated Bitmapset structure\");", "partial_line": "l = lapp", "completion": "l = lappend(l, nodeRead(token, tok_len)); <|endoftext|>"}
{"context": "\t\tRelation\tchildrel;\n\t\tchildrel = table_open(childrelid, NoLock);\n\t\t}\n\t}\n\tObjectAddress myself,", "partial_line": "refere", "completion": "referenced; <|endoftext|>"}
{"context": "{\n\tconst char *objname;\n\tslist_node\tnext;\nstatic const char *stringify_adefprivs_objtype(ObjectType objtype);\nCreateEventTrigger(CreateEventTrigStmt *stmt)", "partial_line": "ListCel", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"show standard_conforming_strings\", ECPGt_EOIT, \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "if (sqlc", "completion": "if (sqlca.sqlwarn[0] == 'W') sqlprint(); <|endoftext|>"}
{"context": "#include \"catalog/pg_type.h\"\n#include \"nodes/nodeFuncs.h\"\n\t\t\t\tbool replace,\n\t\t\t\tconst char *probin,\n\t\t\t\tchar prokind,", "partial_line": "Datum t", "completion": "Datum trftypes, <|endoftext|>"}
{"context": "\tList\t   *targs;\n\t}\n\t\t\t\t\t\t\t\t\t\t\t\t EXPR_KIND_ORDER_BY));\n\t\t\t\t\t\t\t fn,\n\tSubLink    *sublink;", "partial_line": "Query", "completion": "Query\t   *qtree; <|endoftext|>"}
{"context": "static const symbol s_55_0[2] = { 0xCF, 0x80 };\nstatic const symbol s_55_1[6] = { 0xCE, 0xB1, 0xCF, 0x83, 0xCF, 0x80 };\nstatic const symbol s_55_2[8] = { 0xCE, 0xB1, 0xCE, 0xBD, 0xCF, 0x85, 0xCF, 0x80 };\nstatic const symbol s_55_8[12] = { 0xCE, 0xB4, 0xCF, 0x81, 0xCE, 0xBF, 0xCF, 0x83, 0xCE, 0xBF, 0xCF, 0x80 };\nstatic const symbol s_55_14[6] = { 0xCE, 0xBF, 0xCF, 0x85, 0xCF, 0x81 };", "partial_line": "static const symbol s_55", "completion": "static const symbol s_55_19[2] = { 0xCF, 0x84 }; <|endoftext|>"}
{"context": "\t\tbinary_upgrade_extension_member(q, &collinfo->dobj,\n\tif (collinfo->dobj.dump & DUMP_COMPONENT_DEFINITION)\n\t\t\t\t\t ARCHIVE_OPTS(.tag = collinfo->dobj.name,\n\tdestroyPQExpBuffer(q);\n\tint\t\t\ti_condefault;", "partial_line": "bool\t\tco", "completion": "bool\t\tcondefault; <|endoftext|>"}
{"context": "\t\trawEnt->generated = '\\0';\n\t\tAddRelationNewConstraints(rel, list_make1(rawEnt), NIL,\nATExecCookedColumnDefault(Relation rel, AttrNumber attnum,\n}\n{", "partial_line": "colN", "completion": "colName))); <|endoftext|>"}
{"context": "bottomup_nblocksfavorable(IndexDeleteCounts *blockgroups, int nblockgroups,\n\tint\t\t\tnblocksfavorable = 0;\n\t\tif (lastblock != -1 &&\n\t\t\t (int64) block > lastblock + BOTTOMUP_TOLERANCE_NBLOCKS))\n\t}", "partial_line": "retu", "completion": "return nblocksfavorable; <|endoftext|>"}
{"context": "static bool\nDeadLockCheckRecurse(PGPROC *proc)\n\t\treturn true;\t\t\t\n\t\treturn false;\t\t\t\n\toldPossibleConstraints = nPossibleConstraints;", "partial_line": "elog(FATAL,", "completion": "elog(FATAL, \"inconsistent results during deadlock check\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  gettext_noop(\"unsafe\"),\n\t\t\t\t\t\t\t  gettext_noop(\"Parallel\"));\n\t\t\t\t\t\t  gettext_noop(\"definer\"),\n\t\tprintACLColumn(&buf, \"p.proacl\");\n\t\t\t\t\t\t  \",\\n CASE WHEN l.lanname IN ('internal', 'c') THEN p.prosrc END as \\\"%s\\\"\",", "partial_line": "\"\\n     LEFT JOIN pg_c", "completion": "\"\\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\\n\"); <|endoftext|>"}
{"context": "\tExpr\t   *clause = restrictinfo->clause;\n\t\t\t\trighttype;\n\t\trestrictinfo->left_ec = restrictinfo->left_ec->ec_merged;\n{\n\t{", "partial_line": "RestrictInfo *", "completion": "RestrictInfo *rinfo = (RestrictInfo *) lfirst(i); <|endoftext|>"}
{"context": "\tint\t\t\tndigits = var->ndigits;\n\t\tresult = var->digits[0];\n\t\t{\n\t\t}\n\t\t}", "partial_line": "res", "completion": "result = -result; <|endoftext|>"}
{"context": "\t{\n\t\t\t\tMD5_BUFLEN - sizeof(ctx->md5_n));\n\tmemmove(&ctx->md5_buf[56], &ctx->md5_n8[0], 8);\n\tctx->md5_buf[58] = ctx->md5_n8[5];\n\tctx->md5_buf[60] = ctx->md5_n8[3];", "partial_line": "#ifndef W", "completion": "#ifndef WORDS_BIGENDIAN <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"index \\\"%s\\\" is not partitioned\",\n\t\t\t\t RelationGetRelationName(parentRel));\n\t\t\tbreak;\n\tList\t   *partexprs = get_partition_exprs(key);\n\tif (spec->is_default)", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tif (isParallelApplyWorker(w))\n\t\t{\nbool\n{\n\tint\t\t\ti;", "partial_line": "int\t\t\tnsy", "completion": "int\t\t\tnsyncworkers; <|endoftext|>"}
{"context": "\ttuple = SearchSysCache1(INDEXRELID, ObjectIdGetDatum(index_oid));\n\t\treturn false;\n\tresult = rd_index->indisreplident;\n\tReleaseSysCache(tuple);\n\tForm_pg_index rd_index;", "partial_line": "HeapTu", "completion": "HeapTuple\ttuple; <|endoftext|>"}
{"context": "\tDatum\t\tvalues[Natts_pg_publication_rel];\n\tObjectAddress myself,\n\t\t\t\t\t\t\t  ObjectIdGetDatum(pubid)))\n\t\t\t\t\t\tRelationGetRelationName(targetrel), pub->name)));\n\t\tObjectIdGetDatum(relid);", "partial_line": "if (pri->c", "completion": "if (pri->columns) <|endoftext|>"}
{"context": "\tvxids[count].procNumber = INVALID_PROC_NUMBER;\n\tLWLockAcquire(partitionLock, LW_EXCLUSIVE);\n\tlock = (LOCK *) hash_search_with_hash_value(LockMethodLockHash,\n\tproclocktag.myLock = lock;\n\tproclocktag.myProc = proc;", "partial_line": "proclock = (PROCLOCK *) hash_search_w", "completion": "proclock = (PROCLOCK *) hash_search_with_hash_value(LockMethodProcLockHash, <|endoftext|>"}
{"context": "#include \"ecpglib_extern.h\"\n\t\t\treturn \"char\";", "partial_line": "case", "completion": "case ECPGt_unsigned_char: <|endoftext|>"}
{"context": "\telse\n\treturn result;\nstatic void\n\t\t\t   GinStatsData *buildStats)\n#endif", "partial_line": "if (GinPageIsIncom", "completion": "if (GinPageIsIncompleteSplit(BufferGetPage(parent->buffer))) <|endoftext|>"}
{"context": "\tconst TupleTableSlotOps *tts_ops = NULL;\n\tExprEvalOp\topcode = op->opcode;\n\t\t   opcode == EEOP_OUTER_FETCHSOME ||\n\t\t   opcode == EEOP_SCAN_FETCHSOME ||\n\t\t   opcode == EEOP_OLD_FETCHSOME ||", "partial_line": "isfixed", "completion": "isfixed = op->d.fetch.kind != NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t errmsg(\"improper %%TYPE reference (too many dotted names): %s\",\n\t\t\t\t\t\t\t\tNameListToString(typeName->names)),\n\t\t\t\tereport(ERROR,\n\t\t}\n\t\telse", "partial_line": "TypeNameToString(t", "completion": "TypeNameToString(typeName), <|endoftext|>"}
{"context": "#ifndef WIN32\n#include <win32.h>", "partial_line": "#if", "completion": "#ifndef WIN32 <|endoftext|>"}
{"context": "\t\tSetOuterUserId(userid, is_superuser);\n\telse\n\t\troleid = SessionUserId;\n\t\tSetRoleIsActive = true;\nchar *", "partial_line": "return", "completion": "return result; <|endoftext|>"}
{"context": "ExecJustHashOuterVarVirt(ExprState *state, ExprContext *econtext,\n{\n{\n\tCheckOpSlotCompatibility(fetchop, econtext->ecxt_outertuple);\ndispatch_compare_ptr(const void *a, const void *b)", "partial_line": "const ExprE", "completion": "const ExprEvalOpLookup *la = (const ExprEvalOpLookup *) a; <|endoftext|>"}
{"context": "\t\t{\n\t\tif (SOFT_ERROR_OCCURRED(escontext))\n\t\t\t\tnnums = oidArray->dim1;\n\tlocfcinfo->args[1].value = ObjectIdGetDatum(OIDOID);\n\t\tARR_HASNULL(result) ||", "partial_line": "PG_RETURN_POINTER(", "completion": "PG_RETURN_POINTER(result); <|endoftext|>"}
{"context": "\t}\n\t\tif (seginfo->action != GIN_SEGMENT_UNMODIFIED)\n{\n\tchar\t   *ptr;\n\tAssert(lsize == leaf->lsize);", "partial_line": "seginfo = d", "completion": "seginfo = dlist_container(leafSegmentInfo, node, node); <|endoftext|>"}
{"context": "\t\t\t\t\t\telse\n\t\t\t\t\tpush_back_token(tok4, &aux4, yyscanner);\n\t\t\t\t\t\t\t\t\t\t\t  &aux1.lval.cword))\n\t\t\t\t\t\ttok1 = T_CWORD;\n\t\t\t\tpush_back_token(tok2, &aux2, yyscanner);", "partial_line": "else if (!aux1.lval.", "completion": "else if (!aux1.lval.word.quoted && <|endoftext|>"}
{"context": "\t\tExecARInsertTriggers(estate, resultRelInfo, slot,\nExecSimpleRelationUpdate(ResultRelInfo *resultRelInfo,\n\tAssert(rel->rd_rel->relkind == RELKIND_RELATION);\n\tif (resultRelInfo->ri_TrigDesc &&\n\t\t\t\t\t\t\t\t\t\t\t\t   (update_indexes == TU_Summarizing));", "partial_line": "CheckAndReportConflict(re", "completion": "CheckAndReportConflict(resultRelInfo, estate, CT_UPDATE_EXISTS, <|endoftext|>"}
{"context": "\t\tmemcpy(e_code, token, len);\n\t\tif (ps.want_blank)\n\t    scase = false;\n\tcase semicolon:\t\n\t\tps.in_or_st = false;", "partial_line": "ps.in_", "completion": "ps.in_parameter_declaration = 0; <|endoftext|>"}
{"context": "{ 12, s_35_0, -1, 1, 0},\nstatic const symbol s_36_4[2] = { 0xCF, 0x87 };\nstatic const symbol s_36_9[8] = { 0xCE, 0xB1, 0xCF, 0x80, 0xCE, 0xBF, 0xCE, 0xB8 };\nstatic const struct among a_36[12] =\n{ 4, s_37_1, -1, 1, 0}", "partial_line": "static const symbol s_38_6[10] = { 0xCE, 0xBF, 0xCF, 0x84, 0xCE, 0x", "completion": "static const symbol s_38_6[10] = { 0xCE, 0xBF, 0xCF, 0x84, 0xCE, 0xB1, 0xCE, 0xBD, 0xCE, 0xB5 }; <|endoftext|>"}
{"context": "\t\tswitch (objtype)\n\t\t\t\t\tget_object_address_attrdef(objtype, castNode(List, object),\n\t\t\t\t\t\t\t\t\t\t\t   &relation, lockmode,\n\t\t\tcase OBJECT_TABCONSTRAINT:\n\t\t\t\t\tobjlist = castNode(List, object);", "partial_line": "missing_", "completion": "missing_ok); <|endoftext|>"}
{"context": "\tif (endOfRecovery)\nrecoveryApplyDelay(XLogReaderState *record)\n\tdelayUntil = TimestampTzPlusMilliseconds(xtime, recovery_min_apply_delay);\n\twhile (true)\n\t\tif (CheckForStandbyTrigger())", "partial_line": "(void) WaitLatch", "completion": "(void) WaitLatch(&XLogRecoveryCtl->recoveryWakeupLatch, <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tvalsize = strlen(*conf->variable);\n\t\t\t\telse\n\t\t\tbreak;\n\tsize = sizeof(Size);", "partial_line": "int", "completion": "int\t\t\tn; <|endoftext|>"}
{"context": "\tchar\t   *oli;\t\t\t\n\tstatic bool force_nonopt = false;\n\t\t\tfor (int i = optind; i < argc - 1; i++)", "partial_line": "if (place[0]", "completion": "if (place[0] == '-' && place[1] == '\\0') <|endoftext|>"}
{"context": "\t\tShmemInitStruct(\"Fast Path Strong Relation Lock Data\",\n\tif (!found)\n\tHASHCTL\t\tinfo;\n\t\t\t\t\t\t\t\t\t  HASH_ELEM | HASH_BLOBS);\nGetLocksMethodTable(const LOCK *lock)", "partial_line": "LOCKMETHODID lockmet", "completion": "LOCKMETHODID lockmethodid = LOCK_LOCKMETHOD(*lock); <|endoftext|>"}
{"context": "\t}\n\t\t\tunend = (OffsetNumber *) ((char *) ptr + len);\n\t\taction = XLogReadBufferForRedoExtended(record, 1, RBM_NORMAL, true, &writebuf);\n\t\tchar\t   *data;\n\t\t\tOffsetNumber *towrite = (OffsetNumber *) data;", "partial_line": "data += s", "completion": "data += sizeof(OffsetNumber) * xldata->ntups; <|endoftext|>"}
{"context": "                    case 5:\n                        break;\n                    case 6:\n                        break;\n                        {   int ret = slice_from_s(z, 2, s_10);", "partial_line": "la", "completion": "lab2: <|endoftext|>"}
{"context": "\tamroutine->amvacuumcleanup = hashvacuumcleanup;\n\tamroutine->ambuildphasename = NULL;\n\tamroutine->aminitparallelscan = NULL;\n\t\telog(ERROR, \"index \\\"%s\\\" already contains data\",\n\tif (index->rd_rel->relpersistence != RELPERSISTENCE_TEMP)", "partial_line": "_h_spoolde", "completion": "_h_spooldestroy(buildstate.spool); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t errmsg(\"column filter expression must not be null\"),\n\t\tcolno++;\n\tDatum\t   *values = slot->tts_values;\n\tordinalitycol =\n\t\t((TableFuncScan *) (tstate->ss.ps.plan))->tablefunc->ordinalitycol;", "partial_line": "att->attt", "completion": "att->atttypid, <|endoftext|>"}
{"context": "\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t true, false);\n\t\telse\n\t\t\t\t\t : errmsg(\"unnamed XML element value must be a column reference\"),\n\ti = 0;", "partial_line": "foreach(lc, x-", "completion": "foreach(lc, x->args) <|endoftext|>"}
{"context": "\tbase_yy_extra_type *yyextra = pg_yyget_extra(yyscanner);\n\tint\t\t\tcur_token;\n\tint\t\t\tcur_token_length;\n\tYYLTYPE\t\tcur_yylloc;\n\t\tlvalp->core_yystype = yyextra->lookahead_yylval;", "partial_line": "cur_token_leng", "completion": "cur_token_length = 6; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_DATETIME_VALUE_OUT_OF_RANGE),\nTimestamp\n\t\tTIMESTAMP_NOEND(result);\n\t\t\t\t*overflow = 1;\n\t\t\t\tTIMESTAMP_NOEND(result);", "partial_line": "retur", "completion": "return result; <|endoftext|>"}
{"context": "} while(0)\n\tAssert(CacheMemoryContext != NULL);\n\tCACHE_elog(DEBUG2, \"CatalogCacheInitializeCache: %s, %d keys\",\n\t\t\tif (cache->cc_keyno[i] < 0)\n}", "partial_line": "if (touch", "completion": "if (touch_index && <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase LOCKTAG_PAGE:\n\t\t\t\t\t\t\t _(\"tuple (%u,%u) of relation %u of database %u\"),\n\t\t\t\t\t\t\t _(\"speculative token %u of transaction %u\"),\n\t\t\t\t\t\t\t _(\"user lock [%u,%u,%u]\"),", "partial_line": "_(\"adv", "completion": "_(\"advisory lock [%u,%u,%u,%u]\"), <|endoftext|>"}
{"context": "deleteOneObject(const ObjectAddress *object, Relation *depRel, int flags)\n\t\t\t\t\tAnum_pg_depend_objsubid,\n\telse\ndoDeletion(const ObjectAddress *object, int flags)\n\t\t\t\t\tindex_drop(object->objectId, concurrent, concurrent_lock_mode);", "partial_line": "RemoveAttribut", "completion": "RemoveAttributeById(object->objectId, <|endoftext|>"}
{"context": "                if (ret < 0) return ret;\n            }\n            break;\n            {   int ret = slice_from_s(z, 3, s_32);\n                if (ret < 0) return ret;", "partial_line": "if (ret", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "PQsslStruct(PGconn *conn, const char *struct_name)\nconst char *const *\n{\nvoid\nPQsetSSLKeyPassHook_OpenSSL(PQsslKeyPassHook_OpenSSL_type hook)", "partial_line": "#if", "completion": "#ifndef ENABLE_GSS <|endoftext|>"}
{"context": "\tmemset(&result, 0, sizeof(JsonbInState));\n\t\t\tgoto close_object;\n\t\t\tbreak;\n\t\tint\t\t\tlen;\n\t\t\t\t\t(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),", "partial_line": "v.val.strin", "completion": "v.val.string.len = len; <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\tconst void *startup_data, size_t startup_data_len,\n\t\t}\n\t\tClosePostmasterPorts(child_type == B_LOGGER);\n\t\tif (!child_process_kinds[child_type].shmem_attach)", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t\t}\n\t}\n\t\t\t\treturn false;\n\t\tif ((str[i] & 0x80) == 0 || (str[i] & 0xC0) == 0xC0)\n\t\t\tpg_wchar\tcurr = utf8_to_unicode(str + i);", "partial_line": "check_special_conditions(int conditions,", "completion": "check_special_conditions(int conditions, const char *str, size_t len, <|endoftext|>"}
{"context": "\tgetExtensionMembership(fout, extinfo, numExtensions);\n\tpg_log_info(\"reading user-defined types\");\n\tpg_log_info(\"reading user-defined operators\");\n\tgetConversions(fout);\n\tgetCasts(fout);", "partial_line": "getEve", "completion": "getEventTriggers(fout); <|endoftext|>"}
{"context": "#include \"access/brin_pageops.h\"\n#include \"catalog/pg_am.h\"\n#include \"pgstat.h\"", "partial_line": "Oid", "completion": "Oid\t\t\theaprelid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t errmsg(\"incorrect binary data format in bind parameter %d\",\n\t\t}\n\t\tPlannedStmt *plan = lfirst_node(PlannedStmt, lc);\n\terror_context_stack = error_context_stack->previous;\n\tif (whereToSendOutput == DestRemote)", "partial_line": "ereport(", "completion": "ereport(LOG, <|endoftext|>"}
{"context": "\t\t\t}\n\t\tcase T_IndexOnlyScan:\n\t\t{\n\tif (!es->analyze)\n\t\treturn;", "partial_line": "if (es->format", "completion": "if (es->format != EXPLAIN_FORMAT_TEXT) <|endoftext|>"}
{"context": "resolve_polymorphic_argtypes(int numargs, Oid *argtypes, char *argmodes,\n\tbool\t\thave_polymorphic_result = false;\n\tbool\t\thave_anymultirange_result = false;\n\t\t\t\tif (argmode == PROARGMODE_OUT || argmode == PROARGMODE_TABLE)\n\t\t\t\t{", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tZSTD_DStream *dstream;\nstatic void WriteDataToArchiveZstd(ArchiveHandle *AH, CompressorState *cs,", "partial_line": "paramname, ZST", "completion": "paramname, ZSTD_getErrorName(res)); <|endoftext|>"}
{"context": "\t\tprogress_report(false);\n\t\treport_backup_error(context, \"could not close file \\\"%s\\\": %m\",\n}\nreport_extra_backup_files(verifier_context *context)\n\t\tif (!m->matched && !should_ignore_relpath(context, m->pathname))", "partial_line": "verify_file_checksu", "completion": "verify_file_checksum(verifier_context *context, manifest_file *m, <|endoftext|>"}
{"context": "\t\t\tif (!PQgetisnull(res, i, 2))\n\t\t\telse if (!PQgetisnull(res, i, 1))\n\t\t\t\t\t   rel->datinfo->datname, rel->nspname, rel->relname,\n\t\t\t\t\t   PQgetvalue(res, i, 1));\t\n\t\t\tprintf(\"    %s\\n\", msg);", "partial_line": "FREE_A", "completion": "FREE_AND_SET_NULL(msg); <|endoftext|>"}
{"context": "} while (0)\n} while (0)\n\tcompletion_case_sensitive = (cs); \\\n\tmatches = rl_completion_matches(text, complete_from_list); \\\ndo { \\", "partial_line": "COMPLETE", "completion": "COMPLETE_WITH_LIST(list); \\ <|endoftext|>"}
{"context": "};\n#ifdef USE_BSD_AUTH\n\t\"bsd\",\n#endif\nstatic char *share_path = NULL;", "partial_line": "static char", "completion": "static char *lc_collate = NULL; <|endoftext|>"}
{"context": "\t}\n\trestore_backend_variables(&param);\n}\nstatic void\n\tif (param->client_sock.sock != PGINVALID_SOCKET)", "partial_line": "read_inheritable_socket(&MyClientSocket->sock", "completion": "read_inheritable_socket(&MyClientSocket->sock, &param->inh_sock); <|endoftext|>"}
{"context": "#include \"utils/fmgroids.h\"\n#include \"utils/fmgrprotos.h\"\nstatic int", "partial_line": "typedef", "completion": "typedef struct <|endoftext|>"}
{"context": "static void\n\t\t\t\t\t\t  AggStatePerAgg peragg,\n\t\t\t\t\t\t  AggStatePerGroup pergroupstate,\n\toldContext = MemoryContextSwitchTo(aggstate->ss.ps.ps_ExprContext->ecxt_per_tuple_memory);\n\t\tif (pertrans->serialfn.fn_strict && pergroupstate->transValueIsNull)", "partial_line": "FunctionCallInf", "completion": "FunctionCallInfo fcinfo = pertrans->serialfn_fcinfo; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tbreak;\t\t\t\t\n\t\t{\n\t\t\t\t\tbreak;\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tkey->sk_collation, firstdatum,", "partial_line": "key->sk_col", "completion": "key->sk_collation, lastdatum, <|endoftext|>"}
{"context": "\t\tcase PGC_BACKEND:\n\t\t\t{\n\t\t\t\t\t\t\t\t\trecord->name)));\n\t\tif (InLocalUserIdChange())\n\t\t\t\t\t\t\trecord->name)));", "partial_line": "if (recor", "completion": "if (record->flags & GUC_NO_RESET) <|endoftext|>"}
{"context": "\t\t\t\t  Oid *obj_oid)\n\t\tcase EditableView:\n\tif (!echo_hidden_command(query->data))\n\t{\n\tif (PQresultStatus(res) == PGRES_TUPLES_OK && PQntuples(res) == 1)", "partial_line": "case Editabl", "completion": "case EditableView: <|endoftext|>"}
{"context": "\t\t\t\t\t\twdatum->datum = plpgsql_Datums[ns->itemno];\n{\n\t\t\t\t\t\t\tnew = plpgsql_build_recfield(rec, word2);\n\t\t\t\t\t\telse\n\t\t\t\t\t\twdatum->idents = idents;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tControlFile->data_checksum_version = data_checksum_version;\n\tControlFile->catalog_version_no = CATALOG_VERSION_NO;\n\t\t\t\tControlFile,\n\tif (close(fd) != 0)\n\tint\t\t\tfd;", "partial_line": "fd = BasicOpenFile", "completion": "fd = BasicOpenFile(XLOG_CONTROL_FILE, <|endoftext|>"}
{"context": "\tint\t\t\tabbrind;\n\tabbrind = *indx;\n}\nbool\n\t\t\treturn false;", "partial_line": "*gmtoff = sp->ttis[0]", "completion": "*gmtoff = sp->ttis[0].tt_utoff; <|endoftext|>"}
{"context": "\t}\nbool\n\tOid\t\t\tpublish_as_relid = RelationGetRelid(relation);\n\tint\t\t\tx;\n\t{", "partial_line": "publish_as_relid = Get", "completion": "publish_as_relid = GetTopMostAncestorInPublication(pubid, ancestors, NULL); <|endoftext|>"}
{"context": "#include \"executor/nodeIndexonlyscan.h\"\n#include \"executor/nodeIndexscan.h\"\n#include \"executor/nodeUnique.h\"\n#include \"miscadmin.h\"\n\tListCell   *l;", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "static backslashResult exec_command_html(PsqlScanState scan_state, bool active_branch);\nstatic backslashResult exec_command_pset(PsqlScanState scan_state, bool active_branch);\nstatic backslashResult exec_command_set(PsqlScanState scan_state, bool active_branch);\nstatic backslashResult exec_command_syncpipeline(PsqlScanState scan_state, bool active_branch);\nstatic backslashResult exec_command_T(PsqlScanState scan_state, bool active_branch);", "partial_line": "static void ignore_slash_filepipe(Ps", "completion": "static void ignore_slash_filepipe(PsqlScanState scan_state); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t  estate->readonly_func);\n\t\t\t\t\t\t\t\t\t\t estate->readonly_func, maxtuples);\n\t\t\t\t\t errmsg(\"query is SELECT INTO, but it should be plain SELECT\"),\n\t\telse\n{", "partial_line": "exec_ev", "completion": "exec_eval_cleanup(estate); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  btree->entryKey,\n\t\t\t\t\t\t\t\t\t  btree->entryCategory,\n}\nentryFindChildPtr(GinBtree btree, Page page, BlockNumber blkno, OffsetNumber storedOff)\n{", "partial_line": "IndexTuple", "completion": "IndexTuple\titup; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\"n.nspname\", \"c.relname\", NULL,\n\ttermPQExpBuffer(&buf);\n\t\t\telse if (showTables)\n\t\t\telse if (showForeign)\n\t\t\tif (ntypes != 1)", "partial_line": "pg_log_error(\"Did no", "completion": "pg_log_error(\"Did not find any tables.\"); <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\tif (!(cnfa->stflags[ca->to] & CNFA_NOPROGRESS))\n\t\tif (noprogress)\n\t\tFDEBUG((\"c%d[%d]->c%d\\n\",\n\treturn p;", "partial_line": "d =", "completion": "d = getladfa(v, n); <|endoftext|>"}
{"context": "\t\treturn NULL;\n\treturn PQexecFinish(conn);\n}\nint\nstatic int", "partial_line": "PQsendTypedCommand(PGconn *con", "completion": "PQsendTypedCommand(PGconn *conn, char command, char type, const char *target) <|endoftext|>"}
{"context": "\t\t}\n\t}\n\telse\n\treturn clamp_row_est(return_tuples);\n\t\t\t   List *windowFuncs, WindowClause *winclause,", "partial_line": "startup_cost += arg", "completion": "startup_cost += argcosts.startup; <|endoftext|>"}
{"context": "\t\tint\t\t\tidx;\n\t\t}\n\t\tif (tbm->nchunks)\n\t\t\ttbm->ptchunks = dsa_allocate(tbm->dsa, sizeof(PTIterationArray) +\n\t\t\tptbase = dsa_get_address(tbm->dsa, tbm->dsapagetable);", "partial_line": "tbm->dsapagetable = dsa_allocate(tbm->d", "completion": "tbm->dsapagetable = dsa_allocate(tbm->dsa, sizeof(PTEntryArray) + <|endoftext|>"}
{"context": "\t\tcase CURL_POLL_REMOVE:\n\t{\n\t\t{\n\t\t\t{\n\tif (timerfd_settime(actx->timerfd, 0  , &spec, NULL) < 0)", "partial_line": "timeout", "completion": "timeout = 1; <|endoftext|>"}
{"context": "\t\ttuple = ExecFetchSlotHeapTuple(slots[i], true, NULL);\n\t\t\tnpages_used = 0;\n\t\t\t\t\t\t\t\t\t\t   npages - npages_used);\n\t\t{\n\t\t\tinit = starting_with_empty_page;", "partial_line": "xlrec->f", "completion": "xlrec->flags = 0; <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\tresult = cstring_to_text_with_len(buf.data, buf.len);\n\t\t\t\t\t*op->resvalue = PointerGetDatum(result);\n\t\tcase IS_XMLPARSE:\n\t\t\t\t}", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tproclock->groupLeader = proc->lockGroupLeader != NULL ?\n\t\tdlist_push_tail(&proc->myProcLocks[partition], &proclock->procLink);\n\t\t\t\t}\n\tlock->nRequested++;\n\tlock->requested[lockmode]++;", "partial_line": "lockMethodTable->lockModeNam", "completion": "lockMethodTable->lockModeNames[lockmode], <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_CONFIG_FILE_ERROR),\n\t\t}\n\t\t\t{\n\t}\n\t\t{", "partial_line": "ereport(el", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase RTSubEqualStrategyNumber:\n\t\t\t\t\tbitmap &= 1 | (1 << 1);\n\t\t\tcase RTEqualStrategyNumber:", "partial_line": "if (commonbits < ip_b", "completion": "if (commonbits < ip_bits(argument)) <|endoftext|>"}
{"context": "\tfor (ss = d->ssets, i = d->nssused; i > 0; ss++, i--)\n\t\t chr *start,\t\t\t\n\tchr\t\t   *realmin = (min == v->stop) ? min : min + 1;\n\tchr\t\t   *realmax = (max == v->stop) ? max : max + 1;\n\tcolor\t\tco;", "partial_line": "FDEBUG((\"char %c, color %ld\\", "completion": "FDEBUG((\"char %c, color %ld\\n\", (char) *cp, (long) co)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t ControlFile_source_after.minRecoveryPointTLI);\n\telse\n\tmemcpy(&ControlFile_new, &ControlFile_source_after, sizeof(ControlFileData));\n\tif (!dry_run)\n\t}", "partial_line": "if (ControlFile_target.s", "completion": "if (ControlFile_target.state != DB_SHUTDOWNED && <|endoftext|>"}
{"context": "\tif (row < 0)\n\toffset = sqlda_common_total_size(res, row, compat, offset);\n\t\treturn offset;\nstruct sqlda_compat *\n\tchar\t   *fname;", "partial_line": "sqlvar = (struct sqlvar_compat *", "completion": "sqlvar = (struct sqlvar_compat *) (sqlda + 1); <|endoftext|>"}
{"context": "\t\telse\n\tMemoryContextSwitchTo(oldcontext);\n}\n\t\t\t\tMemoryContext rcontext)\n\tMemoryContext oldcontext;", "partial_line": "asta", "completion": "astate->dnulls, <|endoftext|>"}
{"context": "\t\t\t\tOffsetNumber offset = ItemPointerGetOffsetNumberNoCheck(itemptr);\n\tmcv_selec = mcv_selectivity(vardata, &opproc, collation, constval, true,\n\t\t\t\t\t\t\t\t&sumcommon);\n\t\t\t\t\t\t\t\t\t\t\tcollation,\n\telse", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\texecute_attr_map_slot(map->attrMap, slot, storeslot);\n\t}\n\t\t\t\t\t\t\t\t\told_alloc * 2);\n\t\t\t\t\t\t\t   offsetof(SetConstraintStateData, trigstates) +\n\tstate = SetConstraintStateCreate(origstate->numstates);", "partial_line": "state->a", "completion": "state->all_isset = origstate->all_isset; <|endoftext|>"}
{"context": "\t\treturn false;\n}\n\tListCell   *lc;\n\t{\n\t\t\treturn true;", "partial_line": "int", "completion": "int\t\t\ti = -1; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t  rtoffset, 1);\n\t\t\t\tsplan->tidrangequals =\n\t\t\t\tsplan->scan.plan.qual =", "partial_line": "splan->scan.pl", "completion": "splan->scan.plan.targetlist = <|endoftext|>"}
{"context": "\tif (newtuple != NULL)\n\ttable_close(shdescription, NoLock);\nvoid\n\tint\t\t\tnkeys;\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,", "partial_line": "Anum_pg_", "completion": "Anum_pg_description_classoid, <|endoftext|>"}
{"context": "\t\tfirst_page = FreePageBtreeFirstKey(p);\n\t\tif (index > 0)\n\t\t\tAssert(p->u.internal_key[index].first_page == first_page);\n\twhile (levels > 0)\n\treturn p;", "partial_line": "FreePageBtre", "completion": "FreePageBtreeFindRightSibling(char *base, FreePageBtree *btp) <|endoftext|>"}
{"context": "\t}\n\tPG_CATCH();\n\t\t\t\t   cur_datname, cur_nspname, cur_relname);\n\t\tpfree(cur_relname);\n{", "partial_line": "bytea\t   *re", "completion": "bytea\t   *relopts; <|endoftext|>"}
{"context": "\t\t{\n\t}\n\tMemoryContextSwitchTo(oldcontext);\n\t\t\tcontinue;\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tattr1, attr2)))", "partial_line": "return r", "completion": "return result; <|endoftext|>"}
{"context": "\t}\nexpanded_record_set_tuple(ExpandedRecordHeader *erh,\n\t\t\t\t\t\t  bool expand_external)\n\t\tcheck_domain_for_new_tuple(erh, tuple);\n\t\t{", "partial_line": "MemoryContextSwitc", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "\t\tforeach(l, attachrel_children)\n\tcxt = AllocSetContextCreate(CurrentMemoryContext,\n\t\t\t\t\t\t\t\t\"AttachPartitionEnsureIndexes\",\n\t\t\t\tidxRel->rd_index->indisprimary)\n\t\tbool\t\tfound = false;", "partial_line": "Oid\t\t\tcldConstrO", "completion": "Oid\t\t\tcldConstrOid = InvalidOid; <|endoftext|>"}
{"context": "#include \"utils/guc_hooks.h\"\n#define RECOVERY_COMMAND_FILE\t\"recovery.conf\"\nconst struct config_enum_entry recovery_target_action_options[] = {\n\t{\"promote\", RECOVERY_TARGET_ACTION_PROMOTE, false},\nchar\t   *archiveCleanupCommand = NULL;", "partial_line": "static bool", "completion": "static bool doRequestWalReceiverReply; <|endoftext|>"}
{"context": "\t\t\t\t\t  TupleHashEntry entry)\n\t\tAggStatePerGroup pergroupstate = &pergroup[transno];\n\t\tAggStatePerHash perhash = &aggstate->perhash[setno];\n\t\t\tif (isnew)\n\tExprContext *tmpcontext;", "partial_line": "bool\t\thasG", "completion": "bool\t\thasGroupingSets = aggstate->phase->numsets > 0; <|endoftext|>"}
{"context": "\t\t\tereport(LOG,\n\t{\nstatic int\n\t\t\tcontinue;\n\t\t\t\t\t\t\t\t GetBackendTypeDesc(bp->bkend_type), (int) bp->pid)));", "partial_line": "cnt+", "completion": "cnt++; <|endoftext|>"}
{"context": "        case 1:\n                if (ret < 0) return ret;\n        case 3:\n            {   int ret = slice_del(z);\n            }", "partial_line": "z->br", "completion": "z->bra = z->c; <|endoftext|>"}
{"context": "\telse if (Matches(\"ALTER\", \"SUBSCRIPTION\", MatchAny, \"SET\"))\n\t{\n\t}\n\telse if (Matches(\"ALTER\", \"SUBSCRIPTION\", MatchAny, MatchAnyN,\n\t\tCOMPLETE_WITH(\"RESET\", \"SET\", \"OWNER TO\", \"REFRESH COLLATION VERSION\", \"RENAME TO\",", "partial_line": "COMPLETE_W", "completion": "COMPLETE_WITH_QUERY(Query_for_list_of_tablespaces); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t jspOperationName(jsp->type)))));\n\t\t\t\tjb = &jbv;\n\t\t\t{\n\t\t\t\t\tnumstr = pnstrdup(jb->val.string.val, jb->val.string.len);\n\t\t\t\t\tif (numeric_is_nan(num) || numeric_is_inf(num))", "partial_line": "(errcode(ERRCODE_NON_NUMER", "completion": "(errcode(ERRCODE_NON_NUMERIC_SQL_JSON_ITEM), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tif (clause_is_strict_for(clause,\n\t\t\t\t\t\t}\n\t\t\t\treturn false;\t\n\t\t\tbreak;\n\t\tdefault:", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t}\n\tbool\t   *nullFlags = (bool *) PG_GETARG_POINTER(6);\n\t\t\tres = GIN_FALSE;\n\t\t\t\t{\n\t\t\t}", "partial_line": "case Gi", "completion": "case GinContainsStrategy: <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t\t\t\t\t(errcode(ERRCODE_TOO_MANY_ARGUMENTS),\n\t\t\t\t\t\t\t\t\t\t\t   nargsplusdefs,\n\t{\n\t\tnewa->elements = vargs;", "partial_line": "if (!OidIsValid(ne", "completion": "if (!OidIsValid(newa->array_typeid)) <|endoftext|>"}
{"context": "\t\treln = CreateFakeRelcacheEntry(rlocator);\n\t\tpage = BufferGetPage(buffer);\n\t\tMarkBufferDirty(buffer);\n\txl_heap_inplace *xlrec = (xl_heap_inplace *) XLogRecGetData(record);\n\t\tif (PageGetMaxOffsetNumber(page) < offnum || !ItemIdIsNormal(lp))", "partial_line": "oldlen =", "completion": "oldlen = ItemIdGetLength(lp) - htup->t_hoff; <|endoftext|>"}
{"context": "\t\tSMgrRelation reln;\n\t\tBlockNumber blocks[MAX_FORKNUM];\n\t\tXLogFlush(lsn);\n\t\t\told_blocks[nforks] = smgrnblocks(reln, MAIN_FORKNUM);\n\t\t}", "partial_line": "if (Blo", "completion": "if (BlockNumberIsValid(blocks[nforks])) <|endoftext|>"}
{"context": "\t\t\t\tport->gss = (pg_gssinfo *)\n\t\t\tif (port->gss->enc)\n#else\n\t\t\tbreak;\n\t\t\tstatus = pg_SSPI_recvauth(port);", "partial_line": "case", "completion": "case uaSCRAM: <|endoftext|>"}
{"context": "static const symbol s_2_668[8] = { 'a', 's', 't', 'a', 'n', 'i', 't', 'e' };\nstatic const symbol s_2_683[7] = { 'i', 's', 't', 'a', 'j', 't', 'e' };\nstatic const symbol s_2_684[7] = { 'o', 's', 't', 'a', 'j', 't', 'e' };\nstatic const symbol s_2_689[4] = { 'i', 'j', 't', 'e' };\nstatic const symbol s_2_698[7] = { 'i', 'n', 'j', 'a', 's', 't', 'e' };", "partial_line": "static const", "completion": "static const symbol s_2_703[6] = { 'e', 'v', 'a', 's', 't', 'e' }; <|endoftext|>"}
{"context": "\t{\n\t\tacl = DatumGetAclP(aclDatum);\n\t}\n\t\t\t\t\t\t\t\tAclMode mask, AclMaskHow how,\n\tAclMode\t\tresult;", "partial_line": "Acl", "completion": "Acl\t\t   *acl; <|endoftext|>"}
{"context": "\t\t\t\t\tif (!expanded_record_lookup_field(rec->erh,\n\t\t\t*collation = InvalidOid;\n\t\t\t\t  bool *isNull)\n\texprdatum = exec_eval_expr(estate, expr, isNull, &exprtypeid, &exprtypmod);\n\t\t\t   int32 *rettypmod)", "partial_line": "rc = exec_run", "completion": "rc = exec_run_select(estate, expr, 2, NULL); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"cannot alter enforceability of constraint \\\"%s\\\" of relation \\\"%s\\\"\",\n\t\t\t\t\t\tcmdcon->conname, RelationGetRelationName(rel))));\n\t\tchar\t   *ancestorname = NULL;\n\treturn address;\nATExecAlterConstraintInternal(List **wqueue, ATAlterConstraint *cmdcon,", "partial_line": "if (cmdcon", "completion": "if (cmdcon->alterEnforceability && <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t sortmem, true);\nstatic void\n\t\t\t\t\t\t bool progress)\n\t\tpgstat_progress_update_param(PROGRESS_CREATEIDX_SUBPHASE,\n\t{", "partial_line": "buffer->key, buffer->typlen, buf", "completion": "buffer->key, buffer->typlen, buffer->typbyval, <|endoftext|>"}
{"context": "\t\t\tmemcpy(newattr, trigger->tgattr,\n\t\tif (trigger->tgoldtable)\n\t\ttrigger++;\n\treturn newdesc;\n\t\t\tpfree(trigger->tgargs);", "partial_line": "if (trigger->t", "completion": "if (trigger->tgnewtable) <|endoftext|>"}
{"context": "\t\tpscan = systable_beginscan(conrel, ConstraintParentIndexId,\n\tCatalogTupleUpdate(conrel, &copyTuple->t_self, copyTuple);\n\tNewConstraint *newcon;\n\tcon = (Form_pg_constraint) GETSTRUCT(contuple);\n\t\t\t\t\t\t\t\t Anum_pg_constraint_conbin);", "partial_line": "copyTuple = heap_copyt", "completion": "copyTuple = heap_copytuple(contuple); <|endoftext|>"}
{"context": "\t\t{\n\tsmgrdounlinkall(srels, ndelrels, isRedo);\n\tfor (i = 0; i < ndelrels; i++)\n\t\t\t  ForkNumber forknum,\n\t{", "partial_line": "static M", "completion": "static MdPathStr <|endoftext|>"}
{"context": "\tJsonbInState result;\n\tJsonb\t   *out;\n\t\tresult->parseState->skip_nulls = absent_on_null;\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tif (arg_type == InvalidOid)", "partial_line": "&state->val_outpu", "completion": "&state->val_output_func); <|endoftext|>"}
{"context": "\t\t\t\t\treturn true;\n\t\tcase T_JsonKeyValue:\n\t\t\t\tJsonKeyValue *jkv = (JsonKeyValue *) node;\n\t\t\t\tif (WALK(jkv->value))\n\t\t\tbreak;", "partial_line": "case T_JsonArray", "completion": "case T_JsonArrayConstructor: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t localxmin, timestamptz_to_str(localts));\n\t\t\tbreak;\n\t\t\t\t\t\t  Oid indexoid)\n\tTupleDesc\ttupdesc = RelationGetDescr(localrel);\n\t\tAssert(OidIsValid(indexoid) && localslot);", "partial_line": "appendStri", "completion": "appendStringInfo(&tuple_value, _(\"Key %s\"), desc); <|endoftext|>"}
{"context": "\tif (flags & RANGE_EMPTY)\n\t\tclassNumber = CLS_EMPTY;\n\t\t\tclassNumber |= CLS_UPPER_INF;\n\treturn classNumber;\nsingle_bound_cmp(const void *a, const void *b, void *arg)", "partial_line": "else if", "completion": "else if (delta1 > delta2) <|endoftext|>"}
{"context": "\t{\n\t\t*nredirected = 0;\n\t\tAssert(*ndead > 0);\n\t\tcursor += offsetof(xlhp_prune_items, data);\n\telse", "partial_line": "cursor += sizeof(OffsetNu", "completion": "cursor += sizeof(OffsetNumber) * *nunused; <|endoftext|>"}
{"context": "\t\t\t\t\t  backend_exec, boot_options, extra_options,\n\tfflush(NULL);\n\tstatus = system(cmd.data);\nstatic char *\n\tint\t\t\tsz = wal_segment_size_mb * segment_count;", "partial_line": "return re", "completion": "return result; <|endoftext|>"}
{"context": "\t\t\t\tExecHashTableResetMatchFlags(node->hj_HashTable);\n\t\t\tnode->hj_OuterNotEmpty = false;\n\t\t\tAssert(hashNode->hashtable == node->hj_HashTable);\n\t\t\t\t\t\t\t\t\t\t\t hashNode->hashtable);\n\t\t\tif (innerPlan->chgParam == NULL)", "partial_line": "node->hj_CurHas", "completion": "node->hj_CurHashValue = 0; <|endoftext|>"}
{"context": "\tphv->phlevelsup = 0;\t\t\nPlaceHolderInfo *\n\tRelids\t\trels_used;\n\t\tAssert(phinfo->phid == phv->phid);\n\tphinfo = makeNode(PlaceHolderInfo);", "partial_line": "phinfo-", "completion": "phinfo->ph_var->phnullingrels = NULL; <|endoftext|>"}
{"context": "\tPolyNumAggState *result;\n\tinit_var(&tmp_var);\n\tPolyNumAggState *state1;\n\t\telog(ERROR, \"aggregate function called in non-aggregate context\");\n\tstate2 = PG_ARGISNULL(1) ? NULL : (PolyNumAggState *) PG_GETARG_POINTER(1);", "partial_line": "if (state2->", "completion": "if (state2->N > 0) <|endoftext|>"}
{"context": "\t}\n\t\tif (slot == NULL)\t\t\n\t\t\treturn context->cpUpdateReturningSlot;\n\t\t\tcase TM_SelfModified:\n\t\t\t\t\t\tcase TM_Ok:", "partial_line": "epqslot", "completion": "epqslot = EvalPlanQual(context->epqstate, <|endoftext|>"}
{"context": "\tif (space)\n\tchar\t   *msg;\n\t\t\t\t\t\t\t\t\t   res->events[i].passThrough);\n\tres->events = NULL;\n}", "partial_line": "conn->error_resu", "completion": "conn->error_result = false; <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL( CONDITION );\t\t\t\t\\\nTSQuerySign\n\tint\t\t\tnvalues = 0;\n\t\tif (ptr->type == QI_VAL)\n\t\t\tval = palloc(len + 1);", "partial_line": "p", "completion": "ptr++; <|endoftext|>"}
{"context": "{\n\t\t\t\t\t errmsg(\"could not open stop-word file \\\"%s\\\": %m\",\n\t\t\tchar\t   *pbuf = line;\n\t\t\twhile (*pbuf && !isspace((unsigned char) *pbuf))\n\t\t\t\tif (reallen == 0)", "partial_line": "reall", "completion": "reallen = 64; <|endoftext|>"}
{"context": "\t\t\treturn NULL;\n\t\t\t\t\t\t\t\t\t\t\t\t&node->trss_mintid,\n\t\t\tnode->ss.ss_currentScanDesc = scandesc;\n\t\t\ttable_rescan_tidrange(scandesc, &node->trss_mintid,\n\t\t}", "partial_line": "node->trss_in", "completion": "node->trss_inScan = false; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t errmsg_plural(\"incorrect size of file \\\"%s\\\": %lld byte\",\n\t\t\t\t\t\t\t   (long long int) stat.st_size, path,\n\t\t\t\t errmsg(\"incorrect alignment of CRC offset for file \\\"%s\\\"\",\n\t\t\t\t(errcode_for_file_access(),", "partial_line": "(errcode(ERRC", "completion": "(errcode(ERRCODE_DATA_CORRUPTED), <|endoftext|>"}
{"context": "\t\t\t\treferenced;\n\t\t\t\t\t\t\tNameListToString(opfamilyname))));\n\t\tmemset(nulls, false, sizeof(nulls));\n\t\tCatalogTupleInsert(rel, tup);\n\t\tmyself.classId = AccessMethodProcedureRelationId;", "partial_line": "referenc", "completion": "referenced.objectSubId = 0; <|endoftext|>"}
{"context": "\tmemset(&safetyInfo, 0, sizeof(safetyInfo));\n\tsafetyInfo.unsafeFlags = (unsigned char *)\n\t\t{\n\t\t\t{\n\t\t\t\tupperrestrictlist = lappend(upperrestrictlist, rinfo);", "partial_line": "case PUSHDOWN_", "completion": "case PUSHDOWN_WINDOWCLAUSE_RUNCOND: <|endoftext|>"}
{"context": "\tint\t\t\tseconds,\n\tseconds = offset % SECSPERMIN;\n\t\t*p++ = sign;\n\t\t\t}\n\t\t}", "partial_line": "*p =", "completion": "*p = '\\0'; <|endoftext|>"}
{"context": "#include \"funcapi.h\"\n#include \"miscadmin.h\"\n#include \"storage/standby.h\"\n#include \"utils/timestamp.h\"\nstatic BackupState *backup_state = NULL;", "partial_line": "static Memor", "completion": "static MemoryContext backupcontext = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  RelationGetRelid(rel),\t\n\t\t\t\t\t\t\t  attNos,\t\n\t\t\t\t\t\t\t  NULL,\n{\n\t\t\t\t\t\t\t  true, ", "partial_line": "Inval", "completion": "InvalidOid, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   eo - so);\n\t\t\telems[i] = DirectFunctionCall3(text_substr,\n\t\t\t\t\t\t\t\t\t\t   Int32GetDatum(eo - so));\n\treturn construct_md_array(elems, nulls, 1, dims, lbs,\n\t\ttext\t   *pattern = PG_GETARG_TEXT_PP(1);", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\tchar    *val;\n\t\t}\n#line 77 \"sqlda.pgc\"\n\tstrcpy(msg, \"commit\");\n#line 122 \"sqlda.pgc\"", "partial_line": "if (sqlca.sql", "completion": "if (sqlca.sqlcode < 0) exit (1);} <|endoftext|>"}
{"context": "\t\t\tlong\t\tsleeptime;\n\t\t\tint\t\t\twakeEvents;\n\t\t\tTimestampTz now;\n\t\t\tif (pq_is_send_pending())\n\t\t\t\t\t\t\t\t\t\t   WALSENDER_STATS_FLUSH_INTERVAL))", "partial_line": "walsnd->sy", "completion": "walsnd->sync_standby_priority = 0; <|endoftext|>"}
{"context": "\t{\n\t\t\tcase PGAIO_HS_HANDED_OUT:\n\t\t\tcase PGAIO_HS_COMPLETED_SHARED:\n\tswitch (s)\n\t\t\tPGAIO_HS_TOSTR_CASE(STAGED);", "partial_line": "PGAIO_HS_TO", "completion": "PGAIO_HS_TOSTR_CASE(COMPLETED_LOCAL); <|endoftext|>"}
{"context": "\t\t\t\tpcategory = ncategory;\n\tif (inputTypeId == targetTypeId)\n\tif (can_coerce_type(1, &inputTypeId, &targetTypeId, COERCION_IMPLICIT))\n{\n\t{", "partial_line": "re", "completion": "return true; <|endoftext|>"}
{"context": "{ 6, s_1_120, -1, 64, 0},\nstatic const symbol s_2_7[8] = { 'a', 'n', 'j', 'i', 'j', 'e', 'g', 'a' };\nstatic const symbol s_2_9[8] = { 's', 'n', 'j', 'i', 'j', 'e', 'g', 'a' };\nstatic const symbol s_2_14[7] = { 'e', 'l', 'i', 'j', 'e', 'g', 'a' };\nstatic const symbol s_2_28[6] = { 's', 'n', 'j', 'e', 'g', 'a' };", "partial_line": "static const symbo", "completion": "static const symbol s_2_35[5] = { 'a', 'n', 'e', 'g', 'a' }; <|endoftext|>"}
{"context": "\t\tappendPQExpBufferStr(query,\n\t\t\t\t\t\t\t \"SELECT \"\n\t\t\t\t\t\t\t \"pg_catalog.pg_get_function_arguments(p.oid) AS funcargs,\\n\"\n\tprintfPQExpBuffer(query,\n\taggfinalfn = PQgetvalue(res, 0, PQfnumber(res, \"aggfinalfn\"));", "partial_line": "aggserialfn = PQgetvalue(res, 0, PQfnumber(r", "completion": "aggserialfn = PQgetvalue(res, 0, PQfnumber(res, \"aggserialfn\")); <|endoftext|>"}
{"context": "\t{\n\t\tsetup_eclass_member_iterator(&it, cur_ec, rel->relids);\n\t\t\t\tcontinue;\n\t\t\tresult = lappend(result, rinfo);\n\t\tif (result)", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tvar->varreturningtype = VAR_RETURNING_DEFAULT;\n}\n\t\t\t\t\t   TargetEntry *tle)\n{\n\t\t\ttoid = get_rel_type_id(rte->relid);", "partial_line": "(errcode(ERRCO", "completion": "(errcode(ERRCODE_WRONG_OBJECT_TYPE), <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_SCHEMA_QUERY_PLUS(Query_for_list_of_indexes,\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_indexables);\n\telse if (Matches(\"SECURITY\", \"LABEL\", \"FOR\", MatchAny))\n\t\t\t Matches(\"SECURITY\", \"LABEL\", \"FOR\", MatchAny, \"ON\"))\n\telse if (Matches(\"SECURITY\", \"LABEL\", \"ON\", MatchAny, MatchAny))", "partial_line": "!TailMatches(\"ALTER\", \"DATABASE\", Mat", "completion": "!TailMatches(\"ALTER\", \"DATABASE\", MatchAny, \"RESET\")) <|endoftext|>"}
{"context": "\t\t\t\t\tsqlda->sqlvar[i].sqllen = sizeof(numeric);\n\t\t\t\t\tif (PQgetisnull(res, row, i))\n\t\t\t\tsqlda->sqlvar[i].sqllen = sizeof(timestamp);\n\t\t\t\tbreak;\n\t\tsqlda->sqlvar[i].sqlind = isnull ? &value_is_null : &value_is_not_null;", "partial_line": "ecpg_log(\"ecpg_build_native_sqlda on line %d sqld = %d", "completion": "ecpg_log(\"ecpg_build_native_sqlda on line %d sqld = %d\\n\", line, sqlda->sqld); <|endoftext|>"}
{"context": "\t}\n\t{\n\t\t\telog(ERROR, \"SPI stack corrupted\");\n\t_SPI_current->processed = 0;\n\t_SPI_current->internal_xact = false;", "partial_line": "_SPI_current->outer_resu", "completion": "_SPI_current->outer_result = SPI_result; <|endoftext|>"}
{"context": "#include \"executor/executor.h\"\n\tProjectSetState *node = castNode(ProjectSetState, pstate);\n\tecontext = node->ps.ps_ExprContext;\n\t\tresultSlot = ExecProjectSRF(node, true);\n\t}", "partial_line": "return N", "completion": "return NULL; <|endoftext|>"}
{"context": "static void bbsink_lz4_begin_backup(bbsink *sink);\nstatic void bbsink_lz4_end_archive(bbsink *sink);", "partial_line": ".begin_archive =", "completion": ".begin_archive = bbsink_lz4_begin_archive, <|endoftext|>"}
{"context": "\t\t\tcase '<':\n\t\t\t\tfputs(\"\\\\textless{}\", fout);\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\t\tfputs(\"\\\\textbar{}\", fout);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t{\n\t\t{\n\t\t\tendptr = num + 9;\n\t\t\tval = get_float4_infinity();\n\t\telse", "partial_line": "errmsg(\"invalid input syntax for ty", "completion": "errmsg(\"invalid input syntax for type %s: \\\"%s\\\"\", <|endoftext|>"}
{"context": "\t\t{\n\t\t\treturn CAC_RECOVERY;\t\n\tif (!connsAllowed && backend_type == B_BACKEND)\n\t{\n#ifndef WIN32", "partial_line": "(errcode_for_fil", "completion": "(errcode_for_file_access(), <|endoftext|>"}
{"context": "\t\ticursor = icursor->next;\n\treturn result;\n\tJsonbValue\tv;\n\t\tresult->res = pushJsonbValue(&result->parseState,\n\t\tjson_categorize_type(arg_type, true, &state->val_category,", "partial_line": "&state->val_", "completion": "&state->val_output_func); <|endoftext|>"}
{"context": "\tAssert(string->type == jbvString);\n\t\t\t\t errmsg(\"number of jsonb object pairs exceeds the maximum allowed (%zu)\",\n\t{\nstatic void\n\t\tereport(ERROR,", "partial_line": "sizeof(JsonbValue", "completion": "sizeof(JsonbValue) * pstate->size); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   &dsm_control->item[control_slot].impl_private_pm_handle);\n\t\tdestroy = true;\n\t\tvoid\t   *junk_impl_private = NULL;\n\t\tvoid\t   *junk_mapped_address = NULL;\n\t\t\tAssert(dsm_control->item[control_slot].refcnt == 1);", "partial_line": "dsm_control->item[control", "completion": "dsm_control->item[control_slot].refcnt = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t rte->eref->aliasname, attnum);\n\t\tcase RTE_JOIN:\n\t\tcase RTE_TABLEFUNC:\n\t\tcase RTE_CTE:\n\t\t\t\t\textra_cols += 1;", "partial_line": "if (cte-", "completion": "if (cte->cycle_clause) <|endoftext|>"}
{"context": "\tCHECK_FOR_INTERRUPTS();\n\t\tif (outerPlan != NULL)\n\t\t\t\treturn NULL;\n\t\t\tnode->rs_done = true;\n\tPlanState  *outerPlan = outerPlanState(node);", "partial_line": "elog(DEBUG2, \"Result nodes d", "completion": "elog(DEBUG2, \"Result nodes do not support mark/restore\"); <|endoftext|>"}
{"context": "{\n\tRelation\trel;\n\tfakeentry = palloc0(sizeof(FakeRelCacheEntryData));\n\trel = (Relation) fakeentry;\n\trel->rd_rel->relpersistence = RELPERSISTENCE_PERMANENT;", "partial_line": "rel->rd_lo", "completion": "rel->rd_lockInfo.lockRelId.relId = rlocator.relNumber; <|endoftext|>"}
{"context": "\t{\n\telse if (event->events == WL_POSTMASTER_DEATH)\n\t\tepoll_ev.events |= EPOLLIN;\n\t}\n\telse", "partial_line": "if (event->eve", "completion": "if (event->events & WL_SOCKET_CLOSED) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t HeapTuple newtup)\n\tswitch (RelationGetRelid(relation))\n\tswitch (RelationGetRelid(relation))\n\t\t\t\tif (IsSharedRelation(relid))\n\t\t\t\tif (!LockHeldByMe(&tag, ShareUpdateExclusiveLock, false) &&", "partial_line": "!LockHeld", "completion": "!LockHeldByMe(&tag, ShareRowExclusiveLock, true)) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tecpg_free_params(stmt, false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinary_length,\n\t\t\t}\n\t\t\tbool\t\trealloc_failed = false;", "partial_line": "char", "completion": "char\t  **newparamvalues; <|endoftext|>"}
{"context": "\t\t\t strategy_passes, strategy_buf_id);\n\t\tbufs_to_lap = NBuffers;\n\t}\n#ifdef BGW_DEBUG\n\tnum_to_scan = bufs_to_lap;", "partial_line": "num_writt", "completion": "num_written = 0; <|endoftext|>"}
{"context": "\t{\n\t\tif (unlink(xlogpath) != 0)\n\tif (cleanupEnabled)\n\tfflush(NULL);\n\tif (rc == 0)", "partial_line": "if (sta", "completion": "if (stat(xlogpath, &stat_buf) == 0) <|endoftext|>"}
{"context": "\tscripterrcontext.arg = (void *) &callback_arg;\n\t\tList\t   *stmt_list;\n\t\t{\n\t\t\t\tqdesc = CreateQueryDesc(stmt,\n\t\t\t\tExecutorRun(qdesc, ForwardScanDirection, 0);", "partial_line": "MemoryContextDelete(per_p", "completion": "MemoryContextDelete(per_parsetree_context); <|endoftext|>"}
{"context": "}\nBuffer\n\tBuffer\t\tbuffer;\n\t\t\tbreak;\n\t\tif (ConditionalLockBuffer(buffer))", "partial_line": "GinInitPage(Page page, uint3", "completion": "GinInitPage(Page page, uint32 f, Size pageSize) <|endoftext|>"}
{"context": "\t\tObjectIdGetDatum(relid);\n\tif (pri->columns)\n\tCatalogTupleInsert(rel, tup);\n\trecordDependencyOn(&myself, &referenced, DEPENDENCY_AUTO);\n\t\trecordDependencyOnSingleRelExpr(&myself, pri->whereClause, relid,", "partial_line": "table_close(rel, RowE", "completion": "table_close(rel, RowExclusiveLock); <|endoftext|>"}
{"context": "\tchar\t   *qual_funcsig;\n\tchar\t   *funciargs;\n\tchar\t   *protrftypes;\n\tchar\t   *prokind;\n\tdelqry = createPQExpBuffer();", "partial_line": "\"pro", "completion": "\"proisstrict,\\n\" <|endoftext|>"}
{"context": "\tAssert(!TTS_EMPTY(slot));\ntts_minimal_materialize(TupleTableSlot *slot)\n\tMinimalTupleTableSlot *mslot = (MinimalTupleTableSlot *) slot;\n\t\tmslot->mintuple = heap_form_minimal_tuple(slot->tts_tupleDescriptor,\n\t}", "partial_line": "mslot->minhdr.t_data = (HeapTupleHeader) ((char *) mslot->mintu", "completion": "mslot->minhdr.t_data = (HeapTupleHeader) ((char *) mslot->mintuple - MINIMAL_TUPLE_OFFSET); <|endoftext|>"}
{"context": "\t}\n\tif ((hService = OpenService(hSCM, register_servicename, DELETE)) == NULL)\n\t\tCloseServiceHandle(hSCM);\n\t\t\t\t\t (unsigned long) GetLastError());\n\t\texit(1);", "partial_line": "CloseServiceHandle(h", "completion": "CloseServiceHandle(hService); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tRememberSimpleDeadLock(MyProc, lockmode, lock, proc);\n\t\t\t\t\t\t\t\t\t\tproclock))\n\t\t\t\t}\n\t\treturn PROC_WAIT_STATUS_ERROR;", "partial_line": "return PR", "completion": "return PROC_WAIT_STATUS_WAITING; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   VARDATA_ANY(s),\n\t\t\t\t\t\t\t\t\t\t   VARSIZE_ANY_EXHDR(s),\nDatum\n\t\t\t\t\t\t\t\t\t\t  0, NULL));\nnameicregexne(PG_FUNCTION_ARGS)", "partial_line": "REG_ADVANCED | RE", "completion": "REG_ADVANCED | REG_ICASE, <|endoftext|>"}
{"context": "\t\tif (HeapTupleIsValid(htup))\n\t\t\tputid(p, NameStr(((Form_pg_authid) GETSTRUCT(htup))->rolname));\n\t\t\tReleaseSysCache(htup);\n\t\t\t*p++ = ACL_ALL_RIGHTS_STR[i];\n}", "partial_line": "static", "completion": "static int <|endoftext|>"}
{"context": "    z->lb = z->c; z->c = z->l;\n        }\n        }\n            if (ret < 0) return ret;\n        z->c = z->l - m4;", "partial_line": "z->c =", "completion": "z->c = z->l - m6; <|endoftext|>"}
{"context": "\tDIR\t\t   *dir;\n\t\treturn;\n\t\t{\n\t\t\t\tbreak;\n\t}", "partial_line": "pre_sync_fname(con", "completion": "pre_sync_fname(const char *fname, bool isdir) <|endoftext|>"}
{"context": "\t\t\ttag = CMDTAG_CREATE_TYPE;\n\t\t\tbreak;\n\t\tcase T_CreateFunctionStmt:\n\t\t\t\ttag = CMDTAG_CREATE_FUNCTION;\n\t\t\tbreak;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "#include \"header.h\"\n    if (z->p == NULL) goto error;", "partial_line": "int", "completion": "int i; <|endoftext|>"}
{"context": "\t\t\t\tsubflags = DEPFLAG_NORMAL;\n\t\t\tcase DEPENDENCY_EXTENSION:\n\t\t}\n\t\tdependentObjects[numDependentObjects].subflags = subflags;\n\t\t\t  sizeof(ObjectAddressAndFlags),", "partial_line": "mystac", "completion": "mystack.next = stack; <|endoftext|>"}
{"context": "\t\telog(PANIC, \"cannot abort transaction %u, it was already committed\",\n}\n\t{\n\t\t\tereport(ERROR,\n\t\t\t\t errhint(\"Increase \\\"max_prepared_transactions\\\" (currently %d).\",", "partial_line": "gxact", "completion": "gxact->owner = hdr->owner; <|endoftext|>"}
{"context": "\t\t\t\t\tval |= (c & 0x7F) << 28;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t}\n}\n\tint\t\t\tmaxbytes;", "partial_line": "maxsize =", "completion": "maxsize = SHORTALIGN_DOWN(maxsize); <|endoftext|>"}
{"context": "_bt_search_insert(Relation rel, Relation heaprel, BTInsertState insertstate)\n\t\tif (_bt_conditionallockbuf(rel, insertstate->buf))\n\t\t\t_bt_checkpage(rel, insertstate->buf);\n\t\t\tpage = BufferGetPage(insertstate->buf);\n\t\t{", "partial_line": "return _bt_search(rel", "completion": "return _bt_search(rel, heaprel, insertstate->itup_key, &insertstate->buf, <|endoftext|>"}
{"context": "\t\tint\t\t\tnum_elems;\n\t\t{\n\t\t\tOid\t\t\topfamily = rel->rd_opfamily[attno_skip - 1];\n\t\t\tOid\t\t\teq_op = skip_eq_ops[attno_skip - 1];\n\t\t\t\tAssert(inkey->sk_strategy == BTEqualStrategyNumber ||", "partial_line": "(inkey->sk_flags & SK_SE", "completion": "(inkey->sk_flags & SK_SEARCHNULL)); <|endoftext|>"}
{"context": "{ 3, s_7_83, -1, 1, 0},\n};\nstatic const symbol s_10[] = { 'e' };\nstatic int r_prelude(struct SN_env * z) {\n            z->bra = z->c;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "{\n}\n{\n\t\t\t\tbreak;\n\t\t\t\trel->relname = strVal(linitial(typeName->names));", "partial_line": "ca", "completion": "case 3: <|endoftext|>"}
{"context": "\tvalues[3] = Int64GetDatum(pg_atomic_read_u64(&SharedStats->skip_init));\n\tvalues[5] = Int64GetDatum(pg_atomic_read_u64(&SharedStats->skip_fpw));\n\t}\nXLogPrefetcherIsFiltered(XLogPrefetcher *prefetcher, RelFileLocator rlocator,\n\t\t\t\t\t\t BlockNumber blockno)", "partial_line": "filter = hash_search(prefetcher->filt", "completion": "filter = hash_search(prefetcher->filter_table, &rlocator, HASH_FIND, NULL); <|endoftext|>"}
{"context": "\t\t}\n\t\telse\n\t\t\t\t\tAdjustFractSeconds(fval, tm, fsec, SECS_PER_HOUR);\n\t\t\t\t\t\tAdjustFractSeconds(fval, tm, fsec, 1);\n\t\t\t\t\tif (*str != ':')", "partial_line": "return DT", "completion": "return DTERR_BAD_FORMAT; <|endoftext|>"}
{"context": "static const symbol s_1_68[5] = { 'k', 'a', 'i', 'l', 'a' };\nstatic const symbol s_1_93[4] = { 'z', 'k', 'o', 'a' };\nstatic const symbol s_1_105[4] = { 't', 'x', 'o', 'a' };\nstatic const symbol s_1_114[5] = { 'e', 't', 'a', 'r', 'a' };\nstatic const symbol s_1_116[4] = { 'b', 'e', 'r', 'a' };", "partial_line": "static const", "completion": "static const symbol s_1_123[2] = { 's', 'a' }; <|endoftext|>"}
{"context": "\tint\t\t\tsave_sec_context;\n\t\tAssert(list_length(exclusionOpNames) == nkeycols);\n\telse\n\t\t\tindexInfo->ii_ExclusionStrats = palloc_array(uint16, nkeycols);\n\t{", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\touterPlan = outerPlanState(node);\n\trelease_partition(node);\n\tExecClearTuple(node->ss.ss_ScanTupleSlot);\n\t\tExecClearTuple(node->framehead_slot);\ninitialize_peragg(WindowAggState *winstate, WindowFunc *wfunc,", "partial_line": "HeapT", "completion": "HeapTuple\taggTuple; <|endoftext|>"}
{"context": "\tpartNumCols = 0;\n\t\tTargetEntry *tle = get_sortgroupclause_tle(sgc, subplan->targetlist);\n\t\t\t\t\t\t  ordNumCols,\n\t\t\t\t\t\t  ordOperators,\n\tSetOp\t   *plan;", "partial_line": "flags | CP_LAB", "completion": "flags | CP_LABEL_TLIST); <|endoftext|>"}
{"context": "#include \"utils/numeric.h\"\n#define KeyWord_INDEX_SIZE\t\t('~' - ' ')\n\t\t\t\tid,\t\t\t\t\n\tFROM_CHAR_DATE_NONE = 0,\t\n\tchar\t\tcharacter[MAX_MULTIBYTE_CHAR_LEN + 1];\t", "partial_line": "} Forma", "completion": "} FormatNode; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t\tFLATCOPY(newnode, phinfo, PlaceHolderInfo);\n\t\t\t\tMUTATE(newnode->funcexpr, rtfunc->funcexpr, Node *);\n\t\t\t{\n\t\t\t\tTableFunc  *newnode;", "partial_line": "elog(ERROR, \"unrecognized no", "completion": "elog(ERROR, \"unrecognized node type: %d\", <|endoftext|>"}
{"context": "#include <limits.h>\n#define CSHORTTYPE\tECPGt_short\n#define CSTRINGTYPE ECPGt_char\n#define CINVTYPE\t115\n#define CFILETYPE\t116", "partial_line": "#defi", "completion": "#define CLVCHARPTRTYPE\t124 <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  ObjectIdGetDatum(amoid),\n\t\tereport(ERROR,\n\tvalues[Anum_pg_opfamily_opfname - 1] = NameGetDatum(&opfName);\n\tvalues[Anum_pg_opfamily_opfowner - 1] = ObjectIdGetDatum(GetUserId());\n\treferenced.objectId = namespaceoid;", "partial_line": "recordDependencyOnOwner(OperatorFamilyRelatio", "completion": "recordDependencyOnOwner(OperatorFamilyRelationId, opfamilyoid, GetUserId()); <|endoftext|>"}
{"context": "\t{\n\t\told_inner_tuples[i] = sts_attach(ParallelHashJoinBatchInner(shared),\n\t\tsts_begin_parallel_scan(old_inner_tuples[i]);\n\t\t\tExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno,\n\t\t\t\t\t\t\t\t\t  &batchno);", "partial_line": "++hashtable->batches[i].o", "completion": "++hashtable->batches[i].old_ntuples; <|endoftext|>"}
{"context": "\tconstr = tupdesc->constr;\n\t\t\texpr = stringToNode(defval->adbin);\n{\n\t\tif (partkey->strategy != part_scheme->strategy ||\n\t\tif (memcmp(partkey->partopfamily, part_scheme->partopfamily,", "partial_line": "part_scheme->partsupfunc[", "completion": "part_scheme->partsupfunc[i].fn_oid); <|endoftext|>"}
{"context": "\t{\n\t},\n\t},\n\t\t\"Ulaanbaatar Standard Time\", \"Ulaanbaatar Daylight Time\",\n\t\t\"America/Phoenix\"", "partial_line": "\"Etc", "completion": "\"Etc/GMT-13\" <|endoftext|>"}
{"context": "\tPG_RETURN_INT32(arg1 & arg2);\n\tint32\t\targ2 = PG_GETARG_INT32(1);\n{\n}\n\tPG_RETURN_INT32(arg1 >> arg2);", "partial_line": "int4not(PG", "completion": "int4not(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tresult->f = ~addr->f;\n}\n\tmacaddr8   *addr2 = PG_GETARG_MACADDR8_P(1);\n\tresult->b = addr1->b & addr2->b;\n\tresult->h = addr1->h & addr2->h;", "partial_line": "result->f =", "completion": "result->f = addr1->f | addr2->f; <|endoftext|>"}
{"context": "\tExprEvalPushStep(state, &scratch);\n\tstate->parent = parent;\n\tscratch.d.fetch.last_var = maxatt;\n\tscratch.opcode = EEOP_OUTER_FETCHSOME;\n\tscratch.d.fetch.last_var = maxatt;", "partial_line": "scratch.resnull = &fcinfo->ar", "completion": "scratch.resnull = &fcinfo->args[0].isnull; <|endoftext|>"}
{"context": "\t\t\t\t errhint(\"%s\", GUC_check_errhint_string) : 0));\n\t\treturn true;\n\tGUC_check_errcode_value = ERRCODE_INVALID_PARAMETER_VALUE;\n\tGUC_check_errdetail_string = NULL;\n\t{", "partial_line": "(errcode(G", "completion": "(errcode(GUC_check_errcode_value), <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),\n\t\t\tupperIndx[i] = dim[i] + lb[i] - 1;\n\t}\n\tnsrcitems = ArrayGetNItems(ndim, span);\n\tif (newhasnulls)", "partial_line": "overheadlen = ARR_OVERHEAD_WITHNULL", "completion": "overheadlen = ARR_OVERHEAD_WITHNULLS(ndim, nitems); <|endoftext|>"}
{"context": "\t\t\t\ts1 = s1 * s2;\n{\n\t\treturn list_length(((ArrayExpr *) arrayexpr)->elements);\n\t\tdouble\t\tnelem = 0;\n\t\t\t{", "partial_line": "rowcompar", "completion": "rowcomparesel(PlannerInfo *root, <|endoftext|>"}
{"context": "\tpg_log_info(\"validating publisher connection string\");\n\tsub_base_conninfo = get_sub_conninfo(&opt);\n\t\tif (dbname_conninfo)\n\t\telse\n\t\t\t\t\t\t\t  progname);", "partial_line": "pg_log_error(\"wrong number of re", "completion": "pg_log_error(\"wrong number of replication slot names specified\"); <|endoftext|>"}
{"context": "\trte->colcollations = list_copy(cte->ctecolcollations);\n\t\teref = makeAlias(refname, NIL);\n\t\tvarattno++;\n\t\t\trte->coltypes = lappend_oid(rte->coltypes, RECORDOID);\n\t\trte->colcollations = lappend_oid(rte->colcollations, cte->cycle_clause->cycle_mark_collation);", "partial_line": "rte->coltypes = lappend_oid(rte->co", "completion": "rte->coltypes = lappend_oid(rte->coltypes, RECORDARRAYOID); <|endoftext|>"}
{"context": "\t{\n\t\t\tCHECK_FOR_INTERRUPTS();\n\t\t\t{\n\t\t\t}\n\t\t\tereport(WARNING,", "partial_line": "errmsg(\"aborting", "completion": "errmsg(\"aborting backup due to backend exiting before pg_backup_stop was called\")); <|endoftext|>"}
{"context": "\tOid\t\t\troleid;\n\tAclMode\t\tmode;\n\tif (privresult < 0)\n\ttext\t   *column = PG_GETARG_TEXT_PP(2);\n\tOid\t\t\troleid;", "partial_line": "AclMode", "completion": "AclMode\t\tmode; <|endoftext|>"}
{"context": "plpython_srf_cleanup_callback(void *arg)\n\t\t\t   *pltdata;\n\t\t{\n\telse\n\tPG_TRY();", "partial_line": "Py_DECREF(pltr", "completion": "Py_DECREF(pltrelid); <|endoftext|>"}
{"context": "{\n\t\treturn evalLazyFunc(st, func, args, retval);\n\telse\n\t\t\t\treturn true;\n\t\t\t}", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t\tEEO_CASE(EEOP_MINMAX)\n\t\t\tExecEvalMinMax(state, op);\n\t\t\tEEO_NEXT();\n\t\tEEO_CASE(EEOP_FIELDSELECT)\n\t\t}", "partial_line": "ExecEvalField", "completion": "ExecEvalFieldStoreForm(state, op, econtext); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t typentry->btree_opintype,\n\tif ((flags & TYPECACHE_GT_OPR) &&\n\t{\n\t}\n\t\t\thash_proc = get_opfamily_proc(typentry->hash_opf,", "partial_line": "hash_proc =", "completion": "hash_proc = InvalidOid; <|endoftext|>"}
{"context": "\t\talgorithm = algobuf;\n\tif (strcmp(algorithm, \"on\") == 0 ||\n\t{\n\t\tconst char *errstr = NULL;\n\t\tcrypt_pwd = pg_fe_scram_build_secret(passwd,", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t\t\tWindowDef  *wd = (WindowDef *) node;\n\t\t\t\tif (WALK(wd->orderClause))\n\t\t\t\tif (WALK(rs->subquery))\n\t\t\t\t\treturn true;\n\t\t\t}", "partial_line": "RangeFunction *rf = (", "completion": "RangeFunction *rf = (RangeFunction *) node; <|endoftext|>"}
{"context": "\tvalues[Anum_pg_aggregate_aggmtransfn - 1] = ObjectIdGetDatum(mtransfn);\n\tvalues[Anum_pg_aggregate_aggfinalextra - 1] = BoolGetDatum(finalfnExtraArgs);\n\tvalues[Anum_pg_aggregate_aggmfinalextra - 1] = BoolGetDatum(mfinalfnExtraArgs);\n\tif (agginitval)\n\t\t\t\t\t (oldagg->aggkind == AGGKIND_NORMAL ?", "partial_line": "errdetail(\"\\", "completion": "errdetail(\"\\\"%s\\\" is a hypothetical-set aggregate.\", aggName) : <|endoftext|>"}
{"context": "\t\tAssert(isleaf && itup_key->heapkeyspace && itup_key->allequalimage);\n\t\tnewitemoff = OffsetNumberNext(newitemoff);\n\t\tBuffer\t\trbuf;\n\t\t_bt_insert_parent(rel, heaprel, buf, rbuf, stack, isroot, isonly);\n\t{", "partial_line": "_bt_relbuf", "completion": "_bt_relbuf(rel, metabuf); <|endoftext|>"}
{"context": "\t\tbool\t\tisnull;\n\t\t\t\t\t  TYPALIGN_INT  ,\n\t\t\t\t\t\t\t\t false,\n\t\tpfree(val);\n\t\treturn false;", "partial_line": "pg_parameter_aclcheck(name, GetUserId()", "completion": "pg_parameter_aclcheck(name, GetUserId(), ACL_SET) == ACLCHECK_OK)) <|endoftext|>"}
{"context": "\t\t\t\t\t   const char *client_final_message_without_proof,\n\t\treturn false;\n\t}\n\t\tpg_hmac_update(ctx,\n\t{", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswitch (replace_type)\n\t\t\t\tcase PGTYPES_TYPE_STRING_CONSTANT:\n\t\t\t\tcase PGTYPES_TYPE_UINT:", "partial_line": "if", "completion": "if (!t) <|endoftext|>"}
{"context": "\t\tnnewmembers = aclmembers(new_acl, &newmembers);\n\t\tUnlockTuple(relation, &tuple->t_self, InplaceUpdateTupleLock);\nstatic void\n\t\tereport(ERROR,\nstatic void", "partial_line": "ListCell", "completion": "ListCell   *cell; <|endoftext|>"}
{"context": "\tentry_ref = pgstat_get_entry_ref(kind, dboid, objid, false, NULL);\n\tAssert(!pgstat_get_kind_info(kind)->fixed_amount);\n{\n\t\tPgStat_EntryRef *entry_ref =\n\t\tPgStat_Kind kind = key.kind;", "partial_line": "bool", "completion": "bool\t\tdid_flush; <|endoftext|>"}
{"context": "\tListCell   *lc;\n\tTupleDescInitBuiltinEntry(tupdesc, (AttrNumber) 2, \"spclocation\", TEXTOID, -1, 0);\n\tforeach(lc, tablespaces)\n\t\t\tnulls[1] = true;\n\t\t\tvalues[0] = ObjectIdGetDatum(ti->oid);", "partial_line": "if", "completion": "if (ti->size >= 0) <|endoftext|>"}
{"context": "\t}\n\tPoint\t   *datum = DatumGetPointP(in->leafDatum);\n\t\t{\n\t\t\tcase RTSameStrategyNumber:\n\t\t\tcase RTOldBelowStrategyNumber:", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\tif (newTableSpaceId == oldTableSpaceId ||\n\tif (RelationIsMapped(rel))\n\t\tereport(ERROR,\n}\n\t\t\t\t\t  Oid newTableSpaceId,", "partial_line": "Relat", "completion": "Relation\tpg_class; <|endoftext|>"}
{"context": "\t\tinputFileSpec = NULL;\n\t\tpg_fatal(\"one of -d/--dbname and -f/--file must be specified\");\n\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t}\n\t\tif (opts->filename)", "partial_line": "pg_fatal(\"options -s/--schema-only and -", "completion": "pg_fatal(\"options -s/--schema-only and -a/--data-only cannot be used together\"); <|endoftext|>"}
{"context": "\t\t\t worker->bgw_name);\n\t\treturn;\n\t\t\t\t errdetail_plural(\"Up to %d background worker can be registered with the current settings.\",\n\t\t\t\t\t\t\t\t  max_worker_processes),\n\t\t\t\t errhint(\"Consider increasing the configuration parameter \\\"%s\\\".\", \"max_worker_processes\")));", "partial_line": "if (rw", "completion": "if (rw == NULL) <|endoftext|>"}
{"context": "\tPGTYPESchar_free(text);\n\ti = PGTYPEStimestamp_fmt_asc(&ts1, out, 31, \"abc-%X-def-%x-ghi%%\");\n\tfmt = \"%a %b %d %H:%M:%S %z %Y\";\n\tprintf(\"timestamp_defmt_asc(%s, %s) = %s, error: %d\\n\", in, fmt, text, i);\n\tPGTYPESchar_free(text);", "partial_line": "i = PGTYPEStimesta", "completion": "i = PGTYPEStimestamp_defmt_asc(in, fmt, &ts1); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t{\n\tfree(decarr);\n}\n\t\t\tprintf(\"(errno == ECPG_INFORMIX_NUM_OVERFLOW) - \");", "partial_line": "printf(\"(errno == ECPG_INFORMIX_NUM_", "completion": "printf(\"(errno == ECPG_INFORMIX_NUM_UNDERFLOW) - \"); <|endoftext|>"}
{"context": "\tRelation\trel = resultRelInfo->ri_RelationDesc;\n\t\t\t\t\t\t\t\t\t\t  notnull_virtual_attrs);\n\tif (rel->rd_rel->relchecks > 0)\n\t\tif ((failed = ExecRelCheck(resultRelInfo, slot, estate)) != NULL)\n\t\t\tRelation\torig_rel = rel;", "partial_line": "MakeTuple", "completion": "MakeTupleTableSlot(tupdesc, &TTSOpsVirtual)); <|endoftext|>"}
{"context": "static const struct among a_11[290] =\n{ 4, s_11_6, -1, 1, 0},\n{ 7, s_11_21, -1, 12, 0},\n{ 7, s_11_26, -1, 12, 0},\n{ 7, s_11_30, -1, 12, 0},", "partial_line": "{ 5, s_11", "completion": "{ 5, s_11_47, -1, 4, 0}, <|endoftext|>"}
{"context": "\tsize = add_size(size, mul_size(autovacuum_worker_slots,\n\treturn size;\nAutoVacuumShmemInit(void)\n\t\tWorkerInfo\tworker;\n\t\tdclist_init(&AutoVacuumShmem->av_freeWorkers);", "partial_line": "pg_atomic_init_fla", "completion": "pg_atomic_init_flag(&worker[i].wi_dobalance); <|endoftext|>"}
{"context": "\t\tdatum = SysCacheGetAttrNotNull(DATABASEOID, tp,\n\t\tif (!HeapTupleIsValid(tp))\n\t\t\t\t\t\t\t\t\t   Anum_pg_collation_collcollate);\n\t\tdatum = SysCacheGetAttrNotNull(COLLOID, tp,\n\tresult->collate_is_c = (strcmp(collate, \"C\") == 0) ||", "partial_line": "(strcmp(ctype, \"PO", "completion": "(strcmp(ctype, \"POSIX\") == 0); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\treturn jtnode;\n\tif (IsA(node, SubLink))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj->rarg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&child_rels);", "partial_line": "j->larg = *jt", "completion": "j->larg = *jtlink2; <|endoftext|>"}
{"context": "#include \"pgstat.h\"\n#include \"storage/ipc.h\"\nstatic List *lock_files = NIL;\nstatic Latch LocalLatchData;\nvoid", "partial_line": "IsUnderPos", "completion": "IsUnderPostmaster = true; <|endoftext|>"}
{"context": "\tif (IsToastNamespace(RelationGetNamespace(iRel)) &&\n\tSetReindexProcessing(heapId, indexId);\n\t\tForm_pg_index indexForm;\n\t\tif (!HeapTupleIsValid(indexTuple))\n\t\tif (index_bad ||", "partial_line": "indexForm->indisvali", "completion": "indexForm->indisvalid = true; <|endoftext|>"}
{"context": "static const symbol s_2_160[8] = { 'i', 's', 't', 'a', 'n', 'i', 'l', 'a' };\nstatic const symbol s_2_164[5] = { 'o', 'z', 'i', 'l', 'a' };\nstatic const symbol s_2_166[7] = { 'l', 'u', 0xC4, 0x8D, 'i', 'l', 'a' };\nstatic const symbol s_2_180[7] = { 0xC4, 0x91, 'a', 'j', 'a', 'm', 'a' };\nstatic const symbol s_2_183[6] = { 'd', 'i', 'j', 'a', 'm', 'a' };", "partial_line": "static const symbol s_2_185[6] =", "completion": "static const symbol s_2_185[6] = { 'g', 'i', 'j', 'a', 'm', 'a' }; <|endoftext|>"}
{"context": "\t\t\tif (prev_lsn == InvalidXLogRecPtr)\n\t\t\t\t\trb->stream_start(rb, txn, change->lsn);\n\t\t\t\t}\n\t\t\tswitch (change->action)\n\t\t\t{", "partial_line": "if (reloid ==", "completion": "if (reloid == InvalidOid && <|endoftext|>"}
{"context": "\t\t\t\tvalue = argvalue[0];\n\t\t\t\t*op->resvalue =\n}\n\tif (ctor->type == JSCTOR_JSON_ARRAY)\n\t\t\t\t\t\t\t\t\t\t jcstate->constructor->absent_on_null);", "partial_line": "else if (ctor->type == JSCTOR", "completion": "else if (ctor->type == JSCTOR_JSON_OBJECT) <|endoftext|>"}
{"context": "\telse\n\tDatum\t\tseed = PG_GETARG_DATUM(1);\n\tTypeCacheEntry *scache;\n\ttypcache = range_get_typcache(fcinfo, RangeTypeGetOid(r));\n\t\tscache = lookup_type_cache(scache->type_id,", "partial_line": "result ^= up", "completion": "result ^= upper_hash; <|endoftext|>"}
{"context": "{\n\tif (is_commit)\nReorderBufferAbort(ReorderBuffer *rb, TransactionId xid, XLogRecPtr lsn,\n\t\t\t\t   TimestampTz abort_time)\n{", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t parser_errposition(pstate, exprLocation(node))));\n}\nTransformPubWhereClauses(List *tables, const char *queryString,\n\t\tPublicationRelInfo *pri = (PublicationRelInfo *) lfirst(lc);\n\t\t\t\t\t errmsg(\"cannot use column list for relation \\\"%s.%s\\\" in publication \\\"%s\\\"\",", "partial_line": "get_namespace_name(RelationG", "completion": "get_namespace_name(RelationGetNamespace(pri->relation)), <|endoftext|>"}
{"context": "\t\tcase TBLOCK_SUBABORT_END:\n\t\tcase TBLOCK_SUBABORT_RESTART:\n{\n\t\tcase TBLOCK_ABORT:\n\t\tcase TBLOCK_SUBABORT:", "partial_line": "s = s->p", "completion": "s = s->parent; <|endoftext|>"}
{"context": "\t\t\telse if (range_overlaps_internal(rangetyp, r1, r2))\n\t\t\t}\n\treturn make_multirange(mltrngtypoid, rangetyp, range_count3, ranges3);\nDatum\n\t\tPG_RETURN_MULTIRANGE_P(make_empty_multirange(mltrngtypoid, rangetyp));", "partial_line": "int32 range_", "completion": "int32 range_count1, RangeType **ranges1, <|endoftext|>"}
{"context": "\treturn stringinfo_to_xmltype(&buf);\n#endif\n}\nDatum\n}", "partial_line": "texttoxml(", "completion": "texttoxml(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"enum %s contains no values\",\n\tOid\t\t\tenumtypoid;\n\tOid\t\t\tmax;\n\tif (!OidIsValid(max))\n\tPG_RETURN_OID(max);", "partial_line": "(errcode(ERR", "completion": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "\telse if (isinf(arg1))\n\t{\n\t\t}\n\tfloat8\t\targ1 = PG_GETARG_FLOAT8(0);\n\terrno = 0;", "partial_line": "check_float8_array(ArrayTyp", "completion": "check_float8_array(ArrayType *transarray, const char *caller, int n) <|endoftext|>"}
{"context": "{\n\ttext\t   *string = PG_GETARG_TEXT_PP(0);\n\t\t\t\ttlen;\n\t\tunlikely(!AllocSizeIsValid(tlen)))\n\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),", "partial_line": "cp", "completion": "cp += slen; <|endoftext|>"}
{"context": "\txldir = AllocateDir(XLOGDIR);\n\t\t\t\tXLogArchiveCleanup(xlde->d_name);\n\t\t\t}\n\tif (!pg_strong_random(mock_auth_nonce, MOCK_AUTH_NONCE_LEN))\n\tControlFile->system_identifier = sysidentifier;", "partial_line": "ControlFile->wal_", "completion": "ControlFile->wal_level = wal_level; <|endoftext|>"}
{"context": "JsonbValue *\n\tJEntry\t\tentry = container->children[index];\n\t}\n\t}\n}", "partial_line": "JsonbValue *", "completion": "JsonbValue *jbval) <|endoftext|>"}
{"context": "\tif (opts == NULL)\n{\n\tinitStringInfo(&cmd);\n\t\tappendStringInfo(&cmd, \" SLOT \\\"%s\\\"\",\n\tif (options->logical)", "partial_line": "char\t   *pu", "completion": "char\t   *pubnames_str; <|endoftext|>"}
{"context": "\tint\t\t\tcmp = multirange_cmp(fcinfo);\n}\n{\n\t\t\t\t\tlastLower,\n\t\t\t\t\tlastUpper;", "partial_line": "&firstLower,", "completion": "&firstLower, &firstUpper); <|endoftext|>"}
{"context": "\telse if (AmWalSenderProcess())\n\t\tprocgloballist = &ProcGlobal->walsenderFreeProcs;\n\telse\n\t\tMyProc = dlist_container(PGPROC, links, dlist_pop_head_node(procgloballist));\n\t}", "partial_line": "ereport(", "completion": "ereport(FATAL, <|endoftext|>"}
{"context": "void\n{\nbool\n\tfor (;;)\n\t\t\titem = &intset->iter_node->items[intset->iter_itemno++];", "partial_line": "if (intset->i", "completion": "if (intset->iter_node) <|endoftext|>"}
{"context": "}\n\ttext\t   *json = PG_GETARG_TEXT_P(1);\n\tcfgId = getTSCurrentConfig(true);\n{\n\tTSVector\tresult;", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_DUPLICATE_OBJECT),\n\t\t\t\t   false,\t\t\n\t\t\t\t   false,\t\t\n\t\t\t   -1,\t\t\t\t\n\t\t\t   TYPCATEGORY_ARRAY,\t", "partial_line": "F_ARRAY", "completion": "F_ARRAY_OUT, <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"cache lookup failed for attribute %d of relation %u\",\n\tnewIndexId = index_create(heapRelation,\n\t\t\t\t\t\t\t  indcoloptions->values,\n\t\t\t\t\t\t\t  NULL);\n\tindexRelation = index_open(indexRelationId, RowExclusiveLock);", "partial_line": "SetUserIdAndSecContex", "completion": "SetUserIdAndSecContext(save_userid, save_sec_context); <|endoftext|>"}
{"context": "#include \"header.h\"\nextern struct SN_env * nepali_UTF_8_create_env(void);", "partial_line": "static const symbol s_0_5[12] = { 0xE0, 0xA4, 0xB8, 0", "completion": "static const symbol s_0_5[12] = { 0xE0, 0xA4, 0xB8, 0xE0, 0xA4, 0x81, 0xE0, 0xA4, 0x97, 0xE0, 0xA5, 0x88 }; <|endoftext|>"}
{"context": "\t\tint\t\t\terr = tzloadbody(name, canonname, sp, doextend, lsp);\n\t}\n\treturn result;\n\treturn strp;\n\tdo", "partial_line": "+", "completion": "++strp; <|endoftext|>"}
{"context": "\t}\n\tint\t\t\tcflags = REG_ADVANCED;\n\t\tfor (i = 0; i < opt_len; i++)\n\t\t\t\t\tflags->glob = true;\n\t\t\t\t\tbreak;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "}\nint\n\tif (allow_sqlstate)\n\t\t\tstrspn(condname, \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 5)\n}", "partial_line": "plpgsql_parse_err", "completion": "plpgsql_parse_err_condition(char *condname) <|endoftext|>"}
{"context": "{\n\tAclResult\taclresult;\n\tCommandCounterIncrement();\n\taclresult = object_aclcheck(ForeignServerRelationId, server->serverid, ownerId, ACL_USAGE);\n\tif (aclresult != ACLCHECK_OK)", "partial_line": "ftoptions = transformGenericOptions", "completion": "ftoptions = transformGenericOptions(ForeignTableRelationId, <|endoftext|>"}
{"context": "\tif (rte->security_barrier)\n\tif (rte->lateral)\n\t\t}\n\t\t{\n\t\t\tRelids\t\tlvarnos = pull_varnos_of_level(root,", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\tcase ANYCOMPATIBLENONARRAYOID:\n\t\t\t\t\t\t\t\t   anyc_actuals.anyarray_type,\n\t\t\t\t\t\t\t\t   -1,\nresolve_polymorphic_argtypes(int numargs, Oid *argtypes, char *argmodes,\n\tbool\t\thave_polymorphic_result = false;", "partial_line": "bool\t\tha", "completion": "bool\t\thave_anymultirange_result = false; <|endoftext|>"}
{"context": "\t\t\t{\n\t\titerator->data_ptr = p;\n\t\tresult = construct_md_array(values,\n\t}\n\t}", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "static Datum\n\t\t\t\t(errcode(ERRCODE_SINGLETON_SQL_JSON_ITEM_REQUIRED),\n}\n\tif (SRF_IS_FIRSTCALL())\n\t\tjb = PG_GETARG_JSONB_P_COPY(0);", "partial_line": "SRF_RETURN_NEXT(funcctx, JsonbPGetDat", "completion": "SRF_RETURN_NEXT(funcctx, JsonbPGetDatum(JsonbValueToJsonb(v))); <|endoftext|>"}
{"context": "\t\t\tcurposti = 0;\n\t\t}\n\t\t\t\t errhint(\"This may be because of a non-immutable index expression.\"),\n\t\t\t\t\t\t\t\t\tRelationGetRelationName(rel))));\n\tif (unlikely(insertstate->itemsz > BTMaxItemSize))", "partial_line": "if (inser", "completion": "if (insertstate->low < insertstate->stricthigh) <|endoftext|>"}
{"context": "\t{\"d\", 1, NUM_D},\t\t\t\n\t{\"l\", 1, NUM_L},\t\t\t\n\t{\"mi\", 2, NUM_MI},\t\t\t\n\t{\"sp\", 2, NUM_SP},\n\t{\"s\", 1, NUM_S},", "partial_line": "DCH_day, -1, DCH_ff1, -1, DCH_hh24, DCH_", "completion": "DCH_day, -1, DCH_ff1, -1, DCH_hh24, DCH_iddd, DCH_j, -1, -1, DCH_mi, <|endoftext|>"}
{"context": "\tif (max_active_replication_origins == 0)\n\tfor (i = 0; i < max_logical_replication_workers; i++)\n\t}\n\tnsyncworkers = logicalrep_sync_worker_count(subid);\n\t\t\tLogicalRepWorker *w = &LogicalRepCtx->workers[i];", "partial_line": "TimestampDifferenceExceeds(w->la", "completion": "TimestampDifferenceExceeds(w->launch_time, now, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\thash_table->params.entry_size +\nstatic bool\n\t\t\tdsa_pointer next;\n\t\t\tnext = item->next;\n\t\t\tdsa_free(hash_table->area, *bucket_head);", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t}\n\tif (rc != 0)\n\tif (lc_monetary)\n\tif (lang)\n\t\tsetenv(\"LC_MESSAGES\", lc_messages, 1);", "partial_line": "pg_free(lc_m", "completion": "pg_free(lc_monetary); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#include \"utils/datum.h\"", "partial_line": "(newnode->fldname = fro", "completion": "(newnode->fldname = from->fldname) <|endoftext|>"}
{"context": "\tMemoryContext rscxt;\n\t\t\t\t\t\t\t\t  ALLOCSET_SMALL_SIZES);\n\tsscan = systable_beginscan(catalog, PolicyPolrelidPolnameIndexId, true,\n\t\tchar\t   *str_value;\n\t\tpolicy->polcmd = policy_form->polcmd;", "partial_line": "poli", "completion": "policy->policy_name = <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (ostart != NULL)\n\t\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = (*oend) (sem->semstate, fname, isnull);", "partial_line": "return r", "completion": "return result; <|endoftext|>"}
{"context": "#include <limits.h>\n#include <float.h>", "partial_line": "static bool lseg_in", "completion": "static bool lseg_interpt_lseg(Point *result, LSEG *l1, LSEG *l2); <|endoftext|>"}
{"context": "void\n\trl_attempted_completion_function = psql_completion;\n\t\tunsigned char *fqc = (unsigned char *) pg_malloc(256);\n\t\treturn !word_matches(pattern + 1, word, case_sensitive);\n\t\tc = pattern;", "partial_line": "pattern", "completion": "pattern = c + 1; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tlockOwners[0] = lockOwners[i];\n\t\t\t\tlocallock->numLockOwners = 1;\n\t\t\tOid\t\t\trelid;\n\t\t\tif (!EligibleForRelationFastPath(&locallock->tag.lock, lockmode))", "partial_line": "elog(PANIC, \"locallock t", "completion": "elog(PANIC, \"locallock table corrupted\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\ttmask = DTK_M(HOUR);\n\t\t\t\t\tcase DTK_DAY:\n\t\t\t\t\t\tif (!AdjustDays(val, 7, itm_in) ||\n\t\t\t\t\t\t\treturn DTERR_FIELD_OVERFLOW;\n\t\t\t\t\t\ttmask = DTK_M(WEEK);", "partial_line": "!AdjustFractDays(fval, DAYS_", "completion": "!AdjustFractDays(fval, DAYS_PER_MONTH, itm_in)) <|endoftext|>"}
{"context": "\tif (state->N-- > 1)\n\t\tif (state->calcSumX2)\n\t\t\taccum_sum_add(&(state->sumX2), &X2);\n\treturn true;\n}", "partial_line": "numeric_a", "completion": "numeric_accum(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t\tNIL,\n\tAttrNumber *new_grpColIdx;\n\treturn new_grpColIdx;\n\tAttrNumber *grouping_map;\n\tAssert(root->parse->groupingSets);", "partial_line": "maxre", "completion": "maxref = 0; <|endoftext|>"}
{"context": "\tstats_shmem->stats.stat_reset_timestamp = ts;\n\tmemcpy(&reset, reset_offset, sizeof(stats_shmem->stats));\n\tLWLockRelease(&stats_shmem->lock);\n#undef FIXED_COMP\n}", "partial_line": "uint32", "completion": "uint32 numdetach, <|endoftext|>"}
{"context": "static const symbol s_47_1[10] = { 0xCE, 0xB7, 0xCE, 0xB8, 0xCE, 0xB7, 0xCE, 0xBA, 0xCE, 0xB1 };\nstatic const symbol s_49_1[10] = { 0xCF, 0x80, 0xCF, 0x81, 0xCE, 0xBF, 0xCF, 0x83, 0xCE, 0xB8 };\n{ 10, s_49_1, 0, 1, 0},\n};\n{ 8, s_50_0, -1, 1, 0},", "partial_line": "static const symbol s_51_1[1", "completion": "static const symbol s_51_1[10] = { 0xCF, 0x80, 0xCE, 0xBF, 0xCE, 0xB4, 0xCE, 0xB1, 0xCF, 0x81 }; <|endoftext|>"}
{"context": "\t\tMemoryContextSwitchTo(oldcontext);\n\t{\n\telse\nGatherMergePath *\n{", "partial_line": "Ass", "completion": "Assert(pathkeys); <|endoftext|>"}
{"context": "\tint\t\t\tsz = wal_segment_size_mb * segment_count;\n\treturn result;\n{\n\tchar\t\tpath[MAXPGPATH];\n\tfputs(_(\"creating configuration files ... \"), stdout);", "partial_line": "replto", "completion": "repltok, false); <|endoftext|>"}
{"context": "static Datum CopyReadBinaryAttribute(CopyFromState cstate, FmgrInfo *flinfo,\nstatic inline bool CopyGetInt16(CopyFromState cstate, int16 *val);\n\tpq_sendint16(&buf, natts);\n\t\tpq_sendint16(&buf, format); \n\tpq_endmessage(&buf);", "partial_line": "cstate->fe_msgbuf = makeS", "completion": "cstate->fe_msgbuf = makeStringInfo(); <|endoftext|>"}
{"context": "}\nstatic BrinBuildState *\n{\n\tstate->bs_irel = idxRel;\n\tstate->bs_pagesPerRange = pagesPerRange;", "partial_line": "state->bs_le", "completion": "state->bs_leader = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t &transfnexpr,\n\t\t\t(FunctionCallInfo) palloc(SizeForFunctionCallInfo(1));\n\t\tbuild_aggregate_deserialfn_expr(aggdeserialfn,\n\t\t\t\t\t\t\t\t\t\t&deserialfnexpr);\n\t\t\t\t\t\t\t\t (Node *) aggstate, NULL);", "partial_line": "if (AGGKIND_IS_OR", "completion": "if (AGGKIND_IS_ORDERED_SET(aggref->aggkind)) <|endoftext|>"}
{"context": "\t\t\tval = PQresultErrorField(res, PG_DIAG_CONTEXT);\n\t\t\tif (val)\n\t\t\t\tappendPQExpBuffer(msg, libpq_gettext(\"CONTEXT:  %s\\n\"),\n\t\t}\n\t\tif (val)", "partial_line": "if (", "completion": "if (val) <|endoftext|>"}
{"context": "\t\treturn 1;\t\t\t\t\n#ifdef USE_SSL\n\t\tcase 1:\n\t\t\t\tgoto retry4;\n#if defined(EWOULDBLOCK) && (!defined(EAGAIN) || (EWOULDBLOCK != EAGAIN))", "partial_line": "\"\\tThis probably means", "completion": "\"\\tThis probably means the server terminated abnormally\\n\" <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\treturn false;\n\t\t\t\treturn false;\n\t\t}\n\t\ttok = JsonbIteratorNext(&it, &val, true);", "partial_line": "ret", "completion": "return true; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   (chr **) NULL, &hitend);\n\t\treturn REG_OKAY;\n{\n\ts = newdfa(v, &v->g->search, cm, &v->dfa1);\n\t\treturn v->err;", "partial_line": "freedf", "completion": "freedfa(s); <|endoftext|>"}
{"context": "\t\tadd_object_address(TypeRelationId, acoerce->resulttype, 0,\n\t\t\t\t\t\t   context->addrs);\n\t\tadd_object_address(CollationRelationId, coll->collOid, 0,\n\t\tadd_object_address(TypeRelationId, rowexpr->row_typeid, 0,\n\t\t{", "partial_line": "add_object_address(OperatorFamilyRelationId", "completion": "add_object_address(OperatorFamilyRelationId, lfirst_oid(l), 0, <|endoftext|>"}
{"context": "\tnewValue = Conf->CompoundAffixFlags + Conf->nCompoundAffixFlag;\n\tConf->usecompound = true;\n\tConf->nCompoundAffixFlag++;\n\tuint32\t\tflag = 0;\n\t\tif (found != NULL)", "partial_line": "char\t\tsflag[BU", "completion": "char\t\tsflag[BUFSIZ]; <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\t\t\t ItemPointerGetBlockNumber(tid),\n\tif (blkno != InvalidBlockNumber)\nCheckTableForSerializableConflictIn(Relation relation)\n\tHASH_SEQ_STATUS seqstat;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"cannot delete from scalar\")));\n\tif (idx < 0)\n\t\t\tidx = n + idx;\n\t{\n\tif (ARR_NDIM(path) > 1)", "partial_line": "if (JB_ROOT_IS_", "completion": "if (JB_ROOT_IS_SCALAR(in)) <|endoftext|>"}
{"context": "\t\t\t\tfor (i = 0; i < byte; i++)\n\tif (!slow)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}", "partial_line": "att->attcache", "completion": "att->attcacheoff = off; <|endoftext|>"}
{"context": "\tOSAPerGroupState *osastate;\n\tDatum\t\tabbrev_val = (Datum) 0;\n\tif (osastate->number_of_rows == 0)\n\t\tosastate->sort_done = true;\n\t\ttuplesort_rescan(osastate->sortstate);", "partial_line": "mode_val = last_va", "completion": "mode_val = last_val = val; <|endoftext|>"}
{"context": "static const symbol s_4_34[4] = { 'i', 's', 't', 'i' };\nstatic const symbol s_4_37[3] = { 'i', 'v', 'i' };\nstatic const symbol s_4_40[7] = { 'i', 't', 0xC4, 0x83, 0xC8, 0x9B, 'i' };\n{ 3, s_4_5, -1, 1, 0},\n{ 5, s_4_55, -1, 1, 0},", "partial_line": "static const sym", "completion": "static const symbol s_5_3[4] = { 0xC4, 0x83, 's', 'c' }; <|endoftext|>"}
{"context": "\t\ttimeout.tv_sec = cur_timeout / 1000;\n\t\ttimeout.tv_nsec = (cur_timeout % 1000) * 1000000;\n\t\toccurred_events->fd = PGINVALID_SOCKET;\n\t\t\tereport(ERROR,\n\t\t}", "partial_line": "occurred_events->fd = P", "completion": "occurred_events->fd = PGINVALID_SOCKET; <|endoftext|>"}
{"context": "\t\t\tATSimplePermissions(cmd->subtype, rel,\n\t\t\t\t\t\t\t\tATT_TABLE | ATT_PARTITIONED_TABLE);\n\t\t\tpass = AT_PASS_MISC;\n}\n\t\t\tListCell   *lcmd;", "partial_line": "if (pass == AT_PASS_ALTER_TYPE || pass", "completion": "if (pass == AT_PASS_ALTER_TYPE || pass == AT_PASS_SET_EXPRESSION) <|endoftext|>"}
{"context": "{ 5, s_8_59, -1, 2, 0},\n{ 8, s_8_73, 70, 2, 0},\n{\nstatic const symbol s_12[] = { 'u' };\nstatic int r_mark_regions(struct SN_env * z) {", "partial_line": "z->I[2] =", "completion": "z->I[2] = z->l; <|endoftext|>"}
{"context": "\tif (BUFFER_HALF_FILLED(nodeBuffer, gfbb) && !nodeBuffer->queuedForEmptying)\n\t\tnodeBuffer->queuedForEmptying = true;\ngistPopItupFromNodeBuffer(GISTBuildBuffers *gfbb, GISTNodeBuffer *nodeBuffer,\n}\ntypedef struct", "partial_line": "RelocationBuf", "completion": "RelocationBufferInfo *relocationBuffersInfos; <|endoftext|>"}
{"context": "\t{\n\t\t\tbreak;\n\t\tcparc(nfa, a, s->tmp, a->to->tmp);\n\tcleartraverse(nfa, start);\n\tif (STACK_TOO_DEEP(nfa->v->re))", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "    lab0:\n                }\n                    if (ret < 0) return ret;\n                break;\n                break;", "partial_line": "if (z", "completion": "if (z->c >= z->l) goto lab0; <|endoftext|>"}
{"context": "\t\t\t\t\tbytes_to_output =\n\t\t\t\t\t{\n\t\t\t\t\t\tfwrite((char *) (this_line->ptr + bytes_output[j]),\n\t\t\t\t\t\t\tmore_lines = true;\n\t\t\t\tif (col_lineptrs[j][curr_nl_line[j]].ptr != NULL)", "partial_line": "if (wrap[j + 1]", "completion": "if (wrap[j + 1] == PRINT_LINE_WRAP_WRAP) <|endoftext|>"}
{"context": "#else\n#endif\n}\n{\n\t\t\tbreak;", "partial_line": "ERR_cle", "completion": "ERR_clear_error(); <|endoftext|>"}
{"context": "\tLockAcquireResult res;\n\tres = LockAcquire(&tag, ShareLock, false, true);\n\tint32\t\tkey1 = PG_GETARG_INT32(0);\n\tint32\t\tkey2 = PG_GETARG_INT32(1);\n}", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\tgoto enoent;\n\terrno = ENOENT;\nemsgsize:\nstatic int\n\tstatic const char digits[] = \"0123456789\";", "partial_line": "val", "completion": "val = 0; <|endoftext|>"}
{"context": "\ttable_close(tgrel, RowExclusiveLock);\n\tRelation\ttgrel;\n\ttgrel = table_open(TriggerRelationId, AccessShareLock);\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\tScanKeyInit(&skey[1],", "partial_line": "NUL", "completion": "NULL, 2, skey); <|endoftext|>"}
{"context": "static void\n}\n\tFIN_CRC32C(statefile_crc);\n\t\tereport(ERROR,\n\t\t\t\t(errcode_for_file_access(),", "partial_line": "errno =", "completion": "errno = ENOSPC; <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#include \"utils/snapmgr.h\"\n#define PARALLEL_KEY_TRANSACTION_SNAPSHOT\tUINT64CONST(0xFFFFFFFFFFFF0006)\n#define PARALLEL_KEY_PENDING_SYNCS\t\t\tUINT64CONST(0xFFFFFFFFFFFF000B)\n{", "partial_line": "XLogR", "completion": "XLogRecPtr\tlast_xlog_end; <|endoftext|>"}
{"context": "\t\t\t\tCustomScanState *css = (CustomScanState *) planstate;\n\t\tcase T_NestLoop:\n\t\t\tif (((NestLoop *) plan)->join.joinqual)\n\t\t\tshow_upper_qual(plan->qual, \"Filter\", planstate, ancestors, es);\n\t\t\tif (plan->qual)", "partial_line": "if (((HashJoin *) plan)->jo", "completion": "if (((HashJoin *) plan)->join.joinqual) <|endoftext|>"}
{"context": "static int r_attached_pronoun(struct SN_env * z);\nstatic int r_R1(struct SN_env * z);\nstatic int r_mark_regions(struct SN_env * z);\n{\n{ 1, s_0_2, 0, 1, 0},", "partial_line": "{ 1, s", "completion": "{ 1, s_0_6, 0, 3, 0}, <|endoftext|>"}
{"context": "static void exec_check_assignable(PLpgSQL_execstate *estate, int dno);\n\t\t\t\t\t\t\t\t  bool *isNull,\n\t\t\t\t\t\t\t\t PLpgSQL_datum *target,\n\t\t\t\t\t\t\t  Oid valtype, int32 valtypmod);\nstatic void plpgsql_param_compile(ParamListInfo params, Param *param,", "partial_line": "Expr", "completion": "ExprContext *econtext); <|endoftext|>"}
{"context": "\t\t\t\t\t\t(proc->nargs)++;\n\t\t\t\tPLy_input_setup_func(&proc->args[pos], proc->mcxt,\n\t\t}\n\tPyDict_SetItemString(proc->globals, \"SD\", proc->statics);\n\tproc->src = MemoryContextStrdup(proc->mcxt, msrc);", "partial_line": "char\t\tcall[NAMEDATALE", "completion": "char\t\tcall[NAMEDATALEN + 256]; <|endoftext|>"}
{"context": "\t}\n\t\tscan->rs_prefetch_block = heapgettup_initial_block(scan, scan->rs_dir);\n\t{\n\t\t\tcontinue;\n\telse", "partial_line": "if (!RelationUsesLocalBuffers(scan->r", "completion": "if (!RelationUsesLocalBuffers(scan->rs_base.rs_rd) && <|endoftext|>"}
{"context": "\t\t\t\t\t\t   escontext))\n\t{\nstatic void\n\t\t\t\t\t int32 typmod,\n\tHeapTuple\ttup;", "partial_line": "if (get_t", "completion": "if (get_typtype(base_typid) == TYPTYPE_COMPOSITE) <|endoftext|>"}
{"context": "{\n\tMultiXactId multiWarnLimit;\n\tmultiStopLimit = multiWrapLimit - 3000000;\n\tif (multiStopLimit < FirstMultiXactId)\n\t\tmultiVacLimit += FirstMultiXactId;", "partial_line": "MultiXactState->oldes", "completion": "MultiXactState->oldestMultiXactId = oldest_datminmxid; <|endoftext|>"}
{"context": "\tif (!IsTransactionState())\n\t}\n\tpfree(cmd.data);\n\t\t\t\terrhint(\"Check if \\\"primary_slot_name\\\" is configured correctly.\"));\n\ttupslot = MakeSingleTupleTableSlot(res->tupledesc, &TTSOpsMinimalTuple);", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  HASH_FIND, NULL);\n\tif (!locallock || locallock->nLocks <= 0)\n\t{\n\t\t\t lockMethodTable->lockModeNames[lockmode]);\n\t{", "partial_line": "RemoveLocalLo", "completion": "RemoveLocalLock(locallock); <|endoftext|>"}
{"context": "\t\t\t\tswitch (type->u.element->type)\n\t\t\t\t\t\tbase_yyerror(\"internal error: found multidimensional array\\n\");\n\t\t\t\t\t\tECPGfree_type(type->u.element);\n\t\t\tcase ECPGt_struct:\n\t\t\tdefault:", "partial_line": "free(type->type", "completion": "free(type->type_name); <|endoftext|>"}
{"context": "OpfamilynameGetOpfid(Oid amid, const char *opfname)\n{\n\trecomputeNamespacePath();\n\t\t\tcontinue;\t\t\t\n\tHeapTuple\topftup;", "partial_line": "if (!HeapTup", "completion": "if (!HeapTupleIsValid(opftup)) <|endoftext|>"}
{"context": "\t\t\t\toff = ((sp[0] & 0xf0) << 4) | sp[1];\n\t\t\t\t\toff += off;\n\t\t\t}\n\t\t\t\t*dp++ = *sp++;\npglz_maximum_compressed_size(int32 rawsize, int32 total_compressed_size)", "partial_line": "return (int32)", "completion": "return (int32) compressed_size; <|endoftext|>"}
{"context": "\tint\t\t\ti;\n\telse\n\t\tso->keyData = NULL;\n\t\t\t\t\t\t\t\t\t\t\t ALLOCSET_DEFAULT_SIZES);\n\tif (scan->numberOfOrderBys > 0)", "partial_line": "palloc(sizeof(int) * scan->numb", "completion": "palloc(sizeof(int) * scan->numberOfOrderBys); <|endoftext|>"}
{"context": "\t\tcase TIMESTAMPTZOID:\n\t\t\t*tcategory = JSONTYPE_TIMESTAMPTZ;\n\t\t\t\t*outfuncoid = F_ARRAY_OUT;\n\t\t\t\t*tcategory = JSONTYPE_OTHER;\n\t\t\t\t\tCoercionPathType ctype;", "partial_line": "COERC", "completion": "COERCION_EXPLICIT, <|endoftext|>"}
{"context": "static SortItem *build_distinct_groups(int numrows, SortItem *items,\n\t\t\t\t\t\t\t\t\t\t   MultiSortSupport mss, int *ncounts);\nget_mincount_for_mcv_list(int samplerows, double totalrows)\n\t\t\t\tnumattrs,\n\t\t\t\tngroups,", "partial_line": "double\t\tmin", "completion": "double\t\tmincount; <|endoftext|>"}
{"context": "\tif (cstate->opts.on_error != COPY_ON_ERROR_STOP)\n\t{\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_COLUMN_REFERENCE),\n\tif (cstate->opts.convert_selectively)\n\t\t\tif (!list_member_int(cstate->attnumlist, attnum))", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t}\n\t\tif (path1->total_cost < path2->total_cost)\n\t\t\treturn +1;\n\t\t\treturn -1;\n\t\t\treturn +1;", "partial_line": "ret", "completion": "return +1; <|endoftext|>"}
{"context": "FuncCandidateList\n\t\t\treturn NULL;\n\t\tint\t\t\tpathpos = 0;\n\t\telse\n\t\t{", "partial_line": "FuncCandida", "completion": "FuncCandidateList prevResult; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tjcstate->arg_type_cache[i].outfuncid = outfuncid;\n\t\t\t\t\tstate->innermost_caseval = resv;\n\t\t\t{\n\t\t\t\tscratch.d.is_json.pred = pred;\n\t\t\t\telse", "partial_line": "if (", "completion": "if (ntest->argisrow) <|endoftext|>"}
{"context": "            {   int ret = slice_from_s(z, 5, s_265);\n            }\n            {   int ret = slice_from_s(z, 4, s_267);\n                if (ret < 0) return ret;\n                if (ret < 0) return ret;", "partial_line": "if (!(z->I", "completion": "if (!(z->I[1])) return 0; <|endoftext|>"}
{"context": "\t\t\t\telse\n{\n\tfilehash_start_iterate(filehash, &it);\n\ti = 0;\n\tqsort(&filemap->entries, filemap->nentries, sizeof(file_entry_t *),", "partial_line": "final_filemap", "completion": "final_filemap_cmp); <|endoftext|>"}
{"context": "\t\t\tif (commonLen == 0)\n\t\t\t\tout->result.splitTuple.prefixHasPrefix = false;\n\t\t\telse\n\t\t}\nstatic int", "partial_line": "int", "completion": "int\t\t\ti, <|endoftext|>"}
{"context": "\tva_start(args, fmt);\n\tres->noticeHooks.noticeRec(res->noticeHooks.noticeRecArg, res);\n\t\t}\n\t\tif (!newTuples)\n\t\t\t\t\t  strlen(value) + 1,", "partial_line": "for (pstatus = conn->psta", "completion": "for (pstatus = conn->pstatus, prev = NULL; <|endoftext|>"}
{"context": "LogicalTape *\n}\nstatic LogicalTape *\n{\n\tlt->tapeSet = lts;", "partial_line": "lt-", "completion": "lt->pos = 0; <|endoftext|>"}
{"context": "\t},\n\t\"\\342\\200\\246\",\nstatic int\n\t\tmy_str++;\n{", "partial_line": "return", "completion": "return len; <|endoftext|>"}
{"context": "\t\tclassform->relfilenode = newrelfilenumber;\n\t\t\tclassform->relpages = 0;\t\n\t\tclassform->relfrozenxid = freezeXid;\n\tRelationAssumeNewRelfilelocator(relation);\n#define INITRELCACHESIZE\t\t400", "partial_line": "if (!CacheMemo", "completion": "if (!CacheMemoryContext) <|endoftext|>"}
{"context": "\tif (!filename || !(*filename))\n\t{\n\t\t\t\t   *p;\n\t\tfn = *filename;\n\t\twhile (*p != '/' && *p != '\\0')", "partial_line": "oldp", "completion": "oldp = *p; <|endoftext|>"}
{"context": "\t\t\t\tres = executeNextItem(cxt, jsp, NULL, jb, found, true);\n\t\t\t\t\treturn executeItemUnwrapTargetArray(cxt, jsp, jb, found,\n\t\t\t\t{\n\t\t\t\t\tres = jperOk;\n\t\t\t\t}", "partial_line": "in", "completion": "int\t\t\tival; <|endoftext|>"}
{"context": "\tHELP0(\"  \\\\else                  final alternative within current conditional block\\n\");\n\tHELP0(\"  (options: S = show system objects, x = expanded mode, + = additional detail)\\n\");\n\tHELP0(\"  \\\\dE[Sx+] [PATTERN]     list foreign tables\\n\");\n\tHELP0(\"  \\\\det[x+] [PATTERN]     list foreign tables\\n\");\n\t\t  \"                         list [only agg/normal/procedure/trigger/window] functions\\n\");", "partial_line": "HELP0(\"  \\\\dF[x+]  [PATTERN]     list tex", "completion": "HELP0(\"  \\\\dF[x+]  [PATTERN]     list text search configurations\\n\"); <|endoftext|>"}
{"context": "\tLOCKTAG\t\ttag;\n{\n\t(void) LockAcquire(&tag, lockmode, false, false);\n}\nConditionalLockSharedObject(Oid classid, Oid objid, uint16 objsubid,", "partial_line": "LOCKMODE l", "completion": "LOCKMODE lockmode) <|endoftext|>"}
{"context": "\t\tchar\t   *val = palloc((len + 1) * sizeof(char));\n\tStripnullState *_state = (StripnullState *) state;\n\tStripnullState *_state = (StripnullState *) state;\n\tappendStringInfoCharMacro(_state->strval, '[');\nstatic JsonParseErrorType", "partial_line": "sn_array_end", "completion": "sn_array_end(void *state) <|endoftext|>"}
{"context": "\telse if (HeadMatches(\"ALTER\", \"PUBLICATION\", MatchAny, \"ADD|SET\", \"TABLE\") &&\n\telse if (Matches(\"ALTER\", \"SUBSCRIPTION\", MatchAny, \"SET\"))\n\t{\n\t}\n\telse if (Matches(\"ALTER\", \"SUBSCRIPTION\", MatchAny, MatchAnyN,", "partial_line": "COMPLETE_WITH(\"RESET\", \"SET\", \"OWNER TO\", \"REFRESH COLLATI", "completion": "COMPLETE_WITH(\"RESET\", \"SET\", \"OWNER TO\", \"REFRESH COLLATION VERSION\", \"RENAME TO\", <|endoftext|>"}
{"context": "\t\tint\t\t\tlsnindex;\n\t\tfor (int lsnoff = 1; lsnoff < shared->lsn_groups_per_page; lsnoff++)\n\t\t{\n\t\tfd = OpenTransientFile(path, O_RDWR | O_CREAT | PG_BINARY);\n\t\t\tslru_errcause = SLRU_OPEN_FAILED;", "partial_line": "if", "completion": "if (fdata) <|endoftext|>"}
{"context": "#include \"catalog/pg_rewrite.h\"\n#include \"utils/acl.h\"\n\t\t\t\toldtup;\n\tOid\t\t\trewriteObjectId;\n\tvalues[Anum_pg_rewrite_is_instead - 1] = BoolGetDatum(evinstead);", "partial_line": "pg_rewrite_desc = table_op", "completion": "pg_rewrite_desc = table_open(RewriteRelationId, RowExclusiveLock); <|endoftext|>"}
{"context": "\t{\n\tSQLFunctionCache *fcache;\n\t\tflink->mcb.arg = flink;\n\t\tAssert(flink->fcache->func == flink->func);\n\t\t\tflink->func->cfunc.use_count--;", "partial_line": "func->c", "completion": "func->cfunc.use_count++; <|endoftext|>"}
{"context": "\t\t}\n\tItemPointerSetInvalid(&pos->item);\n\t\tpage = BufferGetPage(pos->pendingBuffer);\n\t\t{\n\t\t\t\treturn false;", "partial_line": "UnlockRe", "completion": "UnlockReleaseBuffer(pos->pendingBuffer); <|endoftext|>"}
{"context": "\tOid\t\t\tdboid = IsSharedRelation(relid) ? InvalidOid : MyDatabaseId;\n\tmapping_dir = AllocateDir(PG_LOGICAL_MAPPINGS_DIR);\n\t\t\t\t\tf_lo;\n\t\t\telog(ERROR, \"could not parse filename \\\"%s\\\"\", mapping_de->d_name);\n\t\t\tcontinue;", "partial_line": "files", "completion": "files = lappend(files, f); <|endoftext|>"}
{"context": "    {   int m_test1 = z->l - z->c;\n        {   int ret = r_elisions(z);\n        z->c = c2;\n        if (ret < 0) return ret;\n                        if (ret < 0) return ret;", "partial_line": "goto l", "completion": "goto lab3; <|endoftext|>"}
{"context": "\t\t\t\t\t\tfree(file);\n\t\t\t\t\t\tint\t\t\tnameend = strcspn(p + 1, \":\");\n\t\t\t\t\t\tchar\t   *name = pnstrdup(p + 1, nameend);\n\t\t\t\t\t\tfree(name);\n\t\t\tesc = false;", "partial_line": "else if (", "completion": "else if (*p == '%') <|endoftext|>"}
{"context": "\t\tpfree(numstate.sumX2.pos_digits);\n\t\tpfree(numstate.sumX2.neg_digits);\n#ifdef HAVE_INT128\n\tstate = PG_ARGISNULL(0) ? NULL : (PolyNumAggState *) PG_GETARG_POINTER(0);\n#endif", "partial_line": "PG_RETURN", "completion": "PG_RETURN_NUMERIC(res); <|endoftext|>"}
{"context": "LLVMTypeRef TypeSizeT;\nLLVMTypeRef StructTupleDescData;\nLLVMTypeRef StructMinimalTupleTableSlot;\nLLVMTypeRef StructAggStatePerTransData;\nstatic size_t llvm_jit_context_in_use_count = 0;", "partial_line": "static void llvm_s", "completion": "static void llvm_shutdown(int code, Datum arg); <|endoftext|>"}
{"context": "\t\t{\n\t}\n\treturn (PqRecvLength - PqRecvPointer);\npq_endmsgread(void)\n\t{", "partial_line": "PqCommRead", "completion": "PqCommReadingMsg = false; <|endoftext|>"}
{"context": "\treturn result;\nbitlength(PG_FUNCTION_ARGS)\n}\n\tVarBit\t   *arg1 = PG_GETARG_VARBIT_P(0);\n\t\t\t\t(errcode(ERRCODE_STRING_DATA_LENGTH_MISMATCH),", "partial_line": "p1 = VARB", "completion": "p1 = VARBITS(arg1); <|endoftext|>"}
{"context": "\tif (info == XLOG_OVERWRITE_CONTRECORD)\n\t\tmemcpy(&xlrec, XLogRecGetData(record), sizeof(xl_overwrite_contrecord));\n\t\t\t\t(errmsg(\"successfully skipped missing contrecord at %X/%X, overwritten at %s\",\n\t\telse\n\t\t\tcontinue;", "partial_line": "(errcode(", "completion": "(errcode(ERRCODE_DATA_CORRUPTED), <|endoftext|>"}
{"context": "\t\tdefault:\n\treturn res;\npgconn_bio_method(void)\n\t\t\t!BIO_meth_set_read(res, pgconn_bio_read) ||\nssl_set_pgconn_bio(PGconn *conn)", "partial_line": "BIO_METHOD *b", "completion": "BIO_METHOD *bio_method; <|endoftext|>"}
{"context": "\t\t\tnodes[i].c = *(unsigned char *) (VARDATA_ANY(texti) + commonLen);\n\t\tif (commonLen < VARSIZE_ANY_EXHDR(texti))\n{\n\ttext\t   *reconstrText;\n\tint\t\t\tmaxReconstrLen;", "partial_line": "maxRec", "completion": "maxReconstrLen = in->level + 1; <|endoftext|>"}
{"context": "\t\taction = XLogReadBufferForRedo(record, 0, &buffer);\n\t\tSize\t\tdatalen;\n\t\tpage = BufferGetPage(buffer);\n\t\tdata += SizeOfHeapHeader;\n\t\t\t   newlen);", "partial_line": "elog(PA", "completion": "elog(PANIC, \"failed to add tuple\"); <|endoftext|>"}
{"context": "{\n\t\t\t\treturn FetchPreparedStatementResultDesc(entry);\n\t\tcase T_VariableShowStmt:\n\t\tdefault:\n\t\tcase CMD_SELECT:", "partial_line": "return UtilityReturnsTuples(parsetre", "completion": "return UtilityReturnsTuples(parsetree->utilityStmt); <|endoftext|>"}
{"context": "\tindexstate->biss_NumRuntimeKeys = 0;\n\tif (indexstate->biss_NumRuntimeKeys != 0 ||\n\t\tindexstate->ss.ps.ps_ExprContext = stdecontext;\n\t}\n\tindexstate->biss_ScanDesc =", "partial_line": "estate->", "completion": "estate->es_snapshot, <|endoftext|>"}
{"context": "\treturn align;\n}\n\textlconv = localeconv();\n\tif (*extlconv->decimal_point)\n\t\tgroupdigits = 3;\t\t", "partial_line": "thousands_sep = pg_strdup(extl", "completion": "thousands_sep = pg_strdup(extlconv->thousands_sep); <|endoftext|>"}
{"context": "\t\t\tpfree(pending);\nvoid\n\tPgStat_SubXactStatus *xact_state;\n\tif (xact_state != NULL)\n\tPgStat_SubXactStatus *xact_state;", "partial_line": "pgStatXactS", "completion": "pgStatXactStack = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   const char *uri, PQExpBuffer errorMessage);\n\t\t\t\t\t\t\t\t\t  PQExpBuffer errorMessage);\n\t\t\t\t\t\t\t\t   const char *keyword);\n\t\t\t\t\t\t\t\t\t\t   const char *keyword, const char *value,\nstatic int\tparseServiceFile(const char *serviceFile,", "partial_line": "PQconninfoOpt", "completion": "PQconninfoOption *options, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ExprContext *aggcontext,\n\tDatum\t\tkey;\n#define SH_PREFIX saophash\n\t\t\t\t\t\t\t\t\tDatum key2);\n} ScalarArrayOpExprHashTable;", "partial_line": "#define SH_ELEMENT_TYPE ScalarArray", "completion": "#define SH_ELEMENT_TYPE ScalarArrayOpExprHashEntry <|endoftext|>"}
{"context": "\t{\"september\", MONTH, 9},\n\t{\"tue\", DOW, 2},\nstatic const int szdatetktbl = sizeof datetktbl / sizeof datetktbl[0];\nstatic const datetkn deltatktbl[] = {\n\t{\"hrs\", UNITS, DTK_HOUR},\t", "partial_line": "{\"microsecon\", UNITS, DTK", "completion": "{\"microsecon\", UNITS, DTK_MICROSEC}, <|endoftext|>"}
{"context": "#define PGDLLIMPORT\n#define SQLERRMC_LEN\t150\nextern \"C\"\n\tlong\t\tsqlabc;\n\tstruct", "partial_line": "#define sqlca (*ECPGge", "completion": "#define sqlca (*ECPGget_sqlca()) <|endoftext|>"}
{"context": "\t\t\tfindTableByOid(atooid(PQgetvalue(res, i, i_stxrelid)));\n\t\t\tstatsextinfo[i].stattarget = atoi(PQgetvalue(res, i, i_stattarget));\n\tPQExpBuffer tbloids = createPQExpBuffer();\n\t\tif (!(tinfo->dobj.dump & DUMP_COMPONENT_DEFINITION))\n\t\t\tappendPQExpBufferChar(tbloids, ',');", "partial_line": "appendPQExpBuffer(tbloids, \"%u\",", "completion": "appendPQExpBuffer(tbloids, \"%u\", tinfo->dobj.catId.oid); <|endoftext|>"}
{"context": "\t\telse\n\t}\n\tclassForm = (Form_pg_class) GETSTRUCT(classTuple);\n\tnattrs = classForm->relnatts;\n\tfor (curr_att = 1; curr_att <= nattrs; curr_att++)", "partial_line": "HeapTup", "completion": "HeapTuple\tattTuple; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t   escontext))\n\t{\nstatic void\n\t\t\t\t\t int32 typmod,", "partial_line": "Heap", "completion": "HeapTuple\ttup; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t beentry->st_clientaddr.salen,\n\t\tPG_RETURN_NULL();\n}\n\t\tPG_RETURN_NULL();\n\t\tcase AF_INET6:", "partial_line": "ret = pg_getnameinfo_all(&beentr", "completion": "ret = pg_getnameinfo_all(&beentry->st_clientaddr.addr, <|endoftext|>"}
{"context": "\t\t\tbms_nonempty_difference(inner_paramrels, outerrelids));\n\tbool\t\tresult = false;\n\t\t\t\t bms_overlap(satisfied, sjinfo->min_lefthand)))\n#endif\t\t\t\t\t\t\t\nstatic bool", "partial_line": "paraminfo_get_", "completion": "paraminfo_get_equal_hashops(PlannerInfo *root, ParamPathInfo *param_info, <|endoftext|>"}
{"context": "Datum\nhas_foreign_data_wrapper_privilege_id(PG_FUNCTION_ARGS)\n\tAclResult\taclresult;\n\tif (is_missing)\n\tAclMode\t\tmode;", "partial_line": "PG_RETURN_BOOL(aclresult ==", "completion": "PG_RETURN_BOOL(aclresult == ACLCHECK_OK); <|endoftext|>"}
{"context": "\t\t\t\tclist->oid == oprid)\n\t\t\t{\n\t\tresult = (char *) palloc(NAMEDATALEN);\n{\n\tchar\t   *opr_name_or_oid = PG_GETARG_CSTRING(0);", "partial_line": "in", "completion": "int\t\t\tnargs; <|endoftext|>"}
{"context": "static const symbol s_42_0[8] = { 0xCF, 0x83, 0xCE, 0xB5, 0xCF, 0x81, 0xCF, 0x80 };\nstatic const symbol s_42_1[6] = { 0xCE, 0xBA, 0xCE, 0xBF, 0xCF, 0x80 };\nstatic const symbol s_42_2[8] = { 0xCE, 0xB8, 0xCE, 0xB1, 0xCF, 0x81, 0xCF, 0x81 };\n{\nstatic const symbol s_45_4[10] = { 0xCE, 0xB1, 0xCF, 0x83, 0xCF, 0x85, 0xCE, 0xBC, 0xCF, 0x80 };", "partial_line": "{ 8, s", "completion": "{ 8, s_45_3, 0, 1, 0}, <|endoftext|>"}
{"context": "\t\tif (errno == EINTR)\n\t\t\t   (int64) offset,\n\tif (returnCode < 0)\n\tpgaio_io_start_readv(ioh, vfdP->fd, iovcnt, offset);\n\t\t   uint32 wait_event_info)", "partial_line": "i", "completion": "iovcnt)); <|endoftext|>"}
{"context": "\t\tregister_on_commit_action(relid, oncommit);\n\treturn relid;\n\tSysScanDesc scan;\n\t\t\t\tAnum_pg_inherits_inhrelid,\n\tscan = systable_beginscan(catalogRelation, InheritsRelidSeqnoIndexId, true,", "partial_line": "NULL, 1, &", "completion": "NULL, 1, &key); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\tcontext->appinfos);\n\t\tnewinfo->scansel_cache = NIL;\n\tAssert(!IsA(node, SubLink));\n\tAssert(!IsA(node, RangeTblRef));\n{", "partial_line": "int", "completion": "int\t\t\tnappinfos; <|endoftext|>"}
{"context": "\t\t\t\tvr /= 10;\n\t\t\t\t++removed;\n\t\t\t}\n\t{\n\t\twhile (vp / 10 > vm / 10)", "partial_line": "int32\t\tnexp", "completion": "int32\t\tnexp = exp + olength; <|endoftext|>"}
{"context": "\t\t}\n\t\t}\n\t\t\tif (t_iseq(str, '#'))\n\t\t\t{\n\t\t\t{", "partial_line": "else if (!isspace((unsigned", "completion": "else if (!isspace((unsigned char) *str)) <|endoftext|>"}
{"context": "\ti_trftype = PQfnumber(res, \"trftype\");\n\t\tchar\t   *lanname;\n\tdestroyPQExpBuffer(query);\n\tint\t\t\ti_attstorage;\n\tint\t\t\ti_attlen;", "partial_line": "int", "completion": "int\t\t\ti_attalign; <|endoftext|>"}
{"context": "\t\tint\t\t\tlb_cmpval;\n\t\t\tAssert(outer_map.merged_indexes[outer_index] == -1 &&\n\t\t\t\t   outer_map.merged[outer_index] == false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t &next_index);\n\t\t\t\tgoto cleanup;", "partial_line": "goto c", "completion": "goto cleanup; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tlc = c1 - 0xa3 + LC_CNS11643_3;\n\t\telse\n\t\t{\t\t\t\t\t\t\n\t\t\tif (c1 == 0)", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tAnum_pg_opfamily_opfowner,\n\t\tAUTHOID,\n\t\tInvalidAttrNumber,\n\t\tAuthMemRelationId,\n\t\tRewriteRelationId,", "partial_line": "Anum", "completion": "Anum_pg_rewrite_oid, <|endoftext|>"}
{"context": "\t\t\t\t\treturn 0;\n\t\tcase PGC_BACKEND:\n\t\t\t{\n\t\t\t\t\t\t\t\t\trecord->name)));\n\t\tif (InLocalUserIdChange())", "partial_line": "reco", "completion": "record->name))); <|endoftext|>"}
{"context": "\t\t\tCatalogTupleDelete(sdepRel, &oldtup->t_self);\n\t\tvalues[Anum_pg_shdepend_classid - 1] = ObjectIdGetDatum(classid);\n\t\tCatalogTupleInsert(sdepRel, oldtup);\n}\n\tsdepRel = table_open(SharedDependRelationId, RowExclusiveLock);", "partial_line": "SHARED_DEPENDEN", "completion": "SHARED_DEPENDENCY_OWNER); <|endoftext|>"}
{"context": "\t}\n\topnos = NIL;\n\t\tlargs = lappend(largs, linitial(cmp->args));\n\t\trargs = lappend(rargs, lsecond(cmp->args));\n\tList\t   *largs = lrow->args;", "partial_line": "if (list_length(largs) != l", "completion": "if (list_length(largs) != list_length(rargs)) <|endoftext|>"}
{"context": "\tif (!entry->replicate_valid)\n\t\t\tMemoryContextReset(data->pubctx);\n\t\t}\n\t\tentry->attrmap = NULL;\n\t\t\t\tif (am_partition)", "partial_line": "ancesto", "completion": "ancestor_published = true; <|endoftext|>"}
{"context": "{ 1, s_10_28, -1, 1, 0},\n{ 1, s_10_29, -1, 2, 0},\nstatic const symbol s_11_6[3] = { 0xE9, 'i', 'd' };\nstatic const symbol s_11_10[2] = { 'e', 'i' };\nstatic const symbol s_11_23[3] = { 0xE1, 'i', 'k' };", "partial_line": "static const symbol s_11_35", "completion": "static const symbol s_11_35[2] = { 'i', 'm' }; <|endoftext|>"}
{"context": "\tchar\t   *currdb;\n\tHELP0(\"  \\\\close STMT_NAME       close an existing prepared statement\\n\");\n\tHELP0(\"  \\\\gx [(OPTIONS)] [FILE] as \\\\g, but forces expanded output mode\\n\");\n\tHELP0(\"  \\\\parse STMT_NAME       create a prepared statement\\n\");\n\tHELP0(\"  \\\\q                     quit psql\\n\");", "partial_line": "HELP0(\"  \\\\watch", "completion": "HELP0(\"  \\\\watch [[i=]SEC] [c=N] [m=MIN]\\n\" <|endoftext|>"}
{"context": "\tleftop = (Node *) linitial(clause->largs);\n\tif (!IndexCollMatchesExprColl(idxcollation, expr_coll))\n\t\t\t !contain_volatile_functions(leftop))\n\t\texpr_op = get_commutator(expr_op);\n\t\tvar_on_left = false;", "partial_line": "i", "completion": "index, <|endoftext|>"}
{"context": "\t\tgmtoffset = -(interval->time / USECS_PER_SEC);\n\t\t\t\treturn false;\n\t\t}\n\t*extra = guc_malloc(LOG, sizeof(pg_tz *));\n}", "partial_line": "con", "completion": "const char *tzn; <|endoftext|>"}
{"context": "\t\t\tXLogRegisterBuffer(4, metabuf, REGBUF_WILL_INIT | REGBUF_STANDARD);\n\t\t\txlmeta.fastlevel = metad->btm_fastlevel;\n\t\tif (BufferIsValid(lbuf))\n\t\t\tpage = BufferGetPage(leafbuf);\n\tif (BufferIsValid(metabuf))", "partial_line": "Pa", "completion": "Page\t\tpage; <|endoftext|>"}
{"context": "\tlocallock->holdsStrongLockCount = false;\nvoid\n\treturn awaitedLock;\n{\n\tAssert(locallock->nLocks > 0);", "partial_line": "static ProcW", "completion": "static ProcWaitStatus <|endoftext|>"}
{"context": "\t\t\t\tfreearc(nfa, a);\n\t{\n\t{\n\t\treturn;\n\tif (f != NULL)", "partial_line": "if (STACK_TOO_D", "completion": "if (STACK_TOO_DEEP(nfa->v->re)) <|endoftext|>"}
{"context": "\tModifyTable *node = (ModifyTable *) mtstate->ps.plan;\n\t\tcase CMD_UPDATE:\n\t\t\t\t\t mtstate->resultRelInfo[0].ri_RangeTableIndex != node->nominalRelation &&\n\t\tif (labeltargets)\n\t\t{", "partial_line": "doub", "completion": "double\t\tinsert_path; <|endoftext|>"}
{"context": "\t\t.prev_alnum = false,\ntfunc_upper(char *dst, size_t dstsize, const char *src,\n\treturn unicode_strupper(dst, dstsize, src, srclen, true);\n\ttest_convert(tfunc_lower, \"\u03c3\u03c2'\u03a3' \u03a3\u03a3'\u03a3'\", \"\u03c3\u03c2'\u03c2' \u03c3\u03c3'\u03c2'\");\n\ticu_test_full(\"\u221a\u221e\");", "partial_line": "printf(\"case_test: Postgres Unicode version", "completion": "printf(\"case_test: Postgres Unicode version:\\t%s\\n\", PG_UNICODE_VERSION); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t}\nvoid\n\t\tappendStringInfo(buf, \"%\" PRId64, pageno);\n\t\tappendStringInfo(buf, \"%u offset %u nmembers %d: \", xlrec->mid,", "partial_line": "for (i = 0; i < xl", "completion": "for (i = 0; i < xlrec->nmembers; i++) <|endoftext|>"}
{"context": "}\ndefaultNoticeReceiver(void *arg, const PGresult *res)\n\tif (res->noticeHooks.noticeProc != NULL)\n\t\t\t\t\t\t\t\t\tPQresultErrorMessage(res));\n\t(void) arg;\t\t\t\t\t", "partial_line": "pwdfMatchesString(char *buf, con", "completion": "pwdfMatchesString(char *buf, const char *token) <|endoftext|>"}
{"context": "\t\t\t\t\tnewdwidth;\n\t\t}\n\t\t{\n\t\t\t\trwidth = 1 + (int) log10(cont->nrows);\n\t\t\tif (opt_border == 0)", "partial_line": "else if (opt_bo", "completion": "else if (opt_border == 1) <|endoftext|>"}
{"context": "\tif (kwnum >= 0 && ScanKeywordCategories[kwnum] != UNRESERVED_KEYWORD)\n\tresult = PQexec(pset.db, query);\n\t\t\t\t\t PQerrorMessage(pset.db), query);\n\t\tresult = NULL;\n\tfor (i = point - 1; i >= 0; i--)", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (get_call_result_type(fcinfo, NULL, &tupdesc) != TYPEFUNC_COMPOSITE)\n\t\tMemoryContextSwitchTo(oldcontext);\n\t\tchar\t   *values[5];\n\t\t\tcase COL_NAME_KEYWORD:\n\t\t\t\tvalues[1] = \"R\";", "partial_line": "def", "completion": "default: <|endoftext|>"}
{"context": "{ 6, s_4_18, 16, 2, 0},\n{ 8, s_4_25, 23, 2, 0},\n{ 4, s_4_30, 29, 2, 0},\n{ 4, s_4_31, 29, 2, 0},\n{ 4, s_4_33, 32, 2, 0},", "partial_line": "{ 4, s_4_34", "completion": "{ 4, s_4_34, 32, 2, 0}, <|endoftext|>"}
{"context": "\t\tdclist_init(&AutoVacuumShmem->av_freeWorkers);\n\t\t\tpg_atomic_init_flag(&worker[i].wi_dobalance);\n{\n\treturn free_slots > reserved_slots;\n\t\t\t\t errmsg(\"\\\"autovacuum_max_workers\\\" (%d) should be less than or equal to \\\"autovacuum_worker_slots\\\" (%d)\",", "partial_line": "errdetail(\"The server", "completion": "errdetail(\"The server will only start up to \\\"autovacuum_worker_slots\\\" (%d) autovacuum workers at a given time.\", <|endoftext|>"}
{"context": "\t\tif (is_complex_array(srctype))\nfind_coercion_pathway(Oid targetTypeId, Oid sourceTypeId,\n\t\tsourceTypeId = getBaseType(sourceTypeId);\n\tif (OidIsValid(targetTypeId))\n\t\treturn COERCION_PATH_RELABELTYPE;", "partial_line": "ObjectIdG", "completion": "ObjectIdGetDatum(sourceTypeId), <|endoftext|>"}
{"context": "\tsize_t\t\tcnt;\n\t\tahwrite(buf, 1, cnt, AH);\nstatic void", "partial_line": "EndCompressorNone(Arch", "completion": "EndCompressorNone(ArchiveHandle *AH, CompressorState *cs) <|endoftext|>"}
{"context": "\t\t\t\trelation->rd_rel->relkind != RELKIND_PARTITIONED_TABLE)\n\t\t\t\tereport(ERROR,\n\t\t\tbreak;\n\telse\n\tScanKeyData skey[3];", "partial_line": "values[Anum_", "completion": "values[Anum_pg_description_objoid - 1] = ObjectIdGetDatum(oid); <|endoftext|>"}
{"context": "\t{\n\t\t\tgettext_noop(\"-1 means huge pages are not supported.\"),\n\t\t\tGUC_NOT_IN_SAMPLE | GUC_DISALLOW_IN_FILE | GUC_RUNTIME_COMPUTED\n\t\t&multixact_member_buffers,\n\t\tcheck_serial_buffers, NULL, NULL", "partial_line": "gettext_noop(\"0 means us", "completion": "gettext_noop(\"0 means use a fraction of \\\"shared_buffers\\\".\"), <|endoftext|>"}
{"context": "\tTPARSERSTATEACTION(TPS_InHostFirstAN),\n\tTPARSERSTATEACTION(TPS_InEmail),\n\tTPARSERSTATEACTION(TPS_InURLPathStart),\n\twhile (prs->state->posbyte <= prs->lenstr)\n\t\t\t\tfprintf(stderr, \"  \");", "partial_line": "(item->to", "completion": "(item->tostate != TPS_Null) ? \" tostate \" : \"\", <|endoftext|>"}
{"context": "\t\t0x9848D56D, 0x5064D605, 0x0811D3BD, 0xC03DD0D5,\n\t\t0xCBB5F823, 0x0399FB4B, 0x5BECFEF3, 0x93C0FD9B,\n\t\t0x338A82B2, 0xFBA681DA, 0xA3D38462, 0x6BFF870A,\n\t\t0x9570D92E, 0x5D5CDA46, 0x0529DFFE, 0xCD05DC96,\n\t\t0xB4097684, 0x93744ACD, 0xFAF30E16, 0xDD8E325F,", "partial_line": "0x2EE3266E, 0x099E1A27,", "completion": "0x2EE3266E, 0x099E1A27, 0x60195EFC, 0x476462B5, <|endoftext|>"}
{"context": "\t\tif (!GenerationBlockIsValid(block))\n#if (defined(MEMORY_CONTEXT_CHECKING) && defined(USE_ASSERT_CHECKING)) \\\n\t{\n\twipe_mem(pointer, chunksize);\n\telse", "partial_line": "GenerationRealloc(voi", "completion": "GenerationRealloc(void *pointer, Size size, int flags) <|endoftext|>"}
{"context": "\t\tcase T_CoerceViaIO:\n\t\t\t{\n\t\t\t\tFunctionCallInfo fcinfo_in;\n\t\t\t\tscratch.d.iocoerce.finfo_out = palloc0(sizeof(FmgrInfo));\n\t\t\t\tfmgr_info(iofunc, scratch.d.iocoerce.finfo_out);", "partial_line": "1, Inval", "completion": "1, InvalidOid, NULL, NULL); <|endoftext|>"}
{"context": "#include \"parser/parse_relation.h\"\n#include \"utils/syscache.h\"\nNode *\n\t\t\t\t  Node *last_srf, FuncCall *fn, bool proc_call, int location)\n{", "partial_line": "WindowDef  *over", "completion": "WindowDef  *over = (fn ? fn->over : NULL); <|endoftext|>"}
{"context": "static const symbol s_0_138[4] = { 'i', 'e', 'm', 's' };\nstatic const symbol s_0_153[3] = { 'a', 'u', 's' };\nstatic const symbol s_0_171[6] = { 'i', 'a', 't', 0xC4, 0x97, 's' };\nstatic const symbol s_0_199[4] = { 'e', 'n', 0xC4, 0xAF };\nstatic const symbol s_0_200[4] = { 'e', 'r', 0xC4, 0xAF };", "partial_line": "static const symbol s_0_201[2] =", "completion": "static const symbol s_0_201[2] = { 0xC5, 0xB3 }; <|endoftext|>"}
{"context": "\t{\n\t\t\tresult->jitFlags |= PGJIT_EXPR;\n\t\t\t\t bool hasRecursion, double tuple_fraction,\n\tList\t   *newWithCheckOptions;\n\troot->all_result_relids =", "partial_line": "root->append_rel_li", "completion": "root->append_rel_list = NIL; <|endoftext|>"}
{"context": "\taclresult = object_aclcheck(TypeRelationId, typeoid, roleid, mode);\nhas_type_privilege_id_id(PG_FUNCTION_ARGS)\n}\n{\n\t\tereport(ERROR,", "partial_line": "{\"USAGE\"", "completion": "{\"USAGE\", ACL_USAGE}, <|endoftext|>"}
{"context": "\t\tereport(elevel,\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tp, 0, NULL, NULL))\n\t\tereport(elevel,\n\t\treturn FALSE;\n\t}", "partial_line": "(errmsg(\"could not enable user right \\\"%s\\\": error c", "completion": "(errmsg(\"could not enable user right \\\"%s\\\": error code %lu\", _(\"Lock pages in memory\"), GetLastError()), <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"acldefault('F', fdwowner) AS acldefault, \"\n\t\t\t\t\t\t \"), E',\\n    ') AS fdwoptions \"\n\t{\n\tPQclear(res);\n\tint\t\t\tntups;", "partial_line": "int\t\t\ti", "completion": "int\t\t\ti_srvversion; <|endoftext|>"}
{"context": "\t\t\tif (!nulls_check_ok)\n\t\tif (!bms_is_empty(best_keycolumns))\n\t\t\tif (surplusvars == NULL)\n\t}\n\t\tvars = pull_vars_of_level((Node *) rte->subquery, 1);", "partial_line": "newvars", "completion": "newvars = NIL; <|endoftext|>"}
{"context": "\t\t\t\tparse->wal_range_field = JMWRF_END_LSN;\n\t\t\tbreak;\n}\n\t\t\tparse->manifest_system_identifier = token;\n\t\t\t\t\tbreak;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "        case 99:\n            break;\n            {   int ret = slice_from_s(z, 2, s_229);\n            break;\n                if (ret < 0) return ret;", "partial_line": "if (ret", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\ttab->clusterOnIndex = get_rel_name(indoid);\n\t\t{\n\t\t\tRememberClusterOnForRebuilding(indoid, tab);\n{\n\t{", "partial_line": "Oid\t\t\tconoid", "completion": "Oid\t\t\tconoid = get_index_constraint(indoid); <|endoftext|>"}
{"context": "\t\t\t\tif (c == '\\n')\n\t\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t errmsg(\"unquoted carriage return found in data\"),\n\t\t\t\t}\n\t\t\t\tif ((cstate->eol_type == EOL_NL && c2 != '\\n') ||", "partial_line": "prev_raw_ptr > csta", "completion": "prev_raw_ptr > cstate->input_buf_index) <|endoftext|>"}
{"context": "\tRelation\tconrel;\n\tHeapTuple\ttuple;\n\t\t\t\tAnum_pg_constraint_conrelid,\n\t\t\t\tObjectIdGetDatum(RelationGetRelid(rel)));\n\tScanKeyInit(&skey[2],", "partial_line": "if (!c", "completion": "if (!con->conenforced) <|endoftext|>"}
{"context": "\tretTypeId = INTERNALOID;\n\t\tcase Anum_pg_ts_template_tmpllexize:\n\t}\n\tNameData\tdname;\n\tif (!superuser())", "partial_line": "foreach(pl, para", "completion": "foreach(pl, parameters) <|endoftext|>"}
{"context": "\t\t\taddress.objectSubId = 0;\n\t\t\taddress.objectSubId = 0;\n\t\t\taddress.classId = LanguageRelationId;\n\t\t\taddress.objectId = get_foreign_server_oid(name, missing_ok);\n\t\t\taddress.objectId = get_event_trigger_oid(name, missing_ok);", "partial_line": "address.objectSu", "completion": "address.objectSubId = 0; <|endoftext|>"}
{"context": "    }\n    }\n    {   int m3 = z->l - z->c; (void)m3;\n        }\n        z->c = z->l - m3;", "partial_line": "l", "completion": "lab2: <|endoftext|>"}
{"context": "\tnmatches_exprs = 0;\n\t\tStatisticExtInfo *info = (StatisticExtInfo *) lfirst(lc);\n\t\t\tcontinue;\n\t\tif (info->inherit != rte->inh)\n\t\t\tcontinue;", "partial_line": "List", "completion": "ListCell   *lc3; <|endoftext|>"}
{"context": "\t\t\tresult = TM_Updated;\n\t\telse\n\t\t\tresult = TM_Deleted;\n\t}\n\t{", "partial_line": "tmfd->xmax", "completion": "tmfd->xmax = HeapTupleHeaderGetUpdateXid(tuple->t_data); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   sizeof(struct PgStat_BgWriterStats)))\n\tBGWRITER_ACC(maxwritten_clean);\n\treturn &pgStatLocal.snapshot.bgwriter;\n\tPgStatShared_BgWriter *stats_shmem = (PgStatShared_BgWriter *) stats;\n\tLWLockAcquire(&stats_shmem->lock, LW_EXCLUSIVE);", "partial_line": "LWLockRele", "completion": "LWLockRelease(&stats_shmem->lock); <|endoftext|>"}
{"context": "\t}\n\treturn (Datum) 0;\n\tScanKeyData key[1];\n\tbool\t\trepl_null[Natts_pg_extension];\n\t\t\t\tObjectIdGetDatum(extensionoid));", "partial_line": "a", "completion": "a = NULL; <|endoftext|>"}
{"context": "\t\t\tabort();\n\treturn \"\";\t\t\t\t\t\n}\n\t\tcase TEXTOID:\n}", "partial_line": "sqlda_dynamic_type(Oid type, enum COM", "completion": "sqlda_dynamic_type(Oid type, enum COMPAT_MODE compat) <|endoftext|>"}
{"context": "\t\t\t\tUnlockReleaseBuffer(pos->pendingBuffer);\n\t\t{\n\t\t\tif (GinPageHasFullRow(page))\n\t\t\t{\n\t\t\t\t{", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase PGASYNC_COPY_IN:\n\tif (pqFlush(conn) < 0)\n{\n\tPGcmdQueueEntry *prevquery;\n\tprevquery = conn->cmd_queue_head;", "partial_line": "case PGAS", "completion": "case PGASYNC_READY: <|endoftext|>"}
{"context": "\t\tpolcmd = ACL_DELETE_CHR;\n\t\telog(ERROR, \"unrecognized policy command\");\n\tDatum\t   *role_oids;\n\tListCell   *cell;\n\tint\t\t\ti = 0;", "partial_line": "role_oids[0] =", "completion": "role_oids[0] = ObjectIdGetDatum(ACL_ID_PUBLIC); <|endoftext|>"}
{"context": "\tappendStringInfoChar(&buf, ',');\n\tappendStringInfoChar(&buf, ',');\n\tappendStringInfoChar(&buf, ',');\n\t\tappendStringInfo(&buf, \"%d\", edata->cursorpos);\n\t\tappendCSVLiteral(&buf, application_name);", "partial_line": "PGPROC\t   *leader = MyProc", "completion": "PGPROC\t   *leader = MyProc->lockGroupLeader; <|endoftext|>"}
{"context": "\tdouble\t\tavg_custom_cost;\n\t\treturn false;\n\tif (plan_cache_mode == PLAN_CACHE_MODE_FORCE_GENERIC_PLAN)\nstatic double\n\t{", "partial_line": "if (plan", "completion": "if (plannedstmt->commandType == CMD_UTILITY) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t \"SET conislocal = false\\n\"\n\t\t\t\tappendStringLiteralAH(extra, constr->dobj.name, fout);\n\t\t\tif (!firstitem)\n\t\t\tif (OidIsValid(tbinfo->reloftype))\n\t\t\t\tappendPQExpBufferStr(q, \"\\n-- For binary upgrade, set up typed tables this way.\\n\");", "partial_line": "(tbinfo->relkin", "completion": "(tbinfo->relkind == RELKIND_RELATION || <|endoftext|>"}
{"context": "\tresult = HeapTupleSatisfiesUpdate(&oldtup, cid, buffer);\n\tAssert(result != TM_BeingModified || wait);\n\t\tUnlockReleaseBuffer(buffer);\n\t\txwait = HeapTupleHeaderGetRawXmax(oldtup.t_data);\n\t\t\t\t\t\t\t\t\t\t*lockmode, &current_is_member))", "partial_line": "update_", "completion": "update_xact = InvalidTransactionId; <|endoftext|>"}
{"context": "{ 2, s_2_5, -1, 5, 0},\n{ 1, s_2_8, -1, 4, 0},\n{ 2, s_3_0, -1, 1, 0},\n{ 4, s_4_1, -1, 1, 0}\nstatic const unsigned char g_v[] = { 17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 8 };", "partial_line": "static const s", "completion": "static const symbol s_6[] = { 'y' }; <|endoftext|>"}
{"context": "{ 1, s_0_0, -1, 3, 0},\n{ 2, s_1_6, 0, 2, 0},\nstatic const struct among a_2[3] =\n{ 2, s_2_0, -1, 2, 0},\nstatic const symbol s_3_9[5] = { 'i', 'v', 'i', 't', 'i' };", "partial_line": "static const symbol s", "completion": "static const symbol s_3_11[7] = { 'a', 't', 'i', 'o', 'n', 'a', 'l' }; <|endoftext|>"}
{"context": "#include <ecpglib.h>\n#define ECPGdebug(X,Y) ECPGdebug((X)+100,(Y))", "partial_line": "int", "completion": "int main() { <|endoftext|>"}
{"context": "\t\t\t\t\t\t\textra->dtee_timezone),\n\t\t\terrsave(escontext,\n\t\t\t\tlast = position - 1;\n\t\t}\n\tif (sec != 0)", "partial_line": "str = pg_ultostr_zeropad(s", "completion": "str = pg_ultostr_zeropad(str, min, 2); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase DCH_A_D:\n\t\t\tcase DCH_BC:\n\t\t\t\tif (!tm->tm_mon)", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tlen = VARSIZE_ANY_EXHDR(authoritative);\n\t\t{\n\t\t\tsss->buf1 = repalloc(sss->buf1, sss->buflen1);\n\t\t}\n\t\tsss->buf1[len] = '\\0';", "partial_line": "Min(sss->buflen2 *", "completion": "Min(sss->buflen2 * 2, MaxAllocSize)); <|endoftext|>"}
{"context": "\t\t   !tidstate->tss_isCurrentOf);\n}\n{\n\tnumAllocTids = list_length(tidstate->tss_tidexprs);\n\t\t\t\tDatumGetPointer(ExecEvalExprSwitchContext(tidexpr->exprstate,", "partial_line": "numAllocTids * sizeof(ItemPo", "completion": "numAllocTids * sizeof(ItemPointerData)); <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"common/hashfn.h\"\n#include \"utils/sortsupport.h\"\n#ifdef __FAST_MATH__", "partial_line": "return anyti", "completion": "return anytime_typmod_check(istz, tl[0]); <|endoftext|>"}
{"context": "\treturn hash_any((unsigned char *) &key8, sizeof(key8));\n{\n\tif (key == (float8) 0)\n}\nDatum", "partial_line": "hashoidvector(PG_F", "completion": "hashoidvector(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\tdouble\t\tread_ms = (double) (pgStatBlockReadTime - startreadtime) / 1000;\n\t\t\t}\n\t\t\t\tread_rate = (double) BLCKSZ * total_blks_read /\n\t\t\t\t\t(1024 * 1024) / (secs_dur + usecs_dur / 1000000.0);\n\t\t\t\t\t\t\t total_blks_dirtied);", "partial_line": "initprog_val[1]", "completion": "initprog_val[1] = rel_pages; <|endoftext|>"}
{"context": "\t\tNULL, NULL, NULL\n\t},\n\t\t&syslog_sequence_numbers,\n\t{\n\t\ttrue,", "partial_line": "GUC_NOT_", "completion": "GUC_NOT_IN_SAMPLE <|endoftext|>"}
{"context": "\t\t}\n\tif (table_like_clause->options & CREATE_TABLE_LIKE_STATISTICS)\n\t\t\t{\n\treturn result;\nstatic void", "partial_line": "Hea", "completion": "HeapTuple\ttuple; <|endoftext|>"}
{"context": "\t\t\t\taddress.objectSubId = 0;\n\t\t\tcase OBJECT_USER_MAPPING:\n\t\t{\n\t\t\tif (old_address.classId != RelationRelationId)\n\t\t\t\t\tUnlockDatabaseObject(old_address.classId,", "partial_line": "0, lo", "completion": "0, lockmode); <|endoftext|>"}
{"context": "                if (in_grouping_b(z, g_s_ending, 98, 116, 0)) goto lab0;\n                }\n    }\n        z->ket = z->c;\n        if (z->c - 1 <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((1327104 >> (z->p[z->c - 1] & 0x1f)) & 1)) goto lab3;", "partial_line": "{   int ret =", "completion": "{   int ret = r_R1(z); <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"cross-database references are not implemented: \\\"%s.%s.%s\\\"\",\n\t\t\t\t\t\t\trelation->relname)));\n\t\tif (relation->relpersistence == RELPERSISTENCE_TEMP)\n\t\t\t\t\t\t\t\t errmsg(\"temporary tables cannot specify a schema name\")));\n\t\t}", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tnewbuf = digitbuf_alloc(value->ndigits + 1);\n\tif (value->ndigits > 0)\t\t\nstatic char *\nget_str_from_var(const NumericVar *var)\n\ti = (var->weight + 1) * DEC_DIGITS;", "partial_line": "cp =", "completion": "cp = str; <|endoftext|>"}
{"context": "#include \"catalog/indexing.h\"\n#include \"catalog/pg_ts_config.h\"", "partial_line": "#include \"comm", "completion": "#include \"commands/defrem.h\" <|endoftext|>"}
{"context": "\t\t\tfor (i = 0; i < 6; i++)\nDecodeTimezone(char *str, int *tzp)\n\telse if (*cp == '\\0' && (len = strlen(str)) > 3)\n\t\t*(str + len - 2) = '\\0';\n\ttz = (hr * MINS_PER_HOUR + min) * SECS_PER_MINUTE;", "partial_line": "DecodePosixT", "completion": "DecodePosixTimezone(char *str, int *tzp) <|endoftext|>"}
{"context": "#include \"catalog/pg_amop.h\"\n\t\t\t\t\t errmsg(\"operator family \\\"%s\\\" of access method %s contains support function %s with different left and right input types\",\n\t\t\t\t\t\t\topfamilyname, \"gist\",\n\t\t\tcase GIST_DECOMPRESS_PROC:\n\t\t\tcase GIST_PENALTY_PROC:", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tbase->comparetup = comparetup_heap;\n\tbase->comparetup_tiebreak = comparetup_heap_tiebreak;\n\tbase->readtup = readtup_heap;\n\tbase->haveDatum1 = true;\n\t{", "partial_line": "sortKey->", "completion": "sortKey->ssup_nulls_first = nullsFirstFlags[i]; <|endoftext|>"}
{"context": "\t\t\t\t   / (-max_predicate_locks_per_relation)) - 1\n\t\t\treturn 0;\n\treturn 0;\nCheckAndPromotePredicateLockRequest(const PREDICATELOCKTARGETTAG *reqtag)\n\tPREDICATELOCKTARGETTAG targettag,", "partial_line": "LOCALPREDICA", "completion": "LOCALPREDICATELOCK *parentlock; <|endoftext|>"}
{"context": "\topcnamespace = opcform->opcnamespace;\n\t\t!list_member_oid(activeSearchPath, opcnamespace))\n\tReleaseSysCache(opctup);\nOpfamilynameGetOpfid(Oid amid, const char *opfname)\n{", "partial_line": "recomputeN", "completion": "recomputeNamespacePath(); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t{\n\t\t\t\t\tmemcpy(localgssstatus, beentry->st_gssstatus, sizeof(PgBackendGSSStatus));\n\t\t\tif (pgstat_read_activity_complete(before_changecount,\n\t\t\t\t\t\t\t\t\t\t&localentry->backend_subxact_count,", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "};\nstatic const symbol s_1_38[16] = { 0xCF, 0x84, 0xCE, 0xB1, 0xCF, 0x84, 0xCE, 0xBF, 0xCE, 0xB3, 0xCE, 0xB9, 0xCF, 0x89, 0xCE, 0xBD };\n{ 10, s_1_6, -1, 9, 0},\n{ 14, s_1_13, -1, 2, 0},\n{ 8, s_1_18, -1, 9, 0},", "partial_line": "{ 12, s_1_19, -1", "completion": "{ 12, s_1_19, -1, 7, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t  bool setstorage, char newstorage,\n\t\tAttrNumber\tindattnum = 0;\n\t\t\t}\n\t\t\t\tattrtuple->attcompression = newcompression;\n\t\t\t\t\t\t\t\t\t  attrtuple->attnum);", "partial_line": "Relation\tattre", "completion": "Relation\tattrelation; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\tgettimeofday(&current_time, NULL);\n\t\t\t\tPGcancelConn *cancel_conn = PQcancelCreate(conn);\n\t}\n\t{", "partial_line": "if (fl", "completion": "if (flags & STEP_RETRY) <|endoftext|>"}
{"context": "\tquals = order_qual_clauses(root, best_path->quals);\n\tProjectSet *plan;\n\tList\t   *tlist;\n{\n\tMaterial   *plan;", "partial_line": "plan = make_", "completion": "plan = make_material(subplan); <|endoftext|>"}
{"context": "\t\tout->len = 0;\n\tMemoryContext aggcontext,\n\tbool\t\tskip;\n\tif (!AggCheckCallContext(fcinfo, &aggcontext))\n\t\tstate->str = makeStringInfo();", "partial_line": "errmsg(\"could not determine da", "completion": "errmsg(\"could not determine data type for argument %d\", 1))); <|endoftext|>"}
{"context": "} fe_scram_state_enum;\n\tfe_scram_state_enum state;\n\tint\t\t\tsaltlen;\n\tchar\t   *nonce;\n\tchar\t   *prep_password;", "partial_line": "pg_sasl", "completion": "pg_saslprep_rc rc; <|endoftext|>"}
{"context": "KnownAssignedXidsRemovePreceding(TransactionId removeXid)\n\tint\t\t\thead,\n\ttail = pArray->tailKnownAssignedXids;\n\t\tif (KnownAssignedXidsValid[i])\n\tif (i >= head)", "partial_line": "stat", "completion": "static int <|endoftext|>"}
{"context": "#include \"ecpglib_extern.h\"\n\t{\n\t\t\tsnprintf(sqlca->sqlerrm.sqlerrmc, sizeof(sqlca->sqlerrm.sqlerrmc),\n\t\t\tsnprintf(sqlca->sqlerrm.sqlerrmc, sizeof(sqlca->sqlerrm.sqlerrmc),\n\t\t\tbreak;", "partial_line": "ecpg_gettext(\"invalid sy", "completion": "ecpg_gettext(\"invalid syntax for type boolean: \\\"%s\\\", on line %d\"), str, line); <|endoftext|>"}
{"context": "\t\t\tcase 'f':\n\t\t\t\tappendPQExpBufferStr(query, \"DISABLE\");\n\t\t\t\tbreak;\n\tdestroyPQExpBuffer(trigprefix);\nstatic void", "partial_line": "dumpEventTri", "completion": "dumpEventTrigger(Archive *fout, const EventTriggerInfo *evtinfo) <|endoftext|>"}
{"context": "\t\tif (shared->page_status[slotno] == SLRU_PAGE_VALID)\n\t\t\tSlruInternalWritePage(ctl, slotno, NULL);\n\t\t\tSimpleLruWaitIO(ctl, slotno);\n\t\tgoto restart;\nstatic bool", "partial_line": "|| (1U", "completion": "|| (1U << 31) % per_page != 0); <|endoftext|>"}
{"context": "\t\t\t\treldistinct *= mvndistinct;\n\t\t\t\t\trelmaxndistinct = mvndistinct;\n\t\t\t\t{\n\t\t\t\t\t\testinfo->flags |= SELFLAG_USED_DEFAULT;\n\t\t\tdouble\t\tclamp = rel->tuples;", "partial_line": "} while", "completion": "} while (varinfos != NIL); <|endoftext|>"}
{"context": "static NamedLWLockTrancheRequest *NamedLWLockTrancheRequestArray = NULL;\nstatic void InitializeLWLocks(void);\n{\nbool\t\tTrace_lwlocks = false;\n\t\tereport(LOG,", "partial_line": "errhidec", "completion": "errhidecontext(true), <|endoftext|>"}
{"context": "\t\t\t\t   MemoryContext querytree_context,\n\t\t\t\t   int cursor_options,\n{\n\tif (plansource->is_oneshot)\n\t{", "partial_line": "MemoryContextSwitchTo(qu", "completion": "MemoryContextSwitchTo(querytree_context); <|endoftext|>"}
{"context": "\tstatus->curEntry = curElem->link;\nhash_seq_term(HASH_SEQ_STATUS *status)\nvoid\n\t\t\t hashp->tabname);\n\tif (new_segnum >= hctl->nsegs)", "partial_line": "for (cur", "completion": "for (currElement = *oldlink; <|endoftext|>"}
{"context": "\t\tAggref\t   *parent_agg;\n\t\tchild_agg->args = NIL;\n\tListCell   *l;\n\t{\n\t\tVar\t\t   *newvar;", "partial_line": "tle", "completion": "tle->resno, <|endoftext|>"}
{"context": "\tHASHCTL\t\tctl;\n\tctl.hcxt = CurrentMemoryContext;\n}\n\tbool\t\tfound;\n\t{", "partial_line": "out->", "completion": "out->len = 0; <|endoftext|>"}
{"context": "\t}\n\t}\n\tconn = connectMaintenanceDatabase(&cparams, progname, echo);\n\tresult = PQexec(conn, sql.data);\n\texit(0);", "partial_line": "help(const char *p", "completion": "help(const char *progname) <|endoftext|>"}
{"context": "\tAssert(iovcnt > 0);\n\t\t\tAssert(transferred == 0);\nssize_t\n\t\terrno = EINVAL;\n#endif", "partial_line": "size_t\t\tthis_io", "completion": "size_t\t\tthis_iov_size; <|endoftext|>"}
{"context": "IsSquashableConst(Node *element)\n{\n\t\t{\n\t\treturn false;\nstatic bool", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\tappendPQExpBuffer(&sql, \"CREATE DATABASE %s\",\n\tif (owner)\n\tif (encoding)\n\tif (template)\n\tif (builtin_locale)", "partial_line": "if (", "completion": "if (lc_collate) <|endoftext|>"}
{"context": "#include \"postgres.h\"\n{\npgstat_drop_function(Oid proid)\n{", "partial_line": "MyD", "completion": "MyDatabaseId, <|endoftext|>"}
{"context": "{\n\tchar\t   *volatile cmsg = NULL;\n\t\tFlushErrorState();\nstatic SV **\n\tSV\t\t  **ret;", "partial_line": "ret = hv_store(hv,", "completion": "ret = hv_store(hv, hkey, hlen, val, 0); <|endoftext|>"}
{"context": "\tint\t\t\ttotal_written = 0;\n\t\tfor (int i = 0; i < spillslot->tts_tupleDescriptor->natts; i++)\n\t\t{\n\ttotal_written += tuple->t_len;\nhashagg_batch_new(LogicalTape *input_tape, int setno,", "partial_line": "batch->input_ca", "completion": "batch->input_card = input_card; <|endoftext|>"}
{"context": "\t.DebugPrint = PrintString\n\t\t\t\tchild;\n\t\tbefore_desc[i].DebugPrint = PrintString;\n\t\tafter_desc[i].release_priority = RELEASE_PRIO_FIRST + i;\n\t\tResourceOwnerEnlarge(child);", "partial_line": "CStringGetDatum(psprintf(\"child before loc", "completion": "CStringGetDatum(psprintf(\"child before locks priority %d\", kind->release_priority)), <|endoftext|>"}
{"context": "\tjoinrel->useridiscurrent = false;\n\tjoinrel->non_unique_for_rels = NIL;\n\tjoinrel->live_parts = NULL;\n\tjoinrel->partexprs = NULL;\n\tbuild_joinrel_tlist(root, joinrel, outer_rel, sjinfo, pushed_down_joins,", "partial_line": "sjin", "completion": "sjinfo); <|endoftext|>"}
{"context": "\tListCell   *l;\n\toperators = NIL;\n\t\tOpFamilyMember *member;\n\t\t{\n\t\t\t\tif (item->order_family)", "partial_line": "aclcheck_error(", "completion": "aclcheck_error(ACLCHECK_NOT_OWNER, OBJECT_FUNCTION, <|endoftext|>"}
{"context": "\t\t\t\tif (nbytes > work_mem_bytes)\n\t\t\t\t}\n\t\t\t\tCost\t\trun_cost = cpu_operator_cost * path->rows;\n\t\t\t*rescan_total_cost = path->total_cost;\n\tcost_qual_eval_context context;", "partial_line": "Li", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tbreak;\n\t\tcase T_FunctionScan:\n\t\t\t\t\tfunccontext.paramids = NULL;\n\t\t\t\t\tcontext.paramids = bms_add_members(context.paramids,", "partial_line": "sc", "completion": "scan_params); <|endoftext|>"}
{"context": "static const symbol s_1_10[4] = { 'i', 0xC4, 0x85, 'j' };\nstatic const symbol s_1_18[6] = { 'u', 0xC4, 0x8D, 'i', 'u', 'k' };\nstatic const symbol s_1_38[4] = { 'i', 'u', 'o', 's' };\nstatic const symbol s_1_42[4] = { 'i', 0xC4, 0x85, 's' };\nstatic const symbol s_1_48[3] = { 'i', 'n', 't' };", "partial_line": "static const symbol", "completion": "static const symbol s_1_50[3] = { 'u', 'o', 't' }; <|endoftext|>"}
{"context": "{\n{ 3, s_23_1, -1, -1, 0},\nstatic const symbol s_24_5[3] = { 0xE0, 0xAF, 0x88 };\nstatic const symbol s_24_6[3] = { 0xE0, 0xAE, 0xBE };\n{", "partial_line": "{ 3, s_", "completion": "{ 3, s_24_3, -1, -1, 0}, <|endoftext|>"}
{"context": "\tif (result != NULL)\n\tPoint\t   *pt = PG_GETARG_POINT_P(0);\n\tLINE\t   *line = PG_GETARG_LINE_P(1);\n\tPoint\t   *pt = PG_GETARG_POINT_P(0);\n\tLSEG\t   *lseg = PG_GETARG_LSEG_P(1);", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "#ifdef WPARSER_TRACE\n#define TPARSERSTATEACTION(state) \\\n#else\n\tTPARSERSTATEACTION(TPS_InAsciiWord),\n\tTPARSERSTATEACTION(TPS_InXMLBegin),", "partial_line": "TPARSERSTATEACTION(TPS_InH", "completion": "TPARSERSTATEACTION(TPS_InHostFirstAN), <|endoftext|>"}
{"context": "\t\t\ttimeout.tv_sec = (end_time - now) / 1000000;\n\t\t}\n\t\telse\n\t\tptr_timeout = &timeout;\n}", "partial_line": "return pg_encoding_", "completion": "return pg_encoding_mblen(encoding, s); <|endoftext|>"}
{"context": "\t\t}\n\t\telse if (token->string[4] == 'g')\t\n\t\t\t\t\t errcontext(\"line %d of configuration file \\\"%s\\\"\",\n\t\t}\n\t\telse if (token->string[4] == 'n' && token->string[6] == 's')", "partial_line": "errmsg(\"inva", "completion": "errmsg(\"invalid connection type \\\"%s\\\"\", <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"pendingOps corrupted\");\n\t}\t\t\t\t\t\t\t\n\tCheckpointStats.ckpt_sync_rels = processed;\n\tCheckpointStats.ckpt_agg_sync_time = total_elapsed;\nvoid", "partial_line": "RememberSyncRequest(const FileTag *ftag, Sy", "completion": "RememberSyncRequest(const FileTag *ftag, SyncRequestType type) <|endoftext|>"}
{"context": "\tresult = ((Form_pg_class) GETSTRUCT(tuple))->relhassubclass;\n}\n\tListCell   *queue_item;\n\t\t\t\tresult = true;\n\tvalues[Anum_pg_inherits_inhseqno - 1] = Int32GetDatum(seqNumber);", "partial_line": "tuple = heap_form_tuple(Rela", "completion": "tuple = heap_form_tuple(RelationGetDescr(inhRelation), values, nulls); <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"), E',\\n    ') AS fdwoptions \"\n\t{\n\tPQclear(res);\n\tint\t\t\tntups;\n\tint\t\t\ti_srvversion;", "partial_line": "\"sr", "completion": "\"srvowner, \" <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t location);\n\t\t\t\t\t\t\t\t\t\t\t ccontext,\n\t\t\t\t\t\t\t\t   rhs, exprType(rhs),\n\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t\t\t\t\t\t\" but expression is of type %s\",", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t{\n\t\t}\n\t{\n\t\tconst uint32 q = log10Pow5(-e2);\n\t\tconst int32 i = -e2 - q;", "partial_line": "lastRemovedDigit = (uint8) (mul", "completion": "lastRemovedDigit = (uint8) (mulPow5divPow2(mv, i + 1, j) % 10); <|endoftext|>"}
{"context": "\tstruct arcbatch *abnext;\n\tfor (sb = nfa->lastsb; sb != NULL; sb = sbnext)\n\t{\n\t\tabnext = ab->next;\n}", "partial_line": "stat", "completion": "static struct state * <|endoftext|>"}
{"context": "\t\t\tPGresult   *res;\n\tres = PQexec(conn, \"SELECT pg_catalog.pg_is_in_recovery()\");\n\treturn ret == 0;\n}\n\tint\t\t\tcur_repslots;", "partial_line": "if (server_is_in", "completion": "if (server_is_in_recovery(conn)) <|endoftext|>"}
{"context": "\t}\n\telse if (IsA(expr, OpExpr))\n{\n\tList\t   *arguments;\n\tReturnSetInfo rsinfo;", "partial_line": "*isDone = ExprMul", "completion": "*isDone = ExprMultipleResult; <|endoftext|>"}
{"context": "\tsize_t\t\ti;\n\t\tLWLockAcquire(PARTITION_LOCK(hash_table, i), LW_EXCLUSIVE);\n\t\tdsa_allocate_extended(hash_table->area,\n\t\t\t\t\t\t\t  sizeof(dsa_pointer) * new_size,\n\t\tdsa_pointer item_pointer = hash_table->buckets[i];", "partial_line": "while (DsaPointerIsVali", "completion": "while (DsaPointerIsValid(item_pointer)) <|endoftext|>"}
{"context": "{ 5, s_2_1497, 1488, 102, 0},\n{ 4, s_2_1517, 1503, 98, 0},\n{ 2, s_2_1521, -1, 20, 0},\n{ 3, s_2_1526, 1523, 24, 0},\n{ 4, s_2_1546, -1, 43, 0},", "partial_line": "{ 5, s_2_1558,", "completion": "{ 5, s_2_1558, 1557, 128, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tAssert(stmt->args == NIL);\n\t\t\t\t\t\t\taddress = DefineType(pstate,\n\t\t\t\t\t\t\t\t\t\t\t\t stmt->definition);\n\t\t\t\t\t\t\tAssert(stmt->args == NIL);\n\t\t\t\t\t\t\t\t\t\t\t\t\t   stmt->definition);", "partial_line": "stmt->", "completion": "stmt->definition, <|endoftext|>"}
{"context": "    if (!(z->I[0])) return 0;\n            if (ret < 0) return ret;\n    z->I[0] = 1;\n        }\n        z->c = z->l - m3;", "partial_line": "{   int", "completion": "{   int m5 = z->l - z->c; (void)m5; <|endoftext|>"}
{"context": "\t{\n\tpg_atomic_write_u64(&XLogCtl->InitializeReserved, pg_atomic_read_u64(&XLogCtl->InitializedUpTo));\n\tPreallocXlogFiles(EndOfLog, newTLI);\n\tTrimMultiXact();\n\t\tAssert(!XLogRecPtrIsInvalid(missingContrecPtr));", "partial_line": "UpdateFullP", "completion": "UpdateFullPageWrites(); <|endoftext|>"}
{"context": "\t\t\tns_uri = coerce_to_specific_type(pstate, ns_uri,\n\t\t\t\t\t\t\t\t\t\tr->name),\n\t\t\t\t\t\t\t parser_errposition(pstate, r->location)));\n\t\t\tns_names = lappend(ns_names,\n\t\t\t\t\t\t\t   r->name ? makeString(r->name) : NULL);", "partial_line": "Oid\t\t\tfu", "completion": "Oid\t\t\tfuncargtypes[1]; <|endoftext|>"}
{"context": "\t\t\t(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),\n\tappendStringInfo(str, \"%s,%s\", xstr, ystr);\n\t\t\tNode *escontext)\n\t\tstr++;\n\tif ((*isopen = (*str == LDELIM_EP)))", "partial_line": "de", "completion": "depth++; <|endoftext|>"}
{"context": "\t\t\tcurSection = te->section;\n\t\tif (ropt->verbose ||\n\t\t\tsanitized_schema = sanitize_line(te->namespace, true);\n\t\t\tahprintf(AH, \"%d; %u %u %s %s %s %s\\n\", te->dumpId,\n{", "partial_line": "AH->EndLOPtr(AH,", "completion": "AH->EndLOPtr(AH, AH->currToc, oid); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tcase CAC_STARTUP:\n\t\t\t\t\t\t errmsg(\"the database system is starting up\")));\n\t\t\t\t\t\t\t errdetail(\"Hot standby mode is disabled.\")));\n\t\t\t\t\tereport(FATAL,", "partial_line": "errdetail(\"Recovery", "completion": "errdetail(\"Recovery snapshot is not yet ready for hot standby.\"), <|endoftext|>"}
{"context": "\t\t\t\t\terrcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\tif (cxt->vars == NULL ||\n\t\t\t\t\t\tpnstrdup(varName, varNameLength))));\n\t\t\t\t\t\t\t JsonbValue *baseObject, int *baseObjectId)\n\tJsonbInitBinary(baseObject, vars);", "partial_line": "stat", "completion": "static int <|endoftext|>"}
{"context": "\tif (!(buf_state & BM_DIRTY))\n\tif (pgaio_wref_valid(&bufHdr->io_wref))\n\tbuf_state |= set_flag_bits;\n}\n\t{", "partial_line": "hresult = (LocalBuff", "completion": "hresult = (LocalBufferLookupEnt *) <|endoftext|>"}
{"context": "\tif (newedata->funcname)\n\tif (newedata->detail_log)\n\t\tnewedata->detail_log = pstrdup(newedata->detail_log);\n\t\tnewedata->column_name = pstrdup(newedata->column_name);\n}", "partial_line": "if (e", "completion": "if (edata->message) <|endoftext|>"}
{"context": "static const symbol s_0_84[9] = { 0xE0, 0xA4, 0x85, 0xE0, 0xA4, 0xA4, 0xE0, 0xA5, 0x87 };\nstatic const symbol s_0_87[6] = { 0xE0, 0xA4, 0xA8, 0xE0, 0xA5, 0x87 };\nstatic const symbol s_0_95[3] = { 0xE0, 0xA4, 0x8A };\nstatic const symbol s_0_106[6] = { 0xE0, 0xA4, 0x86, 0xE0, 0xA4, 0x93 };\nstatic const symbol s_0_114[12] = { 0xE0, 0xA4, 0x8A, 0xE0, 0xA4, 0x82, 0xE0, 0xA4, 0x97, 0xE0, 0xA4, 0xBE };", "partial_line": "static const symbol s_0_131[3] =", "completion": "static const symbol s_0_131[3] = { 0xE0, 0xA4, 0xBF }; <|endoftext|>"}
{"context": "\t\tereport(ERROR,\nplpgsql_estate_setup(PLpgSQL_execstate *estate,\n{\n\tfunc->cur_estate = estate;\n\testate->trigdata = NULL;", "partial_line": "estate->evtrigd", "completion": "estate->evtrigdata = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\tresult = transformAExprNullIf(pstate, a);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tresult = transformAExprOp(pstate, a);\n\t\t\t}\n\t\tcase T_MultiAssignRef:", "partial_line": "result = transformGroupi", "completion": "result = transformGroupingFunc(pstate, (GroupingFunc *) expr); <|endoftext|>"}
{"context": "\t\t\t\tspgxlogAddLeaf *xlrec = (spgxlogAddLeaf *) rec;\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t xlrec->offnumNew,\n\t\t\t}", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "    return 1;\nstatic int r_Step_2(struct SN_env * z) {\n    int among_var;\n        if (ret <= 0) return ret;\n    switch (among_var) {", "partial_line": "{   int ret = slice", "completion": "{   int ret = slice_from_s(z, 4, s_11); <|endoftext|>"}
{"context": "\t\t\t\tif (RESULT_IS_FINAL(matches[i], is_or))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   item->values[idx],\n\t\t{\n\t\t\tFmgrInfo\topproc;\n\t\t\tint16\t\telmlen;", "partial_line": "fmgr_info(get_opcode(expr", "completion": "fmgr_info(get_opcode(expr->opno), &opproc); <|endoftext|>"}
{"context": "\tpq_sendint32(out, RelationGetRelid(rel));\n\taction = pq_getmsgbyte(in);\nlogicalrep_write_update(StringInfo out, TransactionId xid, Relation rel,\n\tpq_sendbyte(out, LOGICAL_REP_MSG_UPDATE);\n\t\tlogicalrep_write_tuple(out, rel, oldslot, binary, columns,", "partial_line": "LogicalRepTupleData", "completion": "LogicalRepTupleData *oldtup, <|endoftext|>"}
{"context": "static Snapshot SecondarySnapshot = NULL;\nTransactionId TransactionXmin = FirstNormalTransactionId;\n\tSnapshot\tas_snap;\n} ActiveSnapshotElt;", "partial_line": "bool\t\tFirstSnapshotSe", "completion": "bool\t\tFirstSnapshotSet = false; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tpstate.forcenonrequired = false;\n\t\t}\n\t\t\tif (minoff <= maxoff && !P_LEFTMOST(opaque))\n\t\t\t\t\tso->currPos.moreLeft = false;", "partial_line": "_bt_parallel_prims", "completion": "_bt_parallel_primscan_schedule(scan, <|endoftext|>"}
{"context": "{ 3, s_2_7, -1, 1, 0},\nstatic const symbol s_0[] = { 'e', 'r' };\n    return 1;\n        if (z->c <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((1851426 >> (z->p[z->c - 1] & 0x1f)) & 1)) { z->lb = mlimit1; return 0; }\n        lab0:", "partial_line": "{   int", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\t\t\telog(ERROR, \"found self tuple multiple times in index \\\"%s\\\"\",\n\t\tif (TransactionIdIsValid(xwait) &&\n\t\t\t\t\t\t\tRelationGetRelationName(index)),\n\t\t\t\t\t errdetail(\"Key conflicts with existing key.\"),\ncheck_exclusion_constraint(Relation heap, Relation index,", "partial_line": "const Datum", "completion": "const Datum *existing_values, const bool *existing_isnull, <|endoftext|>"}
{"context": "\t\twfuncrc->opno = runoperator;\n\treturn false;\n\tif (!IsA(opexpr, OpExpr))\n\t\tTargetEntry *tle = list_nth(subquery->targetList, var2->varattno - 1);\n\t\t\treturn keep_original;", "partial_line": "Query", "completion": "Query\t   *subquery = rte->subquery; <|endoftext|>"}
{"context": "\t\tif (hot)\n{\n\t{\n\t\tpgstat_info->counts.delta_dead_tuples -= delta;\n}", "partial_line": "PgStat_TableSta", "completion": "PgStat_TableStatus *tablestatus = NULL; <|endoftext|>"}
{"context": "\t\t{\n{\n\tPendingRelDelete *pending;\n\tPendingRelDelete *next;\n\t}", "partial_line": "AtSubA", "completion": "AtSubAbort_smgr(void) <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\tswitch (list_length(names))\n\t\tcase 3:\n\t\t\trel->catalogname = strVal(linitial(names));\n\tListCell   *l;", "partial_line": "elog(ERROR", "completion": "elog(ERROR, \"unexpected node type in name list: %d\", <|endoftext|>"}
{"context": "\t0x0376, 0x0379,\n\t0x060D, 0x061A,\n\t0x070E, 0x070E,\n\t0x09D8, 0x09DB,\n\t0x0A4E, 0x0A58,", "partial_line": "0x0A92, 0x", "completion": "0x0A92, 0x0A92, <|endoftext|>"}
{"context": "\t\t\tmemset(values, 0, sizeof(values));\n\t\t\tvalues[1] = CStringGetTextDatum(evi2->name);\n\t\t\t\tnulls[2] = true;\n\t\t\t\tappendStringInfoString(&pathbuf, evi1->name);\n\t\t\t}", "partial_line": "pg_exten", "completion": "pg_extension_config_dump(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\tEEO_NEXT();\n\t\t{\n\t\t\t\t*op->resvalue = BoolGetDatum(!DatumGetBool(*op->resvalue));\n\t\t{\n\t\t\t\t*op->resnull = false;", "partial_line": "*op->resvalue = BoolGetDatum(!DatumGetBoo", "completion": "*op->resvalue = BoolGetDatum(!DatumGetBool(*op->resvalue)); <|endoftext|>"}
{"context": "\ttarget.objectSubId = 0;\n\tfor (i = 0; i < nitems; i++)\n\trelation_close(target_table, NoLock);\n}\n\tRelation\tpg_policy_rel;", "partial_line": "Relation\tta", "completion": "Relation\ttarget_table; <|endoftext|>"}
{"context": "{\n\treturn ok;\n\tSize\t\ttbl_size;\n\t\tn * sizeof(datetkn);\n\tif (!tbl)", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "{ 2, s_0_101, -1, -1, 0},\n{ 2, s_0_114, 113, -1, 0},\n{ 4, s_0_115, 114, -1, 0},\n{ 4, s_0_116, 113, -1, 0},\n{ 2, s_0_121, 118, -1, 0},", "partial_line": "{ 3, s_", "completion": "{ 3, s_0_122, 121, -1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tbmr.smgr->smgr_rlocator.locator.dbOid,\n\t\t\t\t\t\tBlockNumber extend_upto,\n\t\t\t\t\t\tBuffer *buffers,\n\tIOContext\tio_context = IOContextForStrategy(strategy);\n\tfor (uint32 i = 0; i < extend_by; i++)", "partial_line": "bmr.smgr->smgr_cached_nblock", "completion": "bmr.smgr->smgr_cached_nblocks[fork] = InvalidBlockNumber; <|endoftext|>"}
{"context": "\tMemoryContextSwitchTo(oldcontext);\n{\n\tSortTuple\tstup;\n\tbtup = (BrinSortTuple *) stup.tuple;\n\tSortTuple\tstup;", "partial_line": "GinTuple", "completion": "GinTuple   *tup; <|endoftext|>"}
{"context": "\t\t\tnode->as_whichplan = INVALID_SUBPLAN_INDEX;\n\t\tnode->as_pstate->pa_finished[node->as_whichplan] = true;\n\t{\n\twhile (pstate->pa_finished[pstate->pa_next_plan])\n\t}", "partial_line": "if (node->as_wh", "completion": "if (node->as_whichplan < node->as_first_partial_plan) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tCommand   **commands;\n\t\t\t\t\t\tprintf(\"   %11.3f  %10\" PRId64 \" %s\\n\",\n\t\t\t\t\t\t\t   (cstats->count > 0) ?\n\t\t\t\t\t\t\t   (*commands)->failures,", "partial_line": "uint6", "completion": "uint64\t\tiseed; <|endoftext|>"}
{"context": "\t\t;\n\t}\n\t\treturn false;\n\t\tstruct stat st;\n\t\t\tereport(LOG,", "partial_line": "DIR", "completion": "DIR\t\t   *dir; <|endoftext|>"}
{"context": "\t}\n\tfor (i = 0; i < tokenPrivs->PrivilegeCount; i++)\n\t{\n\t\t}\n}", "partial_line": "printf(_(\"", "completion": "printf(_(\"  %s unregister [-N SERVICENAME]\\n\"), progname); <|endoftext|>"}
{"context": "\t\t\tlastfetched_nulls = scandesc->xs_orderbynulls;\n\t\t{\n\t}\n\tint\t\t\ti;\n\t\t\t\tconst Datum *bdist, const bool *bnulls,", "partial_line": "if (anulls[", "completion": "if (anulls[i] && !bnulls[i]) <|endoftext|>"}
{"context": "\t\tiparam = makeNode(IndexElem);\n\t\t\tchar\t   *attname;\n\t\t}\n\t\t\tereport(ERROR,\n\t{", "partial_line": "pred_str = Text", "completion": "pred_str = TextDatumGetCString(datum); <|endoftext|>"}
{"context": "\t\t\t(any_special || !OidIsValid(namespaceId)))\n\t\t\telse\n\t\t\t\t\t prevResult;\n\t\t\t\t\t prevResult = prevResult->next)\n\t\t\t\t\tpreference = 1;", "partial_line": "else if (", "completion": "else if (!variadic && prevResult->nvargs > 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t   numPages - numPendingPages - numEntryPages);\n\t}\n\tmatchPossible = true;\n\t\tIndexClause *iclause = lfirst_node(IndexClause, lc);\n\t\t\tExpr\t   *clause = rinfo->clause;", "partial_line": "iclause->", "completion": "iclause->indexcol, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\testate, eflags);\n\t\tcase T_TableFuncScan:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t estate, eflags);\n\t\t\t\t\t\t\t\t\t\t\t\t   estate, eflags);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t estate, eflags);", "partial_line": "case T_Cus", "completion": "case T_CustomScan: <|endoftext|>"}
{"context": "static const NumericDigit const_zero_point_nine_data[1] = {9};\n#elif DEC_DIGITS == 1\nstatic const NumericVar const_pinf =\n{0, 0, NUMERIC_PINF, 0, NULL, NULL};\n\t\t\t pfree(buf); \\", "partial_line": "Nod", "completion": "Node *escontext); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t(char *) newtup->t_data + newtup->t_data->t_hoff + prefixlen,\n\t\tXLogRegisterData(&xlhdr_idx, SizeOfHeapHeader);\n\trecptr = XLogInsert(RM_HEAP_ID, info);\n\tHeapTupleHeader hdr = tup->t_data;\n\t{", "partial_line": "HEAP_XMAX_IS_LOCKED_O", "completion": "HEAP_XMAX_IS_LOCKED_ONLY(hdr->t_infomask)) <|endoftext|>"}
{"context": "\t\t\t}\n\t\t{\n\t\t\t_bt_relbuf(rel, buf);\n\t\t_bt_relbuf(rel, buf);\n_bt_newlevel(Relation rel, Relation heaprel, Buffer lbuf, Buffer rbuf)", "partial_line": "roo", "completion": "rootpage; <|endoftext|>"}
{"context": "#include \"utils/rel.h\"\nrestart_insert:\n\tmetapage = BufferGetPage(metabuf);\n\tbuf = _hash_getbucketbuf_from_hashkey(rel, hashkey, HASH_WRITE,\n\t\tLockBuffer(buf, BUFFER_LOCK_UNLOCK);", "partial_line": "BlockNumber n", "completion": "BlockNumber nextblkno; <|endoftext|>"}
{"context": "\tif (result->nbytes != SHORTALIGN(result->nbytes))\n\t\tAssert(memcmp(tmp, ipd, ndecoded * sizeof(ItemPointerData)) == 0);\n{\n\tItemPointer result;\n\tresult = palloc(nallocated * sizeof(ItemPointerData));", "partial_line": "val = itemptr_to", "completion": "val = itemptr_to_uint64(&segment->first); <|endoftext|>"}
{"context": "\tchecking_uniqueness = (indexInfo->ii_Unique ||\n\tslot = table_slot_create(heapRelation, NULL);\n\tpredicate = ExecPrepareQual(indexInfo->ii_Predicate, estate);\n\t}\n\tAssert(snapshot == SnapshotAny || IsMVCCSnapshot(snapshot));", "partial_line": "if (pro", "completion": "if (progress) <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\tif (!found)\n\t\t{\n\t\t\tif (!PQgetisnull(res, rownum, i_range_bounds_histogram))\ndumpRelationStats(Archive *fout, const RelStatsInfo *rsinfo)", "partial_line": "ArchiveEntry(fout, nilCatalo", "completion": "ArchiveEntry(fout, nilCatalogId, createDumpId(), <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t   DirectFunctionCall1(network_broadcast, in),\n\tPort\t   *port = MyProcPort;\n\tif (port == NULL)\n\tret = pg_getnameinfo_all(&port->raddr.addr, port->raddr.salen,", "partial_line": "N", "completion": "NULL, 0, <|endoftext|>"}
{"context": "\t\t{\n\tif (decoded == NULL && nonblocking)\n\t\tmemcpy(state->readRecordBuf,\n\t\t\t{\n\t\t\t\t\t\t\t\t\t  \"invalid contrecord length %u (expected %lld) at %X/%X\",", "partial_line": "pag", "completion": "pageHeaderSize); <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH(\"(\", \"ON\");\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny))\n\telse if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"OF\") ||\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"OF\"))\n\telse if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"AS\") ||", "partial_line": "TailMatches(\"CREATE\", \"TEMP|TEMPORARY|", "completion": "TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"AS\") || <|endoftext|>"}
{"context": "}\nDetachAddConstraintIfNeeded(List **wqueue, Relation partRel)\n\t\tAlteredTableInfo *tab;\n\twhile (HeapTupleIsValid(trigtup = systable_getnext(scan)))\n\t\tForm_pg_trigger pg_trigger = (Form_pg_trigger) GETSTRUCT(trigtup);", "partial_line": "if (!OidIsValid(pg_t", "completion": "if (!OidIsValid(pg_trigger->tgparentid)) <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t errmsg(\"unrecognized configuration parameter \\\"%s\\\" in file \\\"%s\\\" line %d\",\n\t\tif (gconf->reset_source != PGC_S_FILE ||\n\t\t\t\t\t\t(errmsg(\"parameter \\\"%s\\\" removed from configuration file, reset to default\",\n\t\tInitializeGUCOptionsFromEnvironment();", "partial_line": "char\t   *pre_", "completion": "char\t   *pre_value = NULL; <|endoftext|>"}
{"context": "    return 1;\n        goto lab0;\n    {   int ret = slice_from_s(z, 1, s_8);\n    return 1;\nstatic int r_Step_2(struct SN_env * z) {", "partial_line": "in", "completion": "int among_var; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\telse\n\t}\n\tint\t\t\tncomments;\n\tif (strcmp(type, \"LARGE OBJECT\") != 0)", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t}\n_EndData(ArchiveHandle *AH, TocEntry *te)\n}\n}\nstatic void", "partial_line": "_StartLO(ArchiveHandle *A", "completion": "_StartLO(ArchiveHandle *AH, TocEntry *te, Oid oid) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   joinrel,\n\t\t\t\t\t\t\t\t   mergeclauses,\n\t\t\t\t\t\t\t\t   extra);\n\t}\n\t\tpathkeys_contained_in(outersortkeys, outer_path->pathkeys))", "partial_line": "pathkeys,", "completion": "pathkeys, required_outer)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  pset.bind_nparams,\n\t\t\tbreak;\n\t\t\t\tend_pipeline = true;\n\t\t\t\tpset.piped_syncs++;\n\t\t\t\tpset.requested_results = pset.available_results + pset.piped_syncs;", "partial_line": "case PSQL_", "completion": "case PSQL_SEND_FLUSH: <|endoftext|>"}
{"context": "\t{\n\t\tchar\t   *name = lfirst(lc1);\n\tif (record)\n\t\tbool\t\tisnull;\n\t\t\tDatum\t\td;", "partial_line": "a = array_se", "completion": "a = array_set(array, 1, &index, <|endoftext|>"}
{"context": "    return 1;\n        z->lb = mlimit1;\n            break;\n                    if (ret == 0) goto lab0;\n            {   int ret = slice_del(z);", "partial_line": "cas", "completion": "case 3: <|endoftext|>"}
{"context": "\t\t\t\tfor (i = 0; i < sqlda->sqln; i++)\n\t\t\t\t\t\tdesc_inlist.type = sqlda->sqlvar[i].sqltype;\n\t\t\t\t\t\tdesc_inlist.arrsize = 1;\n\t\t\t\t\t\tdesc_inlist.offset = 0;\n\t\t\t\t\t\tif (sqlda->sqlvar[i].sqlind)", "partial_line": "*(sqld", "completion": "*(sqlda->sqlvar[i].sqlind) = -1; <|endoftext|>"}
{"context": "\t\t\t\t\t\tconstrName, RelationGetRelationName(rel))));\n\t\t\t\trelation_close(pk, AccessShareLock);\n\t\t\t\t\terrcode(ERRCODE_INVALID_TABLE_DEFINITION),\n\t\t\t\t\t\t   get_attname(RelationGetRelid(rel), attnum, false)));\n\t\tif (attForm->attidentity != '\\0')", "partial_line": "errmsg(\"column \\\"%s\\\" of relatio", "completion": "errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" is an identity column\", <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  &ucxt);\n\t\t\tRestoreUserContext(&ucxt);\n\t}\n\t\t\tbool\t\tfound;\n\t\t\t\tmemset(&hctl, 0, sizeof(HASHCTL));", "partial_line": "toast_relid = rel->r", "completion": "toast_relid = rel->rd_rel->reltoastrelid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t pcxt->nworkers);\n\tshm_toc_estimate_keys(&pcxt->estimator, 1);\n\tParallelIndexScanDesc piscan;\n\t\treturn;\n\t\t\t\t\t\t\t\t node->iss_RelationDesc,", "partial_line": "&node->i", "completion": "&node->iss_Instrument, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tint16\t\ttypLen;\n\t\t\t\t\t\t\tget_typlenbyval(param->paramtype,\n\t\t\t\t}\n\t\t\t\tfunc_tuple = SearchSysCache1(PROCOID, ObjectIdGetDatum(funcid));\n\t\t\t\t\texpression_tree_mutator((Node *) args,", "partial_line": "contex", "completion": "context); <|endoftext|>"}
{"context": "\tvalidate_relation_kind(r);\n\t\treturn NULL;\n\treturn r;\n\tAssert(lockmode >= NoLock && lockmode < MAX_LOCKMODES);\nstatic inline void", "partial_line": "Datum *v", "completion": "Datum *values, <|endoftext|>"}
{"context": "\tuint64\t\tsum;\n\t{\n\treturn shiftright128(sum, high1, j - 64);\n}\nmulShiftAll(const uint64 m, const uint64 *const mul, const int32 j,", "partial_line": "*vp = mulShif", "completion": "*vp = mulShift(4 * m + 2, mul, j); <|endoftext|>"}
{"context": "\t\t}\nstatic int\n\t\t\t\t\t\t\t\t\t\t  pset.bind_nparams,\n\t\t\tbreak;\n\t\t\t\tend_pipeline = true;", "partial_line": "pset.piped_", "completion": "pset.piped_syncs++; <|endoftext|>"}
{"context": "\tlist_deduplicate_oid(result);\n\t\t\t\tAnum_pg_publication_puballtables,\n\t\t\t\tBTEqualStrategyNumber, F_BOOLEQ,\n\tresult = NIL;\n\t\tresult = lappend_oid(result, oid);", "partial_line": "table_close(rel, Acc", "completion": "table_close(rel, AccessShareLock); <|endoftext|>"}
{"context": "\t\t\tdim[i] = 1;\n\tmemcpy(lb, ARR_LBOUND(array), ndim * sizeof(int));\n\tnewhasnulls = (ARR_HASNULL(array) || isNull);\n\t\t\tif (pg_sub_s32_overflow(indx[0], dim[0] + lb[0], &addedafter) ||\n\t\t\t\tpg_add_s32_overflow(addedafter, 1, &addedafter) ||", "partial_line": "errmsg(\"array su", "completion": "errmsg(\"array subscript out of range\"))); <|endoftext|>"}
{"context": "\t\tbool\t\ticu_isprint = u_hasBinaryProperty(code,\n\t\t{\n\t\t\tpg_category != PG_U_UNASSIGNED &&\n\t\t\tcontinue;\n\t\t\t\t   unicode_category_abbrev(pg_category),", "partial_line": "unicode_category_st", "completion": "unicode_category_string(icu_category)); <|endoftext|>"}
{"context": "\t\tmres->kind = &kinds[kind_idx];\n\tint\t\t\tntotal;\n\t\telog(PANIC, \"cannot free %d resources, only %d remembered\", nresources, ntotal);\n\t{\n\tint\t\t\tntotal = 0;", "partial_line": "int32\t\tn", "completion": "int32\t\tnremember_bl = PG_GETARG_INT32(1); <|endoftext|>"}
{"context": "\tPLpgSQL_execstate *estate;\n\tOid\t\t\tdatumtype;\n\tAssert(dno >= 0 && dno < estate->ndatums);\n\t\t\t\t\t\tformat_type_be(datumtype),\nstatic void", "partial_line": "PLpgSQL_variabl", "completion": "PLpgSQL_variable *target, <|endoftext|>"}
{"context": "\t\t\t\t\tBitmapset  *cols = NULL;\n\t\t\t\t\tphasedata->grouped_cols[i] = cols;\n\t\t\t\tphasedata->eqfunctions =\n\t\t\t\tfor (int k = 0; k < phasedata->numsets; k++)\n\t\t\t\t\tif (phasedata->eqfunctions[length - 1] != NULL)", "partial_line": "(PlanState *", "completion": "(PlanState *) aggstate); <|endoftext|>"}
{"context": "\t\t\t\tleop = get_opfamily_member(opfamily,\n\t\t\t\t\t\t\t\t\t\t\t  ltstrat);\n\t\t\tgestrat = IndexAmTranslateCompareType(COMPARE_GE, opmethod, opfamily, true);\n\t\t\t\t\t\t\t\t\t\t\t  op_lefttype, op_lefttype,\n\t\t\t\t\t\t\t\t\t\t\t  ltstrat);", "partial_line": "op_righttype, o", "completion": "op_righttype, op_lefttype, <|endoftext|>"}
{"context": "}\n\telse if (isinf(arg1))\n\t{\n\t\t}\n\tfloat8\t\targ1 = PG_GETARG_FLOAT8(0);", "partial_line": "er", "completion": "errno = 0; <|endoftext|>"}
{"context": "\tpadstart = COUNT % 64;\n\t\tmemset(&ctx->m.b8[padstart], 0, padlen);\n\t\tsha1_step(ctx);\n\tCOUNT += (padlen - 8);\n\tCOUNT %= 64;", "partial_line": "PUTPAD(ctx", "completion": "PUTPAD(ctx->c.b8[0]); <|endoftext|>"}
{"context": "{\n}\n\tif (len <= 0)\n\t\treturn src;\t\t\t\t\n\tif (dest_encoding == PG_SQL_ASCII)", "partial_line": "if (!Oid", "completion": "if (!OidIsValid(proc)) <|endoftext|>"}
{"context": "\tHeapTupleHeaderSetNatts(new_data, numAttrs);\n\t\t{\n\t\t\t}\nvoid\n\t\t\t\t\t   int32 sliceoffset, int32 slicelength,", "partial_line": "nscanke", "completion": "nscankeys = 2; <|endoftext|>"}
{"context": "                            if (ret < 0) return ret;\n                            if (ret < 0) return ret;\n                        }\n                    z->c = ret;\n            }", "partial_line": "l", "completion": "lab1: <|endoftext|>"}
{"context": "\tchar\t   *name = text_to_cstring(PG_GETARG_TEXT_PP(0));\n\t\toldctx = MemoryContextSwitchTo(TopMemoryContext);\n\t\tinj_list_local = list_delete(inj_list_local, makeString(name));\n\tDefineCustomBoolVariable(\"injection_points.stats\",\n\t\t\t\t\t\t\t NULL,", "partial_line": "N", "completion": "NULL, <|endoftext|>"}
{"context": "\t\t\tpg_log_error(\"%s needs a slot to be specified using --slot\",\n\t\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t\t\texit(1);\n\tif (xlog_dir)\n\t{", "partial_line": "pg_log_error(\"WAL directory location can only be spe", "completion": "pg_log_error(\"WAL directory location can only be specified in plain mode\"); <|endoftext|>"}
{"context": "\t{\n\t\tdo\n\t\t{\n\t\t*dst++ = (u_char) tmp;\n\t\tif (ch == '\\0' || ch == '/')", "partial_line": "goto e", "completion": "goto enoent; <|endoftext|>"}
{"context": "\t\t\t\t\t generate_relation_name(rte->relid, NIL));\n\tif (query->returningList)\nstatic void\n\tListCell   *l;\n\tSubLink    *cur_ma_sublink;", "partial_line": "if (sl->subLinkType", "completion": "if (sl->subLinkType == MULTIEXPR_SUBLINK) <|endoftext|>"}
{"context": "\t\telse if (splan->parParam == NIL && enable_material &&\n\t\t\t\t\t\t\t\tsplan->plan_id);\n\t{\n\t\tParam\t   *param;\n\t\tparam = generate_new_exec_param(root,", "partial_line": "exprType((No", "completion": "exprType((Node *) tent->expr), <|endoftext|>"}
{"context": "\t\treturn true;\n{\n\tint\t\t\tresult;\n\treturn result;\n\tNode\t   *temp;", "partial_line": "attr = TupleDescAttr(tupdesc,", "completion": "attr = TupleDescAttr(tupdesc, fieldnum - 1); <|endoftext|>"}
{"context": "\t\t\"extension\",\n\t\tAnum_pg_extension_extname,\n\t\tAnum_pg_extension_extowner,\n\t\ttrue\n\t\tAnum_pg_proc_proname,", "partial_line": "OBJECT_F", "completion": "OBJECT_FUNCTION, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   true,\n\t\t\t\t\t\t\t\t\t\t\t   context);\n\t\t\t\t\tif (simple) \n\t\t\t\t\t\treturn (Node *) simple;\n\t\t\t}", "partial_line": "Node\t   *", "completion": "Node\t   *save_case_val; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\tPgStat_Counter numrun;\t\t\n} PgStat_StatInjFixedEntry;\n\t.shared_size = sizeof(PgStat_StatInjFixedEntry),", "partial_line": ".init_shme", "completion": ".init_shmem_cb = injection_stats_fixed_init_shmem_cb, <|endoftext|>"}
{"context": "#define leftchild(x)\t(2 * (x) + 1)\n#define parentof(x)\t\t(((x) - 1) / 2)", "partial_line": "if (((x +", "completion": "if (((x + 1) & x) == 0) <|endoftext|>"}
{"context": "\t\t\t*is_missing = true;\n\t\telse\n\t}\n\tclassForm = (Form_pg_class) GETSTRUCT(classTuple);\n\tnattrs = classForm->relnatts;", "partial_line": "for (curr_att = 1; curr_a", "completion": "for (curr_att = 1; curr_att <= nattrs; curr_att++) <|endoftext|>"}
{"context": "UnregisterSnapshotFromOwner(Snapshot snapshot, ResourceOwner owner)\n\t\treturn;\n\telse if (TransactionIdFollows(asnap->xmin, bsnap->xmin))\n}\nSnapshotResetXmin(void)", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "}\n\t\t\t   BTScanInsert itup_key,\n\t\t\t   int postingoff,\n\tAssert(isleaf == !BufferIsValid(cbuf));\n\tAssert(!isleaf ||", "partial_line": "Assert(isleaf", "completion": "Assert(isleaf && itup_key->heapkeyspace && itup_key->allequalimage); <|endoftext|>"}
{"context": "\t}\n{\n\t\tactive_local_updates.num_mappings = 0;\n\t}\n\t\tereport(ERROR,", "partial_line": "Assert(active_", "completion": "Assert(active_shared_updates.num_mappings == 0); <|endoftext|>"}
{"context": "\t}\n\t\t\tIndexBulkDeleteResult *istat = vacrel->indstats[idx];\n\t\t\t\t\t\t\t\t\t\t idx + 1);\n\t\t\t\t\t\t\t\t\t\t\tvacrel->num_index_scans,\n\t\t\t\t\t\t\t\t\t\t\testimated_count);", "partial_line": "pfree(vacre", "completion": "pfree(vacrel->indname); <|endoftext|>"}
{"context": "\t\t\t\t\t errhint(\"Retry when the source replication slot's confirmed_flush_lsn is valid.\")));\n\t\tMyReplicationSlot->data.restart_lsn = copy_restart_lsn;\n\t\tReplicationSlotMarkDirty();\n#ifdef USE_ASSERT_CHECKING\n\t\t\tXLogSegNo\tsegno;", "partial_line": "nulls[0] =", "completion": "nulls[0] = false; <|endoftext|>"}
{"context": "\t}\n\tRuleLock   *rulelock;\n\tMemoryContextCopyAndSetIdentifier(rulescxt,\n\tScanKeyInit(&key,\n\t\tbool\t\tisnull;", "partial_line": "Dat", "completion": "Datum\t\trule_datum; <|endoftext|>"}
{"context": "\t\tvalues[Anum_pg_proc_proargnames - 1] = parameterNames;\n\telse\n\tif (parameterDefaults != NIL)\n\tvalues[Anum_pg_proc_prosrc - 1] = CStringGetTextDatum(prosrc);\n\tif (probin)", "partial_line": "if", "completion": "if (!replace) <|endoftext|>"}
{"context": "\t}\n\tregbuf->in_use = true;\nvoid\n\tif (block_id >= max_registered_buffers)\n\t\tfor (i = 0; i < max_registered_block_id; i++)", "partial_line": "c", "completion": "continue; <|endoftext|>"}
{"context": "\tint\t\t\tv1 = 0,\n\tPQExpBufferData pgoptions;\n\tif (!exit_hook_registered)\n\tsocket_string[0] = '\\0';\n\t\t\t\t (GET_MAJOR_VERSION(cluster->major_version) <= 902) ?", "partial_line": "if (cluster == &", "completion": "if (cluster == &new_cluster) <|endoftext|>"}
{"context": "\t\tOuterJoinClauseInfo *ojcinfo = (OuterJoinClauseInfo *) lfirst(cell);\n\tforeach(cell, root->full_join_clauses)\n\t\tinner_relids = rinfo->left_relids;\n\t\tif (collation != cur_ec->ec_collation)\n\t\t{", "partial_line": "foreach(l", "completion": "foreach(lc2, cur_ec->ec_members) <|endoftext|>"}
{"context": "\t{\n\telse\n\t\t\tloctup.t_data = (HeapTupleHeader) PageGetItem(page, lp);\n\t\t\tloctup.t_len = ItemIdGetLength(lp);\n\t\t\tHeapCheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,", "partial_line": "(*loss", "completion": "(*lossy_pages)++; <|endoftext|>"}
{"context": "\tTimestampTz inactive_since = 0;\n\t{\n\t\t}\n\t\tif (invalidation_cause == RS_INVAL_NONE)\n\t\t\tbreak;", "partial_line": "Assert(!(*in", "completion": "Assert(!(*invalidated && SlotIsLogical(s) && IsBinaryUpgrade)); <|endoftext|>"}
{"context": "#include \"access/xlogutils.h\"\n\tXLogRecPtr\tlsn = record->EndRecPtr;\n}\n\tuint32\t\tnum_buckets;", "partial_line": "xl_hash_init_bitmap_page *xlrec = (xl_hash_", "completion": "xl_hash_init_bitmap_page *xlrec = (xl_hash_init_bitmap_page *) XLogRecGetData(record); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tPathTarget *target,\n\t\t\t\t\t\t\t\t\t\tbool target_parallel_safe,\nstatic List *make_pathkeys_for_window(PlannerInfo *root, WindowClause *wc,\n\t\t\t\t\t\t\t\t  List *targets, List *targets_contain_srfs);\n\t\t\t\t\t\t\t\t\t\t\t\t RelOptInfo *grouped_rel,", "partial_line": "RelOptIn", "completion": "RelOptInfo *input_rel, <|endoftext|>"}
{"context": "{\n\tAssert(MyReplicationSlot == NULL);\n\tLWLockAcquire(ReplicationSlotControlLock, LW_SHARED);\n\t\t\t (!synced_only || s->data.synced)))\n\t\t\tConditionVariableBroadcast(&s->active_cv);", "partial_line": "go", "completion": "goto restart; <|endoftext|>"}
{"context": "\t\tprintf(\"dec[%d,3]: r: %d, %s\\n\", i, r, buf);\n\t\tr = dectoasc(din, buf, BUFSIZE-1, 2);\n\t\tif (r == 0)\n\t\t{\n\t\t\tq = deccmp(dec, din);", "partial_line": "if (r", "completion": "if (r == 0) <|endoftext|>"}
{"context": "#ifdef LWLOCK_STATS\n\t\t\tLWLockReportWaitStart(lock);\n\t\t\tif (TRACE_POSTGRESQL_LWLOCK_WAIT_START_ENABLED())\n\t\t\t{\n\t\t\tif (TRACE_POSTGRESQL_LWLOCK_WAIT_DONE_ENABLED())", "partial_line": "RESUME", "completion": "RESUME_INTERRUPTS(); <|endoftext|>"}
{"context": "\tif (!AggCheckCallContext(fcinfo, NULL))\n\t\t\t\t\t\t   VARSIZE_ANY_EXHDR(sstate));\ninterval_avg_accum_inv(PG_FUNCTION_ARGS)\n\t\tPG_RETURN_INTERVAL_P(result);\n\treturn DirectFunctionCall2(interval_div,", "partial_line": "else if (state->nI", "completion": "else if (state->nInfcount > 0) <|endoftext|>"}
{"context": "\t{\n\t\tappendPQExpBufferStr(query,\n\tqualtypname = pg_strdup(fmtQualifiedDumpable(tyinfo));\n\t\tbinary_upgrade_extension_member(q, &tyinfo->dobj,\n\t\t\t\t\t\t\t\t  .dropStmt = delq->data));", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t\t\taccessMethodName)));\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\tamissummarizing = amRoutine->amsummarizing;\n\tif (stmt->whereClause)", "partial_line": "!concu", "completion": "!concurrent, <|endoftext|>"}
{"context": "\tint\t\t\touter_merged_index;\n\touter_merged_index = outer_map->merged_indexes[outer_index];\n\touter_merged = outer_map->merged[outer_index];\n\t\tif (!outer_merged && !inner_merged)\n\t\t{", "partial_line": "outer_map->merged_indexes[oute", "completion": "outer_map->merged_indexes[outer_index] = inner_merged_index; <|endoftext|>"}
{"context": "pg_itoa(int16 i, char *a)\n\tint\t\t\tolength,\n\twhile (value >= 10000)\n\t\tchar\t   *pos = a + olength - i;\n\t}", "partial_line": "const uint32 c", "completion": "const uint32 c = (value % 100) << 1; <|endoftext|>"}
{"context": "{\n\tListCell   *lc;\n\telse\n\tlfirst(lc) = bms_add_member((Bitmapset *) lfirst(lc), jindex);\n}", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\tAssert(GinPageIsData(page));\n\t\t\t\tmaxoff = GinPageGetOpaque(page)->maxoff;\n\tAssert(GinPageIsData(page));\n\t{\n\t\t\tpitem = GinDataPageGetPostingItem(page, i);", "partial_line": "(maxoff - off", "completion": "(maxoff - offset + 1) * sizeof(PostingItem)); <|endoftext|>"}
{"context": "\t\tinit_var_from_num(num2, &arg2);\n\tsign2 = numeric_sign_internal(num2);\n\tif (sign1 == 0 && sign2 < 0)\n\t\t   var->digits[last_digit_pos] == 0)\n\tif (last_digit_pos >= 0)", "partial_line": "last_d", "completion": "last_digit /= 10; <|endoftext|>"}
{"context": "static const symbol s_2_326[6] = { 'l', 'a', 't', 'i', 'm', 'a' };\nstatic const symbol s_2_327[5] = { 'e', 't', 'i', 'm', 'a' };\nstatic const symbol s_2_340[8] = { 'l', 'a', 'j', 'e', 'v', 'i', 'm', 'a' };\nstatic const symbol s_2_342[9] = { 0xC4, 0x87, 'a', 'j', 'e', 'v', 'i', 'm', 'a' };\nstatic const symbol s_2_350[7] = { 'o', 'l', 'o', 'v', 'i', 'm', 'a' };", "partial_line": "static const symbol s_2_362[7", "completion": "static const symbol s_2_362[7] = { 'n', 'a', 0xC5, 0xA1, 'i', 'm', 'a' }; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  NULL))\n\t\t\tcase 'N':\n\t\t\t\tbreak;\n\t\t}\n\t{", "partial_line": "pg_log_error(\"too many command-line arguments", "completion": "pg_log_error(\"too many command-line arguments (first is \\\"%s\\\")\", <|endoftext|>"}
{"context": "\t\t\tappendStringInfo(str, \" %u\", lfirst_oid(lc));\noutBitmapset(StringInfo str, const Bitmapset *bms)\n\tx = -1;\n\twhile ((x = bms_next_member(bms, x)) >= 0)\noutDatum(StringInfo str, Datum value, int typlen, bool typbyval)", "partial_line": "length =", "completion": "length = datumGetSize(value, typbyval, typlen); <|endoftext|>"}
{"context": "\t\tcheckPoint.PrevTimeLineID = XLogCtl->PrevTimeLineID;\n\t\t\t\tcurInsert += SizeOfXLogShortPHD;\n\tupdate_checkpoint_display(flags, false, false);\n\tcheckPoint.oldestXid = TransamVariables->oldestXid;\n\tcheckPoint.oldestCommitTsXid = TransamVariables->oldestCommitTsXid;", "partial_line": "&checkPoint.", "completion": "&checkPoint.oldestMulti, <|endoftext|>"}
{"context": "\tgistCompressValues(buildstate->giststate, index,\n\ttuplesort_putindextuplevalues(buildstate->sortstate,\n\tstate->pages_allocated = 1;\n\tstate->bulkstate = smgr_bulk_start_rel(state->indexrel, MAIN_FORKNUM);\n\tgistinitpage(levelstate->pages[0], F_LEAF);", "partial_line": "parent =", "completion": "parent = levelstate->parent; <|endoftext|>"}
{"context": "\titlist = build_tlist_index(plan->targetlist);\n\tif (typid >= (Oid) FirstUnpinnedObjectId)\n\t\troot->glob->invalItems = lappend(root->glob->invalItems, inval_item);\n\t\t\t\t\t\t   List **invalItems,\n\tPlannerInfo root;", "partial_line": "glob", "completion": "glob.relationOids = NIL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"WHERE opcname = 'enum_ops' \"\n\tdestroyPQExpBuffer(query);\n\tPQExpBuffer tbloids = createPQExpBuffer();\n\tint\t\t\tcurtblindx;\n\tIndxInfo   *indxinfo;", "partial_line": "i_indre", "completion": "i_indrelid, <|endoftext|>"}
{"context": "\t\t\t\t\t\t  \"  d.description AS \\\"%s\\\"\",\n\t\treturn false;\n\tres = PSQLexec(buf.data);\n\treturn true;\n}", "partial_line": "gettext_no", "completion": "gettext_noop(\"User name\")); <|endoftext|>"}
{"context": "\t\t\t\tPGcancelConn *cancel_conn = PQcancelCreate(conn);\n\t}\n\t{\n\tif (flags & STEP_RETRY)\n\t\t\tcase PGRES_COMMAND_OK:", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tuint32\t\thash = hash_bytes_uint32(entry->object_id);\njson_unique_hash_match(const void *key1, const void *key2, Size keysize)\n\tif (entry1->object_id != entry2->object_id)\n\tif (entry1->key_len != entry2->key_len)\n\treturn strncmp(entry1->key, entry2->key, entry1->key_len);", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "    if (!among_var) return 0;\n        if (ret <= 0) return ret;\n    }\n            {   int ret = slice_del(z);\n            }", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t}\n\t\tif (argpos > 0)\n\t\t\ttypid = get_fn_expr_argtype(fcinfo->flinfo, arg);\n\t\t\tvalue = elements[arg - 1];\n\t\tswitch (*cp)", "partial_line": "errmsg(\"unr", "completion": "errmsg(\"unrecognized format() type specifier \\\"%.*s\\\"\", <|endoftext|>"}
{"context": "static bool\n\t\tcase AMNAME:\nHeapTuple\n\t\t\t   Datum v1,\n\treturn SearchCatCacheInternal(cache, 2, v1, v2, 0, 0);", "partial_line": "return Sear", "completion": "return SearchCatCacheInternal(cache, 3, v1, v2, v3, 0); <|endoftext|>"}
{"context": "\t\t\tolddep = te->dependencies[i];\nidentify_locking_dependencies(ArchiveHandle *AH, TocEntry *te)\n{\n\tint\t\t\tnlockids;\n\tlockids = (DumpId *) pg_malloc(te->nDeps * sizeof(DumpId));", "partial_line": "((strcmp(AH->tocsB", "completion": "((strcmp(AH->tocsByDumpId[depid]->desc, \"TABLE DATA\") == 0) || <|endoftext|>"}
{"context": "static const symbol s_2_166[6] = { 'a', 'm', 'e', 'n', 't', 's' };\nstatic const symbol s_2_179[6] = { 'i', 'v', 'i', 't', 'a', 't' };\nstatic const symbol s_2_197[3] = { 'i', 0xC3, 0xB3 };\n{ 4, s_2_25, 24, 1, 0},\n{ 3, s_2_34, -1, 1, 0},", "partial_line": "{ 4, s_2_41,", "completion": "{ 4, s_2_41, -1, 1, 0}, <|endoftext|>"}
{"context": "\t}\n\tfree_auth_file(file, 0);\n\t\tMemoryContextDelete(hbacxt);\n}\n\tint\t\t\tline_num = tok_line->line_num;", "partial_line": "List\t   *to", "completion": "List\t   *tokens; <|endoftext|>"}
{"context": "\t\t\t\t\t\tif (strcmp(key, inhname) == 0)\n\t\tiparam->expr = NULL;\ntransformFKConstraints(CreateStmtContext *cxt,\n{\n\t\treturn;", "partial_line": "alterstmt->relatio", "completion": "alterstmt->relation = cxt->relation; <|endoftext|>"}
{"context": "\t\t\t\tif (pair_first)\n\t\t\t\t\t\t\terrcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t\tgoto invalid_pair;\n\t\t\t\telse if (is_utf16_surrogate_second(unicode))\n\t\t\t\t\tappendStringInfoString(&str, cbuf);", "partial_line": "in", "completion": "instr += 10; <|endoftext|>"}
{"context": "#include \"utils/syscache.h\"\n\t\t\t\t\t\t\t\t\t\t\t   int nkeys,\n\t\t\t\t\t\t\t\t\t\t\t   Datum v3, Datum v4);\n\t\t\t\t\t\t\t\t\t\t\tconst Datum *cachekeys,\n#ifdef CATCACHE_STATS", "partial_line": "#e", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t(strcmp(value, \"on\") == 0) ? PG_BOOL_YES : PG_BOOL_NO;\n}\n\t\tres = PQcopyResult(res,\n\t\t\t\t\t\t   PG_COPYRES_ATTRS | PG_COPYRES_EVENTS |\n\t\tif (!res)", "partial_line": "res->resultStatus = (conn->singleRowMode ?", "completion": "res->resultStatus = (conn->singleRowMode ? PGRES_SINGLE_TUPLE : PGRES_TUPLES_CHUNK); <|endoftext|>"}
{"context": "\t\t\ttyinfo[i].isArray = true;\n\t\ttyinfo[i].typarray = atooid(PQgetvalue(res, i, i_typarray));\n\t\tselectDumpableType(&tyinfo[i], fout);\n\t\t\t tyinfo[i].typtype == TYPTYPE_RANGE))\n\t\t{", "partial_line": "stinfo->dobj", "completion": "stinfo->dobj.dump = DUMP_COMPONENT_NONE; <|endoftext|>"}
{"context": "\t\t{\"define\", required_argument, NULL, 'D'},\n\t\t{\"file\", required_argument, NULL, 'f'},\n\t\t{\"host\", required_argument, NULL, 'h'},\n\t\t{\"no-vacuum\", no_argument, NULL, 'n'},\n\t\t{\"exit-on-abort\", no_argument, NULL, 16},", "partial_line": "bool\t\tbench", "completion": "bool\t\tbenchmarking_option_set = false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  (sep_by_space == 1) ? \" \" : \"\",\n\t\t\telse\n\t\t\t\t\t\t\t\t  signsymbol,\n\t\t\tbreak;\n\t\t\tif (cs_precedes)", "partial_line": "b", "completion": "bufptr, <|endoftext|>"}
{"context": "\t\t\t\tif (!err)\n\t\t\t\tscan_type = PGTYPES_TYPE_STRING_MALLOCED;\n\t\t\t\terr = pgtypes_defmt_scan(&scan_val, scan_type, &pstr, pfmt);\n\t\t\t\t\tfor (j = 0; j < szdatetktbl; j++)\n\t\t\t\t\t{", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t errmsg(\"temporary tables cannot specify a schema name\")));\n\t\t}\n\t\t\tbreak;\n\t\t{\n\t\tif (!OidIsValid(relId))", "partial_line": "erep", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "{\n\tLWLockAcquire(SerializableXactHashLock, LW_SHARED);\n\tdlist_foreach_modify(iter, FinishedSerializableTransactions)\n\t\t\t\tdlist_delete_thoroughly(&(finishedSxact->finishedLink));\n\t\t\t{", "partial_line": "target = tag.my", "completion": "target = tag.myTarget; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tval = -get_float8_infinity();\n\t\t{\n\t\t\tval = -get_float8_infinity();\n\t\t{", "partial_line": "(errcode(ERRCODE_NUMERIC_VA", "completion": "(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE), <|endoftext|>"}
{"context": "#define rename(from, to)\t\tpgrename(from, to)\n\tDWORD\t\tReparseTag;\n\tWCHAR\t\tPathBuffer[FLEXIBLE_ARRAY_MEMBER];\n\treparseBuf->PrintNameLength = 0;\n\t\tint\t\t\tsave_errno;", "partial_line": "FORMAT_MES", "completion": "FORMAT_MESSAGE_FROM_SYSTEM, <|endoftext|>"}
{"context": "\t{\n\t{\n\t\tif (restricted && first_dir_separator(filename) == NULL)\n\t\t\t\t(errmsg_internal(\"loaded library \\\"%s\\\"\", filename)));\n{", "partial_line": "process_shared_", "completion": "process_shared_preload_libraries_in_progress = true; <|endoftext|>"}
{"context": "{ 3, s_5_4, -1, 9, 0},\n{ 5, s_5_10, -1, 7, 0},\n{ 4, s_5_11, -1, 1, 0},\n{ 4, s_5_24, -1, 1, 0},\n{ 6, s_5_27, -1, 2, 0},", "partial_line": "{ 4, s_5_33,", "completion": "{ 4, s_5_33, -1, 1, 0}, <|endoftext|>"}
{"context": "{\n\tPoint\t   *pa = *(Point **) a;\n\tif (pa->y == pb->y)\n\tint\t\t\ti;\n\tPoint\t   *centroid;", "partial_line": "out->prefixDatum = PointPGetDa", "completion": "out->prefixDatum = PointPGetDatum(centroid); <|endoftext|>"}
{"context": "\t\t&debug_io_direct_string,\n\t},\n\t{\n\t\t\tgettext_noop(\"Logical WAL sender processes will send decoded \"\n\t\t\t\t\t\t \"replication slots have confirmed receiving WAL.\"),", "partial_line": "&synchro", "completion": "&synchronized_standby_slots, <|endoftext|>"}
{"context": "\tFILE\t   *fp;\n#ifndef WIN32\n\tif (stat_buf.st_mode & (S_IRWXG | S_IRWXO))\n\t\tif (!(buf.len > 0 && buf.data[buf.len - 1] == '\\n') && !feof(fp))\n\t\t\t{", "partial_line": "fc", "completion": "fclose(fp); <|endoftext|>"}
{"context": "\t\t\t\tScanKeyData skey[1];\n\t\t\t\tamopDesc = table_open(AccessMethodOperatorRelationId,\n\t\t\t\tScanKeyInit(&skey[0],\n\t\t\t\t\t\t\t object->objectId);\n\t\t\t\tpfree(opfam.data);", "partial_line": "ScanKeyD", "completion": "ScanKeyData skey[1]; <|endoftext|>"}
{"context": "ecpg_find_desc(int line, const char *name)\n\tif (!con)\n\tfor (;;)\n\t\t(void) va_arg(args, long);\t\n\t\t(void) va_arg(args, enum ECPGttype);", "partial_line": "(void) va_arg(a", "completion": "(void) va_arg(args, long); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t\t  NULL);\n\tchar\t\toffsetstr[64];\n\tret->baselen = strlen(startdir) + 1;\n\t\t\t\t(errcode_for_file_access(),", "partial_line": "pg", "completion": "pg_tz * <|endoftext|>"}
{"context": "#ifndef WIN32\n#include \"common/logging.h\"", "partial_line": "#include \"", "completion": "#include \"tab-complete.h\" <|endoftext|>"}
{"context": "ObjectAddress\n\tAttrNumber\tattnum;\n\trelid = RangeVarGetRelidExtended(stmt->relation, AccessExclusiveLock,\n\t\t\t\t\t\t\t\t\t stmt->missing_ok ? RVR_MISSING_OK : 0,\n\t\t\t\t\t\t\t\t\t RangeVarCallbackForRenameAttribute,", "partial_line": "Oid my", "completion": "Oid mytypid, <|endoftext|>"}
{"context": "\tprettyFlags = GET_PRETTY_FLAGS(pretty);\n\t\ttst = linitial((List *) tst);\n\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\telse", "partial_line": "relation_close", "completion": "relation_close(rel, AccessShareLock); <|endoftext|>"}
{"context": "\t{\n\t\t\tif (y->color == RBTRED)\n\t\t\t\tx->parent->parent->color = RBTRED;\n\t\t\t\t\tx = x->parent;\n\t\t\t\tx->parent->color = RBTBLACK;", "partial_line": "rbt_rotate_right", "completion": "rbt_rotate_right(rbt, x->parent->parent); <|endoftext|>"}
{"context": "\t\t\tereport(huge_pages == HUGE_PAGES_ON ? FATAL : DEBUG1,\n\t\t\t\t\t errmsg(\"the processor does not support large pages\")));\n\t\t{\n\tsize_high = size >> 32;\n\t\tSetLastError(0);", "partial_line": "errdetail(\"Failed system call was CreateFil", "completion": "errdetail(\"Failed system call was CreateFileMapping(size=%zu, name=%s).\", <|endoftext|>"}
{"context": "\t\t*tli = high_tli;\n\t}\n}\n\tTimeLineID\tservertli;\n\t\texit(1);", "partial_line": "ex", "completion": "exit(1); <|endoftext|>"}
{"context": "\t\trecordDependencyOnExpr(&myself, prosqlbody, NIL, DEPENDENCY_NORMAL);\n\t\t\t\t\t\t\t   NIL, DEPENDENCY_NORMAL);\n\t\t\tif (set_items)\t\t\n\t\tpgstat_create_function(retval);\n}", "partial_line": "prosrc = T", "completion": "prosrc = TextDatumGetCString(tmp); <|endoftext|>"}
{"context": "static void\n\tint\t\t\tlobj_fd;\n\tlobj_fd = lo_open(conn, lobjId, INV_READ);\n\t\tfprintf(stderr, \">>> %s\", buf);\n\t\tnread += nbytes;", "partial_line": "lobj_fd = lo_open(con", "completion": "lobj_fd = lo_open(conn, lobjId, INV_WRITE); <|endoftext|>"}
{"context": "\t\t\t\t typlen, typbyval, typalign,\nReadArrayBinary(StringInfo buf,\n\t\t\t\tbool typbyval,\n\t{\n\t\tbuf->cursor += itemlen;", "partial_line": "if (elem_buf.curso", "completion": "if (elem_buf.cursor != itemlen) <|endoftext|>"}
{"context": "\t\tTcl_WrongNumArgs(interp, 1, objv, \"command\");\n\tif (retcode == TCL_ERROR)\n\treturn retcode;\n\t}\n\tPG_END_TRY();", "partial_line": "const char", "completion": "const char **nameptr; <|endoftext|>"}
{"context": "#include \"catalog/pg_type.h\"\n#include \"nodes/nodeFuncs.h\"\n#include \"optimizer/pathnode.h\"", "partial_line": "List *colTypes, Li", "completion": "List *colTypes, List *colCollations, <|endoftext|>"}
{"context": "\t\t\t\t\t*((long long int *) (var + offset * act_tuple)) = strtoll(pval, &scan_length, 10);\n\t\t\t\t\t{\n\t\t\t\t\tpval = scan_length;\n\t\t\t\t\t{\n\t\t\t\t\tif (pval[0] == 'f' && pval[1] == '\\0')", "partial_line": "*((bool *) (v", "completion": "*((bool *) (var + offset * act_tuple)) = true; <|endoftext|>"}
{"context": "void\n}\n\treport_status(PG_REPORT, \"ok\");\nget_user_info(char **user_name_p)\n\tuser_name = get_user_name(&errstr);", "partial_line": "str2u", "completion": "str2uint(const char *str) <|endoftext|>"}
{"context": "\tif (TransactionIdIsNormal(xid))\n\t\t}\n\t\telse if (flags & FRM_RETURN_IS_XID)\n\t\t\tuint16\t\tnewbits2;\n\t\t\tfrz->t_infomask |= newbits;", "partial_line": "Assert(pagefrz->freeze_required || (!fre", "completion": "Assert(pagefrz->freeze_required || (!freeze_xmax && !replace_xmax)); <|endoftext|>"}
{"context": "\t\t\t\t\tArrayType  *arrtypmod;\n\t\t\t\t\t\t\t\t\t\t\t (errcode(ERRCODE_NON_NUMERIC_SQL_JSON_ITEM),\n\t\t\t\t\t\t\tRETURN_ERROR(ereport(ERROR,\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tInvalidOid, dtypmod,", "partial_line": "(Node *) &", "completion": "(Node *) &escontext, <|endoftext|>"}
{"context": "\treturn Generation_CHUNKHDRSZ + chunksize;\n}\n\t}\n\tSize\t\ttotalspace;\n\ttotalspace = MAXALIGN(sizeof(GenerationContext));", "partial_line": "snprintf(stats_string,", "completion": "snprintf(stats_string, sizeof(stats_string), <|endoftext|>"}
{"context": "#include \"common/logging.h\"\nstatic char *FindDbnameInConnOpts(PQconninfoOption *conn_opts);\nPQExpBuffer", "partial_line": "PQconninfoOption *", "completion": "PQconninfoOption *connOptions; <|endoftext|>"}
{"context": "\treturn macaddr_cmp_internal(arg1, arg2);\n\t\t\telog(LOG,\n\t{\n\t\t\t\t \" below threshold %f after \" INT64_FORMAT \" values (%d rows)\",\n\t\telog(LOG,", "partial_line": "memcpy(&res,", "completion": "memcpy(&res, authoritative, sizeof(macaddr)); <|endoftext|>"}
{"context": "{\n{ 2, s_0_2, 0, 2, 0}\n{ 0, 0, -1, 3, 0},\n{ 2, s_2_1, -1, -1, 0},\nstatic const symbol s_3_2[5] = { 0xC3, 0xAD, 'v', 'e', 'l' };", "partial_line": "static", "completion": "static const struct among a_3[3] = <|endoftext|>"}
{"context": "\t\t\t\tif (pair_first)\n\t\t\t\t{\n\t\t\t\t\tappendStringInfoString(&str, cbuf);\n\t\t\t\tif (pair_first)\n\t\t\t\t\t\t\terrcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "goto in", "completion": "goto invalid_pair; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   false,\t\n\tAlterIndexNamespaces(classRel, rel, oldNspOid, nspOid, objsMoved);\n\t\t\t\t\t   objsMoved, AccessExclusiveLock);\n\talready_done = object_address_present(&thisobj, objsMoved);\n\t\t\t\t NameStr(classForm->relname));", "partial_line": "indexList = RelationGetInd", "completion": "indexList = RelationGetIndexList(rel); <|endoftext|>"}
{"context": "\t\t\tif (errno == ENOSYS)\n\t\t{\n\t\tif (pagesize == 0)\n\t\tif (pagesize > 0)\n\t\tif (nbytes <= 0)", "partial_line": "int", "completion": "int\t\t\trc; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t{\n\t\t\t\tcontinue;\n\t\tif (save_jointype == JOIN_UNIQUE_INNER)\n\t\t\ttry_nestloop_path(root,", "partial_line": "merge_path", "completion": "merge_pathkeys, <|endoftext|>"}
{"context": "\t\t\tconst char *sep;\n\tif (ctor->absent_on_null)\n\t\tif (ctor->type == JSCTOR_JSON_OBJECT ||\n\t\t\tctor->type == JSCTOR_JSON_OBJECTAGG)\n\t\t\tappendStringInfoString(buf, \" ABSENT ON NULL\");", "partial_line": "if (ctor->type != JSCTOR_JSON_PARSE && ctor->type", "completion": "if (ctor->type != JSCTOR_JSON_PARSE && ctor->type != JSCTOR_JSON_SCALAR) <|endoftext|>"}
{"context": "IsSubTransaction(void)\n\tif (s->nestingLevel >= 2)\n\tTransactionState s = CurrentTransactionState;\n\t\t\t s->parallelModeLevel);\n\tCallSubXactCallbacks(SUBXACT_EVENT_COMMIT_SUB, s->subTransactionId,", "partial_line": "s->parent->subTransa", "completion": "s->parent->subTransactionId); <|endoftext|>"}
{"context": "\tprosrc = TextDatumGetCString(tmp);\n{\n\tprobin = TextDatumGetCString(tmp);\n\tForm_pg_proc proc;\n\tList\t   *raw_parsetree_list;", "partial_line": "Lis", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\t\t\t\t parentConstraintId,\n\tRestrictSearchPath();\n\t\tCreateComments(indexRelationId, RelationRelationId, 0,\n\t\t{\n\t\t\t\tif (total_parts < 0)", "partial_line": "parentDesc = R", "completion": "parentDesc = RelationGetDescr(rel); <|endoftext|>"}
{"context": "ReleasePredicateLocksLocal(void)\n\tMySerializableXact = InvalidSerializableXact;\n}\n{\n\tLWLockAcquire(SerializableXactHashLock, LW_SHARED);", "partial_line": "dlist_foreach_modify(iter, Fin", "completion": "dlist_foreach_modify(iter, FinishedSerializableTransactions) <|endoftext|>"}
{"context": "\t\tcurrentEventTriggerState->in_sql_drop = false;\n\tPG_END_TRY();\n\trunlist = EventTriggerCommonSetup(NULL,\n\tif (runlist != NIL)\n\t\tPushActiveSnapshot(GetTransactionSnapshot());", "partial_line": "else if (ConditionalLockSharedObject(DatabaseRela", "completion": "else if (ConditionalLockSharedObject(DatabaseRelationId, MyDatabaseId, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\tcase OBJECT_MATVIEW:\n\t\tcase OBJECT_TSTEMPLATE:\n\t\t\tobjnode = (Node *) name;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\tmaxbytes = maxsize - offsetof(GinPostingList, bytes);\n\tresult->nbytes = ptr - result->bytes;\n\tif (result->nbytes != SHORTALIGN(result->nbytes))\n\t\tAssert(memcmp(tmp, ipd, ndecoded * sizeof(ItemPointerData)) == 0);\n{", "partial_line": "ItemP", "completion": "ItemPointer result; <|endoftext|>"}
{"context": "static struct state *\t\t\t\n{\n\t{\n\telse\n\t\tstruct statebatch *newSb;", "partial_line": "NERR(REG_", "completion": "NERR(REG_ETOOBIG); <|endoftext|>"}
{"context": "\t\t\t\t\t EpochFromFullTransactionId(lastxid),\n\t\t\t\t\t EpochFromFullTransactionId(lastxid),\n\t\t\t\t\t XidFromFullTransactionId(lastxid),\n#define SUBTRANS_XACTS_PER_PAGE (BLCKSZ / sizeof(TransactionId))\n#define CLOG_XACTS_PER_PAGE (BLCKSZ * CLOG_XACTS_PER_BYTE)", "partial_line": "if", "completion": "if (rem == 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tFilePathName(v->mdfd_vfd)),\n\t\t\t\t\t\t enospc ? errhint(\"Check free disk space.\") : 0));\nvoid\n\t\tsegnum_start = blocknum / RELSEG_SIZE;\n\t\tAssert(nflush <= nblocks);", "partial_line": "BlockNumbe", "completion": "BlockNumber segno; <|endoftext|>"}
{"context": "\tAssert(!IsA(node, PlaceHolderInfo));\n\t\t\t\t\t\t\t\t\t\t\t\t\t   context->appinfos);\n\t\tnewinfo->outer_relids = adjust_child_relids(oldinfo->outer_relids,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext->appinfos);\n\t\tnewinfo->scansel_cache = NIL;", "partial_line": "Assert(!", "completion": "Assert(!IsA(node, SubLink)); <|endoftext|>"}
{"context": "\tReturnSetInfo rsinfo;\n\t\t\t*isDone = ExprMultipleResult;\n\t\t\tif (fcache->funcReturnsTuple)\n\t\t*isDone = ExprEndResult;\n\t\t*isNull = true;", "partial_line": "ret", "completion": "return (Datum) 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   checkPoint.oldestMultiDB);\n\t\t\t\t\t\t\t\t  checkPoint.oldestXidDB);\n\t}\n\t}\n\telse if (info == XLOG_RESTORE_POINT)", "partial_line": "Buf", "completion": "Buffer\t\tbuffer; <|endoftext|>"}
{"context": "\tOid\t\t\tminvtransfn = InvalidOid;\t\n\tOid\t\t\tfnArgs[FUNC_MAX_ARGS];\n\tchar\t   *detailmsg;\n\tif (!aggName)\n\t\t\t\t errdetail_internal(\"%s\", detailmsg)));", "partial_line": "(errcode(ERRCODE_INVALI", "completion": "(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION), <|endoftext|>"}
{"context": "#include \"catalog/pg_description_d.h\"\n{\n\t{\n\t}", "partial_line": "CacheInit", "completion": "CacheInitialized = true; <|endoftext|>"}
{"context": "void\n\tso->markItemIndex = -1;\n\tif (scan->xs_want_itup && so->currTuples == NULL)\n\t\tmemcpy(scan->keyData, scankey, scan->numberOfKeys * sizeof(ScanKeyData));\n\tif (so->arrayContext != NULL)", "partial_line": "pfre", "completion": "pfree(so->killedItems); <|endoftext|>"}
{"context": "\t\tTupleDesc\trelationDesc;\n\t\trelationDesc = resultRelInfo->ri_RelationDesc->rd_att;\n\t\tExecRowMark *erm;\n\t\term = ExecFindRowMark(estate, rc->rti, false);\n\tEvalPlanQualSetPlan(&mtstate->mt_epqstate, subplan, arowmarks);", "partial_line": "HASHCTL", "completion": "HASHCTL\t\thash_ctl; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   RelationGetDescr(rel), &evttags_isnull);\n\t\t\titem->tagset = DecodeTextArrayToBitmapset(evttags);\n\t\tEventTriggerCacheState = ETCS_VALID;\nstatic Bitmapset *\n\tint\t\t\tnelems;", "partial_line": "if (ARR_NDIM(arr) != 1 || ARR_HASNULL", "completion": "if (ARR_NDIM(arr) != 1 || ARR_HASNULL(arr) || ARR_ELEMTYPE(arr) != TEXTOID) <|endoftext|>"}
{"context": "    }\n    z->lb = z->c; z->c = z->l;\n    lab0:\n        }\n    {   int m3 = z->l - z->c; (void)m3;", "partial_line": "if (ret < 0)", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\t\t\tif (newval && !string_field_used(conf, newval))\n\t\t\t\tstruct config_enum *conf = (struct config_enum *) record;\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tif (!call_enum_check_hook(conf, &newval, &newextra,", "partial_line": "ret", "completion": "return 0; <|endoftext|>"}
{"context": "#include \"parser/parsetree.h\"\n{\n{\n\t\t\t\t\t\t\t\t\t\t   List *prunequal,\n\t\t\t\t\t\t\t\tGeneratePruningStepsContext *context);", "partial_line": "bool *clause_is", "completion": "bool *clause_is_not_null, <|endoftext|>"}
{"context": "#ifdef NOT_USED\n\ttimestamp = (Timestamp) pq_getmsgint64(buf);\n\tif (TIMESTAMP_NOT_FINITE(timestamp))\n}\n\tpq_sendint64(&buf, timestamp);", "partial_line": "PG_RETURN_CSTRING", "completion": "PG_RETURN_CSTRING(anytimestamp_typmodout(false, typmod)); <|endoftext|>"}
{"context": "\t\tif (!restrictinfo->outer_is_left &&\n\t\t\treturn;\n\t\t\tif (cheapest_startup_outer != NULL &&\n\t\t\t\t\t\t\t\t  joinrel,\n\t\t\t\t\t\t\t\t  cheapest_startup_outer,", "partial_line": "hashcla", "completion": "hashclauses, <|endoftext|>"}
{"context": "\t\t}\n\t\tClosePostmasterPorts(child_type == B_LOGGER);\n\t\tif (!child_process_kinds[child_type].shmem_attach)\n#endif\t\t\t\t\t\t\t\nstatic pid_t", "partial_line": "pid_t", "completion": "pid_t\t\tpid; <|endoftext|>"}
{"context": "\t\tappendStringInfo(&result, \"%s\\n\",\n\t\t\t\t\t\t map_sql_type_to_xmlschema_type(lfirst_oid(cell0),\n\t\t\t\t\t\t\t   \"  </xsd:sequence>\\n\"\n\t\t\t\t\t\t\t\t\t (typmod - VARHDRSZ) & 0xffff);\n\t\t\t\t\t\t\t\t \"    <xsd:maxInclusive value=\\\"%d\\\"/>\\n\"", "partial_line": "\"    <xs", "completion": "\"    <xsd:minInclusive value=\\\"%d\\\"/>\\n\" <|endoftext|>"}
{"context": "Oid\n\t\t\t\t\t\t\tRowExclusiveLock);\n\telse\n\t\tnulls[Anum_pg_largeobject_metadata_lomacl - 1] = true;", "partial_line": "tuple = systabl", "completion": "tuple = systable_getnext(scan); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tTcl_SetObjResult(interp,\n\t\t\tTcl_SetObjResult(interp,\n\t\t\t\t\t\t\t Tcl_NewStringObj(\"argument list length doesn't match number of arguments for query\",\n\t}", "partial_line": "loop_body = obj", "completion": "loop_body = objv[i++]; <|endoftext|>"}
{"context": "\t{\n\t\ttrue\n\t\tTSDICTOID,\n\t\tAnum_pg_ts_dict_oid,\n\t\ttrue", "partial_line": "\"text sea", "completion": "\"text search template\", <|endoftext|>"}
{"context": "\t\t\t*foundPtr = false;\n\t\treturn structPtr;\n\t\thash_search(ShmemIndex, name, HASH_ENTER_NULL, foundPtr);\n\t}\n\t{", "partial_line": "if (result->", "completion": "if (result->size != size) <|endoftext|>"}
{"context": "\t\ti = oldnwords;\n\t\t\ta->words[i] = 0;\n\t}\n\treturn a;\n\t\treturn a;", "partial_line": "a->words[", "completion": "a->words[wordnum] &= ~((bitmapword) 1 << bitnum); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t TimestampTzGetDatum(ts),\n{\n\t\t\t((uint64) POSTGRES_EPOCH_JDATE - GREGORIAN_EPOCH_JDATE) * SECS_PER_DAY * USECS_PER_SEC;\n\t{\n\t\tts = (TimestampTz) (tms * NS_PER_US) -", "partial_line": "(POSTGRES_EPOCH_JDATE - UNIX_EPOCH_JDATE) *", "completion": "(POSTGRES_EPOCH_JDATE - UNIX_EPOCH_JDATE) * SECS_PER_DAY * USECS_PER_SEC; <|endoftext|>"}
{"context": "\t\treturn false;\t\t\t\n\telog(ERROR, \"ORDER/GROUP BY expression not found in targetlist\");\nTargetEntry *\nget_sortgroupclause_tle(SortGroupClause *sgClause,\n}", "partial_line": "No", "completion": "Node * <|endoftext|>"}
{"context": "\tconst char *item;\n\tif (state == 0)\n\t\tif (!casesensitive && pg_strncasecmp(text, item, string_length) == 0)\n\t\tlist_index = 0;\n{", "partial_line": "if (co", "completion": "if (completion_case_sensitive) <|endoftext|>"}
{"context": "\t\tLWLockAcquire(ProcArrayLock, LW_EXCLUSIVE);\n\t\tereport(ERROR,\n\t\t\t\t\t\t\t\tneed_full_snapshot, in_create, slot->data.two_phase_at);\n\tctx->reorder->private_data = ctx;\n\tctx->reorder->apply_truncate = truncate_cb_wrapper;", "partial_line": "ctx->reorder->stream_p", "completion": "ctx->reorder->stream_prepare = stream_prepare_cb_wrapper; <|endoftext|>"}
{"context": "\tFREETMPS;\n\treturn retval;\nplperl_call_perl_trigger_func(plperl_proc_desc *desc, FunctionCallInfo fcinfo,\n\t\t\t\t\t\t\t  SV *td)\n\tdSP;", "partial_line": "int", "completion": "int\t\t\ti, <|endoftext|>"}
{"context": "\t\t\tOid\t\t\thasheqoperator;\n\t\t\t{\n\t\t\t\tlist_free(*param_exprs);\n\t\t\t\texpr = (Node *) linitial(opexpr->args);\n\t\t}", "partial_line": "*param_exprs = lappend(*param_", "completion": "*param_exprs = lappend(*param_exprs, expr); <|endoftext|>"}
{"context": "{ 2, s_1_60, -1, 1, 0},\n{ 4, s_1_61, 60, 3, 0},\n{ 3, s_1_65, 60, 1, 0},\n{ 5, s_1_69, -1, 1, 0},\n{ 4, s_1_81, 72, 1, 0},", "partial_line": "{ 6, s_1_88", "completion": "{ 6, s_1_88, 87, 1, 0}, <|endoftext|>"}
{"context": "\t\tList\t   *merge_update_permissive_policies;\n\t\t\t\t\t\t\t   false);\n\t\t\t\t\t\t\t\t\t  &merge_select_restrictive_policies);\n\t\t\t\t\t\t\t   merge_delete_permissive_policies,\n\t\t\t\t\t\t\t   withCheckOptions,", "partial_line": "&merge_insert_rest", "completion": "&merge_insert_restrictive_policies); <|endoftext|>"}
{"context": "\t}\n\t{\n{\n\t\t\t \"e.g.\\n\"\n\t\t\tcase 'x':", "partial_line": "defa", "completion": "default: <|endoftext|>"}
{"context": "\t[LWTRANCHE_SUBTRANS_BUFFER] = \"SubtransBuffer\",\n\t[LWTRANCHE_SERIAL_BUFFER] = \"SerialBuffer\",\n\t[LWTRANCHE_BUFFER_CONTENT] = \"BufferContent\",\n\t[LWTRANCHE_PER_SESSION_RECORD_TYPE] = \"PerSessionRecordType\",\n\t[LWTRANCHE_NOTIFY_SLRU] = \"NotifySLRU\",", "partial_line": "static int\tn", "completion": "static int\tnum_held_lwlocks = 0; <|endoftext|>"}
{"context": "\t{\n\t\t{\n\t\t{\n\t}\n\tif (hasNulls)", "partial_line": "hoff = len", "completion": "hoff = len = MAXALIGN(len); <|endoftext|>"}
{"context": "\tRangeBound\tlower1,\n\tRangeBound\tupper1,\n\tRangeBound *result_lower;\n\t\t\treturn r2;\n\t\tr1 = rangeCopy(r1);", "partial_line": "if (range_cmp_bo", "completion": "if (range_cmp_bounds(typcache, &lower1, &lower2) <= 0) <|endoftext|>"}
{"context": "\telse if (Matches(\"VACUUM\", MatchAnyN, \"ANALYZE\"))\n\t\telse if (TailMatches(\"INDEX_CLEANUP\"))\n\telse if (Matches(\"VACUUM\", MatchAnyN, \"(\"))\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_vacuumables);\n\telse if (TailMatches(\"AT\", \"TIME\", \"ZONE\"))", "partial_line": "else if", "completion": "else if (TailMatchesCS(\"\\\\connect|\\\\c\")) <|endoftext|>"}
{"context": "\t\tcheck[found].ccenforced = conform->conenforced;\n\t\tif (isnull)\n\t\t\tchar\t   *s = TextDatumGetCString(val);\nstatic int\nList *", "partial_line": "Relation", "completion": "Relation\tconrel; <|endoftext|>"}
{"context": "\t\t\tstmt->command = ecpg_strdup(command, lineno);\n\t\t\treturn false;\n\tstmt->lineno = lineno;\n\t\t\tlist = &(stmt->outlist);\n\t\t\tif (!(var = (struct variable *) ecpg_alloc(sizeof(struct variable), lineno)))", "partial_line": "ecpg_do_epilo", "completion": "ecpg_do_epilogue(stmt); <|endoftext|>"}
{"context": "\t\tcase TSConfigRelationId:\n\t\t\t\tif (!HeapTupleIsValid(tup))\n\t\t\t\t\t\t\t object->objectId);\n\t\t\t\tschema = get_namespace_name_or_temp(formCfg->cfgnamespace);\n\t\t\t\t\t\t\t\t\t   quote_qualified_identifier(schema,", "partial_line": "if (", "completion": "if (objname) <|endoftext|>"}
{"context": "}\n\tBOX\t\t   *box2 = PG_GETARG_BOX_P(1);\n\tPG_RETURN_BOOL(FPle(box1->high.x, box2->high.x));\nDatum\n\tPG_RETURN_BOOL(FPgt(box1->low.x, box2->high.x));", "partial_line": "box_belo", "completion": "box_below(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tComplex    *result;\n\tComplex    *result;\n\t\t\t\tbmag = Mag(b);\n\tComplex    *b = (Complex *) PG_GETARG_POINTER(1);\nDatum", "partial_line": "Complex    *b = (Complex *) P", "completion": "Complex    *b = (Complex *) PG_GETARG_POINTER(1); <|endoftext|>"}
{"context": "\tif (needs_wal)\n\tif (relpersistence == RELPERSISTENCE_PERMANENT && !XLogIsNeeded())\n\tpending->next = pendingDeletes;\n\tpendingDeletes = pending;\n\tPendingRelDelete *next;", "partial_line": "next = pendi", "completion": "next = pending->next; <|endoftext|>"}
{"context": "\t\t\t\tamroutine = indexRelation->rd_indam;\n\t\t\t\tinfo->amsearcharray = amroutine->amsearcharray;\n\t\t\t\t\t\tint16\t\topt = indexRelation->rd_indoption[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinfo->opcintype[i],\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &opcintype,", "partial_line": "info->sortopf", "completion": "info->sortopfamily[i] = opfamily; <|endoftext|>"}
{"context": "\t\t\t\tStartTransaction();\n\t\t\tbreak;\n\t\t\tAbortTransaction();\n\t\t\t}\n\t\tcase TBLOCK_SUBCOMMIT:", "partial_line": "RestoreTransactio", "completion": "RestoreTransactionCharacteristics(&savetc); <|endoftext|>"}
{"context": "\t\tCatalogTupleUpdate(attrelation, &tuple->t_self, tuple);\n\t\tObjectAddressSubSet(address, RelationRelationId,\n\ttable_close(attrelation, RowExclusiveLock);\n\t\t{\n\t\t\ttable_close(childrel, NoLock);", "partial_line": "return", "completion": "return address; <|endoftext|>"}
{"context": "\t{\nNUM_processor(FormatNode *node, NUMDesc *Num, char *inout,\n\tconst char *pattern;\n\tNp->read_dec = false;\n\t\tif (!Np->is_to_char)", "partial_line": "if (is", "completion": "if (is_to_char) <|endoftext|>"}
{"context": "\t\tCommitTransactionCommand();\n\t\tdbform = (Form_pg_database) GETSTRUCT(tuple);\n\t\tLockSharedObject(DatabaseRelationId, dboid, 0, RowExclusiveLock);\n\t\tif (!HeapTupleIsValid(tuple) ||\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_DATABASE),", "partial_line": "errmsg(\"datab", "completion": "errmsg(\"database %u does not exist\", dboid))); <|endoftext|>"}
{"context": "static const symbol s_2_14[7] = { 'e', 'l', 'i', 'j', 'e', 'g', 'a' };\nstatic const symbol s_2_28[6] = { 's', 'n', 'j', 'e', 'g', 'a' };\nstatic const symbol s_2_35[5] = { 'a', 'n', 'e', 'g', 'a' };\nstatic const symbol s_2_40[5] = { 'a', 't', 'e', 'g', 'a' };\nstatic const symbol s_2_41[7] = { 'e', 'v', 'i', 't', 'e', 'g', 'a' };", "partial_line": "static const symbol s_2_50", "completion": "static const symbol s_2_50[6] = { 'u', 0xC4, 0x87, 'e', 'g', 'a' }; <|endoftext|>"}
{"context": "\t}\n\tresult = arg1 / arg2;\n\tint64\t\targ2 = PG_GETARG_INT64(1);\n\t\tereport(ERROR,\n\tint32\t\targ1 = PG_GETARG_INT32(0);", "partial_line": "errmsg(\"bigint out", "completion": "errmsg(\"bigint out of range\"))); <|endoftext|>"}
{"context": "\t\tAH->lo_buf_used += remaining;\n\t{\n\t\t\t\tpg_log_info(\"while INITIALIZING:\");\n\t\t\t\t\tAH->currentTE->owner ? AH->currentTE->owner : \"(no owner)\");\n\t\texit_nicely(1);", "partial_line": "AH->public.n_", "completion": "AH->public.n_errors++; <|endoftext|>"}
{"context": "\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DEFACLOBJ_SEQUENCE:\n\t\t\t\t\t\t\t\t\t\t\t   \" on sequences\");\n\t\t\t\t\tcase DEFACLOBJ_FUNCTION:\n\t\t\t\t\t\t\t\t\t\t\t   \" on types\");", "partial_line": "\" o", "completion": "\" on schemas\"); <|endoftext|>"}
{"context": "\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n\tint\t\t\tres = -1;\n\t\t\t   *srcend;\n\t\tif (s >= srcend)\n\t}", "partial_line": "src+", "completion": "src++; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t   &opcintype,\n\t\t\t\t\t\t\tinfo->sortopfamily[i] = opfamily;\n\t\t\t\t\t\t\tinfo->sortopfamily = NULL;\n\t\t\t\t{\n\t\t\t\tinfo->amsearcharray = false;", "partial_line": "info-", "completion": "info->amhasgetbitmap = false; <|endoftext|>"}
{"context": "\t\t\t\t\tPortalRunSelect(portal, false, -count - 1, None_Receiver);\n\t\t\t}\n\t}\n\t\ton_row = (!portal->atStart && !portal->atEnd);\n\t\t{", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\t\t\tcase WJB_BEGIN_OBJECT:\n\t\t\tcase WJB_END_OBJECT:\n\t\t\t\t{\n\t\t\t\t}\n}", "partial_line": "Jsonb", "completion": "JsonbAggState *arg; <|endoftext|>"}
{"context": "{\n\tParamListInfo retval;\n\tsize = offsetof(ParamListInfoData, params) +", "partial_line": "retva", "completion": "retval->paramFetch = NULL; <|endoftext|>"}
{"context": "\t\trecptr = XLogInsert(RM_SPGIST_ID, XLOG_SPGIST_VACUUM_ROOT);\n\tPage\t\tpage = BufferGetPage(buffer);\n\tSpGistPageOpaque opaque = SpGistPageGetOpaque(page);\n\t\tSpGistDeadTuple dt;\n\t\t\t(!TransactionIdIsValid(dt->xid) ||", "partial_line": "Assert", "completion": "Assert(opaque->nPlaceholder >= i); <|endoftext|>"}
{"context": "\tif (IsA(node, SubLink))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj->rarg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&child_rels);\n\t\t\t\tj->larg = *jtlink2;\n\t\t\tif ((j = convert_EXISTS_sublink_to_join(root, sublink, false,", "partial_line": "availabl", "completion": "available_rels2, <|endoftext|>"}
{"context": "{\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n{\n\tHeapTuple\tutup;\n\t\tresult = ((Form_pg_authid) GETSTRUCT(utup))->rolreplication;", "partial_line": "SetConfig", "completion": "SetConfigOption(\"session_authorization\", rname, <|endoftext|>"}
{"context": "{ 7, s_2_422, 416, 29, 0},\n{ 5, s_2_430, 424, 12, 0},\n{ 4, s_2_443, -1, 66, 0},\n{ 3, s_2_446, -1, 124, 0},\n{ 4, s_2_449, 448, 121, 0},", "partial_line": "{ 3, s_2_466,", "completion": "{ 3, s_2_466, -1, 116, 0}, <|endoftext|>"}
{"context": "{\n\tattr_rel = table_open(AttributeRelationId, RowExclusiveLock);\n\tattTup = (Form_pg_attribute) GETSTRUCT(tuple);\n\tObjectAddressSubSet(address, RelationRelationId,\n\t\t\t\t errmsg(\"cannot alter system column \\\"%s\\\"\",", "partial_line": "TupleDesc\ttupDesc = Re", "completion": "TupleDesc\ttupDesc = RelationGetDescr(parent); <|endoftext|>"}
{"context": "char* decs[] = { \"2E394\", \"-2\", \".794\", \"3.44\", \"592.49E21\", \"-32.84e4\",\n\t\t\t\t \"2E-394\", \".1E-2\", \"+.0\", \"-592.49E-07\", \"+32.84e-4\",\n\t\t\t\t \"1234567890123456789012345678.91\", \nmain(void)\n\tECPGdebug(1, stderr);", "partial_line": "if (r < 0) check_", "completion": "if (r < 0) check_errno(); <|endoftext|>"}
{"context": "\t\t\t\t\t\ttable_close(catalog, AccessShareLock);\n\t\t\t\tif (attnum != InvalidAttrNumber)\n\t\t\t\t\t\tobj->objname = pstrdup(NameStr(*DatumGetName(datum)));\n\tReturnSetInfo *rsinfo = (ReturnSetInfo *) fcinfo->resultinfo;\n\t\t\t\t errmsg(\"%s can only be called in a sql_drop event trigger function\",", "partial_line": "SQLDr", "completion": "SQLDropObject *obj; <|endoftext|>"}
{"context": "\tParserState *pst = (ParserState *) PG_GETARG_POINTER(0);\n\t}\n\t\ttype = 3;\n\tParserState *pst = (ParserState *) PG_GETARG_POINTER(0);\n\tLexDescr   *descr = (LexDescr *) palloc(sizeof(LexDescr) * (2 + 1));", "partial_line": "descr[1].l", "completion": "descr[1].lexid = 12; <|endoftext|>"}
{"context": "\t\tSetRoleIsActive = true;\nchar *\n\treturn result;\ntypedef struct SerializedClientConnectionInfo\n\tint32\t\tauthn_id_len;\t", "partial_line": "User", "completion": "UserAuth\tauth_method; <|endoftext|>"}
{"context": "                }\n            break;\n                if (ret < 0) goto lab0;\n                z->c = ret;\n            {   int c3 = z->c;", "partial_line": "lab", "completion": "lab4: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   gistBuildCallback,\n\t\t\t\t\t\t\t  true);\n\tfreeGISTstate(buildstate.giststate);\n\treturn result;\ngistSortedBuildCallback(Relation index,", "partial_line": "Ite", "completion": "ItemPointer tid, <|endoftext|>"}
{"context": "\tif (RangeTypeGetOid(r1) != RangeTypeGetOid(r2))\n\trange_deserialize(typcache, r1, &lower1, &upper1, &empty1);\n{\n\tTypeCacheEntry *typcache;\n\tPG_RETURN_BOOL(range_before_internal(typcache, r1, r2));", "partial_line": "bool", "completion": "bool\t\tempty1, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tpg_user, system_user, case_insensitive,\n\tMemoryContext ident_context;\n\tif (file == NULL)\n\t\t\tok = false;\n\t\t}", "partial_line": "if (!", "completion": "if (!ok) <|endoftext|>"}
{"context": "\t\t\t\t PQerrorMessage(copyConn));\n\tPGcancel   *cancel;\n\tif (PQsetnonblocking(conn, 1) != 0)\n\tif (!PQcancel(cancel, errorbuf, sizeof(errorbuf)))\n\tPQcancelFinish(cancelConn);", "partial_line": "if (!P", "completion": "if (!PQcancelStart(cancelConn)) <|endoftext|>"}
{"context": "AtSubAbort_smgr(void)\nsmgr_redo(XLogReaderState *record)\n\t\tsmgrcreate(reln, xlrec->forkNum, true);\n\t{\n\t\tSMgrRelation reln;", "partial_line": "BlockNumber", "completion": "BlockNumber blocks[MAX_FORKNUM]; <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n#ifdef USE_LOCALE_NUMERIC\n\t\t\t|| category == LC_ALL\n\t\t\t)\n\t\t\t\tnewnum = setlocale(LC_NUMERIC, NULL);", "partial_line": "new_nume", "completion": "new_numeric(newnum); <|endoftext|>"}
{"context": "\t\t{\n\t\t{\n\t\tresult = (ArrayType *) palloc0(nbytes);\n\t\tSET_VARSIZE(result, nbytes);\n\t\tresult->elemtype = astate->element_type;", "partial_line": "if (astate->nul", "completion": "if (astate->nullbitmap != NULL) <|endoftext|>"}
{"context": "static SV  *plperl_hash_from_datum(Datum attr);\nstatic Datum plperl_sv_to_datum(SV *sv, Oid typid, int32 typmod,\n\t\t\t\t\t\t\t\tbool *isnull);\nstatic void plperl_inline_callback(void *arg);\n#if defined(WIN32) && PERL_VERSION_LT(5, 28, 0)", "partial_line": "SvREF", "completion": "SvREFCNT_dec(sv); <|endoftext|>"}
{"context": "\t\tcase EXPR_KIND_VALUES_SINGLE:\n\t\tcase EXPR_KIND_MERGE_WHEN:\n\t\tcase EXPR_KIND_CHECK_CONSTRAINT:\n\t\t\terr = _(\"set-returning functions are not allowed in trigger WHEN conditions\");\n\t\tcase EXPR_KIND_PARTITION_EXPRESSION:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase PG_WAIT_LOCK:\n\t\t\tevent_type = \"BufferPin\";\n\t\t\tevent_type = \"Activity\";\n\t\t\tbreak;\npgstat_get_wait_event(uint32 wait_event_info)", "partial_line": "uint16", "completion": "uint16\t\teventId; <|endoftext|>"}
{"context": "\tdlist_push_head(&set->blocks, &block->node);\n\trequired_size = chunk_size + Bump_CHUNKHDRSZ;\n\treturn BumpAllocChunkFromBlock(context, block, size, chunk_size);\n{\nBumpBlockIsEmpty(BumpBlock *block)", "partial_line": "wipe_mem(datas", "completion": "wipe_mem(datastart, block->freeptr - datastart); <|endoftext|>"}
{"context": "\t\t\t   *lbs;\n\tTuplesortstate *tuplesortstate;\n\t\treturn array;\n\t\tcache_info = (ArraySortCachedInfo *)\n\t\tcache_info->array_meta.typalign = typentry->typalign;", "partial_line": "sort_ty", "completion": "sort_typ = elmtyp; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tif (rows > (uint64) PY_SSIZE_T_MAX)\n\t\t\t\t\t\tPyList_SetItem(result->rows, i, row);\n\t\tPG_CATCH();\n\t\t{", "partial_line": "PG_", "completion": "PG_TRY(); <|endoftext|>"}
{"context": "\tif (typTup->typtype == TYPTYPE_COMPOSITE)\n\ttable_close(rel, RowExclusiveLock);\n{\n\tHeapTuple\tnewtup;\n\ttypename = makeTypeNameFromNameList(names);", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t_bt_skiparray_strat_adjust(scan, outkey, array);\n}\n\t\t\t\tnumSkipArrayKeys,\n\tAssert(scan->numberOfKeys);\n#ifdef DEBUG_DISABLE_SKIP_SCAN", "partial_line": "prev_numSkipArrayKey", "completion": "prev_numSkipArrayKeys = numSkipArrayKeys; <|endoftext|>"}
{"context": "}\npg_attribute_target(\"xsave\")\nstatic inline bool\n\treturn false;\navx512_popcnt_available(void)", "partial_line": "__get_cpuid_count(7, 0, &exx[0], &exx[1],", "completion": "__get_cpuid_count(7, 0, &exx[0], &exx[1], &exx[2], &exx[3]); <|endoftext|>"}
{"context": "        z->bra = z->c;\n    lab2:\n        z->bra = z->c;\n    if (z->c > z->lb) return 0;\n    {   int ret = slice_del(z);", "partial_line": "re", "completion": "return 1; <|endoftext|>"}
{"context": "\t{\n\t\tbool\t   *hasmatch1;\n\t\t\t\t\tuncertain;\n\t\tclamped_nvalues2 = Min(sslot2->nvalues, nd2);\n\t\tInitFunctionCallInfoData(*fcinfo, &eqproc, 2, collation,", "partial_line": "for (i = 0; i", "completion": "for (i = 0; i < sslot1->nvalues; i++) <|endoftext|>"}
{"context": "\tAssert(nkeys > 0);\n\tcollations = palloc(nkeys * sizeof(Oid));\n\tkeyparamids = pull_paramids((Expr *) param_exprs);\n}\n{", "partial_line": "Plan", "completion": "Plan\t   *plan; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n{", "partial_line": "static F", "completion": "static FmgrInfo *ToClientConvProc = NULL; <|endoftext|>"}
{"context": "#line 48 \"char_array.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n  for (loopcount = 0; loopcount < 100; loopcount++) {\n#line 56 \"char_array.pgc\"\n#line 60 \"char_array.pgc\"", "partial_line": "if (sqlca.sqlcod", "completion": "if (sqlca.sqlcode < 0) exit (1);} <|endoftext|>"}
{"context": "\t}\n\tint32\t\tresult;\n\t{\n\tinit_var_from_num(num, &x);\n\t\t}", "partial_line": "retu", "completion": "return result; <|endoftext|>"}
{"context": "#include \"access/genam.h\"\n\tTupleTableSlot *slot;\n\t\t\t\t(errcode(ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED),", "partial_line": "errmsg(\"f", "completion": "errmsg(\"function \\\"%s\\\" must be fired AFTER ROW\", <|endoftext|>"}
{"context": "\t\tcase T_JsonConstructorExpr:\n\t\t\tget_json_constructor((JsonConstructorExpr *) node, context, false);\n\t\t\t\t\t\tappendStringInfoString(context->buf, \" OBJECT\");\n\t\t\t\tJsonExpr   *jexpr = (JsonExpr *) node;\n\t\t\t\t\t\tbreak;", "partial_line": "get_json_path_spec(jexpr->path_spec,", "completion": "get_json_path_spec(jexpr->path_spec, context, showimplicit); <|endoftext|>"}
{"context": "\t\t\treturn context->cpUpdateReturningSlot;\n\t\t\tcase TM_SelfModified:\n\t\t\t\t\t\tcase TM_Ok:\n\t\t\t\t\t\t\tepqslot = EvalPlanQual(context->epqstate,\n\t\t\t\t\t\t\t\t\t\t\t\t   resultRelationDesc,", "partial_line": "in", "completion": "inputslot); <|endoftext|>"}
{"context": "\telmtyp = ARR_ELEMTYPE(array);\n\t}\n\tPG_RETURN_ARRAYTYPE_P(result);\n\t\t\t\t\tFunctionCallInfo fcinfo)\n{", "partial_line": "*lb", "completion": "*lbs; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tpreprocess_aggrefs(root, (Node *) parse->havingQual);\n\t\t\twflists = find_window_functions((Node *) root->processed_tlist,\n\t\t\t\tparse->hasWindowFuncs = false;\n\t\t\tpreprocess_minmax_aggregates(root);", "partial_line": "parse->distinctC", "completion": "parse->distinctClause || <|endoftext|>"}
{"context": "\t{\n\t\tbool\t\tisfirst = false;\n\t\tif (state == NULL)\n\t\t\tbytea\t   *delim = PG_GETARG_BYTEA_PP(2);\n\tPG_RETURN_CSTRING(TextDatumGetCString(txt));", "partial_line": "StringInfo\tbuf = (StringInfo)", "completion": "StringInfo\tbuf = (StringInfo) PG_GETARG_POINTER(0); <|endoftext|>"}
{"context": "#include \"access/htup.h\"\n#include \"catalog/pg_attribute.h\"", "partial_line": "#incl", "completion": "#include \"executor/nodeAgg.h\" <|endoftext|>"}
{"context": "\t\t!bms_equal(rel->relids, root->all_query_rels))\n\t\tgenerate_useful_gather_paths(root, rel, false);\n\t\t\t{\n\t\t\t\t\treturn;\n\t\t\tbreak;", "partial_line": "case RTE", "completion": "case RTE_JOIN: <|endoftext|>"}
{"context": "{ 4, s_4_0, -1, 2, 0},\nstatic const struct among a_5[2] =\n{ 4, s_7_2, 0, 2, 0},\n{ 4, s_7_3, -1, 3, 0}\nstatic const symbol s_8_1[4] = { 0xD8, 0xB3, 0xD8, 0xAA };", "partial_line": "static const symbol s_8_3[4] = { 0xD8, 0", "completion": "static const symbol s_8_3[4] = { 0xD8, 0xB3, 0xD9, 0x8A }; <|endoftext|>"}
{"context": "\tvoid\t   *tuple;\n\t{\n\t\t\tpfree(tuple);\n\t\treturn true;\n\tif (ntuples <= 0)", "partial_line": "switch (state", "completion": "switch (state->status) <|endoftext|>"}
{"context": "#ifdef WIN32\n\tva_start(ap, fmt);\n\tif (written >= MAXCMDLEN)\n\t\tfflush(NULL);\n\tfclose(log);", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "static const symbol s_3_167[4] = { 0xEF, 'x', 'e', 's' };\nstatic const symbol s_3_168[3] = { 0xEF, 'e', 's' };\nstatic const symbol s_3_179[6] = { 'i', 's', 't', 'e', 'i', 's' };\nstatic const symbol s_3_189[5] = { 'i', 't', 'z', 'i', 's' };\nstatic const symbol s_3_192[5] = { 'e', 'r', 0xE9, 'i', 's' };", "partial_line": "static cons", "completion": "static const symbol s_3_196[4] = { 'i', 'd', 'o', 's' }; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\telse\n\t\t\t\t\t}\n\t\t\t\t\t\t\tStartTransaction(AHX);\n\t\t\t\t\t{\n\t\tpending_list_header_init(&pending_list);", "partial_line": "restore_toc_entr", "completion": "restore_toc_entries_parallel(AH, pstate, &pending_list); <|endoftext|>"}
{"context": "\tpid_t\t\tPostmasterPid;\n\t\t\t\t\t\t\t\t   const void *startup_data, size_t startup_data_len);\n\t\t\t\t\t\t\t   ClientSocket *client_sock);\n\t[B_DEAD_END_BACKEND] = {\"dead-end backend\", BackendMain, true},\n\t[B_AUTOVAC_LAUNCHER] = {\"autovacuum launcher\", AutoVacLauncherMain, true},", "partial_line": "[B_ARCHIVER] = {\"arc", "completion": "[B_ARCHIVER] = {\"archiver\", PgArchiverMain, true}, <|endoftext|>"}
{"context": "\t\t\tMemoryContextSwitchTo(PortalContext);\n\t\t\t\t\t\t   tab->at_datname, tab->at_nspname, tab->at_relname);\n\t\t\tStartTransactionCommand();\n\t\t}\n\t\t\tProcessConfigFile(PGC_SIGHUP);", "partial_line": "VacuumUp", "completion": "VacuumUpdateCosts(); <|endoftext|>"}
{"context": "#ifdef HAVE_SETSID\n\tif (kill(pid, sig))\n\t\t\t\t errdetail(\"Only roles with privileges of the \\\"%s\\\" role may cancel autovacuum workers.\",\n\tif (r == SIGNAL_BACKEND_NOPERMISSION)\n\t\t\t\t\t\t   \"pg_signal_backend\")));", "partial_line": "PG_RETUR", "completion": "PG_RETURN_BOOL(r == SIGNAL_BACKEND_SUCCESS); <|endoftext|>"}
{"context": "\t\t\t\tcase 0:\n\t\t\t\t\tPG_RETURN_NUMERIC(make_result(&const_pinf));\n\t\t\t\tcase 1:\n\t\t\tAssert(false);\n\tPG_RETURN_NUMERIC(res);", "partial_line": "res = numeric", "completion": "res = numeric_mod_opt_error(num1, num2, NULL); <|endoftext|>"}
{"context": "static const symbol s_6_9[4] = { 'i', 'd', 'a', 'd' };\nstatic const symbol s_6_10[4] = { 'a', 'b', 'l', 'e' };\nstatic const symbol s_6_11[4] = { 'i', 'b', 'l', 'e' };\nstatic const symbol s_6_16[6] = { 'u', 'c', 'i', 0xC3, 0xB3, 'n' };\nstatic const symbol s_6_19[3] = { 'o', 's', 'o' };", "partial_line": "static const symbol s_6_35[5]", "completion": "static const symbol s_6_35[5] = { 'i', 'b', 'l', 'e', 's' }; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tGrantLockLocal(locallock, owner);\n\tif (ConflictsWithRelationFastPath(locktag, lockmode))\n\t\tif (!FastPathTransferRelationLocks(lockMethodTable, locktag,\n\t\tAbortStrongLockAcquire();", "partial_line": "return LOCKACQUIR", "completion": "return LOCKACQUIRE_NOT_AVAIL; <|endoftext|>"}
{"context": "\t\t\t\t\t  gettext_noop(\"Schema\"),\n\tif (pset.sversion >= 110000)\n\t\t\t\t\t\t  \"  WHEN \" CppAsString2(PROKIND_WINDOW) \" THEN '%s'\\n\"\n\t\t\t\t\t\t  \"  ELSE '%s'\\n\"\n\t\t\t\t\t\t  gettext_noop(\"Result data type\"),", "partial_line": "gett", "completion": "gettext_noop(\"window\"), <|endoftext|>"}
{"context": "\telse if (Matches(\"ALTER\", \"TABLE\", MatchAny, \"ALTER\", \"COLUMN\", MatchAny, \"SET\", \"(\") ||\n\telse if (Matches(\"ALTER\", \"TABLE\", MatchAny, \"ALTER\", \"COLUMN\", MatchAny, \"SET\", \"GENERATED\") ||\n\t\tCOMPLETE_WITH(\"DEFAULT\", \"PLAIN\", \"EXTERNAL\", \"EXTENDED\", \"MAIN\");\n\t\tset_completion_reference(prev3_wd);\n\t\t\t\t\t\t\t\t \"DEFAULT\");", "partial_line": "else if (Ma", "completion": "else if (Matches(\"ALTER\", \"TABLE\", MatchAny, \"REPLICA\")) <|endoftext|>"}
{"context": "            break;\n            {   int ret = slice_from_s(z, 3, s_3);\n            {   int ret = r_R1(z);\n            }\n            }", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\terrorConflictingDefElem(defel, pstate);\n\t\t}\n\t\t\trangeSubtypeDiffName = defGetQualifiedName(defel);\n\t\telse", "partial_line": "if (type_is_co", "completion": "if (type_is_collatable(rangeSubtype)) <|endoftext|>"}
{"context": "static Datum ExecJustHashOuterVar(ExprState *state, ExprContext *econtext, bool *isnull);\nstatic Datum ExecJustHashOuterVarStrict(ExprState *state, ExprContext *econtext, bool *isnull);\nstatic pg_attribute_always_inline void ExecAggPlainTransByRef(AggState *aggstate,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ExprContext *aggcontext,\n\tDatum\t\tkey;", "partial_line": "#define", "completion": "#define SH_PREFIX saophash <|endoftext|>"}
{"context": "\tLLVMTypeRef deform_sig;\n\tLLVMValueRef v_deform_fn;\n\tLLVMBasicBlockRef b_out;\n\tLLVMValueRef v_tupdata_base;\n\tLLVMValueRef v_tts_values;", "partial_line": "LLVMV", "completion": "LLVMValueRef v_tts_nulls; <|endoftext|>"}
{"context": "                if (!find_among_b(z, a_5, 3)) { z->c = z->l - m3; goto lab2; }\n                    if (ret < 0) return ret;\n                if (!(eq_s_b(z, 2, s_17))) { z->c = z->l - m4; goto lab3; }\n    }\nstatic int r_verb_suffix(struct SN_env * z) {", "partial_line": "if (z->c < z->I[2])", "completion": "if (z->c < z->I[2]) return 0; <|endoftext|>"}
{"context": "cost_namedtuplestorescan(Path *path, PlannerInfo *root,\n\tCost\t\tcpu_per_tuple;\nvoid\ncost_recursive_union(Path *runion, Path *nrterm, Path *rterm)\n\tdouble\t\ttotal_rows;", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\tqsort(xids, nxids, sizeof(TransactionId), xidLogicalComparator);\n\t\t\t\t\t xids[i]);\n\t\t\tKnownAssignedXidsAdd(xids[i], xids[i], true);\n\t\tExtendSUBTRANS(latestObservedXid);", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\tmemmove(&(phdr->pd_linp[offidx]),\n\taddr = (char *) page + phdr->pd_upper;\n\t\tint\t\t\ti;\n\tbool\t\tpresorted = true;\t\n\t\t\t\t\t\tpd_lower, pd_upper, pd_special)));", "partial_line": "to", "completion": "totallen = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   false,\n\t\t\troot->setop_pathkeys = NIL;\n\tif (root->group_pathkeys)\n\t\troot->query_pathkeys = root->distinct_pathkeys;\n\t\tif (parse->groupingSets)", "partial_line": "ta", "completion": "target_list); <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"catalog/pg_authid.h\"\nOid", "partial_line": "AclR", "completion": "AclResult\taclresult; <|endoftext|>"}
{"context": "\t}\n\t\t\treturn NULL;\n\t\t{\n\treturn NULL;\n\toff = 0;", "partial_line": "state", "completion": "state->elems[off] = (Node *) <|endoftext|>"}
{"context": "};\nstatic const symbol s_6_2[6] = { 0xC3, 0xA1, 's', 't', 'u', 'l' };\n{\nstatic const symbol s_8_1[2] = { 'a', 'k' };\n{ 3, s_8_4, 0, 1, 0},", "partial_line": "{ 3, s_8_5, 0,", "completion": "{ 3, s_8_5, 0, 2, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   cmd->timeline,\n\t\t}\n\t\tif (FlushPtr < cmd->startpoint)\n\t\t\tereport(ERROR,\n\t\tWalSndLoop(XLogSendPhysical);", "partial_line": "tupdesc = Crea", "completion": "tupdesc = CreateTemplateTupleDesc(2); <|endoftext|>"}
{"context": "\t\t\t\tAssert(minoff >= 0 && maxoff >= 0);\n\t\t\telse\n\t\tcase BTGreaterEqualStrategyNumber:\n\t\tcase BTGreaterStrategyNumber:\n\t\t\t\t\t\t\t\t\t\t\t\t&is_equal);", "partial_line": "nextoff", "completion": "nextoff = inclusive ? off - 1 : off + 1; <|endoftext|>"}
{"context": "\t\tCHECK_SIZE_LAB(1);\n\t\t    diag2(1, s_lab[3] == 'i' ? \"Unmatched #elif\" : \"Unmatched #else\");\n\t\t}\n\t\t    diag2(1, \"Unrecognized cpp directive\");\n\t\tn_real_blanklines = 0;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\tfor (i = 0; i < indnkeyatts; i++)\n\t}\n\t\t\t\t\t\t\t   constr_strats[i],\n\t\t\t\t\t\t\t   InvalidOid,\n\twhile (index_getnext_slot(index_scan, ForwardScanDirection, existing_slot))", "partial_line": "elog(ERROR, \"found", "completion": "elog(ERROR, \"found self tuple multiple times in index \\\"%s\\\"\", <|endoftext|>"}
{"context": "\tsetup_cancel_handler(NULL);\n\t\t\t\t\t\t\t &objects,\n\t\t}\n\t\t{\n\t\t\tint\t\t\tstage;", "partial_line": "vacuum_one_database", "completion": "vacuum_one_database(&cparams, &vacopts, <|endoftext|>"}
{"context": "\t{NULL, 0, A_POP, TPS_Null, 0, NULL}\n\t{NULL, 0, A_NEXT, TPS_InTagEscapeK, 0, NULL}\n};\n\t{NULL, 0, A_BINGO | A_CLRALL, TPS_Base, TAG_T, NULL}\n\t{p_iseqC, '-', A_NEXT, TPS_InCloseCommentFirst, 0, NULL},", "partial_line": "{NULL, 0, A_NE", "completion": "{NULL, 0, A_NEXT, TPS_Null, 0, NULL} <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tBTLessStrategyNumber);\n\t\tr = FunctionCall2Coll(lt, colloid, maxval, minval);\n{\nrange_deduplicate_values(Ranges *range)\n\tcompare_context cxt;", "partial_line": "typid", "completion": "typid = range->typid; <|endoftext|>"}
{"context": "\t\t\tereport(NOTICE,\n\t\t{\n\t\t\tattForm = (Form_pg_attribute) GETSTRUCT(atttuple);\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "else i", "completion": "else if (IsA(selem->expr, Var)) <|endoftext|>"}
{"context": "#else\n\t\t\tpg_fatal(\"could not read file \\\"%s\\\": read %d of %zu\",\n\tif (!*crc_ok_p &&\n#ifndef FRONTEND\n\t\tereport(PANIC,", "partial_line": "Con", "completion": "ControlFilePath))); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\nstatic bool REGRESS_deny_object_access = false;\n\t\t\t\t\t\t\t PGC_SUSET,\n\t\t\t\t\t\t\t false,\n\t\t\t\t\t\t\t NULL,", "partial_line": "&REGRESS_d", "completion": "&REGRESS_deny_exec_perms, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\tspec->modulus,\n\t\t\t\t\t\t\t\t\t errdetail(\"The new modulus %d is not a factor of %d, the modulus of existing partition \\\"%s\\\".\",\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset + 1 < boundinfo->ndatums)", "partial_line": "next_modulus = DatumGetInt32(boundinfo->datu", "completion": "next_modulus = DatumGetInt32(boundinfo->datums[offset + 1][0]); <|endoftext|>"}
{"context": "\t\tif (AH->lookaheadLen >= strlen(TEXT_DUMPALL_HEADER) &&\n\t\t\t\tREAD_ERROR_EXIT(fh);\n\t\tif (!isValidTarHeader(AH->lookahead))\n\t\t\tpg_fatal(\"input file does not appear to be a valid archive\");\n\t\tAH->readHeader = 0;", "partial_line": "AH->int", "completion": "AH->intSize = sizeof(int); <|endoftext|>"}
{"context": "\t\t\t\t\t(errmsg(\"invalid data in history file: %s\", fline),\n\tFreeFile(fd);\n\t\tereport(FATAL,\n\tentry = (TimeLineHistoryEntry *) palloc(sizeof(TimeLineHistoryEntry));\n\tif (fromArchive)", "partial_line": "TLHistoryFile", "completion": "TLHistoryFilePath(path, probeTLI); <|endoftext|>"}
{"context": "\t{\nstatic bool\n\tif (node == NULL)\n\t{\n\t{", "partial_line": "case", "completion": "case PORTAL_ONE_MOD_WITH: <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n\t\t\telog(ERROR, \"padding after spinlock modified\");\n\ttest_atomic_flag();\n}\n\t\tSupportRequestSelectivity *req = (SupportRequestSelectivity *) rawreq;", "partial_line": "req->ar", "completion": "req->args, <|endoftext|>"}
{"context": "static void parse_test_flags(test_re_flags *flags, text *opts);\n\t\ttext\t   *flags = PG_GETARG_TEXT_PP(2);\n\t\tMemoryContextSwitchTo(oldcontext);\n\t\tpg_regfree(&cpattern);\n\t}", "partial_line": "regex_t *", "completion": "regex_t *result_re) <|endoftext|>"}
{"context": "\tOffsetNumber offnum;\n\tHeapTupleData tuple;\n\t\tif (!ItemIdIsUsed(itemid) || ItemIdIsDead(itemid) ||\n\t\ttuple.t_tableOid = RelationRelationId;\n{", "partial_line": "relinf", "completion": "relinfo->reloid = classForm->oid; <|endoftext|>"}
{"context": "\tErrorData  *newedata;\n\tif (edata->backtrace)\n\t\tnewedata->schema_name = pstrdup(edata->schema_name);\n\t\tnewedata->datatype_name = pstrdup(edata->datatype_name);\n\t\tnewedata->detail = pstrdup(newedata->detail);", "partial_line": "if (newedata->", "completion": "if (newedata->backtrace) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\tif (WALK(jt->on_error))\n\t\tcase T_JsonTableColumn:\n\t\tcase T_NullTest:", "partial_line": "return W", "completion": "return WALK(((BooleanTest *) node)->arg); <|endoftext|>"}
{"context": "#line 49 \"thread_implicit.pgc\"\n    }\n    }\n  WaitForMultipleObjects(nthreads, threads, TRUE, INFINITE);\n#line 80 \"thread_implicit.pgc\"", "partial_line": "printf(\"Succes", "completion": "printf(\"Success.\\n\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\tif (predicate_refuted_by_recurse(citem, predicate,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\t\t\tresult = true;", "partial_line": "wea", "completion": "weak)) <|endoftext|>"}
{"context": "\tchar\t   *dst1 = malloc(dst1len);\n\t\texit(1);\n\t{\n\t}\n\t{", "partial_line": "ex", "completion": "exit(1); <|endoftext|>"}
{"context": "\t\t\t Matches(\"SET\", \"SESSION\", \"CHARACTERISTICS\", \"AS\", \"TRANSACTION\", \"ISOLATION\"))\n\telse if (Matches(\"SET|BEGIN|START\", \"TRANSACTION|WORK\", \"ISOLATION\", \"LEVEL\", \"READ\") ||\n\t\tCOMPLETE_WITH(\"READ\");\n\telse if (TailMatches(\"SET\", MatchAny, \"TO|=\") &&\n\t\t\t\t\t\t  \"YMD\", \"DMY\", \"MDY\",", "partial_line": "else if (TailMatches(\"search_p", "completion": "else if (TailMatches(\"search_path\", \"TO|=\")) <|endoftext|>"}
{"context": "\t\treturn NULL;\n\tif ((flags & MCXT_ALLOC_ZERO) != 0)\nHandleLogMemoryContextInterrupt(void)\nvoid\n\tLogMemoryContextPending = false;", "partial_line": "(errhidestmt(", "completion": "(errhidestmt(true), <|endoftext|>"}
{"context": "\tSelectivity sel;\n\tfor (i = 0; i < mcv->nitems; i++)\n\t\t*totalsel += mcv->items[i].frequency;\n\t\t}\n\t\t\t\t\t\t  Selectivity *basesel, Selectivity *overlap_mcvsel,", "partial_line": "if (*or_m", "completion": "if (*or_matches == NULL) <|endoftext|>"}
{"context": "\t\t\t\tread_dumpall_filters(optarg, &database_exclude_patterns);\n\t\t\tdefault:\n\t\t}\n\tif (optind < argc)\n\t{", "partial_line": "if (database_", "completion": "if (database_exclude_patterns.head != NULL && <|endoftext|>"}
{"context": "\t\tif (IsTransactionState())\n\tif (!*extra)\n\tOid\t\t\troleid;\n\tif (InitializingParallelWorker)\n\t\t\t\tereport(NOTICE,", "partial_line": "if (source =", "completion": "if (source == PGC_S_TEST) <|endoftext|>"}
{"context": "#include \"access/skey.h\"\n#define\t\tPROCNUM_CONTAINS\t\t13\t\ntypedef struct InclusionOpaque\n\tFmgrInfo\textra_procinfos[INCLUSION_MAX_PROCNUMS];\n\t\t\t\t\t\t\t\t\t\tuint16 procnum, bool missing_ok);", "partial_line": "brin_inc", "completion": "brin_inclusion_opcinfo(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tOid\t\t\tfuncid = PG_GETARG_OID(0);\n\tint32\t\tnth_arg = PG_GETARG_INT32(1);\n\t\tPG_RETURN_NULL();\n\t{\n\t\tReleaseSysCache(proctup);", "partial_line": "nth_inputa", "completion": "nth_inputarg = 0; <|endoftext|>"}
{"context": "}\n\t{\n\treferenced.objectSubId = 0;\n\treferenced.classId = TSParserRelationId;\n\treferenced.objectId = cfg->cfgparser;", "partial_line": "add_exact_object_addre", "completion": "add_exact_object_address(&referenced, addrs); <|endoftext|>"}
{"context": "\t\tObjectAddress myself,\n\t\tif ((flags & INDEX_CREATE_ADD_CONSTRAINT) != 0)\n\t\t\t\tconstraintType = CONSTRAINT_PRIMARY;\n\t\t\t\telog(ERROR, \"constraint must be PRIMARY, UNIQUE or EXCLUDE\");\n\t\t\t\tconstraintType = 0; ", "partial_line": "have_simp", "completion": "have_simple_col = true; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\ttrv = NULL;\n\t\t}\n\terror_context_stack = pl_error_context.previous;\n\treturn retval;", "partial_line": "plperl_event_trigger_handler(PG_", "completion": "plperl_event_trigger_handler(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t}\n\t\telse if (rte->alias)\n\t\telse if (rte->rtekind == RTE_RELATION)\n\t\t\t\t\t\t\t\t\t\t\t\t   refname,\n\t\t\t\t\t\t\t\t\t\t\t\t  refnamelen - 1);", "partial_line": "refna", "completion": "refname = modname; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"money out of range\")));\ncash_mul_float8(Cash c, float8 f)\n\tif (unlikely(isnan(res) || !FLOAT8_FITS_IN_INT64(res)))\ncash_div_float8(Cash c, float8 f)\n{", "partial_line": "(errcode(", "completion": "(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE), <|endoftext|>"}
{"context": "#define SH_DECLARE\n\t\t\t\tcollation,\n\tList\t   *opfamilies;\n\tcollation = ((OpExpr *) clause)->inputcollid;\n\titem2 = canonicalize_ec_expression(item2,", "partial_line": "if (equal(item", "completion": "if (equal(item1, item2)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   copyObject(aexpr), copyObject(cexpr),\n\t\t\t\t\t\t\t\t\t\t\t   a->location));\n\t\t\tsub2 = (Node *) makeBoolExpr(AND_EXPR, args, a->location);\n\t\t\t\t\t\t\t\t\t\t\t   a->location));\n\t\t\tbreak;", "partial_line": "resu", "completion": "result = NULL; <|endoftext|>"}
{"context": "}\nDatum\n\t\tstats->attstattarget = default_statistics_target;\n\tif (*f1 < *f2)\nstatic int", "partial_line": "int\t\t\tempty_cn", "completion": "int\t\t\tempty_cnt = 0; <|endoftext|>"}
{"context": "\t\t\t\terrorConflictingDefElem(defel, pstate);\n\t\t\t*need_seq_rewrite = true;\n\t\t\tincrement_by = defel;\n\t\t\t*need_seq_rewrite = true;\n\t\telse if (strcmp(defel->defname, \"start\") == 0)", "partial_line": "start_va", "completion": "start_value = defel; <|endoftext|>"}
{"context": "\t\t\tif (GinPageHasFullRow(page))\n\t\t\t{\n\t\t\t\t{\n\t\t\tbreak;\n\t\t\t\t\t\t  Datum *datum, GinNullCategory *category,", "partial_line": "else i", "completion": "else if (cmp > 0) <|endoftext|>"}
{"context": "\tif (dim < ndim - 1)\n\t\t\t\titemvalue = fetch_att(dataptr, elm->typbyval, elm->typlen);\n\t\t\t\tPyList_SetItem(list, i, elm->func(elm, itemvalue));\n\t\t}\n\t\t*bitmask_p = bitmask;", "partial_line": "sta", "completion": "static PyObject * <|endoftext|>"}
{"context": "\t\t\tint\t\t\tn_newer_snapshots;\n\t\t\t\t\t\t\t\t\t\t\t\t\t| PROC_IN_SAFE_IC,\n\t\t\t\t\tcontinue;\t\n\t\t\t\t\t\tbreak;\n\t\t\tbool check_rights,", "partial_line": "Oid", "completion": "Oid\t\t\ttablespaceId; <|endoftext|>"}
{"context": "\tXLogRegisterData(&dummy, sizeof(dummy));\n\txlrec_reuse.block = blkno;\nXLogRecPtr\n\t\t\t   IndexTuple *itup, int ituplen,\n\t\t\t   Buffer leftchildbuf)", "partial_line": "XLogRegisterBufData(0, itup[i], IndexTu", "completion": "XLogRegisterBufData(0, itup[i], IndexTupleSize(itup[i])); <|endoftext|>"}
{"context": "\t\tREAD_NODE_FIELD(name);\n\t{\n\t\telog(ERROR, \"unrecognized A_Expr kind: \\\"%.*s\\\"\", length, token);\n\tREAD_NODE_FIELD(lexpr);\nstatic ExtensibleNode *", "partial_line": "Exten", "completion": "ExtensibleNode *local_node; <|endoftext|>"}
{"context": "\tpathnode->path.startup_cost = subpath->startup_cost + cpu_tuple_cost;\n\tint\t\t\tnumCols;\n\tAssert(subpath->parent == rel);\n\tpathnode->path.pathkeys = NIL;\n\t\t\t\t\t\t\t\t\t\t\t\t   rel->relid);", "partial_line": "sub_tlist_", "completion": "sub_tlist_colnos, <|endoftext|>"}
{"context": "#ifdef __cplusplus\n{ 2, s_0_3, 0, 2, 0},\n{ 2, s_0_8, 0, 4, 0},\n};", "partial_line": "static const symbol", "completion": "static const symbol s_1_1[1] = { 'I' }; <|endoftext|>"}
{"context": "\tfloat8\t\targ1 = PG_GETARG_FLOAT8(0);\n\terrno = 0;\n\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\ndsin(PG_FUNCTION_ARGS)\n\tresult = sin(arg1);", "partial_line": "if (errno", "completion": "if (errno != 0 || isinf(arg1)) <|endoftext|>"}
{"context": "\tAttrNumber\tcol;\n\t\tconst char *col_update_detail;\n}\n{\n\tRelation\trel;", "partial_line": "relation_close(rel, Ac", "completion": "relation_close(rel, AccessShareLock); <|endoftext|>"}
{"context": "#endif\nbtboolcmp(PG_FUNCTION_ARGS)\n\tPG_RETURN_INT32((int32) a - (int32) b);", "partial_line": "st", "completion": "static Datum <|endoftext|>"}
{"context": "\tif (output2 >= 10)\n\t}\n\t\tif (nexp & 8)\n\t\t}\n\t\tif (nexp & 2)", "partial_line": "if (n", "completion": "if (nexp & 1) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t errmsg(\"could not determine actual return type \"\n\t\t\tif (typeStruct->typtype == TYPTYPE_PSEUDO)\n\t\t\tfunction->fn_rettyplen = typeStruct->typlen;\n\t\t\t\t\t\t\t\t\t\t\t  true);\n\t\t\tfunction->fn_rettype = InvalidOid;", "partial_line": "function->fn_re", "completion": "function->fn_retistuple = true; <|endoftext|>"}
{"context": "\tif (sjinfo && sjinfo->ojrelid != 0)\n\twhile ((i = bms_next_member(matching_ecs, i)) >= 0)\n\t\tif (!ec->ec_broken)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ec,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ec,", "partial_line": "in", "completion": "inner_rel); <|endoftext|>"}
{"context": "\tDatum\t\td = *((const Datum *) key);\n\treturn DatumGetUInt32(h);\n}\n{\nstatic int", "partial_line": "const TrackItem *const *t1 = (const", "completion": "const TrackItem *const *t1 = (const TrackItem *const *) e1; <|endoftext|>"}
{"context": "\t}\n\tint\t\t   *size = (int *) PG_GETARG_POINTER(1);\n\tTSQuerySign sign;\nDatum\n{", "partial_line": "static", "completion": "static int <|endoftext|>"}
{"context": "\t\tif (Lpos < Rpos)\n\t\t\t\toutput_pos = Rpos;\n\t\treturn TS_YES;\n\tCHECK_FOR_INTERRUPTS();\n\t\tcase OP_NOT:", "partial_line": "retur", "completion": "return TS_YES; <|endoftext|>"}
{"context": "\t\t\tchar\t\tendfname[MAXFNAMELEN];\n\t\tforeach(lc, walFileList)\n\t\t\tif (fstat(fd, &statbuf) != 0)\n\t\t\tif (statbuf.st_size != wal_segment_size)\n\t\t\t\t\t\t errmsg(\"unexpected WAL file size \\\"%s\\\"\", walFileName)));", "partial_line": "bbsink_", "completion": "bbsink_archive_contents(sink, cnt); <|endoftext|>"}
{"context": "    char       *t_ptr;\t\t\n\tif (*buf_ptr == '-' || *buf_ptr == '*' ||\n\t    (*buf_ptr == '\\n' && !format_block_comments)) {\n\t    break_delim = false;\n\t    int target_col;", "partial_line": "if (ps", "completion": "if (ps.box_com) { <|endoftext|>"}
{"context": "\tPGresult   *res;\n\tAssert(conn != NULL);\n\t\t\t\t\t \"SHOW wal_segment_size\", PQerrorMessage(conn));\n\t\tpg_log_error(ngettext(\"remote server reported invalid WAL segment size (%d byte)\",\n\treturn true;", "partial_line": "if (PQresult", "completion": "if (PQresultStatus(res) != PGRES_TUPLES_OK) <|endoftext|>"}
{"context": "#include \"lib/dshash.h\"\n#include \"port/pg_bitutils.h\"\n#include \"utils/lsyscache.h\"\n#define TCFLAGS_CHECKED_GT_OPR\t\t\t\t0x000020\n#define TCFLAGS_HAVE_FIELD_EXTENDED_HASHING\t0x040000", "partial_line": "(~(TCFLAGS_H", "completion": "(~(TCFLAGS_HAVE_PG_TYPE_DATA | \\ <|endoftext|>"}
{"context": "\tLocalBufHash = hash_create(\"Local Buffer Lookup Table\",\n\tif (LocalRefCount[bufid] == 0)\n\t\t{\n\t\t\tbuf_state += BUF_USAGECOUNT_ONE;\n\tLocalRefCount[bufid]++;", "partial_line": "UnpinLocalBu", "completion": "UnpinLocalBufferNoOwner(buffer); <|endoftext|>"}
{"context": "\tint64\t\tsize;\n\t\t{\n\t\t\tif (unit->round)\n\t\t\tbreak;\n\t}", "partial_line": "return DatumGetCString(DirectFunctio", "completion": "return DatumGetCString(DirectFunctionCall1(numeric_out, d)); <|endoftext|>"}
{"context": "static int\n\t\tif (tuple == NULL || tuple->tupstate != tupstate)\n\tinnerTuple = (SpGistInnerTuple) PageGetItem(parent->page,\n\t\t\t SPPageDesc *current, SPPageDesc *parent, bool isNulls, bool isNew)\n\t\tSGLT_SET_NEXTOFFSET(leafTuple, InvalidOffsetNumber);", "partial_line": "xlrec.no", "completion": "xlrec.nodeI = parent->node; <|endoftext|>"}
{"context": "\t\t\tcase IS_NULL:\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t}\n\t\tselec = (nulltesttype == IS_NULL) ? 0.0 : 1.0;", "partial_line": "case IS", "completion": "case IS_NULL: <|endoftext|>"}
{"context": "static void XmlTableSetDocument(struct TableFuncScanState *state, Datum value);\nstatic void XmlTableSetNamespace(struct TableFuncScanState *state, const char *name,\n\t\t\t\t\t\t\t  Oid typid, int32 typmod, bool *isnull);\nstatic void XmlTableDestroyOpaque(struct TableFuncScanState *state);\n\t.SetRowFilter = XmlTableSetRowFilter,", "partial_line": "errmsg(\"invalid encoding n", "completion": "errmsg(\"invalid encoding name \\\"%s\\\"\", <|endoftext|>"}
{"context": "\t\t\tgoto oom_error;\n\t{\n\t\tif (strcmp(conn->gssencmode, \"disable\") != 0 &&\n\t\t\tstrcmp(conn->gssencmode, \"prefer\") != 0 &&\n\t\t{", "partial_line": "conn->target_s", "completion": "conn->target_server_type = SERVER_TYPE_READ_ONLY; <|endoftext|>"}
{"context": "\tResourceOwnerRememberFile(CurrentResourceOwner, file);\n\t\tereport(ERROR,\n\tvfdP->fd = BasicOpenFilePerm(fileName, fileFlags, fileMode);\n\tvfdP->fileName = fnamecopy;\n\tvfdP->fdstate = 0x0;", "partial_line": "Insert(", "completion": "Insert(file); <|endoftext|>"}
{"context": "{\nCheckIndexCompatible(Oid oldId,\n\tForm_pg_am\taccessMethodForm;\n\tbool\t\tret = true;\n\t\t\t\t errmsg(\"access method \\\"%s\\\" does not exist\",", "partial_line": "accessMethodNa", "completion": "accessMethodName))); <|endoftext|>"}
{"context": "\t\tstatus = exec_command_copyright(scan_state, active_branch);\n\t\tstatus = exec_command_crosstabview(scan_state, active_branch);\n\telse if (strcmp(cmd, \"e\") == 0 || strcmp(cmd, \"edit\") == 0)\n\telse if (strcmp(cmd, \"elif\") == 0)\n\t\tstatus = exec_command_elif(scan_state, cstack, query_buf);", "partial_line": "else if (strc", "completion": "else if (strcmp(cmd, \"else\") == 0) <|endoftext|>"}
{"context": "    z->c = z->lb;\n        if (ret < 0) return ret;\n    return 1;\n}\n            z->c = c2;", "partial_line": "z-", "completion": "z->c = c1; <|endoftext|>"}
{"context": "\t}\nstruct varlena *\n{\n{\n\tif (!flinfo || !flinfo->fn_expr)", "partial_line": "args = ((Func", "completion": "args = ((FuncExpr *) expr)->args; <|endoftext|>"}
{"context": "\t.viscondition = \"pg_catalog.pg_ts_template_is_visible(t.oid)\",\n\t.viscondition = \"pg_catalog.pg_table_is_visible(c.oid)\",\n\t.viscondition = \"pg_catalog.pg_table_is_visible(c.oid)\",\n\t.catname = \"pg_catalog.pg_class c\",\n\t.selcondition = \"c.relkind IN (\" CppAsString2(RELKIND_PARTITIONED_TABLE)", "partial_line": ".namespace = \"c.relna", "completion": ".namespace = \"c.relnamespace\", <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_QUERY(Query_for_list_of_schemas);\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_partitioned_indexes);\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_sequences);\n\telse if (TailMatchesCS(\"\\\\dx*\"))\n\telse if (TailMatchesCS(\"\\\\dX*\"))", "partial_line": "COMPLETE_WI", "completion": "COMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_matviews); <|endoftext|>"}
{"context": "#include \"common/string.h\"\n\tif (!s)\n\tfclose(t);", "partial_line": "ecpg_filter_stderr(const", "completion": "ecpg_filter_stderr(const char *resultfile, const char *tmpfile) <|endoftext|>"}
{"context": "\tfloat8\t\targ2 = PG_GETARG_FLOAT8(1);\n\tPG_RETURN_BOOL(float8_ge(arg1, arg2));\n}\n\tfloat8\t\targ1 = DatumGetFloat8(x);\n{", "partial_line": "float8\t\tbase =", "completion": "float8\t\tbase = PG_GETARG_FLOAT8(1); <|endoftext|>"}
{"context": "init_spawned_worker_win32(WorkerInfo *wi)\n\tParallelSlot *slot = wi->slot;\n\tif (AH->public.numWorkers == 1)\n\tgetLocalPQExpBuffer = getThreadLocalPQExpBuffer;\n\tfor (i = 0; i < pstate->numWorkers; i++)", "partial_line": "#ifdef", "completion": "#ifdef WIN32 <|endoftext|>"}
{"context": "#include \"catalog/pg_proc.h\"\n#include \"plpy_subxactobject.h\"", "partial_line": "#include \"utils", "completion": "#include \"utils/guc.h\" <|endoftext|>"}
{"context": "\treturn dt;\ntimestamp_cmp_internal(Timestamp dt1, Timestamp dt2)\n\treturn (dt1 < dt2) ? -1 : ((dt1 > dt2) ? 1 : 0);\n}\n\tPG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) != 0);", "partial_line": "timestamp_gt", "completion": "timestamp_gt(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "#define WALSUMMARY_NHEXCHARS\t40\n\tPGAlignedXLogBlock buffer;\n\tpage->xlp_tli = ControlFile.checkPointCopy.ThisTimeLineID;\n\trecord->xl_tot_len = SizeOfXLogRecord + SizeOfXLogRecordDataHeaderShort + sizeof(CheckPoint);\n\t\t   sizeof(CheckPoint));", "partial_line": "XLogFilePath(path,", "completion": "XLogFilePath(path, ControlFile.checkPointCopy.ThisTimeLineID, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  obj,\n\tMemoryContext old_cxt;\n\tif (!(rsi->allowedModes & SFRM_Materialize))\n\t\tereport(ERROR,\n\t{", "partial_line": "fcinfo->flinfo->fn_e", "completion": "fcinfo->flinfo->fn_extra = cache = <|endoftext|>"}
{"context": "\tAssert(!TTS_EMPTY(slot));\n\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\nstatic bool\n\tAssert(!TTS_EMPTY(slot));\nstatic void", "partial_line": "if (TTS_SH", "completion": "if (TTS_SHOULDFREE(slot)) <|endoftext|>"}
{"context": "\tHeapTuple\ttup;\n\tObjectAddress address;\n\tForm_pg_publication pubform;\n{\n\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_UNDEFIN", "completion": "(errcode(ERRCODE_UNDEFINED_OBJECT), <|endoftext|>"}
{"context": "\t\t\t\tnumer_lim = t + 1;\n\t\t\tif (exp(log(y) / n) <= (t + X) / t)\n\tpg_prng_seed(randstate, (uint64) seed);\nstatic bool oldrs_initialized = false;\ndouble", "partial_line": "oldrs_initia", "completion": "oldrs_initialized = true; <|endoftext|>"}
{"context": "\t\tAssert(outer_merged_index == -1);\n\t\tAssert(inner_merged_index == -1);\n{\n\tAssert(map->merged_indexes[index] == -1);\n\treturn merged_index;", "partial_line": "fix_merged_indexes(P", "completion": "fix_merged_indexes(PartitionMap *outer_map, PartitionMap *inner_map, <|endoftext|>"}
{"context": "\t\t\t}\n\t\t}\nestimate_num_groups(PlannerInfo *root, List *groupExprs, double input_rows,\n\t\tList\t   *varshere;\n\t\t\tsrf_multiplier = this_srf_multiplier;", "partial_line": "numdistinct *", "completion": "numdistinct *= 2.0; <|endoftext|>"}
{"context": "\t\t\tForm_pg_attribute attr = TupleDescAttr(pertrans->sortdesc, 0);\n\t\t\t\t\t\t\t\t\t  pertrans->sortCollations[0],\n\t\t\t\t\t\t\t\t\t  pertrans->sortNullsFirst[0],\n\t\t\t\t\t\t\t\t\t  work_mem, NULL, TUPLESORT_NONE);\n\t\t\t\t\t\t\t\t\t pertrans->sortColIdx,", "partial_line": "pergroupstate->noTransValue = pertrans-", "completion": "pergroupstate->noTransValue = pertrans->initValueIsNull; <|endoftext|>"}
{"context": "\t\t\tdefault:\n\t\t\t\tif (missing_ok)\n\t\t\t\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t\t\t\t\tcase OBJECT_AGGREGATE:\n\t\t\t\t\t\telse if (argcount == 0)", "partial_line": "(errcode(ERRCODE_UNDEFINE", "completion": "(errcode(ERRCODE_UNDEFINED_FUNCTION), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   s->curTransactionOwner,\nbool\n\t\t\treturn 'I';\t\t\t\n\t\tcase TBLOCK_SUBBEGIN:\n\t}", "partial_line": "IsSubTransactio", "completion": "IsSubTransaction(void) <|endoftext|>"}
{"context": "\t\tpfree(myState->buf.data);\n\t\t Form_pg_attribute attributeP,\n\t\t   attributeId,\n\t\t   (unsigned int) (attributeP->atttypid),\n{", "partial_line": "int\t\t\tnatts", "completion": "int\t\t\tnatts = typeinfo->natts; <|endoftext|>"}
{"context": "#include \"utils/syscache.h\"\n\tRelation\tpg_enum;\n\toids = (Oid *) palloc(num_elems * sizeof(Oid));", "partial_line": "for (elemno =", "completion": "for (elemno = 0; elemno < num_elems; elemno++) <|endoftext|>"}
{"context": "\tif (decoded_len < 0)\n\tdecoded_len = pg_b64_decode(serverkey_str, strlen(serverkey_str),\n\tmemset(server_key, 0, SCRAM_MAX_KEY_LEN);\n}\n\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),", "partial_line": "attr, sanitize_", "completion": "attr, sanitize_char(*begin)))); <|endoftext|>"}
{"context": "\t\t\tnew_slot = execute_attr_map_slot(relentry->attrmap, new_slot, slot);\n\t\t}\n\tif (txndata && !txndata->sent_begin_txn)\n\t\tcase REORDER_BUFFER_CHANGE_INSERT:\n\t\t\t\t\t\t\t\t\trelentry->include_gencols_type);", "partial_line": "relentry->include_g", "completion": "relentry->include_gencols_type); <|endoftext|>"}
{"context": "\t\ti = 1;\n\t\t{\n\t\t\t\t\t\t\t   exprTypmod(varnode),\n\t\t\tTupleDescInitEntryCollation(tupleDesc, i,\n\t\tcase RTE_SUBQUERY:", "partial_line": "rte->eref", "completion": "rte->eref->aliasname, attnum); <|endoftext|>"}
{"context": "        continue;\n    }\n    if (z->c - 1 <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((33314 >> (z->p[z->c - 1] & 0x1f)) & 1)) return 0;\n    if (!among_var) return 0;\n                if (ret < 0) return ret;", "partial_line": "in", "completion": "int among_var; <|endoftext|>"}
{"context": "\t{\"sec\", UNITS, DTK_SECOND},\n\t{\"useconds\", UNITS, DTK_MICROSEC},\t\n\t{\"years\", UNITS, DTK_YEAR}, \nstatic const unsigned int szdeltatktbl = lengthof(deltatktbl);\nchar\t   *days[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", NULL};", "partial_line": "const datetkn *las", "completion": "const datetkn *last = base + nel - 1, <|endoftext|>"}
{"context": "\t\t\tclosesocket(sock);\n\t\t}\n\t\t\t\t\t\t\tserver)));\n\t\t\t\t\t\t\t\t(struct sockaddr *) &remoteaddr, &addrsize);\n\t\tif (packetlength < 0)", "partial_line": "closesocke", "completion": "closesocket(sock); <|endoftext|>"}
{"context": "\t\t(ctx->callbacks.stream_prepare_cb != NULL) ||\n\tctx->update_progress = update_progress;\n\tCheckLogicalDecodingRequirements();\n\tif (slot == NULL)\n\tif (slot->data.database != MyDatabaseId)", "partial_line": "ReplicationSlotsComputeRe", "completion": "ReplicationSlotsComputeRequiredXmin(true); <|endoftext|>"}
{"context": "\t\telog(ERROR, \"cache lookup failed for type %u\", typid);\n\ttypform = (Form_pg_type) GETSTRUCT(typetup);\n\tHeapTuple\ttp;\n\tchar\t   *typname;\n\tReleaseSysCache(tp);", "partial_line": "return re", "completion": "return result; <|endoftext|>"}
{"context": "\tint\t\t\tntups,\n\t\t\t\t\t\t \"WHERE deptype != 'p' AND deptype != 'e'\\n\");\n\t\t\t\t\t\t \"classid = 'pg_amop'::regclass AND objid = o.oid \"\n\t\tobjId.oid = atooid(PQgetvalue(res, i, i_objid));\n\t\trefobjId.tableoid = atooid(PQgetvalue(res, i, i_refclassid));", "partial_line": "if (refdob", "completion": "if (refdobj == NULL) <|endoftext|>"}
{"context": "\treturn pqGetlineAsync3(conn, buffer, bufsize);\nPQputnbytes(PGconn *conn, const char *buffer, int nbytes)\n\telse\n{\nPGresult *", "partial_line": "i", "completion": "int fnid, <|endoftext|>"}
{"context": "\t\t\t\twco->kind = kind;\n\t\t\t\twco->cascaded = false;\n\t\t\t\t*withCheckOptions = list_append_unique(*withCheckOptions, wco);\n\telse\n\t\treturn true;", "partial_line": "if (has_privs_of", "completion": "if (has_privs_of_role(user_id, roles[i])) <|endoftext|>"}
{"context": "\tplpgsql_extra_errors = *((int *) extra);\n\t\t\t\t\t\t\t NULL,\n\t\t\t\t\t\t\t PLPGSQL_RESOLVE_ERROR,\n\t\t\t\t\t\t\t true,\n\t\t\t\t\t\t\t   plpgsql_extra_checks_check_hook,", "partial_line": "plpgsql_extra_checks_c", "completion": "plpgsql_extra_checks_check_hook, <|endoftext|>"}
{"context": "\tAssert(MemoryContextIsValid(context));\n}\n\tAssert(MemoryContextIsValid(context));\n\tfor (;;)\n\t\twhile (curr->firstchild != NULL)", "partial_line": "curr =", "completion": "curr = curr->firstchild; <|endoftext|>"}
{"context": "\t\tcase CMD_SELECT:\n\t\t\treturn UtilityReturnsTuples(parsetree->utilityStmt);\n\t}\n\treturn false;\t\t\t\t\n#endif", "partial_line": "UtilityContain", "completion": "UtilityContainsQuery(Node *parsetree) <|endoftext|>"}
{"context": "\tDatum\t\tvalues[Natts_pg_am];\n\tif (OidIsValid(amoid))\n\tvalues[Anum_pg_am_oid - 1] = ObjectIdGetDatum(amoid);\n\treferenced.classId = ProcedureRelationId;\n\trecordDependencyOn(&myself, &referenced, DEPENDENCY_NORMAL);", "partial_line": "retu", "completion": "return myself; <|endoftext|>"}
{"context": "\t\t\t*next_scan_page = btscan->btps_nextScanPage;\n\t\t\texit_loop = true;\n\t\t}\n}\n_bt_parallel_release(IndexScanDesc scan, BlockNumber next_scan_page,", "partial_line": "LWLockRele", "completion": "LWLockRelease(&btscan->btps_lock); <|endoftext|>"}
{"context": "\t\tcase T_Limit:\n\t\t\treturn ExecSupportsBackwardScan(outerPlan(node));\n\tbool\t\tresult;\n\tForm_pg_class idxrelrec;\n\tpfree(amroutine);", "partial_line": "case", "completion": "case T_Material: <|endoftext|>"}
{"context": "\t\t{\n\t\t\twhile ((Pointer) next < endptr &&\n\t\t\t{\n\t}\n\t\tmemcpy(result, tmp, (*nitems) * sizeof(ItemPointerData));", "partial_line": "GinPostingLi", "completion": "GinPostingList *segment = GinDataLeafPageGetPostingList(page); <|endoftext|>"}
{"context": "\t\t\tidlen = pg_mbcliplen(ident, idlen,\n\t\tmemcxt_info[curr_id].ident = InvalidDsaPointer;\n\tmeminfo = (MemoryStatsEntry *) dsa_get_address(area, prev_dsa_pointer);\n\tfor (int i = 0; i < total_stats; i++)\n\t\t\tdsa_free(area, meminfo[i].name);", "partial_line": "if (DsaPointerIsValid(meminf", "completion": "if (DsaPointerIsValid(meminfo[i].ident)) <|endoftext|>"}
{"context": "\t{\n\t\t\trdatatype = TEXTOID;\n\t\t\tbreak;\n\t\tcase BPCHAROID:\n\t\t\tbreak;", "partial_line": "def", "completion": "default: <|endoftext|>"}
{"context": "{ 3, s_2_1754, 1746, 113, 0},\n{ 5, s_2_1757, 1754, 112, 0},\n{ 8, s_2_1782, 1780, 106, 0},\n{ 4, s_2_1818, 1813, 39, 0},\n{ 6, s_2_1820, 1813, 85, 0},", "partial_line": "{ 5, s_2_1843,", "completion": "{ 5, s_2_1843, 1813, 79, 0}, <|endoftext|>"}
{"context": "\t\tExtensionVersionInfo *evi = (ExtensionVersionInfo *) lfirst(lc);\n\t\tbool\t\tnulls[8];\n\t\tcontrol = read_extension_aux_control_file(pcontrol, evi->name);\n\t\tvalues[3] = BoolGetDatum(control->trusted);\n\t\telse", "partial_line": "if (evi2", "completion": "if (evi2->installable) <|endoftext|>"}
{"context": "{ 6, s_2_1647, 1645, 100, 0},\n{ 9, s_2_1673, -1, 110, 0},\n{ 9, s_2_1674, -1, 111, 0},\n{ 5, s_2_1682, 1678, 97, 0},\n{ 5, s_2_1698, -1, 92, 0},", "partial_line": "{ 7,", "completion": "{ 7, s_2_1732, 1731, 121, 0}, <|endoftext|>"}
{"context": "\tif (r == SIGNAL_BACKEND_NOPERMISSION)\n\t\t\t\t\t\t   \"pg_signal_backend\")));\n\tPG_RETURN_BOOL(r == SIGNAL_BACKEND_SUCCESS);\n\t\t\t\treturn true;\n\t\t\t\t\t\t(errcode(ERRCODE_INTERNAL_ERROR),", "partial_line": "remainingt", "completion": "remainingtime -= waittime; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t}\n\t\t\t\t\t&& (!SxactIsCommitted(t0)\n\t\t\t\t\t&& (!SxactIsReadOnly(t0)\n\t\t{", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tinitHyperLogLog(&sss->full_card, 10);\n\t}\n\t\tpfree(arg2);\n}\n\t\t\t\tlen2,", "partial_line": "a1p = VARDATA_", "completion": "a1p = VARDATA_ANY(arg1); <|endoftext|>"}
{"context": "\t\t\t\t\t\tFAIL_AT_CHAR_END(JSON_UNICODE_LOW_SURROGATE);\n\t\t\t\t\tif (lex->input_encoding == PG_UTF8)\n\t\t\t\t{\n\t\t\t\t\tcase 'n':\n\t\t{", "partial_line": "const char", "completion": "const char *p = s; <|endoftext|>"}
{"context": "\tsnprintf(activity + len, MAX_AUTOVAC_ACTIV_LEN - len,\n\tint\t\t\ti;\n\tbool\t\tresult = false;\n\t\tworkitem->avw_active = false;\nvoid", "partial_line": "ereport(WAR", "completion": "ereport(WARNING, <|endoftext|>"}
{"context": "\tmcelem_dist = calc_distr(numbers, nmcelem, unique_nitems, rest);\n\tfor (i = 0; i <= unique_nitems; i++)\n\t\t\tselec += hist_part[i] * mult * dist[i] / mcelem_dist[i];\n\t}\n\tpfree(mcelem_dist);", "partial_line": "pfree(hist_", "completion": "pfree(hist_part); <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"tmplnamespace, tmplinit::oid, tmpllexize::oid \"\n\tntups = PQntuples(res);\n\t{\n\t\ttmplinfo[i].dobj.catId.oid = atooid(PQgetvalue(res, i, i_oid));\n\t\ttmplinfo[i].tmpllexize = atooid(PQgetvalue(res, i, i_tmpllexize));", "partial_line": "int", "completion": "int\t\t\tntups; <|endoftext|>"}
{"context": "\t\t\t\t\t\tchar\t   *dummy_name = palloc(32);\n\t\t\t\t\t\tAssert(dpns->plan && IsA(dpns->plan, Result));\n\t\t\t\t\t\treturn dummy_name;\n\t\t\t\t\tif (!tle)\n\t\t\t\t\t\t\t\t\t\t\t\t\tlevelsup, context);", "partial_line": "re", "completion": "return result; <|endoftext|>"}
{"context": "\t\told_context = MemoryContextSwitchTo(agg_context);\n\t\tMemoryContextSwitchTo(old_context);\n{\n#endif\n\tfree_var(&tmp_var);", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "#include \"utils/ps_status.h\"\n\t\t\t\t\t\t\t\t\t   XLogRecPtr *applyPtr,\nvoid\n\t}\n\t}", "partial_line": "MyPr", "completion": "MyProc->waitLSN = lsn; <|endoftext|>"}
{"context": "\tpfree(buf.data);\n\tRmgrData\trmgr = GetRmgr(XLogRecGetRmid(record));\n\tconst char *id;\n\t\tappendStringInfo(buf, \"UNKNOWN (%X): \", info & ~XLR_INFO_MASK);\nstatic void", "partial_line": "if (!XLogRecGe", "completion": "if (!XLogRecGetBlockTagExtended(record, block_id, <|endoftext|>"}
{"context": "\t\t}\n\t\tread_stream_look_ahead(stream);\n\t\tint16\t\tio_index = stream->oldest_io_index;\n\t\t\t   &stream->buffers[oldest_buffer_index]);\n\t\t\tstream->oldest_io_index = 0;", "partial_line": "stream->ios[io_index].op.blocknu", "completion": "stream->ios[io_index].op.blocknum == stream->seq_until_processed) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\tjointype,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  outerrel,\n\t\t\t\t\t\t\t\t\t\t\t   bms_difference(root->all_baserels,\n\textra.param_source_rels = bms_add_members(extra.param_source_rels,\n#endif", "partial_line": "joinrel->fdwrout", "completion": "joinrel->fdwroutine->GetForeignJoinPaths) <|endoftext|>"}
{"context": "\tpfree(xlogreader->private_data);\n\t\t\t\t XLOGDIR \"/summaries/temp.summary\");\n\t\tereport(DEBUG1,\n\t\t\t\t\t\t\t\tLSN_FORMAT_ARGS(summary_end_lsn)));\n\t}", "partial_line": "xlrec = (xl_d", "completion": "xlrec = (xl_dbase_create_wal_log_rec *) XLogRecGetData(xlogreader); <|endoftext|>"}
{"context": "\t{\n\t\tfullpages = bytesleft / UsableBytesInPage;\n\tfullsegs = bytepos / UsableBytesInSegment;\n\t\t\tseg_offset += fullpages * XLOG_BLCKSZ + bytesleft;\n\t\tif (offset > 0)", "partial_line": "AdvanceXLInser", "completion": "AdvanceXLInsertBuffer(XLogRecPtr upto, TimeLineID tli, bool opportunistic) <|endoftext|>"}
{"context": "#include <netinet/in.h>\n#endif\nstatic char *inet_cidr_ntop_ipv6(const u_char *src, int bits,", "partial_line": "pg_inet_cidr_ntop(int", "completion": "pg_inet_cidr_ntop(int af, const void *src, int bits, char *dst, size_t size) <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\tereport(LOG,\n\t\t}\n\t\t\tif (setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY,\n\t\t\t\t\t\t   (char *) &one, sizeof(one)) == -1)", "partial_line": "ereport(", "completion": "ereport(LOG, <|endoftext|>"}
{"context": "\t\t!castNode(CallContext, fcinfo->context)->atomic;\n\terror_context_stack = &pl_error_context;\n\trsi = (ReturnSetInfo *) fcinfo->resultinfo;\n\t\t\t\t\t errmsg(\"set-valued function called in context that cannot accept a set\")));\n\t\telog(ERROR, \"SPI_finish() failed\");", "partial_line": "else if (Sv", "completion": "else if (SvOK(perlret)) <|endoftext|>"}
{"context": "\t\tcase TRANS_LEADER_PARTIAL_SERIALIZE:\n\t\t\tstream_write_change(action, &original_msg);\n\t\t\t\t\taction != LOGICAL_REP_MSG_TYPE);\n}\n\tApplyExecutionData *edata;", "partial_line": "List\t   *permin", "completion": "List\t   *perminfos = NIL; <|endoftext|>"}
{"context": "\trawname = text_to_cstring(textval);\n\t\t\t\t errmsg(\"invalid name syntax\")));\nbool\n\tdo\n\t\tchar\t   *curname;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\tdefault:\n\t\t\tbreak;\n\tif (trace_sort)\n\t\t\t\t state->worker, pg_rusage_show(&state->ru_start));\n\t}", "partial_line": "MemoryCont", "completion": "MemoryContextSwitchTo(oldcontext); <|endoftext|>"}
{"context": "\t\tmsec = compute_parallel_delay();\n\t\tinstr_time\tdelay_start;\n\t\tif (msec > vacuum_cost_delay * 4)\n\t\tpg_usleep(msec * 1000);\n\t\t\t\tINSTR_TIME_ACCUM_DIFF(time_since_last_report, delay_end, last_report_time);", "partial_line": "if (INSTR_TIME_", "completion": "if (INSTR_TIME_GET_NANOSEC(time_since_last_report) >= <|endoftext|>"}
{"context": "\t\t}\n\theap_freetuple(tuple);\n\tbool\t   *nulls;\n\t\t\tcontinue;\n\t\tatt = &arg->u.tuple.atts[i];", "partial_line": "values[i] = att->func(att,", "completion": "values[i] = att->func(att, value, &nulls[i], false); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  boundinfo->kind[off],\n\t\t\t\t}\n\t\t\t\telse\n\tAssert(maxoff >= 0 && maxoff <= boundinfo->ndatums);\n\t\t\tminoff++;", "partial_line": "int\t\t\tla", "completion": "int\t\t\tlastkey = nvalues - 1; <|endoftext|>"}
{"context": "}\n\tint\t\t\tnum;\n\tif (es->format != EXPLAIN_FORMAT_TEXT)\n\t\t\tsetting = GetConfigOptionByName(conf->name, NULL, true);\n\t\tStringInfoData str;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\tControlFile.nameDataLen = NAMEDATALEN;\n\tControlFile.loblksize = LOBLKSIZE;\nstatic void\n\tprintf(_(\"Latest checkpoint's TimeLineID:       %u\\n\"),\n\t\t   ControlFile.checkPointCopy.ThisTimeLineID);", "partial_line": "printf(_(\"L", "completion": "printf(_(\"Latest checkpoint's NextXID:          %u:%u\\n\"), <|endoftext|>"}
{"context": "\tRelation\trelation;\n\t\treltablespace = 0;\n\tif (found)\n\t{\n\t{", "partial_line": "memcpy(skey, relfi", "completion": "memcpy(skey, relfilenumber_skey, sizeof(skey)); <|endoftext|>"}
{"context": "\tfor (i = 0; i < numberOfAttributes; i++)\n\tlen = SizeofMinimalTupleHeader;\n\tif (hasnull)\n}\nMinimalTuple", "partial_line": "result = (MinimalTuple) (m", "completion": "result = (MinimalTuple) (mem + extra); <|endoftext|>"}
{"context": "\t}\n\t\tdeparse_namespace dpns;\n\t\toldrte->relkind = relkind;\n\t\toldrte->rellockmode = AccessShareLock;\n\t\tnewrte->relid = trigrec->tgrelid;", "partial_line": "set_rtable_nam", "completion": "set_rtable_names(&dpns, NIL, NULL); <|endoftext|>"}
{"context": "\tnetlevelsup = var->varlevelsup + levelsup;\n\tdpns = (deparse_namespace *) list_nth(context->namespaces,\n\t{\n\t\tattnum = varattno;\n\t}", "partial_line": "Tar", "completion": "TargetEntry *tle; <|endoftext|>"}
{"context": "{\n\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t   \"procedures cannot have more than %d arguments\",\n\t\t\t\t\t\t\t\t   \"functions cannot have more than %d arguments\",\n\t\t\t\t\t\t\t\t &lookupError);", "partial_line": "func->objf", "completion": "func->objfuncargs != NIL && <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!PQconsumeInput(st->con))", "partial_line": "if (PQisBusy(st", "completion": "if (PQisBusy(st->con)) <|endoftext|>"}
{"context": "\tretptr = malloc(bufsize + 18);\t\n\treturn true;\nstatic bool\n{\n\tHANDLE\t\thToken;", "partial_line": "ereport(e", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\t\t\t\t\t  oprid->data);\n\t\t\t\t\t  fmtId(oprinfo->dobj.namespace->dobj.name),\n\t\t\t\t\t\t\t\t\t\t\"OPERATOR\", oprid->data,\n\tif (oprinfo->dobj.dump & DUMP_COMPONENT_DEFINITION)\n\t\t\t\t\t ARCHIVE_OPTS(.tag = oprinfo->dobj.name,", "partial_line": "destro", "completion": "destroyPQExpBuffer(q); <|endoftext|>"}
{"context": "static const symbol s_2_51[4] = { 'i', 'b', 'l', 'e' };\nstatic const symbol s_2_68[4] = { 0xED, 'v', 'o', 'l' };\nstatic const symbol s_2_84[2] = { 'o', 'r' };\nstatic const symbol s_2_85[3] = { 'd', 'o', 'r' };\nstatic const symbol s_2_107[7] = { 0xED, 's', 's', 'i', 'm', 'e', 's' };", "partial_line": "static const symbol s_", "completion": "static const symbol s_2_119[4] = { 'o', 's', 'e', 's' }; <|endoftext|>"}
{"context": "\t{\n\t\t{\n\t\t}\n\t}\n\tint\t\t\trscale;", "partial_line": "fir", "completion": "firstdigit1 = 0; <|endoftext|>"}
{"context": "\tListCell   *temp;\n\t\t\trel->attr_needed[attno] = bms_add_members(rel->attr_needed[attno],\n\t\t}\n\t\telse if (IsA(node, PlaceHolderVar))\nvoid", "partial_line": "ListCel", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "#line 23 \"fetch.pgc\"\n\tECPGt_char,(str),(long)25,(long)1,(25)*sizeof(char), \n#line 32 \"fetch.pgc\"\n\tECPGt_int,&(i),(long)1,(long)1,sizeof(int), \n\tECPGt_const,\"1\",(long)1,(long)1,strlen(\"1\"), ", "partial_line": "ECPGt_NO_INDICATOR, NULL", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT); <|endoftext|>"}
{"context": "}\n\tOperator\ttup;\n\tOid\t\t\tdeclared_arg_types[2];\n\t\trtypeId = exprType(rtree);\n\t\t\t\t errmsg(\"operator is only a shell: %s\",", "partial_line": "args = list_make1", "completion": "args = list_make1(rtree); <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"catalog/indexing.h\"\n#include \"miscadmin.h\"", "partial_line": "#include \"parse", "completion": "#include \"parser/parse_oper.h\" <|endoftext|>"}
{"context": "\t\t\tgettext_noop(\"An empty string means no prefix.\")\n\t\tNULL, NULL, NULL\n\t\t\"GMT\",\n\t\tcheck_log_timezone, assign_log_timezone, show_log_timezone\n\t\tDEFAULT_TABLE_ACCESS_METHOD,", "partial_line": "gettext_noop(\"An empty string", "completion": "gettext_noop(\"An empty string means use the database's default tablespace.\"), <|endoftext|>"}
{"context": "\t{\n\t\t\t\tbreak;\n\t\t\t (uint32) builder->catchange.xcnt, (uint32) surviving_xids,\n\t}\nSnapBuildCommitTxn(SnapBuild *builder, XLogRecPtr lsn, TransactionId xid,", "partial_line": "int nsubxacts, Transaction", "completion": "int nsubxacts, TransactionId *subxacts, uint32 xinfo) <|endoftext|>"}
{"context": "\t\tnfa->bos[0] = nfa->parent->bos[0];\n}\noptimize(struct nfa *nfa,\n\tif (verbose)\n\tif (verbose)", "partial_line": "fprintf(f, \"\\nfi", "completion": "fprintf(f, \"\\nfinal cleanup:\\n\"); <|endoftext|>"}
{"context": "\t{\n\tif (update_stats)\n\t\t{\n\t\t\trd_rel->relpages = (int32) relpages;\n\t\t\tbool isreindex,", "partial_line": "plan_create_index_workers(Relation", "completion": "plan_create_index_workers(RelationGetRelid(heapRelation), <|endoftext|>"}
{"context": "{\n}\n{\n\t{\n\t\tperminfo = getRTEPermissionInfo(pstate->p_rteperminfos, rte);", "partial_line": "perm", "completion": "perminfo->selectedCols = <|endoftext|>"}
{"context": "\t.begin_manifest = bbsink_forward_begin_manifest,\n\t.cleanup = bbsink_lz4_cleanup\n{\n\tint\t\t\tcompresslevel;\n\tcompresslevel = compress->level;", "partial_line": "memset(prefs, 0, sizeof(LZ4", "completion": "memset(prefs, 0, sizeof(LZ4F_preferences_t)); <|endoftext|>"}
{"context": "gistPopItupFromNodeBuffer(GISTBuildBuffers *gfbb, GISTNodeBuffer *nodeBuffer,\n}\ntypedef struct\n\tRelocationBufferInfo *relocationBuffersInfos;\n\t\treturn;", "partial_line": "blocknum = B", "completion": "blocknum = BufferGetBlockNumber(buffer); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   quote_identifier(srv->servername));\n\t\tcase UserMappingRelationId:\n\t\t\t\tForm_pg_user_mapping umform;\n\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\tappendStringInfo(&buffer, \"%s on server %s\",", "partial_line": "quote_identifie", "completion": "quote_identifier(usename), <|endoftext|>"}
{"context": "\t\t\t\t\t\tif (ratio > max_ratio)\n\t\t\t\t\t\t}\n\t\t(output_columns < total_header_width || output_columns < width_total))\n\t\tIsPagerNeeded(cont, extra_output_lines, false, &fout, &is_pager);\n\t{", "partial_line": "struct lineptr *this_line = col_lin", "completion": "struct lineptr *this_line = col_lineptrs[i] + curr_nl_line; <|endoftext|>"}
{"context": "\t\t\tvalid_params = bms_add_member(bms_copy(valid_params),\n\t\t\tscan_params = bms_add_member(bms_copy(scan_params),\n\t\t\t}\n\t\tcase T_SetOp:\n\t\t\t\t\t\t\t\t scan_params);", "partial_line": "gather_pa", "completion": "gather_param, <|endoftext|>"}
{"context": "\tif (rc || !ident_serv)\n\t\tgoto ident_inet_done;\n\tif (rc != 0)\n\t{\n\t\t\t\t\t\tremote_addr_s, ident_port)));", "partial_line": "goto ide", "completion": "goto ident_inet_done; <|endoftext|>"}
{"context": "{\n\t\tif (strcmp(option->keyword, keyword) == 0)\n\tPQconninfoOption *connOptions;\n\t\treturn NULL;\t\t\t\n\t\t\tchar\t  **connmember;", "partial_line": "for (PQconninfoOption *", "completion": "for (PQconninfoOption *option = connOptions; option->keyword != NULL; option++) <|endoftext|>"}
{"context": "\t\tAssert(list_length(pstate->p_joinexprs) == j->rtindex);\n\t\tif (j->join_using_alias)\n\t\t\tParseNamespaceItem *jnsitem;\n\t\t\tjnsitem->p_rtindex = nsitem->p_rtindex;\n\t\t\tjnsitem->p_lateral_only = false;", "partial_line": "nsite", "completion": "nsitem->p_lateral_ok = true; <|endoftext|>"}
{"context": "\tPage\t\tpage;\n\t\taction = BLK_NEEDS_REDO;\n\tif (action == BLK_NEEDS_REDO)", "partial_line": "if (action == BLK_NE", "completion": "if (action == BLK_NEEDS_REDO) <|endoftext|>"}
{"context": "\tptr = ret = palloc(*memlen);\n\t\t\t\t   Datum *attr, bool *isnull)\n\tevec = (GistEntryVector *) palloc((len + 2) * sizeof(GISTENTRY) + GEVHDRSZ);\n\t\tevec->n = 0;\n\t\t\tDatum\t\tdatum;", "partial_line": "&", "completion": "&IsNull); <|endoftext|>"}
{"context": "\t\t{\n\t\t{\n\t\t\terr_sendstring(&msgbuf, edata->datatype_name);\n\t\tif (edata->constraint_name)\n\t\t{", "partial_line": "snprintf(tbuf, sizeof(tbuf", "completion": "snprintf(tbuf, sizeof(tbuf), \"%d\", edata->cursorpos); <|endoftext|>"}
{"context": "#include \"access/sequence.h\"\n\treturn r;\n\trelation_close(relation, lockmode);\nstatic inline void", "partial_line": "RelationGet", "completion": "RelationGetRelationName(r)), <|endoftext|>"}
{"context": "                        {   int ret = r_R2(z);\n                        }\n                        {   int ret = slice_del(z);\n                                if (ret < 0) return ret;\n                            }", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t   trgform->tgfoid == F_RI_FKEY_SETDEFAULT_UPD ||\n\t\t\t\t\t\t\tOid *deleteTriggerOid,\n\t\t\t\t\t\t\tOid *updateTriggerOid)\n\t\t\t*deleteTriggerOid = trgform->oid;\n\t\t{", "partial_line": "Assert(*updateTriggerOid", "completion": "Assert(*updateTriggerOid == InvalidOid); <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_INVALID_ROW_COUNT_IN_LIMIT_CLAUSE),\nstatic void\ncheckTargetlistEntrySQL92(ParseState *pstate, TargetEntry *tle,\n\tswitch (exprKind)\n\t\t\t\t\t\t\t\tParseExprKindName(exprKind)),", "partial_line": "parser_errposit", "completion": "parser_errposition(pstate, <|endoftext|>"}
{"context": "\t\t\treturn COSTS_DIFFERENT;\n\t}\n\tListCell   *p;\n\tcheapest_startup_path = cheapest_total_path = best_param_path = NULL;\n\t{", "partial_line": "best", "completion": "best_param_path = path; <|endoftext|>"}
{"context": "\tResultRelInfo *prevResultRelInfo = NULL;\n\tExprContext *econtext;\n\tTupleTableSlot *singleslot = NULL;\n\tMemoryContext oldcontext = CurrentMemoryContext;\n\tint\t\t\tti_options = 0; ", "partial_line": "if (cstat", "completion": "if (cstate->opts.on_error != COPY_ON_ERROR_STOP) <|endoftext|>"}
{"context": "\t\tanalyzeOid = findTypeAnalyzeFunction(analyzeName, typoid);\n\tif (inputOid && !object_ownercheck(ProcedureRelationId, inputOid, GetUserId()))\n\tif (outputOid && !object_ownercheck(ProcedureRelationId, outputOid, GetUserId()))\n\t\taclcheck_error(ACLCHECK_NOT_OWNER, OBJECT_FUNCTION,\n\tif (analyzeOid && !object_ownercheck(ProcedureRelationId, analyzeOid, GetUserId()))", "partial_line": "ty", "completion": "typeName, <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t   getObjectDescription(&foundObject, false),\n\t\t\t\telog(ERROR, \"unexpected object depending on column: %s\",", "partial_line": "RememberReplicaIdentityForRebuilding(Oid i", "completion": "RememberReplicaIdentityForRebuilding(Oid indoid, AlteredTableInfo *tab) <|endoftext|>"}
{"context": "\t\tif (labeltargets)\n\t\t{\n\t\t\tdouble\t\tinsert_path;\n\t\t\tInstrEndLoop(outerPlanState(mtstate)->instrument);\n\telse if (node->operation == CMD_MERGE)", "partial_line": "doubl", "completion": "double\t\ttotal; <|endoftext|>"}
{"context": "\tnblocks = smgrnblocks(smgr, MAIN_FORKNUM);\n\t\tUnlockReleaseBuffer(buf);\n\t}\n\t\t\t\t\t\t\t  Snapshot snapshot)\n\tOffsetNumber offnum;", "partial_line": "HeapTupleD", "completion": "HeapTupleData tuple; <|endoftext|>"}
{"context": "\t\t\tname = (char *) dsa_get_address(MemoryStatsDsaArea, memcxt_info[i].name);\n\t\t\tnulls[0] = true;\n\t\t\tident = (char *) dsa_get_address(MemoryStatsDsaArea, memcxt_info[i].ident);\n}\n\tsz = add_size(sz, mul_size(TotalProcs, sizeof(MemoryStatsBackendState)));", "partial_line": "MemoryConte", "completion": "MemoryContextReportingShmemInit(void) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tothersj->ojrelid);\n\t\t\t\t\t}\n\t\t}\n\t\t\t\t (int) nodeTag(var));\n\t\t\tRelOptInfo *baserel;", "partial_line": "if (s", "completion": "if (sjinfo->ojrelid != 0 && <|endoftext|>"}
{"context": "\t\t\t\ttwo_phase = true;\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase 'w':\n\t\t\tcase 'W':", "partial_line": "startpos = ((u", "completion": "startpos = ((uint64) hi) << 32 | lo; <|endoftext|>"}
{"context": "\tCreateLocalPredicateLockHash();\n{\n\tLocalPredicateLockHash = hash_create(\"Local predicate lock\",\n\tSERIALIZABLEXIDTAG sxidtag;\n\t\t\t\t\t\t\t\t\tblkno);", "partial_line": "sta", "completion": "static bool <|endoftext|>"}
{"context": "\toptions = conninfo_init(errorMessage);\n\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn NULL;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase T_AlterEventTrigStmt:\n\t\t\tAlterRole(pstate, (AlterRoleStmt *) parsetree);\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\t\tProcessUtilitySlow(pstate, pstmt, queryString,", "partial_line": "context, p", "completion": "context, params, queryEnv, <|endoftext|>"}
{"context": "#include \"fe_utils/option_utils.h\"\n\t\t\t\t\t\t\t\t\t const char *cmdLineOption, const char *description,\n\t\t{\"retain\", no_argument, NULL, 'r'},", "partial_line": "{\"socketdir\", required", "completion": "{\"socketdir\", required_argument, NULL, 's'}, <|endoftext|>"}
{"context": "\t\t\ttransformExpr(pstate, cycle_clause->cycle_mark_value,\n\t\t\t\t\t\t\t\t  cycle_clause->cycle_mark_value,\n\t\t\t\t\t\t\t\t  \"CYCLE/SET/DEFAULT\");\n\t\t\tselect_common_typmod(pstate,\n\t\t\t\t\t\t\t\t\t\t\t   cycle_clause->cycle_mark_default),", "partial_line": "cte->ctequery = (Node", "completion": "cte->ctequery = (Node *) query; <|endoftext|>"}
{"context": "\t\tbreak; \\\nstatic int\tCopyReadAttributesText(CopyFromState cstate);\nstatic Datum CopyReadBinaryAttribute(CopyFromState cstate, FmgrInfo *flinfo,\nstatic inline bool CopyGetInt16(CopyFromState cstate, int16 *val);\n\tpq_sendint16(&buf, natts);", "partial_line": "pq_sendint16(&buf,", "completion": "pq_sendint16(&buf, format); <|endoftext|>"}
{"context": "\t\t\treturn;\n\t\tcase DO_TSDICT:\n\t\t\tsnprintf(buf, bufsize,\n\t\t\t\t\t obj->name, obj->dumpId, obj->catId.oid);\n\t\t\t\t\t \"TEXT SEARCH TEMPLATE %s  (ID %d OID %u)\",", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\t\tassert((size_t) s->no < nstates);\n\t\tfirst = ca;\n\t\t\t\t\tca->to = a->to->no;\n\tconst struct carc *bb = (const struct carc *) b;\n\t\treturn +1;", "partial_line": "if (aa->", "completion": "if (aa->to < bb->to) <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\ntypedef enum pg_hmac_errno\nstatic inline void", "partial_line": "if (", "completion": "if (ecode == 0) <|endoftext|>"}
{"context": "\t\t\t!lazy_scan_noprune(vacrel, buf, blkno, page, &has_lpdead_items))\n\t\t\tLockBuffer(buf, BUFFER_LOCK_UNLOCK);\n\t\t\t\t\tvacrel->eager_scan_max_fails_per_region = 0;\n\t\t\t\t\t\t\t\t\tvacrel->dbname, vacrel->relnamespace,\n\t\t}", "partial_line": "RecordPageWithFreeSpac", "completion": "RecordPageWithFreeSpace(vacrel->rel, blkno, freespace); <|endoftext|>"}
{"context": "\t\t\"Malay Peninsula Standard Time\", \"Malay Peninsula Daylight Time\",\n\t{\n\t},\n\t},\n\t\t\"Myanmar Standard Time\", \"Myanmar Daylight Time\",", "partial_line": "\"Asia/Ra", "completion": "\"Asia/Rangoon\" <|endoftext|>"}
{"context": "\tdigest[6] = ctx->md5_st8[5];\n\tdigest[10] = ctx->md5_st8[9];\n\tdigest[14] = ctx->md5_st8[13];\n\tctx->md5_stc = MD5_C0;\n}", "partial_line": "md5_calc(data +", "completion": "md5_calc(data + i, ctx); <|endoftext|>"}
{"context": "\tpg_unreachable();\n\tswitch (io_op)\n\t\t\treturn IO_COL_WRITE_TIME;\n\t\t\t\t\t\tBackendType bktype,\n\tfor (int io_obj = 0; io_obj < IOOBJECT_NUM_TYPES; io_obj++)", "partial_line": "int\t\t\tbyte_idx = pg", "completion": "int\t\t\tbyte_idx = pgstat_get_io_byte_index(io_op); <|endoftext|>"}
{"context": "\t\t\t\t\t*hour += 12;\n\t\t\t\t{\n\t\t\t\tif (strncmp(pstr, \"P.M.\", 4) == 0)\n\t\t\t\tpfmt++;\n\t\t\t\ttmp = pgtypes_alloc(strlen(\"%I:%M:%S %p\") + strlen(pstr) + 1);", "partial_line": "ret", "completion": "return err; <|endoftext|>"}
{"context": "\t\t\tcase FILE_TYPE_DIRECTORY:\n\t\t\tcase FILE_TYPE_UNDEFINED:\n\t}\n\telse if (entry->target_exists && !entry->source_exists)\n\t\t{", "partial_line": "Assert(f", "completion": "Assert(false); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\tif (!nulls_check_ok)\n\t\tif (!bms_is_empty(best_keycolumns))\n\t\t\tif (surplusvars == NULL)\n\t}", "partial_line": "vars = pul", "completion": "vars = pull_vars_of_level((Node *) rte->subquery, 1); <|endoftext|>"}
{"context": "\tforeach(lc, root->parse->rtable)\nvoid\n\telse\n\tRelOptInfo *rel;\n\trel = makeNode(RelOptInfo);", "partial_line": "rel->pathlis", "completion": "rel->pathlist = NIL; <|endoftext|>"}
{"context": "static char *label = \"pg_basebackup base backup\";\nstatic bool fastcheckpoint = false;\nstatic char *replication_slot = NULL;\nstatic char *backup_target = NULL;\nstatic PQExpBuffer recoveryconfcontents = NULL;", "partial_line": "static void ReportCopyDataParseError(", "completion": "static void ReportCopyDataParseError(size_t r, char *copybuf); <|endoftext|>"}
{"context": "\tint16\t\tiexisting = DatumGetInt16(existing);\n\t{\n\t\treturn (Datum) 0;\n\t*overflow = false;\nbtint2skipsupport(PG_FUNCTION_ARGS)", "partial_line": "sksup->increment = int2", "completion": "sksup->increment = int2_increment; <|endoftext|>"}
{"context": "}\nstatic bool\n{\n\t\t\t   *n_conn = NULL;\n\t\tpg_log_error(\"Do not give user, host, or port separately when using a connection string\");", "partial_line": "de", "completion": "default: <|endoftext|>"}
{"context": "\t\t{\n}\n\t{\n\t\tpid_t\t\tpid;\n\t\tif (result)", "partial_line": "ResetLatch(M", "completion": "ResetLatch(MyLatch); <|endoftext|>"}
{"context": "\t\t\t\t RelOptInfo *rel,\n\t\t\t\t Path *subpath,\n\tpathnode->path.parallel_aware = false;\n\t\t\t  0.0,\t\t\t\t\n}", "partial_line": "pathnode->path.pathkey", "completion": "pathnode->path.pathkeys = subpath->pathkeys; <|endoftext|>"}
{"context": "\t{\n\tllvm_inline_reset_caches();\nllvm_create_context(int jitFlags)\n\tcontext->base.flags = jitFlags;\n\tResourceOwnerRememberJIT(CurrentResourceOwner, context);", "partial_line": "LLVMDisposeModule(llvm_jit_con", "completion": "LLVMDisposeModule(llvm_jit_context->module); <|endoftext|>"}
{"context": "\tvalidator_module_state->sversion = PG_VERSION_NUM;\n{\n}\ncheck_oauth_validator(HbaLine *hbaline, int elevel, char **err_msg)\n\tconst char *file_name = hbaline->sourcefile;", "partial_line": "errcontext(\"lin", "completion": "errcontext(\"line %d of configuration file \\\"%s\\\"\", <|endoftext|>"}
{"context": "#error \"This file is not expected to be compiled for backend code\"\nstatic const char *progname;", "partial_line": "static void (*log_locus_callba", "completion": "static void (*log_locus_callback) (const char **, uint64 *); <|endoftext|>"}
{"context": "static RelStatsInfo *\n\t\t\t\t\t  int32 relallfrozen, char relkind,\n\t{\n\t\tRelStatsInfo *info = pg_malloc0(sizeof(RelStatsInfo));\n\t\tdobj->name = pg_strdup(rel->name);", "partial_line": "info->reltu", "completion": "info->reltuples = pstrdup(reltuples); <|endoftext|>"}
{"context": "}\n\t\t\t\t\t  INT64_FORMAT \"\\t\" INT64_FORMAT \"\\t0\\t\\\\N\\n\",\n\t\t\t\t\t  curr + 1, curr / ntellers + 1);\n}\nstatic void", "partial_line": "initAccount(PQExpBufferData *sq", "completion": "initAccount(PQExpBufferData *sql, int64 curr) <|endoftext|>"}
{"context": "\t\t   objectKind == REINDEX_OBJECT_DATABASE);\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t errmsg(\"cannot reindex system catalogs concurrently\")));\n\telse\n\t\tif (!object_ownercheck(DatabaseRelationId, objectOid, GetUserId()) &&", "partial_line": "Oid", "completion": "Oid\t\t\trelid = classtuple->oid; <|endoftext|>"}
{"context": "\tspirc = SPI_execute_plan(plan_getrulebyoid, args, nulls, true, 0);\n\t}\n\tif (buf.len == 0)\n\treturn buf.data;\n\tif (res == NULL)", "partial_line": "int\t\t\tpret", "completion": "int\t\t\tprettyFlags; <|endoftext|>"}
{"context": "\t\tdelta /= 256;\n\tPG_RETURN_FLOAT8(delta);\n\tfloat8\t\tdelta = 0;\n\tDateADT\t\tdateVal2 = PG_GETARG_DATEADT(1);\n\tPG_RETURN_FLOAT8(delta);", "partial_line": "int64", "completion": "int64\t\tdayfraction; <|endoftext|>"}
{"context": "\t\t\treturn false;\n\t\tcase T_AlterStatsStmt:\n\t\tcase T_AlterSubscriptionStmt:\n\t\tcase T_AlterTableMoveAllStmt:\n\t\tcase T_CreatePLangStmt:", "partial_line": "case T_CreateRan", "completion": "case T_CreateRangeStmt: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tref = tle->ressortgroupref;\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t errmsg(\"arguments to GROUPING must be grouping expressions of the associated query level\"),", "partial_line": "if ((int)", "completion": "if ((int) grp->agglevelsup > context->sublevels_up) <|endoftext|>"}
{"context": "\t\tconst char *library_path,\n\t\t\t\t\t\t\t\t  &library_path,\n\t\t\t\t\t\t\t\t  &module_name,\n\t\t\t\t\t\t\t\t  &module_version);\n\t\telse", "partial_line": "tuplestore_putva", "completion": "tuplestore_putvalues(rsinfo->setResult, rsinfo->setDesc, <|endoftext|>"}
{"context": "\t\t\tif (*s)\n\t\t\t\telse if (STRNCMP(s, \"default\") != 0)\n\t\tpfree(recoded);\n\t\tereport(ERROR,\n\t\t\tgoto nextline;", "partial_line": "if (!Conf->us", "completion": "if (!Conf->useFlagAliases) <|endoftext|>"}
{"context": "\tfprintf(script, \"#!/bin/sh\\n\\n\");\n\t\t\t\told_tblspc_suffix, PATH_QUOTE);\n\t\t\t\t *deletion_script_file_name);\n\t\t\t\t\t\t\t\"AND rolname !~ '^pg_'\");\n\t\t\t\t\t\t\t\"SELECT COUNT(*) \"", "partial_line": "che", "completion": "check_ok(); <|endoftext|>"}
{"context": "\tdouble\t\tfraction;\n\t\treturn 0;\n}\ntypedef struct mxtruncinfo\n\t\tctl->PagePrecedes(segpage, trunc->earliestExistingPage))", "partial_line": "int64\t\tendsegment = MXOffsetToMember", "completion": "int64\t\tendsegment = MXOffsetToMemberSegment(newOldestOffset); <|endoftext|>"}
{"context": "\t}\n\t\tslot->tts_values[defmap[i]] =\n\tint\t\t\tnatts = slot->tts_tupleDescriptor->natts;\n\t\t\tif (tupleData->colstatus[remoteattnum] == LOGICALREP_COLUMN_TEXT)\n\t\t\t\tOid\t\t\ttypinput;", "partial_line": "typiopar", "completion": "typioparam, att->atttypmod); <|endoftext|>"}
{"context": "\t\t\tparse_format(format, fmt_str, DCH_keywords, DCH_suff, DCH_index,\n\t\telse\n\t\t\tformat = ent->format;\n#endif\n\t\tint\t\t\tx = tmfc.ssss;", "partial_line": "tm->tm_min = x /", "completion": "tm->tm_min = x / SECS_PER_MINUTE; <|endoftext|>"}
{"context": "\t\tif (XLogLogicalInfoActive())\n\t\t\txl_xinfo.xinfo |= XACT_XINFO_HAS_GID;\n\t}\n\tXLogRegisterData(&xlrec, sizeof(xl_xact_commit));\n\t\tXLogRegisterData(&xl_dbinfo, sizeof(xl_dbinfo));", "partial_line": "if (xl_xi", "completion": "if (xl_xinfo.xinfo & XACT_XINFO_HAS_SUBXACTS) <|endoftext|>"}
{"context": "void\n{\n\tAssert(MyReplicationSlot == NULL);\n\tLWLockAcquire(ReplicationSlotControlLock, LW_SHARED);\n\t\t\t (!synced_only || s->data.synced)))", "partial_line": "ConditionVariableBroadcas", "completion": "ConditionVariableBroadcast(&s->active_cv); <|endoftext|>"}
{"context": "\t{\nvoid\n\tif (av_storage_param_cost_limit > 0)\n\t{\n\t\t\treturn;", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "#line 168 \"sqlda.pgc\"\n\tstrcpy(msg, \"deallocate\");\n\tinp_sqlda->sqlvar[0].sqltype = ECPGt_int;\n\tdump_sqlda(outp_sqlda);\nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "free(o", "completion": "free(outp_sqlda); <|endoftext|>"}
{"context": "\tPG_RETURN_POINTER(result);\noidparse(Node *node)\n\tOid\t\t\tv2 = *((const Oid *) p2);\n\treturn pg_cmp_u32(v1, v2);\n\tPG_RETURN_BOOL(arg1 == arg2);", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\tpam_passwd = NULL;\t\t\n\t\tif (!pam_no_password)\n\t\t\t\t\t\t\tpam_strerror(pamh, retval))));\n\t\treturn pam_no_password ? STATUS_EOF : STATUS_ERROR;\n\t}", "partial_line": "static", "completion": "static int <|endoftext|>"}
{"context": "\t\t\t\t\tnewcopy[variable->len] = '\\0';\n\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t*tobeinserted_p = mallocedval;\n\t\t\t\t\tif (!mallocedval)", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "\t\tpfree(updatedbuf);\n\t\t\t\t\tOffsetNumber *updatedoffsets, Size *updatedbuflen,\n\tchar\t   *updatedbuf = NULL;\n\t\t{\n\t\t\tupdate.ndeletedtids = vacposting->ndeletedtids;", "partial_line": "st", "completion": "static int <|endoftext|>"}
{"context": "\tPG_ENSURE_ERROR_CLEANUP(_bt_end_vacuum_callback, PointerGetDatum(rel));\n\t\tcycleid = _bt_start_vacuum(rel);\n\t\tif (!_bt_vacuum_needs_cleanup(info->index))\n\t\tbtvacuumscan(info, stats, NULL, NULL, 0);\n\tbool\t\tneedLock;", "partial_line": "LockRelationForExt", "completion": "LockRelationForExtension(rel, ExclusiveLock); <|endoftext|>"}
{"context": "\t\tlibpq_append_conn_error(conn, \"%s not allowed in pipeline mode\", \"PQfn\");\n\t\tpgHavePendingResult(conn))\n\t\t(conn->asyncStatus == PGASYNC_IDLE ||\n\t\t conn->asyncStatus == PGASYNC_PIPELINE_IDLE) &&\n\t\tcase PGASYNC_BUSY:", "partial_line": "ret", "completion": "return 0; <|endoftext|>"}
{"context": "#include \"storage/spin.h\"\n#include \"utils/memutils.h\"\ntypedef struct\n\tint\t\t\tmax_requests;\t\n} CheckpointerShmemStruct;", "partial_line": "int\t\t\tChe", "completion": "int\t\t\tCheckPointTimeout = 300; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t   state->bs_currRangeStart,\n\t(void) add_values_to_range(index, state->bs_bdesc, state->bs_dtuple,\nbrinbuildCallbackParallel(Relation index,\n\tBlockNumber thisblock;", "partial_line": "if ((thisblock < s", "completion": "if ((thisblock < state->bs_currRangeStart) || <|endoftext|>"}
{"context": "\t\t{\n\t\t\t}\n\t\tncompatiblepreferred == 1 ||\n\t\treturn result;\n\treturn InvalidOid;", "partial_line": "Assert(cmptype == COMPARE_EQ", "completion": "Assert(cmptype == COMPARE_EQ || cmptype == COMPARE_OVERLAP || cmptype == COMPARE_CONTAINED_BY); <|endoftext|>"}
{"context": "{ 4, s_4_3, -1, 1, 0},\n{ 10, s_5_1, -1, 1, 0},\nstatic const symbol s_6_10[14] = { 0xCF, 0x87, 0xCE, 0xB1, 0xCF, 0x81, 0xCF, 0x84, 0xCE, 0xBF, 0xCF, 0x80, 0xCE, 0xB1 };\nstatic const symbol s_6_19[12] = { 0xCE, 0xB5, 0xCF, 0x83, 0xCF, 0x89, 0xCE, 0xBA, 0xCE, 0xBB, 0xCE, 0xB5 };\nstatic const symbol s_6_26[12] = { 0xCF, 0x80, 0xCE, 0xBF, 0xCF, 0x85, 0xCE, 0xBA, 0xCE, 0xB1, 0xCE, 0xBC };", "partial_line": "{ 16, s_6", "completion": "{ 16, s_6_2, -1, 2, 0}, <|endoftext|>"}
{"context": "\t\t\t\targtypes[i] = poly_actuals.anymultirange_type;\n\t\t\t\targtypes[i] = anyc_actuals.anyelement_type;\n\t\t\tcase ANYCOMPATIBLERANGEOID:\n\t\t\tdefault:\nstatic TypeFuncClass", "partial_line": "*base_type", "completion": "*base_typeid = typid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\terrmsg(\"not-null constraints for domains cannot be marked NO INHERIT\"),\n\t\t\t\tnullDefined = true;\n\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t errmsg(\"foreign key constraints not possible for domains\"),\n\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\tchar\t   *linkalloc = absolute ? NULL : relname(target, linkname);\n\t\t\tif (!fp)\n\t\t\tif (!tp)\n\t\t\twhile ((c = getc(fp)) != EOF)\n\t\t\tclose_file(fp, directory, target);", "partial_line": "rcomp(const void *cp1,", "completion": "rcomp(const void *cp1, const void *cp2) <|endoftext|>"}
{"context": "\t\t}\n}\nget_icu_locale_comment(const char *localename)\n\tstatus = U_ZERO_ERROR;\n\tint\t\t\tenc;", "partial_line": "if (enc", "completion": "if (enc < 0) <|endoftext|>"}
{"context": "\t\t\t\t\tProcessUtilitySlow(pstate, pstmt, queryString,\n\t\t\t\t\t\t\t\t\t   context, params, queryEnv,\n\t\t\t}\n\t\t\tbreak;\n\t\tcase T_SecLabelStmt:", "partial_line": "context, params", "completion": "context, params, queryEnv, <|endoftext|>"}
{"context": "\tif (res == HEAPTUPLE_RECENTLY_DEAD)\n\tif (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))\n\t\treturn false;\n\t\treturn false;\nTransactionIdInArray(TransactionId xid, TransactionId *xip, Size num)", "partial_line": "ret", "completion": "return num > 0 && <|endoftext|>"}
{"context": "\t\t\treturn tlentry;\n{\n\t{\n\t\t\ttlist = lappend(tlist, tle);\n\tList\t   *result = NIL;", "partial_line": "foreac", "completion": "foreach(l, tlist) <|endoftext|>"}
{"context": "}\n\tint\t\t\tnelems_orig_start = *nelems_orig,\n\t\t\t\tnelems_orig_merged = 0;\n\tFmgrInfo   *mergeproc = sortproc;\n\t\t}", "partial_line": "Datum\t   *oelem = elems", "completion": "Datum\t   *oelem = elems_orig + i, <|endoftext|>"}
{"context": "\t\tpqTraceOutputInt16(f, message, cursor);\n\tchar\t\tid;\n\t\tcase PqMsg_ParseComplete:\n\t\tcase PqMsg_BindComplete:\n\t\t\tfprintf(conn->Pfdebug, \"BindComplete\");", "partial_line": "case", "completion": "case PqMsg_CopyData: <|endoftext|>"}
{"context": "static int\tpltcl_quote(ClientData cdata, Tcl_Interp *interp,\n\t\t\t\t\t\tint objc, Tcl_Obj *const objv[]);\n\t\t\t\t\t\t\tint objc, Tcl_Obj *const objv[]);\n\t\t\t\t\t\t\t\t\t int spi_rc,\nstatic void pltcl_subtrans_begin(MemoryContext oldcontext,", "partial_line": "MemoryContex", "completion": "MemoryContext oldcontext, <|endoftext|>"}
{"context": "\t{\n\t\tif ((j = POSDATALEN(out, entry)) != 0)\n\t\t\tp = POSDATAPTR(out, entry);\n\t\t\t\tp++;\n\t\t\t\tj,", "partial_line": "weigh", "completion": "weight = 0; <|endoftext|>"}
{"context": "\t\t\tqsort_interruptible(lowers, non_empty_cnt, sizeof(RangeBound),\n\t\t\tqsort_interruptible(uppers, non_empty_cnt, sizeof(RangeBound),\n\t\t\tif (num_hist > num_bins)\n\t\t\t\tnum_hist = num_bins + 1;\n\t\t\tbound_hist_values = (Datum *) palloc(num_hist * sizeof(Datum));", "partial_line": "fa", "completion": "false, <|endoftext|>"}
{"context": "\t\tcase FE_OAUTH_BEARER_SENT:\n\t\t\t\tlibpq_append_conn_error(conn,\n\t\t\t\tif (!setup_token_request(conn, state))\n\t\t\t\tif (conn->oauth_token)\n\t\t\t\t\tgoto reconnect;", "partial_line": "Assert(conn-", "completion": "Assert(conn->async_auth); <|endoftext|>"}
{"context": "{\n\tif (recptr == 0)\n\trecptr = GetXLogReplayRecPtr(NULL);\n}\npg_walfile_name_offset(PG_FUNCTION_ARGS)", "partial_line": "XLogSegN", "completion": "XLogSegNo\txlogsegno; <|endoftext|>"}
{"context": "\t{\n\t\tif (!OidIsValid(get_relname_relid(relname, namespaceid)))\n\t\t\tif (!isconstraint ||\nChooseIndexName(const char *tabname, Oid namespaceId,\n\tif (primary)", "partial_line": "indexname = ChooseR", "completion": "indexname = ChooseRelationName(tabname, <|endoftext|>"}
{"context": "static void\n\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t\t  sizeof(JsonbValue) * pstate->size);\nJsonbIteratorToken\n\t\t\t(*it)->curIndex = 0;", "partial_line": "(*it)->", "completion": "(*it)->curDataOffset = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   slot, tupdesc, 0, false, true);\n\t\telog(ERROR, \"SPI_finish failed\");\n\t\t\t*buffer++ = '\"';\n}\nri_GenerateQual(StringInfo buf,", "partial_line": "Oid op", "completion": "Oid opoid, <|endoftext|>"}
{"context": "\t\tReleaseSysCache(tuple);\n\t\t\t\telog(ERROR, \"cache lookup failed for type %u\", type_oid);\n\t\ttypeform = (Form_pg_type) GETSTRUCT(tuple);\n\t}\n\t\tis_array = false;", "partial_line": "buf", "completion": "buf = pstrdup(\"bit\"); <|endoftext|>"}
{"context": "\t{\n\treferenced.classId = ProcedureRelationId;\n\treferenced.objectSubId = 0;\n\trecordDependencyOn(&myself, &referenced, DEPENDENCY_NORMAL);\n\t\t\trecordDependencyOn(&myself, &referenced, DEPENDENCY_AUTO);", "partial_line": "ObjectAddressSet(re", "completion": "ObjectAddressSet(referenced, TriggerRelationId, parentTriggerOid); <|endoftext|>"}
{"context": "static void ConfirmRecoveryPaused(void);\n\t\t\t\t\t\t\t  TimeLineID replayTLI);\nstatic int\tXLogPageRead(XLogReaderState *xlogreader, XLogRecPtr targetPagePtr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  bool fetching_ckpt,\nstatic int\tXLogFileRead(XLogSegNo segno, TimeLineID tli,", "partial_line": "static int\tXL", "completion": "static int\tXLogFileReadAnyTLI(XLogSegNo segno, XLogSource source); <|endoftext|>"}
{"context": "\t\tprogress_vals[2] = idx->indexId;\n\t\t\theapRel->rd_rel->relkind != RELKIND_TOASTVALUE)\n\t\t\t\t\t\t\t\t\t\t\t\t\tidx->indexId,\n\t\toldcontext = MemoryContextSwitchTo(private_context);\n\t\t{", "partial_line": "foreach(lc, he", "completion": "foreach(lc, heapRelationIds) <|endoftext|>"}
{"context": "\tif (sv->spl_rdatum_exists)\n\t\t\t\t\t\t &sv->spl_rdatum, &tmpBool);\n\tint\t\t\tnbytes;\n\tevec = palloc(sizeof(GISTENTRY) * entryvec->n + GEVHDRSZ);\n}", "partial_line": "IndexTuple *itup, int len, G", "completion": "IndexTuple *itup, int len, GISTSTATE *giststate) <|endoftext|>"}
{"context": "\t\tcase T_NestPath:\n\t\t\t\tREPARAMETERIZE_CHILD_PATH(jpath->outerjoinpath);\n\t\t\t\tREPARAMETERIZE_CHILD_PATH(jpath->innerjoinpath);\n\t\t\t\tMergePath  *mpath = (MergePath *) path;\n\t\tcase T_HashPath:", "partial_line": "HashPath   *hpath =", "completion": "HashPath   *hpath = (HashPath *) path; <|endoftext|>"}
{"context": "\telog(NOTICE, \"testing intset with pattern \\\"%s\\\"\", spec->test_name);\n\tfor (int i = 0; i < patternlen; i++)\n\tintset_ctx = AllocSetContextCreate(CurrentMemoryContext,\n\t\t\t\t\t\t\t\t\t   ALLOCSET_SMALL_SIZES);\n\t\t}", "partial_line": "fprintf(stderr, \"added \" UINT64_FORM", "completion": "fprintf(stderr, \"added \" UINT64_FORMAT \" values in %d ms\\n\", <|endoftext|>"}
{"context": "\tpg_atomic_write_u64(&XLogCtl->InitializeReserved, pg_atomic_read_u64(&XLogCtl->InitializedUpTo));\n\tPreallocXlogFiles(EndOfLog, newTLI);\n\tTrimMultiXact();\n\t\tAssert(!XLogRecPtrIsInvalid(missingContrecPtr));\n\tUpdateFullPageWrites();", "partial_line": "if (Arch", "completion": "if (ArchiveRecoveryRequested) <|endoftext|>"}
{"context": "\t\telse\n\t\t\t\t\tAdjustFractSeconds(fval, tm, fsec, SECS_PER_HOUR);\n\t\t\t\t\t\tAdjustFractSeconds(fval, tm, fsec, 1);\n\t\t\t\t\tif (*str != ':')\n\t\t\t\t\treturn DTERR_BAD_FORMAT;", "partial_line": "int", "completion": "int\t\t\tfmask = 0, <|endoftext|>"}
{"context": "\t\tsizeComboCids = CCID_ARRAY_SIZE;\n\t\tusedComboCids = 0;\n\t\t\t\t\t\t\t\t\t\t&key,\n\t}\n\tentry->combocid = combocid;", "partial_line": "static C", "completion": "static CommandId <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\targ = tc->arg;\n\t\t\t\t\t\tDirectFunctionCall3(interval_in,\n\t\t\t\telse\n\t\t\t\t\t\t\t true, 0, false);", "partial_line": "(errcode(ERRCODE", "completion": "(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED), <|endoftext|>"}
{"context": "\t\t\t\tchar\t\tc;\n\t\t\t\tWSABUF\t\tbuf;\n\t\t\t\tbuf.len = 0;\n\t\t\t\tif (r == 0)\t\t\n\t\t\t\t{", "partial_line": "WSAEventSelect(s,", "completion": "WSAEventSelect(s, NULL, 0); <|endoftext|>"}
{"context": "}\nfloat8_regr_avgx(PG_FUNCTION_ARGS)\n{\n}\n{", "partial_line": "float8\t   *", "completion": "float8\t   *transvalues; <|endoftext|>"}
{"context": "\t{\nbuild_partition_pathkeys(PlannerInfo *root, RelOptInfo *partrel,\n\t\tif (cpathkey)\n\t\t}\n\t\t\t\treturn retval;", "partial_line": "Rel", "completion": "Relids rel, <|endoftext|>"}
{"context": "static const symbol s_1_22[3] = { 'l', 'a', 's' };\nstatic const symbol s_1_35[3] = { 'v', 'o', 's' };\nstatic const symbol s_1_38[2] = { '\\'', 't' };\n{ 3, s_1_24, -1, 1, 0},\nstatic const symbol s_2_17[3] = { 'i', 'm', 'a' };", "partial_line": "static const", "completion": "static const symbol s_2_18[6] = { 0xED, 's', 's', 'i', 'm', 'a' }; <|endoftext|>"}
{"context": "\t\texit(1);\n\t}\n}\n\t\twrite_stderr(_(\"%s: PID file \\\"%s\\\" does not exist\\n\"), progname, pid_file);\n\t}", "partial_line": "write_stderr(_(\"%s: could not create promot", "completion": "write_stderr(_(\"%s: could not create promote signal file \\\"%s\\\": %m\\n\"), <|endoftext|>"}
{"context": "\tbuf = pr.recent_buffer;\n\t\t{\n\t\t\t\telog(ERROR, \"couldn't evict\");\nDatum\nDatum", "partial_line": "for", "completion": "for_input, nowait); <|endoftext|>"}
{"context": "\tif (es->qd->operation == CMD_UTILITY)\n\t{\n\telse\n\t\tuint64\t\tcount = (es->lazyEval) ? 1 : 0;\n{", "partial_line": "if (es->qd->operation", "completion": "if (es->qd->operation != CMD_UTILITY) <|endoftext|>"}
{"context": "\t\tif (tstoken_list_member(strVal(val), result))\n\t\t\t\tbreak;\n\t\t\tereport(ERROR,\n\t\t\t\t\t errmsg(\"token type \\\"%s\\\" does not exist\",\n\t\t\t\t\t\t\tstrVal(val))));", "partial_line": "return", "completion": "return result; <|endoftext|>"}
{"context": "\trtf = linitial_node(RangeTblFunction, rte->functions);\n\tif (rtf->funccolcount != 1)\n\t\treturn jtnode;\t\t\t\n\trvcontext.root = root;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  1,\t", "partial_line": "rvcontext.tar", "completion": "rvcontext.target_rte = rte; <|endoftext|>"}
{"context": "\t\t\t\t\t\tNameListToString(procname), \"internal\")));\n\tif (procOid == F_ARRAY_SUBSCRIPT_HANDLER)\n\t\tereport(ERROR,\n\treturn procOid;\n\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),", "partial_line": "NameListToStrin", "completion": "NameListToString(opcname), <|endoftext|>"}
{"context": "{\n\tint\t\t\tresult;\n\treturn result;\n\tNode\t   *temp;\n\tattr = TupleDescAttr(tupdesc, fieldnum - 1);", "partial_line": "return t", "completion": "return true; <|endoftext|>"}
{"context": "\tif (stp->curline)\n\t\t\tpfree(stp->curline);\n\t\tstp->curline = NULL;\n\tif (!pg_get_line_buf(stp->fp, &stp->buf))\n\tFreeFile(stp->fp);", "partial_line": "st", "completion": "stp->curline); <|endoftext|>"}
{"context": "\tCheckpointStats.ckpt_end_t = GetCurrentTimestamp();\n\tif (restartpoint)\n\t\tereport(LOG,\n\t\t\t\t\t\tCheckpointStats.ckpt_sync_rels,\n\t\t\t(0.90 * CheckPointDistanceEstimate + 0.10 * (double) nbytes);", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\treturn type_multirange_array_oid;\n\tcreateStmt->constraints = NIL;\n\tcreateStmt->tablespacename = NULL;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t NoLock, NULL);\n\t\t\t\t   NULL);", "partial_line": "Oid", "completion": "Oid\t\t\tdomainoid; <|endoftext|>"}
{"context": "\t\tif (commonLen < VARSIZE_ANY_EXHDR(texti))\n{\n\ttext\t   *reconstrText;\n\tint\t\t\tmaxReconstrLen;\n\tmaxReconstrLen = in->level + 1;", "partial_line": "for (i = 0; i < in->nN", "completion": "for (i = 0; i < in->nNodes; i++) <|endoftext|>"}
{"context": "#endif\nstatic int r_tidy(struct SN_env * z);\nstatic int r_LONG(struct SN_env * z);\nstatic int r_particle_etc(struct SN_env * z);\nstatic const symbol s_0_8[3] = { 'p', 0xC3, 0xA4 };", "partial_line": "static", "completion": "static const struct among a_0[10] = <|endoftext|>"}
{"context": "\t\t.shared_data_off = offsetof(PgStatShared_BgWriter, stats),\n\t\t.shared_data_len = sizeof(((PgStatShared_BgWriter *) 0)->stats),\n\t\t.init_shmem_cb = pgstat_bgwriter_init_shmem_cb,\n\t[PGSTAT_KIND_CHECKPOINTER] = {\n\t\t.write_to_file = true,", "partial_line": ".snapshot_ctl_off = offsetof(PgStat_", "completion": ".snapshot_ctl_off = offsetof(PgStat_Snapshot, checkpointer), <|endoftext|>"}
{"context": "\t\tstate->funcReturnsSet = func->funcretset;\n\tMemoryContext callerContext;\n\tfuncrettype = exprType((Node *) setexpr->expr);\n\trsinfo.setResult = NULL;\n\t\t\t\t\t\t\t\t NULL, (Node *) &rsinfo);", "partial_line": "ExecEvalFuncArgs(fcinfo, setexpr->a", "completion": "ExecEvalFuncArgs(fcinfo, setexpr->args, econtext); <|endoftext|>"}
{"context": "\tPG_FREE_IF_COPY(arg1, 0);\nDatum\n\tlen1 = VARSIZE_ANY_EXHDR(t1);\n\t\tlen2 = 0;\n\t\tmemcpy(ptr + len1, VARDATA_ANY(t2), len2);", "partial_line": "PG_RETURN_BYTEA", "completion": "PG_RETURN_BYTEA_P(bytea_substring(PG_GETARG_DATUM(0), <|endoftext|>"}
{"context": "\tcost\n\t{\"ect\", TZ, -14400},\t\t\n#endif\n\t{\"egt\", TZ, -3600},\t\t\t\n\t{\"gamt\", TZ, -32400},\t\t", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t}\n\tReplicationSlotNameForTablesync(MySubscription->oid,\n\t\t\t\t\t\t\t\t\tMyLogicalRepWorker->relid,\n\tif (LogRepWorkerWalRcvConn == NULL)\n\tAssert(MyLogicalRepWorker->relstate == SUBREL_STATE_INIT ||", "partial_line": "StartTransactio", "completion": "StartTransactionCommand(); <|endoftext|>"}
{"context": "\t\t\t\t\t\t  gettext_noop(\"Table\"));\n\t\t\t\t\t\t  \"WHEN \" CppAsString2(RELPERSISTENCE_TEMP) \" THEN '%s' \"\n\t\t\t\t\t\t\t CppAsString2(RELKIND_PARTITIONED_TABLE) \",\");\n\t\tappendPQExpBufferStr(&buf, \"'s',\"); \n\t\t\t\t\t\t\t\t\"n.nspname\", \"c.relname\", NULL,", "partial_line": "termPQExpBuffer", "completion": "termPQExpBuffer(&buf); <|endoftext|>"}
{"context": "\t\ttmpd = dLeftGroups;\n\t}\n\tresult_rel->rows = dNumOutputRows;\n\t\t\t\t\t\t\t\t\t\t  dNumOutputRows);\n\t\t\tslpath = lpath;\t\t", "partial_line": "if (s", "completion": "if (slpath == NULL) <|endoftext|>"}
{"context": "\t\ttable_close(childrel, NoLock);\n}\nexpand_single_inheritance_child(PlannerInfo *root, RangeTblEntry *parentrte,\n\t\t\t\t\t\t\t\tIndex parentRTindex, Relation parentrel,\n\tchildrte = makeNode(RangeTblEntry);", "partial_line": "Assert(parentrte->rte", "completion": "Assert(parentrte->rtekind == RTE_RELATION); <|endoftext|>"}
{"context": "\t\t\t\trelkind == RELKIND_PARTITIONED_TABLE)\n\t\t\t\t\t\t\t\t\t\t\t &isNull);\n\t\t\t\t\t}\n\t\t\t\ttupleid = (ItemPointer) DatumGetPointer(datum);\n\t\t\t{", "partial_line": "resultRelInfo-", "completion": "resultRelInfo->ri_RowIdAttNo, <|endoftext|>"}
{"context": "static const symbol s_6_25[4] = { 's', 's', 0xC3, 0xA4 };\n{ 2, s_6_2, 0, -1, 0},\n{ 4, s_6_18, 11, -1, r_VI},\n{ 4, s_6_28, 26, -1, 0},\nstatic const symbol s_7_7[3] = { 'm', 'p', 'i' };", "partial_line": "static const symbol s_7_11[5] =", "completion": "static const symbol s_7_11[5] = { 'i', 'm', 'm', 0xC3, 0xA4 }; <|endoftext|>"}
{"context": "\t\ttupleChunkSize +\n\t\tpergroupChunkSize +\n\telse\t\t\t\t\t\t\n\t\t\taggstate->ss.ps.outerops = &TTSOpsMinimalTuple;\n\t\t}", "partial_line": "if (num_pa", "completion": "if (num_partitions != NULL) <|endoftext|>"}
{"context": "\t\tforce_nl = true;\n\t\tgoto copy_id;\n\t    parse(decl);\t\n\t\t    dump_line();\n\t\t}", "partial_line": "}", "completion": "} else { <|endoftext|>"}
{"context": "\tt_isnull[1] = false;\n\t\theap_insert(toastrel, toasttup, mycid, options, NULL);\n\t\t\t\tindex_insert(toastidxs[i], t_values, t_isnull,\n\t\t\t\t\t\t\t &(toasttup->t_self),\n\ttable_close(toastrel, NoLock);", "partial_line": "SET_VARTAG_E", "completion": "SET_VARTAG_EXTERNAL(result, VARTAG_ONDISK); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   node->partColIdx,\n\t\tWindowFunc *wfunc = wfuncstate->wfunc;\n\t\tif (wfunc->winref != node->winref)\t\n\t\taclresult = object_aclcheck(ProcedureRelationId, wfunc->winfnoid, GetUserId(),\n\t\tperfuncstate->plain_agg = wfunc->winagg;", "partial_line": "if (wfu", "completion": "if (wfunc->winagg) <|endoftext|>"}
{"context": "\t\t\tif (progress)\n\t\t\t\tpgstat_progress_update_param(PROGRESS_WAITFOR_DONE, ++done);\n\tif (progress)\n\t\tconst int\tindex[] = {\n\tlist_free_deep(holders);", "partial_line": "list_f", "completion": "list_free(l); <|endoftext|>"}
{"context": "\t\tsnprintf(tzdir + tzdir_orig_len, MAXPGPATH - tzdir_orig_len,\n\t\t}\n\t\tif (S_ISDIR(statbuf.st_mode))\n\t\t}\n\t\t\t\t*bestscore = score;", "partial_line": "strlcpy(bestzonename, tzdirsub, TZ_", "completion": "strlcpy(bestzonename, tzdirsub, TZ_STRLEN_MAX + 1); <|endoftext|>"}
{"context": "\t\tParseNamespaceItem *nsitem;\n\t\trtr = makeNode(RangeTblRef);\n\t{\n\t\t\tnsitem = transformJsonTable(pstate, (JsonTable *) n);\n\telse if (IsA(n, RangeTableSample))", "partial_line": "RangeTableSample *", "completion": "RangeTableSample *rts = (RangeTableSample *) n; <|endoftext|>"}
{"context": "static const symbol s_3_2[2] = { 0xD6, 0x81 };\nstatic const symbol s_3_15[2] = { 0xD5, 0xA4 };\nstatic const symbol s_3_20[14] = { 0xD5, 0xB8, 0xD6, 0x82, 0xD5, 0xA9, 0xD5, 0xB5, 0xD5, 0xA1, 0xD5, 0xB6, 0xD5, 0xA4 };\nstatic const symbol s_3_21[8] = { 0xD5, 0xBE, 0xD5, 0xA1, 0xD5, 0xB6, 0xD5, 0xA4 };\nstatic const symbol s_3_32[8] = { 0xD5, 0xB6, 0xD5, 0xA5, 0xD6, 0x80, 0xD5, 0xAB };", "partial_line": "static const symbol s_3_47[14] = { 0xD5, 0xB8, 0xD6, 0x82, 0xD5, 0xA9, 0xD5, 0xB5, 0", "completion": "static const symbol s_3_47[14] = { 0xD5, 0xB8, 0xD6, 0x82, 0xD5, 0xA9, 0xD5, 0xB5, 0xD5, 0xA1, 0xD5, 0xB6, 0xD5, 0xB6 }; <|endoftext|>"}
{"context": "\t\t\t\tcase PqMsg_ErrorResponse:\n\t\t\t\t\tif (pqGetErrorNotice3(conn, true))\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   PGRES_PIPELINE_SYNC);\n\t\t\t\t\t}", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "{\n\t\treturn;\n\t\t\t\tbreak;\n\t\t\t\t{\n\t\t\t\t\tnumeric    *num;", "partial_line": "ECPGset_noind_null(ECPGt_numer", "completion": "ECPGset_noind_null(ECPGt_numeric, sqlda->sqlvar[i].sqldata); <|endoftext|>"}
{"context": "\t\t\tmergestate->mj_FillInner = true;\n\t\t\tmergestate->mj_NullOuterTupleSlot =\n\t\t\t\tExecInitNullTupleSlot(estate, innerDesc, &TTSOpsVirtual);\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t\t\tnode->mergeFamilies,", "partial_line": "node->", "completion": "node->mergeReversals, <|endoftext|>"}
{"context": "{\n\t\t\tts1 = te1;\n\t\tts2 = te2;\n\t\t{\n\t\t}", "partial_line": "if (TIMET", "completion": "if (TIMETZ_GT(ts1, ts2)) <|endoftext|>"}
{"context": "\tprefs = &streamer->prefs;\n\tpg_fatal(\"this build does not support compression with %s\", \"LZ4\");\n\treturn NULL;\t\t\t\t\n\tnext_in = (uint8 *) data;\n\t\t\t\t\t\t LZ4F_getErrorName(compressed_size));", "partial_line": "enlargeStringInfo(&mystreamer->base.bbs_b", "completion": "enlargeStringInfo(&mystreamer->base.bbs_buffer, out_bound); <|endoftext|>"}
{"context": "\t\t\t\tget_rule_expr((Node *) coalesceexpr->args, context, true);\n\t\t\t\tMinMaxExpr *minmaxexpr = (MinMaxExpr *) node;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tappendStringInfoString(buf, \"LEAST(\");\n\t\t\t\tget_rule_expr((Node *) minmaxexpr->args, context, true);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "            }\n            break;\n            {   int ret = slice_from_s(z, 1, s_13);\n    }\n            if (ret < 0) return ret;", "partial_line": "z->lb = z->c;", "completion": "z->lb = z->c; z->c = z->l; <|endoftext|>"}
{"context": "\tint\t\t\tntups;\n\tint\t\t\ti_cfgname;\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);\n\tcfginfo = (TSConfigInfo *) pg_malloc(ntups * sizeof(TSConfigInfo));\n\ti_oid = PQfnumber(res, \"oid\");", "partial_line": "selectDum", "completion": "selectDumpableObject(&(cfginfo[i].dobj), fout); <|endoftext|>"}
{"context": "\tsourceNullLen = (hasNulls ? BITMAPLEN(sourceNatts) : 0);\n\t{\n\t\t{\n\t\t{\n\t}", "partial_line": "if (ha", "completion": "if (hasNulls) <|endoftext|>"}
{"context": "\t{\n\treturn true;\n{\n\tneeded += variables->nvars;\n\t\t\tpg_realloc(variables->vars, variables->max_vars * sizeof(Variable));", "partial_line": "var = lookupVariable(varia", "completion": "var = lookupVariable(variables, name); <|endoftext|>"}
{"context": "\t\t\t\t\tpg_time_t\tstamp_time = (pg_time_t) time(NULL);\n\t\t\t\t{\n\t\t\t\t\tif (padding != 0)\n\t\t\t\t\t\tappendStringInfoString(buf, strfbuf);\n\t\t\tcase 's':", "partial_line": "if", "completion": "if (padding != 0) <|endoftext|>"}
{"context": "\t\t}\n\t\t}\n\t\telse\n\t\t\tLLVMBuildBr(b, b_out);\n\t\tv_off = LLVMBuildTrunc(b, v_off, LLVMInt32TypeInContext(lc), \"\");", "partial_line": "LLVMBu", "completion": "LLVMBuildRetVoid(b); <|endoftext|>"}
{"context": "\t\t\t\tleftmax,\n\t*leftstart = *rightstart = 0.0;\n\t*leftend = *rightend = 1.0;\n\texamine_variable(root, left, 0, &leftvar);\n\t{", "partial_line": "op_lefttype,", "completion": "op_lefttype, op_righttype, <|endoftext|>"}
{"context": "\t\t\tlowerIndx[0] = lb[0];\n\t\t\tupperIndx[0] = dim[0] + lb[0] - 1;\n\t\t\t\t\t\t errmsg(\"array size exceeds the maximum allowed (%d)\",\n\t\t\t\t\t\t(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),\n\t\t\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_ARRAY_S", "completion": "(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR), <|endoftext|>"}
{"context": "\tPLAN,\nstatic int\tmax_concurrent_tests = 0;\nstatic char *hostname = NULL;\nstatic int\tport = -1;\nstatic bool port_specified_by_user = false;", "partial_line": "static con", "completion": "static const char *sockdir; <|endoftext|>"}
{"context": "\t\t\t\t\treturn true;\t\n\t\t\t}\n\t\t}\n\tQuery\t   *parse = root->parse;\n\tListCell   *gl;", "partial_line": "if (equal(gc", "completion": "if (equal(gc, sc)) <|endoftext|>"}
{"context": "\t\t\t\tCopyStmt   *stmt = (CopyStmt *) parsetree;\n\t\tcase T_LockStmt:\n\t\t\t{\n\t\t\t\telog(ERROR, \"unrecognized TransactionStmtKind: %d\",\n\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_", "completion": "(errcode(ERRCODE_READ_ONLY_SQL_TRANSACTION), <|endoftext|>"}
{"context": "\tconst uint64 mv = 4 * m2;\n\t\tconst uint32 q = log10Pow2(e2) - (e2 > 3);\n\t\tvr = mulShiftAll(m2, DOUBLE_POW5_INV_SPLIT[q], i, &vp, &vm, mmShift);\n\t\t\t}\n\t\t\t{", "partial_line": "vmIsTr", "completion": "vmIsTrailingZeros = mmShift == 1; <|endoftext|>"}
{"context": "#else\n#include \"postgres_fe.h\"\n#define PG_U_LC_MASK (PG_U_LU_MASK|PG_U_LL_MASK|PG_U_LT_MASK)", "partial_line": "#define PG_U_PC_MASK PG_U_", "completion": "#define PG_U_PC_MASK PG_U_CATEGORY_MASK(PG_U_CONNECTOR_PUNCTUATION) <|endoftext|>"}
{"context": "\tpath->closed = true;\n}\n\t\tb1.high.y = float8_max(p1->p[i].y, b1.high.y);\n\tif (!box_ov(&b1, &b2))\n\t\t\tiprev = i - 1;", "partial_line": "if (!p2->", "completion": "if (!p2->closed) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  syscatalog, &schemas, &tables, &indexes);\n\t\t\treindex_one_database(&cparams, REINDEX_DATABASE, NULL,\n\t}\n\texit(0);\n\t\t\t\t\t SimpleStringList *user_list,", "partial_line": "if (tablespace", "completion": "if (tablespace && PQserverVersion(conn) < 140000) <|endoftext|>"}
{"context": "\t\tcase EXPR_KIND_WINDOW_PARTITION:\n\t\t\tif (isAgg)\n\t\tcase EXPR_KIND_OFFSET:\n\t\tcase EXPR_KIND_VALUES_SINGLE:\n\t\t\telse", "partial_line": "case EXPR", "completion": "case EXPR_KIND_COLUMN_DEFAULT: <|endoftext|>"}
{"context": "#include \"catalog/pg_tablespace_d.h\"\n#include \"miscadmin.h\"\nstatic char *\n\t}\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),", "partial_line": "errmsg(\"path must be in or below", "completion": "errmsg(\"path must be in or below the data directory\"))); <|endoftext|>"}
{"context": "}\n\t{\n\t\tbool\t\tisfirst = false;\n\t\t\tappendStringInfoText(state, delim);\n\t}", "partial_line": "PG_RETURN_", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "\t\t\t\tNumeric\t\tstop_num;\n\t\t\t\tif (NUMERIC_IS_SPECIAL(start_num) ||\n\t\t\t\t\tNUMERIC_IS_SPECIAL(stop_num))\n\t\t\t\t{\n\t\t\t\t\tNumericVar\tstart;", "partial_line": "init_var_f", "completion": "init_var_from_num(stop_num, &stop); <|endoftext|>"}
{"context": "\tswitch (inforec->api_version)\n\tlanguageStruct = (Form_pg_language) GETSTRUCT(languageTuple);\n\t\t\t\t\t\t   CurrentMemoryContext, true);\n}\n\tif (infofunc == NULL)", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tfmgr_info(get_opcode(expr->opno), &opproc);\n\t\t\t\tif (item->isnull[idx] || cst->constisnull)\n\t\t\t\tif (RESULT_IS_FINAL(matches[i], is_or))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   item->values[idx],\n\t\t{", "partial_line": "Fmgr", "completion": "FmgrInfo\topproc; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tif (clause_is_strict_for((Node *) lfirst(lc), subexpr, false))\n\t}\n\t\treturn clause_is_strict_for((Node *) ((ArrayCoerceExpr *) clause)->arg,\n\t\t\t\t\t\t\t\t\tsubexpr, false);", "partial_line": "if (IsA(clau", "completion": "if (IsA(clause, CoerceToDomain)) <|endoftext|>"}
{"context": "{\n{\n#define token_is_member_check(t)\t(!t->quoted && t->string[0] == '+')\n\t\"ldap\",\n};", "partial_line": "\"UserAuthName[] mu", "completion": "\"UserAuthName[] must match the UserAuth enum\"); <|endoftext|>"}
{"context": "static const symbol s_2_814[4] = { 'i', 'v', 'e', 'g' };\nstatic const symbol s_2_833[6] = { 0xC4, 0x8D, 'i', 'n', 'o', 'g' };\nstatic const symbol s_2_835[4] = { 'a', 't', 'o', 'g' };\nstatic const symbol s_2_854[4] = { 'u', 'r', 'a', 'h' };\nstatic const symbol s_2_856[4] = { 'a', 'v', 'a', 'h' };", "partial_line": "static const symbol s_2_861[5]", "completion": "static const symbol s_2_861[5] = { 'a', 0xC4, 0x8D, 'a', 'h' }; <|endoftext|>"}
{"context": "\t\t\t\t\tdecompile_column_index_array(val, conForm->conrelid, false, &buf);\n\t\t\t\tOid\t\t\tindexId;\n\t\t\t\t\tappendStringInfoString(&buf, \" WITHOUT OVERLAPS\");\n\t\t\t\t\tcols = SysCacheGetAttrNotNull(INDEXRELID, indtup,\n\t\t\t\t\tdeconstruct_array_builtin(DatumGetArrayTypeP(cols), INT2OID,", "partial_line": "if (fullCommand &&", "completion": "if (fullCommand && OidIsValid(indexId)) <|endoftext|>"}
{"context": "\t\tchar\t   *area_space;\n\td.pcxt = pcxt;\n\testate->es_query_dsa = NULL;\n\tExecSetParamPlanMulti(sendParams, GetPerTupleExprContext(estate));\n\tif (DsaPointerIsValid(fpes->param_exec))", "partial_line": "stati", "completion": "static bool <|endoftext|>"}
{"context": "\t\t\tExpr\t   *clause = (Expr *) lfirst(lc);\n\t\t\tindexquals = lappend(indexquals,\n\t\treturn iclause;\n\t}\n\tif (!saop->useOr)", "partial_line": "if (match_", "completion": "if (match_index_to_operand(leftop, indexcol, index) && <|endoftext|>"}
{"context": "\t\t\t\t paramname, ZSTD_getErrorName(res));\n\t\t\t\t\t\t\t\t   ZSTD_c_enableLongDistanceMatching,\n\tZstdCompressorState *zstdcs = (ZstdCompressorState *) cs->private_data;\n\tZSTD_outBuffer *output = &zstdcs->output;\n{", "partial_line": "pg_free(z", "completion": "pg_free(zstdcs); <|endoftext|>"}
{"context": "\t\t\t\t\t   PROCESS_UTILITY_SUBCOMMAND,\n\t\t\t\t\t   NULL);\n{\n\tAclResult\taclresult;\n\t\taclcheck_error(aclresult, OBJECT_DATABASE,", "partial_line": "get_database_nam", "completion": "get_database_name(MyDatabaseId)); <|endoftext|>"}
{"context": "void\nprint_tar_number(char *s, int len, uint64 val)", "partial_line": "s[--len]", "completion": "s[--len] = (val & 7) + '0'; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t isDependentType,\nGenerateTypeDependencies(HeapTuple typeTuple,\n\t\t\t\t\t\t bool makeExtensionDep,\n\t\tif (!isNull)\n\t\tdeleteSharedDependencyRecordsFor(TypeRelationId, typeObjectId, 0);", "partial_line": "typeForm->typo", "completion": "typeForm->typowner, typacl); <|endoftext|>"}
{"context": "        z->ket = z->c;\n                if (ret < 0) return ret;\n        case 3:\nstatic int r_consonant_pair(struct SN_env * z) {\n            mlimit2 = z->lb; z->lb = z->I[1];", "partial_line": "z-", "completion": "z->c = ret; <|endoftext|>"}
{"context": "\t\tAssert(!found);\n\t\thentry->gucvar = gucvar;\n\tfor (i = 0; ConfigureNamesInt[i].gen.name; i++)\n\t\tstruct config_generic *gucvar = &ConfigureNamesInt[i].gen;\n\t\t\t\t\t\t\t\t\t\t\t  HASH_ENTER,", "partial_line": "hentry-", "completion": "hentry->gucvar = gucvar; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tbool\t\tdetach_pending;\n\t\t\tif (!detach_pending && expect_detach_pending)\n\t\t\t\t\t\t errdetail(\"There's no pending concurrent detach.\")));\n\t\t}", "partial_line": "BTEqualStrat", "completion": "BTEqualStrategyNumber, F_OIDEQ, <|endoftext|>"}
{"context": "\t\t\t\t NULL, useroid, \n\t\t\t\t init_flags,\nRegisterBackgroundWorker(BackgroundWorker *worker)\n\tRegisteredBgWorker *rw;\n\t\t\t worker->bgw_name);", "partial_line": "r", "completion": "return; <|endoftext|>"}
{"context": "                {   int ret = slice_from_s(z, 6, s_62);\n                break;\n                    if (ret < 0) return ret;\n                    if (ret < 0) return ret;\n                }", "partial_line": "if (ret < 0)", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "{\n\t\t\tAssert(off == od->write.offset);\n\t\t\tbreak;\n{\n\t\t\t\t\t\t  MyProcNumber : INVALID_PROC_NUMBER,", "partial_line": "sd-", "completion": "sd->smgr.blockNum, <|endoftext|>"}
{"context": "                ;\n}\n        case 1:\n        case 2:\n            }", "partial_line": "z->ket =", "completion": "z->ket = z->c; <|endoftext|>"}
{"context": "\t\t\t\tif (!attname)\n\t\t\t\tif (proname == NULL)\n\t\t\t\tSysScanDesc rcscan;\n\t\t\t\ttup = systable_getnext(rcscan);\n\t\t\t\t{", "partial_line": "table_close(castDes", "completion": "table_close(castDesc, AccessShareLock); <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\tcase ECPGt_timestamp:\n\t\t\t\t\t\t\tecpg_free(str);\n\t\t\t\tbreak;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "{ 4, s_0_9, -1, -1, 0}\n{ 4, s_1_0, -1, -1, 0},\n{\nstatic const symbol s_4_1[1] = { 'e' };\n{ 2, s_6_2, -1, -1, 0},", "partial_line": "{ 2, s_6_3,", "completion": "{ 2, s_6_3, -1, -1, 0} <|endoftext|>"}
{"context": "\t\t  enum char_classes cls,\n\t\t\t\t\tstruct state *rp)\n\tNOTE(REG_ULOCALE);\n{\n\t\t\tbreak;", "partial_line": "NOE", "completion": "NOERR(); <|endoftext|>"}
{"context": "}\n        case 1:\n            {   int ret = slice_del(z);\n            {   int ret = slice_from_s(z, 1, s_7);\n            {   int ret = slice_from_s(z, 1, s_8);", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\tDatumGetPointer(ExecEvalExprSwitchContext(tidexpr->exprstate,\n\t\t\t\t\t\t\t numAllocTids * sizeof(ItemPointerData));\n\t\telse if (tidexpr->exprstate && tidexpr->isarray)\n\t\t\t\tif (!table_tuple_tid_valid(scan, itemptr))\n\t\t\t}", "partial_line": "pfree(ipnu", "completion": "pfree(ipnulls); <|endoftext|>"}
{"context": "\t\t\tentry->relkind != RELKIND_PARTITIONED_TABLE)\n\t\t\t\t\t\t\t  entry->toast_index_oid);\nvoid\n\tPGresult   *res;\n\t\t\t\t\t\t \"n.nspowner, \"", "partial_line": "\"FRO", "completion": "\"FROM pg_namespace n\"); <|endoftext|>"}
{"context": "#ifdef WAL_DEBUG\n\t\t\t\t\t\t\t\t LSN_FORMAT_ARGS(xlogreader->ReadRecPtr),\n\t\t\t\txlog_outrec(&buf, xlogreader);\n\t\t\t}\n\t\t\t{", "partial_line": "if (recoveryApplyDelay(x", "completion": "if (recoveryApplyDelay(xlogreader)) <|endoftext|>"}
{"context": "\t}\nHeapTuple\n{\n\tReleaseSysCache(tuple);\nHeapTuple", "partial_line": "if (!", "completion": "if (!HeapTupleIsValid(tuple)) <|endoftext|>"}
{"context": "\t\tAssert(state1->element_type == state2->element_type);\n\t\t\t\t\t\t\t\t\t\t\t\t state1->alen * sizeof(Datum));\n\t\tfor (int i = 0; i < state2->nelems; i++)\n\t\t\t\t\tdatumCopy(state2->dvalues[i],\nDatum", "partial_line": "Assert(AggCheckCallContex", "completion": "Assert(AggCheckCallContext(fcinfo, NULL)); <|endoftext|>"}
{"context": "\t\tereturn(escontext, 0,\n\t\tif (pg_strncasecmp(num, \"NaN\", 3) == 0)\n\t\t{\n\t\t{\n\t\t\tendptr = num + 9;", "partial_line": "val = get_float4", "completion": "val = get_float4_infinity(); <|endoftext|>"}
{"context": "\t\t\t\treturn iswpunct_l((wint_t) c, pg_regex_locale->info.lt);\n\t\t\treturn (c <= (pg_wchar) 127 &&\n\t\t\tbreak;\n\t\tcase PG_REGEX_STRATEGY_C:\nstatic pg_wchar", "partial_line": "if (c <= (pg_wc", "completion": "if (c <= (pg_wchar) UCHAR_MAX) <|endoftext|>"}
{"context": "\t\t\t\tif (!ropt->selIndex)\n\t\t\t\t\treturn 0;\n\t\t\telse if (strcmp(te->desc, \"TRIGGER\") == 0)\n\tif (!te->hadDumper)\n\t\t\t strncmp(te->tag, \"LARGE OBJECT\", 12) == 0) ||", "partial_line": "if (!te->def", "completion": "if (!te->defn || !te->defn[0] || <|endoftext|>"}
{"context": "#include \"access/twophase_rmgr.h\"\n\tbool\t\tshared;\t\t\t\npgstat_copy_relation_stats(Relation dst, Relation src)", "partial_line": "PgSta", "completion": "PgStat_EntryRef *dst_ref; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  Oid dbId, Oid catId)\n{\n\t\t\t\t\t\t\t  Oid dbId, Oid relId)\n\tSharedInvalidationMessage msg;\n\tAddInvalidationMessage(group, RelCacheMsgs, &msg);", "partial_line": "msg->s", "completion": "msg->sn.relId == relId) <|endoftext|>"}
{"context": "\t\tcase WITHOUT:\n\t\tdefault:\n\tyyextra->lookahead_end = yyextra->core_yy_extra.scanbuf +\n\t\tcase NOT:\n\t\t\t\tcase BETWEEN:", "partial_line": "case S", "completion": "case SIMILAR: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t\t\terrdetail(\"MERGE is not supported for views with INSTEAD OF triggers for some actions but not all.\"),\n\t}\n\t}\n\tnew_rt_index = list_length(parsetree->rtable);", "partial_line": "new_rte->inh", "completion": "new_rte->inh = false; <|endoftext|>"}
{"context": "\tMemoryChunk *freehead;\t\t\n} SlabBlock;\n#if defined(MEMORY_CONTEXT_CHECKING) || defined(USE_ASSERT_CHECKING)\n#define SlabChunkIndex(slab, block, chunk)\t\\\n#define SlabChunkMod(slab, block, chunk)\t\\", "partial_line": "if", "completion": "if (nfree == 0) <|endoftext|>"}
{"context": "\t\trelation->rd_index->indisexclusion = index->indisexclusion;\n\t\trelation->rd_index->indisclustered = index->indisclustered;\nstatic void\n\tif (relation->rd_rel)\n\tif (--relation->rd_att->tdrefcount == 0)", "partial_line": "if (remember", "completion": "if (remember_tupdesc) <|endoftext|>"}
{"context": "\tif (!isNull)\n\t{\n\t\tAlterTypeOwnerInternal(typTup->typarray, newOwnerId);\n\t\tOid\t\t\tmultirange_typeid = get_range_multirange(typeOid);\n\tObjectAddress myself;", "partial_line": "if (objecttype == OBJECT_DOMAIN && get_typty", "completion": "if (objecttype == OBJECT_DOMAIN && get_typtype(typeOid) != TYPTYPE_DOMAIN) <|endoftext|>"}
{"context": "\toffset = multirange_get_bounds_offset(multirange, i);\n\tptr = begin = MultirangeGetBoundariesPtr(multirange, typalign) + offset;\nvoid\nmultirange_get_bounds(TypeCacheEntry *rangetyp,\n\tuint32\t\toffset;", "partial_line": "Datum\t\tl", "completion": "Datum\t\tlbound; <|endoftext|>"}
{"context": "\treturn makeJsonConstructorExpr(pstate, ctor_type, NIL, (Expr *) node,\n\t\t\t\t\t\t\t\t   returning, unique, absent_on_null,\ntransformJsonObjectAgg(ParseState *pstate, JsonObjectAgg *agg)\n\tList\t   *args;\n\tif (returning->format->format_type == JS_FORMAT_JSONB)", "partial_line": "if (agg->absent_", "completion": "if (agg->absent_on_null) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t{\n\t\t\tstate->memtuples[state->memtupcount++] = *tuple;\nconsider_abort_common(Tuplesortstate *state)\n\t\tstate->memtupcount >= state->abbrevNext)", "partial_line": "else if (", "completion": "else if (WORKER(state)) <|endoftext|>"}
{"context": "static void test_pattern(const test_spec *spec);\nstatic void test_single_value_and_filler(uint64 value, uint64 filler_min, uint64 filler_max);\nDatum\n\ttest_empty();\n\ttest_single_value(PG_UINT64_MAX - 1);", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\tMemoryContextSwitchTo(oldCtx);\n\tGinNullCategory category;\n\t\t\t\t\t\t\t   list, nlist, &tuplen);\n\t\tginFlushBuildState(buildstate, index);\n\tfor (i = 0; i < buildstate->ginstate.origTupdesc->natts; i++)", "partial_line": "values[i], isnul", "completion": "values[i], isnull[i], tid); <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\t\t errmsg(\"cannot convert circle with radius zero to polygon\")));\n\tint\t\t\ti;\n\tresult->center.y = 0;\n\tresult = (CIRCLE *) palloc(sizeof(CIRCLE));", "partial_line": "poly_to_circle(re", "completion": "poly_to_circle(result, poly); <|endoftext|>"}
{"context": "\t\tpartitioned = false;\n\tif (stmt->relation->relpersistence == RELPERSISTENCE_TEMP\n\t\t\t\t\t  ShareUpdateExclusiveLock);\n\t\ttablespaceId = get_tablespace_oid(stmt->tablespacename, false);\n\t\tif (partitioned && tablespaceId == MyDatabaseTableSpace)", "partial_line": "errmsg(\"cannot specify defau", "completion": "errmsg(\"cannot specify default tablespace for partitioned relations\"))); <|endoftext|>"}
{"context": "static const symbol s_7_8[3] = { 'y', 'e', 's' };\n{ 2, s_7_6, -1, 1, 0},\nstatic const symbol s_8_4[4] = { 'i', 'e', 'r', 'a' };\nstatic const symbol s_8_5[2] = { 0xED, 'a' };\nstatic const symbol s_8_6[4] = { 'a', 'r', 0xED, 'a' };", "partial_line": "static co", "completion": "static const symbol s_8_11[2] = { 'i', 'd' }; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tNEXT();\n\t\tdefault:\n\t\t\treturn;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\treturn DatumGetChar(a) == DatumGetChar(b);\n}\nnameeqfast(Datum a, Datum b)\nstatic uint32\nstatic uint32", "partial_line": "return murmurhash32(", "completion": "return murmurhash32((int32) DatumGetInt32(datum)); <|endoftext|>"}
{"context": "#define ATT_IS_PACKABLE(att) \\\n#define VARLENA_ATT_IS_PACKABLE(att) \\\n\tint\t\t\tlen;\nstatic uint32", "partial_line": "missing_match(cons", "completion": "missing_match(const void *key1, const void *key2, Size keysize) <|endoftext|>"}
{"context": "#include \"access/commit_ts.h\"\n#include \"access/hash_xlog.h\"\n#include \"access/spgxlog.h\"\n#include \"replication/message.h\"\n\t{ name, desc, identify},", "partial_line": "static char CustomNumericNames[RM_N_CUSTOM_IDS][CUSTOM_", "completion": "static char CustomNumericNames[RM_N_CUSTOM_IDS][CUSTOM_NUMERIC_NAME_LEN] = {0}; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t UPPERREL_PARTIAL_GROUP_AGG,\n\t\t\t\t\t\t\t\t\t\t extra);\n}\n\t\t\t(presorted_keys == 0 || !enable_incremental_sort))\n\t\t\tpath = (Path *) create_sort_path(root,", "partial_line": "return", "completion": "return path; <|endoftext|>"}
{"context": "}\n\tLINE\t   *l1 = PG_GETARG_LINE_P(0);\n\t\tPG_RETURN_BOOL(FPzero(l1->B));\nDatum\n\tLINE\t   *l1 = PG_GETARG_LINE_P(0);", "partial_line": "LINE\t   *l", "completion": "LINE\t   *l2 = PG_GETARG_LINE_P(1); <|endoftext|>"}
{"context": "\tforeach(l, root->append_rel_list)\n\t\tAppendRelInfo *appinfo = (AppendRelInfo *) lfirst(l);\n\t\tAssert(childrte != NULL);\n\t\t\texpand_inherited_rtentry(root, childrel, childrte, childRTindex);\n\tListCell   *lc;", "partial_line": "chi", "completion": "childquals = NIL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  sjinfo->semi_rhs_exprs,\n\t\t\tif (rowcount > nunique)\n\twhile ((relid = bms_next_member(relids, relid)) >= 0)\n\t}\n}", "partial_line": "RestrictInfo *rinfo = (Restric", "completion": "RestrictInfo *rinfo = (RestrictInfo *) lfirst(lc); <|endoftext|>"}
{"context": "static XLogRecPtr GetLatestLSN(TimeLineID *tli);\n\t\t\t\t\t\t\t   bool exact, XLogRecPtr switch_lsn,\nstatic void SummarizeDbaseRecord(XLogReaderState *xlogreader,\nstatic void SummarizeSmgrRecord(XLogReaderState *xlogreader,\nstatic bool SummarizeXlogRecord(XLogReaderState *xlogreader,", "partial_line": "XLogRecPtr target", "completion": "XLogRecPtr targetPagePtr, <|endoftext|>"}
{"context": "#include \"access/commit_ts.h\"\n#include \"access/syncscan.h\"\n#include \"postmaster/bgwriter.h\"", "partial_line": "#incl", "completion": "#include \"storage/pg_shmem.h\" <|endoftext|>"}
{"context": "}\n\t\t\tint\t\t\tfinalbit = attnum & 0x07;\n\t\t\t\tslow = true;\n\t\t\t\tfor (i = 0; i < byte; i++)\n\tif (!slow)", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (update_colnos)\n\t\tAssert(bms_is_member(relid, root->all_result_relids));\n\t\t*processed_tlist = (List *)\n\t\t\t\t\t\t\t\t\t\t\t\t\trelid,\n\t\t\t\t\t\t\t\t\t\t\t\t\troot->parse->resultRelation);", "partial_line": "int", "completion": "int\t\t\tcnt = 0; <|endoftext|>"}
{"context": "\t\t\ttag = CMDTAG_LOAD;\n\t\t\tswitch (((CreateTableAsStmt *) parsetree)->objtype)\n\t\t\t\t\ttag = CMDTAG_CREATE_MATERIALIZED_VIEW;\n\t\t\tbreak;\n\t\tcase T_VariableShowStmt:", "partial_line": "cas", "completion": "case T_DiscardStmt: <|endoftext|>"}
{"context": "\tMyProc->clogGroupMemberXidStatus = TRANSACTION_STATUS_IN_PROGRESS;\n\tInitDeadLockChecking();\nvoid\n\t\telog(PANIC, \"proc header uninitialized\");\n\t}", "partial_line": "MyPr", "completion": "MyProc->statusFlags = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t TriggerData *trigdata)\n\testate.trigdata = trigdata;\n\trec_new->erh = make_expanded_record_from_tupdesc(tupdesc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t estate.datum_context);\n\tif (!TRIGGER_FIRED_FOR_ROW(trigdata->tg_event))", "partial_line": "TRIGGER_FIRED_BEFORE(tri", "completion": "TRIGGER_FIRED_BEFORE(trigdata->tg_event)) <|endoftext|>"}
{"context": "\tResetTupleHashIterator(aggstate->perhash[batch->setno].hashtable,\n\t\t\t\t\t\t   &aggstate->perhash[batch->setno].hashiter);\n\tTupleTableSlot *result = NULL;\n\t\t\tif (!agg_refill_hash_table(aggstate))\n\t\t\t{", "partial_line": "stat", "completion": "static TupleTableSlot * <|endoftext|>"}
{"context": "#include \"utils/rls.h\"\nstatic bool BuildingPlanRequiresSnapshot(CachedPlanSource *plansource);\nstatic Query *QueryListGetPrimaryStmt(List *stmts);", "partial_line": "static bool Scan", "completion": "static bool ScanQueryWalker(Node *node, bool *acquire); <|endoftext|>"}
{"context": "\t\t\t&& isxdigit((unsigned char) *(p + 5))\n\t\tint16\t\telmlen;\n\t\tDatum\t   *elem_values;\n\t\tdeconstruct_array(array, elmtype,\n\t\t\t\t\t\t  elmlen, elmbyval, elmalign,", "partial_line": "&elem_values,", "completion": "&elem_values, &elem_nulls, <|endoftext|>"}
{"context": "\t\t\t\t\t\tif (nspname)\n\t\t\t\t\t\t\t\t\t\t\t _(\"default privileges on new sequences belonging to role %s in schema %s\"),\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t rolename, nspname);\n\t\t\t\t\t\t\tappendStringInfo(&buffer,", "partial_line": "rolename, nsp", "completion": "rolename, nspname); <|endoftext|>"}
{"context": "#ifdef FPM_EXTRA_ASSERTS\n\tAssert(fpm->free_pages == sum_free_pages(fpm));\n#endif\n\treturn result;\nstatic void", "partial_line": "Assert(btp->hdr.magic == FREE_P", "completion": "Assert(btp->hdr.magic == FREE_PAGE_INTERNAL_MAGIC || <|endoftext|>"}
{"context": "};\nstatic const symbol s_3_4[3] = { 'a', 'd', 'h' };\nstatic const symbol s_3_7[4] = { 'f', 'i', 'd', 'h' };\n{ 3, s_3_4, -1, 2, 0},\n{ 4, s_3_10, -1, 2, 0},", "partial_line": "static const unsigned char g_v", "completion": "static const unsigned char g_v[] = { 17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 2 }; <|endoftext|>"}
{"context": "\t}\n\t\tgoto reject;\n\t\tereport(LOG,\n\t\t\t\t(errmsg(\"direct SSL connection accepted\")));\n\t\tif (!ssl_done && !gss_done)", "partial_line": "if (!LoadedSSL || port->laddr.addr.ss_family", "completion": "if (!LoadedSSL || port->laddr.addr.ss_family == AF_UNIX || port->ssl_in_use) <|endoftext|>"}
{"context": "\treturn node;\n\t\tint\t\t\tndistance,\n\t\tnode->left = clean_stopword_intree(node->left, &lladd, &lradd);\n\t\tnode->right = clean_stopword_intree(node->right, &rladd, &rradd);\n\t\telse if (node->left == NULL)", "partial_line": "*ladd", "completion": "*ladd = lladd; <|endoftext|>"}
{"context": "\t\t\telse\n\t\tAlterTableCmd *atcmd;\n\t\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\t\tStoreViewQuery(viewOid, viewParse, replace);\n\t\tcreateStmt->inhRelations = NIL;", "partial_line": "createStmt", "completion": "createStmt->if_not_exists = false; <|endoftext|>"}
{"context": "\t{\n\tsystable_endscan(scan);\n\tForm_pg_constraint con;\n\tForm_pg_constraint copy_con;\n\t\tfkconstraint = makeNode(Constraint);", "partial_line": "newcon->re", "completion": "newcon->refrelid = con->confrelid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t  typcache->rng_collation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  upper.val, lower.val));\n\t\t}\n\tslot_idx = 0;\n\t\t\t\t\tdelta,", "partial_line": "de", "completion": "deltafrac, <|endoftext|>"}
{"context": "#define WORDNUM(x)\t((x) / BITS_PER_BITMAPWORD)\ntypedef struct BlocktableEntry\n\tstruct\n\t\tuint8\t\tflags;\n\t\tuint8\t\tflags;", "partial_line": "} Blocktable", "completion": "} BlocktableEntry; <|endoftext|>"}
{"context": "\t\t\tAssert(rawc->name);\n\t\t\t\tif (ordinality_found)\n\t\t\t\tbreak;\n\t\t\t\t\tjfe = transformJsonTableColumn(rawc, (Node *) param,\n\t\t\t\telog(ERROR, \"unknown JSON_TABLE column type: %d\", (int) rawc->coltype);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tdefault:\n{\n\t{\npqsecure_raw_write(PGconn *conn, const void *ptr, size_t len)\n\tchar\t\tmsgbuf[1024];", "partial_line": "if (", "completion": "if (conn->sigpipe_flag) <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t\tctype),\n#ifdef WIN32\n\t\t\t\t\t\tcollate),\n{", "partial_line": "ForgetDatabase", "completion": "ForgetDatabaseSyncRequests(fparms->dest_dboid); <|endoftext|>"}
{"context": "\tOffsetNumber finalusedlp = InvalidOffsetNumber;\n\tnline = PageGetMaxOffsetNumber(page);\n\t\t\tif (ItemIdHasStorage(lp))\n\t\t\t\titemidptr->offsetindex = i - 1;\n\t\t\t\telse", "partial_line": "errmsg(\"corrupted line po", "completion": "errmsg(\"corrupted line pointer: %u\", <|endoftext|>"}
{"context": "\tif (proisstrict[0] == 't')\n\t\tif (strcmp(lanname, \"internal\") == 0 || strcmp(lanname, \"c\") == 0)\n\t\t{\n\t\t\t\t\tappendStringLiteralAH(q, *nameptr, fout);\n\t\t\tpg_free(namelist);", "partial_line": "qual_fu", "completion": "qual_funcsig); <|endoftext|>"}
{"context": "\t\t\tformat = ent->format;\n#endif\n\t\tint\t\t\tx = tmfc.ssss;\n\t\ttm->tm_min = x / SECS_PER_MINUTE;\n\t\ttm->tm_sec = tmfc.ss;", "partial_line": "if (tm->tm_hour < 1 ||", "completion": "if (tm->tm_hour < 1 || tm->tm_hour > HOURS_PER_DAY / 2) <|endoftext|>"}
{"context": "\t\t\t\t\t\t tle->resno,\n\t\t}\n\t\ttle = flatCopyTargetEntry(tle);\n\t\ttle->expr = (Expr *) newvar;\n\t}", "partial_line": "itlist = (index", "completion": "itlist = (indexed_tlist *) <|endoftext|>"}
{"context": "\t\t\t\t\t bms_is_member(r, info->syn_righthand)))\n\t\t\t\t\tbreak;\n\t\t\t{\n\t\t\t\tif (rowMark->rti == k)\n\t\t\t\t{", "partial_line": "inne", "completion": "inner->relids, <|endoftext|>"}
{"context": "{\n\tacc->count += ss->count;\n\tsd->cnt = 0;\n\tsd->retries = 0;\n\t\t   EStatus estatus, int64 tries)", "partial_line": "switch (e", "completion": "switch (estatus) <|endoftext|>"}
{"context": "static void\n\tif (isnull)\n\t\tappendStringInfo(&buf,\n\t\t\t\t\t\t \"\t\ttype text CHECK (type IN ('total', 'delta')), \"\n\t\t\t\t\t\t \"\t\tvalue\tinteger)\"", "partial_line": "SetCurrentStatemen", "completion": "SetCurrentStatementStartTimestamp(); <|endoftext|>"}
{"context": "}\n\t\tPyList_SetItem(list, i, PyLong_FromLong(attr->atttypmod));\n}\nstatic Py_ssize_t\n{", "partial_line": "static P", "completion": "static PyObject * <|endoftext|>"}
{"context": "}\n\t\t\terrsave(ctx->escontext,\n\t\t\t\t\t errmsg(\"expected JSON array\")));\n\t}\n\t\t\t\t\t errhint(\"See the array element %s.\",", "partial_line": "populate_array_assi", "completion": "populate_array_assign_ndims(PopulateArrayContext *ctx, int ndims) <|endoftext|>"}
{"context": "\tfcinfo->args[2].value = arg3;\n\tfcinfo->args[3].isnull = false;\n\tfcinfo->args[4].isnull = false;\n\t\t\t\t  Datum arg3, Datum arg4, Datum arg5,\nFunctionCall8Coll(FmgrInfo *flinfo, Oid collation, Datum arg1, Datum arg2,", "partial_line": "Datu", "completion": "Datum\t\tresult; <|endoftext|>"}
{"context": "\t\tRestrictInfo *rinfo = lfirst_node(RestrictInfo, l);\n\t\t\tcontinue;\n}\n{\n\tList\t   *tidquals;", "partial_line": "List\t   *tidrang", "completion": "List\t   *tidrangequals; <|endoftext|>"}
{"context": "\t_bt_end_vacuum((Relation) DatumGetPointer(arg));\n\treturn size;\n\tbtvacinfo = (BTVacInfo *) ShmemInitStruct(\"BTree Vacuum State\",\nbytea *\nbtoptions(Datum reloptions, bool validate)", "partial_line": "{\"vacuum_cleanup_index", "completion": "{\"vacuum_cleanup_index_scale_factor\", RELOPT_TYPE_REAL, <|endoftext|>"}
{"context": "\t\tcase T_FieldSelect:\n\t\t\t\tFieldSelect *fselect = (FieldSelect *) node;\n\t\t\t\treturn (Node *) newnode;\n\t\tcase T_RelabelType:\n\t\t\t}", "partial_line": "ConvertRowtypeExpr", "completion": "ConvertRowtypeExpr *newnode; <|endoftext|>"}
{"context": "\tGinMetaPageData *metadata;\n\t{\n\t\tginxlogDeleteListPages data;\n\t\t\tpage = BufferGetPage(buffers[data.ndeleted]);\n\t\tMarkBufferDirty(metabuffer);", "partial_line": "XLogRegisterBuffer(", "completion": "XLogRegisterBuffer(0, metabuffer, <|endoftext|>"}
{"context": "\t\t\treturn;\n\t\t\t\t   system_user + matches[1].rm_so,\n\t\t\texpanded_pg_user_token = make_auth_token(expanded_pg_user, true);\n\telse\n\t\tif (case_insensitive)", "partial_line": "system", "completion": "system_user)) <|endoftext|>"}
{"context": "\tstrcat(fullname, name);\n\t\treturn NULL;\t\t\t\n\tif (strcmp(name, \"GMT\") == 0)\n\t\tif (name[0] == ':' || !tzparse(name, &tz.state, false))\n\t}", "partial_line": "get_ti", "completion": "get_timezone_offset(struct tm *tm) <|endoftext|>"}
{"context": "\tforeach(l, sortcls)\n}\n\t\t\t\t\t\t AttrNumber *grpColIdx,\n{\n\tList\t   *sub_tlist = lefttree->targetlist;", "partial_line": "AttrNumber *sort", "completion": "AttrNumber *sortColIdx; <|endoftext|>"}
{"context": "static DependencyGenerator DependencyGenerator_init(int n, int k);\n\tif (index < (state->k - 1))\n\t\t\tcurrent[index] = i;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  state->k * (state->ndependencies + 1) * sizeof(AttrNumber));\n\t\t\t\tstate->ndependencies++;", "partial_line": "AttrNumber *current = (AttrNum", "completion": "AttrNumber *current = (AttrNumber *) palloc0(sizeof(AttrNumber) * state->k); <|endoftext|>"}
{"context": "\t\t\treturn;\n\tif (proc->proname)\n}\n\tMemoryContextDelete(proc->mcxt);\n\t\treturn false;", "partial_line": "if (!(proc->fn_xmin == HeapTupleHe", "completion": "if (!(proc->fn_xmin == HeapTupleHeaderGetRawXmin(procTup->t_data) && <|endoftext|>"}
{"context": "\tif (numSupport > 0)\n\t\tScanKeyInit(&skey[0],\n\t\t\t\t\tAnum_pg_amproc_amprocfamily,\n\t\t\t\t\tAnum_pg_amproc_amprocrighttype,\n\t\t\t\t\tObjectIdGetDatum(opcentry->opcintype));", "partial_line": "InitTableAmRoutine(Rel", "completion": "InitTableAmRoutine(Relation relation) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\txid)));\n\t\t}\n\t}\n\t{\n\t{", "partial_line": "errmsg(\"corrupted", "completion": "errmsg(\"corrupted two-phase state file for transaction %u\", <|endoftext|>"}
{"context": "#define THREAD_BARRIER_WAIT(barrier) pthread_barrier_wait((barrier))\n#define LOG_STEP_SECONDS\t5\t\nstatic int\tduration = 0;\t\t\nstatic char *tablespace = NULL;\n\tchar\t   *svalue;\t\t\t", "partial_line": "do", "completion": "double\t\tmin; <|endoftext|>"}
{"context": "#include \"access/xlogrecovery.h\"\n#include \"catalog/storage.h\"\n#include \"jit/jit.h\"\n#include \"libpq/oauth.h\"", "partial_line": "#include \"pos", "completion": "#include \"postmaster/autovacuum.h\" <|endoftext|>"}
{"context": "\t\t\t\t\tint\t\t\tjumpdone = op->d.sbsref_subscript.jumpdone;\n\t\t\t\t\tLLVMValueRef v_func;\n\t\t\t\t\tLLVMValueRef v_params[3];\n\t\t\t\t\t\t\t\t\topblocks[jumpdone]);\n\t\t\tcase EEOP_SBSREF_FETCH:", "partial_line": "v_params[1] = l_p", "completion": "v_params[1] = l_ptr_const(op, l_ptr(StructExprEvalStep)); <|endoftext|>"}
{"context": "\t\t\testate->es_output_cid = GetCurrentCommandId(true);\n\testate->es_snapshot = RegisterSnapshot(queryDesc->snapshot);\n\t\tAfterTriggerBeginQuery();\n\t\t\tScanDirection direction, uint64 count)\n\t\t\t\t\tdirection,", "partial_line": "estate->es_tota", "completion": "estate->es_total_processed += estate->es_processed; <|endoftext|>"}
{"context": "\t\tcase SVFOP_CURRENT_TIMESTAMP:\n\t\t\tbreak;\n\t\tcase SVFOP_CURRENT_USER:\n\t\tcase SVFOP_USER:\n\t\t\t*op->resnull = fcinfo->isnull;", "partial_line": "case SV", "completion": "case SVFOP_CURRENT_SCHEMA: <|endoftext|>"}
{"context": "transformReturningClause(ParseState *pstate, Query *qry,\n\t\t\t\t\t\t ReturningClause *returningClause,\n\t\treturn;\t\t\t\t\t\n\t\t\t\t\t\t\terrcode(ERRCODE_SYNTAX_ERROR),\n\t\t\t\t\terrmsg(\"table name \\\"%s\\\" specified more than once\",", "partial_line": "save_next_r", "completion": "save_next_resno = pstate->p_next_resno; <|endoftext|>"}
{"context": "\t\t\t\t\t  \"UNION ALL\\n\"\n\t\t\t\t\t  \"       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\\n\",\n\t\tgoto error_return;\n{\n\tPQExpBufferData buf;", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "#include \"utils/wait_event.h\"\n\toff_t\t\tfilepos;\nstatic void bbsink_server_begin_archive(bbsink *sink,\n\t\t\t\t\t\t\t\t\t\tconst char *archive_name);\n\t.manifest_contents = bbsink_server_manifest_contents,", "partial_line": "b", "completion": "bbsink * <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\nenum dbObjectTypePriorities\n\tPRIO_FUNC,\n\tPRIO_ACCESS_METHOD,", "partial_line": "PRIO_", "completion": "PRIO_OPERATOR, <|endoftext|>"}
{"context": "const char *const *\n{\nvoid\nPQsetSSLKeyPassHook_OpenSSL(PQsslKeyPassHook_OpenSSL_type hook)\n#ifndef ENABLE_GSS", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\t\tcase F_TIMEZONE_TEXT_TIMETZ:\n\t\tcase F_OVERLAPS_TIMESTAMP_TIMESTAMP_TIMESTAMP_INTERVAL:\n\t\t\tget_rule_expr((Node *) lsecond(expr->args), context, false);\n\t\t\tget_rule_expr_paren((Node *) linitial(expr->args), context, false,\n\t\t\t\t\t   con->consttype == TEXTOID &&", "partial_line": "get_rule_expr((Nod", "completion": "get_rule_expr((Node *) linitial(expr->args), context, false); <|endoftext|>"}
{"context": "\tSPI_connect_ext(nonatomic ? SPI_OPT_NONATOMIC : 0);\n\t{\n\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t\t errmsg(\"materialize mode required, but it is not allowed in this context\")));\n\t{", "partial_line": "for (i", "completion": "for (i = 0; i < prodesc->nargs; i++) <|endoftext|>"}
{"context": "\t\tpg_fatal(\"Your installation contains logical replication slots that cannot be upgraded.\\n\"\n}\n\tUpgradeTaskReport *report = (UpgradeTaskReport *) arg;\n\tif (ntups == 0)\n\tfor (int i = 0; i < ntups; i++)", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\treturn false;\n\t\t\tif (RangeIsOrContainsEmpty(key))\n\t\t\t\treturn RangeIsOrContainsEmpty(key);\n\t\tcase RANGESTRAT_OVERLEFT:\n\t\tcase RANGESTRAT_OVERLAPS:", "partial_line": "return range_overlaps_mul", "completion": "return range_overlaps_multirange_internal(typcache, key, query); <|endoftext|>"}
{"context": "\t\t\tif (bms_is_empty(items[j].depends_on))\n\t\t}\n}\n\t\t\tereport(ERROR,\n\t\tif (stmt->limitOffset)", "partial_line": "(errcode", "completion": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "\telse if (errinfo->relkind == RELKIND_PARTITIONED_INDEX)\n\tList\t   *inhoids;\n\terrinfo.relnamespace = pstrdup(relnamespace);\n\terrcallback.arg = &errinfo;\n\terror_context_stack = errcallback.previous;", "partial_line": "inhoids = find_all_inheritors(relid,", "completion": "inhoids = find_all_inheritors(relid, ShareLock, NULL); <|endoftext|>"}
{"context": "\t}\n\tif (!entry->replicate_valid)\n\t\t\tMemoryContextReset(data->pubctx);\n\t\t}\n\t\tentry->attrmap = NULL;", "partial_line": "if (am_par", "completion": "if (am_partition) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t Bitmapset *unused_cols);\nAcquireRewriteLocks(Query *parsetree,\n\t\t\t\t\tbool forExecute,\n\tint\t\t\trt_index;\n\tcontext.for_execute = forExecute;", "partial_line": "Index\t\tcur", "completion": "Index\t\tcurinputvarno; <|endoftext|>"}
{"context": "\tDateADT\t\tdateVal2 = PG_GETARG_DATEADT(1);\n\tPG_RETURN_FLOAT8(delta);\n\tint64\t\tdayfraction;\n}\n\tmacaddr    *a = PG_GETARG_MACADDR_P(0);", "partial_line": "macaddr    *b = PG_GETA", "completion": "macaddr    *b = PG_GETARG_MACADDR_P(1); <|endoftext|>"}
{"context": "\tcheck_duplicates_in_publist(publist, datums);\nObjectAddress\n\tOid\t\t\towner = GetUserId();\n\tHeapTuple\ttup;\n\t\t\t\t\t  SUBOPT_DISABLE_ON_ERR | SUBOPT_PASSWORD_REQUIRED |", "partial_line": "opts.s", "completion": "opts.synchronous_commit = \"off\"; <|endoftext|>"}
{"context": "#line 101 \"sqlda.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n#line 121 \"sqlda.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n\tstrcpy(msg, \"declare\");", "partial_line": "{ ECPGdo(__LINE__, 1, 1, NULL, 0, ECPGst", "completion": "{ ECPGdo(__LINE__, 1, 1, NULL, 0, ECPGst_normal, \"declare mycur2 cursor for $1\", <|endoftext|>"}
{"context": "\telse\n\tif (memcmp(ACL_DAT(left_acl),\n\t\t\t   ACL_NUM(left_acl) * sizeof(AclItem)) == 0)\n}\n\tif (ARR_NDIM(acl) != 1)", "partial_line": "errmsg(\"A", "completion": "errmsg(\"ACL arrays must be one-dimensional\"))); <|endoftext|>"}
{"context": "#include \"catalog/pg_class_d.h\"\nstatic void set_new_cluster_char_signedness(void);\nstatic void prepare_new_cluster(void);", "partial_line": "static voi", "completion": "static void create_logical_replication_slots(void); <|endoftext|>"}
{"context": "    if (!find_among_b(z, a_31, 8)) return 0;\n    z->bra = z->c;\n        if (ret < 0) return ret;\n    {   int m1 = z->l - z->c; (void)m1;\n        z->bra = z->c;", "partial_line": "if (in_grouping", "completion": "if (in_grouping_b_U(z, g_v, 945, 969, 0)) goto lab1; <|endoftext|>"}
{"context": "\t\t\tAssert(simple_query);\n\t\t\t\t\t\t\t  e_object_like,\n\t\t\tconst char *nsp = NULL;\n\t\t\t\t}\n\t\t\t{", "partial_line": "if (pg_strncasecmp(text, item, strl", "completion": "if (pg_strncasecmp(text, item, strlen(text)) == 0) <|endoftext|>"}
{"context": "\tJoinExpr   *result;\n\tParseState *pstate;\n\tif (bms_is_empty(upper_varnos))\n\t\treturn NULL;\n\tnsitem = addRangeTableEntryForSubquery(pstate,", "partial_line": "parse->rtable = l", "completion": "parse->rtable = lappend(parse->rtable, rte); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tInferenceElem *elem = (InferenceElem *) lfirst(el);\n\t\t\tgoto next;\n\t\tif (!predicate_implied_by(predExprs, (List *) onconflict->arbiterWhere, false))\n\t\tindex_close(idxRel, NoLock);", "partial_line": "errmsg(\"there is no unique or exclusion constraint match", "completion": "errmsg(\"there is no unique or exclusion constraint matching the ON CONFLICT specification\"))); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t GetUserNameFromId(amForm->roleid, false));\n\t\t\t\tbreak;\n\t\t\t\ttblspace = get_tablespace_name(object->objectId);\n\t\t\t\tbreak;\n\t\t\t{", "partial_line": "if", "completion": "if (fdw) <|endoftext|>"}
{"context": "\t\t   opcode == EEOP_OLD_FETCHSOME ||\n\t\tisfixed = op->d.fetch.kind != NULL;\n\t\t\tisfixed = true;\n\t\t{\n\t\t\ttts_ops = ExecGetResultSlotOps(os, &isfixed);", "partial_line": "desc = ExecGetRes", "completion": "desc = ExecGetResultType(os); <|endoftext|>"}
{"context": "\tpg_free(horiz_map);\n\t\tcont.cells[k * (num_columns + 1)] = piv_rows[i].name ?\n\t\telse\n\t\t\t\t\t\t\t\t\t pivotFieldCompare);\n\t\tcp = (pivot_field *) bsearch(&elt,", "partial_line": "Assert(cp !=", "completion": "Assert(cp != NULL); <|endoftext|>"}
{"context": "AlterForeignDataWrapper(ParseState *pstate, AlterFdwStmt *stmt)\n\tDatum\t\tdatum;\n\tOid\t\t\tfdwhandler;\n\t\tereport(ERROR,\n\tmemset(repl_repl, false, sizeof(repl_repl));", "partial_line": "&validator_given, &", "completion": "&validator_given, &fdwvalidator); <|endoftext|>"}
{"context": "\tList\t   *transfuncName = NIL;\n\tList\t   *mtransfuncName = NIL;\n\tList\t   *minvtransfuncName = NIL;\n\tint32\t\tmtransSpace = 0;\n\tArrayType  *allParameterTypes;", "partial_line": "List", "completion": "List\t   *parameterDefaults; <|endoftext|>"}
{"context": "tts_heap_init(TupleTableSlot *slot)\nstatic void\n\t}\n\tItemPointerSetInvalid(&slot->tts_tid);\n\t\tereport(ERROR,", "partial_line": "return heap_getsy", "completion": "return heap_getsysattr(hslot->tuple, attnum, <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\tif (instance->pid != 0)\n\t\tif (!granted && instance->waitStart != 0)\n\t}\n\tif (mystatus->predLockIdx < predLockData->nelements)", "partial_line": "values[0] = CStringGetTextD", "completion": "values[0] = CStringGetTextDatum(PredicateLockTagTypeNames[lockType]); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tEState *estate,\n\t\t\t\t\t\t\t\tint partidx,\n\t\t\t\t\t\t\t\t  Datum *values,\nstatic PartitionPruneState *CreatePartitionPruneState(EState *estate,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  PartitionPruneInfo *pruneinfo,", "partial_line": "Bitmap", "completion": "Bitmapset **validsubplan_rtis); <|endoftext|>"}
{"context": "cursor_to_xmlschema(PG_FUNCTION_ARGS)\n\t\t\t\t errmsg(\"cursor \\\"%s\\\" does not exist\", name)));\n\t\t\t\t errmsg(\"portal \\\"%s\\\" does not return tuples\", name)));\n\tSPI_connect();\n\t\telog(ERROR, \"SPI_prepare(\\\"%s\\\") failed\", query);", "partial_line": "if ((portal = SPI_cursor_open(NULL, plan, NULL,", "completion": "if ((portal = SPI_cursor_open(NULL, plan, NULL, NULL, true)) == NULL) <|endoftext|>"}
{"context": "\t\tec->ec_sortref = 0;\n\t\tem1 = add_eq_member(ec, item1, item1_relids,\n\treturn true;\n\t\tif (expr_type != req_type)\n\t\texpr = (Expr *) applyRelabelType((Node *) expr,", "partial_line": "COERCE_IMPLIC", "completion": "COERCE_IMPLICIT_CAST, -1, false); <|endoftext|>"}
{"context": "}\nvoid\n\t\treturn;\n\t\treturn;\nvoid", "partial_line": "PlanState  *o", "completion": "PlanState  *outerPlan = outerPlanState(node); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\tHeapTuple\tprocedureTuple;\n\t\t!heap_attisnull(procedureTuple, Anum_pg_proc_proconfig, NULL) ||\n\t}\n\t\tcase SQLlanguageId:", "partial_line": "*fn", "completion": "*fn = NULL; <|endoftext|>"}
{"context": "my_truncate(PGconn *conn, Oid lobjId, int64_t len)\n{\n\t\tfprintf(stderr, \"cannot open large object %u\", lobjId);\n\tif (lo_truncate64(conn, lobj_fd, len) < 0)\n\t\tfprintf(stderr, \"error in lo_truncate64: %s\", PQerrorMessage(conn));", "partial_line": "exportFile(PGconn *conn, Oid lobjId,", "completion": "exportFile(PGconn *conn, Oid lobjId, char *filename) <|endoftext|>"}
{"context": "\t{\n\t\t\treturn NULL;\n\t\t}\n{\n\t\treturn;", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t\tappendStringInfoString(&xstr, e_type_s);\n\t{\n\t\t\tlineno = PyObject_GetAttrString(tb, \"tb_lineno\");\n\t\t\tif (name == NULL)\n\t\tPG_CATCH();", "partial_line": "Py_XDECREF(", "completion": "Py_XDECREF(name); <|endoftext|>"}
{"context": "            }\n            }\n            }\n                among_var = find_among_b(z, a_3, 4);\n                }", "partial_line": "{   int ret = sl", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "}\n\t{\nint8dec(PG_FUNCTION_ARGS)\n\t\tint64\t   *arg = (int64 *) PG_GETARG_POINTER(0);\n\t{", "partial_line": "return in", "completion": "return int8inc(fcinfo); <|endoftext|>"}
{"context": "\tif (root->group_pathkeys)\n\t\troot->query_pathkeys = root->distinct_pathkeys;\n\t\tif (parse->groupingSets)\n\t\t\t\t\t\t\t\t\t\t\t\t\t target_list);\n\t\t\t\t{", "partial_line": "gs->numGroups = nu", "completion": "gs->numGroups = numGroups; <|endoftext|>"}
{"context": "#include <fcntl.h>\n#include <unistd.h>", "partial_line": "retur", "completion": "return -1; <|endoftext|>"}
{"context": "\t\t\t\ttypoid = InvalidOid;\n\t\t\ttypoid = get_array_type(typoid);\n\t\tif (typmod_p)\n\t\t\t*typmod_p = -1;\n\t\treturn NULL;", "partial_line": "if", "completion": "if (typmod_p) <|endoftext|>"}
{"context": "\t\tif (func->on_error != NULL &&\n\t\t\t\t\t\t\t JS_FORMAT_JSONB,\n\t\t\t\tjsexpr->returning->typid = BOOLOID;\n\t\t\t\t\t\t\t\t\t\t\t\t\t JSON_BEHAVIOR_FALSE,\n\t\t\tbreak;", "partial_line": "DomainHas", "completion": "DomainHasConstraints(jsexpr->returning->typid)) <|endoftext|>"}
{"context": "\t\t\tel++;\n\tdata->nelements = el + hash_get_num_entries(LockMethodProcLockHash);\n\tif (data->nelements > els)\n\t\tdata->locks = (LockInstanceData *)\n\t\t\trepalloc(data->locks, sizeof(LockInstanceData) * els);", "partial_line": "PGPROC", "completion": "PGPROC\t   *proc; <|endoftext|>"}
{"context": "static int r_standard_suffix(struct SN_env * z) {\n    if (!among_var) return 0;\n            break;\n                if (ret <= 0) return ret;\n            }", "partial_line": "z->ket =", "completion": "z->ket = z->c; <|endoftext|>"}
{"context": "\t\t\t\tbool oldstyle,\n\t\t\t\tbool replace)", "partial_line": "List", "completion": "List\t   *transfuncName = NIL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t progname, echo, verbose,\n\t\t\t\t\t\t\t\t concurrently, 1, tablespace);\n\t\t\treindex_one_database(cparams, REINDEX_TABLE, tables,\n\t\t\t\t\t\t\t\t progname, echo, verbose,\n\tprintf(_(\"  -a, --all                    reindex all databases\\n\"));", "partial_line": "printf(_(\"      --tablespace=TABLESPACE", "completion": "printf(_(\"      --tablespace=TABLESPACE  tablespace where indexes are rebuilt\\n\")); <|endoftext|>"}
{"context": "\t.use_distinct = true,\nstatic const SchemaQuery Query_for_list_of_ts_configurations = {\n\t.namespace = \"p.prsnamespace\",\n\t.viscondition = \"pg_catalog.pg_ts_template_is_visible(t.oid)\",\n\t.viscondition = \"pg_catalog.pg_table_is_visible(c.oid)\",", "partial_line": ".viscondition = \"pg_catalog.", "completion": ".viscondition = \"pg_catalog.pg_table_is_visible(c.oid)\", <|endoftext|>"}
{"context": "\t\t\tcase RELKIND_MATVIEW:\n\t\t\t\tinfo->section = SECTION_POST_DATA;\n\t\t\t\tbreak;\n\tDumpOptions *dopt = fout->dopt;\n\tPGresult   *res;", "partial_line": "int", "completion": "int\t\t\tntups; <|endoftext|>"}
{"context": "\t\t\t\t\tpreference = 1;\n\t\t\t\telse if (!variadic && prevResult->nvargs > 0)\n\t\t\t\telse\n\t\t\t\t\t\t\t\tprevPrevResult->next = prevResult->next;\n\t\t\t\t{", "partial_line": "st", "completion": "static bool <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  ALLOCSET_DEFAULT_SIZES);\n\t\t\t\t\t\t   sizeof(PLyExecutionContext));\n\tcontext->scratch_ctx = NULL;\n\tPLy_execution_contexts = context;\n{", "partial_line": "MemoryCo", "completion": "MemoryContextDelete(context->scratch_ctx); <|endoftext|>"}
{"context": "\tif (dry_run)\n\tmode = O_WRONLY | O_CREAT | PG_BINARY;\n\t\tmode |= O_TRUNC;\n\tdstfd = open(dstpath, mode, pg_file_create_mode);\nvoid", "partial_line": "close_target_", "completion": "close_target_file(void) <|endoftext|>"}
{"context": "\tHELPN(\"  fieldsep\\n\"\n\t\t  \"    field separator for unaligned output (default \\\"%s\\\")\\n\",\n\tHELP0(\"  null\\n\"\n\t\t  \"    record (line) separator for unaligned output\\n\");\n\t\t  \"    [full, column, page, integer value]\\n\");", "partial_line": "\"", "completion": "\"    password file name\\n\"); <|endoftext|>"}
{"context": "\t\tPQclear(res);\n\t\t\t\t\t st->id);\n\t\t\treturn TSTATUS_IN_BLOCK;\nadvanceConnectionState(TState *thread, CState *st, StatsData *agg)\n\t\t\t\tst->tries = 1;", "partial_line": "thread->conn_d", "completion": "thread->conn_duration += now - start; <|endoftext|>"}
{"context": "\t\tnum_sa_scans = Min(num_sa_scans, ceil(index->pages * 0.3333333));\n\t\tdescentCost = ceil(log(index->tuples) / log(2.0)) * cpu_operator_cost;\n\t*indexSelectivity = costs.indexSelectivity;\nhashcostestimate(PlannerInfo *root, IndexPath *path, double loop_count,\n\t*indexSelectivity = costs.indexSelectivity;", "partial_line": "Cost *indexStartupCost", "completion": "Cost *indexStartupCost, Cost *indexTotalCost, <|endoftext|>"}
{"context": "\t\t\tlocal_rscale = Min(local_rscale,\n\t\t\t\t\t\t\t   base_prod.dscale + result->dscale);\n\t\t\tif (!neg)\n\t\t\t\t\t\t errmsg(\"value overflows numeric format\")));\n\tfree_var(&base_prod);", "partial_line": "round", "completion": "round_var(result, rscale); <|endoftext|>"}
{"context": "\t\t\tdboid = MyDatabaseId;\n\t\txlrec.mapped_xid = src->xid;\nlogical_end_heap_rewrite(RewriteState state)\n\tif (state->rs_num_rewrite_mappings > 0)\n\t\tFileClose(src->vfd);", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\t\t}\n\t\tif (fullsort_state == NULL)\n\t\t\t\t\t\t\t\t\t\t\t\t  node->bounded ?\n\t\t\tnode->fullsort_state = fullsort_state;\n\t\t{", "partial_line": "int64\t\tcurrentBound = node->bound - n", "completion": "int64\t\tcurrentBound = node->bound - node->bound_Done; <|endoftext|>"}
{"context": "\t\t\"Asia/Katmandu\"\n\t{\n\t\t\"Asia/Irkutsk\"\n\t},\n\t\t\"Omsk Standard Time\", \"Omsk Daylight Time\",", "partial_line": "\"A", "completion": "\"Asia/Omsk\" <|endoftext|>"}
{"context": "\tsubroot->aggtransinfos = NIL;\n\tntest->nulltesttype = IS_NOT_NULL;\n\tntest->arg = copyObject(mminfo->target);\n\tntest->location = -1;\n\tif (!list_member((List *) parse->jointree->quals, ntest))", "partial_line": "parse->jo", "completion": "parse->jointree->quals = (Node *) <|endoftext|>"}
{"context": "\t\t\treturn false;\n\tAssert(conn->oauth_issuer_id);\t\n\t{\n\t\t\t\t   provider->issuer, conn->oauth_issuer_id);\n\t}", "partial_line": "#define OAUTH_GR", "completion": "#define OAUTH_GRANT_TYPE_DEVICE_CODE \"urn:ietf:params:oauth:grant-type:device_code\" <|endoftext|>"}
{"context": "\t\tSxx = Sxx1;\n\t\tSxy = Sxy1;\n\t\tSxy = Sxy1 + Sxy2 + N1 * N2 * tmp1 * tmp2 / N;\n\t\ttransvalues1[0] = N;\n\t\ttransvalues1[3] = Sy;", "partial_line": "transdatums[0] = Float8GetD", "completion": "transdatums[0] = Float8GetDatumFast(N); <|endoftext|>"}
{"context": "\t\t0x2522B521, 0x1D33DA8D, 0x55006A79, 0x6D1105D5,\n\t\t0x8F2261D3, 0xB7330E7F, 0xFF00BE8B, 0xC711D127,\n\t\t0xB8730B7D, 0x806264D1, 0xC851D425, 0xF040BB89,\n\t\t0xA21EB415, 0x9A0FDBB9, 0xD23C6B4D, 0xEA2D04E1,\n\t\t0x00000000, 0xEF306B19, 0xDB8CA0C3, 0x34BCCBDA,", "partial_line": "0x570739E5, 0xB837", "completion": "0x570739E5, 0xB83752FC, 0x8C8B9926, 0x63BBF23F, <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\tif (randAccess)\n\t\t\t\tbreak;\n\t\t\t\t\t\t\tRECOVERY_TARGET_TIMELINE_LATEST)\n\t\t\t\t\t\tXLogRecPtr\tptr;", "partial_line": "if (fetch", "completion": "if (fetching_ckpt) <|endoftext|>"}
{"context": "\t\tCommitTransactionCommand();\n\t\tclear_subscription_skip_lsn(rollback_data.rollback_end_lsn);\napply_handle_stream_prepare(StringInfo s)\n{\n\t\t\t\t errmsg_internal(\"STREAM PREPARE message without STREAM STOP\")));", "partial_line": "(errcode(ERRCODE_PROTO", "completion": "(errcode(ERRCODE_PROTOCOL_VIOLATION), <|endoftext|>"}
{"context": "\t\t\tAssert(!more);\n\treturn true;\nbool\n\tif (VirtualTransactionIdIsRecoveredPreparedXact(vxid))\n\tif (proc == NULL)", "partial_line": "LWLockRel", "completion": "LWLockRelease(&proc->fpInfoLock); <|endoftext|>"}
{"context": "\tAssert(va->type == jbvString);\n\t\t\t\t\t\t\t\t\tvb->val.string.val, vb->val.string.len);\n}\n{\n\tif (hasNonUniq && unique_keys)", "partial_line": "if (length", "completion": "if (lengthCompareJsonbStringValue(ptr, res) != 0 && <|endoftext|>"}
{"context": "\telse\n\ttermPQExpBuffer(&namebuf);\nvoid\n\tPQExpBufferData buf[3];\n\tint\t\t\ti;", "partial_line": "inquo", "completion": "inquotes = false; <|endoftext|>"}
{"context": "\t\treturn true;\n\tif (array->high_compare &&\n\t\t\t\t\t\t\t\t\t\tarray->high_compare->sk_collation,\n\t\t\t\t\t\t\t\t\t\tinc_sk_argument,\n\t{", "partial_line": "if (!array->", "completion": "if (!array->attbyval) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   estate->es_snapshot,\n\tif (indexstate->biss_NumRuntimeKeys == 0 &&\n\tSize\t\tsize;\n\t\tpcxt->nworkers * sizeof(IndexScanInstrumentation);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize);", "partial_line": "ParallelWorkerCon", "completion": "ParallelWorkerContext *pwcxt) <|endoftext|>"}
{"context": "\t\t\t\tif (simple)\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tInvalidOid,\n\t\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t\t\ttrue));\n\t\t\t\t\t\t\t\t\t\t\t   true,", "partial_line": "conte", "completion": "context); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t{\n\t\t\t\thashtable->log2_nbuckets_optimal += 1;\n\t\t\t\t\t\t\t  hashvalue,\n}", "partial_line": "MinimalTuple tuple", "completion": "MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot, &shouldFree); <|endoftext|>"}
{"context": "\t{\n\t\t\t{\n\t\t\t\tAssert(BlockNumberIsValid(newmapblk));\n\t\t\t\tmetap->hashm_spares[metap->hashm_ovflpoint]++;\n\tchar\t   *data;", "partial_line": "if (action == BLK_NEED", "completion": "if (action == BLK_NEEDS_REDO || action == BLK_RESTORED) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tif (INFORMIX_MODE(compat))\n\t\t\t\t\t\t\tires = (interval *) ecpg_alloc(sizeof(interval), lineno);\n\t\t\t\t\t\t\tECPGset_noind_null(ECPGt_interval, ires);\n\t\t\t\t\t\t{", "partial_line": "endch", "completion": "endchar = *endptr; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   name, desc, default_val,\n\trelopt_real *newoption;\n\tnewoption = (relopt_real *) allocate_reloption(kinds, RELOPT_TYPE_REAL,\n}\n}", "partial_line": "add_local_enum_reloption(l", "completion": "add_local_enum_reloption(local_relopts *relopts, const char *name, <|endoftext|>"}
{"context": "\t\t    ps.i_l_follow = 0;\n\t    if (ps.p_l_follow > 0) {\t\n\t    if (s_code == e_code)\n\t\t    diag3(0, \"Reached internal limit of %d struct levels\",\n\t\tps.decl_on_line = false;\t", "partial_line": "if (ps.p_stack[ps.t", "completion": "if (ps.p_stack[ps.tos] == decl && !ps.block_init) <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"common/hashfn.h\"\n#include \"utils/builtins.h\"\n#include \"utils/syscache.h\"\n\t.name = \"tupdesc reference\",", "partial_line": ".release_priority", "completion": ".release_priority = RELEASE_PRIO_TUPDESC_REFS, <|endoftext|>"}
{"context": "\ttp = SearchSysCache2(ATTNUM,\n\t\tForm_pg_attribute att_tup = (Form_pg_attribute) GETSTRUCT(tp);\n\t\tchar\t   *result;\nAttrNumber\n\t{", "partial_line": "Releas", "completion": "ReleaseSysCache(tp); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tcollation,\n\telse\n\tint\t\t\ti;\n\t\t\t\t\t\t ATTSTATSSLOT_VALUES | ATTSTATSSLOT_NUMBERS))\n\t\t\tfcinfo->isnull = false;", "partial_line": "doub", "completion": "double <|endoftext|>"}
{"context": "\t\t\tif (!IsBinaryUpgrade)\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t   icu_validation_level);\n\t\t\t\t}\n\t\t\ticu_validate_locale(colllocale);", "partial_line": "(errcode(ERRC", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "        }\n        z->bra = z->c;\n        case 2:\n            }\n}", "partial_line": "static int r", "completion": "static int r_undouble(struct SN_env * z) { <|endoftext|>"}
{"context": "\t\tfinfo->fcollation = sysattr->attcollation;\n}\n\t\t\t\t\t\t\tbool *isnull)\n\t\t{\n\t\t\t\t\t\t\t\t   Datum newValue, bool isnull,", "partial_line": "TupleDe", "completion": "TupleDesc\ttupdesc; <|endoftext|>"}
{"context": "rebuild_joinclause_attr_needed(PlannerInfo *root)\n\t\tforeach(lc, brel->joininfo)\n\t\t\t\t\tcontinue;\t\n\t\t\t\t\t\t\t\t\t\t\t\t   PVC_RECURSE_WINDOWFUNCS |\n\t\t\t\tRelids\t\twhere_needed;", "partial_line": "if (", "completion": "if (rinfo->is_clone) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   format_type_be(paramTypes[paramno - 1]),\n\t\t}\n\t\tparam->paramcollid = get_typcollation(param->paramtype);\n\t\t\t(param->location < 0 || location < param->location))\n\t\treturn (Node *) param;", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "static const symbol s_1_23[4] = { 0xD0, 0xBE, 0xD0, 0xBC };\n{ 4, s_1_4, -1, 1, 0},\n{ 4, s_1_11, -1, 1, 0},\n{ 6, s_1_14, -1, 1, 0},\nstatic const symbol s_2_5[6] = { 0xD1, 0x83, 0xD1, 0x8E, 0xD1, 0x89 };", "partial_line": "static", "completion": "static const struct among a_2[8] = <|endoftext|>"}
{"context": "\tchar\t\tworkmembuf[32];\n\triinfo = ri_FetchConstraintInfo(trigger, fk_rel, false);\n\tif (!ExecCheckPermissions(rtes, perminfos, false))\n\t\tappendStringInfo(&querybuf, \"%sfk.%s\", sep, fkattname);\n\t\t\"\" : \"ONLY \";", "partial_line": "\"\"", "completion": "\"\" : \"ONLY \"; <|endoftext|>"}
{"context": "{\n\t\t\t\t\t  FirstNormalObjectId);\n\tappendPQExpBufferStr(&query,\n\t\t\t\t\t\t \"  JOIN pg_catalog.pg_class c \"\n\t\t\t\t\t\t \"     ON c.relnamespace = n.oid \"", "partial_line": "\"O", "completion": "\"ORDER BY 1\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   errorBuf->len);\n\t\treturn;\n\t{\n\t\t\t\t(errmsg_internal(\"%s\", errorBuf->data)));\n{", "partial_line": "sw", "completion": "switch (code) <|endoftext|>"}
{"context": "\t\t\thashtable->spaceUsed += SKEW_BUCKET_OVERHEAD;\n\t\t\thashtable->spaceUsedSkew += SKEW_BUCKET_OVERHEAD;\n\t\t\tif (hashtable->spaceUsed > hashtable->spacePeak)\n\tint\t\t\tbucket;\n\tbucket = hashvalue & (hashtable->skewBucketLen - 1);", "partial_line": "hashtable->skewBucket[bucke", "completion": "hashtable->skewBucket[bucket]->hashvalue != hashvalue) <|endoftext|>"}
{"context": "    if (!find_among_b(z, a_4, 44)) return 0;\n    z->bra = z->c;\n    }\n    z->bra = z->c;\n    switch (among_var) {", "partial_line": "{   int", "completion": "{   int ret = slice_from_s(z, 1, s_2); <|endoftext|>"}
{"context": "\t\t\tcontext->max_hazard = proparallel;\n\t\tdefault:\n{\n\t\tif (max_parallel_hazard_test(PROPARALLEL_RESTRICTED, context))\n\telse if (IsA(node, NextValueExpr))", "partial_line": "if (max_parallel_hazard_test(PROPA", "completion": "if (max_parallel_hazard_test(PROPARALLEL_UNSAFE, context)) <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(CmpCall(bttextnamecmp) <= 0);\ntextgtname(PG_FUNCTION_ARGS)\n\tlen1 = VARSIZE_ANY_EXHDR(arg1);\n\tresult = memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), Min(len1, len2));\n\t\treturn 0;", "partial_line": "PG_FR", "completion": "PG_FREE_IF_COPY(arg1, 0); <|endoftext|>"}
{"context": "\t\tappendPQExpBufferStr(buf, \" LOCATION \");\n\t\tif (is_absolute_path(spclocation))\n\t\telse\n\t\tif (!skip_acls &&\n\t\tdestroyPQExpBuffer(buf);", "partial_line": "fpri", "completion": "fprintf(OPF, \"\\n\\n\"); <|endoftext|>"}
{"context": "\t}\n{\n\tstats->num_pages = 0;\n\t\tvstate.startNSN = GetInsertRecPtr();\n\t\t\t\t\t\t\t\t\t\tinfo->strategy,", "partial_line": "UnlockRelation", "completion": "UnlockRelationForExtension(rel, ExclusiveLock); <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t}\n\t\t\tif (load1)\n\t\t\t}\n\t\tdstate = (BTDedupState) palloc(sizeof(BTDedupStateData));", "partial_line": "dstate->", "completion": "dstate->deduplicate = true; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\treport_untranslatable_char(PG_MULE_INTERNAL, PG_SJIS,\n\tint\t\t\tc1;\n\t\tc1 = *euc;\n\t\t{", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (!v)\n\t\t}\n\t\t{\n\t\t\t\treturn NULL;\n\t\tif (v == NULL)", "partial_line": "if ((behavio", "completion": "if ((behavior & EXTENSION_RETURN_NULL) && <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\t\terr = _(\"grouping operations are not allowed in COPY FROM WHERE conditions\");\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_GROUPING_ERROR),\n\t}", "partial_line": "List", "completion": "List *directargs, <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\tif (!(this_line + 1)->ptr)\n\t\t\t\t}\n\t\t\t_print_horizontal_line(col_count, width_wrap, opt_border,\n\t\t\tfor (j = 0; j < col_count; j++)", "partial_line": "struct lineptr *this_lin", "completion": "struct lineptr *this_line = &col_lineptrs[j][curr_nl_line[j]]; <|endoftext|>"}
{"context": "\t\t\t\tif (noError)\n\t\t}\n\t\tif (l < 0)\n\t\t\t\tbreak;\n\t\t\tc1 = mic[1];", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\tresult = construct_empty_array(astate->element_type);\n\t\tnbytes = astate->nbytes;\n\t\t{\n\t\t{\n\t\tresult = (ArrayType *) palloc0(nbytes);", "partial_line": "SET_VARSIZE", "completion": "SET_VARSIZE(result, nbytes); <|endoftext|>"}
{"context": "                    z->lb = z->c; z->c = z->l;\n                        if (ret == 0) goto lab4;\n    lab3:\n            }\n            z->c = c9;", "partial_line": "if (ret", "completion": "if (ret == 0) goto lab5; <|endoftext|>"}
{"context": "\tnum_syncs++;\n\t\t{\n\t\t}\n\t\t\tprintf(\"\\n\");\n\t\tpg_fatal(\"did not get 1 tuple\");", "partial_line": "bool", "completion": "bool\t\terror_sent = false; <|endoftext|>"}
{"context": "\tif (stmt->is_procedure)\n\t{\n\t\treturnsSet = false;\n\t\t\t\t\t\t\tformat_type_be(requiredResultType))));\n\t}", "partial_line": "proretty", "completion": "prorettype = VOIDOID; <|endoftext|>"}
{"context": "#include \"psqlscanslash.h\"\n{", "partial_line": "static void avlMergeValue(avl_tree *tree, c", "completion": "static void avlMergeValue(avl_tree *tree, char *name, char *sort_value); <|endoftext|>"}
{"context": "\t\t\t\tregister_forget_request(rlocator, forknum, segno);\n{\n\toff_t\t\tseekpos;\n\tMdfdVec    *v;\n\tv = _mdfd_getseg(reln, forknum, blocknum, skipFsync, EXTENSION_CREATE);", "partial_line": "seekpos = (off_t) BLCKSZ * (blocknum % (", "completion": "seekpos = (off_t) BLCKSZ * (blocknum % ((BlockNumber) RELSEG_SIZE)); <|endoftext|>"}
{"context": "\tint\t\t\tpage_access = BT_READ;\n\t\tBTStack\t\tnew_stack;\n\t\topaque = BTPageGetOpaque(page);\n\t\tnew_stack->bts_offset = offnum;\n{", "partial_line": "page = BufferGetPa", "completion": "page = BufferGetPage(buf); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\telse\n\tif (isNull)\n\t\t\t*is_missing = true;\n\t\t}", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t JS_FORMAT_DEFAULT, InvalidOid, false);\n\tif (returning->format->format_type == JS_FORMAT_JSONB)\n\t{\n\treturning = transformJsonConstructorOutput(pstate, ctor->output, args);\n\t\tJsonValueExpr *jve;", "partial_line": "jve = makeJsonValueExpr((E", "completion": "jve = makeJsonValueExpr((Expr *) raw_expr, (Expr *) expr, format); <|endoftext|>"}
{"context": "\tPG_FREE_IF_COPY(b, 1);\n}\n\t\tentries = (Datum *) palloc(sizeof(Datum) * vector->size);\n\t\t\ttxt = cstring_to_text_with_len(STRPTR(vector) + we->pos, we->len);\n\t}", "partial_line": "PG_RETURN_POINTE", "completion": "PG_RETURN_POINTER(entries); <|endoftext|>"}
{"context": "\tint\t\t\tsaltlen;\n\tchar\t   *nonce;\n\tchar\t   *prep_password;\n\tpg_saslprep_rc rc;\n\t\treturn NULL;", "partial_line": "state->conn =", "completion": "state->conn = conn; <|endoftext|>"}
{"context": "\treturn PLPGSQL_RC_OK;\nstatic int\n\t\tint\t\t\trc;\n\t\tswitch (stmt->cmd_type)\n\t\t{", "partial_line": "rc = exec_stmt_block(es", "completion": "rc = exec_stmt_block(estate, (PLpgSQL_stmt_block *) stmt); <|endoftext|>"}
{"context": "\t\t\tif (!isnull)\n\t\t\t{\n\t\t}\n\t\tBufFile    *file = hashtable->outerBatchFile[curbatch];\n\t\t\tbool\t\tisnull;", "partial_line": "*hashvalue = Da", "completion": "*hashvalue = DatumGetUInt32(ExecEvalExprSwitchContext(hjstate->hj_OuterHash, <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\t\tlist_free(elemlist);\n}\n\tplpgsql_extra_errors = *((int *) extra);\n\t\t\t\t\t\t\t NULL,", "partial_line": "PLPG", "completion": "PLPGSQL_RESOLVE_ERROR, <|endoftext|>"}
{"context": "\ttypentry = (TypeCacheEntry *) fcinfo->flinfo->fn_extra;\n\t\ttypentry->type_id != element_type)\n\t\ttypentry = lookup_type_cache(element_type,\n\t\t\t\t\t\t\t\t\t TYPECACHE_EQ_OPR_FINFO);\n\tInitFunctionCallInfoData(*locfcinfo, &typentry->eq_opr_finfo, 2,", "partial_line": "collation", "completion": "collation, NULL, NULL); <|endoftext|>"}
{"context": "\t\treturn;\n\tif (es->format != EXPLAIN_FORMAT_TEXT)\n\t{\n\t{\n\t\t\tBitmapHeapScanInstrumentation *si = &planstate->sinstrument->sinstrument[n];", "partial_line": "if (es->workers", "completion": "if (es->workers_state) <|endoftext|>"}
{"context": "\t\t\t}\n\t\tif (pset.sversion >= 90500)\n\t\t\t\tappendPQExpBufferStr(&buf,\n\t\t\t\tappendPQExpBufferStr(&buf,\n\t\t\t\t\t\t\t  \"  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),\\n\"", "partial_line": "\"    WHEN 'w", "completion": "\"    WHEN 'w' THEN 'UPDATE'\\n\" <|endoftext|>"}
{"context": "struct sqlca_t\n\tchar\t\tsqlstate[5];\n}\n#endif\n#endif", "partial_line": "#line 19 \"arra", "completion": "#line 19 \"array.pgc\" <|endoftext|>"}
{"context": "            }\n            break;\n            }\n                if (ret < 0) return ret;\n            {   int ret = slice_del(z);", "partial_line": "if (ret <", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t}\n\telse\n\t\t\t (srcfd < 0) ? \"\" : \"\\n\",\n\t\t\t LSN_FORMAT_ARGS(switchpoint),\n\t\t\t\t errmsg(\"could not write to file \\\"%s\\\": %m\", tmppath)));", "partial_line": "if (CloseTransientF", "completion": "if (CloseTransientFile(fd) != 0) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase 'P':\n\t\t\t\t\tpg_fatal(\"invalid new port number\");\n\t\t\t\tbreak;\n\t\t\t\tos_info.user_specified = true;", "partial_line": "user_opts.transfer_mode", "completion": "user_opts.transfer_mode = TRANSFER_MODE_CLONE; <|endoftext|>"}
{"context": "\tif (!pub)\n\t}\n\tchar\t   *pubname;\n\tschemaname = strVal(linitial(object));\n\tpubname = strVal(lsecond(object));", "partial_line": "schemaid = get_", "completion": "schemaid = get_namespace_oid(schemaname, missing_ok); <|endoftext|>"}
{"context": "\tfor (i = 0; i < fmgr_nbuiltins; i++)\n\t\tif (strcmp(name, fmgr_builtins[i].funcName) == 0)\nfmgr_info(Oid functionId, FmgrInfo *finfo)\nvoid\n\tconst FmgrBuiltin *fbp;", "partial_line": "finfo->fn_extra", "completion": "finfo->fn_extra = NULL; <|endoftext|>"}
{"context": "\t\t\t\tcase COMPARE_GT:\n\t\t\tEEO_NEXT();\n\t\tEEO_CASE(EEOP_MINMAX)\n\t\t\tExecEvalMinMax(state, op);\n\t\t\tEEO_NEXT();", "partial_line": "EEO_C", "completion": "EEO_CASE(EEOP_FIELDSELECT) <|endoftext|>"}
{"context": "{ 4, s_6_49, 47, 1, 0},\n{ 5, s_6_61, 58, 1, 0},\n{ 5, s_6_69, 58, 1, 0},\n{ 5, s_6_70, 58, 1, 0},\n{ 3, s_6_73, 71, 1, 0},", "partial_line": "{ 5, s", "completion": "{ 5, s_6_75, 73, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tchange->data.msg.message = NULL;\n\t\t\t\tReorderBufferFreeSnap(rb, change->data.snapshot);\n\t\t\tbreak;\n\t\t\t\tchange->data.truncate.relids = NULL;\n\tHeapTuple\ttuple;", "partial_line": "Size\t\talloc", "completion": "Size\t\talloc_len; <|endoftext|>"}
{"context": "\t\t\t\tuserDoption = pstrdup(optarg);\n\t\t\t\tbootstrap_data_checksum_version = PG_DATA_CHECKSUM_VERSION;\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t progname);\n\t}", "partial_line": "InitializeFastPath", "completion": "InitializeFastPathLocks(); <|endoftext|>"}
{"context": "\t\t\tappendStringInfo(es->str, \"Batches: %d  Memory Usage: \" INT64_FORMAT \"kB\",\n\t\t\t\t\t\t\t aggstate->hash_batches_used, memPeakKb);\n\t\t}\n\t\t\tappendStringInfoChar(es->str, '\\n');\n\t\t\tint\t\t\thash_batches_used;", "partial_line": "if (es->format", "completion": "if (es->format == EXPLAIN_FORMAT_TEXT) <|endoftext|>"}
{"context": "\t\tint\t\t\ti;\n\t\twhile (i > 0 && isspace((unsigned char) scbuf[i - 1]))\n\t\tif (strncmp(scbuf, \"test: \", 6) == 0)\n\t\t\t\t{\n\t\t\t\tinword = true;", "partial_line": "INSTR_TIME_SET_", "completion": "INSTR_TIME_SET_CURRENT(starttimes[0]); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\tLLVMValueRef v_allpergroupsp;\n\t\t\t\t\tLLVMValueRef v_setoff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFIELDNO_AGGSTATE_ALL_PERGROUPS,\n\t\t\tcase EEOP_AGG_PLAIN_TRANS_INIT_STRICT_BYREF:", "partial_line": "case EEOP_A", "completion": "case EEOP_AGG_PLAIN_TRANS_STRICT_BYREF: <|endoftext|>"}
{"context": "#define VARLENA_ATT_IS_PACKABLE(att) \\\n\tint\t\t\tlen;\nstatic uint32\nmissing_match(const void *key1, const void *key2, Size keysize)\n\tconst missing_cache_key *entry1 = (missing_cache_key *) key1;", "partial_line": "hash_ctl.", "completion": "hash_ctl.match = missing_match; <|endoftext|>"}
{"context": "#include \"catalog/pg_proc.h\"\n#include \"plpy_subxactobject.h\"\n#include \"utils/guc.h\"\nPG_FUNCTION_INFO_V1(plpython3_inline_handler);\n\tstatic bool inited = false;", "partial_line": "if (*plpython_version_bitmask_ptr != (1 <<", "completion": "if (*plpython_version_bitmask_ptr != (1 << PY_MAJOR_VERSION)) <|endoftext|>"}
{"context": "}\nindex_beginscan_internal(Relation indexRelation,\n\t\t\t\t\t\t ParallelIndexScanDesc pscan, bool temp_snap)\n\t\tPredicateLockRelation(indexRelation, snapshot);\n\t\t\t\t\t\t\t\t\t\t\t\tnorderbys);", "partial_line": "Assert(nkeys =", "completion": "Assert(nkeys == scan->numberOfKeys); <|endoftext|>"}
{"context": "\t\tReleasePredicateLocks(false, true);\nstatic inline bool\n}\n\t\t|| SxactIsDoomed(writer)\n\tdlist_foreach(iter, &unconstify(SERIALIZABLEXACT *, reader)->outConflicts)", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "exec_stmt_assert(PLpgSQL_execstate *estate, PLpgSQL_stmt_assert *stmt)\n\tbool\t\tvalue;\n\tif (!plpgsql_check_asserts)\n\t\treturn PLPGSQL_RC_OK;\n\texec_eval_cleanup(estate);", "partial_line": "char\t   *", "completion": "char\t   *message = NULL; <|endoftext|>"}
{"context": "#include \"utils/syscache.h\"\nNode *\n\t\t\t\t  Node *last_srf, FuncCall *fn, bool proc_call, int location)\n{\n\tWindowDef  *over = (fn ? fn->over : NULL);", "partial_line": "CoercionForm funcformat = (f", "completion": "CoercionForm funcformat = (fn ? fn->funcformat : COERCE_EXPLICIT_CALL); <|endoftext|>"}
{"context": "\t\tsnap->xip[i] =\n\tpg_snapshot *snap;\n\tinitStringInfo(&str);\n\tappendStringInfo(&str, UINT64_FORMAT \":\",\n\tfor (i = 0; i < snap->nxip; i++)", "partial_line": "appendStringInfoCha", "completion": "appendStringInfoChar(&str, ','); <|endoftext|>"}
{"context": "\tTupleDesc\ttupDesc;\n\tOid\t\t   *typioparams = cstate->typioparams;\n\tExprState **defexprs = cstate->defexprs;\n\tchar\t   *string;\n\tfieldno = 0;", "partial_line": "string = fiel", "completion": "string = field_strings[fieldno++]; <|endoftext|>"}
{"context": "\tctx->write_xid = txn->xid;\n\tctx->end_xact = true;\ncommit_prepared_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn,\n{\n\tctx->write_location = txn->end_lsn; ", "partial_line": "if (ctx->callbacks.commit_prepar", "completion": "if (ctx->callbacks.commit_prepared_cb == NULL) <|endoftext|>"}
{"context": "\tbool\t\tnulls[PG_BACKUP_STOP_V2_COLS] = {0};\n\ttablespace_map = NULL;\n\tMemoryContextDelete(backupcontext);\n\t\t\t\t\t\t \"pg_log_standby_snapshot()\")));\n\tPG_RETURN_LSN(recptr);", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tcols = 0;\n\t\telse\n\tif (tableinfo.relkind == RELKIND_INDEX ||\n\t\t\tappendPQExpBuffer(&buf, \",\\n  CASE WHEN a.attnum <= (SELECT i.indnkeyatts FROM pg_catalog.pg_index i WHERE i.indexrelid = '%s') THEN '%s' ELSE '%s' END AS is_key\",\n\t\tfdwopts_col = cols++;", "partial_line": "if (verb", "completion": "if (verbose) <|endoftext|>"}
{"context": "\tif (CheckPostmasterSignal(PMSIGNAL_START_WALRECEIVER))\n\t{\n\t\t{\n\t\t\tereport(LOG,\n\t{", "partial_line": "stati", "completion": "static int <|endoftext|>"}
{"context": "\t\t\t\t\telse\n\t\t\t\t\t\treturn TM_Invisible;\t\n\t\t\t\t\t\t\tInvalidTransactionId);\n\t\t\t\t\t\tHeapTupleHeaderGetRawXmin(tuple));\n\tif (tuple->t_infomask & HEAP_XMAX_INVALID)\t", "partial_line": "if (HEAP_XMAX_IS_LO", "completion": "if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask)) <|endoftext|>"}
{"context": "\tint\t\t\tndim,\n\tarray_iter\titer;\n\t\tmy_extra = (ArrayMetaState *) fcinfo->flinfo->fn_extra;\n\t}\n\tvalues = (char **) palloc(nitems * sizeof(char *));", "partial_line": "needquotes = (bool *", "completion": "needquotes = (bool *) palloc(nitems * sizeof(bool)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\telse if (IsA(selem->expr, Var)) \n\t\t{\n\t\t\t\tereport(ERROR,\n\t\t\tBitmapset  *attnums = NULL;", "partial_line": "Asse", "completion": "Assert(expr != NULL); <|endoftext|>"}
{"context": "\t\treturn false;\n\txact_info = info & XLOG_XACT_OPMASK;\n\t{\n\t\tTransactionId recordXid;\n\t\tif (xact_info == XLOG_XACT_COMMIT_PREPARED)", "partial_line": "recordXid = X", "completion": "recordXid = XLogRecGetXid(record); <|endoftext|>"}
{"context": "\t},\nstatic void test_pattern(const test_spec *spec);\nstatic void test_single_value_and_filler(uint64 value, uint64 filler_min, uint64 filler_max);\nDatum\n\ttest_empty();", "partial_line": "test_single_value(PG_UINT", "completion": "test_single_value(PG_UINT64_MAX - 1); <|endoftext|>"}
{"context": "\tif (log_connections & LOG_CONNECTION_AUTHENTICATION)\nClientAuthentication(Port *port)\n\tif (port->hba->clientcert != clientCertOff)\n\t\t\t\t\t(errcode(ERRCODE_INVALID_AUTHORIZATION_SPECIFICATION),\n\t\tcase uaReject:", "partial_line": "encryption_s", "completion": "encryption_state))); <|endoftext|>"}
{"context": "\tPG_RETURN_TIMESTAMPTZ(result);\nDatum\n\telse if (!HAS_PGSTAT_PERMISSIONS(beentry->st_userid))\n\tint\t\t\tret;\n\t\t\t\t\t\t\t beentry->st_clientaddr.salen,", "partial_line": "PG_RETUR", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "\t\t\t\t\t  err,\n\t\t\t\t\t  NULL) == 0)\n\telse\n\tlast_dyn_error[0] = 0;\n\tvoid\t   *ptr;", "partial_line": "set_", "completion": "set_dl_error(); <|endoftext|>"}
{"context": "\t\t\t\tNode\t   *newDef = (Node *) lfirst(newlc);\n\t\t\t\t\t\t\t errhint(\"Use %s %s first.\",\n\t\t\t\t\t\t\t\t\t dropcmd,\n\t\ttup = heap_modify_tuple(oldtup, tupDesc, values, nulls, replaces);\n\t\tproacl = get_user_default_acl(OBJECT_FUNCTION, proowner,", "partial_line": "Anum_pg", "completion": "Anum_pg_proc_oid); <|endoftext|>"}
{"context": "\t\t\t\t\t\trelname)));\nvacuum_open_relation(Oid relid, RangeVar *relation, bits32 options,\n\t\treturn NULL;\n\tif ((options & VACOPT_ANALYZE) != 0)\n\t\tif (!rel_lock)", "partial_line": "ere", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\t\t\t\tngroups,\n\tdouble\t\tmincount;\n\tSortItem   *items;\n\tmincount = get_mincount_for_mcv_list(numrows, totalrows);\n\t\tSortItem  **freqs;", "partial_line": "mcvlist->magic = STATS_", "completion": "mcvlist->magic = STATS_MCV_MAGIC; <|endoftext|>"}
{"context": "\t\t\t\t\t\t errmsg(\"unit \\\"%s\\\" not supported for type %s\",\n{\n\tPG_RETURN_TIMESTAMPTZ(result);\n\tresult = (Interval *) palloc(sizeof(Interval));\n\t\t\t{", "partial_line": "case D", "completion": "case DTK_MINUTE: <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\tINSTRUMENT_SORT_GROUP(node, fullsort);\n\t\t\t\t\t\t   nTuples);\n\t\t\t\tnode->outerNodeDone = true;\n\t\t\t}", "partial_line": "nTupl", "completion": "nTuples++; <|endoftext|>"}
{"context": "\t\tforeach(lc2, partrelpruneinfos)\n\t\t\tPartitionedRelPruneInfo *pinfo = lfirst_node(PartitionedRelPruneInfo, lc2);\n\t\t\tPartitionedRelPruningData *pprune = &prunedata->partrelprunedata[j];\n\t\t\tPartitionKey partkey;\n\t\t\t\tInitPartitionPruneContext(&pprune->initial_context,", "partial_line": "prunestate->execparamids =", "completion": "prunestate->execparamids = bms_add_members(prunestate->execparamids, <|endoftext|>"}
{"context": "\t\t}\n\t\t{\n\txlhdr.t_infomask = newtup->t_data->t_infomask;\n\t\tXLogRegisterBufData(0,\n\t\t{", "partial_line": "(char *) new", "completion": "(char *) newtup->t_data + newtup->t_data->t_hoff + prefixlen, <|endoftext|>"}
{"context": "\tAssert(natts == rel->attrmap->maplen);\n\t\t\tapply_error_callback_arg.remote_attnum = remoteattnum;\n\t\t\t\tOid\t\t\ttypinput;\n\t\t\t\tslot->tts_isnull[i] = false;\n\t\t\t}", "partial_line": "apply_han", "completion": "apply_handle_commit(StringInfo s) <|endoftext|>"}
{"context": "get_ts_parser_func(DefElem *defel, int attnum)\n\tswitch (attnum)\n\t\tcase Anum_pg_ts_parser_prsend:\n\t\t\tretTypeId = VOIDOID;\n\t\t\tnargs = 1;", "partial_line": "defa", "completion": "default: <|endoftext|>"}
{"context": "\tPgStat_StatDBEntry *adw_entry;\n} avw_dbase;\n} av_relation;\n{\ntypedef struct WorkerInfoData", "partial_line": "bool\t\twi_sh", "completion": "bool\t\twi_sharedrel; <|endoftext|>"}
{"context": "\t\t   (Size) ((Size) (maxBlockSize - Generation_BLOCKHDRSZ) / Generation_CHUNK_FRACTION))\n\t\tGenerationBlock *block = dlist_container(GenerationBlock, node, miter.cur);\n\tset->nextBlockSize = set->initBlockSize;\n\tAssert(!dlist_is_empty(&set->blocks));\nGenerationAllocLarge(MemoryContext context, Size size, int flags)", "partial_line": "Generatio", "completion": "GenerationBlock *block; <|endoftext|>"}
{"context": "\tReleaseSysCache(opertup);\nstatic void\n{\n\ttypetup = SearchSysCache1(TYPEOID, ObjectIdGetDatum(typid));\n\t\telog(ERROR, \"cache lookup failed for type %u\", typid);", "partial_line": "typform", "completion": "typform = (Form_pg_type) GETSTRUCT(typetup); <|endoftext|>"}
{"context": "#include \"commands/progress.h\"\n#include \"pgstat.h\"\n#include \"utils/fmgroids.h\"", "partial_line": "Oid *coll", "completion": "Oid *collationOids, <|endoftext|>"}
{"context": "\tif (var->varno == OUTER_VAR && dpns->outer_tlist)\n\t}\n\t{\n\t\tresolve_special_varno((Node *) tle->expr, context,\n\tAttrNumber\tattnum;", "partial_line": "depa", "completion": "deparse_namespace *dpns; <|endoftext|>"}
{"context": "\t\tvar = va_arg(args, void *);\n\t\tarrsize = va_arg(args, long);\n\t\t\t\tdata_var.ind_varcharsize = varcharsize;\n\t\t\t\tif (!get_char_item(lineno, var, vartype, PQfname(ECPGresult, index), varcharsize))\n\t\t\t\t\tva_end(args);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t}\n\treturn id_return->data;\nfmtQualifiedIdEnc(const char *schema, const char *id, int encoding)\n\tPQExpBuffer lcl_pqexp = createPQExpBuffer();\n{", "partial_line": "version_number %", "completion": "version_number % 10000); <|endoftext|>"}
{"context": "\t\tmemcpy(&fpw, XLogRecGetData(record), sizeof(bool));\n\t\tif (!fpw)\n\t\tlastFullPageWrites = fpw;\n}\nget_sync_bit(int method)", "partial_line": "int\t\t\to_direct_f", "completion": "int\t\t\to_direct_flag = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t queryString);\n\t\t\t\t\t\t\t\t\t\t\t   address.objectId);\n\t\t\t\t\t\t\tstmts = list_concat(morestmts, stmts);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t   NULL,", "partial_line": "comm", "completion": "commandCollected = true; <|endoftext|>"}
{"context": "\t\t\t\ti;\n\tchar\t   *label;\n\t{\n\t\tappendPQExpBufferStr(query,\n\tqualtypname = pg_strdup(fmtQualifiedDumpable(tyinfo));", "partial_line": "binary_upgrade", "completion": "binary_upgrade_extension_member(q, &tyinfo->dobj, <|endoftext|>"}
{"context": "\t\t\tcurrent.buffer = parent.buffer;\n\t\t}\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}", "partial_line": "in.nNodes = inn", "completion": "in.nNodes = innerTuple->nNodes; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t  rtoffset, 1);\n\t\t\t\tsplan->tidrangequals =", "partial_line": "spla", "completion": "splan->scan.plan.qual = <|endoftext|>"}
{"context": "\t\t\t\t\telog(FATAL, \"failed to initialize %s to %g\",\n\t\t\t\t*conf->variable = conf->reset_val = newval;\n\t\t\t\tconf->gen.extra = conf->reset_extra = extra;\n\t\t\t\tbreak;\n\t\t\t{", "partial_line": "conf->gen.name, newval", "completion": "conf->gen.name, newval ? newval : \"\"); <|endoftext|>"}
{"context": "\t}\n\t}\n\t}\n\treturn lt->prealloc[--lt->nprealloc];\n\t{", "partial_line": "if (lts->freeBlocksLen", "completion": "if (lts->freeBlocksLen * 2 * sizeof(int64) > MaxAllocSize) <|endoftext|>"}
{"context": "\taggstate->hash_metacxt = AllocSetContextCreate(aggstate->ss.ps.state->es_query_cxt,\n\taggstate->hash_tablecxt = BumpContextCreate(aggstate->ss.ps.state->es_query_cxt,\n\t\t\t\t\t\t\t\t\t\t\t\tmaxBlockSize);\n\t\tnbuckets = max_nbuckets;\n}", "partial_line": "double\t\tdpar", "completion": "double\t\tdpartitions; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t}\n\t\t\t\t\t\t\t\t\t\t\tpkattnum, pktypoid, pkcolloid,\n\t\t\t\t\t\t\t\t\t\t fkconstraint->pk_attrs,\n\tfor (i = 0; i < numfks; i++)", "partial_line": "fkconstraint->fk_upd_action == FKCON", "completion": "fkconstraint->fk_upd_action == FKCONSTR_ACTION_SETDEFAULT || <|endoftext|>"}
{"context": "\t{\n\tconscan = systable_beginscan(conrel, ConstraintRelidTypidNameIndexId, true,\n\t\t\t\t\t\t  Anum_pg_constraint_conexclop,\n\t\t\tnelem != indnkeyatts ||\n\tsystable_endscan(conscan);", "partial_line": "ops[i], indexRelati", "completion": "ops[i], indexRelation->rd_opfamily[i]); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\tkeycoltype));\n\t\tif (idxrec->indnullsnotdistinct)\n\t\tstr = flatten_reloptions(indexrelid);\n\t\t\tappendStringInfo(&buf, \" WITH (%s)\", str);\n\t\t\tpfree(str);", "partial_line": "Node", "completion": "Node\t   *node; <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) error ( );}\n      { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"fetch in MYCURS\", ECPGt_EOIT, \n\t{\n\tECPGt_int,&(OCTET_LENGTH),(long)1,(long)1,sizeof(int), ECPGd_length,\n\tECPGt_int,&(LENGTH),(long)1,(long)1,sizeof(int), ECPGd_type,", "partial_line": "printf (\"numeric(", "completion": "printf (\"numeric(%d,%d)\", PRECISION, SCALE); <|endoftext|>"}
{"context": "\treturn len;\n\t\tlen = 2;\t\t\t\t\n{\n\t\tlen = 4;\n\telse", "partial_line": "static", "completion": "static int <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"a name must follow the \\\"/\\\" sign\")));\n\treturn result_acl;\n\tAcl\t\t   *result_acl;\n\tmemcpy(ACL_DAT(result_acl),\n\t\t   ACL_DAT(left_acl),", "partial_line": "ACL_NUM(left_acl) * si", "completion": "ACL_NUM(left_acl) * sizeof(AclItem)); <|endoftext|>"}
{"context": "\t\tint\t\t\ti;\n\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t\t\t CurrentMemoryContext);\n\t\t\t\t\t\t\t\t\t\t\t\t (Datum) 0,\n\t\tvalues[0] = Int32GetDatum(funcctx->call_cntr);", "partial_line": "pg_mcv_list_in(PG_FUNC", "completion": "pg_mcv_list_in(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tif (rc != PLPGSQL_RC_RETURN)\n\testate.err_text = gettext_noop(\"while casting return value to function's return type\");\n\tif (estate.retisset)\n\t\t\t\t\t errmsg(\"materialize mode required, but it is not allowed in this context\")));\n\t\t\tMemoryContext oldcxt;", "partial_line": "rsi->setDesc", "completion": "rsi->setDesc = CreateTupleDescCopy(estate.tuple_store_desc); <|endoftext|>"}
{"context": "static int r_other_suffix(struct SN_env * z);\nstatic const symbol s_0_6[3] = { 'e', 'n', 'e' };", "partial_line": "static const symbol s_0_19[4] = { 'e',", "completion": "static const symbol s_0_19[4] = { 'e', 'n', 'e', 's' }; <|endoftext|>"}
{"context": "\tsize_t\t\tlen;\n\tint\t\t\ticode;\n\tswitch (errcode)\n\t\t\tfor (r = rerrs; r->code >= 0; r++)\n\t\t\t\tmsg = convbuf;", "partial_line": "for (r = r", "completion": "for (r = rerrs; r->code >= 0; r++) <|endoftext|>"}
{"context": "#define WRITE_OID_FIELD(fldname) \\\n#define WRITE_LONG_FIELD(fldname) \\\n\t\t\t\t\t booltostr(node->fldname))\n#define WRITE_NODE_ARRAY(fldname, len) \\\n\t(appendStringInfoString(str, \" :\" CppAsString(fldname) \" \"), \\", "partial_line": "writeOi", "completion": "writeOidCols(str, node->fldname, len)) <|endoftext|>"}
{"context": "}\n\t\t\t \"%Y-%m-%d %H:%M:%S\",\n\telse\n\tint\t\t\tresult;\n\t*cursor += 2;", "partial_line": "*cu", "completion": "*cursor += 4; <|endoftext|>"}
{"context": "\t\t\tforeach(lc, cte->cycle_clause->cycle_col_list)\n\t\t\t\t\t\t\t\t\t   quote_identifier(strVal(lfirst(lc))));\n\t\t\t{\n\t\t\t\tConst\t   *cmv = castNode(Const, cte->cycle_clause->cycle_mark_value);\n\t\t\t\tif (!(cmv->consttype == BOOLOID && !cmv->constisnull && DatumGetBool(cmv->constvalue) == true &&", "partial_line": "get_rule_expr", "completion": "get_rule_expr(cte->cycle_clause->cycle_mark_value, context, false); <|endoftext|>"}
{"context": "\t\tPreparedStatement *prep_stmt;\n\t\t\tDatum\t\tvalues[8];\n\t\t\t{\n\t\t\t\tnulls[4] = true;\n\t\t\tvalues[7] = Int64GetDatumFast(prep_stmt->plansource->num_custom_plans);", "partial_line": "return", "completion": "return (Datum) 0; <|endoftext|>"}
{"context": "\t\t\t\telse if (strcmp(optarg, \"t\") == 0 || strcmp(optarg, \"tar\") == 0)\n\t\t\t\t\tformat = 't';\n\t\t\t\tbreak;\n\t\t\t\tshowprogress = true;\n\t\t\t\tbreak;", "partial_line": "c", "completion": "case 'U': <|endoftext|>"}
{"context": "\tCheckOpSlotCompatibility(fetchop, econtext->ecxt_outertuple);\ndispatch_compare_ptr(const void *a, const void *b)\n\tconst ExprEvalOpLookup *la = (const ExprEvalOpLookup *) a;\n\t\treturn 1;\n\treturn 0;", "partial_line": "sizeo", "completion": "sizeof(ExprEvalOpLookup), <|endoftext|>"}
{"context": "\t\t\t}\n\t\tif (last_candidate)\n\t\t\t\tknown_type = input_base_typeids[i];\n\t\t\t\tknown_type = UNKNOWNOID;\n}\t\t\t\t\t\t\t\t", "partial_line": "func_get_", "completion": "func_get_detail(List *funcname, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  EXPRKIND_TARGET);\n\t\t\t\t\t\t\t\t\t\t\t   EXPRKIND_LIMIT);\n\t\taction->qual =\n\t\t\t\t\t\t\t\t  (Node *) action->qual,\n\t}", "partial_line": "if (rte-", "completion": "if (rte->tablesample) <|endoftext|>"}
{"context": "\t\t{\n\t\t\tvalues[Anum_pg_init_privs_objsubid - 1] = Int32GetDatum(objsubid);\n\t\t\tvalues[Anum_pg_init_privs_privtype - 1] =\n\t\t\t\t\t\t\t\t\t  nnewmembers, newmembers);\n\tsystable_endscan(scan);", "partial_line": "bo", "completion": "bool\t\tisNull; <|endoftext|>"}
{"context": "\t\t\tnplain++;\n\t\t\t(inferopfamily != opfamily || inferopcinputtype != opcinputtype))\n\t\t\tNode\t   *nattExpr = list_nth(idxExprs, (natt - 1) - nplain);\n\t\t}\nestimate_rel_size(Relation rel, int32 *attr_widths,", "partial_line": "double\t\td", "completion": "double\t\tdensity; <|endoftext|>"}
{"context": "\t\tswitch (ftype[i])\n\t\t\tcase DTK_TZ:\n\t\t\t\t{\n\t\t\t\t\t\tif (itm_in->tm_usec == PG_INT64_MIN)\n\t\t\t\t\t\titm_in->tm_usec = -itm_in->tm_usec;", "partial_line": "case DTK_NU", "completion": "case DTK_NUMBER: <|endoftext|>"}
{"context": "                if (ret < 0) return ret;\n            break;\n}\n    {   int mlimit1;\n    return 1;", "partial_line": "{   int ret = slic", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\tif (resultRelInfo->ri_PartitionCheckExpr == NULL)\n\t}\n\tecontext->ecxt_scantuple = slot;\n\t\t\t\t\t\t\tEState *estate)\n\t\troot_relid = RelationGetRelid(rootrel->ri_RelationDesc);", "partial_line": "if", "completion": "if (map != NULL) <|endoftext|>"}
{"context": "            {   int ret = r_R1(z);\n                if (ret <= 0) return ret;\n            }\n            {   int ret = r_R2(z);\n                if (ret <= 0) return ret;", "partial_line": "{   int ret = slic", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\tcommontypmod = select_common_typmod(pstate,\n\t\tlfirst(harg) = coerce_type(pstate,\n\t\t\t\t\t\t\t\t   commontype, commontypmod,\n\t\t\t\t\t\t\t\t   -1);\n\t\t\t\t\t\t\t\t   -1);", "partial_line": "COERCE_I", "completion": "COERCE_IMPLICIT_CAST, <|endoftext|>"}
{"context": "\t\tkey.opcode = (void *) op->opcode;\n\t\t\t\t\t  reverse_dispatch_table,\n\t\t\t\t\t  dispatch_compare_ptr);\n}\n{", "partial_line": "fcinfo->isn", "completion": "fcinfo->isnull = false; <|endoftext|>"}
{"context": "\t\t{\n\t\tif (opt_border >= 2)\n\t\t\tfor (i = 0, ptr = cont->headers; i < cont->ncolumns; i++, ptr++)\n\t\t\t\tfputc('}', fout);\n\t{", "partial_line": "latex_escaped_print", "completion": "latex_escaped_print(*ptr, fout); <|endoftext|>"}
{"context": "\t\t\t\tnew_aip + dst + 1,\n\tAcl\t\t   *new_acl;\n\told_aip = ACL_DAT(old_acl);\n\tmemcpy(new_aip, old_aip, num * sizeof(AclItem));\n\t\tdst = 0;", "partial_line": "ARR_DIMS(new_acl)[", "completion": "ARR_DIMS(new_acl)[0] = dst; <|endoftext|>"}
{"context": "static void\n\tPQconsumeInput(pset.db);\n\t\telse\n\t\tPQconsumeInput(pset.db);\nPrintQueryTuples(const PGresult *result, const printQueryOpt *opt,", "partial_line": "FILE *pr", "completion": "FILE *printQueryFout) <|endoftext|>"}
{"context": "\t\treturn;\nsmgrcreate(SMgrRelation reln, ForkNumber forknum, bool isRedo)\n}\n\tint\t\t\ti = 0;\nvoid", "partial_line": "ForkNumber\tfo", "completion": "ForkNumber\tforknum; <|endoftext|>"}
{"context": "\tAssert(false);\n\t\treturn PAM_CONV_ERR;\n\t\t\t\t\t\t(errmsg(\"error from underlying PAM layer: %s\",\n\tfor (i = 0; i < num_msg; i++)\nCheckPAMAuth(Port *port, const char *user, const char *password)", "partial_line": "int\t\t\tr", "completion": "int\t\t\tretval; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t &vbuf);\n\ttext\t   *json = PG_GETARG_TEXT_PP(0);\n\tif (result != NULL)\nDatum\n\tif (!JB_ROOT_IS_OBJECT(jb))", "partial_line": "int\t\t\te", "completion": "int\t\t\telement = PG_GETARG_INT32(1); <|endoftext|>"}
{"context": "#include \"pg_regress.h\"\n\t\t\t\t\t _stringlist **tags)\n{\n\t\t\texit(2);\n\t\tlooked_up_isolation_exec = true;", "partial_line": "inputdir, test", "completion": "inputdir, testname); <|endoftext|>"}
{"context": "\tSortSupport ssup = &mss->ssup[sortdim];\n\tint\t\t\ti;\n\t\t\t\t\t\t\t\t\t  ib->values[i], ib->isnull[i],\n\t\t\treturn compare;\n\t}", "partial_line": "multi_sort_co", "completion": "multi_sort_compare_dim(int dim, const SortItem *a, const SortItem *b, <|endoftext|>"}
{"context": "}\n\t\tpsrc = page + offset;\n\t\tpg_read_barrier();\n}\n\t{", "partial_line": "fullpages = bytesleft", "completion": "fullpages = bytesleft / UsableBytesInPage; <|endoftext|>"}
{"context": "\t}\n\t{\n\tif (BufferIsValid(parentBuffer))\ngist_redo(XLogReaderState *record)\n\t\t\tbreak;", "partial_line": "case X", "completion": "case XLOG_GIST_DELETE: <|endoftext|>"}
{"context": "\t\t\t\t\telse if (rettypeid == ANYMULTIRANGEOID)\n\t\t\t\t{\n\t\t\t\t\t\t\t\t errmsg(\"could not determine actual return type \"\n\t\t\tif (typeStruct->typtype == TYPTYPE_PSEUDO)\n\t\t\tfunction->fn_rettyplen = typeStruct->typlen;", "partial_line": "true", "completion": "true); <|endoftext|>"}
{"context": "\tscanstate->ss.ss_currentScanDesc = NULL;\nExecReScanSampleScan(SampleScanState *node)\nstatic void\n\tDatum\t   *params;\n\tint\t\t\ti;", "partial_line": "(errcode(", "completion": "(errcode(ERRCODE_INVALID_TABLESAMPLE_ARGUMENT), <|endoftext|>"}
{"context": "\t\t\t\t\t EpochFromFullTransactionId(xlrec->snapshotConflictHorizon),\n}\n\t\tcase XLOG_GIST_PAGE_DELETE:\nconst char *\n{", "partial_line": "const char", "completion": "const char *id = NULL; <|endoftext|>"}
{"context": "\t\t{\n\tclassRel = table_open(RelationRelationId, AccessShareLock);\n\twhile ((tuple = heap_getnext(scan, ForwardScanDirection)) != NULL)\n\t\tForm_pg_class classform = (Form_pg_class) GETSTRUCT(tuple);\nvoid", "partial_line": "if (typ->ty", "completion": "if (typ->typtype == TYPTYPE_COMPOSITE) <|endoftext|>"}
{"context": "\t\tif (classoid != middle[-1].classoid ||\n\tmiddle += nmatch;\n\t{\n\tint\t\t\ti_label;\n\tDumpableObject *dobj;", "partial_line": "\"SELECT label, provider, classoid, ob", "completion": "\"SELECT label, provider, classoid, objoid, objsubid \" <|endoftext|>"}
{"context": "\tWordEntry  *ptr;\n\tchar\t   *str;\n\tif (prs->curwords > 0)\n\t\t\tlenstr += sizeof(uint16) + prs->words[i].pos.apos[0] * sizeof(WordEntryPos);\n\ttotallen = CALCDATASIZE(prs->curwords, lenstr);", "partial_line": "str =", "completion": "str = STRPTR(in); <|endoftext|>"}
{"context": "\t\t\t\t\t\tnspname,\n\t\t\t\t\t\tRelationGetRelationName(OldHeap))));\n\t\t\t\t\t\tRelationGetRelationName(OldHeap))));\n\t\t\t\t\t\t\t\t\t&num_tuples, &tups_vacuumed,\n\t\t\t\t\t   \"%s.\",", "partial_line": "Comma", "completion": "CommandCounterIncrement(); <|endoftext|>"}
{"context": "\t\tint\t\t\tkeycol = indexInfo->ii_IndexAttrNumbers[i];\n\t\tDatum\t\tiDatum;\n\t\t\tiDatum = slot_getsysattr(slot, keycol, &isNull);\n\t\t\tiDatum = slot_getattr(slot, keycol, &isNull);\nindex_update_stats(Relation rel,", "partial_line": "void", "completion": "void\t   *state; <|endoftext|>"}
{"context": "                    }\n                        if (z->c <= z->lb || z->p[z->c - 1] != 'e') goto lab6;\n                    goto lab4;\n                }\n                {   int ret = slice_del(z);", "partial_line": "if (out_groupin", "completion": "if (out_grouping_b(z, g_v_I, 73, 232, 0)) goto lab8; <|endoftext|>"}
{"context": "\t\t\t\t\t\t errhint(\"Try returning a string type or bytea.\")));\n\telse\n\t\treturning->format = makeJsonFormat(JS_FORMAT_JSON, JS_ENC_DEFAULT, -1);\n\t}\nstatic Node *", "partial_line": "case JSO", "completion": "case JSON_EXISTS_OP: <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t outbuf.pBuffers[0].pvBuffer, outbuf.pBuffers[0].cbBuffer))\n\t\t}\n}\npg_SSPI_startup(PGconn *conn, int use_negotiate, int payloadlen)", "partial_line": "use_negotiate ? \"neg", "completion": "use_negotiate ? \"negotiate\" : \"kerberos\", <|endoftext|>"}
{"context": "\twhile ((idhentry = (RelIdCacheEnt *) hash_seq_search(&status)) != NULL)\n\t\trelation = idhentry->reldesc;\n\t\tif (relation->rd_createSubid != InvalidSubTransactionId ||\n\t\trelcacheInvalsReceived++;\n\t\t\t\trebuildFirstList = lcons(relation, rebuildFirstList);", "partial_line": "else if (relation->rd", "completion": "else if (relation->rd_isnailed) <|endoftext|>"}
{"context": "\t\tList\t   *requiredSchemas;\n\t\tObjectAddress myself;\n\t\t\t\t\t\t\t\t\t NULL, 1, key);\n\t\t\telog(ERROR, \"could not find tuple for extension %u\",\n\t\textForm = (Form_pg_extension) GETSTRUCT(extTup);", "partial_line": "systa", "completion": "systable_endscan(extScan); <|endoftext|>"}
{"context": "\t\t\t*err_msg = \"multiple values specified for host address\";\n\t\t}\n\t\ttoken = linitial(tokens);\n\t\t}\n\t\telse if (token_is_keyword(token, \"samehost\"))", "partial_line": "ret = pg_getaddrinfo_a", "completion": "ret = pg_getaddrinfo_all(str, NULL, &hints, &gai_result); <|endoftext|>"}
{"context": "\t\tnewitemoff = OffsetNumberNext(newitemoff);\n\t\tBuffer\t\trbuf;\n\t\t_bt_insert_parent(rel, heaprel, buf, rbuf, stack, isroot, isonly);\n\t{\n\t\t\t\t_bt_relbuf(rel, metabuf);", "partial_line": "elog(PANIC, \"failed to add", "completion": "elog(PANIC, \"failed to add new item to block %u in index \\\"%s\\\"\", <|endoftext|>"}
{"context": "{ 1, s_4_15, -1, 1, 0},\n    {   int c1 = z->c;\n            int ret = out_grouping(z, g_v, 97, 252, 1);\n        {\n        {", "partial_line": "l", "completion": "lab0: <|endoftext|>"}
{"context": "#include \"storage/fd.h\"\n\tif (targetTLI == 1)\n\t\tentry->begin = entry->end = InvalidXLogRecPtr;\n\tif (ArchiveRecoveryRequested)\n\t\tif (errno != ENOENT)", "partial_line": "char\t   *", "completion": "char\t   *ptr; <|endoftext|>"}
{"context": "\t\t\t}\n\tConst\t   *con;\n\t\tcase JSON_BEHAVIOR_EMPTY_ARRAY:\n\t\t\ttypid = BOOLOID;\n\t\t\tval = (Datum) 0;", "partial_line": "con = makeConst(typ", "completion": "con = makeConst(typid, -1, InvalidOid, len, val, isnull, isbyval); <|endoftext|>"}
{"context": "\t\tpending->apply_error_count++;\nvoid\n\tPgStat_EntryRef *entry_ref;\nvoid\n\tpgstat_get_entry_ref(PGSTAT_KIND_SUBSCRIPTION, InvalidOid, subid,", "partial_line": "pgstat_fetch_stat_subscr", "completion": "pgstat_fetch_stat_subscription(Oid subid) <|endoftext|>"}
{"context": "\t\tnulls[Anum_pg_proc_proargmodes - 1] = true;\n\t\tvalues[Anum_pg_proc_proargnames - 1] = parameterNames;\n\telse\n\tif (parameterDefaults != NIL)\n\tvalues[Anum_pg_proc_prosrc - 1] = CStringGetTextDatum(prosrc);", "partial_line": "if (pr", "completion": "if (probin) <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\tMyReplicationSlot->data.failover = *failover;\n\t\t\tupdate_slot = true;\n\t\tSpinLockRelease(&MyReplicationSlot->mutex);\n\t{", "partial_line": "Replicatio", "completion": "ReplicationSlotMarkDirty(); <|endoftext|>"}
{"context": "#include <pgtypes_interval.h>\n#include <pgtypes_numeric.h>\nstruct sqlca_t\n\tchar\t\tsqlstate[5];\n}", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\tPLy_input_setup_func(&cursor->result, cursor->mcxt,\n\t\t\t\t\t\t exec_ctx->curr_proc);\n\t{\n\t\tMemoryContext tmpcontext;\n\t\tvolatile int j;", "partial_line": "nulls", "completion": "nulls = NULL; <|endoftext|>"}
{"context": "\tLWLockAcquire(MultiXactTruncationLock, LW_EXCLUSIVE);\n\toldestMulti = MultiXactState->oldestMultiXactId;\n\tif (earliest < FirstMultiXactId)\n\t}\n\tif (newOldestMulti == nextMulti)", "partial_line": "\"members [%u, %u), member", "completion": "\"members [%u, %u), members segments [%\" PRIx64 \", %\" PRIx64 \")\", <|endoftext|>"}
{"context": "\t{\n\twipe_mem(pointer, chunksize);\n\telse\nGenerationRealloc(void *pointer, Size size, int flags)\n\tMemoryChunk *chunk = PointerGetMemoryChunk(pointer);", "partial_line": "if (MemoryChunkIsEx", "completion": "if (MemoryChunkIsExternal(chunk)) <|endoftext|>"}
{"context": "\t\t*errstr = _(\"could not encode salt\");\n\t\tfree(result);\n#else\n\t*(p++) = ':';\n\t{", "partial_line": "free(r", "completion": "free(result); <|endoftext|>"}
{"context": "static bool\n\t\t\t\t\t   HANDLE childProcess, pid_t childPid,\n#endif\n\tif (client_sock)\n\t\tmemcpy(&param->client_sock, client_sock, sizeof(ClientSocket));", "partial_line": "param->MyPMCh", "completion": "param->MyPMChildSlot = child_slot; <|endoftext|>"}
{"context": "\telse if (fout->remoteVersion >= 150000)\n\t\tappendPQExpBufferStr(query,\n\tif (!PQgetisnull(res, 0, i_collcollate))\n\t\tif (collctype[0] == '\\0')\n\t\t\tcollctype = NULL;", "partial_line": "colllocale = PQgetvalue(res, 0,", "completion": "colllocale = PQgetvalue(res, 0, i_colllocale); <|endoftext|>"}
{"context": "\t\te_code += len;\n\t    ps.want_blank = false;\n\t    ++line_no;\t\t\n\t    break;\n\t    if (*token == '[')", "partial_line": "ps.want_bl", "completion": "ps.want_blank = true; <|endoftext|>"}
{"context": "static void\n\t\t\tbreak;\n\t\tcase PLPGSQL_STMT_CASE:\n\t\t\tdump_forc((PLpgSQL_stmt_forc *) stmt);\n\t\t\tbreak;", "partial_line": "case PLPGSQL_STMT", "completion": "case PLPGSQL_STMT_RETURN: <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\t\t\tstats->stacoll[slot_idx] = stats->attrcollid;\n\t\t\tstats->numnumbers[slot_idx] = num_mcv;\n\t\t\tstats->stavalues[slot_idx] = mcv_values;", "partial_line": "if (num_h", "completion": "if (num_hist >= 2) <|endoftext|>"}
{"context": "\t\t\t\t&subxacts[subxact_data.nsubxacts].offset);\nstatic inline void\n\tsubxact_filename(path, subid, xid);\n{\n\t{", "partial_line": "Asser", "completion": "Assert(stream_fd != NULL); <|endoftext|>"}
{"context": "\t\tNULL, NULL, NULL\n\t{\n\t\t{\"archive_timeout\", PGC_SIGHUP, WAL_ARCHIVING,\n\t\t&XLogArchiveTimeout,\n\t},", "partial_line": "{\"post_auth_delay\", PGC_BACKEN", "completion": "{\"post_auth_delay\", PGC_BACKEND, DEVELOPER_OPTIONS, <|endoftext|>"}
{"context": "static const symbol s_3_63[5] = { 0xE9, 's', 's', 'i', 'm' };\nstatic const symbol s_3_65[2] = { 0xEF, 'm' };\nstatic const symbol s_3_66[2] = { 'a', 'n' };\nstatic const symbol s_3_72[3] = { 0xED, 'a', 'n' };\nstatic const symbol s_3_78[5] = { 'a', 'r', 'i', 'e', 'n' };", "partial_line": "static cons", "completion": "static const symbol s_3_85[4] = { 'a', 's', 'e', 'n' }; <|endoftext|>"}
{"context": "\treturn json_agg_transfn_worker(fcinfo, true);\nDatum\njson_agg_finalfn(PG_FUNCTION_ARGS)\n\t\tPG_RETURN_NULL();\n\tPG_RETURN_TEXT_P(catenate_stringinfo_string(state->str, \"]\"));", "partial_line": "uint32\t\tha", "completion": "uint32\t\thash = hash_bytes_uint32(entry->object_id); <|endoftext|>"}
{"context": "            case 4:\n                if (in_grouping_b(z, g_s_ending, 98, 116, 0)) goto lab0;\n                }\n    }\n        z->ket = z->c;", "partial_line": "if (z->c - 1 <= z->lb || z->p[z->c - 1] >>", "completion": "if (z->c - 1 <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((1327104 >> (z->p[z->c - 1] & 0x1f)) & 1)) goto lab3; <|endoftext|>"}
{"context": "\t\t&huge_pages,\n\t\tHUGE_PAGES_TRY, huge_pages_options,\n\t\t\tNULL,\n\t\t\tGUC_EXPLAIN\n\t\t&plan_cache_mode,", "partial_line": "PLAN_CACHE_MODE_AUTO, plan_cache", "completion": "PLAN_CACHE_MODE_AUTO, plan_cache_mode_options, <|endoftext|>"}
{"context": "}\npg_bind_textdomain_codeset(const char *domainname)\n\t\tif (encoding != PG_SQL_ASCII &&\n\t\t\traw_pg_bind_textdomain_codeset(domainname, encoding))\n\tnew_msgenc = pg_get_encoding_from_locale(NULL, elog_ok);", "partial_line": "GetDatabaseE", "completion": "GetDatabaseEncoding(void) <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\tinit_var(&result);\n\t}\n\tif (NUMERIC_IS_SPECIAL(num1) || NUMERIC_IS_SPECIAL(num2))\n\t\t\t\tcase 0:", "partial_line": "PG_RETURN_NUMERIC(make_result(", "completion": "PG_RETURN_NUMERIC(make_result(&const_pinf)); <|endoftext|>"}
{"context": "    {\"long\", 4},\n    {\"restrict\", 12},\n    {\"sizeof\", 2},\n    {\"static\", 10},\nstatic int", "partial_line": "stati", "completion": "static int <|endoftext|>"}
{"context": "\tint\t\t\ti,\n\t\t\t\tslot_stored_count;\n\tfor (i = 0; i < nreferenced; i++, referenced++)\n\t\tExecClearTuple(slot[slot_stored_count]);\n\t\tslot[slot_stored_count]->tts_values[Anum_pg_depend_refclassid - 1] = ObjectIdGetDatum(referenced->classId);", "partial_line": "memset(slot[slot_stored_c", "completion": "memset(slot[slot_stored_count]->tts_isnull, false, <|endoftext|>"}
{"context": "pg_popcount64_fast(uint64 word)\n\tuint64\t\tpopcnt = 0;\n\t\tbuf = (const char *) words;\n\t\twhile (bytes >= 8)\n\t\t\tpopcnt += pg_popcount32_fast(*words++ & maskv);", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t  state->system_identifier);\n\t\telse if (longhdr->xlp_seg_size != state->segcxt.ws_segsize)\n\telse if (offset == 0)\n\t{", "partial_line": "\"invalid info bits %04X in WAL s", "completion": "\"invalid info bits %04X in WAL segment %s, LSN %X/%X, offset %u\", <|endoftext|>"}
{"context": "static const symbol s_0_1[3] = { 'l', 'a', 'h' };\nstatic const struct among a_0[3] =\n{\nstatic const symbol s_2_0[1] = { 'i' };", "partial_line": "{ 1, s_2_0, -", "completion": "{ 1, s_2_0, -1, 1, r_SUFFIX_I_OK}, <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t}\n\t\t\ttuplestore_putvalues(rsi->setResult, rsi->setDesc, values, nulls);\n\t\t}\n\tMemoryContextDelete(tmp_cxt);", "partial_line": "sem->semstate", "completion": "sem->semstate = state; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  \"acldefault('f', p.proowner) AS acldefault, \"\n\t\t\t\t\t\t  \"AND pip.classoid = 'pg_proc'::regclass \"\n\t\t\t\t\t\t  \"WHERE %s\"\n\t\t\t\t\t\t  \"objid = p.oid AND deptype = 'i')\"\n\t\t\t\t\t\t  \"\\n  pronamespace != \"", "partial_line": "no", "completion": "not_agg_check, <|endoftext|>"}
{"context": "\treturn true;\n\tMemoryContext expr_context,\n\t{\n\t\tbool\t   *exprnulls;\n\t\tint\t\t\ttcnt;", "partial_line": "GetPerTup", "completion": "GetPerTupleExprContext(estate), <|endoftext|>"}
{"context": "\t\t\t\t\t\t  Relids required_outer)\n\tRelids\t\tjoinrelids;\n\t\treturn ppi;\n\t{\n\t\tif (join_clause_is_movable_into(rinfo,", "partial_line": "pclauses = lappend(pc", "completion": "pclauses = lappend(pclauses, rinfo); <|endoftext|>"}
{"context": "\t}\n\t\tereport(elevel,\n\t*mapped_size = info.RegionSize;\n\t*impl_private = hmap;\n}", "partial_line": "snprintf(name, 64, PG", "completion": "snprintf(name, 64, PG_DYNSHMEM_DIR \"/\" PG_DYNSHMEM_MMAP_FILE_PREFIX \"%u\", <|endoftext|>"}
{"context": "\t\t\tsegno++;\n\t\t\tolditems = ginPostingListDecode(oldseg, &nolditems);\n\t\t\t\t\t\t\t\t\t\t\tBLCKSZ, &npacked);\n\t\tif (segptr != segmentend)\n\t\t\t\tsegno++;", "partial_line": "segpt", "completion": "segptr = (Pointer) oldseg; <|endoftext|>"}
{"context": "\t\tif (expr_type != req_type)\n\t\texpr = (Expr *) applyRelabelType((Node *) expr,\n\t\t\t\t\t\t\t\t\t\t COERCE_IMPLICIT_CAST, -1, false);\n}\n\t\t\t   JoinDomain *jdomain, EquivalenceMember *parent, Oid datatype)", "partial_line": "em->em_ex", "completion": "em->em_expr = expr; <|endoftext|>"}
{"context": "{\n\tSize\t\tsize;\n\t\tsize = add_size(size,\n\t\tprocArray->replication_slot_catalog_xmin = InvalidTransactionId;\n\t}", "partial_line": "ProcArr", "completion": "ProcArrayAdd(PGPROC *proc) <|endoftext|>"}
{"context": "\t{\n\t\tif (lts->freeBlocksLen * 2 * sizeof(int64) > MaxAllocSize)\n\theap = lts->freeBlocks;\n}\n\tAssert(lt->buffer_size > 0);", "partial_line": "lt->buffer = p", "completion": "lt->buffer = palloc(lt->buffer_size); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION),\n\t\tereport(ERROR,\n\t\tAggStatePerPhase phase = &aggstate->phases[phaseidx];\n\t\tbool\t\tdohash = false;", "partial_line": "phase-", "completion": "phase->aggstrategy == AGG_SORTED) <|endoftext|>"}
{"context": "\t\tappendPQExpBuffer(q, \"    HEADLINE = %s,\\n\",\n\t\t\t\t\t\t\t\t  .description = \"TEXT SEARCH PARSER\",\n\tdestroyPQExpBuffer(q);\n\tPQExpBuffer q;\n\tappendPQExpBuffer(query, \"SELECT nspname, tmplname \"", "partial_line": "appendPQ", "completion": "appendPQExpBufferStr(q, \"    TEMPLATE = \"); <|endoftext|>"}
{"context": "{ 8, s_2_1782, 1780, 106, 0},\n{ 4, s_2_1818, 1813, 39, 0},\n{ 6, s_2_1820, 1813, 85, 0},\n{ 5, s_2_1843, 1813, 79, 0},\n{ 5, s_2_1847, 1813, 38, 0},", "partial_line": "{ 5, s_2_18", "completion": "{ 5, s_2_1860, 1859, 47, 0}, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t{\n\t\t\tassert(a->to->tmp == NULL);\n\t\tint\t\t\ti;\n\t\t{", "partial_line": "struct a", "completion": "struct arc *a; <|endoftext|>"}
{"context": "\t\t\tcstate->copy_file = stdin;\n\t\t{\n\t\t{\n\t\t\tif (S_ISDIR(st.st_mode))\n\treturn cstate;", "partial_line": "cstate->rou", "completion": "cstate->routine->CopyFromEnd(cstate); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\tif (!init_execution_state(fcache))\n\t\t\tes = fcache->eslist;\n\t}\n\t\telse if (fcache->lazyEval)", "partial_line": "UnregisterExprContextCallback(", "completion": "UnregisterExprContextCallback(rsi->econtext, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tRBM_NORMAL, info->strategy);\n\t\t\t\tLockBuffer(buffer, GIN_UNLOCK);\n\t\t\t}\n\t\t}\n\t\titup = (IndexTuple) PageGetItem(page, PageGetItemId(page, FirstOffsetNumber));", "partial_line": "Page\t\tres", "completion": "Page\t\tresPage; <|endoftext|>"}
{"context": "\tdlist_head\tblocklist[SLAB_BLOCKLIST_COUNT];\n\tMemoryChunk *freehead;\t\t\n} SlabBlock;\n#if defined(MEMORY_CONTEXT_CHECKING) || defined(USE_ASSERT_CHECKING)\n#define SlabChunkIndex(slab, block, chunk)\t\\", "partial_line": "#define SlabChunkMod(", "completion": "#define SlabChunkMod(slab, block, chunk)\t\\ <|endoftext|>"}
{"context": "}\nchar *\n\t\t\t\t\t\t\t\t  const Oid *declared_arg_types,\n\t\t\t\treturn NULL;\t\n\t\t\tif (declared_arg_types[i] == ANYCOMPATIBLERANGEOID ||", "partial_line": "return N", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"unrecognized jsonb value type: %d\", val->type);\n\t}\n\tJsonb\t   *in = PG_GETARG_JSONB_P(0);\nstatic inline Datum\n{", "partial_line": "state.es", "completion": "state.escontext = escontext; <|endoftext|>"}
{"context": "\t{\n{\n\tstart_xact_command();\n\tif (stmt_name[0] != '\\0')\n\t{", "partial_line": "if (!p", "completion": "if (!psrc) <|endoftext|>"}
{"context": "\t\t\t\t step1 == EEOP_INNER_VAR &&\n\t\t\t\t step2 == EEOP_HASHDATUM_FIRST_STRICT)\n\t{\n\t\t\tstate->evalfunc_private = ExecJustInnerVar;\n\t\t{", "partial_line": "else if (step0 =", "completion": "else if (step0 == EEOP_SCAN_FETCHSOME && <|endoftext|>"}
{"context": "\tshared_stat_reset_contents(kind, entry_ref->shared_stats, ts);\n\tpgstat_unlock_entry(entry_ref);\n}\n\t\t\t\t\t\t\t  Datum match_data, TimestampTz ts)\n{", "partial_line": "header = dsa_get_add", "completion": "header = dsa_get_address(pgStatLocal.dsa, p->body); <|endoftext|>"}
{"context": "\t\tfputc('\\n', fout);\n\t\t\t\tfputc(*p, fout);\n}\n\tconst char *const *ptr;\n\t\topt_border = 2;", "partial_line": "if (cont->opt->sta", "completion": "if (cont->opt->start_table) <|endoftext|>"}
{"context": "\tpg_constraint = table_open(ConstraintRelationId, AccessShareLock);\n\t\t\t\tAnum_pg_constraint_contypid,\nAdjustNotNullInheritance(Oid relid, AttrNumber attnum,\n\t\tForm_pg_constraint conform;\n\t\t\tereport(ERROR,", "partial_line": "errhint(\"You will need to use ALTER TABLE ... VALID", "completion": "errhint(\"You will need to use ALTER TABLE ... VALIDATE CONSTRAINT to validate it.\")); <|endoftext|>"}
{"context": "\t}\n\tif (ndecoded_out)\nginPostingListDecodeAllSegmentsToTbm(GinPostingList *ptr, int len,\n\tint\t\t\tndecoded;\n\t}", "partial_line": "*dptr", "completion": "*dptr++ = *bptr++; <|endoftext|>"}
{"context": "\tparam->MyPMChildSlot = child_slot;\n\tparam->first_syslogger_file_time = first_syslogger_file_time;\n\tmemcpy(&param->syslogPipe, &syslogPipe, sizeof(syslogPipe));\n\t\t\t\t\t\t &hChild,\n\t\t\t\t(errmsg_internal(\"could not duplicate handle to be written to backend parameter file: error code %lu\",", "partial_line": "st", "completion": "static bool <|endoftext|>"}
{"context": "static const symbol s_1_20[4] = { 's', 'e', 'l', 'o' };\nstatic const symbol s_1_36[2] = { 'u', 's' };\n{ 3, s_1_7, -1, 1, 0},\n{ 3, s_1_11, 10, 1, 0},\n{ 3, s_1_18, 17, 1, 0},", "partial_line": "{ 4, s_1_20", "completion": "{ 4, s_1_20, 19, 1, 0}, <|endoftext|>"}
{"context": "\tEnterParallelMode();\n\tentrypt(seg, toc);\nLookupParallelWorkerFunction(const char *libraryname, const char *funcname)\n\t\t}\n\treturn (parallel_worker_main_type)", "partial_line": "load_external_function(librar", "completion": "load_external_function(libraryname, funcname, true, NULL); <|endoftext|>"}
{"context": "\tLWLockRelease(TwoPhaseStateLock);\nMarkAsPreparingGuts(GlobalTransaction gxact, TransactionId xid, const char *gid,\n\t\t\t\t\tTimestampTz prepared_at, Oid owner, Oid databaseid)\n\tint\t\t\ti;\n\tAssert(gxact != NULL);", "partial_line": "proc = GetPGProcByNumber(gxac", "completion": "proc = GetPGProcByNumber(gxact->pgprocno); <|endoftext|>"}
{"context": "\t\terrno = EINVAL;\n#endif\n\t\t\tsize_t\t\tthis_iov_size;\n\t\t\treturn written;\n\t\toffset += written;", "partial_line": "total_writ", "completion": "total_written += written; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t \"message type 0x%02x arrived from server while idle\",\n\t\t\t\t\t\tif (!conn->result)\n\t\t\t\t\t\t\tpqSaveErrorResult(conn);\n\t\t\t\tcase PqMsg_ErrorResponse:\n\t\t\t\t\tif (pqGetErrorNotice3(conn, true))", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tfunc_signature_string(funcname, nargs,\n\treturn InvalidOid;\t\t\t\nLookupFuncWithArgs(ObjectType objtype, ObjectWithArgs *func, bool missing_ok)\n{\n\t\t\tereport(ERROR,", "partial_line": "\"procedures cannot have", "completion": "\"procedures cannot have more than %d arguments\", <|endoftext|>"}
{"context": "\t\tREQUIRE_AUTH_OPTION(uaLDAP, \"ldapsearchattribute\", \"ldap\");\n\t\thbaline->ldapsearchattribute = pstrdup(val);\n\t}\n\t}\n\t\tREQUIRE_AUTH_OPTION(uaLDAP, \"ldapprefix\", \"ldap\");", "partial_line": "else if (strc", "completion": "else if (strcmp(name, \"include_realm\") == 0) <|endoftext|>"}
{"context": "\tdsa_pointer chunk_shared;\n\t\t*shared = chunk_shared + HASH_CHUNK_HEADER_SIZE + chunk->used;\n\tLWLockAcquire(&pstate->lock, LW_EXCLUSIVE);\n\t\tParallelHashGrowth growth = pstate->growth;\n\tif (pstate->growth != PHJ_GROWTH_DISABLED)", "partial_line": "hashtable->batches", "completion": "hashtable->batches[0].shared->size + <|endoftext|>"}
{"context": "#include \"replication/snapbuild.h\"\n#include \"replication/walsender.h\"\n#include \"storage/reinit.h\"\n#include \"utils/relmapper.h\"\nint\t\t\tXLOGbuffers = -1;", "partial_line": "bool\t\tlog_chec", "completion": "bool\t\tlog_checkpoints = true; <|endoftext|>"}
{"context": "\t\tappendPQExpBufferStr(sql, \"VACUUM\");\n\t\tif (serverVersion >= 90000)\n\t\t\t\tAssert(!vacopts->force_index_cleanup);\n\t\t\t\tAssert(!vacopts->no_index_cleanup);\n\t\t\tif (!vacopts->do_truncate)", "partial_line": "Assert(serverVer", "completion": "Assert(serverVersion >= 160000); <|endoftext|>"}
{"context": "    return eq_s(z, SIZE(p), p);\nextern int eq_v_b(struct SN_env * z, const symbol * p) {\n        int diff = 0;\n                if (c + common == l) { diff = -1; break; }\n                common++;", "partial_line": "if", "completion": "if (j - i <= 1) { <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED),\n\t\t\tbreak;\nstatic const RI_ConstraintInfo *\nri_FetchConstraintInfo(Trigger *trigger, Relation trig_rel, bool rel_is_pk)\n\tif (rel_is_pk)", "partial_line": "elog(ERROR, \"wrong pg_", "completion": "elog(ERROR, \"wrong pg_constraint entry for trigger \\\"%s\\\" on table \\\"%s\\\"\", <|endoftext|>"}
{"context": "\telse if (Matches(\"ALTER\", \"SUBSCRIPTION\", MatchAny, MatchAnyN,\n\t\tCOMPLETE_WITH(\"RESET\", \"SET\", \"OWNER TO\", \"REFRESH COLLATION VERSION\", \"RENAME TO\",\n\t\tCOMPLETE_WITH_QUERY(Query_for_list_of_tablespaces);\n\t\t\t\t\t  \"FUNCTION\", \"MATERIALIZED VIEW\", \"OPERATOR\",\n\t\t\t\t\t  \"SEQUENCE\", \"SERVER\", \"TABLE\", \"TEXT SEARCH\",", "partial_line": "COMPLETE_WITH(\"CONFIGURATI", "completion": "COMPLETE_WITH(\"CONFIGURATION\", \"DICTIONARY\", \"PARSER\", \"TEMPLATE\"); <|endoftext|>"}
{"context": "\tif (edata->datatype_name)\n\t\t\t\t\t\t\t\t Tcl_NewStringObj(UTF_E2U(edata->datatype_name), -1));\n\t\t\t\t\t\t\t\t Tcl_NewStringObj(\"constraint\", -1));\n\t\tTcl_ListObjAppendElement(interp, obj,\n\t\t\t\t\t\t\t\t Tcl_NewStringObj(UTF_E2U(edata->internalquery), -1));", "partial_line": "U", "completion": "UTF_END; <|endoftext|>"}
{"context": "Datum\ndfloor(PG_FUNCTION_ARGS)\n\tfloat8\t\targ1 = PG_GETARG_FLOAT8(0);\nDatum\n\tif (unlikely(isinf(result)) && !isinf(arg1))", "partial_line": "PG_RETURN_FL", "completion": "PG_RETURN_FLOAT8(result); <|endoftext|>"}
{"context": "\treturn len;\n\tuint32\t\tvalue2;\n\t{\n\t{\n\t}", "partial_line": "const uint32 c = value2 -", "completion": "const uint32 c = value2 - 10000 * (value2 / 10000); <|endoftext|>"}
{"context": "\t\t\t\tobjecttag = \"Function Name\";\n\t\t\t\t{\n\t\t\t\t}\n\t\t\tobjectname = rte->ctename;\n\t}", "partial_line": "ExplainPrope", "completion": "ExplainPropertyText(\"Alias\", refname, es); <|endoftext|>"}
{"context": "\t\tPG_RETURN_NULL();\n\tfloat8\t\tnewvalY = PG_GETARG_FLOAT8(1);\n\t\tSxx += tmpX * tmpX * scale;\n\t\t\t\t !isinf(transvalues[3]) && !isinf(newvalY)) ||\n\t\t\t\tfloat_overflow_error();", "partial_line": "transvalues[", "completion": "transvalues[3] = Sy; <|endoftext|>"}
{"context": "}\n\t\treturn true;\n}\n{\n\ttm->tm_hour = time / USECS_PER_HOUR;", "partial_line": "tm->tm_min = time / US", "completion": "tm->tm_min = time / USECS_PER_MINUTE; <|endoftext|>"}
{"context": "\t\t}\n\t\tif (j->jointype == JOIN_FULL)\n\t\t}\n\telse\n\t\tif (root->qual_security_level > 0)", "partial_line": "v", "completion": "varno, <|endoftext|>"}
{"context": "\t\t\telse\n\t}\n\t\telog(ERROR, \"inconsistent counts of deletable tuples\");\n\tSTART_CRIT_SECTION();\n\t{", "partial_line": "ItemId", "completion": "ItemIdData\ttmp; <|endoftext|>"}
{"context": "\t\t}\n\t{\n\t\tconst uint32 q = log10Pow5(-e2);\n\t\tconst int32 i = -e2 - q;\n\t\t\tlastRemovedDigit = (uint8) (mulPow5divPow2(mv, i + 1, j) % 10);", "partial_line": "if (", "completion": "if (q <= 1) <|endoftext|>"}
{"context": "static void\n{\n\t\tamprocid = GetSysCacheOid4(AMPROCNUM, Anum_pg_amproc_oid,\n\t\t\t\t\t\t\t\t   ObjectIdGetDatum(op->lefttype),\n\t\t\t\t\t\t\t\t   Int16GetDatum(op->number));", "partial_line": "errmsg(\"function %d(", "completion": "errmsg(\"function %d(%s,%s) does not exist in operator family \\\"%s\\\"\", <|endoftext|>"}
{"context": "\tint\t\t\tidx = MyProcNumber;\n\tctl.entrysize = sizeof(MemoryStatsContextId);\n\t\t\t\t\t\t\t\t\t&ctl,\n\t\t\t\t\t\t\t\t   summary);\n\t\tMemoryStatsDsaArea = dsa_create(memCxtArea->lw_lock.tranche);", "partial_line": "memCxtState[idx].proc_id", "completion": "memCxtState[idx].proc_id = MyProcPid; <|endoftext|>"}
{"context": "\t\tiacls.roleid = GetUserId();\n\t\t\t\tereport(ERROR,\n\t}\n\tbool\t\tisNew;\n\tswitch (iacls->objtype)", "partial_line": "if (iacls->all_pr", "completion": "if (iacls->all_privs && this_privileges == ACL_NO_RIGHTS) <|endoftext|>"}
{"context": "\tif (PG_NARGS() != 4 || dstate == NULL)\n\t\t\t\t\t\t\t\t\t\t\t\t\t PointerGetDatum(d->subdict->dictData),\n\t\t\t\t\t\t\t\t\t\t\t\t\t PG_GETARG_DATUM(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t PG_GETARG_DATUM(2),\n\t\t\twhile (ptr->lexeme && nv == ptr->nvariant)", "partial_line": "if (i", "completion": "if (i < nlex) <|endoftext|>"}
{"context": "\tif (!IsA(opexpr, OpExpr))\n\t\tTargetEntry *tle = list_nth(subquery->targetList, var2->varattno - 1);\n\t\t\treturn keep_original;\n\tQuery\t   *subquery = rte->subquery;\n\tRelids\t\trequired_outer;", "partial_line": "pushdo", "completion": "pushdown_safety_info safetyInfo; <|endoftext|>"}
{"context": "\tres = PQexec(conn, \"SET lc_messages TO \\\"C\\\"\");\n\telse if (strcmp(testname, \"multi_pipelines\") == 0)\n\t\ttest_multi_pipelines(conn);\n\telse if (strcmp(testname, \"pipeline_abort\") == 0)\n\t\ttest_pipeline_idle(conn);", "partial_line": "test_pipelined", "completion": "test_pipelined_insert(conn, numrows); <|endoftext|>"}
{"context": "\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t(errcode(ERRCODE_DATA_CORRUPTED),\n\tfile_crc = *((pg_crc32c *) (buf + crc_offset));\n\tchar\t   *errormsg;\n\t\t\t\t errdetail(\"Failed while allocating a WAL reading processor.\")));", "partial_line": "if", "completion": "if (record == NULL) <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\ttbm->schunks[nchunks++] = page;\n{\n\tPTIterationArray *ptpages = NULL;\n\tPTIterationArray *ptchunks = NULL;", "partial_line": "dp = dsa_allocate0", "completion": "dp = dsa_allocate0(tbm->dsa, sizeof(TBMSharedIteratorState)); <|endoftext|>"}
{"context": "\t\tif (estate->retistuple && !estate->retisnull &&\n\t\t\t\t\t errmsg(\"cannot return non-composite value from function returning composite type\")));\n\t\treturn PLPGSQL_RC_RETURN;\n\t\testate->retval = (Datum) 0;\n\t\testate->rettype = VOIDOID;", "partial_line": "errmsg(\"cannot use RETURN NEXT in a", "completion": "errmsg(\"cannot use RETURN NEXT in a non-SETOF function\"))); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\testimated_count);\n\tpfree(vacrel->indname);\n\tvacrel->indname = NULL;\n}\n\tivinfo.num_heap_tuples = reltuples;", "partial_line": "InvalidBlockNumb", "completion": "InvalidBlockNumber, InvalidOffsetNumber); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tcontinue;\n\t\t{\n\t\t\tMemoryContextSwitchTo(PortalContext);\n\t\t\t\t\t\t   tab->at_datname, tab->at_nspname, tab->at_relname);", "partial_line": "StartTr", "completion": "StartTransactionCommand(); <|endoftext|>"}
{"context": "\t\t\t\tsimple_string_list_append(&db_exclude_patterns, optarg);\n\tif (optind < argc)\n\t\tinputFileSpec = argv[optind++];\n\t\tinputFileSpec = NULL;\n\t\tpg_fatal(\"one of -d/--dbname and -f/--file must be specified\");", "partial_line": "pg_log_error_hint(\"Try \\\"%s --help\\\" for m", "completion": "pg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname); <|endoftext|>"}
{"context": "\t\t\tprintTableAddCell(&cont, host, false, false);\n\tprintTableAddCell(&cont, _(\"Backend PID\"), false, false);\n\tif (ssl_in_use)\n\t\t\t\t   *protocol,\n\t\t\t\t   *key_bits,", "partial_line": "*ciph", "completion": "*cipher, <|endoftext|>"}
{"context": "\t\t\t\t\t   get_namespace_name(RelationGetNamespace(rel)));\n\terr_generic_string(PG_DIAG_COLUMN_NAME, colname);\n\tFILE\t   *fp;\n\t\tsnprintf(initfilename, sizeof(initfilename), \"%s/%s\",\n\t\tgoto read_failed;", "partial_line": "if (nr", "completion": "if (nread == 0) <|endoftext|>"}
{"context": "\t\t\tarray_bitmap_copy(newnullbitmap, 0,\n\t\t\t\t\t\t\t  offset);\n\t\t\tif (addedafter == 0)\n\t\t}\n\t\t\t\toffset;", "partial_line": "if (n", "completion": "if (ndim == 0) <|endoftext|>"}
{"context": "static const symbol s_0_84[3] = { 'k', 'i', 'n' };\nstatic const symbol s_0_86[4] = { 'e', 'z', 'i', 'n' };\nstatic const symbol s_0_87[5] = { 't', 'e', 'z', 'i', 'n' };\nstatic const symbol s_0_89[5] = { 'k', 'i', 'z', 'u', 'n' };\nstatic const symbol s_0_92[3] = { 't', 'i', 'o' };", "partial_line": "static const symbol s_0_94[", "completion": "static const symbol s_0_94[2] = { 'o', 'r' }; <|endoftext|>"}
{"context": "\t\t\treturn NULL;\n\t\telse\n\t\t\t   (seek_offset >= 0) ? SEEK_SET : SEEK_END) != 0)\n\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),", "partial_line": "buf = (", "completion": "buf = (bytea *) sbuf.data; <|endoftext|>"}
{"context": "\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\t\t*r |= *ps >> (BITS_PER_BYTE - ishift);\n}\n\tif (sp <= 0)\n\tresult = bit_catenate(s1, t2);", "partial_line": "re", "completion": "return result; <|endoftext|>"}
{"context": "static void\n\tprintf(_(\"  -F, --fork=FORK        only show records that modify blocks in fork FORK;\\n\"\n\t\t\t \"                         (default: 1 or the value used in STARTSEG)\\n\"));\n\tprintf(_(\"  -V, --version          output version information, then exit\\n\"));\n\t\t\t \"                         (optionally, show per-record statistics)\\n\"));", "partial_line": "XLogStats\ts", "completion": "XLogStats\tstats; <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\t\telse\n\t\t\t\t\tstrcpy(s, days_short[tm->tm_wday]);\n\t\t\tcase DCH_dy:\n\t\t\t\t}", "partial_line": "str_num", "completion": "str_numth(s, s, S_TH_TYPE(n->suffix)); <|endoftext|>"}
{"context": "\t\t\t\t\tgvar->varlevelsup == 0)\n\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  context->groupClauseCommonVars,\n\t\t\t\t\t\t\t\t\t\t  &context->qry->constraintDeps))\n\t\t\t\t\t\t\trte->eref->aliasname, attname),", "partial_line": "bool have_", "completion": "bool have_non_var_grouping) <|endoftext|>"}
{"context": "\t\tIndexTuple\titup;\n\t\t\t\t\t\t\t\t\t  btree->entryAttnum,\n\t\t\t\t\t\t\t\t\t  btree->entryKey,\n\t\t\t\t\t\t\t\t\t  btree->entryCategory,\n}", "partial_line": "entryFindChildPtr(GinBtree btree, Page page, BlockNumber blk", "completion": "entryFindChildPtr(GinBtree btree, Page page, BlockNumber blkno, OffsetNumber storedOff) <|endoftext|>"}
{"context": "\tCheckDataVersion();\n\t\tpg_log_error_hint(\"Is a server running?  If not, delete the lock file and try again.\");\n\tif (!read_controlfile())\n\t\tGuessControlValues();\n\t\tWalSegSz = ControlFile.xlog_seg_size;", "partial_line": "if ((gu", "completion": "if ((guessed && !force) || noupdate) <|endoftext|>"}
{"context": "\t\t\t\t\t\tgive_proto_hint = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t give_proto_hint ?\n\t\t\t\t\t\t\t\t ssl_protocol_version_to_string(ssl_min_protocol_version) :\n\t\t\t\t\t\t\t\t MIN_OPENSSL_TLS_VERSION,", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t(errcode(ERRCODE_DATETIME_VALUE_OUT_OF_RANGE),\n\t\t\tcase TIMESTAMPOID:\n\t\t\t\t\tif (TIMESTAMP_NOT_FINITE(timestamp))\n\t\t\t\t\t\t\t\t errdetail(\"XML does not support infinite timestamp values.\")));", "partial_line": "EncodeDateTime(&tm, fsec, false, 0, NULL, U", "completion": "EncodeDateTime(&tm, fsec, false, 0, NULL, USE_XSD_DATES, buf); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  datum2, isnull2,\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\tstup->datum1 = heap_getattr(&htup,\n\t\t\t\t\t\t\t\t&stup->isnull1);\n\tTuplesortClusterArg *arg = (TuplesortClusterArg *) base->arg;", "partial_line": "tup = (HeapTu", "completion": "tup = (HeapTuple) stups[i].tuple; <|endoftext|>"}
{"context": "\tif (result != SHM_MQ_SUCCESS)\n{\n\t\t\tcase PG_DIAG_SEVERITY_NONLOCALIZED:\n\t\t\t\telse if (strcmp(value, \"LOG\") == 0)\n\t\t\tcase PG_DIAG_MESSAGE_DETAIL:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase RTBelowStrategyNumber:\n\t\t\tfinfo = inclusion_get_strategy_procinfo(bdesc, attno, subtype,\n\t\tcase RTContainsStrategyNumber:\n\t\t\tfinfo = inclusion_get_strategy_procinfo(bdesc, attno, subtype,\n\t\t\tPG_RETURN_DATUM(result);", "partial_line": "PG_RETURN_BOOL", "completion": "PG_RETURN_BOOL(true); <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"utils/jsonb.h\"\n} JsonbInState;\n\tJsonbInState *res;\n\tOid\t\t\tkey_output_func;", "partial_line": "static void jsonb_put_escaped_value(StringInfo out,", "completion": "static void jsonb_put_escaped_value(StringInfo out, JsonbValue *scalarVal); <|endoftext|>"}
{"context": "    switch (among_var) {\n            }\n            }\n            {   int ret = r_R2(z);\n        case 3:", "partial_line": "c", "completion": "case 4: <|endoftext|>"}
{"context": "\t\tif (psql_history)\n#ifdef USE_READLINE\nsaveHistory(char *fname, int max_lines)\n{\n\t{", "partial_line": "encod", "completion": "encode_history(); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tattnum, format_type_be(slot_tupdesc->tdtypeid)),\n\tif (!op->d.fetch.fixed)\n\tAssert(op->d.fetch.kind == slot->tts_ops);\nget_cached_rowtype(Oid type_id, int32 typmod,\n\tif (type_id != RECORDOID)", "partial_line": "retur", "completion": "return typentry->tupDesc; <|endoftext|>"}
{"context": "\t\t{\n\t\tWriteRqst.Flush = insertpos;\n\tEND_CRIT_SECTION();\n\tif (LogwrtResult.Flush < record)\nbool", "partial_line": "if (WriteRqs", "completion": "if (WriteRqst.Write <= LogwrtResult.Flush) <|endoftext|>"}
{"context": "\t\t\t\tNode\t   *save_case_val;\n\t\t\t\tsave_case_val = context->case_val;\n\t\t\t\tconst_true_cond = false;\n\t\t\t\t\t\tConst\t   *const_input = (Const *) casecond;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontext);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\t\t\t   &nextidx,\n\t\t\tPGSemaphoreLock(proc->sem);\n\t\t\tif (!proc->procArrayGroupMember)\n\t}", "partial_line": "wakeidx = pg_atomi", "completion": "wakeidx = pg_atomic_read_u32(&nextproc->procArrayGroupNext); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tbreak;\n\t\t\tAlterSchemaOwner_oid(sdepForm->objid, newrole);\n\t\t\tbreak;\n\t\tcase UserMappingRelationId:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tassert(a != NULL && a->outchain == NULL);\n\t\tif (a->type != EMPTY)\n\t}\n\t\tNERR(REG_ESPACE);\n\t}", "partial_line": "for (s2 = emptyreachable(nfa, s, s, inarcsorig);", "completion": "for (s2 = emptyreachable(nfa, s, s, inarcsorig); s2 != s; s2 = nexts) <|endoftext|>"}
{"context": "{\nstatic int32 NextRecordTypmod = 0;\t\nstatic bool record_fields_have_equality(TypeCacheEntry *typentry);\nstatic bool record_fields_have_compare(TypeCacheEntry *typentry);\nstatic bool multirange_element_has_hashing(TypeCacheEntry *typentry);", "partial_line": "static void TypeCacheTypCallback(Datum arg, i", "completion": "static void TypeCacheTypCallback(Datum arg, int cacheid, uint32 hashvalue); <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n\tsigset_t\tsigset;\npq_reset_sigpipe(sigset_t *osigset, bool sigpipe_pending, bool got_epipe)\n\t}\n\tpthread_sigmask(SIG_SETMASK, osigset, NULL);", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\treturn \"ALTER COLUMN ... RESET\";\n\t\t\treturn \"DROP COLUMN\";\n\t\tcase AT_AddConstraint:\n\t\tcase AT_AlterConstraint:\n\t\t\treturn NULL;\t\t", "partial_line": "return \"ALTER COLUMN ... SET", "completion": "return \"ALTER COLUMN ... SET DATA TYPE\"; <|endoftext|>"}
{"context": "\t{\n\tPQclear(res);\n\t{\n\t\tchar\t   *spcname = PQgetvalue(res, i, 1);\n\t\tappendPQExpBufferStr(buf, \" LOCATION \");", "partial_line": "if (is", "completion": "if (is_absolute_path(spclocation)) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t\tbreak;\t\t\n\t\t\t\tinsertstate->stricthigh <= PageGetMaxOffsetNumber(page))\n\t\tinsertstate->postingoff = 0;\n\t\tAssert(insertstate->postingoff == 0);", "partial_line": "page = Buff", "completion": "page = BufferGetPage(insertstate->buf); <|endoftext|>"}
{"context": "static void\n{\n\tif (PQresultStatus(res) != PGRES_TUPLES_OK)\n\t\t\t\t\t\t\"the primary server: %s\",\n\t\t\t\t\t\tpchomp(PQerrorMessage(conn->streamConn)))));", "partial_line": "*len = PQgetlength", "completion": "*len = PQgetlength(res, 0, 1); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t List **parts1, List **parts2);\n\tListCell   *r;\n\troot->join_cur_level = level;\n\t\t\tmake_rels_by_clause_joins(root, old_rel, joinrels[1], first_rel);\n\t\t{", "partial_line": "int\t\t\tother_lev", "completion": "int\t\t\tother_level = level - k; <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(val1 > val2);\n\tint16\t\tval1 = PG_GETARG_INT16(0);\n\tPG_RETURN_BOOL(val1 == val2);\nDatum\n\tif (sub)", "partial_line": "PG_RETUR", "completion": "PG_RETURN_BOOL(val <= sum); <|endoftext|>"}
{"context": "\t\treturn true;\n\tpg_usleep(standbyWait_us);\n\tlong\t\tsecs;\n\t\t\t\t}\n\t\t\t\tnprocs > 0 ? errdetail_log_plural(\"Conflicting process: %s.\",", "partial_line": "nprocs, buf", "completion": "nprocs, buf.data) : 0); <|endoftext|>"}
{"context": "\t\tmwriter = NULL;\n\t\t\tsnprintf(linkpath, MAXPGPATH, \"%s/%s/%u\", opt.output, PG_TBLSPC_DIR,\n\t\t\t\t\t\t\t linkpath, ts->new_dir);\n\t\t\t\t\t\t\t linkpath, ts->new_dir);\n\t\t\t\tif (symlink(ts->new_dir, linkpath) != 0)", "partial_line": "linkpath, ts-", "completion": "linkpath, ts->new_dir); <|endoftext|>"}
{"context": "accum_sum_add(NumericSumAccum *accum, const NumericVar *val)\n{\n\tint32\t   *accum_digits;\n\taccum_sum_rescale(accum, val);\n\ti = accum->weight - val->weight;", "partial_line": "int3", "completion": "int32\t   *dig; <|endoftext|>"}
{"context": "\tif (XLogReadBufferForRedo(record, 0, &buf) != BLK_RESTORED)\n\t\tHashPageOpaque oldopaque;\n\t\tHashPageOpaque nopaque;\n\t\tnopaque->hasho_flag = xlrec->new_bucket_flag;\n\t\tPageSetLSN(newpage, lsn);", "partial_line": "Buffer\t\twritebuf =", "completion": "Buffer\t\twritebuf = InvalidBuffer; <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\t\ttable_close(catalog, AccessShareLock);\n\t\t\t\tif (attnum != InvalidAttrNumber)\n\t\t\t\t\t\tobj->objname = pstrdup(NameStr(*DatumGetName(datum)));", "partial_line": "ReturnSetInfo *rsinfo = (ReturnSetInfo *)", "completion": "ReturnSetInfo *rsinfo = (ReturnSetInfo *) fcinfo->resultinfo; <|endoftext|>"}
{"context": "\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"truncate test\", ECPGt_EOIT, ECPGt_EORT);\n\t{ ECPGprepare(__LINE__, NULL, 0, \"include_ _name\", v_query);\n#line 98 \"prepareas.pgc\"\n\t{ ECPGprepare(__LINE__, NULL, 0, \"normal_name\", v_query);\n#line 103 \"prepareas.pgc\"", "partial_line": "check_result", "completion": "check_result_of_insert(); <|endoftext|>"}
{"context": "\t\t\tmin_year = ZIC_MIN;\n\t\tusestart = i > 0 && (zp - 1)->z_untiltime > min_time;\n\t\t*startbuf = '\\0';\n\t\t\t\tusestart = false;\n\t\t\t\t\t\tyear <= rp->r_hiyear;", "partial_line": "if (", "completion": "if (rp->r_todo) <|endoftext|>"}
{"context": "\tPG_RETURN_MULTIRANGE_P(make_multirange(mltrngtypid, rangetyp, 1, &range));\nmultirange_constructor0(PG_FUNCTION_ARGS)\n\ttypcache = multirange_get_typcache(fcinfo, MultirangeTypeGetOid(mr1));\n\ttypcache = multirange_get_typcache(fcinfo, mltrngtypoid);\n\t\t\t\t\t\t  int32 range_count1, RangeType **ranges1,", "partial_line": "Ran", "completion": "RangeType  *r2; <|endoftext|>"}
{"context": "\t\tForm_pg_sequence_data seq;\n\t\tvalues[1] = BoolGetDatum(seq->is_called);\n\t\tis_called = seq->is_called;\nvoid\n\tXLogRecPtr\tlsn = record->EndRecPtr;", "partial_line": "if (info != XLO", "completion": "if (info != XLOG_SEQ_LOG) <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) sqlprint();}\n    { ECPGdo(__LINE__, 0, 1, \"con1\", 0, ECPGst_normal, \"insert into source values ( 2 , 20 , 'db on con1' )\", ECPGt_EOIT, ECPGt_EORT);\n#line 36 \"declare.pgc\"\n#line 38 \"declare.pgc\"\n#line 46 \"declare.pgc\"", "partial_line": "if (sqlca.sqlcode < 0", "completion": "if (sqlca.sqlcode < 0) sqlprint();} <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  .namespace = tbinfo->dobj.namespace->dobj.name,\n\tif (OidIsValid(tbinfo->owning_tab) && !tbinfo->is_identity_sequence)\n\t\tif (owning_tab == NULL)\n\t\t\tresetPQExpBuffer(query);\n\t\t\tappendPQExpBuffer(query, \"ALTER SEQUENCE %s\",", "partial_line": ".namespace = tbinf", "completion": ".namespace = tbinfo->dobj.namespace->dobj.name, <|endoftext|>"}
{"context": "static const symbol s_11[] = { 'e' };\n        if (in_grouping(z, g_v, 97, 252, 0)) goto lab1;\n            if (z->c >= z->l) goto lab1;\n        z->I[0] = z->c;\n        }", "partial_line": "z->", "completion": "z->I[0] = z->c; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  (Node *) fexpr,\n\t\tpstate = make_parsestate(NULL);\n\t\tquerytree->hasTargetSRFs ||\n\t\tquerytree->rtable ||\n\t\tquerytree->havingQual ||", "partial_line": "querytr", "completion": "querytree->sortClause || <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  &numWorkers))\n\t\t\t\tbreak;\n\t\t\t\tdopt.include_everything = false;\n\t\t\tcase 'S':\t\t\t\n\t\t\tcase 'v':\t\t\t", "partial_line": "case", "completion": "case 0: <|endoftext|>"}
{"context": "#define TM_SUFFIX_LEN\t2\n\t{\"tm\", 2, DCH_S_TM, SUFFTYPE_PREFIX},\n\t{\"th\", 2, DCH_S_th, SUFFTYPE_POSTFIX},\n\tDCH_AM,\n\tDCH_BC,", "partial_line": "DC", "completion": "DCH_US, <|endoftext|>"}
{"context": "\t\t\t\t*op->resnull = false;\n\t\t\t\t*op->resvalue = BoolGetDatum(!DatumGetBool(*op->resvalue));\n\t\t\t}\n\t\t\tEEO_NEXT();\n\t\tEEO_CASE(EEOP_PARAM_SET)", "partial_line": "EEO_CASE(E", "completion": "EEO_CASE(EEOP_CASE_TESTVAL) <|endoftext|>"}
{"context": "hashcostestimate(PlannerInfo *root, IndexPath *path, double loop_count,\n\t*indexSelectivity = costs.indexSelectivity;\n\t\t\t\t Cost *indexStartupCost, Cost *indexTotalCost,\n\tif (index->tree_height < 0) \n\t}", "partial_line": "*index", "completion": "*indexPages = costs.numIndexPages; <|endoftext|>"}
{"context": "\tPGresult   *res = NULL;\n\tchar\t   *view_def = NULL;\n\tint\t\t\tattname_col = -1,\t\n\t\t\t\tattstorage_col = -1,\n\t\tbool\t\thasoids;", "partial_line": "char", "completion": "char\t   *reloptions; <|endoftext|>"}
{"context": "\t}\nvoid\n\t\tAssert(tabstat->trans == trans);\n\t\t\t\t\tsave_truncdrop_counters(trans->upper, false);\n\t\t\t\t\ttrans->upper->tuples_inserted = trans->tuples_inserted;", "partial_line": "trans->upper->tuples_update", "completion": "trans->upper->tuples_updated += trans->tuples_updated; <|endoftext|>"}
{"context": "\t\tPG_RETURN_NULL();\n\t\tcase AF_INET6:\n\tret = pg_getnameinfo_all(&beentry->st_clientaddr.addr,\n\t\t\tresult++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "partial_line": "PG_STAT_GET_DBENT", "completion": "PG_STAT_GET_DBENTRY_INT64(conflict_snapshot) <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tNode\t   *lefthand;\n\t\tforeach(l, qtree->targetList)\n\t\t\t\tcontinue;\n\t\t\tparam->paramcollid = exprCollation((Node *) tent->expr);", "partial_line": "errmsg(\"sub", "completion": "errmsg(\"subquery has too few columns\"), <|endoftext|>"}
{"context": "\telog(DEBUG_elog_output, \"\\n\\t\\tUsed positions: %d,\\n\\t\\tFree positions: %d\",\n\t\t count, free_i);\n{\n\treturn true;\t\t\t\t\nstatic int", "partial_line": "if (year", "completion": "if (year < 70) <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t parser_errposition(pstate,\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t parser_errposition(pstate,\n\t\t\t\tereport(ERROR,", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tSpinLockRelease(&XLogCtl->info_lck);\n\txldir = AllocateDir(XLOGDIR);\n\t{\nstatic void\n{", "partial_line": "un", "completion": "unlink(path); <|endoftext|>"}
{"context": "\t\tslot->tts_isnull[i] = PG_ARGISNULL(i + 1);\n\t\tslot->tts_values[i] = Int32GetDatum(0);\n\t\ti++;\n\t\t\t\t\t\tpercentile)));\n\tif (PG_ARGISNULL(0))", "partial_line": "PG_RET", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "        case 4:\n            z->c--;\n                    if (z->c <= z->lb) { z->c = z->l - m2; goto lab0; }\n    }\n        if (z->c < z->I[0]) return 0;", "partial_line": "mlimit1 =", "completion": "mlimit1 = z->lb; z->lb = z->I[0]; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\t   REGBUF_FORCE_IMAGE | REGBUF_STANDARD);\n\t\t\t\tXLogRegisterBufData(i, pageData->delta, pageData->deltaLen);\n\t\t{\n\t\t\tif (BufferIsInvalid(pageData->buffer))", "partial_line": "return", "completion": "return lsn; <|endoftext|>"}
{"context": "\t\t\tdlist_delete(&predlock->targetLink);\n}\n\t\t\t\t   / (-max_predicate_locks_per_relation)) - 1\n\t\t\treturn 0;\n\treturn 0;", "partial_line": "CheckAndPromotePredicateLockRequest(const P", "completion": "CheckAndPromotePredicateLockRequest(const PREDICATELOCKTARGETTAG *reqtag) <|endoftext|>"}
{"context": "\t\t\tcase 5:\n\t\t\tcase 6:\n\t\tif (count == 6 || count == 8)\n\tresult = (macaddr8 *) palloc0(sizeof(macaddr8));\n\tresult->a = a;", "partial_line": "addr-", "completion": "addr->b = pq_getmsgbyte(buf); <|endoftext|>"}
{"context": "\tList\t   *indexoidlist;\n\tIndexInfo **indexInfoArray;\n\tAssert(resultRelInfo->ri_IndexRelationDescs == NULL);\n\t\tif (speculative && ii->ii_Unique && !indexDesc->rd_index->indisexclusion)\n\tRelationPtr indexDescs;", "partial_line": "List *arbiterI", "completion": "List *arbiterIndexes, <|endoftext|>"}
{"context": "\tif (stmt->argquery != NULL)\n\t{\n\t\tdump_ind();\n\t\tdump_expr(stmt->argquery);\n\t{", "partial_line": "if (stm", "completion": "if (stmt->params != NIL) <|endoftext|>"}
{"context": "\t\tint\t\t\ti;\n\t\tForm_pg_statistic_ext staForm;\n\t\tentry->statOid = staForm->oid;\n\t\tentry->schema = get_namespace_name(staForm->stxnamespace);\n\t\t{", "partial_line": "datum = S", "completion": "datum = SysCacheGetAttrNotNull(STATEXTOID, htup, <|endoftext|>"}
{"context": "\tint32\t\tcompare;\n\treturn comparetup_index_btree_tiebreak(a, b, state);\n\tSortSupport sortKey = base->sortKeys;\n\tIndexTuple\ttuple1;\n\tbool\t\tisnull1,", "partial_line": "tupDes = RelationGetDescr(arg->i", "completion": "tupDes = RelationGetDescr(arg->index.indexRel); <|endoftext|>"}
{"context": "\tcurrBucket->hashvalue = newhashvalue;\n\t\t\tSpinLockAcquire(&hctl->freeList[freelist_idx].mutex);\n\t\tif (IS_PARTITIONED(hctl))\n\t\t\t\treturn NULL;\t\n\t\t\t\t\thctl->freeList[borrow_from_idx].freeList = newElement->link;", "partial_line": "hctl->freeLi", "completion": "hctl->freeList[freelist_idx].nentries++; <|endoftext|>"}
{"context": "\t\t\t\t\tInvalidTransactionId);\n\tif (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))\nstatic bool\n\t\t\t\t{\n\t\t\t\t}", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "#include \"access/xlogrecovery.h\"\n#include \"catalog/pg_authid.h\"\n#include \"replication/slot.h\"\n#include \"replication/syncrep.h\"\n#include \"utils/timeout.h\"", "partial_line": "int\t\t\twal_sender_t", "completion": "int\t\t\twal_sender_timeout = 60 * 1000; <|endoftext|>"}
{"context": "{ 3, s_0_122, 121, -1, 0},\n{ 6, s_0_126, 123, -1, 0},\n{ 4, s_0_129, 123, -1, 0},\n{ 4, s_0_134, 123, -1, 0},\n{ 4, s_0_135, 123, -1, 0},", "partial_line": "{ 4, s_0_145, 1", "completion": "{ 4, s_0_145, 118, -1, 0}, <|endoftext|>"}
{"context": "\t\tXLogRegisterData(&xlrec, SizeOfHeapLock);\n\tif (have_tuple_lock)\n\t\treturn true;\n\t\t\t\t\t\t(errcode(ERRCODE_LOCK_NOT_AVAILABLE),\n\t\t\tnew_xmax = add_to_xmax;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t}", "partial_line": "if (g", "completion": "if (geteuid() == 0) <|endoftext|>"}
{"context": "\t}\n\t\tfprintf(stderr, \"starting vacuum...\");\n\t\ttryExecuteStatement(con, \"truncate pgbench_history\");\n\t\t{\n\tnclients_dealt = 0;", "partial_line": "thr", "completion": "thread->tid = i; <|endoftext|>"}
{"context": "\t\t\t\t\texpression_tree_mutator((Node *) args,\n\t\t\t\t\t\t\t\t\t\t\tcontext);\n\t\t\t\tnewexpr->inputcollid = expr->inputcollid;\n\t\t\t\treturn (Node *) newexpr;\n\t\t\t\tFuncExpr   *expr = (FuncExpr *) node;", "partial_line": "List\t   *args", "completion": "List\t   *args = expr->args; <|endoftext|>"}
{"context": "\tSetHintBits(tuple, buffer, HEAP_XMAX_COMMITTED,\n\t\treturn TM_Deleted;\t\t\n\t\t{\n\t\t\t\t{\n\t\t\t\t\t\t\tInvalidTransactionId);", "partial_line": "if (TransactionIdDi", "completion": "if (TransactionIdDidCommit(xvac)) <|endoftext|>"}
{"context": "\t\t\tbc <<= 3;\n\t\t\t*rp++ = bc + VAL(tp[3]);\n\t\t{\n\t\t\tereturn(escontext, (Datum) 0,\n\t\t}", "partial_line": "bytea\t   *vlena = PG_GETARG_", "completion": "bytea\t   *vlena = PG_GETARG_BYTEA_PP(0); <|endoftext|>"}
{"context": "\tpg_log_info(\"reading publication membership of tables\");\n\tpg_log_info(\"reading publication membership of schemas\");\n{\n\t\t\tchild = findTableByOid(inhinfo[i].inhrelid);\n\t\t\t\t\t\t child->dobj.catId.oid);", "partial_line": "child->parents = pg_realloc_array(", "completion": "child->parents = pg_realloc_array(child->parents, <|endoftext|>"}
{"context": "\t\t\t\t compression_algorithm_str);\n\terror_detail = supports_compression(compression_spec);\n\t\tpg_fatal(\"%s\", error_detail);\n\tif (fout->isStandby)\n\tif (schema_include_patterns.head != NULL)", "partial_line": "fa", "completion": "false); <|endoftext|>"}
{"context": "\t\t\t   GinStatsData *buildStats)\n#endif\n\t\t\tif (GinPageIsIncompleteSplit(BufferGetPage(parent->buffer)))\n\t\tupdateblkno = GinPageGetOpaque(BufferGetPage(stack->buffer))->rightlink;\n\t\tif (freestack)", "partial_line": "pf", "completion": "pfree(stack); <|endoftext|>"}
{"context": "\tRemoveGXact(gxact);\nstatic void\n}\n\tFIN_CRC32C(statefile_crc);\n\t\tereport(ERROR,", "partial_line": "(errcode_for_", "completion": "(errcode_for_file_access(), <|endoftext|>"}
{"context": "\t\t\t\t(maxv < 0 && next + incby > maxv))\n\t\t\t\t\tereport(ERROR,\n\t\t\t\tif (rescnt > 0)\n\t\t\t\tif (!cycle)\n\t\t\t\t\t\t\t(errcode(ERRCODE_SEQUENCE_GENERATOR_LIMIT_EXCEEDED),", "partial_line": "next", "completion": "next = maxv; <|endoftext|>"}
{"context": "\t\t\t\tjb = &jbv;\n\t\t\t{\n\t\t\t\t\tnumstr = pnstrdup(jb->val.string.val, jb->val.string.len);\n\t\t\t\t\tif (numeric_is_nan(num) || numeric_is_inf(num))\n\t\t\t\t\t\t\t\t\t\t\t (errcode(ERRCODE_NON_NUMERIC_SQL_JSON_ITEM),", "partial_line": "Arra", "completion": "ArrayType  *arrtypmod; <|endoftext|>"}
{"context": "            case 3:\n    }\n    return 1;\n        z->c = z->l - m_test1;\n    {   int ret = slice_del(z);", "partial_line": "while(", "completion": "while(1) { <|endoftext|>"}
{"context": "textregexreplace_extended(PG_FUNCTION_ARGS)\n\ttext\t   *p = PG_GETARG_TEXT_PP(1);\n\ttext\t   *r = PG_GETARG_TEXT_PP(2);\n\t\tstart = PG_GETARG_INT32(3);\n\t\t\tereport(ERROR,", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tTSQuery\t\ta = PG_GETARG_TSQUERY_COPY(0);\n\tTSQuery\t\tb = PG_GETARG_TSQUERY_COPY(1);\n\t{\n\telse if (b->size == 0)\n\tint32\t\tdistance = PG_GETARG_INT32(2);", "partial_line": "(errcode(ERRCODE_INVALID_", "completion": "(errcode(ERRCODE_INVALID_PARAMETER_VALUE), <|endoftext|>"}
{"context": "static const symbol s_2_621[5] = { 'i', 'v', 'a', 's', 'e' };\nstatic const symbol s_2_624[3] = { 'e', 's', 'e' };\nstatic const symbol s_2_629[6] = { 'j', 'e', 't', 'i', 's', 'e' };\nstatic const symbol s_2_630[3] = { 'o', 's', 'e' };\nstatic const symbol s_2_632[8] = { 'i', 's', 't', 'a', 'd', 'o', 's', 'e' };", "partial_line": "static const symbo", "completion": "static const symbol s_2_644[5] = { 'u', 'v', 'a', 't', 'e' }; <|endoftext|>"}
{"context": "#include <string.h>\n  { ECPGconnect(__LINE__, 0, \"ecpg1_regression\" , NULL, NULL , NULL, 0); }\n#line 23 \"fetch.pgc\"\n\tECPGt_char,(str),(long)25,(long)1,(25)*sizeof(char), ", "partial_line": "#line 32 \"fetc", "completion": "#line 32 \"fetch.pgc\" <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#include <netinet/tcp.h>\n#include <arpa/inet.h>\n#include <sys/stat.h>", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\tdictinfo[i].dobj.objType = DO_TSDICT;\n{\n\tint\t\t\ti_tableoid;\n\tint\t\t\ti_tmpllexize;\n\t\t\t\t\t\t \"tmplnamespace, tmplinit::oid, tmpllexize::oid \"", "partial_line": "ntups", "completion": "ntups = PQntuples(res); <|endoftext|>"}
{"context": "\t\t\t}\n\t{\n\t\twhile (vp / 10 > vm / 10)\n\tint32\t\tnexp = exp + olength;\n\t}", "partial_line": "while (ou", "completion": "while (output >= 10000) <|endoftext|>"}
{"context": "\t\t\t \"      --lc-monetary=, --lc-numeric=, --lc-time=LOCALE\\n\"\n\tprintf(_(\"      --no-locale           equivalent to --locale=C\\n\"));\n\tprintf(_(\"      --no-data-checksums   do not use data page checksums\\n\"));\n\tprintf(_(\"  -X, --waldir=WALDIR       location for the write-ahead log directory\\n\"));\n\tprintf(_(\"  -d, --debug               generate lots of debugging output\\n\"));", "partial_line": "printf(_(\"", "completion": "printf(_(\"      --no-instructions     do not print instructions for next steps\\n\")); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\tinfo->amsearcharray = false;\n\t\t\t\tinfo->amhasgetbitmap = false;\n\t\t\tinfo->indpred = RelationGetIndexPredicate(indexRelation);\n\t\t\tif (info->indexprs && varno != 1)", "partial_line": "ChangeVarNodes((Node *) info->indpre", "completion": "ChangeVarNodes((Node *) info->indpred, 1, varno, 0); <|endoftext|>"}
{"context": "\t\tif (funcInfo == NULL)\n\t\t\tappendPQExpBufferStr(defqry, \"WITHOUT FUNCTION\");\n\t\tcase COERCION_METHOD_INOUT:\n\t\t\tbreak;\n\t\t\t{", "partial_line": "if (cast", "completion": "if (cast->castcontext == 'a') <|endoftext|>"}
{"context": "\tHeapTuple\ttp;\n}\n{\n\tHeapTuple\ttp;\n\tif (!HeapTupleIsValid(tp))", "partial_line": "retur", "completion": "return result; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\tMIN_OPENSSL_TLS_VERSION,\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tpgtls_close(conn);\n\t{", "partial_line": "pgtls_close(", "completion": "pgtls_close(conn); <|endoftext|>"}
{"context": "#include \"access/stratnum.h\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tEquivalenceClass *ec);\nstatic Oid\tselect_equality_operator(EquivalenceClass *ec,\n\t\t\t\t\t\t\t\t\t\tEquivalenceMember *rightem,\n\t\t\t\t\t\t\t\t\t\t\t\tRelids relids);", "partial_line": "ECDerivesKe", "completion": "ECDerivesKey key; <|endoftext|>"}
{"context": "\t\t\t\tOffsetNumber firstrightoff,\n\t\t\t\t\t\t   !newitemonleft);\n\tif (state->is_leaf)\n\t\tleftfree -= (int16) (firstrightsz +\n\tif (newitemonleft)", "partial_line": "(int16) (MAXALIGN(sizeof(", "completion": "(int16) (MAXALIGN(sizeof(IndexTupleData)) + sizeof(ItemIdData)); <|endoftext|>"}
{"context": "\t\tDO(tzh_timecnt);\n\t\tDO(tzh_typecnt);\n\t\t{\n\t\t\t\t\tunsigned char tm = types[i];\n\t\t}", "partial_line": "if (!o", "completion": "if (!omittype[h]) <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\t\t\n\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(namespaceId)))\nDeconstructQualifiedName(const List *names,\n\tchar\t   *catalogname;\n\t\t\tschemaname = strVal(linitial(names));", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t{\n\tpageopaque->hasho_nextblkno = BufferGetBlockNumber(ovflbuf);\n\t\tPageSetLSN(BufferGetPage(ovflbuf), recptr);\n\tEND_CRIT_SECTION();\n_hash_firstfreebit(uint32 map)", "partial_line": "for (i = 0", "completion": "for (i = 0; i < BITS_PER_MAP; i++) <|endoftext|>"}
{"context": "static const symbol s_8[] = { 'a', 'n', 'c', 'e' };\nstatic const symbol s_16[] = { 'o', 'u', 's' };\nstatic const symbol s_19[] = { 'a', 'l' };\nstatic int r_shortv(struct SN_env * z) {\n    if (in_grouping_b(z, g_v, 97, 121, 0)) return 0;", "partial_line": "int", "completion": "int among_var; <|endoftext|>"}
{"context": "\t}\n\tif (target->savepointLevel != s->savepointLevel)\n\t\tcase TBLOCK_STARTED:\n\t\tcase TBLOCK_ABORT_END:\n\t\tcase TBLOCK_ABORT_PENDING:", "partial_line": "ExitOnAnyError = save_", "completion": "ExitOnAnyError = save_ExitOnAnyError; <|endoftext|>"}
{"context": "\ttbm->status = TBM_EMPTY;\n\ttbm->ptpages = InvalidDsaPointer;\n\t\t\t\t\t\t\t\ttbm->entry1.blockno,\n\t\t\t\t\t\t\t\t&found);\n\t\tpage->status = oldstatus;", "partial_line": "pagetable_des", "completion": "pagetable_destroy(tbm->pagetable); <|endoftext|>"}
{"context": "}\nvoid\nFILE *\n{\n#ifdef TIOCGWINSZ", "partial_line": "pagerprog = getenv(", "completion": "pagerprog = getenv(\"PSQL_PAGER\"); <|endoftext|>"}
{"context": "\tif (PQtransactionStatus(stmt->connection->connection) == PQTRANS_IDLE && !stmt->connection->autocommit)\n\t{\nbool\n{\n\tecpg_log(\"ecpg_execute on line %d: query: %s; with %d parameter(s) on connection %s\\n\", stmt->lineno, stmt->command, stmt->nparams, stmt->connection->name);", "partial_line": "(const", "completion": "(const int *) stmt->paramformats, <|endoftext|>"}
{"context": "\t\tchar\t   *collversionstr;\n\t\t\tdatum = SysCacheGetAttrNotNull(COLLOID, tp, Anum_pg_collation_colllocale);\n\t\t\t\t\t\t\t \"ALTER COLLATION %s REFRESH VERSION, \"\n{\n\tdbform = (Form_pg_database) GETSTRUCT(tup);", "partial_line": "Rele", "completion": "ReleaseSysCache(tup); <|endoftext|>"}
{"context": "\tXLogRecPtr\tresult;\n\t\t\t\t(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),\n{\n\tXLogRecPtr\tlsn1 = PG_GETARG_LSN(0);\npg_lsn_le(PG_FUNCTION_ARGS)", "partial_line": "pg_lsn_la", "completion": "pg_lsn_larger(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tlower->lower = true;\nRangeType *\n\t\t\t\t\t\t   const MultirangeType *mr)\n\t\t\t(*ranges)[i] = multirange_get_range(rangetyp, multirange, i);\n\telse", "partial_line": "*ranges =", "completion": "*ranges = NULL; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t*target = *(const long long int *) var;\n\t\tcase ECPGt_double:\n}\n\t\t\tbreak;", "partial_line": "va_en", "completion": "va_end(args); <|endoftext|>"}
{"context": "\t\tif (argpos > 0)\n\t\t\ttypid = get_fn_expr_argtype(fcinfo->flinfo, arg);\n\t\t\tvalue = elements[arg - 1];\n\t\tswitch (*cp)\n\t\t\t\t\t\t errmsg(\"unrecognized format() type specifier \\\"%.*s\\\"\",", "partial_line": "if (nul", "completion": "if (nulls != NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t\tFILE\t   *fd;\n\t\t\t\t\t\tfree(file);\n\t\t\t\t\t\tint\t\t\tnameend = strcspn(p + 1, \":\");\n\t\t\t\t\t\tchar\t   *name = pnstrdup(p + 1, nameend);\n\t\t\t\t\t\tfree(name);", "partial_line": "esc", "completion": "esc = false; <|endoftext|>"}
{"context": "}\n}\n\tBuildConflictIndexInfo(resultRelInfo, conflictindex);\n\tif (ExecCheckIndexConstraints(resultRelInfo, slot, estate,\n\t*conflictslot = table_slot_create(rel, NULL);", "partial_line": "res = table_tuple_lock(rel, &conflict", "completion": "res = table_tuple_lock(rel, &conflictTid, GetActiveSnapshot(), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t location);\n\t\tresult = coldef->collOid;\n\t\t\t\t\t\tformat_type_be(typeOid)),\n}\n\treturn (Type) tup;", "partial_line": "return ((Form_pg_", "completion": "return ((Form_pg_type) GETSTRUCT(tp))->oid; <|endoftext|>"}
{"context": "\t{\n\tupperrel->consider_startup = (root->tuple_fraction > 0);\n\tupperrel->cheapest_unique_path = NULL;\n\t\t\t\t\t\t  Relids required_outer)\n\tRelids\t\tjoinrelids;", "partial_line": "return", "completion": "return ppi; <|endoftext|>"}
{"context": "void\n\t*oldestMulti = MultiXactState->oldestMultiXactId;\n{\n{\n\tMultiXactId multiWarnLimit;", "partial_line": "multiStopLimit = multiWra", "completion": "multiStopLimit = multiWrapLimit - 3000000; <|endoftext|>"}
{"context": "        z->ket = z->c;\n        z->bra = z->c;\n        {   int m13 = z->l - z->c; (void)m13;\n                    }\n                z->c = z->l - m14;", "partial_line": "z->c", "completion": "z->c = z->l - m14; <|endoftext|>"}
{"context": "\t\t}\n\t\tconvert(locut + thistimecnt + hicut, tzh.tzh_timecnt);\n\t\tconvert(thischarcnt, tzh.tzh_charcnt);\n\t\tDO(tzh_ttisstdcnt);\n\t\tDO(tzh_timecnt);", "partial_line": "DO(t", "completion": "DO(tzh_typecnt); <|endoftext|>"}
{"context": "\t\t\t\t\t\t bool initial_prune,\n\t\t\t\t\t\t\t\t\t   &result, validsubplan_rtis);\n\t\t\t\t\t\t\t   Bitmapset **validsubplans,\n\tint\t\t\ti;\n\tcheck_stack_depth();", "partial_line": "pprune->initial_pruni", "completion": "pprune->initial_pruning_steps); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\telse if (*ptr == '\"')\n\t\t{\n\t\t\t\t\t\t  fcinfo->flinfo->fn_mcxt);\n\t\tgoto fail;", "partial_line": "pfree(buf", "completion": "pfree(buf.data); <|endoftext|>"}
{"context": "#include \"common/int.h\"\n#include \"utils/datum.h\"\n\tcfg->canReturnData = true;\n}", "partial_line": "int\t\t\ti", "completion": "int\t\t\ti = 0; <|endoftext|>"}
{"context": "\t\t\trc = read(fd, buffer, bytes_to_read);\ncombinebackup_version_cb(JsonManifestParseContext *context,\n\t\t\t\t\t\t  pg_checksum_type checksum_type,\n\tbool\t\tfound;\n\tm->size = size;", "partial_line": "range->star", "completion": "range->start_lsn = start_lsn; <|endoftext|>"}
{"context": "\tstruct stat stat_buf;\n\t\treturn;\n\telse if (ret == 0)\n\tsprintf(tmppath, \"%s/%X-%X.snap.%d.tmp\",\n\t\t\t\t errmsg(\"could not remove file \\\"%s\\\": %m\", tmppath)));", "partial_line": "sizeof(Transa", "completion": "sizeof(TransactionId) * (builder->committed.xcnt + catchange_xcnt); <|endoftext|>"}
{"context": "    {   int ret = slice_from_s(z, 1, s_5);\n    if (z->c - 2 <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((815616 >> (z->p[z->c - 1] & 0x1f)) & 1)) return 0;\n    z->bra = z->c;\n                if (ret < 0) return ret;\n            break;", "partial_line": "if (ret < 0) r", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\telog(FATAL, \"signalfd() failed\");\n\tReserveExternalFD();\n\tsz += MAXALIGN(sizeof(WaitEvent) * nevents);\n#elif defined(WAIT_USE_KQUEUE)\n\tif (resowner != NULL)", "partial_line": "set->epoll", "completion": "set->epoll_ret_events = (struct epoll_event *) data; <|endoftext|>"}
{"context": "\tchar\t   *bufptr;\n\t\t\tbufptr++;\n\t\tnfields = sscanf(fline, \"%u\\t%X/%X\", &tli, &switchpoint_hi, &switchpoint_lo);\n\t\t{", "partial_line": "lasttli =", "completion": "lasttli = tli; <|endoftext|>"}
{"context": "{ 6, s_2_1381, 1341, 93, 0},\n{ 5, s_2_1382, 1341, 94, 0},\n{ 5, s_2_1398, 1397, 19, 0},\n{ 5, s_2_1403, -1, 40, 0},\n{ 7, s_2_1409, 1407, 6, 0},", "partial_line": "{ 7, s_2_1", "completion": "{ 7, s_2_1411, 1407, 8, 0}, <|endoftext|>"}
{"context": "\t\tmerged_bounds->kind = NULL;\n\tpos = 0;\n\t\t\t\t\tPartitionRangeBound *ub)\n\tint\t\t\tpart_index;\n\tif (*lb_pos >= bi->ndatums)", "partial_line": "*ub_", "completion": "*ub_cmpval = -1; <|endoftext|>"}
{"context": "\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);}\n#line 105 \"describe.pgc\"\n#line 109 \"describe.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n\t\t{ ECPGget_desc(__LINE__, \"desc3\", i,ECPGd_name,", "partial_line": "#line 120", "completion": "#line 120 \"describe.pgc\" <|endoftext|>"}
{"context": "\t\t\t\t\t  typeIds, collationIds, opclassIds, opclassOptions,\n\t\t\t\t\t  stmt->excludeOpNames, tableId,\n\t\telse if (stmt->excludeOpNames)\n\t\t\telog(ERROR, \"unknown constraint type\");\n\t\t\t\t\t\t\t\t\t\t\t eq_strategy);", "partial_line": "if (!OidIsValid(", "completion": "if (!OidIsValid(ptkey_eqop)) <|endoftext|>"}
{"context": "\t{\n\t\t\telog(DEBUG2,\n\t\tavdb = (avw_dbase *) palloc(sizeof(avw_dbase));\n\t\tavdb->adw_datid = pgdatabase->oid;\n\t\tavdb->adw_minmulti = pgdatabase->datminmxid;", "partial_line": "List", "completion": "List\t   *table_oids = NIL; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t}\n\t\telse\n\tif (n == 0)\n\t\tpalloc(sizeof(BlockNumber) * n * (MAX_FORKNUM + 1));", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tARR_HASNULL(a) ||\n\t{\n\t\tdeconstruct_array_builtin(a, TEXTOID, &dvalues, NULL, &nelems);\n\t\t\tdvalues[i] = dvalues[i + 1];\n\t\ta = construct_array_builtin(dvalues, arrayLength - 1, TEXTOID);", "partial_line": "repl_repl[Anum_pg_extensio", "completion": "repl_repl[Anum_pg_extension_extcondition - 1] = true; <|endoftext|>"}
{"context": "static const symbol s_55_1[6] = { 0xCE, 0xB1, 0xCF, 0x83, 0xCF, 0x80 };\nstatic const symbol s_55_2[8] = { 0xCE, 0xB1, 0xCE, 0xBD, 0xCF, 0x85, 0xCF, 0x80 };\nstatic const symbol s_55_8[12] = { 0xCE, 0xB4, 0xCF, 0x81, 0xCE, 0xBF, 0xCF, 0x83, 0xCE, 0xBF, 0xCF, 0x80 };\nstatic const symbol s_55_14[6] = { 0xCE, 0xBF, 0xCF, 0x85, 0xCF, 0x81 };\nstatic const symbol s_55_19[2] = { 0xCF, 0x84 };", "partial_line": "static const symbol s_55_29[8] = { 0xCE, 0", "completion": "static const symbol s_55_29[8] = { 0xCE, 0xBF, 0xCE, 0xBC, 0xCE, 0xBF, 0xCF, 0x84 }; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tRETV(LACON, LATYPE_BEHIND_POS);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tassert(NOTREACHED);\n\t\t\tif (HAVE(6) && *(v->now + 0) == CHR('[') &&", "partial_line": "*(v->now +", "completion": "*(v->now + 3) == CHR(':') && <|endoftext|>"}
{"context": "{\n\tfloat8\t   *transvalues;\n\ttransvalues = check_float8_array(transarray, \"float8_regr_avgy\", 6);\n\tfloat8\t   *transvalues;\n{", "partial_line": "if (Sxx", "completion": "if (Sxx == 0 || Syy == 0) <|endoftext|>"}
{"context": "\t\t\t(cte->cterefcount <= 1 ||\n\t\tsubroot = subquery_planner(root->glob, subquery, root,\n\t\tsplan = makeNode(SubPlan);\n\t\tsplan->setParam = NIL;\n\t\tsplan->parParam = NIL;", "partial_line": "spl", "completion": "splan->args = NIL; <|endoftext|>"}
{"context": "\t\t? datumCopy(out->reconstructedValues[i],\n\t\t\t\t\tso->state.attLeafType.attbyval,\n\treturn item;\n\t\t\t SpGistInnerTuple innerTuple, bool isnull)\n{", "partial_line": "spgInnerC", "completion": "spgInnerConsistentIn in; <|endoftext|>"}
{"context": "        case 5:\n            {   int ret = r_R1(z);\n            {   int ret = slice_from_s(z, 1, s_8);\n            break;\n            }", "partial_line": "if (!among_var) r", "completion": "if (!among_var) return 0; <|endoftext|>"}
{"context": "\t\t\ttmp = \"enable_bitmapscan\";\n\t\tcase 't':\t\t\t\t\n\t\t\ttmp = \"enable_tidscan\";\n\t\t\tbreak;\n\t\t\ttmp = \"enable_hashjoin\";", "partial_line": "if (", "completion": "if (tmp) <|endoftext|>"}
{"context": "\t\t\telse if (*StopMiddle < c)\n\t\t}\n\t{p_isEOF, 0, A_NEXT, TPS_Null, 0, NULL},\n\t{p_iseqC, '.', A_PUSH, TPS_InPathFirstFirst, 0, NULL},\n};", "partial_line": "{p_isEOF, 0, A_BIN", "completion": "{p_isEOF, 0, A_BINGO, TPS_Base, NUMWORD, NULL}, <|endoftext|>"}
{"context": "{\n\t{\n\t\t.name = \"PQescapeLiteral\",\n\t\t.name = \"PQescapeIdentifier\",\n\t{", "partial_line": ".supports_in", "completion": ".supports_input_length = true, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tSimpleStringList db_exclude_patterns);\n\tRestoreOptions *opts;\n\tbool\t\tglobals_only = false;\n\tstatic int\tuse_setsessauth = 0;\n\tstatic int\tstatistics_only = 0;", "partial_line": "{\"create\", 0", "completion": "{\"create\", 0, NULL, 'C'}, <|endoftext|>"}
{"context": "{\n{\n\t\t\t\t\t\t ObjectIdGetDatum(opno),\n\tif (!HeapTupleIsValid(tp))\n\tresult = amop_tup->amopstrategy;", "partial_line": "Form_pg_amo", "completion": "Form_pg_amop amop_tup; <|endoftext|>"}
{"context": "DecodeTimezone(char *str, int *tzp)\n\telse if (*cp == '\\0' && (len = strlen(str)) > 3)\n\t\t*(str + len - 2) = '\\0';\n\ttz = (hr * MINS_PER_HOUR + min) * SECS_PER_MINUTE;\nDecodePosixTimezone(char *str, int *tzp)", "partial_line": "switc", "completion": "switch (type) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t info->clauses,\n\t\t\t\t\t\t\t\t\t\t\t\t\t NIL,\n\t}\n\t\t\t\t\t\t\t\t partially_grouped_rel,\n\t\t\t\t\t\t\t\t NIL,", "partial_line": "cheapest", "completion": "cheapest_partial_path, <|endoftext|>"}
{"context": "\tPG_RETURN_INT16(result);\n\tNumeric\t\tres;\n\tNumericVar\tresult;\n\t\telse\n\t(void) set_var_from_str(buf, buf, &result, &endptr, NULL);", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\t\t\t\tstr++;\n\t\t\t\t\t\tstr++;\n\t\t\t\t\tn->key = NULL;\n\t\t\t\t\tstr += chlen;\n\t\t\t\t}", "partial_line": "n->type", "completion": "n->type = NODE_TYPE_CHAR; <|endoftext|>"}
{"context": "\t\t\t\t\t\terrdetail(\"MERGE is not supported for views with INSTEAD OF triggers for some actions but not all.\"),\n\t}\n\t}\n\tnew_rt_index = list_length(parsetree->rtable);\n\t\tnew_rte->inh = false;", "partial_line": "view_targetlist", "completion": "view_targetlist = viewquery->targetList; <|endoftext|>"}
{"context": "\titup->t_tid = *ht_ctid;\n\t\t}\n\t}\n}\nhashgetbitmap(IndexScanDesc scan, TIDBitmap *tbm)", "partial_line": "int", "completion": "int64\t\tntids = 0; <|endoftext|>"}
{"context": "{\nDatum\n{\n\tPG_RETURN_BOOL(ItemPointerCompare(arg1, arg2) <= 0);\n\tItemPointer arg1 = PG_GETARG_ITEMPOINTER(0);", "partial_line": "ItemPointer arg1 = PG_GETARG_I", "completion": "ItemPointer arg1 = PG_GETARG_ITEMPOINTER(0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\"SO_KEEPALIVE\",\n#endif\t\t\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\telse\n\t\t\t{", "partial_line": "SOCK_STRE", "completion": "SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf))); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tTypeNameToString(typeName),\n\t\t}\n\telse\n\t\tchar\t   *schemaname;\n\t\t\tnamespaceId = LookupExplicitNamespace(schemaname, missing_ok);", "partial_line": "typoid = Inv", "completion": "typoid = InvalidOid; <|endoftext|>"}
{"context": "}\n{\npq_getmsgint64(StringInfo msg)\n{\n{", "partial_line": "uni", "completion": "union <|endoftext|>"}
{"context": "\t\telse\n\t}\n\t{\n\t\t\tdoing_extended_query_message = false;\n\t\t\tmaxmsglen = PQ_SMALL_MESSAGE_LIMIT;", "partial_line": "cas", "completion": "case PqMsg_Execute: <|endoftext|>"}
{"context": "{ 8, s_3_25, -1, 17, 0}\nstatic const symbol s_4_12[8] = { 0xD7, 0xA2, 0xD7, 0x9C, 0xD7, 0xA2, 0xD7, 0x9B };\nstatic const symbol s_4_17[10] = { 0xD7, 0x98, 0xD7, 0xA2, 0xD7, 0xA0, 0xD7, 0xA2, 0xD7, 0x9E };\nstatic const symbol s_4_25[10] = { 0xD7, 0x96, 0xD7, 0x95, 0xD7, 0xA0, 0xD7, 0x92, 0xD7, 0xA0 };\nstatic const symbol s_4_26[12] = { 0xD7, 0xA9, 0xD7, 0x9C, 0xD7, 0x95, 0xD7, 0xA0, 0xD7, 0x92, 0xD7, 0xA0 };", "partial_line": "static const symbol s_4_28[8] = { 0xD7, 0x91, 0xD7, 0xB1,", "completion": "static const symbol s_4_28[8] = { 0xD7, 0x91, 0xD7, 0xB1, 0xD7, 0x92, 0xD7, 0xA0 }; <|endoftext|>"}
{"context": "}\n\tRelation\tpg_policy_rel;\n\tRelation\ttarget_table;\n\t\t\t\tObjectIdGetDatum(table_id));\n\tif (HeapTupleIsValid(systable_getnext(sscan)))", "partial_line": "sscan = systable_beg", "completion": "sscan = systable_beginscan(pg_policy_rel, <|endoftext|>"}
{"context": "\t\t\tif (!att_tup->attisdropped)\n\t\t\t\t\tnew_expr = eval_const_expressions(root, new_expr);\n\t\t\t\t\t\t\t\t\t\t\t  -1,\n\t\t\t}\n\t\t\t\t\t\t\t\t\t  pstrdup(NameStr(att_tup->attname)),", "partial_line": "elog(ERROR, \"targetlist is not", "completion": "elog(ERROR, \"targetlist is not sorted correctly\"); <|endoftext|>"}
{"context": "PG_STAT_GET_RELENTRY_TIMESTAMPTZ(last_autovacuum_time)\nPG_STAT_GET_RELENTRY_TIMESTAMPTZ(lastscan)\n{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\tdouble\t\tresult;\t\t\t\t\t\t\t\t\t\t\t\t\\\n\tresult = ((double) funcentry->stat) / 1000.0;\t\t\t\t\t\\", "partial_line": "PG_RETU", "completion": "PG_RETURN_FLOAT8(result);\t\t\t\t\t\t\t\t\t\t\\ <|endoftext|>"}
{"context": "\t\t\t\tDatum\t   *values;\n\t\t\t\tint\t\t\tncolumns;\n\t\t\t\tncolumns = tupDesc->natts;\n\t\t\t\tnulls = (bool *) palloc(sizeof(bool) * ncolumns);\n\t\t\t\tscratch.opcode = EEOP_FIELDSTORE_DEFORM;", "partial_line": "scratch.d.f", "completion": "scratch.d.fieldstore.fstore = fstore; <|endoftext|>"}
{"context": "\tbrinshared->nparticipantsdone = 0;\n\t\t\t\t\t\t\t\tmul_size(sizeof(WalUsage), pcxt->nworkers));\n\tbuildstate->bs_leader = brinleader;\n}\n}", "partial_line": "_brin_parallel_merge(Brin", "completion": "_brin_parallel_merge(BrinBuildState *state) <|endoftext|>"}
{"context": "#include \"access/xlogarchive.h\"\n#include \"postmaster/walsummarizer.h\"\n#include \"replication/snapbuild.h\"\n#include \"replication/walsender.h\"\n#include \"storage/reinit.h\"", "partial_line": "#include", "completion": "#include \"utils/relmapper.h\" <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tif (!equal(lfirst(item_a), lfirst(item_b)))\n\t\t\t{\n\t\t\t\t (int) a->type);\n\tAssert(item_b == NULL);", "partial_line": "equal(const void *a,", "completion": "equal(const void *a, const void *b) <|endoftext|>"}
{"context": "\t\t\treturn ancestor;\n\t\t wtscan->wtParam);\n{\n\t\t\t\t   deparse_namespace *save_dpns)\n\tbool\t\tis_instead;", "partial_line": "cha", "completion": "char\t   *ev_action; <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t\tTCFLAGS_HAVE_FIELD_COMPARE);\n\t\tTupleDesc\ttupdesc;\n\t\t\tif (!OidIsValid(fieldentry->hash_proc))\n\t\ttypentry->flags |= newflags;", "partial_line": "TYPECACHE_HASH_EXT", "completion": "TYPECACHE_HASH_EXTENDED_PROC); <|endoftext|>"}
{"context": "                    if (ret <= 0) return ret;\n        lab0:\n    return 1;\n        z->lb = mlimit1;\n            break;", "partial_line": "if (ret", "completion": "if (ret == 0) goto lab0; <|endoftext|>"}
{"context": "\t\t}\n\t\tmemcpy(entry->private_data, private_data, private_data_size);\n\tfor (idx = max_inuse - 1; idx >= 0; --idx)\n\t\tInjectionPointEntry *entry = &ActiveInjectionPoints->entries[idx];\n\t\tgeneration = pg_atomic_read_u64(&entry->generation);", "partial_line": "Assert(", "completion": "Assert(!found); <|endoftext|>"}
{"context": "\tstruct dirent ret;\t\t\t\n};", "partial_line": "if (!d->dir", "completion": "if (!d->dirname) <|endoftext|>"}
{"context": "{\n\t\t{\n\t\t\t\tdotdots = 0,\n\tif (dotdotetcsize <= linksize)\n\t\tif (!result)", "partial_line": "progname,", "completion": "progname, directory, target, strerror(EPERM)); <|endoftext|>"}
{"context": "#include \"postgres.h\"\n{", "partial_line": "pgstat_drop_fun", "completion": "pgstat_drop_function(Oid proid) <|endoftext|>"}
{"context": "\t\t\tchar **ubound_str, Node *escontext)\n\tbool\t\tinfinite;\n\t{\n\t\tptr += strlen(RANGE_EMPTY_LITERAL);\n\t\t\tereturn(escontext, false,", "partial_line": "strin", "completion": "string), <|endoftext|>"}
{"context": "\t\t\t\tappendStringInfo(&err_hint, _(\"You might need to increase \\\"%s\\\".\"),\n\t\t\t\tbreak;\n\tereport(LOG,\n\t\t\t\t\t\t\t   XLogRecPtr oldestLSN, Oid dboid,\n\t\t\t\t\t\t\t   TransactionId initial_catalog_effective_xmin,", "partial_line": "Assert(possi", "completion": "Assert(possible_causes != RS_INVAL_NONE); <|endoftext|>"}
{"context": "\t\tPG_RETURN_BOOL(val <= sum);\n\tresult = -arg;\n\tint64\t\tresult;\n{\n\tif (unlikely(pg_sub_s64_overflow(arg1, arg2, &result)))", "partial_line": "errmsg", "completion": "errmsg(\"bigint out of range\"))); <|endoftext|>"}
{"context": "Datum\n\tint32\t   *nkeys = (int32 *) PG_GETARG_POINTER(1);\n\tint\t\t\tnelems;\n\t*nullFlags = nulls;\n\t{", "partial_line": "*search", "completion": "*searchMode = GIN_SEARCH_MODE_DEFAULT; <|endoftext|>"}
{"context": "\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t errmsg(\"operator %s is not commutative\",\n\t\t\t\t\t\t errdetail(\"The exclusion operator must be related to the index operator class for the constraint.\")));\n\t\t\tindexInfo->ii_ExclusionProcs[attn] = get_opcode(opid);\n\t\tcolOptions[attn] = 0;", "partial_line": "if (attribu", "completion": "if (attribute->ordering == SORTBY_DESC) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tPLpgSQL_stmt_foreach_a *stmt);\n\t\t\t\t\t\t\tPLpgSQL_stmt_raise *stmt);\nstatic int\texec_stmt_execsql(PLpgSQL_execstate *estate,\nstatic int\texec_stmt_commit(PLpgSQL_execstate *estate,\n\t\t\t\t\t\t\t   PLpgSQL_stmt_rollback *stmt);", "partial_line": "ResourceOw", "completion": "ResourceOwner simple_eval_resowner); <|endoftext|>"}
{"context": "\tint\t\t\tl;\n\tconst unsigned char *start = s;\n{\n\t\tcase SS2:\t\t\t\t\n\t\t\t\treturn -1;", "partial_line": "c", "completion": "case SS3: <|endoftext|>"}
{"context": "\telse if (TailMatches(\"LIMIT\", \"TO\", \"(*)\") ||\n\telse if (TailMatches(\"FROM\", \"SERVER\", MatchAny))\n\telse if (TailMatches(\"OVERRIDING\"))\n\t\tCOMPLETE_WITH(\"ACCESS SHARE MODE\",\n\t\t\t\t\t  \"SHARE ROW EXCLUSIVE MODE\",", "partial_line": "else if (", "completion": "else if (TailMatches(\"MERGE\", \"INTO\", MatchAny)) <|endoftext|>"}
{"context": "\t\t\tio_worker_control->workers[i].in_use = true;\n\t\t}\n\t}\n\ton_shmem_exit(pgaio_worker_die, 0);\npgaio_worker_error_callback(void *arg)", "partial_line": "Assert(MyBackendType == B", "completion": "Assert(MyBackendType == B_IO_WORKER); <|endoftext|>"}
{"context": "\tAssert(innerPlan(node) == NULL);\n\tgatherstate->ps.ExecProcNode = ExecGather;\nstatic TupleTableSlot *\n\tTupleTableSlot *slot;\n\t{", "partial_line": "gather->ini", "completion": "gather->initParam); <|endoftext|>"}
{"context": "\t{\"cache\", PGSTAT_FETCH_CONSISTENCY_CACHE, false},\n\t\t\t\t \"array length mismatch\");\n\t{\"document\", XMLOPTION_DOCUMENT, false},\n};\n\t{\"true\", COMPUTE_QUERY_ID_ON, true},", "partial_line": "{\"on\", CONS", "completion": "{\"on\", CONSTRAINT_EXCLUSION_ON, false}, <|endoftext|>"}
{"context": "\taddress.objectSubId = objsubid;\n\t\t\t}\n\t\t\t\t\tif (isnull)\n\t\t\t\t\t\t\t address.classId, address.objectId, address.objectSubId);\n\tif (objidentity)", "partial_line": "nulls[3] =", "completion": "nulls[3] = false; <|endoftext|>"}
{"context": "\tStatusFilePath(archiveDone, xlog, \".done\");\n\t\treturn;\n\t\t\t\t(errcode_for_file_access(),\n\t\tereport(LOG,\n\tif (!XLogArchivingActive())", "partial_line": "XLogArchiveIsBusy(const", "completion": "XLogArchiveIsBusy(const char *xlog) <|endoftext|>"}
{"context": "\t\ts++;\n\t\tif (!line_decode(s + 1, str, line, escontext))\n\t\t\tPG_RETURN_NULL();\n\t\t\t\t\t\t escontext))\n\tchar\t   *astr = float8out_internal(line->A);", "partial_line": "DELI", "completion": "DELIM, cstr, RDELIM_L)); <|endoftext|>"}
{"context": "\t\tif (tupleDesc &&\n\t\t\tTupleDescCompactAttr(tupleDesc, attnum - 1)->atthasmissing)\n\t\tcase SelfItemPointerAttributeNumber:\n\t\tcase MaxCommandIdAttributeNumber:\n\t\t\t   TupleDesc tupleDesc)", "partial_line": "int\t\t\tfinalbit = attn", "completion": "int\t\t\tfinalbit = attnum & 0x07; <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n#ifdef USE_INJECTION_POINTS\n#endif\n\tbool\t\tfound;\n\t\tAssert(!found);", "partial_line": "Assert(", "completion": "Assert(found); <|endoftext|>"}
{"context": "\treturn perminfo->updatedCols;\nBitmapset *\n\treturn relinfo->ri_extraUpdatedCols;\n\tBitmapset  *ret;\n\t\t\t\t\tExecGetExtraUpdatedCols(relinfo, estate));", "partial_line": "MemoryCon", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "\tdouble\t\thours;\n\tif (pg_strncasecmp(*newval, \"interval\", 8) == 0)\n\t\t\treturn false;\n\t\tif (!endptr || endptr[1] != '\\0')\n\t\tif (interval->month != 0)", "partial_line": "pfree(", "completion": "pfree(interval); <|endoftext|>"}
{"context": "extern int replace_s(struct SN_env * z, int c_bra, int c_ket, int s_size, const symbol * s, int * adjptr)\n{\n        debug(z, -1, 0);\n}\n}", "partial_line": "if (bra <= z->br", "completion": "if (bra <= z->bra) z->bra += adjustment; <|endoftext|>"}
{"context": "\t}\n\tstate->sumlen += lenval + 1  ;\n}\ntypedef struct OperatorElement\nstatic void", "partial_line": "stack[*lenstac", "completion": "stack[*lenstack].distance = distance; <|endoftext|>"}
{"context": "\t\treturn NULL;\n\tif (indexpr_item == NULL)\t\nget_attr_stat_type(Oid reloid, AttrNumber attnum,\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\telse", "partial_line": "*atttypcol", "completion": "*atttypcoll = exprCollation(expr); <|endoftext|>"}
{"context": "\tlo_time = lo < min_time ? min_time : lo;\n#ifndef ZIC_BLOAT_DEFAULT\n\t\t\treturn EXIT_SUCCESS;\n\t\t}\n\t\t{", "partial_line": "usage(stder", "completion": "usage(stderr, EXIT_FAILURE); <|endoftext|>"}
{"context": "#include \"optimizer/optimizer.h\"\n\tRelation\ttarget_relation = NULL;\n\tListCell   *lc;\n\t\t\telog(ERROR, \"result relation must be a regular relation\");", "partial_line": "root->update_colnos = extract_update_", "completion": "root->update_colnos = extract_update_targetlist_colnos(tlist); <|endoftext|>"}
{"context": "\t\t*nentries = 0;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t{\n\t\t\treturn true;", "partial_line": "de", "completion": "default: <|endoftext|>"}
{"context": "\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\tint\t\t\ti;\n\tTRACE_POSTGRESQL_SORT_START(INDEX_SORT,\n\tbase->arg = arg;\n\t\treverse = (scanKey->sk_flags & SK_BT_DESC) != 0;", "partial_line": "PrepareSortSupportFromIndexRe", "completion": "PrepareSortSupportFromIndexRel(indexRel, reverse, sortKey); <|endoftext|>"}
{"context": "\t{\n\t{\n\t{\n\t\tPGresult   *next_result = NULL;\n\t\tif (!AcceptResult(result, false))", "partial_line": "result_status == PGR", "completion": "result_status == PGRES_COPY_OUT || <|endoftext|>"}
{"context": "\t\t\treturn -1;\n\t\t{\n\t\t\tif (i >= 1)\n\t{\n\t}", "partial_line": "token_co", "completion": "token_count = 0; <|endoftext|>"}
{"context": "\tAssert(parallel_scan);\n\tLWLockAcquire(&btscan->btps_lock, LW_EXCLUSIVE);\n\t\t\t\t   BlockNumber *last_curr_page, bool first)\n\tBTScanOpaque so = (BTScanOpaque) scan->opaque;\n\t*next_scan_page = InvalidBlockNumber;", "partial_line": "LWLockAcquire(", "completion": "LWLockAcquire(&btscan->btps_lock, LW_EXCLUSIVE); <|endoftext|>"}
{"context": "{\n\tint32\t\ts;\n\tchar\t   *next;\n\t{\n\t\t\t\tmaxstep--;", "partial_line": "s = strtol(*sfla", "completion": "s = strtol(*sflagset, &next, 10); <|endoftext|>"}
{"context": "{\n\tint\t\t   *cc_keyno = cache->cc_keyno;\n\t\t\t\t\t\t\t cc_tupdesc,\n\t\tcase 3:\n\t\t\tv3 = fastgetattr(tuple,", "partial_line": "cc_", "completion": "cc_tupdesc, <|endoftext|>"}
{"context": "\t\t\t\t\t&mapped_address, &mapped_size, LOG);\n\t\tuint32\t\trefcnt;\n\t\t\t handle, refcnt);\n{\n\twhile ((dent = ReadDir(dir, PG_DYNSHMEM_DIR)) != NULL)", "partial_line": "char\t\tbuf[MAXPGPATH + sizeof(PG_", "completion": "char\t\tbuf[MAXPGPATH + sizeof(PG_DYNSHMEM_DIR)]; <|endoftext|>"}
{"context": "}\nstatic void\n\tXLogRecPtr\treplicatedPtr;\n\treplayPtr = GetXLogReplayRecPtr(&replayTLI);\n\t\tresult = receivePtr;", "partial_line": "return re", "completion": "return result; <|endoftext|>"}
{"context": "\t\t\t\t\t\tget_constraint_type(cldConstrOid))\n\t\t\t\t\tConstraintSetParentConstraint(cldConstrOid, constraintOid,\n\tSysScanDesc scan;\n\tHeapTuple\ttuple;\n\t\tif (!TRIGGER_FOR_ROW(trigForm->tgtype))", "partial_line": "c", "completion": "continue; <|endoftext|>"}
{"context": "static const symbol s_14[] = { 'l', 0xC3, 0xB6, 0xC3, 0xB6 };\nstatic const symbol s_20[] = { 'v', 0xC3, 0xB5, 'i', 's', 'i' };\n    return 1;\nstatic int r_emphasis(struct SN_env * z) {\n        if (z->c < z->I[0]) return 0;", "partial_line": "{   int m3", "completion": "{   int m3 = z->l - z->c; (void)m3; <|endoftext|>"}
{"context": "\t\t\t\t\t\tbreak;\n\t\t\telse if (!jspIgnoreStructuralErrors(cxt))\n\t\t\t\tbool\t\thasNext = jspGetNext(jsp, &elem);\n\t\t\t\t\tif (res == jperOk && !found)\n\t\t\t\t\t\t jsp->content.anybounds.first,", "partial_line": "ca", "completion": "case jpiKey: <|endoftext|>"}
{"context": "\t\t\tbreak;\n\tPartitionDesc partdesc = RelationGetPartitionDesc(parent, false);\n\tint\t\t\twith = -1;\n\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tspec->modulus,", "partial_line": "errdetail(\"The new modulus %d is not a factor of %d, the", "completion": "errdetail(\"The new modulus %d is not a factor of %d, the modulus of existing partition \\\"%s\\\".\", <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t\t errmsg(\"must specify provider when multiple security label providers have been loaded\")));\n\t\tif (provider == NULL)\n\t\t\t\t\t\t\t\tRelationGetRelationName(relation)),\n\t\t\tbreak;", "partial_line": "defau", "completion": "default: <|endoftext|>"}
{"context": "\t\tPG_RETURN_INT32(-1);\nhashxid8(PG_FUNCTION_ARGS)\nxid8_larger(PG_FUNCTION_ARGS)\n{\nDatum", "partial_line": "FullTransactionId fxid2 = PG_GETARG_FUL", "completion": "FullTransactionId fxid2 = PG_GETARG_FULLTRANSACTIONID(1); <|endoftext|>"}
{"context": "#endif\n\tint\t\t\tprogress;\n\t\t\t\tnexta = a->outchain;\n\t\t\t{\n\t\t\tif ((s->nins == 0 || s->nouts == 0) && !s->flag)", "partial_line": "for (a = nfa->pre->outs", "completion": "for (a = nfa->pre->outs; a != NULL; a = nexta) <|endoftext|>"}
{"context": "\t\tPageRestoreTempPage(leftpage, origpage);\n\t\toopaque->btpo_cycleid = 0;\n\t{\n\t\tif (XLogReadBufferForRedo(record, 2, &sbuf) == BLK_NEEDS_REDO)\n\t\t\tPage\t\tspage = (Page) BufferGetPage(sbuf);", "partial_line": "Page\t\tne", "completion": "Page\t\tnewpage; <|endoftext|>"}
{"context": "\t\t\treturn res;\n\t\t}\nstatic int\n\t\t\t\t\t\t\t\t\t\t  pset.bind_nparams,\n\t\t\tbreak;", "partial_line": "end_pipeline", "completion": "end_pipeline = true; <|endoftext|>"}
{"context": "#include \"catalog/pg_amop.h\"\n\tbool\t\tresult = true;\n\tForm_pg_opclass classform;", "partial_line": "char", "completion": "char\t   *opclassname; <|endoftext|>"}
{"context": "\t\t\tRESIZEBUF(in, 2);\n\t\t*(in->cur) = '!';\n\t\tinfix(in, priority, false);\n\t\t\tin->cur = strchr(in->cur, '\\0');\n\t\tint16\t\tdistance = in->curpol->qoperator.distance;", "partial_line": "(op == OP_PHRA", "completion": "(op == OP_PHRASE && rightPhraseOp)) <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\"FROM pg_catalog.pg_replication_slots \"\n\t\tfor (int slotnum = 0; slotnum < num_slots; slotnum++)\n\t\t\tcurr->caught_up = (strcmp(PQgetvalue(res, slotnum, i_caught_up), \"t\") == 0);\n\t}", "partial_line": "dbinfo-", "completion": "dbinfo->slot_arr.nslots = num_slots; <|endoftext|>"}
{"context": "\t\t\t\tcopybuf->cursor = 0;\n\t\t\t\t\t \"        ON (c.relnamespace = n.oid)\"\n\t\t\t\t\t\tnspname, relname)));\n\t\tresetStringInfo(&cmd);\n\t\t\t\t\t\t \"  (CASE WHEN (array_length(gpt.attrs, 1) = c.relnatts)\"", "partial_line": "pubres = walrcv_", "completion": "pubres = walrcv_exec(LogRepWorkerWalRcvConn, cmd.data, <|endoftext|>"}
{"context": "#include <signal.h>\n#include \"access/xlog.h\"\n#include \"port/pg_bswap.h\"\n#include \"postmaster/bgworker_internals.h\"", "partial_line": "static const BackendTypeM", "completion": "static const BackendTypeMask BTYPE_MASK_NONE = {0}; <|endoftext|>"}
{"context": "\t\tappendStringInfoString(es->str, pname);\n\t\t\tExplainPropertyText(\"Operation\", operation, es);\n\t\tif (custom_name)\n\t\t\tExplainPropertyText(\"Custom Plan Provider\", custom_name, es);\n\t\tcase T_SeqScan:", "partial_line": "case T_Tid", "completion": "case T_TidRangeScan: <|endoftext|>"}
{"context": "{\n\tSize\t\tos_page_size;\n\tGetSystemInfo(&sysinfo);\n\tos_page_size = sysconf(_SC_PAGESIZE);\n}", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\tDatum\t\ta1,\n\t}\n\tqsort(distances, ndistances, sizeof(DistanceValue), compare_distances);\nstatic ExpandedRange *\n\t\tif (cranges[i].collapsed)", "partial_line": "DistanceValue *d", "completion": "DistanceValue *distances, int max_values, <|endoftext|>"}
{"context": "\ti_sortfamily = PQfnumber(res, \"sortfamily\");\n\t\t\t\t\t\t\t\t\t\t\"OPERATOR CLASS\", nameusing->data,\n\tif (opcinfo->dobj.dump & DUMP_COMPONENT_DEFINITION)\n\t\tdumpComment(fout, \"OPERATOR CLASS\", nameusing->data,\n\tPQExpBuffer query;", "partial_line": "int\t\t\ti_a", "completion": "int\t\t\ti_amname; <|endoftext|>"}
{"context": "\t\tif (!outer_merged && !inner_merged)\n\t\t{\n\t\t\t\touter_map->merged_indexes[outer_index] = inner_merged_index;\n\t\tinner_map->merged[inner_index] = true;\n\treturn -1;", "partial_line": "stat", "completion": "static int <|endoftext|>"}
{"context": "\t\tskey->sk_flags |= SK_BT_MAXVAL;\n}\n_bt_array_decrement(Relation rel, ScanKey skey, BTArrayKeyInfo *array)\n\t\t\treturn true;\n\t}", "partial_line": "Assert(!(skey", "completion": "Assert(!(skey->sk_flags & SK_BT_NULLS_FIRST)); <|endoftext|>"}
{"context": "                        break;\n                    goto lab1;\n            lab1:\n                {   int ret = slice_from_s(z, 4, s_54);\n                    if (ret < 0) return ret;", "partial_line": "ca", "completion": "case 6: <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t}\n\t\tif (done)\n\t\treturn false;\n{", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\tappendPQExpBuffer(delq, \"DROP AGGREGATE %s.%s;\\n\",\n\t\t\t\t\t\t\t\t\t\t\"AGGREGATE\", aggsig,\n\t\t\t\t\t ARCHIVE_OPTS(.tag = aggsig_tag,\n\t\t\t\t\t\t\t\t  .createStmt = q->data,\n\t\t\t\t\t agginfo->aggfn.dobj.catId, 0, agginfo->aggfn.dobj.dumpId);", "partial_line": "free(ag", "completion": "free(aggsig); <|endoftext|>"}
{"context": "\t\t\tif (blockno >= hscan->rs_nblocks)\n\t\t\tif (scan->rs_flags & SO_ALLOW_SYNC)\n\thscan->rs_cbuf = ReadBufferExtended(hscan->rs_base.rs_rd, MAIN_FORKNUM,\n\tif (hscan->rs_base.rs_flags & SO_ALLOW_PAGEMODE)\n\treturn true;", "partial_line": "sta", "completion": "static bool <|endoftext|>"}
{"context": "\t\tpg_fatal(\"could not synchronize directory \\\"%s\\\": %m\", new_db_dir);\n\tif (old_tablespace)\n\t\tif (prepare_for_swap(old_tablespace, maps[0].db_oid,\n\t}\n\t\tfor (int tblnum = 0; tblnum < os_info.num_old_tablespaces; tblnum++)", "partial_line": "old_catalog_dir, new_db_dir, m", "completion": "old_catalog_dir, new_db_dir, moved_db_dir)) <|endoftext|>"}
{"context": "\t\t\t\t\t(ExecScanAccessMtd) TableFuncNext,\n\tTableFunc  *tf = node->tablefunc;\n\tTupleDesc\ttupdesc;\n\tAssert(outerPlan(node) == NULL);\n\tscanstate->rowexpr =", "partial_line": "ExecInitExpr", "completion": "ExecInitExpr((Expr *) tf->rowexpr, (PlanState *) scanstate); <|endoftext|>"}
{"context": "#endif\nstruct sqlca_t\n\tchar\t\tsqlcaid[8];\n\tstruct\n\t{", "partial_line": "#lin", "completion": "#line 2 \"dynalloc2.pgc\" <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t &checksum_failures);\n\t\t{\n\t\tif (cnt == 0)\n\t\t\tbreak;", "partial_line": "bytes_done", "completion": "bytes_done += cnt; <|endoftext|>"}
{"context": "\t\tappendBinaryStringInfo(&bound_buf, bound_data, bound_len);\n\tpq_getmsgend(buf);\n\tlower.infinite = (flags & RANGE_LB_INF) != 0;\n\tupper.infinite = (flags & RANGE_UB_INF) != 0;\n{", "partial_line": "RangeBound", "completion": "RangeBound\tupper; <|endoftext|>"}
{"context": "\t\t\t*outfuncoid = F_DATE_OUT;\n\t\tcase TIMESTAMPTZOID:\n\t\t\t*tcategory = JSONTYPE_TIMESTAMPTZ;\n\t\t\t\t*outfuncoid = F_ARRAY_OUT;\n\t\t\t\t*tcategory = JSONTYPE_OTHER;", "partial_line": "CoercionPat", "completion": "CoercionPathType ctype; <|endoftext|>"}
{"context": "\t\t\telse if (!PQgetisnull(res, i, 1))\n\t\t\t\t\t   rel->datinfo->datname, rel->nspname, rel->relname,\n\t\t\t\t\t   PQgetvalue(res, i, 1));\t\n\t\t\tprintf(\"    %s\\n\", msg);\n\t\tFREE_AND_SET_NULL(msg);", "partial_line": "FREE_A", "completion": "FREE_AND_SET_NULL(rel->nspname); <|endoftext|>"}
{"context": "\tfor (i = 0; i < oprlist->n_members; i++)\n\t\tHeapTuple\toprtup = &oprlist->members[i]->tuple;\n\t\t\tif (!OidIsValid(get_opfamily_proc(opfamilyoid,\n\t\t\t{\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),", "partial_line": "op_rettype =", "completion": "op_rettype = get_op_rettype(oprform->amopopr); <|endoftext|>"}
{"context": "\tstup.datum1 = heap_getattr(&htup,\n\t\t\t\t\t\t\t   tupDesc,\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\t\t\t\t\t\t\t  ItemPointer self, const Datum *values,\n\tstup.tuple = index_form_tuple_context(RelationGetDescr(rel), values,", "partial_line": "tuplesort_putbrintuple(Tuplesortstate *state, BrinT", "completion": "tuplesort_putbrintuple(Tuplesortstate *state, BrinTuple *tuple, Size size) <|endoftext|>"}
{"context": "\tRuleLock   *rulelock;\n\tMemoryContextCopyAndSetIdentifier(rulescxt,\n\tScanKeyInit(&key,\n\t\tbool\t\tisnull;\n\t\tDatum\t\trule_datum;", "partial_line": "&", "completion": "&isnull); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t}\n\t\t\t\tnaffix++;\n\t\tConf->AffixData = (const char **) palloc0(naffix * sizeof(const char *));\n\t\t\t\tcuraffix++;", "partial_line": "Conf->lenAffixData", "completion": "Conf->lenAffixData = Conf->nAffixData = naffix; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\tsnprintf(buf, v.val.string.len + 1, \"%s\", v.val.string.val);\n\t\t\t\t\t\t\t errmsg(\"object keys must be strings\")));\n\t\t\t\tbreak;\n\t\t\tdefault:", "partial_line": "switc", "completion": "switch (type) <|endoftext|>"}
{"context": "}\nbool\nbrininsert(Relation idxRel, Datum *values, bool *nulls,\n\torigHeapBlk = ItemPointerGetBlockNumber(heaptid);\n\theapBlk = (origHeapBlk / pagesPerRange) * pagesPerRange;", "partial_line": "for", "completion": "for (;;) <|endoftext|>"}
{"context": "\tmultirange_get_bounds(rangetyp, mr, 0, &lower2, &upper2);\n\t\t\t\tlower2,\n\tmultirange_get_bounds(rangetyp, mr1, mr1->rangeCount - 1,\n\t\t\t\t\t\t  &lower1, &upper1);\n\t\t\t\t\t\t  &lower2, &upper2);", "partial_line": "range_after_multirange", "completion": "range_after_multirange_internal(TypeCacheEntry *rangetyp, <|endoftext|>"}
{"context": "\tif (pg_strcasecmp(sval, \"default\") == 0)\n\t\t\t\t   CopyFormatOptions *opts_out,\n\t\t\t\t   List *options)\n\tbool\t\tlog_verbosity_specified = false;\n\tListCell   *option;", "partial_line": "if (form", "completion": "if (format_specified) <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\tif (doFillInner)\n\t\t\t\t\t\t{\n\t\t\t\t\tcase MJEVAL_MATCHABLE:\n\t\t\t\tecontext->ecxt_outertuple = outerTupleSlot;", "partial_line": "qualResult = (joinq", "completion": "qualResult = (joinqual == NULL || <|endoftext|>"}
{"context": "\tCHECK_FOR_INTERRUPTS();\n\t\tcase OP_NOT:\n\t\t\t\treturn TS_YES;\n\t\t\t\t\t\treturn TS_NO;\n\t\t\t\t\treturn TS_MAYBE;", "partial_line": "if (lmatch", "completion": "if (lmatch == TS_NO) <|endoftext|>"}
{"context": "\t\t\tcase '-':\n\t\t\t\t\t{\n\t\t\t\t\t\telse\n\t\t\t\t\tSetConfigOption(name, value, PGC_POSTMASTER, PGC_S_ARGV);\n\t\t\t\tSetConfigOption(\"listen_addresses\", optarg, PGC_POSTMASTER, PGC_S_ARGV);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "}\n\tmbverifychar = pg_wchar_table[encoding].mbverifychar;\n\t\tif (!IS_HIGHBIT_SET(*mbstr))\n\t\t\t}\n\t\t{", "partial_line": "mbs", "completion": "mbstr += l; <|endoftext|>"}
{"context": "\t\t\t\t\tLLVMValueRef v_setoff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFIELDNO_AGGSTATE_ALL_PERGROUPS,\n\t\t\tcase EEOP_AGG_PLAIN_TRANS_INIT_STRICT_BYREF:\n\t\t\tcase EEOP_AGG_PLAIN_TRANS_STRICT_BYREF:\n\t\t\t\t\tAggState   *aggstate;", "partial_line": "LLVMValueRef v_", "completion": "LLVMValueRef v_oldcontext; <|endoftext|>"}
{"context": "exec_command_copy(PsqlScanState scan_state, bool active_branch)\n\telse\nstatic backslashResult\n{\n\t\t\tpset.ctv_args[i] = psql_scan_slash_option(scan_state,", "partial_line": "backslas", "completion": "backslashResult status = PSQL_CMD_SKIP_LINE; <|endoftext|>"}
{"context": "\t\t\tTerminateChildren(SIGQUIT);\n\tpending_pm_child_exit = true;\n\t\t\t\tUpdatePMState(PM_WAIT_BACKENDS);\n\t\t\t}\n\t\t\t\t\tStartupStatus = STARTUP_CRASHED;", "partial_line": "co", "completion": "continue; <|endoftext|>"}
{"context": "\tif (toast_relid != InvalidOid)\n\t}\n\t\t\t\t int *nindexes, Relation **Irel)\n\tList\t   *indexoidlist;\n\tint\t\t\ti;", "partial_line": "indexoidl", "completion": "indexoidlist = RelationGetIndexList(relation); <|endoftext|>"}
{"context": "\t\t\t\t\t\telse if (optind < argc - 1 &&\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn BADCH;\n\t\t\t\t\t\t\toptarg = NULL;\n\t\t\t\t\t}", "partial_line": "re", "completion": "return BADCH; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t   cur_em->em_expr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   eq_op,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   rightvar,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   bms_copy(right_relids),\n\t\t}", "partial_line": "EquivalenceClass *ec = (Equ", "completion": "EquivalenceClass *ec = (EquivalenceClass *) lfirst(lc); <|endoftext|>"}
{"context": "\tin_remote_transaction = true;\n\tif (!IsTransactionBlock())\n\t\tBeginTransactionBlock();\n\t}\n\treplorigin_session_origin_timestamp = prepare_data->prepare_time;", "partial_line": "apply_handle_prepare(St", "completion": "apply_handle_prepare(StringInfo s) <|endoftext|>"}
{"context": "\telse if (!(errno == ENOENT || errno == ENOTDIR || errno == EACCES))\n\t\tif (rc != 0)\n\t\t\tif (errno == ENOSYS)\n\t\t{\n\t\tif (pagesize == 0)", "partial_line": "if (page", "completion": "if (pagesize > 0) <|endoftext|>"}
{"context": "\t\tpg_log_error(\"database creation failed: %s\", PQerrorMessage(conn));\n\t\t}\nhelp(const char *progname)\n\tprintf(_(\"  %s [OPTION]... [DBNAME] [DESCRIPTION]\\n\"), progname);\n\tprintf(_(\"      --builtin-locale=LOCALE  builtin locale setting for the database\\n\"));", "partial_line": "printf(_(\"\\nBy default, a database with the same name", "completion": "printf(_(\"\\nBy default, a database with the same name as the current user is created.\\n\")); <|endoftext|>"}
{"context": "        case 83:\n            {   int ret = slice_from_s(z, 3, s_210);\n                if (ret < 0) return ret;\n            break;\n            }", "partial_line": "c", "completion": "case 99: <|endoftext|>"}
{"context": "\t\t\t}\n\tReplicationSlot *slot = MyReplicationSlot;\n\t\telog(DEBUG1, \"segno: \" UINT64_FORMAT \" of purposed restart_lsn for the synced slot, oldest_segno: \" UINT64_FORMAT \" available\",\n\t\tXLogSegNoOffsetToRecPtr(oldest_segno, 0, wal_segment_size, restart_lsn);\n\t\treturn false;", "partial_line": "remote_s", "completion": "remote_slot->name)); <|endoftext|>"}
{"context": "#define RADIUS_MAX_PASSWORD_LENGTH 128\n\tuint8\t\tattribute;\n\tuint8\t\tdata[FLEXIBLE_ARRAY_MEMBER];\n\tuint8\t\tvector[RADIUS_VECTOR_LENGTH];\n#define RADIUS_USER_NAME\t\t1", "partial_line": "#define RADIUS_", "completion": "#define RADIUS_SERVICE_TYPE\t\t6 <|endoftext|>"}
{"context": "\t\tcase TSS_INMEM:\n\t\t\tfor (i = 0; i < state->readptrcount; readptr++, i++)\n\t\t\t\tif (readptr->eof_reached && i != state->activeptr)\n\t\t\tstate->memtuples[state->memtupcount++] = tuple;\n\t\t\tstate->backward = (state->eflags & EXEC_FLAG_BACKWARD) != 0;", "partial_line": "BufFileTell(state-", "completion": "BufFileTell(state->myfile, <|endoftext|>"}
{"context": "\t\tcase T_WindowAgg:\n\t\t\t\t\t\t\t\t\t\t\t\t  estate, eflags);\n\t\t\tresult = (PlanState *) ExecInitGather((Gather *) node,\n\t\t\tresult = (PlanState *) ExecInitGatherMerge((GatherMerge *) node,\n\t\tcase T_Hash:", "partial_line": "estate, efl", "completion": "estate, eflags); <|endoftext|>"}
{"context": "\tif (gzsetparams(streamer->gzfile, compress->level, Z_DEFAULT_STRATEGY) != Z_OK)\n{\n\tif (len == 0)\n\t\treturn;\n\t\t\terrno = ENOSPC;", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t (TRIGGER_FOR_UPDATE(tgtype) ? 1 : 0) +\n\t\t\tif (stmt->columns != NIL)\n\t\t\t\tereport(ERROR,\n\t\t\tAssert(!stmt->isconstraint);\n\t\t\tif (tt->isNew)", "partial_line": "(errcode(ERRC", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "}\n\t\tprepare_column_cache(col, typid, typmod, mcxt, true);\n\t*isnull = JsValueIsNull(jsv);\n\t\ttypcat != TYPECAT_DOMAIN &&\n\t\tcase TYPECAT_ARRAY:", "partial_line": "? DatumGetHeapTupl", "completion": "? DatumGetHeapTupleHeader(defaultval) <|endoftext|>"}
{"context": "static const TParserStateActionItem actionTPS_InPortFirst[] = {\n\t{p_isdigit, 0, A_NEXT, TPS_InPort, 0, NULL},\n\t{p_isdigit, 0, A_NEXT, TPS_InHost, 0, NULL},\n\t{p_isdigit, 0, A_NEXT, TPS_InHost, 0, NULL},\n\t{p_iseqC, '-', A_PUSH, TPS_InHostFirstAN, 0, NULL},", "partial_line": "{p_iseqC, '_', A_PUSH, TP", "completion": "{p_iseqC, '_', A_PUSH, TPS_InHostFirstAN, 0, NULL}, <|endoftext|>"}
{"context": "\t\t0xEE7CD990, 0x4B3D4BEE, 0xA1138B9D, 0x045219E3,\n\t\t0x48F3434F, 0xEDB2D131, 0x079C1142, 0xA2DD833C,\n\t\t0xD915C5D1, 0x7C5457AF, 0x967A97DC, 0x333B05A2,\n\t\t0x8F96C396, 0x2AD751E8, 0xC0F9919B, 0x65B803E5,\n\t\t0x80AEE112, 0x25EF736C, 0xCFC1B31F, 0x6A802161,", "partial_line": "0xF00C9C98, 0x554D0EE6, 0xBF63CE", "completion": "0xF00C9C98, 0x554D0EE6, 0xBF63CE95, 0x1A225CEB, <|endoftext|>"}
{"context": "\t\t\t*header = scalarVal->val.string.len;\n\t\t\tbreak;\n\t\t\t*header = JENTRY_ISNUMERIC | (padlen + numlen);\n\t\t\t{\n\t\t\t\tsize_t\t\tlen;", "partial_line": "*header", "completion": "*header = len; <|endoftext|>"}
{"context": "\tif (change->action == REORDER_BUFFER_CHANGE_INSERT ||\n\t\tReorderBufferTXN *toptxn = rbtxn_get_toptxn(txn);\n\t\t\t\t\t\t\t\t\tReorderBufferChangeSize(change));\n{\n\t\tReorderBufferChange *change;", "partial_line": "volatile Snapshot snap", "completion": "volatile Snapshot snapshot_now = snap; <|endoftext|>"}
{"context": "\t\txl_brin_insert xlrec;\n\t\txlrec.pagesPerRange = pagesPerRange;\n\t\tXLogBeginInsert();\nvoid\nbrin_metapage_init(Page page, BlockNumber pagesPerRange, uint16 version)", "partial_line": "brin_start_evacuating_page(Relation id", "completion": "brin_start_evacuating_page(Relation idxRel, Buffer buf) <|endoftext|>"}
{"context": "\tPG_FREE_IF_COPY(jb, 1);\nDatum\n\tOid\t\t\tcfgId;\n\tJsonb\t   *jb = PG_GETARG_JSONB_P(1);\n\tPG_FREE_IF_COPY(jb, 1);", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  ParallelIndexScanDesc pscan, bool temp_snap);\n\tvalidate_relation_kind(r);\n\t\treturn NULL;\n\treturn r;\n\tAssert(lockmode >= NoLock && lockmode < MAX_LOCKMODES);", "partial_line": "stati", "completion": "static inline void <|endoftext|>"}
{"context": "\t\treturn (Datum) 0;\n\t*isnull = false;\n\t\t{\n\t\t\t\t\t\t\t\t errmsg(\"multidimensional arrays must have array expressions with matching dimensions\")));\n\t\t\t\t\tif (cur_depth >= MAXDIM)", "partial_line": "MAXD", "completion": "MAXDIM))); <|endoftext|>"}
{"context": "\t\telse\n\t\t\tzapallsubs(pmatch, nmatch);\n\tv->err = 0;\n\telse\n\t\tv->subdfas = (struct dfa **) MALLOC(n * sizeof(struct dfa *));", "partial_line": "st = REG", "completion": "st = REG_ESPACE; <|endoftext|>"}
{"context": "\t\tnode->left = clean_stopword_intree(node->left, &lladd, &lradd);\n\t\tnode->right = clean_stopword_intree(node->right, &rladd, &rradd);\n\t\telse if (node->left == NULL)\n\t\t\t\t*ladd = lladd;\n\t\t\t}", "partial_line": "*r", "completion": "*radd = rradd; <|endoftext|>"}
{"context": "\tPortalHashTable = hash_create(\"Portal hash\", PORTALS_PER_USER,\n\t\tPortalHashTableLookup(name, portal);\n\telse\n}\n\t{", "partial_line": "portal = (Portal) MemoryContex", "completion": "portal = (Portal) MemoryContextAllocZero(TopPortalContext, sizeof *portal); <|endoftext|>"}
{"context": "\t}\n\t\tpg_log_error(\"database creation failed: %s\", PQerrorMessage(conn));\n\t\t}\nhelp(const char *progname)\n\tprintf(_(\"  %s [OPTION]... [DBNAME] [DESCRIPTION]\\n\"), progname);", "partial_line": "printf(_(\"      --builtin-locale=L", "completion": "printf(_(\"      --builtin-locale=LOCALE  builtin locale setting for the database\\n\")); <|endoftext|>"}
{"context": "\tObjectAddress address;\n\tForm_pg_publication pubform;\n{\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),", "partial_line": "defGetGeneratedCols", "completion": "defGetGeneratedColsOption(DefElem *def) <|endoftext|>"}
{"context": "\t\t\t\tif (count != 1)\n\t\t\t}\n\tif (swap_toast_by_content &&\n\t\ttoastIndex1 = toast_get_valid_index(r1,\nvoid", "partial_line": "bool is_s", "completion": "bool is_system_catalog, <|endoftext|>"}
{"context": "\t\targ->u.domain.domain_info = NULL;\n\t{\n\t\t\t\t\t\t\t  typentry->typelem, typmod,\n\t\targ->u.tuple.atts = NULL;\n\t\t{", "partial_line": "arg->func = PLyOb", "completion": "arg->func = PLyObject_ToBool; <|endoftext|>"}
{"context": "static const symbol s_6_31[5] = { 'a', 'n', 'z', 'a', 's' };\nstatic const symbol s_6_45[4] = { 'i', 'v', 'o', 's' };\n{ 3, s_6_0, -1, 1, 0},\n{ 5, s_6_1, -1, 2, 0},\n{ 4, s_6_11, -1, 1, 0},", "partial_line": "{ 5, s_6_41", "completion": "{ 5, s_6_41, -1, 1, 0}, <|endoftext|>"}
{"context": "\treturn &copybuf[startpos];\n\t\tpg_fatal(\"empty COPY message\");\n\telse\nstatic void\nReceiveTarFile(PGconn *conn, char *archive_name, char *spclocation,", "partial_line": "bool\t\tis_", "completion": "bool\t\tis_recovery_guc_supported; <|endoftext|>"}
{"context": "\t\t\t\t\t\t const char *data, int len,\n{\n\t\t\t\tmember_compute_checksum(streamer, member, data, len);\n\t\t\tif (mystreamer->verify_control_data)\n\t\tcase ASTREAMER_ARCHIVE_TRAILER:", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t{\"create\", 0, NULL, 'C'},\n\t\t{\"dbname\", 1, NULL, 'd'},\n\t\t{\"port\", 1, NULL, 'p'},\n\t\t{\"schema\", 1, NULL, 'n'},\n\t\t{\"use-list\", 1, NULL, 'L'},", "partial_line": "{\"enable-row-security\",", "completion": "{\"enable-row-security\", no_argument, &enable_row_security, 1}, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tlevelStep++;\n\t\tbuildstate->buildMode = GIST_BUFFERING_DISABLED;\n\telog(DEBUG1, \"switched to buffered GiST build; level step = %d, pagesPerBuffer = %d\",\n\tavgIndexTuplesPerPage = pageFreeSpace / itupAvgSize;", "partial_line": "pagesPerBuffer =", "completion": "pagesPerBuffer = 2 * pow(avgIndexTuplesPerPage, levelStep); <|endoftext|>"}
{"context": "#endif\n\t\tdefault:\n\t}\n\tif (bits < 0 || bits > 32)\n\t\tdst += SPRINTF((dst, \"/%u\", bits));", "partial_line": "re", "completion": "return (odst); <|endoftext|>"}
{"context": "\t\ttupmap = convert_tuples_by_position(retdesc,\n\t\t\t\t\t\t\t\t\t\t\ttupdesc,\n\t\t{\nplpgsql_exec_trigger(PLpgSQL_function *func,\n\t\t\t\t\t TriggerData *trigdata)", "partial_line": "estate.trigdata", "completion": "estate.trigdata = trigdata; <|endoftext|>"}
{"context": "\tstruct _IndexList *il_next;\n}\n\t\t\tcase 'c':\n\t\t\t\t\t{\n\t\t\t\tuserDoption = pstrdup(optarg);", "partial_line": "bootstrap_data_checksum_versi", "completion": "bootstrap_data_checksum_version = PG_DATA_CHECKSUM_VERSION; <|endoftext|>"}
{"context": "\t\tSnapBuildWaitSnapshot(running, running->nextXid);\n\t{\n\t\t\t\t\t\tLSN_FORMAT_ARGS(lsn)),\n}\n\tint\t\t\toff;", "partial_line": "if (Tra", "completion": "if (TransactionIdFollows(xid, cutoff)) <|endoftext|>"}
{"context": "}\n\tif ((stmt->options & CURSOR_OPT_SCROLL) &&\n\t\t\t\t errmsg(\"cannot specify both %s and %s\",\n\t\t\t\t errmsg(\"DECLARE CURSOR must not contain data-modifying statements in WITH\")));\n\t\tereport(ERROR,", "partial_line": "linitial(query->rowMarks))-", "completion": "linitial(query->rowMarks))->strength)), <|endoftext|>"}
{"context": "\tSlruShared\tshared = ctl->shared;\n\tint\t\t\tbankno = SlotGetBankNumber(slotno);\n\t\tSimpleLruWaitIO(ctl, slotno);\n\t}\n\tshared->page_dirty[slotno] = false;", "partial_line": "LWLockAcquire(&shared->buffer_locks[slotno].", "completion": "LWLockAcquire(&shared->buffer_locks[slotno].lock, LW_EXCLUSIVE); <|endoftext|>"}
{"context": "\tInsertPgAttributeTuples(rel, tupdesc, new_rel_oid, NULL, indstate);\n\tfor (int i = 0; i < natts; i++)\n\t\ttd = CreateTupleDesc(lengthof(SysAtt), (FormData_pg_attribute **) &SysAtt);\n\tForm_pg_class rd_rel = new_rel_desc->rd_rel;\n\tvalues[Anum_pg_class_relname - 1] = NameGetDatum(&rd_rel->relname);", "partial_line": "values[Anum_pg", "completion": "values[Anum_pg_class_reltuples - 1] = Float4GetDatum(rd_rel->reltuples); <|endoftext|>"}
{"context": "static int r_R2(struct SN_env * z) {\n    return z->I[0] <= z->c;\n    among_var = find_among_b(z, a_3, 5);\n    if (!among_var) return 0;\n    {   int ret = r_RV(z);", "partial_line": "if (ret <= 0", "completion": "if (ret <= 0) return ret; <|endoftext|>"}
{"context": "\twhile (rt_index < list_length(parsetree->rtable))\n\t\tList\t   *locks;\n\t\tRewriteRule *rule;\n\t\tint\t\t\ti;\n\t\trte = rt_fetch(rt_index, parsetree->rtable);", "partial_line": "parsetree->", "completion": "parsetree->hasRowSecurity |= rte->subquery->hasRowSecurity; <|endoftext|>"}
{"context": "\t\tecpg_do_epilogue(stmt);\n\t}\n\tstmt->oldthreadlocale = _configthreadlocale(_ENABLE_PER_THREAD_LOCALE);\n\tif (stmt->oldlocale == NULL)\n\t{", "partial_line": "setlocale(LC_", "completion": "setlocale(LC_NUMERIC, \"C\"); <|endoftext|>"}
{"context": "\tECPGt_int,&(i),(long)1,(long)1,sizeof(int), \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);\nif (sqlca.sqlcode < 0) sqlprint ( );}\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);\n#line 67 \"define.pgc\"", "partial_line": "#line 67 \"", "completion": "#line 67 \"define.pgc\" <|endoftext|>"}
{"context": "#include \"fe_utils/simple_list.h\"\n#define READ_CHUNK_SIZE\t\t\t\t(128 * 1024)\n\tOid\t\t\ttblspc_oid;\n} tar_file;\n\t\t\t\t\t\t\t\t\tint manifest_version);", "partial_line": "pg_checksum_type c", "completion": "pg_checksum_type checksum_type, <|endoftext|>"}
{"context": "\t{\"gssdelegation\", ForeignServerRelationId},\n};\n{\n\t\t\treturn true;\n\t\t\t\t}", "partial_line": "(errcode(", "completion": "(errcode(ERRCODE_SYNTAX_ERROR), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t &scanjoin_targets,\n\t\telse\n\t\t\tgrouping_targets = grouping_targets_contain_srfs = NIL;\n\t\troot->upper_targets[UPPERREL_ORDERED] = final_target;\n\t\troot->upper_targets[UPPERREL_PARTIAL_DISTINCT] = sort_input_target;", "partial_line": "wflis", "completion": "wflists, <|endoftext|>"}
{"context": "\t\tmqh->mqh_counterparty_attached = true;\n\twhile (!mqh->mqh_length_word_complete)\n\t\t\t\t\t\t\t\t   nowait, &rb, &rawdata);\n\t\t\tnbytes = *(Size *) rawdata;\n\t\t\tmqh->mqh_length_word_complete = true;", "partial_line": "mqh->mqh_c", "completion": "mqh->mqh_consume_pending += MAXALIGN(sizeof(Size)); <|endoftext|>"}
{"context": "\tint\t\t\tidx;\n\t\tif (collid)\n}\n\tAssert(mcvlist != NULL);\n\t\t\tFmgrInfo\topproc;", "partial_line": "fmgr_info(ge", "completion": "fmgr_info(get_opcode(expr->opno), &opproc); <|endoftext|>"}
{"context": "\tN1 = transvalues1[0];\n\tif (N1 == 0.0)\n\t\tSy = Sy2;\n\t\tSx = Sx1;\n\t\tSxx = Sxx1;", "partial_line": "Sxy = S", "completion": "Sxy = Sxy1; <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"replication/logicallauncher.h\"\n#include \"storage/proc.h\"\n\t\tresult = (int64) (tabentry->stat);\t\t\t\t\t\t\\", "partial_line": "PG_RET", "completion": "PG_RETURN_INT64(result);\t\t\t\t\t\t\t\t\t\\ <|endoftext|>"}
{"context": "\tchar\t   *bufend;\t\t\t\n\tPrintfTarget target;\n\treturn target.failed ? -1 : (target.bufptr - target.bufstart", "partial_line": "+ target.nc", "completion": "+ target.nchars); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#include \"tsearch/ts_type.h\"\n\ttext\t   *element;", "partial_line": "tsmat", "completion": "tsmatchsel(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\tsjinfo->commute_below_l = commute_below_l;\n\t\t{\n\t\t\t\totherinfo->commute_above_r =\n\tList\t   *semi_rhs_exprs;\n\tsjinfo->semi_can_hash = false;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "#include \"common/pg_prng.h\"\n#include \"utils/datum.h\"\n\tFmgrInfo\ttypreceive;\n} DeserialIOData;\n\tExpandedArrayHeader *eah;", "partial_line": "size", "completion": "sizeof(ArrayMetaState)); <|endoftext|>"}
{"context": "            }\n    if (!among_var) return 0;\n    switch (among_var) {\n                if (ret <= 0) return ret;\n            {   int ret = slice_del(z);", "partial_line": "{   int ret", "completion": "{   int ret = r_R1(z); <|endoftext|>"}
{"context": "\tpset.popt.topt.encoding = pset.encoding;\n\tSetVariable(pset.vars, \"ENCODING\", pg_encoding_to_char(pset.encoding));\n\tSetVariable(pset.vars, \"SERVER_VERSION_NAME\", server_version);\n\tSetVariable(pset.vars, \"SERVER_VERSION_NUM\", vbuf);\n\tSetVariable(pset.vars, \"HOST\", NULL);", "partial_line": "editor", "completion": "editorName = getenv(\"EDITOR\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tmember->mode);\n\t\t\tif (len > 0 && fwrite(data, len, 1, mystreamer->file) != 1)\n\t\t\tbreak;\n\t\t\tif (mystreamer->file == NULL)\n\t\t\tbreak;", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "void\n\tif (cascade)\n\t\t\t\t\t\t bool *cascade, bool *restart_seqs)\n\tuint8\t\tflags;\n\tnrelids = pq_getmsgint(in, 4);", "partial_line": "*cascade", "completion": "*cascade = (flags & TRUNCATE_CASCADE) > 0; <|endoftext|>"}
{"context": "\t\tblkno = state->pages_allocated++;\n\t\t\tgistinitpage(parent->pages[0], 0);\n\t\tgist_indexsortbuild_levelstate_add(state, parent, union_tuple);\ngistInitBuffering(GISTBuildState *buildstate)\n\tfor (;;)", "partial_line": "(1 - pow(avgIndexTuplesPerPage", "completion": "(1 - pow(avgIndexTuplesPerPage, (double) (levelStep + 1))) / <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"catalog/pg_amop.h\"\n\t\t\t\t\t errmsg(\"operator family \\\"%s\\\" of access method %s contains support function %s with different left and right input types\",", "partial_line": "opfamilyname", "completion": "opfamilyname, \"gist\", <|endoftext|>"}
{"context": "\t\tconn->result = PQmakeEmptyPGresult(conn, PGRES_PIPELINE_ABORTED);\n\t\tif (!conn->result)\n\t\tconn->asyncStatus = PGASYNC_BUSY;\n\t}\nPQpipelineSync(PGconn *conn)", "partial_line": "PQsendPip", "completion": "PQsendPipelineSync(PGconn *conn) <|endoftext|>"}
{"context": "\t\t\ttbm->dsapagetable = dsa_allocate(tbm->dsa, sizeof(PTEntryArray) +\n\t\t\t\t\t  tbm_shared_comparator, ptbase->ptentry);\nint\n\t\t{\n\t\t\t\t}", "partial_line": "*schunk", "completion": "*schunkbitp = schunkbit; <|endoftext|>"}
{"context": "#include \"access/heaptoast.h\"\n#include \"access/twophase.h\"\n#include \"access/xlogarchive.h\"\n#include \"postmaster/walsummarizer.h\"\n#include \"replication/snapbuild.h\"", "partial_line": "#include \"replica", "completion": "#include \"replication/walsender.h\" <|endoftext|>"}
{"context": "\t\t}\n\t\t\tQuery\t   *rule_action = lfirst(r);\nQuery *\n\t\t}\n\t\t\t\treturn true;", "partial_line": "if (trigDesc && trigDesc-", "completion": "if (trigDesc && trigDesc->trig_update_instead_row) <|endoftext|>"}
{"context": "                goto lab5;\n                z->c++;\n    {   int c5 = z->c;\n            if (ret < 0) goto lab7;\n        switch (among_var) {", "partial_line": "if (ret < 0)", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "static const symbol s_41_13[4] = { 0xCF, 0x83, 0xCE, 0xB8 };\nstatic const symbol s_41_20[6] = { 0xCE, 0xB5, 0xCE, 0xBA, 0xCE, 0xB8 };\nstatic const symbol s_41_28[6] = { 0xCE, 0xB1, 0xCE, 0xB9, 0xCE, 0xBD };\nstatic const symbol s_41_29[6] = { 0xCF, 0x80, 0xCE, 0xBF, 0xCE, 0xBD };\n{", "partial_line": "{ 8, s_41_25", "completion": "{ 8, s_41_25, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tUnlockReleaseBuffer(lbuffer);\n\telse\n\treturn result;\nstatic void\n\t\t\t   GinStatsData *buildStats)", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\thashtable->nbuckets = nbuckets;\n\thashtable->skewEnabled = false;\n\thashtable->nSkewBuckets = 0;\n\thashtable->skewBucketNums = NULL;\n\thashtable->nbatch_original = nbatch;", "partial_line": "hashtabl", "completion": "hashtable->totalTuples = 0; <|endoftext|>"}
{"context": "}\n\t\tentries = (Datum *) palloc(sizeof(Datum) * vector->size);\n\t\t\ttxt = cstring_to_text_with_len(STRPTR(vector) + we->pos, we->len);\n\t}\n\tPG_RETURN_POINTER(entries);", "partial_line": "gin_extract_tsquery(PG_FU", "completion": "gin_extract_tsquery(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t\tdatum = heap_getattr(oldtup, Anum_name,\n\t\t\t\t\tobjname = NameStr(*DatumGetName(datum));\n\t\t\t\t\t\t\t   objname);\n\t\t\t}\n\t\t\t{", "partial_line": "ACL", "completion": "ACL_CREATE); <|endoftext|>"}
{"context": "\t\tcase ACL_TARGET_OBJECT:\n\t\t\tbreak;\n\t\t\telog(ERROR, \"unrecognized GrantStmt.targtype: %d\",\n\t\t\t\t (int) stmt->targtype);\n\t\t\terrormsg = gettext_noop(\"invalid privilege type %s for relation\");", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tCash\t\tm4;\n\tCash\t\tm6;\n\tinitStringInfo(&buf);\n\t{\n\t\tappendStringInfoString(&buf, \"minus \");", "partial_line": "m0 = val % INT64CO", "completion": "m0 = val % INT64CONST(100); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tEEO_JUMP(op->d.jump.jumpdone);\n\t\t}\n\t\t\tif (*op->resnull || !DatumGetBool(*op->resvalue))\n\t\t\t\tEEO_JUMP(op->d.jump.jumpdone);", "partial_line": "EEO_CASE(EEO", "completion": "EEO_CASE(EEOP_NULLTEST_ISNULL) <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\tresult = 0.0;\t\n\t\t\t\t\tresult = 1.0;\n\tfloat8\t\targ1 = PG_GETARG_FLOAT8(0);\n\t\tresult = (arg1 > 0.0) ? arg1 : 0;", "partial_line": "res", "completion": "result = exp(arg1); <|endoftext|>"}
{"context": "\t\t\t\t \"cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas(true), n.nspname)) as o(n) \"\n\t\t\t\t \"left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) \"\n{\n\tchar\t   *sql,\n\twhile ((p = strchr(p, ':')) != NULL)", "partial_line": "char\t\tva", "completion": "char\t\tvar[13]; <|endoftext|>"}
{"context": "static void DecodeUpdate(LogicalDecodingContext *ctx, XLogRecordBuffer *buf);\n\t\t\t\t\t\t\t  RepOriginId origin_id);\n{\n\t{\nvoid", "partial_line": "case XLO", "completion": "case XLOG_SWITCH: <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\tif (*publish_via_partition_root_given)\n}\n\t\tpubobj = (PublicationObjSpec *) lfirst(cell);\n\t\t\t\t\t\t   context->bms_replident))", "partial_line": "Oid\t\t\tpublish_a", "completion": "Oid\t\t\tpublish_as_relid = RelationGetRelid(relation); <|endoftext|>"}
{"context": "\t\t\t\tENGINE_free(conn->engine);\n\t\t\t\t\t\t\t\t\t\tengine_colon, engine_str, err);\n\t\t\tfree(engine_str);\n\t\t\tfnbuf[0] = '\\0';\t\n\t\t}", "partial_line": "if (!S_", "completion": "if (!S_ISREG(buf.st_mode)) <|endoftext|>"}
{"context": "\t\trelation->rd_fdwroutine = cfdwroutine;\nbool\n{\n\t\tcase FDW_IMPORT_SCHEMA_EXCEPT:\n\t\t\t{", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "\t\t0xD915C5D1, 0x7C5457AF, 0x967A97DC, 0x333B05A2,\n\t\t0x8F96C396, 0x2AD751E8, 0xC0F9919B, 0x65B803E5,\n\t\t0x80AEE112, 0x25EF736C, 0xCFC1B31F, 0x6A802161,\n\t\t0xF00C9C98, 0x554D0EE6, 0xBF63CE95, 0x1A225CEB,\n\t\t0xB3764986, 0x1637DBF8, 0xFC191B8B, 0x595889F5,", "partial_line": "0x3CE08A10, 0x99A1186E,", "completion": "0x3CE08A10, 0x99A1186E, 0x738FD81D, 0xD6CE4A63, <|endoftext|>"}
{"context": "\tm = PyModule_Create(&PLy_module);\n\treturn m;\n{\n\tPLy_result_init_type();\n\tif (excmod == NULL)", "partial_line": "\"SPIError\",", "completion": "\"SPIError\", plpy); <|endoftext|>"}
{"context": "\tpathnode->path.parallel_aware = false;\n\tpathnode->path.parallel_safe = rel->consider_parallel &&\n\tpathnode->transitionSpace = aggcosts ? aggcosts->transitionSpace : 0;\n\tpathnode->groupClause = groupClause;\n\tpathnode->qual = qual;", "partial_line": "aggstrategy,", "completion": "aggstrategy, aggcosts, <|endoftext|>"}
{"context": "\tif (index->tree_height < 0) \n\t}\n\t*indexPages = costs.numIndexPages;\n\tIndexOptInfo *index = path->indexinfo;\n}", "partial_line": "int32\t\tn", "completion": "int32\t\tnentries = 0; <|endoftext|>"}
{"context": "\t\tReconnectToServer(AH, dbname);\n\tfree(AH->currUser);\n\tAH->currSchema = NULL;\n\tif (!user)\n\t_doSetSessionAuth(AH, user);", "partial_line": "_selectOutputSchema(ArchiveHandle *AH", "completion": "_selectOutputSchema(ArchiveHandle *AH, const char *schemaName) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t| PROC_IN_SAFE_IC,\n\t\t\t\t\tcontinue;\t\n\t\t\t\t\t\tbreak;\n\t\t\tbool check_rights,\n\tOid\t\t\ttablespaceId;", "partial_line": "Form_", "completion": "Form_pg_am\taccessMethodForm; <|endoftext|>"}
{"context": "\t{\n{\n\t{\n\t\t\tint\t\t\tj;\n#ifdef SHA2_UNROLL_TRANSFORM", "partial_line": "(d) +", "completion": "(d) += T1;\t\t\t\t\t\t\t\t\\ <|endoftext|>"}
{"context": "\t}\n\tif (!isInternal)\n\t\t\t\t\tObjectIdGetDatum(RelationGetRelid(rel)));\n\tif (!trigger_exists)\n\t{", "partial_line": "CONSTRAIN", "completion": "CONSTRAINT_TRIGGER, <|endoftext|>"}
{"context": "        }\n    }\n    if (z->c <= z->lb || z->p[z->c - 1] >> 5 != 6 || !((51443235 >> (z->p[z->c - 1] & 0x1f)) & 1)) return 0;\n    if (!among_var) return 0;\n                z->c = z->l - m1;", "partial_line": "z", "completion": "z->c--; <|endoftext|>"}
{"context": "\terrno = 0;\n\t\t{\n\t\t\t\t\tereport(COMMERROR,\n\t\t\t\telse\n\t\t\t\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),", "partial_line": "case SSL_R_BAD_PROTOCOL", "completion": "case SSL_R_BAD_PROTOCOL_VERSION_NUMBER: <|endoftext|>"}
{"context": "\tmsg.sm.backend_lo = rlocator.backend & 0xffff;\nCacheInvalidateRelmap(Oid databaseId)\n\tmsg.rm.dbId = databaseId;\n\t{\n\t}", "partial_line": "syscache_callback_", "completion": "syscache_callback_list[syscache_callback_count].id = cacheid; <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t   bool escape_period)\n\tinitStringInfo(&buf);\n\t\t}\n\treturn buf.data;", "partial_line": "#", "completion": "#else <|endoftext|>"}
{"context": "static void\n\t\tRelOptInfo *other_rel = (RelOptInfo *) lfirst(l);\n\t\t\t(void) make_join_rel(root, old_rel, other_rel);\n\t\t}\n{", "partial_line": "if (bms_is_subset(sjinfo->mi", "completion": "if (bms_is_subset(sjinfo->min_lefthand, rel1->relids) && <|endoftext|>"}
{"context": "{ 5, s_3_70, 66, 1, 0},\n{ 5, s_3_75, 72, 1, 0},\n{ 4, s_3_83, 76, 1, 0},\n{ 4, s_3_85, 76, 1, 0},\n{ 3, s_3_102, 100, 1, 0},", "partial_line": "{ 6, s_3_1", "completion": "{ 6, s_3_108, 100, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tiDatum = slot_getattr(slot, keycol, &isNull);\nindex_update_stats(Relation rel,\n\tvoid\t   *state;\n\tupdate_stats = reltuples >= 0 && !IsBinaryUpgrade;\n\t{", "partial_line": "visibilitymap_count(rel, &relallvisible", "completion": "visibilitymap_count(rel, &relallvisible, &relallfrozen); <|endoftext|>"}
{"context": "\tif (trace_sort)\n\t\t\t workMem, sortopt & TUPLESORT_RANDOMACCESS ? 't' : 'f');\n\t\t\t\t\t\t\t\tfalse,\t\n\t\t\t\t\t\t\t\tsortopt & TUPLESORT_RANDOMACCESS,\n\tbase->writetup = writetup_datum;", "partial_line": "base->haveDa", "completion": "base->haveDatum1 = true; <|endoftext|>"}
{"context": "\t\t\tbreak;\t\t\t\t\n\t\telse if (c == quote && src[1] == quote)\n\t}\n\t*dst++ = quote;\n\t\t{", "partial_line": "need_quotes =", "completion": "need_quotes = true; <|endoftext|>"}
{"context": "{ 4, s_6_18, 11, -1, r_VI},\n{ 4, s_6_28, 26, -1, 0},\nstatic const symbol s_7_7[3] = { 'm', 'p', 'i' };\nstatic const symbol s_7_11[5] = { 'i', 'm', 'm', 0xC3, 0xA4 };\n{ 3, s_7_7, -1, 1, 0},", "partial_line": "{ 5, s_7_", "completion": "{ 5, s_7_13, 12, -1, 0} <|endoftext|>"}
{"context": "\tint64\t\tfirstZeroPage;\n\ttargetPage = SerialPage(xid);\n\tlock = SimpleLruGetBankLock(SerialSlruCtl, targetPage);\n\tif (!TransactionIdIsValid(tailXid) || TransactionIdPrecedes(xid, tailXid))\n\t{", "partial_line": "firstZeroPage = Seria", "completion": "firstZeroPage = SerialPage(tailXid); <|endoftext|>"}
{"context": "\t\t\tif (page->header.full_offsets[i] == off)\n\telse\n\t\t\treturn false;\n{\nTidStoreIterResult *", "partial_line": "iter->output", "completion": "iter->output.blkno = key; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tchar\t\tendfname[MAXFNAMELEN];\n\t\tforeach(lc, walFileList)\n\t\t\tif (fstat(fd, &statbuf) != 0)\n\t\t\tif (statbuf.st_size != wal_segment_size)", "partial_line": "errmsg(\"une", "completion": "errmsg(\"unexpected WAL file size \\\"%s\\\"\", walFileName))); <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(result);\n{\n\tPG_FREE_IF_COPY(num1, 0);\n\tPG_FREE_IF_COPY(num2, 1);\nDatum", "partial_line": "Numeric\t\tnum2", "completion": "Numeric\t\tnum2 = PG_GETARG_NUMERIC(1); <|endoftext|>"}
{"context": "{\n\tAssert(!LWLockHeldByMe(partitionLock));\n\tdeadlock_state = DS_NOT_YET_CHECKED;\n\t{\n\t{", "partial_line": "(standbyWaitStart != 0 && !logg", "completion": "(standbyWaitStart != 0 && !logged_recovery_conflict); <|endoftext|>"}
{"context": "\t\t\tcase DTK_SPECIAL:\n\t\t\t\t\t\t\t\ttmask = DTK_DATE_M;\n\t\t\t\t\t\t\t\tGetCurrentDateTime(tm);\n\t\t\t\t\t\t\t\tj2date(date2j(tm->tm_year, tm->tm_mon, tm->tm_mday) - 1,\n\t\t\t\t\t\t\t\ttmask = DTK_DATE_M;", "partial_line": "!(fmask & DTK_M(DAY)) &&", "completion": "!(fmask & DTK_M(DAY)) && tm->tm_mon >= 1 && tm->tm_mon <= 31) <|endoftext|>"}
{"context": "}\ntypedef struct mxtruncinfo\n\t\tctl->PagePrecedes(segpage, trunc->earliestExistingPage))\n\tint64\t\tendsegment = MXOffsetToMemberSegment(newOldestOffset);\n\twhile (segment != endsegment)", "partial_line": "SlruDeleteSegment(Multi", "completion": "SlruDeleteSegment(MultiXactMemberCtl, segment); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  CStringGetDatum(stmt->pubname));\n\tif (!HeapTupleIsValid(tup))\n\t\t\t\t\t\tstmt->pubname)));\n\t\tAlterPublicationOptions(pstate, stmt, rel, tup);\n\t\t\t\t\terrcode(ERRCODE_UNDEFINED_OBJECT),", "partial_line": "AlterPublicationSchemas(stmt, tup,", "completion": "AlterPublicationSchemas(stmt, tup, schemaidlist); <|endoftext|>"}
{"context": "\t\tif (!rightcolinfo->is_new_col[jc])\n\t\t\ti++;\n\t\telse\n\t\t\t\t\tchanged_any = true;\n\t\tcolinfo->printaliases = changed_any;", "partial_line": "ListCell", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "#include \"access/xact.h\"\n#include \"funcapi.h\"\n#include \"miscadmin.h\"\n#include \"storage/proc.h\"\n#define MULTIXACT_OFFSETS_PER_PAGE (BLCKSZ / sizeof(MultiXactOffset))", "partial_line": "return multi % MULTIXACT_", "completion": "return multi % MULTIXACT_OFFSETS_PER_PAGE; <|endoftext|>"}
{"context": "\t\t\t\t\t\tstr)));\n\tresult->d = d;\nmacaddr_out(PG_FUNCTION_ARGS)\n\taddr->f = pq_getmsgbyte(buf);\n\tpq_sendbyte(&buf, addr->b);", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "{ 12, s_25_34, -1, 5, 0},\n{ 12, s_25_39, 38, 1, 0},\n{ 3, s_25_44, -1, 1, 0},\n{ 9, s_26_5, -1, -1, 0}\nstatic const symbol s_1[] = { 0xE0, 0xAE, 0x92 };", "partial_line": "static const symbol s_4[", "completion": "static const symbol s_4[] = { 0xE0, 0xAE, 0x8E }; <|endoftext|>"}
{"context": "static ResourceOwner SavedResourceOwnerDuringExport = NULL;\nstatic void SnapBuildSerialize(SnapBuild *builder, XLogRecPtr lsn);\n\t\t\t\t\t\t\t\t\tALLOCSET_DEFAULT_SIZES);\n}\n\tMemoryContext context = builder->context;", "partial_line": "Assert(!snap->", "completion": "Assert(!snap->suboverflowed); <|endoftext|>"}
{"context": "\tfield = list_head(tok_line->fields);\n\ttokens = lfirst(field);\n\tIDENT_MULTI_VALUE(tokens);\n\tIDENT_FIELD_ABSENT(field);\n\tparsedline->pg_user = copy_auth_token(token);", "partial_line": "err_msg, e", "completion": "err_msg, elevel)) <|endoftext|>"}
{"context": "\t\t\tgettext_noop(\"GEQO: effort is used to set the default for other GEQO parameters.\"),\n\t\tDEFAULT_GEQO_EFFORT, MIN_GEQO_EFFORT, MAX_GEQO_EFFORT,\n\t\t\tgettext_noop(\"Sets the maximum delay before canceling queries when a hot standby server is processing archived WAL data.\"),\n\t\t\tGUC_UNIT_MS\n\t\t&max_standby_archive_delay,", "partial_line": "{\"recovery_min_apply_delay\", PGC_SIGHUP, R", "completion": "{\"recovery_min_apply_delay\", PGC_SIGHUP, REPLICATION_STANDBY, <|endoftext|>"}
{"context": "\t\t\tif ((ptr = strchr(repl, '/')) != NULL)\n\t\t\tpfree(prepl);\n\t\tpfree(ptype);\n\tbool\t\toldformat = false;\n\t\tereport(ERROR,", "partial_line": "s += p", "completion": "s += pg_mblen(s); <|endoftext|>"}
{"context": "\tint\t\t\tresult;\n\tif (strncmp(nspname, \"pg_temp_\", 8) == 0)\n\t\tresult = atoi(nspname + 8);\nvoid\nvoid", "partial_line": "Assert(myTempToas", "completion": "Assert(myTempToastNamespace == InvalidOid); <|endoftext|>"}
{"context": "\tfor (PgStat_Kind kind = PGSTAT_KIND_MIN; kind <= PGSTAT_KIND_MAX; kind++)\n\t\t\tcontinue;\n{\n\t}\n\t\tvalid = pgStatLocal.snapshot.custom_valid;", "partial_line": "valid[idx] =", "completion": "valid[idx] = false; <|endoftext|>"}
{"context": "static void finalize_grouping_exprs(Node *node, ParseState *pstate, Query *qry,\n\t\t\ttle = makeTargetEntry(arg, attno++, NULL, false);\n\t\tforeach(lc, args)\n\t\t\tTargetEntry *tle;\n\t\tsave_next_resno = pstate->p_next_resno;", "partial_line": "if (!OidI", "completion": "if (!OidIsValid(sortcl->sortop)) <|endoftext|>"}
{"context": "\t{\n\tOid\t\t\topfamily = rel->rd_opfamily[arraysk->sk_attno - 1],\n\t\treturn;\n\tgeop = get_opfamily_member(opfamily, opcintype, opcintype,\n\tMemoryContext oldContext;", "partial_line": "arrayKeyData = (ScanKey) palloc(num", "completion": "arrayKeyData = (ScanKey) palloc(numArrayKeyData * sizeof(ScanKeyData)); <|endoftext|>"}
{"context": "\t    break;\n\t\t\tfill_buffer();\n\t\t\tif (quote == '\"')\n\t\t    case '\\'':\n\t\t\tif (quote == '\\'')", "partial_line": "e", "completion": "else { <|endoftext|>"}
{"context": "transformJsonConstructorOutput(ParseState *pstate, JsonOutput *output,\n\t\t{\nstatic Node *\n\tif (location < 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"JSON_FUNCTION\");", "partial_line": "FuncExpr   *fexpr = ma", "completion": "FuncExpr   *fexpr = makeFuncExpr(F_CONVERT_TO, BYTEAOID, <|endoftext|>"}
{"context": "\t\t0xE20C4116, 0x8A0F6DDE, 0x320A1886, 0x5A09344E,\n\t\t0xF18EB23E, 0x998D9EF6, 0x2188EBAE, 0x498BC766,\n\t\t0x5DAF0E7B, 0x35AC22B3, 0x8DA957EB, 0xE5AA7B23,\n\t\t0x594FB2B1, 0x314C9E79, 0x8949EB21, 0xE14AC7E9,\n\t\t0xA86BEE40, 0xE1579367, 0x3A13140E, 0x732F6929,", "partial_line": "0xEA50EA9A, 0xA36C97BD, 0x782810", "completion": "0xEA50EA9A, 0xA36C97BD, 0x782810D4, 0x31146DF3, <|endoftext|>"}
{"context": "void\n{\nvoid\n\tif (strcmp(path, \"pg_wal\") == 0 && type == FILE_TYPE_SYMLINK)\n\tif (type != FILE_TYPE_REGULAR && isRelDataFile(path))", "partial_line": "pg_fatal(\"dat", "completion": "pg_fatal(\"data file \\\"%s\\\" in source is not a regular file\", path); <|endoftext|>"}
{"context": "\t\tif (nulls[i])\n\t\t\telement_hash = 0;\n\t\t{\n\t\t\tInitFunctionCallInfoData(*locfcinfo, &typentry->hash_proc_finfo, 1,\n\t\t\tlocfcinfo->args[0].isnull = false;", "partial_line": "Assert(!locfc", "completion": "Assert(!locfcinfo->isnull); <|endoftext|>"}
{"context": "\t\tctx->error = PG_HMAC_ERROR_INTERNAL;\npg_hmac_final(pg_hmac_ctx *ctx, uint8 *dest, size_t len)\n\t\tFREE(h);\n\t{\n\tFREE(h);", "partial_line": "FREE(c", "completion": "FREE(ctx); <|endoftext|>"}
{"context": "\t\t\t\t\t\t   itlist,\n\t\t\t\t\t\t   NRM_EQUAL,\n\t\t\t\t\t\t   itlist,\n\t\t\t\t\t\t  rtoffset, NUM_EXEC_TLIST((Plan *) cscan));\n\t\tlfirst(lc) = set_plan_refs(root, (Plan *) lfirst(lc), rtoffset);", "partial_line": "foreach(l2, prun", "completion": "foreach(l2, prune_infos) <|endoftext|>"}
{"context": "\tbytea\t   *ret;\n}\n\tret = dotrim(VARDATA_ANY(string), VARSIZE_ANY_EXHDR(string),\n\tPG_RETURN_TEXT_P(ret);\n{", "partial_line": "PG_RET", "completion": "PG_RETURN_TEXT_P(ret); <|endoftext|>"}
{"context": "\t\t\t\tBTEqualStrategyNumber, F_INT4EQ,\n\t{\n\t\tAssert(tab->rewrite == 0);\n\t\tif (!missingNull)\n\t\t\tbool\t\treplacesAtt[Natts_pg_attribute] = {0};", "partial_line": "missingval", "completion": "missingval = PointerGetDatum(construct_array(&missingval, <|endoftext|>"}
{"context": "\t{\n\t\treturn false;\n\tListCell   *lc;\n\taggno = -1;\n\t\texistingRef = linitial_node(Aggref, agginfo->aggrefs);", "partial_line": "!equal(newagg->a", "completion": "!equal(newagg->aggdistinct, existingRef->aggdistinct) || <|endoftext|>"}
{"context": "\t\t\t\t\t\t{\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tif (found)\n\t\t\t\t\t{", "partial_line": "key.obji", "completion": "key.objid, t); <|endoftext|>"}
{"context": "        case 6:\n    return 1;\n            }\n            break;\n                z->bra = z->c;", "partial_line": "if (", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\t\t (list_length(stmt_list) == 1 &&\n\t\t\t\tif (pushed_active_snap)\n\t\t\t\tpushed_active_snap = true;\n\t\t\t\t\t\tmy_res = SPI_ERROR_COPY;\n\t\t\t\t\t\tgoto fail;", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tList **inner_parts);\n\t\t\t\t\t\t\t\t\t\t\t List **inner_parts);\n\t\t\t\t\t\t\t\t\t  PartitionMap *inner_map,\n\t\t\t\t\t\t\t\t  int *null_index);\n\t\t\t\t\t\t\t\t\t\t List **outer_parts,", "partial_line": "Oid *pa", "completion": "Oid *partcollations, JoinType jointype, <|endoftext|>"}
{"context": "\t\taclcheck_error(aclresult, OBJECT_FUNCTION,\n\t\tOperatorCreate(oprName, \n\t\t\t\t\t   functionOid, \n\ttypeId[0] = INTERNALOID;\t\n{", "partial_line": "typeI", "completion": "typeId[1] = OIDOID; <|endoftext|>"}
{"context": "\t\t\t\tExprEvalPushStep(state, &scratch);\n\t\t\t\t\t(Datum *) palloc(sizeof(Datum) * nelems);\n\t\t\t\tscratch.d.arrayexpr.elemtype = arrayexpr->element_typeid;\n\t\t\t}\n\t\t\t{", "partial_line": "(Datum *) pa", "completion": "(Datum *) palloc(sizeof(Datum) * nelems); <|endoftext|>"}
{"context": "#include \"compress_lz4.h\"\ntypedef struct LZ4State", "partial_line": "size_t", "completion": "size_t\t\tbuflen; <|endoftext|>"}
{"context": "\tphinfo->ph_var->phnullingrels = NULL;\n\t\t\t\tpalloc0_array(PlaceHolderInfo *, new_size);\n\t}\nfind_placeholders_in_jointree(PlannerInfo *root)\n\t}", "partial_line": "else if (", "completion": "else if (IsA(jtnode, JoinExpr)) <|endoftext|>"}
{"context": "\t\t}\n\tcommitTsShared->dataLastCommit.nodeid = nodeid;\n\tLWLockAcquire(lock, LW_EXCLUSIVE);\n\tslotno = SimpleLruReadPage(CommitTsCtl, pageno, true, xid);\nstatic void", "partial_line": "entry.nodei", "completion": "entry.nodeid = nodeid; <|endoftext|>"}
{"context": "#line 89 \"bytea.pgc\"\n\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_execute, \"sel_stmt\", ECPGt_EOIT, \n\tECPGt_bytea,&(recv_short_buf),(long)DATA_SIZE - LACK_SIZE,(long)1,sizeof(struct bytea_4), \n\tECPGt_int,&(ind[1]),(long)1,(long)1,sizeof(int), ECPGt_EORT);\n\tdump_binary(recv_short_buf.arr, recv_short_buf.len, ind[1]);", "partial_line": "#lin", "completion": "#line 105 \"bytea.pgc\" <|endoftext|>"}
{"context": "\ttail = pArray->tailKnownAssignedXids;\n\t{\n\t\tmid_xid = KnownAssignedXids[mid_index];\n\t\t\tresult_index = mid_index;\n\t\t\tfirst = mid_index + 1;", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t\tif (op_volatile(opno) != PROVOLATILE_IMMUTABLE)\n\t\t{\n\t\telse\n\t\t\t\tcase PARTITION_STRATEGY_RANGE:\n\t\t{", "partial_line": "partclause->o", "completion": "partclause->opno = negator; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t{\n\t\t\t\tctx->error = PG_CRYPTOHASH_ERROR_DEST_LEN;\n\t\t\t\tctx->error = PG_CRYPTOHASH_ERROR_DEST_LEN;\n\tif (ctx == NULL)", "partial_line": "As", "completion": "Assert(false); <|endoftext|>"}
{"context": "\tfor (i = 0; i < nitems; i++)\n\trelation_close(target_table, NoLock);\n}\n\tRelation\tpg_policy_rel;\n\tRelation\ttarget_table;", "partial_line": "Objec", "completion": "ObjectIdGetDatum(table_id)); <|endoftext|>"}
{"context": "\t\treturn range_typeid;\n\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\tif (!OidIsValid(anycompatible_range_typeid))\n\t\t\tereport(ERROR,\n\tif (rettype == ANYCOMPATIBLEMULTIRANGEOID)", "partial_line": "(errcod", "completion": "(errcode(ERRCODE_DATATYPE_MISMATCH), <|endoftext|>"}
{"context": "\tprintf(_(\"Options:\\n\"));\n\tprintf(_(\"  -o OUTFILE     write result to OUTFILE\\n\"));\n\tnew->next = NULL;\n\tif (ip == NULL)\n\telse", "partial_line": "char\t   *define_", "completion": "char\t   *define_copy = mm_strdup(define); <|endoftext|>"}
{"context": "\tforeach(lc, toRemove->reltarget->exprs)\n\t\tif (!list_member(toKeep->reltarget->exprs, node))\n\t\ttoRemove->attr_needed[attno] = adjust_relid_set(toRemove->attr_needed[attno],\n\t{\n\t\telse", "partial_line": "Assert(rma", "completion": "Assert(rmark->rti == rmark->prti); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\tAnum_pg_attribute_attrelid,\n\t\tif (SearchSysCacheExistsAttName(RelationGetRelid(parent_rel),\n\t\t}\n\t\t\t\t\t\t\t\t   RelationGetDescr(parent_rel),", "partial_line": "Anum_", "completion": "Anum_pg_constraint_conrelid, <|endoftext|>"}
{"context": "\tif (prs->curwords >= prs->lenwords)\n\t\tprs->lenwords *= 2;\n\tint\t\t\ti;\n\tQueryItem  *item = GETQUERY(query);\n\t}", "partial_line": "hladdword(prs, lexs->lemm, lexs-", "completion": "hladdword(prs, lexs->lemm, lexs->lenlemm, lexs->type); <|endoftext|>"}
{"context": "\tint\t\t\tlen;\n\t\t\t\tlenb;\n\taddrb = (unsigned char *) palloc(ip_addrsize(ipb));\n\t\tint\t\t\tnbits;\n\t\tnbits = Max(0, lena - (i * 8));", "partial_line": "if (nbi", "completion": "if (nbits < 8) <|endoftext|>"}
{"context": "ri_FetchConstraintInfo(Trigger *trigger, Relation trig_rel, bool rel_is_pk)\n\tif (rel_is_pk)\n\t\t\telog(ERROR, \"wrong pg_constraint entry for trigger \\\"%s\\\" on table \\\"%s\\\"\",\n\telse\n\tconForm = (Form_pg_constraint) GETSTRUCT(tup);", "partial_line": "ObjectIdG", "completion": "ObjectIdGetDatum(riinfo->constraint_root_id)); <|endoftext|>"}
{"context": "\treturn hashValue;\n}\nstatic uint32\n{\n\tint\t\t   *cc_keyno = cache->cc_keyno;", "partial_line": "cc_tup", "completion": "cc_tupdesc, <|endoftext|>"}
{"context": "\t\tif (funcobj->dump)\n\t\t\ttypeInfo->shellType->dobj.dump = funcobj->dump |\n}\n\tremoveObjectDependency(ruleobj, viewobj->dumpId);\nstatic void", "partial_line": "DumpableO", "completion": "DumpableObject *ruleobj) <|endoftext|>"}
{"context": "\tTimestampTz ts;\n\tPgStat_Counter elapsedtime;\n\ttabentry->dead_tuples = deadtuples;\n\t{\n\t}", "partial_line": "pgstat", "completion": "pgstat_unlock_entry(entry_ref); <|endoftext|>"}
{"context": "\t\tdescr[i - 1].alias = pstrdup(tok_alias[i]);\n\t\tdescr[i - 1].descr = pstrdup(lex_descr[i]);\nprsd_start(PG_FUNCTION_ARGS)\n\tPG_RETURN_POINTER(TParserInit((char *) PG_GETARG_POINTER(0), PG_GETARG_INT32(1)));\n\tchar\t  **t = (char **) PG_GETARG_POINTER(1);", "partial_line": "PG_RETU", "completion": "PG_RETURN_INT32(0); <|endoftext|>"}
{"context": "\tpq_sendint16(&buf, natts);\n\t\tpq_sendint16(&buf, format); \n\tpq_endmessage(&buf);\n\tcstate->fe_msgbuf = makeStringInfo();\n\t\tereport(ERROR,", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\tstr = &msg->data[msg->cursor];\n\t\t*nbytes = strlen(p);\n\t\tp = (char *) palloc(rawbytes + 1);\n\t\tmemcpy(p, str, rawbytes);", "partial_line": "con", "completion": "const char * <|endoftext|>"}
{"context": "\t\tvalue = 0;\n\tresult = (ArrayType *) palloc0(nbytes);\n\treturn result;\narray_fill_internal(ArrayType *dims, ArrayType *lbs,\n\t\t\t\t\tFunctionCallInfo fcinfo)", "partial_line": "if (ARR_NDIM(dim", "completion": "if (ARR_NDIM(dims) > 1) <|endoftext|>"}
{"context": "\tBitmapset  *chgparam = node->ss.ps.chgParam;\n\t{\n{\n\tMemoryContextSwitchTo(tstate->perTableCxt);\n\t\t\t\t\t\t\ttstate->ss.ss_ScanTupleSlot->tts_tupleDescriptor->natts);", "partial_line": "tfuncInitialize(tstate, econ", "completion": "tfuncInitialize(tstate, econtext, value); <|endoftext|>"}
{"context": "\t\t\t\t   false,\t\t\n\t\t\t\t   false,\t\t\n\t\t\t   -1,\t\t\t\t\n\t\t\t   TYPCATEGORY_ARRAY,\t\n\t\t\t   F_ARRAY_OUT,\t\t", "partial_line": "enum", "completion": "enumTypeAddr.objectId, <|endoftext|>"}
{"context": "\t\t\t\t\t*p = pg_toupper((unsigned char) *p);\n\t\t\t\telse\n\t\t\t\t\t*p = toupper_l((unsigned char) *p, loc);\n}\n\tint\t\t\twasalnum = false;", "partial_line": "errmsg(\"out of mem", "completion": "errmsg(\"out of memory\"))); <|endoftext|>"}
{"context": "\treturn modified;\n\t\t\tnext_node = NULL;\n\t\t\t\tif (nextseg->items == NULL)\n\t\t\t\tnextseg->seg = NULL;\n\t\t\t\t{", "partial_line": "seginfo->action = GIN_SEG", "completion": "seginfo->action = GIN_SEGMENT_DELETE; <|endoftext|>"}
{"context": "\t\tcase DO_CONVERSION:\n\t\t\tdumpTable(fout, (const TableInfo *) dobj);\n\t\t\tbreak;\n\t\t\tdumpIndexAttach(fout, (const IndexAttachInfo *) dobj);\n\t\t\tbreak;", "partial_line": "dumpProcL", "completion": "dumpProcLang(fout, (const ProcLangInfo *) dobj); <|endoftext|>"}
{"context": "\t\tGinBufferStoreTuple(buffer, tup);\n\t\tntup = _gin_build_tuple(buffer->attnum, buffer->category,\n}\n_gin_parallel_scan_and_build(GinBuildState *state,\n\t\t\t\t\t\t\t Relation heap, Relation index,", "partial_line": "double\t\tre", "completion": "double\t\treltuples; <|endoftext|>"}
{"context": "Datum\n\ttext\t   *priv_type_text = PG_GETARG_TEXT_PP(2);\nDatum\n\t\tPG_RETURN_NULL();\n\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),", "partial_line": "text\t   *sequencename = PG_GETA", "completion": "text\t   *sequencename = PG_GETARG_TEXT_PP(1); <|endoftext|>"}
{"context": "\t\t\t\t\t\tLLVMBuildSelect(b,\n\t\t\t\t{\n\t\t\t\t\tv_resvalue =\n\t\t\t\t\t\tLLVMBuildSelect(b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  l_sbool_const(1), \"\"),", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "{\n\t\t   stmt->command\nstore_input_from_desc(struct statement *stmt, struct descriptor_item *desc_item,\n\t\t\t\t\t  char **tobeinserted)\n\tstruct variable var;", "partial_line": "if (!(*tobeinserted = ecpg_alloc(d", "completion": "if (!(*tobeinserted = ecpg_alloc(desc_item->data_len, stmt->lineno))) <|endoftext|>"}
{"context": "{\n\tAssert(map->merged_indexes[index] == -1);\n\treturn merged_index;\nfix_merged_indexes(PartitionMap *outer_map, PartitionMap *inner_map,\n\tint\t\t\tmerged_index;", "partial_line": "ListCell", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\t\tdata += strlen(data) + 1;\n}\n{\n\tparsed->twophase_xid = xlrec->xid;\n\tparsed->nrels = xlrec->ncommitrels;", "partial_line": "bufptr += MAXALIGN(xlrec->nsubxacts", "completion": "bufptr += MAXALIGN(xlrec->nsubxacts * sizeof(TransactionId)); <|endoftext|>"}
{"context": "\tvolatile MemoryContext plan_cxt = NULL;\n\t\t\t(void) parseTypeString(Tcl_GetString(argsObj[i]),\n\t}\n{\n\tTcl_Size\tcallObjc;", "partial_line": "MemoryContext oldcontext", "completion": "MemoryContext oldcontext = CurrentMemoryContext; <|endoftext|>"}
{"context": "\t{\n\t\taccum_sum_copy(&state1->sumX2, &state2->sumX2);\n\t\tstate1->N += state2->N;\n\t\tstate1->sumX2 += state2->sumX2;\n#ifdef HAVE_INT128", "partial_line": "accum_sum_fi", "completion": "accum_sum_final(&state->sumX, &tmp_var); <|endoftext|>"}
{"context": "#ifndef WIN32\n\t\t\tif (waitpid(postmaster_pid, NULL, WNOHANG) == postmaster_pid)\n#else\n\t\t\t\t\t outputdir);\n#ifndef WIN32", "partial_line": "note(\"using tem", "completion": "note(\"using temp instance on port %d with PID %lu\", <|endoftext|>"}
{"context": "\t\tindexorderbys = (List *)\n\t\t\t\t\t\t\t\t\t\t\t\t\t exprtype,\n\t\tforeach(l, indexinfo->indextlist)\n\t\t}\n\tif (indexonly)", "partial_line": "best_pa", "completion": "best_path->indexscandir); <|endoftext|>"}
{"context": "\t\t\t\tif (!OidIsValid(parameterId) && is_grant)\n\t\t\t\t\tparameterId = ParameterAclCreate(parameter);\n\t}\n\treturn objects;\n\t\tOid\t\t\tnamespaceId;", "partial_line": "objs = getRelationsInNamespace(namesp", "completion": "objs = getRelationsInNamespace(namespaceId, RELKIND_RELATION); <|endoftext|>"}
{"context": "\t\tListCell   *l;\n\t\t\t\tSubPlan    *initsubplan = (SubPlan *) lfirst(l);\n\tif (node == NULL)\n\t\tAggref\t   *parent_agg;\n\t\tchild_agg->args = NIL;", "partial_line": "ListCell", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\t\t\t\t\t\t errdetail_internal(\"Reason code: Canceled on conflict out to old pivot %u.\", xid),\n\t\t\t\t\t\t errhint(\"The transaction might succeed if retried.\")));\n\tif (SxactHasSummaryConflictOut(sxact))\n\t\t\t\t\t(errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),\n\t\t\t\t\t errhint(\"The transaction might succeed if retried.\")));", "partial_line": "FlagRWConflict(MySeri", "completion": "FlagRWConflict(MySerializableXact, sxact); <|endoftext|>"}
{"context": "static const symbol s_1_77[6] = { 'u', 'r', 'r', 'e', 'n', 'a' };\nstatic const symbol s_1_81[4] = { 'm', 'i', 'n', 'a' };\nstatic const symbol s_1_94[3] = { 'n', 'o', 'a' };\nstatic const symbol s_1_102[3] = { 't', 'o', 'a' };\nstatic const symbol s_1_113[4] = { 't', 'a', 'r', 'a' };", "partial_line": "static const symbol s_1_117[", "completion": "static const symbol s_1_117[4] = { 'k', 'e', 'r', 'a' }; <|endoftext|>"}
{"context": "Datum\n}\n\tif (!HeapTupleIsValid(tup))\n\t\t\t\t errmsg(\"invalid input value for enum %s: \\\"%s\\\"\",\n\t\t\t\t\t\tformat_type_be(enumtypoid),", "partial_line": "PG_RETURN", "completion": "PG_RETURN_OID(enumoid); <|endoftext|>"}
{"context": "\t\t}\n\t\telse\n}\n\t{\n\tbuffer->used += length;", "partial_line": "BlockRefTableSer", "completion": "BlockRefTableSerializedEntry zentry = {0}; <|endoftext|>"}
{"context": "\tconst char *s;\n\tbool\t\tfx_mode = std;\n\t{\n\t\t\t(n->type == NODE_TYPE_ACTION || n == node))\n\t\t\t\textra_skip++;", "partial_line": "ereturn(esc", "completion": "ereturn(escontext,, <|endoftext|>"}
{"context": "\t\t}\n\t{\nTidRecheck(TidScanState *node, TupleTableSlot *slot)\n}\n\tTidScanState *node = castNode(TidScanState, pstate);", "partial_line": "node->tss_NumTi", "completion": "node->tss_NumTids = 0; <|endoftext|>"}
{"context": "\tTimeTzADT  *time = PG_GETARG_TIMETZADT_P(0);\n\tpq_sendint64(&buf, time->time);\n\tint32\t\ttypmod = PG_GETARG_INT32(1);\n\tresult->zone = time->zone;\n}", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\t\t errdetail(\"Failed while creating memory context \\\"%s\\\".\",\n\tblock->aset = set;\n\tblock->endptr = ((char *) set) + firstBlockSize;\n\tblock->prev = NULL;\n\twhile ((Size) (set->allocChunkLimit + ALLOC_CHUNKHDRSZ) >", "partial_line": "((MemoryCo", "completion": "((MemoryContext) set)->mem_allocated = firstBlockSize; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t&isnull);\n\tCatalogTupleUpdate(rel, &tp->t_self, tp);\n\t\tObjectAddress referenced;\n\t\t{\n\t\t\trecordDependencyOn(&myself, &referenced, DEPENDENCY_NORMAL);", "partial_line": "Objec", "completion": "ObjectAddress <|endoftext|>"}
{"context": "\t\tint\t\t\tpresorted_keys;\n\t\tbool\t\tis_sorted;\n\t\t\t\t\t\t\t\t\t\t\t\tpath->pathkeys,\n\t\t\t\t\t\t\t\t\t\t\t\t&presorted_keys);\n\t\t\t{", "partial_line": "window_path", "completion": "window_pathkeys, <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\t\t\t authmem_form->oid, 0);\n\t\t\tHeapTuple\ttuple;\n\t\t\tDatum\t\tnew_record[Natts_pg_auth_members] = {0};\n\t\t\t{", "partial_line": "new_record[Anum_pg_auth_me", "completion": "new_record[Anum_pg_auth_members_inherit_option - 1] = <|endoftext|>"}
{"context": "\t\t\t\t stmt->action != 0)\n\t\t{\n\t\t\t\t\t errdetail(\"Only roles with the %s attribute and the %s option on role \\\"%s\\\" may alter this role.\",\n\t\t\t\t\t errmsg(\"permission denied to alter role\"),\n\t{", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\ts = att_addlength_pointer(s, typlen, s);\n\t\t\tif (DatumGetBool(thisresult))\n\t\t\t\tresult = BoolGetDatum(true);\n\t\t\t\tbreak;\t\t\t\n\t\t\tif (!DatumGetBool(thisresult))", "partial_line": "if (bit", "completion": "if (bitmap) <|endoftext|>"}
{"context": "\t\t\tchar\t\targmode = argmodes ? argmodes[i] : PROARGMODE_IN;\n\t\t\t\t\targtypes[i] = resolvedtype;\n\t\t\tinargno++;\n\t\tfor (i = 0; i < numargs; i++)\n\t\t\t\tcase ANYCOMPATIBLEOID:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "static bool\n\t}\nchoose_best_statistics(List *stats, char requiredkind, bool inh,\n\t\t\t\tcontinue;\n\t\t\t\tcontinue;", "partial_line": "bms_free(matched_a", "completion": "bms_free(matched_attnums); <|endoftext|>"}
{"context": "{ 5, s_5_40, -1, 1, 0},\n{ 4, s_5_41, -1, 1, 0},\nstatic const symbol s_6_0[3] = { 'a', 'd', 'a' };\nstatic const symbol s_6_17[4] = { 'a', 'r', 'e', 'i' };\nstatic const symbol s_6_23[5] = { 'e', 'r', 'i', 'a', 'm' };", "partial_line": "static const symbol s_6_27[", "completion": "static const symbol s_6_27[4] = { 'i', 'r', 'a', 'm' }; <|endoftext|>"}
{"context": "\t}\n\telse\n\t\t  bool isshared,\n\tint\t\t\ti;\n\tbool\t\thas_not_null;", "partial_line": "relation->rd_", "completion": "relation->rd_att->tdrefcount = 1; <|endoftext|>"}
{"context": "}\n\t\tatexit_callback_setup = true;\n\t++on_shmem_exit_index;\n\t{\nvoid", "partial_line": "== functi", "completion": "== function && <|endoftext|>"}
{"context": "\t\t\tdeadoffsets[lpdead_items++] = offnum;\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t buf))\n\t\t\tcase HEAPTUPLE_DEAD:", "partial_line": "case HEAPTUPL", "completion": "case HEAPTUPLE_INSERT_IN_PROGRESS: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   CMD_UPDATE, event);\n\t\tcase TRIGGER_EVENT_TRUNCATE:\n\t\t\tAssert(newslot == NULL);\n\t\tif (row_trigger && event == TRIGGER_EVENT_UPDATE)\n\t\t{", "partial_line": "root", "completion": "rootslot); <|endoftext|>"}
{"context": "\t.catname = \"pg_catalog.pg_type t\",\nstatic const SchemaQuery Query_for_list_of_enum_values_quoted = {\n\t.catname = \"pg_catalog.pg_enum e, pg_catalog.pg_type t\",\n\t.selcondition = \"t.oid = e.enumtypid\",\n\t.refnamespace = \"t.typnamespace\",", "partial_line": "static const", "completion": "static const SchemaQuery Query_for_list_of_enum_values_unquoted = { <|endoftext|>"}
{"context": "{\nstatic AclMode\n\tHeapTuple\ttuple;\n\tswitch (classid)\n\t\t\t\t\t\t\t\t\t\t\tis_missing);", "partial_line": "Assert(clas", "completion": "Assert(classid != RelationRelationId); <|endoftext|>"}
{"context": "\t\t\telse if (range_typelem != elem_typeid)\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t{\n\t\tif (have_anyenum && elem_typeid != ANYELEMENTOID)", "partial_line": "if (have_poly_anyco", "completion": "if (have_poly_anycompatible) <|endoftext|>"}
{"context": "}\n\tfor (;;)\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t hjstate->hj_HashTupleSlot,\n\t\t\thashTuple = ExecParallelHashNextTuple(hashtable, hashTuple);", "partial_line": "for (tuple = skewBucket", "completion": "for (tuple = skewBucket->tuples; tuple != NULL; tuple = tuple->next.unshared) <|endoftext|>"}
{"context": "\t\t\t\tok = false;\n\treturn ok;\n\t{\n\t\treturn ok;\n\tif (!config)", "partial_line": "LWLockAcquire(ReplicationS", "completion": "LWLockAcquire(ReplicationSlotControlLock, LW_SHARED); <|endoftext|>"}
{"context": "\t\t\tlist = &(stmt->outlist);\n\t\t\tif (!(var = (struct variable *) ecpg_alloc(sizeof(struct variable), lineno)))\n\t\t\t\tecpg_do_epilogue(stmt);\n\t\t\tvar->type = type;\n\t\t\tvar->next = NULL;", "partial_line": "var->ind", "completion": "var->ind_pointer = va_arg(args, char *); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t PointerGetDatum(d->subdict->dictData),\n\t\t\t\t\t\t\t\t\t\t\t\t\t PG_GETARG_DATUM(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t PG_GETARG_DATUM(2),\n\t\t\twhile (ptr->lexeme && nv == ptr->nvariant)\n\t\t\tif (i < nlex)", "partial_line": "info = findVariant(info, st", "completion": "info = findVariant(info, stored, curpos, infos, nlex); <|endoftext|>"}
{"context": "\t\tmap = &active_shared_updates;\n\t\tmap = &shared_map;\n\t\t}\n\t\t{\n\t\t{", "partial_line": "map = &sh", "completion": "map = &shared_map; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t{\n\t\t\tfree(sname);\t\t\n\t\t\tsname = oname;\n\t\t{", "partial_line": "quote_sche", "completion": "quote_schema = identifier_needs_quotes(schemaname); <|endoftext|>"}
{"context": "\taggdeserialfn = aggform->aggdeserialfn;\n\taggtranstype = resolve_aggregate_transtype(aggref->aggfnoid,\n\t\t\t\t\t\t\t\t\t\t\t   inputTypes,\n\t\t\t\t\t\t\t\t\t\t\t   numArguments);\n\t\t\t\t\t\t\t\t  &initValueIsNull);", "partial_line": "initValue = GetAggInitVal(textInitVal", "completion": "initValue = GetAggInitVal(textInitVal, aggtranstype); <|endoftext|>"}
{"context": "\tsetopstate->hashtable = BuildTupleHashTable(&setopstate->ps,\n\t\t\t\t\t\t\t\t\t\t\t\tnode->cmpColIdx,\n\t\t\t\t(pergroup->numLeft < pergroup->numRight) ?\n\t\tcase SETOPCMD_EXCEPT:\n\t\t\t\tsetopstate->numOutput = 1;", "partial_line": "setopstate->num", "completion": "setopstate->numOutput = 0; <|endoftext|>"}
{"context": "static const symbol s_0_31[4] = { 'k', 'e', 'r', 'a' };\nstatic const symbol s_0_32[4] = { 'p', 'e', 'r', 'a' };\nstatic const symbol s_0_33[4] = { 'o', 'r', 'r', 'a' };\nstatic const symbol s_0_34[5] = { 'k', 'o', 'r', 'r', 'a' };\nstatic const symbol s_0_37[4] = { 'k', 'u', 'r', 'a' };", "partial_line": "static const sym", "completion": "static const symbol s_0_40[4] = { 'k', 'e', 't', 'a' }; <|endoftext|>"}
{"context": "\t\tdescentCost = ceil(log(index->tuples) / log(2.0)) * cpu_operator_cost;\n\t*indexSelectivity = costs.indexSelectivity;\nhashcostestimate(PlannerInfo *root, IndexPath *path, double loop_count,\n\t*indexSelectivity = costs.indexSelectivity;\n\t\t\t\t Cost *indexStartupCost, Cost *indexTotalCost,", "partial_line": "if (index->tree_he", "completion": "if (index->tree_height < 0) <|endoftext|>"}
{"context": "\tbool\t\thave_mcvs1 = false;\n\t\t\t\t\t get_attstatsslot(&sslot1, vardata1.statsTuple,\n\t{\n\t\tcase JOIN_INNER:\n\t\t\t\t\t\t\t\t\t   stats1, stats2,", "partial_line": "Oid\t\t\tcommopfuncoid =", "completion": "Oid\t\t\tcommopfuncoid = OidIsValid(commop) ? get_opcode(commop) : InvalidOid; <|endoftext|>"}
{"context": "\t\t\t\t\t   index_getprocinfo(index, i + 1, GIST_CONSISTENT_PROC),\n\t}\n\t\tgiststate->unionFn[i].fn_oid = InvalidOid;\n\t\tgiststate->equalFn[i].fn_oid = InvalidOid;\n\tAssert(GistPageIsLeaf(page));", "partial_line": "STAR", "completion": "START_CRIT_SECTION(); <|endoftext|>"}
{"context": "\t\t}\n\t\tif (e_code != s_code) {\t\n\t\tforce_nl = true;\n\t\tgoto copy_id;\n\t    parse(decl);\t", "partial_line": "dump", "completion": "dump_line(); <|endoftext|>"}
{"context": "\t\t\t\t\t th->targetFile, filename);\n\t\tif (!_tarGetHeader(AH, th))\nstatic int\n\t\tif (len == 0)\t\t\t\n\t\tif (len != TAR_BLOCK_SIZE)", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "{\n\tint\t\t\telement = PG_GETARG_INT32(1);\n\t\t\tPG_RETURN_NULL();\n\t\t\telement += nelements;\n\tif (v != NULL && v->type != jbvNull)", "partial_line": "PG_RETURN_TEXT_P(JsonbValu", "completion": "PG_RETURN_TEXT_P(JsonbValueAsText(v)); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tAssert(aggmtransfnName);\n\t\t\t\t\t errmsg(\"return type of inverse transition function %s is not %s\",\n\t\tif (!HeapTupleIsValid(tup))\n\t\t\t\t\t(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION),", "partial_line": "nargs", "completion": "nargs_finalfn = numArgs + 1; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t  int noldmembers, Oid *oldmembers,\n\t\t\t\t\t\t  int noldmembers, Oid *oldmembers,\n\t\t\t\t\t\t\t\tSHARED_DEPENDENCY_INITACL,\n\t\t\t\t\t\t\t\tnnewmembers, newmembers);", "partial_line": "getOidListDiff(oldmembers, &noldmembers, newme", "completion": "getOidListDiff(oldmembers, &noldmembers, newmembers, &nnewmembers); <|endoftext|>"}
{"context": "\t\t\tprocessSearchPathEntry(AH, te);\n\t}\n}\n\telse if (ptr1 && strncmp(ptr1, \"'off'\", 5) == 0)\n\tAssert(ropt->strict_names);", "partial_line": "if (ropt->tableNames", "completion": "if (ropt->tableNames.head != NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_INVALID_TRANSACTION_STATE),\n\t\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\tExecInitRangeTable(estate, cstate->range_table, cstate->rteperminfos,", "partial_line": "mtstate", "completion": "mtstate->ps.plan = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  jtlink2,\n\t\tif (newclauses == NIL)\n}\n\tint\t\t\trt_index;\n\t\tRangeTblEntry *rte = (RangeTblEntry *) lfirst(lc);", "partial_line": "List\t   *t", "completion": "List\t   *tlist = NIL; <|endoftext|>"}
{"context": "#include \"optimizer/cost.h\"\n#include \"utils/rel.h\"", "partial_line": "int\t\t\tjoin", "completion": "int\t\t\tjoin_collapse_limit; <|endoftext|>"}
{"context": "        }\n                {   int ret = slice_del(z);\n                {   int ret = slice_del(z);\n        z->c = z->l - m4;\n        if (!among_var) goto lab4;", "partial_line": "{   int m6 = z->l - z->c", "completion": "{   int m6 = z->l - z->c; (void)m6; <|endoftext|>"}
{"context": "\tif (!HeapTupleIsValid(tuple))\n\tReleaseSysCache(tuple);\n\tAclMode\t\tresult;\n\tAcl\t\t   *acl;\n\t\t\treturn 0;", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  void *callback_state,\n\t\t\t\t\t\t\t  TableScanDesc scan)\n\tbool\t\tisnull[INDEX_MAX_KEYS];\n\tTransactionId OldestXmin;\n\tchecking_uniqueness = (indexInfo->ii_Unique ||", "partial_line": "slot = table_slot_create(heapRe", "completion": "slot = table_slot_create(heapRelation, NULL); <|endoftext|>"}
{"context": "#include \"lib/stringinfo.h\"\n#include \"nodes/nodes.h\"\nstatic void outDouble(StringInfo str, double d);\n#define WRITE_OID_FIELD(fldname) \\", "partial_line": "#define WR", "completion": "#define WRITE_LONG_FIELD(fldname) \\ <|endoftext|>"}
{"context": "\tif (initdb_comment != NULL)\n\t}\n\tif (ncomments > 0)\n\t}\n\t\t\t\t\tconst char *argtype, const char *argval)", "partial_line": "te =", "completion": "te = AH->toc->next; <|endoftext|>"}
{"context": "\t\t*orderproc = *index_getprocinfo(rel, skey->sk_attno, BTORDER_PROC);\n\tif (!RegProcedureIsValid(cmp_proc))\n\t\t\t\t\t\t\t\t elemtype, elemtype, BTORDER_PROC);\n\tcxt.collation = skey->sk_collation;\n}", "partial_line": "int\t\t\tn", "completion": "int\t\t\tnelems_orig_start = *nelems_orig, <|endoftext|>"}
{"context": "#ifdef __cplusplus\nstatic const symbol s_0_8[4] = { 'e', 'r', 't', 'e' };\nstatic const symbol s_0_16[2] = { 'e', 's' };\nstatic const symbol s_0_25[2] = { 'e', 't' };\nstatic const symbol s_0_26[3] = { 'h', 'e', 't' };", "partial_line": "{ 4, s_0_8, 1,", "completion": "{ 4, s_0_8, 1, 3, 0}, <|endoftext|>"}
{"context": "\t{\n\t\t{\nExecCheckOneRelPerms(RTEPermissionInfo *perminfo)\n\tOid\t\t\tuserid;\n\trequiredPerms = perminfo->requiredPerms;", "partial_line": "if (remainingPerms & ~(ACL_SELECT |", "completion": "if (remainingPerms & ~(ACL_SELECT | ACL_INSERT | ACL_UPDATE)) <|endoftext|>"}
{"context": "\t{\n\t\tBufferDesc *buf_hdr = GetLocalBufferDescriptor(buffid);\n\t\treturn false;\nstatic Block\n\tstatic char *cur_block = NULL;", "partial_line": "static MemoryC", "completion": "static MemoryContext LocalBufferContext = NULL; <|endoftext|>"}
{"context": "static bool\n{\n\t\tnode->rustate = castNode(RecursiveUnionState, DatumGetPointer(param->value));\n\t\tExecAssignScanProjectionInfo(&node->ss);\nExecInitWorkTableScan(WorkTableScan *node, EState *estate, int eflags)", "partial_line": "scanstate->ss.p", "completion": "scanstate->ss.ps.ExecProcNode = ExecWorkTableScan; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t}\n\t\t\t\t\t\t  index->rd_indcollation[0],\n\t\t\t\t\t\t\t\t   leafDatums,\n\t\t}", "partial_line": "leafDa", "completion": "leafDatums, <|endoftext|>"}
{"context": "static Selectivity\n\tif (mcv_exists)\n\t\t{\n\t\thist_selec = inet_hist_value_sel(hist_values, hist_nvalues,\n\t\tcase OID_INET_SUB_OP:", "partial_line": "elog(ERROR,", "completion": "elog(ERROR, \"unrecognized operator %u for inet selectivity\", <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"unexpected null value in pg_policy.polroles\");\n\t\tdatum = heap_getattr(tuple, Anum_pg_policy_polqual,\n\t\t{\n\t\t\tMemoryContextSwitchTo(oldcxt);\n\t\t\tpfree(str_value);", "partial_line": "policy->with_check_qu", "completion": "policy->with_check_qual = NULL; <|endoftext|>"}
{"context": "\t\t\thbaline->auth_method != uaSSPI)\n\t\tif (strcmp(val, \"1\") == 0)\n\t\t\thbaline->include_realm = false;\n\t\tif (strcmp(val, \"1\") == 0)\n\t\t\thbaline->upn_username = true;", "partial_line": "char", "completion": "char\t   *dupval = pstrdup(val); <|endoftext|>"}
{"context": "static const symbol s_2_1[2] = { 'c', 'c' };\nstatic const symbol s_2_5[2] = { 'j', 'j' };\nstatic const symbol s_2_10[2] = { 'p', 'p' };\n{\n{ 2, s_2_0, -1, -1, 0},", "partial_line": "{ 2, s_2_2, -1,", "completion": "{ 2, s_2_2, -1, -1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\t\tECPGset_noind_null(ECPGt_timestamp, &tres);\n\t\t\t\t\t\t{\n\t\t\t\t\t\tif (!isarray && garbage_left(isarray, &scan_length, compat))", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tbool\t\tsleeping;\n\t}\nXLogGetReplicationSlotMinimumLSN(void)\n\t\treturn;\n\t}", "partial_line": "TimeLineID\tnewMinRecove", "completion": "TimeLineID\tnewMinRecoveryPointTLI; <|endoftext|>"}
{"context": "static bool holdingAllLocks = false;\n#ifdef WAL_DEBUG\n\t\t\t\t\t\t\t\t\t\t\t\t  XLogRecPtr pagePtr,\nstatic XLogRecPtr XLogGetReplicationSlotMinimumLSN(void);\nstatic void UpdateMinRecoveryPoint(XLogRecPtr lsn, bool force);", "partial_line": "static XLogRecPtr XLogBytePosToR", "completion": "static XLogRecPtr XLogBytePosToRecPtr(uint64 bytepos); <|endoftext|>"}
{"context": "#include \"utils/builtins.h\"\n\tpq_beginmessage(&buf, PqMsg_RowDescription);\n\tpq_endmessage(&buf);", "partial_line": "Str", "completion": "StringInfoData buf; <|endoftext|>"}
{"context": "\t\t   walrcv->walRcvState == WALRCV_STOPPING);\nXLogWalRcvProcessMsg(unsigned char type, char *buf, Size len, TimeLineID tli)\n\t\t\t{\n\t\t\t\tinitReadOnlyStringInfo(&incoming_message, buf, hdrlen);\n\tint\t\t\tstartoff;", "partial_line": "int\t\t\tbyt", "completion": "int\t\t\tbyteswritten; <|endoftext|>"}
{"context": "{ 5, s_2_1345, 1344, 121, 0},\n{ 6, s_2_1351, 1350, 1, 0},\n{ 5, s_2_1365, 1341, 84, 0},\n{ 6, s_2_1368, 1341, 86, 0},\n{ 4, s_2_1370, 1369, 1, 0},", "partial_line": "{ 6, s_2", "completion": "{ 6, s_2_1375, 1373, 89, 0}, <|endoftext|>"}
{"context": "\t{\n\tif (!RelationIsPermanent(relation) && RecoveryInProgress())\n\t\tfor (int i = 0; i < relation->rd_att->natts; i++)\n\t\t\tif (attr->attnullability == ATTNULLABLE_VALID)\n\t\tLOCKMODE\tlmode;", "partial_line": "fore", "completion": "foreach(l, indexoidlist) <|endoftext|>"}
{"context": "#include \"common/int.h\"\n#define DEBUG_LIST_MEMORY_USAGE\n#endif", "partial_line": "#define LIST_HE", "completion": "#define LIST_HEADER_OVERHEAD  \\ <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\tLLVMValueRef v_retval;\n\t\t\t\t\t\tif (op->d.func.nargs == 0)\n\t\t\t\t\t\tv_fcinfo =\n\t\t\t\t\t\t\t\t\t\t\t  argno);", "partial_line": "LLVMBa", "completion": "LLVMBasicBlockRef b_argnotnull; <|endoftext|>"}
{"context": "\t{\n\t\toffnum = xlrec->oldOffnum;\n\t\tPageIndexTupleDeleteNoCompact(page, offnum);\n\tXLogRecPtr\tlsn = record->EndRecPtr;\n\t\tpage = (Page) BufferGetPage(buffer);", "partial_line": "XLogRecPtr\tlsn =", "completion": "XLogRecPtr\tlsn = record->EndRecPtr; <|endoftext|>"}
{"context": "\t{\n\treturn result;\nnumeric_abbrev_abort(int memtupcount, SortSupport ssup)\n{\n\tif (abbr_card < nss->input_count / 10000.0 + 0.5)", "partial_line": "if (tra", "completion": "if (trace_sort) <|endoftext|>"}
{"context": "\t\t\t\t\t\t*wsptr++ = '\\0';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t}", "partial_line": "case CS_W", "completion": "case CS_WAITVALUE: <|endoftext|>"}
{"context": "#include \"optimizer/paths.h\"\n#include \"utils/lsyscache.h\"", "partial_line": "int relid", "completion": "int relid, int ojrelid); <|endoftext|>"}
{"context": "\t\t\t\tgoto retry3;\n#if defined(EWOULDBLOCK) && (!defined(EAGAIN) || (EWOULDBLOCK != EAGAIN))\n\t\t\tdefault:\n\t\t\tgoto retry3;\n\t\t}", "partial_line": "r", "completion": "return 1; <|endoftext|>"}
{"context": "\t\tif (fmask & DTK_M(DTZMOD))\n\t\tstruct pg_tm tt,\n\t\t\tGetCurrentDateTime(tmp);\n\t\t\tif ((fmask & DTK_DATE_M) != DTK_DATE_M)\n\t\t\tGetCurrentDateTime(tmp);", "partial_line": "tmp->tm_mon = tm-", "completion": "tmp->tm_mon = tm->tm_mon; <|endoftext|>"}
{"context": "\t\t\t\tIsA(((RelabelType *) acoerce->elemexpr)->arg, CaseTestExpr))\n\t\t}\n\t\t\t   SpecialJoinInfo *sjinfo)\n{\n\tbool\t\tuseOr = clause->useOr;", "partial_line": "FmgrInfo\topr", "completion": "FmgrInfo\toprselproc; <|endoftext|>"}
{"context": "\tstate->numstates = origstate->numstates;\n\t\t\t\t\t\t  Oid tgoid, bool tgisdeferred)\n\t\t\t\t\t newalloc * sizeof(SetConstraintTriggerData));\n\tstate->trigstates[state->numstates].sct_tgoid = tgoid;\nvoid", "partial_line": "AfterTriggerS", "completion": "AfterTriggerSetState(ConstraintsSetStmt *stmt) <|endoftext|>"}
{"context": "\tuse_wal = XLogIsNeeded() &&\n\t\tpiv_flags = PIV_LOG_WARNING;\n\t\t\tpiv_flags |= PIV_IGNORE_CHECKSUM_FAILURE;\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t forkNum);", "partial_line": "hash_search(pendingSyncHas", "completion": "hash_search(pendingSyncHash, &rlocator, HASH_FIND, NULL) == NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tappendPQExpBufferStr(insertStmt, \", \");\n\t\t\t\t\t\tappendPQExpBufferStr(insertStmt,\n\t\t\t\t\t}\n\t\t\t\tarchputs(insertStmt->data, fout);\n\t\t\tif (rows_per_statement == 1)", "partial_line": "archputs(\"", "completion": "archputs(\",\\n\\t(\", fout); <|endoftext|>"}
{"context": "\ty[59] = b64[56];\n\tROUND1(D, A, B, C, 1, Sb, 2);\n\tROUND1(C, D, A, B, 2, Sc, 3);\n\tROUND1(D, A, B, C, 5, Sb, 6);\n\tROUND1(B, C, D, A, 7, Sd, 8);", "partial_line": "ROUND2(D, A,", "completion": "ROUND2(D, A, B, C, 10, Sf, 22); <|endoftext|>"}
{"context": "\t\telog(DEBUG_elog_output, \"NEW (%d)\", n_DCHCache);\n\t}\nDCH_cache_fetch(const char *str, bool std)\n{\n}", "partial_line": "static te", "completion": "static text * <|endoftext|>"}
{"context": "\t{\"useconds\", UNITS, DTK_MICROSEC},\t\n\t{\"years\", UNITS, DTK_YEAR}, \nstatic const unsigned int szdeltatktbl = lengthof(deltatktbl);\nchar\t   *days[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", NULL};\n\t\tconst datetkn *last = base + nel - 1,", "partial_line": "if (deltacache[field]", "completion": "if (deltacache[field] != NULL && <|endoftext|>"}
{"context": "\t\t\tLockErrorCleanup();\n\t\t\tereport(ERROR,\n\t\t\t\t\t errmsg(\"canceling autovacuum task\")));\n\t\t\t\t\t(errcode(ERRCODE_QUERY_CANCELED),\n\tif (IdleInTransactionSessionTimeoutPending)", "partial_line": "if (IdleInTransactionSes", "completion": "if (IdleInTransactionSessionTimeout > 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  is_crosspart_update);\n\t\t\t\t\t HeapTuple trigtuple)\n\tTupleTableSlot *slot = ExecGetTriggerOldSlot(estate, relinfo);\n\tLocTriggerData.tg_relation = relinfo->ri_RelationDesc;\n\t\t\t\t\t\t\t\t  TRIGGER_TYPE_DELETE))", "partial_line": "if (!TriggerEnabled(e", "completion": "if (!TriggerEnabled(estate, relinfo, trigger, LocTriggerData.tg_event, <|endoftext|>"}
{"context": "#include \"nodes/makefuncs.h\"\n#include \"utils/inet.h\"\nstatic List *match_network_function(Node *leftop,\n\tif (strchr(src, ':') != NULL)\n\t\tip_family(dst) = PGSQL_AF_INET;", "partial_line": "is_cidr ?", "completion": "is_cidr ? ip_addrsize(dst) : -1); <|endoftext|>"}
{"context": "\t\t\t\tcase CLASS_AND:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t false))\n\tif (is_andclause(clause))\n\t}", "partial_line": "arrayval = DatumGetArrayTypeP(((Const *) arra", "completion": "arrayval = DatumGetArrayTypeP(((Const *) arraynode)->constvalue); <|endoftext|>"}
{"context": "\t(appendStringInfoString(str, \" :\" CppAsString(fldname) \" \"), \\\n\t writeOidCols(str, node->fldname, len))\n\t(appendStringInfoString(str, \" :\" CppAsString(fldname) \" \"), \\\n\t(appendStringInfoString(str, \" :\" CppAsString(fldname) \" \"), \\\n#define WRITE_BOOL_ARRAY(fldname, len) \\", "partial_line": "if (*s ==", "completion": "if (*s == '\\0') <|endoftext|>"}
{"context": "\t\t\t\tereport(ERROR,\n\t\t\tbreak;\n\t}\n\tappendStringInfoChar(&result, '{');\n\t\t\tescape_json_text(&result,", "partial_line": "(text *) DatumGetPointer(in_datum", "completion": "(text *) DatumGetPointer(in_datums[i * 2 + 1])); <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n\tif (!pqParseIntParam(conn->pgtcp_user_timeout, &timeout, conn,\n\t\tchar\t\tsebuf[256];\n\t\t\t\t\t\t\t \"libpq is incorrectly linked to backend functions\\n\");\n\tconn->status = CONNECTION_NEEDED;", "partial_line": "conn->status =", "completion": "conn->status = CONNECTION_BAD; <|endoftext|>"}
{"context": "sigexit_handler(SIGNAL_ARGS)\n{\n\t\t{\"fsync-interval\", required_argument, NULL, 'F'},\n\t\t{\"plugin\", required_argument, NULL, 'P'},\n\t\t{\"create-slot\", no_argument, NULL, 1},", "partial_line": "{\"start\", no_arg", "completion": "{\"start\", no_argument, NULL, 2}, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\tPG_RETURN_TEXT_P(cstring_to_text(result));\n{\n\tNumeric\t\tnum;\n\tint64\t\tresult;", "partial_line": "while (isspa", "completion": "while (isspace((unsigned char) *strptr)) <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"cache lookup failed for foreign-data wrapper %u\", fdwid);\n\tfdw->fdwname = pstrdup(NameStr(fdwform->fdwname));\n\tdatum = SysCacheGetAttr(FOREIGNDATAWRAPPEROID,\n}\n}", "partial_line": "server->servername = pstrdup(NameStr(serv", "completion": "server->servername = pstrdup(NameStr(serverform->srvname)); <|endoftext|>"}
{"context": "\t\t\t\t\tconn->allowed_auth_methods |= bits;\n\t\t\t}\n\t\t\tlibpq_append_conn_error(conn, \"require_auth method \\\"%s\\\" is specified more than once\",\n\t\t\tfor (i = 0; i < lengthof(conn->allowed_sasl_mechs); i++)\n\t\t\t\t{", "partial_line": "conn->allowed_auth_metho", "completion": "conn->allowed_auth_methods |= sasl_bits; <|endoftext|>"}
{"context": "{\n\t\tint\t\t\tn;\n\t\t{\n\t\t\tif (sinstrument->sortMethod == SORT_TYPE_STILL_IN_PROGRESS)\n\t\t\t\tappendStringInfo(es->str,", "partial_line": "\"Sort Method:", "completion": "\"Sort Method: %s  %s: \" INT64_FORMAT \"kB\\n\", <|endoftext|>"}
{"context": "\tXLogBeginInsert();\n\tXLogRegisterData(&pageno, sizeof(pageno));\n\txlrec.pageno = pageno;\n\txlrec.oldestXid = oldestXid;\n{", "partial_line": "Assert(!XLogRecHasAnyBlo", "completion": "Assert(!XLogRecHasAnyBlockRefs(record)); <|endoftext|>"}
{"context": "\t\t\t\ti++;\n\t\tif (fragmentBegin >= 0 && i - fragmentEnd > MATCH_THRESHOLD)\n\t{\n\tcomputeRegionDelta(pageData, curpage, targetpage,\n\t{", "partial_line": "for (i = 0; i < MAX_GENERIC_XL", "completion": "for (i = 0; i < MAX_GENERIC_XLOG_PAGES; i++) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  cancel->keepalives_idle,\n\t\t}\n\t\t\t\t\t\t\t\t cancel->pgtcp_user_timeout))\n\t\t{\n\t\t\tgoto cancel_errReturn;", "partial_line": "strlcpy(errbuf, \"PQ", "completion": "strlcpy(errbuf, \"PQcancel() -- connect() failed: \", errbufsize); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"could not write to file \\\"%s\\\": %m\", tmppath)));\n\tif (CloseTransientFile(fd) != 0)\n\t\t\t\t(errcode_for_file_access(),\nwriteTimeLineHistoryFile(TimeLineID tli, char *content, int size)\n\terrno = 0;", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "}\n\tbistate->already_extended_by = 0;\n\treturn bistate;\n}\n\tAssert(HeapTupleHeaderGetNatts(tup->t_data) <=", "partial_line": "&vmbuffer,", "completion": "&vmbuffer, NULL, <|endoftext|>"}
{"context": "static int\ndir_strcmp(const char *s1, const char *s2)\n\t\t\t&& !(IS_DIR_SEP(*s1) && IS_DIR_SEP(*s2)))\n\t{\n\tif (prefix_len == 0)", "partial_line": "dir_strcmp(ret_path + tail_start, bin_path", "completion": "dir_strcmp(ret_path + tail_start, bin_path + prefix_len) == 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  items, nitem,\n}\n\tMemoryContext oldCtx;\n\toldCtx = MemoryContextSwitchTo(buildstate->funcCtx);\n{", "partial_line": "ItemPoin", "completion": "ItemPointerData *list; <|endoftext|>"}
{"context": "\t\t\t{\n\t\tCheckXLogRemoved(startsegno, state.starttli);\n\t\t\t\t\t\t &tli, &segno, wal_segment_size);\n\t\t\tereport(ERROR,\n\t\t\tchar\t   *walFileName = (char *) lfirst(lc);", "partial_line": "XLogSegNo\tc", "completion": "XLogSegNo\tcurrsegno = segno; <|endoftext|>"}
{"context": "\t\tARR_HASNULL(result) ||\n\tPG_RETURN_POINTER(result);\noidparse(Node *node)\n\tOid\t\t\tv2 = *((const Oid *) p2);\n\treturn pg_cmp_u32(v1, v2);", "partial_line": "PG_RETURN_B", "completion": "PG_RETURN_BOOL(arg1 == arg2); <|endoftext|>"}
{"context": "main(void)\n\tECPGdebug(1, stderr);\n\t\tif (r < 0) check_errno();\n\t\tprintf(\"dec[%d,3]: r: %d, %s\\n\", i, r, buf);\n\t\tr = dectoasc(din, buf, BUFSIZE-1, 2);", "partial_line": "if", "completion": "if (r == 0) <|endoftext|>"}
{"context": "static long gistBuffersGetFreeBlock(GISTBuildBuffers *gfbb);\nGISTBuildBuffers *\n{\n\tgfbb = palloc(sizeof(GISTBuildBuffers));\n\tgfbb->pfile = BufFileCreateTemp(false);", "partial_line": "gfbb->freeBlocks = (long *) palloc(", "completion": "gfbb->freeBlocks = (long *) palloc(gfbb->freeBlocksLen * sizeof(long)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\tappendStringInfo(&buffer, \"%s on server %s\",\n\t\t\t\t\t\t\t\t quote_identifier(usename),\n\t\t\t\tRelation\tdefaclrel;\n\t\t\t\tScanKeyData skey[1];", "partial_line": "He", "completion": "HeapTuple\ttup; <|endoftext|>"}
{"context": "\t\t\t\tparse->hasWindowFuncs = false;\n\t\t\tpreprocess_minmax_aggregates(root);\n\t\t\tparse->distinctClause ||\n\t\t}\n\t\telse", "partial_line": "scanjoin_target = group", "completion": "scanjoin_target = grouping_target; <|endoftext|>"}
{"context": "\t{\n\t\t\tPROGRESS_CREATEIDX_COMMAND_REINDEX,\n\t\tpgstat_progress_start_command(PROGRESS_COMMAND_CREATE_INDEX,\n\tif (progress)\n\tif (stmt)", "partial_line": "if (iRel->rd_rel->relk", "completion": "if (iRel->rd_rel->relkind == RELKIND_PARTITIONED_INDEX) <|endoftext|>"}
{"context": "\t\t\t\t\t\titm_in->tm_usec = -itm_in->tm_usec;\n\t\t\tcase DTK_NUMBER:\n\t\t\t\t\t{\n\t\t\t\t\t\t\ttype = DTK_YEAR;\n\t\t\t\t\t\t\ttype = DTK_MONTH;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tcollversion = pstrdup(gnu_get_libc_version());\n\t\tif (loc)\n\t\t{\n\t\telse\n\t\t\tereport(ERROR,", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\t\t   list->type == T_IntList ||\n#else\nnew_list(NodeTag type, int min_size)\n{\n\tmax_size = min_size;", "partial_line": "newlist = (List *) palloc(offsetof(L", "completion": "newlist = (List *) palloc(offsetof(List, initial_elements) + <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  tv->escape_len);\n\tinput_encoding_valid = input_encoding_validlen == tv->escape_len;\n\t\t\t\t\t  input_encoding0_valid);\n\t\t\t\t\t\t\t\t   raw_buf->len - tv->escape_len - 1);\n\t}", "partial_line": "if (", "completion": "if (!escape_success) <|endoftext|>"}
{"context": "\t\t\tMarkBufferDirty(buffer);\n\t\t}\n\t\tif (bistate && bistate->next_free != InvalidBlockNumber)\n\t\t}\n\t}", "partial_line": "if (!visib", "completion": "if (!visibilitymap_pin_ok(targetBlock, *vmbuffer)) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t}\n\t}\n\t{\n\t\tlocators[i] = rels[i]->smgr_rlocator.locator;", "partial_line": "if (", "completion": "if (use_bsearch) <|endoftext|>"}
{"context": "static const symbol s_2_1513[5] = { 'i', 's', 't', 'a', 'o' };\nstatic const symbol s_2_1517[4] = { 'i', 'v', 'a', 'o' };\nstatic const symbol s_2_1523[2] = { 'i', 'o' };\nstatic const symbol s_2_1558[5] = { 'a', 'c', 'a', 'l', 'o' };\nstatic const symbol s_2_1559[8] = { 'a', 's', 't', 'a', 'j', 'a', 'l', 'o' };", "partial_line": "static const symbol s_2_1560[8] = { 'i', 's', 't', 'a", "completion": "static const symbol s_2_1560[8] = { 'i', 's', 't', 'a', 'j', 'a', 'l', 'o' }; <|endoftext|>"}
{"context": "\tsigprocmask(SIG_SETMASK, &BlockSig, NULL);\n\tif (ClientAuthInProgress && whereToSendOutput == DestRemote)\n\t\t\t\t\t errmsg(\"terminating connection because of unexpected SIGQUIT signal\")));\n\t\t\t\t\t(errcode(ERRCODE_CRASH_SHUTDOWN),\n\t\t\t\t\t\t\t   \" shared memory.\"),", "partial_line": "ereport(WAR", "completion": "ereport(WARNING_CLIENT_ONLY, <|endoftext|>"}
{"context": "\tint\t\t\tbankno = SlotGetBankNumber(slotno);\n\t\tSimpleLruWaitIO(ctl, slotno);\n\t}\n\tshared->page_dirty[slotno] = false;\n\tLWLockAcquire(&shared->buffer_locks[slotno].lock, LW_EXCLUSIVE);", "partial_line": "LWLockAcquire(&shared->bank_locks[ban", "completion": "LWLockAcquire(&shared->bank_locks[bankno].lock, LW_EXCLUSIVE); <|endoftext|>"}
{"context": "\t\t\tif (blkno == InvalidBlockNumber || cleanupFinish)\n\t\tbuffer = ReadBuffer(index, blkno);\n{\n\tOid\t\t\tindexoid = PG_GETARG_OID(0);\n\tif (RecoveryInProgress())", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tmeminfo = (MemoryStatsEntry *) dsa_get_address(area, prev_dsa_pointer);\n\tfor (int i = 0; i < total_stats; i++)\n\t\t\tdsa_free(area, meminfo[i].name);\n\t\tif (DsaPointerIsValid(meminfo[i].ident))\n{", "partial_line": "context->isRese", "completion": "context->isReset = false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tnegative = t->tm_zone[0] == '-';\n\t\t\t\t\t\t\tdiff = -diff;\n\t\t\t\t\t\t\t  warnp);\n\t\t\t\tdefault:\nstatic char *", "partial_line": "return _add(bu", "completion": "return _add(buf, pt, ptlim); <|endoftext|>"}
{"context": "{\n\tAssert(newsub->twophasestate == MySubscription->twophasestate);\n\t\t\tereport(LOG,\n\t}\nstatic void", "partial_line": "MySubscriptionValid", "completion": "MySubscriptionValid = false; <|endoftext|>"}
{"context": "\t\tint\t\t\tnbits;\n\t\tnbits = Max(0, lena - (i * 8));\n\t\tif (nbits < 8)\n\tBrinDesc   *bdesc = (BrinDesc *) PG_GETARG_POINTER(0);\n\tOid\t\t\tcolloid = PG_GET_COLLATION();", "partial_line": "Ran", "completion": "Ranges\t   *ranges; <|endoftext|>"}
{"context": "\treturn true;\n{\n\tListCell   *l;\n\tListCell   *curColType = list_head(colTypes);\n\t\t\t\treturn false;", "partial_line": "if (curColType =", "completion": "if (curColType == NULL) <|endoftext|>"}
{"context": "static void fill_ident_line(Tuplestorestate *tuple_store, TupleDesc tupdesc,\n#define MAX_HBA_OPTIONS 15\nget_hba_options(HbaLine *hba)\n\t{\n\t\tif (hba->ldapserver)", "partial_line": "options[noptio", "completion": "options[noptions++] = <|endoftext|>"}
{"context": "void\nReorderBufferFreeRelids(ReorderBuffer *rb, Oid *relids)\n\tif (TransactionIdIsValid(rb->by_txn_last_xid) &&\n\t\trb->by_txn_last_xid == xid)\n\t\t\tif (is_new)", "partial_line": "if (f", "completion": "if (found) <|endoftext|>"}
{"context": "\tReplicationSlot *slot = NULL;\n\t\tif (s->in_use && strcmp(name, NameStr(s->data.name)) == 0)\n{\n\tLWLockRelease(ReplicationSlotControlLock);\n\ts = SearchNamedReplicationSlot(name, false);", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t waiteventnames[idx]);\n\t}\n\t\tStringInfoData buf;\n\t\tvalues[0] = CStringGetTextDatum(\"InjectionPoint\");\n\t\tvalues[1] = CStringGetTextDatum(waiteventnames[idx]);", "partial_line": "values[2] = CStringGetTextDat", "completion": "values[2] = CStringGetTextDatum(buf.data); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tconst RangeBound *lower, RangeBound *upper,\n\tupper_index = Min(upper_index, hist_nvalues - 2);\n\t{\n\t\tdouble\t\tlength_hist_frac;\n\t\tif (range_cmp_bounds(typcache, &hist_lower[i], lower) < 0)", "partial_line": "bin_width =", "completion": "bin_width = 0.0; <|endoftext|>"}
{"context": "}\n\tTupleDescInitBuiltinEntry(tupdesc, (AttrNumber) 1, varname,\nShowAllGUCConfig(DestReceiver *dest)\n\tstruct config_generic **guc_vars;\n\tguc_vars = get_guc_variables(&num_vars);", "partial_line": "tupdesc = CreateTe", "completion": "tupdesc = CreateTemplateTupleDesc(3); <|endoftext|>"}
{"context": "\t\tcase T_CustomScan:\n\t\tcase T_HashJoin:\n\t\t\t\t\t\t\t\t\t\t\t\testate, eflags);\n\t\tcase T_Group:\n\t\tcase T_WindowAgg:", "partial_line": "estate,", "completion": "estate, eflags); <|endoftext|>"}
{"context": "\t}\n\t\telse\n\tif (spec->is_default)\n\t\t\t   *upper_val;\n\t\t\t   *upper_or_arms;", "partial_line": "*upper", "completion": "*upper_or_start_datum; <|endoftext|>"}
{"context": "\t\t\t\ti_rolcreaterole,\n\t\t\t\ti_rolcanlogin,\n\t\t\t\t\t\t  \"rolname = current_user AS is_current_user \"\n\t\t\t\t\t\t  \"ORDER BY 2\", role_catalog);\n\t\t\t\t\t\t  \"ORDER BY 2\", role_catalog);", "partial_line": "res = exec", "completion": "res = executeQuery(conn, buf->data); <|endoftext|>"}
{"context": "static const symbol s_8_1[1] = { 'j' };\n{ 1, s_8_0, -1, -1, 0},\n    }\n        case 1:\n        case 4:", "partial_line": "if (!find_among_b(z, a_", "completion": "if (!find_among_b(z, a_1, 6)) return 0; <|endoftext|>"}
{"context": "\t\tcase CMD_UPDATE:\n\t\tdefault:\nhas_stored_generated_columns(PlannerInfo *root, Index rti)\nget_dependent_generated_columns(PlannerInfo *root, Index rti,\n\tconstr = tupdesc->constr;", "partial_line": "expr =", "completion": "expr = stringToNode(defval->adbin); <|endoftext|>"}
{"context": "#ifdef REALLOCATE_BITMAPSETS\n\ta = bms_copy_and_free(a);\n\tif (a == NULL)\n\t}\n\t\t{", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\treturn false;\nLogStreamerMain(logstreamer_param *param)\n\tif (format == 'p')\n\telse\n\t\treturn 1;", "partial_line": "return", "completion": "return 0; <|endoftext|>"}
{"context": "    }\n        case 1:\n        case 4:\n            if (!find_among_b(z, a_1, 6)) return 0;\n        case 5:", "partial_line": "{   i", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "#endif\n\t{\n\t\tcur_timeout = timeout;\n\t\t{\n\t\t\toccurred_events->fd = PGINVALID_SOCKET;", "partial_line": "set->events[set->la", "completion": "set->events[set->latch_pos].user_data; <|endoftext|>"}
{"context": "        }\n        z->c = c1;\n    }\n        }\n    }", "partial_line": "z->lb = z-", "completion": "z->lb = z->c; z->c = z->l; <|endoftext|>"}
{"context": "\t\tif (pg_encoding_max_length(encoding) > 1 && *data > 127)\n\t\t\t\t errmsg(\"character number must be positive\")));\n\tif (encoding == PG_UTF8 && cvalue > 127)\n\t{\n\t\tint\t\t\tbytes;", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tif (strspn(basename, \"abcdefghijklmnopqrstuvwxyz0123456789_\") != strlen(basename))\n\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n{\n\t\t\t\t\t errmsg(\"could not open stop-word file \\\"%s\\\": %m\",\n\t\t\tchar\t   *pbuf = line;", "partial_line": "while (*pbuf &", "completion": "while (*pbuf && !isspace((unsigned char) *pbuf)) <|endoftext|>"}
{"context": "\t\t\tprs->state->lenchartoken = ptr->lenchartoken;\n\t\t\tpfree(ptr);\n\t\t\tprs->state->posbyte += prs->state->charlen;\n\t\tdescr[i - 1].alias = pstrdup(tok_alias[i]);\n\t\tdescr[i - 1].descr = pstrdup(lex_descr[i]);", "partial_line": "prsd_start(PG_FUNCT", "completion": "prsd_start(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\tCteScanState *node = castNode(CteScanState, pstate);\n}\n\tscanstate->ss.ps.plan = (Plan *) node;\n\tscanstate->eflags = eflags;\nExecEndCteScan(CteScanState *node)", "partial_line": "if (node->leade", "completion": "if (node->leader == node) <|endoftext|>"}
{"context": "\tquery = PQprepare(stmt->connection->connection, name, stmt->command, 0, NULL);\nECPGprepare(int lineno, const char *connection_name, const bool questionmarks,\n\tcon = ecpg_get_connection(connection_name);\n\tif (this && !deallocate_one(lineno, ECPG_COMPAT_PGSQL, con, prev, this))\n}", "partial_line": "ecpg_find_prepared", "completion": "ecpg_find_prepared_statement(const char *name, <|endoftext|>"}
{"context": "\t\t0x620305BC, 0x71A19DCB, 0x45463552, 0x56E4AD25,\n\t\t0x809C2506, 0x933EBD71, 0xA7D915E8, 0xB47B8D9F,\n\t\t0xFBC3FAF9, 0xE861628E, 0xDC86CA17, 0xCF245260,\n\t\t0x66D73941, 0x7575A136, 0x419209AF, 0x523091D8,\n\t\t0x5912C8C0, 0x4AB050B7, 0x7E57F82E, 0x6DF56059,", "partial_line": "0xF50789A6, 0xE6A511D1, 0xD242B9", "completion": "0xF50789A6, 0xE6A511D1, 0xD242B948, 0xC1E0213F, <|endoftext|>"}
{"context": "\t\tnode = node->ec_merged;\n\tWRITE_BITMAPSET_FIELD(ec_relids);\n}\n\tconst ExtensibleNodeMethods *methods;\n\tmethods = GetExtensibleNodeMethods(node->extnodename, false);", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\t\tOid\t\t\topfamily,\n\t\t\t\t strategynum, attr->atttypid, subtype, opfamily);\n\tadd_local_int_reloption(relopts, \"values_per_range\", \"desc\",\n\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\tSerializedRanges *ranges;", "partial_line": "Str", "completion": "StringInfoData str; <|endoftext|>"}
{"context": "\t\tNode\t   *rel;\n\t\tint\t\t\tsv_namespace_length;\n\t\t\t\t\t\t\t\t\t\t  &r_nsitem,\n\t\t\t\tString\t   *m_name = NULL;\n\t\t\t}", "partial_line": "if (", "completion": "if (j->join_using_alias) <|endoftext|>"}
{"context": "                    goto lab12;\n                {   int ret = r_stem_suffix_chain_before_ki(z);\n                }\n            ;\n        }", "partial_line": "l", "completion": "lab7: <|endoftext|>"}
{"context": "\t\t\tAssert(!bpage->ischunk);\n\t\t\tfor (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)\n\t\t\t\tif (apage->words[wordnum] != 0)\n\t\t\t}\n\titerator->tbm = tbm;", "partial_line": "iter", "completion": "iterator->schunkptr = 0; <|endoftext|>"}
{"context": "\t\tdclist_init(&bs->in_flight_ios);\n\t\t{\n\t\t\tioh->report_return = NULL;\n\t\tpgaio_method_ops->shmem_init(!found);\n}", "partial_line": "pgaio_init_b", "completion": "pgaio_init_backend(void) <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\n\t\t\tresult = lappend(result, rinfo);\n\t\tif (result)\n\t\t\tbreak;\n\treturn result;", "partial_line": "while ((i = bms_next_member(ma", "completion": "while ((i = bms_next_member(matching_ecs, i)) >= 0) <|endoftext|>"}
{"context": "\tif (nbytes < 0)\n\t\t\t\t\t   WAIT_EVENT_WAL_SUMMARY_WRITE);\n\treturn nbytes;\n{\n\tva_list\t\tap;", "partial_line": "initStri", "completion": "initStringInfo(&buf); <|endoftext|>"}
{"context": "\treturn true;\n\tAssert((unsigned int) io_object < IOOBJECT_NUM_TYPES);\n\tpgstat_count_backend_io_op(io_object, io_context, io_op, cnt, bytes);\n}\n\tif (track_io_guc)", "partial_line": "INSTR_TIME_SE", "completion": "INSTR_TIME_SET_CURRENT(io_start); <|endoftext|>"}
{"context": "\telse\n\t\tlocation = psprintf(\"%s/%u/%s\", PG_TBLSPC_DIR, tablespaceOid,\n\t\t\t\t\t\t\tTABLESPACE_VERSION_DIRECTORY);\n\t\tchar\t   *subdir;\n\t\tbool\t\tisempty;", "partial_line": "Datum", "completion": "Datum\t\tvalues[1]; <|endoftext|>"}
{"context": "}\n\tpstate = make_parsestate(NULL);\n\t\t\tpelem = copyObject(pelem);\n\t}\n\t\t\t\t\t\t errmsg(\"cannot use system column \\\"%s\\\" in partition key\",", "partial_line": "atttype =", "completion": "atttype = exprType(expr); <|endoftext|>"}
{"context": "{\n\telse\nbool\n\t\t\t char ***namelist)\n\tchar\t  **nextptr;", "partial_line": "*namelist", "completion": "*namelist = nextptr = (char **) <|endoftext|>"}
{"context": "\t\t\tcooked->expr = NULL;\n\tRelation\tconDesc;\n\tHeapTuple\ttup;\n\t\tRelation\trel;\n\t\t\tif (!HeapTupleIsValid(relTup))", "partial_line": "heap_f", "completion": "heap_freetuple(relTup); <|endoftext|>"}
{"context": "\treturn sum;\n}\n\t\tdo\n\t\t{\n\t\tdo", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\twal_compress_level = client_compress->level;\n\t\t\tchar\t\tarchive_name[MAXPGPATH];\n\t\t\t{\n\t\t\t}\n\t\t\t{", "partial_line": "snprintf(archive_", "completion": "snprintf(archive_name, sizeof(archive_name), <|endoftext|>"}
{"context": "\t\t\"msvcr90\",\t\t\t\t\n\t\t\"msvcr120\",\t\t\t\t", "partial_line": "\"ucr", "completion": "\"ucrtbased\", <|endoftext|>"}
{"context": "\tntups = PQntuples(res);\n\ti_srsublsn = PQfnumber(res, \"srsublsn\");\n\t\tOid\t\t\tcur_srsubid = atooid(PQgetvalue(res, i, i_srsubid));\n\t\ttblinfo = findTableByOid(relid);\n\t\t\tpg_fatal(\"failed sanity check, table with OID %u not found\",", "partial_line": "subrinfo[i].do", "completion": "subrinfo[i].dobj.objType = DO_SUBSCRIPTION_REL; <|endoftext|>"}
{"context": "\tprintf(_(\"  --single           selects single-user mode (must be first argument)\\n\"));\n\tprintf(_(\"  DBNAME             database name (mandatory argument in bootstrapping mode)\\n\"));\n\t\t\t \"configuration settings and how to set them on the command line or in\\n\"\n\t\t\t \"the configuration file.\\n\\n\"\ncheck_root(const char *progname)", "partial_line": "#ifnd", "completion": "#ifndef WIN32 <|endoftext|>"}
{"context": "\tLWLockAcquire(lock, LW_EXCLUSIVE);\n\t\t\tZeroMultiXactMemberPage(pageno, true);\n\t\tif (offset + MAX_MEMBERS_IN_LAST_MEMBERS_PAGE < offset)\n\t\tnmembers -= difference;\nGetOldestMultiXactId(void)", "partial_line": "if (ne", "completion": "if (nextMXact < FirstMultiXactId) <|endoftext|>"}
{"context": "\t}\nstatic void\n\t{\n\t\t\t *Np->inout_p, Np->L_positive_sign, Np->L_negative_sign);\n#endif", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tl_load_struct_gep(b, StructNullableDatum, v_argn,\n\t\t\t\t}\n\t\t\t\t\tLLVMValueRef v_allpergroupsp;\n\t\t\t\t\tLLVMValueRef v_setoff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFIELDNO_AGGSTATE_ALL_PERGROUPS,", "partial_line": "case EEOP_AGG_PLAIN_TRANS_", "completion": "case EEOP_AGG_PLAIN_TRANS_INIT_STRICT_BYREF: <|endoftext|>"}
{"context": "\t\ttuplestore_rescan(portal->holdStore);\n\t}\nbool\n{\n\t\treturn true;", "partial_line": "if (IsA(utilityStmt, Tra", "completion": "if (IsA(utilityStmt, TransactionStmt) || <|endoftext|>"}
{"context": "\t\tloinfo->dobj.objType = DO_LARGE_OBJECT;\n\t\tfor (int k = 1; k < n; k++)\n\t\t\tloinfo->dobj.components |= DUMP_COMPONENT_ACL;\n\t\tlodata = (DumpableObject *) pg_malloc(sizeof(DumpableObject));\n\t\tlodata->name = pg_strdup(namebuf);", "partial_line": "lodata->", "completion": "lodata->components |= DUMP_COMPONENT_DATA; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tappinfo->child_relid += context->offset;\n\tAssert(!IsA(node, MinMaxAggInfo));\n\t\t\t\t\t\t\t\t   context, 0);\n\t\t\tforeach(l, qry->rowMarks)", "partial_line": "query_tree_walker(qry, OffsetVarNodes_wal", "completion": "query_tree_walker(qry, OffsetVarNodes_walker, &context, 0); <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n}\t\t\ton_exit_nicely_list[MAX_ON_EXIT_NICELY];\nvoid\n\tif (strcmp(arg, \"pre-data\") == 0)\n\telse", "partial_line": "pg_fatal(\"ou", "completion": "pg_fatal(\"out of on_exit_nicely slots\"); <|endoftext|>"}
{"context": "#line 32 \"char_array.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\nif (sqlca.sqlwarn[0] == 'W') warn ( );\n  { ECPGdo(__LINE__, 3, 1, NULL, 0, ECPGst_normal, \"insert into strdbase values ( 'ABCDE' )\", ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlwarn[0] == 'W') warn ( );", "partial_line": "#line", "completion": "#line 48 \"char_array.pgc\" <|endoftext|>"}
{"context": "\tnitems = ArrayGetNItems(ndims, dimv);\n\telmbyval = my_extra->typbyval;\n\t\tchar\t   *p;\n\t\t\tvalue = PointerGetDatum(PG_DETOAST_DATUM(value));\n\t\tif (totbytes / nbytes != nitems ||", "partial_line": "!AllocSizeIsVa", "completion": "!AllocSizeIsValid(totbytes)) <|endoftext|>"}
{"context": "\tLogicalRepRelId relid;\n\tif (!should_apply_changes_for_rel(rel))\n\t\tend_replication_step();\n\tif (rel->localrel->rd_rel->relkind == RELKIND_PARTITIONED_TABLE)\n\t\tapply_handle_insert_internal(edata, relinfo, remoteslot);", "partial_line": "TupleTableSlot *", "completion": "TupleTableSlot *remoteslot) <|endoftext|>"}
{"context": "\t\tl = file_line_count(diff);\n\t\t\t\t\"diff %s %s %s\\n\",\n\t\tfclose(difffile);\n\tint\t\t\ttests_left;\n\t\tDWORD\t\texit_status;", "partial_line": "statuses[", "completion": "statuses[i] = (int) exit_status; <|endoftext|>"}
{"context": "\t}\n\t*indexStartupCost += entryPagesFetched * DEFAULT_PAGE_CPU_MULTIPLIER * cpu_operator_cost;\n\t\t\t\t\t\t\t\t\t\t\t\tnumEntryPages, root);\n\t\t\t\t\t\t\t\t\t\t\t   (BlockNumber) numDataPages,\n\t}", "partial_line": "(numTuples / (BL", "completion": "(numTuples / (BLCKSZ / 3))); <|endoftext|>"}
{"context": "\t\t\t\t\targtypes[i] = resolvedtype;\n\t\t\tinargno++;\n\t\tfor (i = 0; i < numargs; i++)\n\t\t\t\tcase ANYCOMPATIBLEOID:\n\t\t\t\t\tbreak;", "partial_line": "cas", "completion": "case ANYARRAYOID: <|endoftext|>"}
{"context": "\t\t\t\topt.sub_port = pg_strdup(optarg);\n\t\t\t\tbreak;\n\t\t\t\topt.config_file = pg_strdup(optarg);\n\t\t\t\t{\n\t\t\t\t}", "partial_line": "exit(", "completion": "exit(1); <|endoftext|>"}
{"context": "\t\t\tMemoryContextSwitchTo(oldcontext);\n\t\t\tif (econtext->ecxt_estate &&\n\t\top->d.wholerow.first = false;\n\tslot_getallattrs(slot);\n\t\tTupleDesc\ttupleDesc = slot->tts_tupleDescriptor;", "partial_line": "CompactAttribute *vattr = TupleDescCompactAt", "completion": "CompactAttribute *vattr = TupleDescCompactAttr(var_tupdesc, i); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\tif (!set_random_seed(optarg))\n\t\t\t\t\tpg_fatal(\"error while setting random seed from --random-seed option\");\n\t\t\tcase 10:\t\t\t\n\t\t\t\t}", "partial_line": "else if", "completion": "else if (pg_strcasecmp(optarg, \"hash\") == 0) <|endoftext|>"}
{"context": "\t\treturn NULL;\nPQsendDescribePortal(PGconn *conn, const char *portal)\n{\n\t\treturn NULL;\n\t\treturn NULL;", "partial_line": "return", "completion": "return PQexecFinish(conn); <|endoftext|>"}
{"context": "\t\t\tdsa_get_address(area, pool->spans[1]);\n\t\tAssert(span->nallocatable > 0);\n\t\t\ttransfer_first_span(area, pool, 1, DSA_FULLNESS_CLASSES - 1);\n}\nensure_active_superblock(dsa_area *area, dsa_area_pool *pool,", "partial_line": "dsa_area_span *n", "completion": "dsa_area_span *nextspan; <|endoftext|>"}
{"context": "\tPostingItemSetBlockNumber(&li, lblkno);\n\t\t{\n\t\t\tseginfo->action = GIN_SEGMENT_REPLACE;\n\t\tnewseg->seg = NULL;\n\t\tdlist_push_tail(&leaf->segments, &newseg->node);", "partial_line": "leafSegmentInfo *cur = (leafSegmentI", "completion": "leafSegmentInfo *cur = (leafSegmentInfo *) dlist_container(leafSegmentInfo, node, iter.cur); <|endoftext|>"}
{"context": "\t\tout.distances = NULL;\n\t\t\t\t\t\t\t\t\t\t\t\tPointerGetDatum(&in),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tleafValue,\n\tin->orderbys = so->orderByData;\n\tin->norderbys = so->numberOfNonNullOrderBys;", "partial_line": "in->hasPrefix = (inner", "completion": "in->hasPrefix = (innerTuple->prefixSize > 0); <|endoftext|>"}
{"context": "\t\t\tif (context->min_varlevel < 0 ||\n\t}\n\t\t\t(IsA(node, OpExpr) && ((OpExpr *) node)->opretset))\n\t\t\t\t(errcode(ERRCODE_WINDOWING_ERROR),\n\t\tcase EXPR_KIND_JOIN_ON:", "partial_line": "case EXPR_KIND_", "completion": "case EXPR_KIND_FROM_SUBSELECT: <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t{\n\t\t\t\tPartitionBoundSpec *pbs = (PartitionBoundSpec *) node;\n\t\t\t\tMUTATE(newnode->listdatums, pbs->listdatums, List *);\n\t\t\t\tMUTATE(newnode->lowerdatums, pbs->lowerdatums, List *);", "partial_line": "MUTATE(newnode->upperdatums, pbs-", "completion": "MUTATE(newnode->upperdatums, pbs->upperdatums, List *); <|endoftext|>"}
{"context": "\t\treturn NULL;\n\t\tmsize += strlen(events[i].name) + 1;\n\t\ttup = (PGresAttValue *)\n\t\t\tgoto fail;\n\t\t\ttup[i].value = res->null_field;", "partial_line": "attv", "completion": "attval->len = 0; <|endoftext|>"}
{"context": "static char *datestyle_string;\nstatic int\twal_block_size;\nstatic int\tnum_os_semaphores;\n\t[PGC_S_DYNAMIC_DEFAULT] = \"default\",\n\t[PGC_S_GLOBAL] = \"global\",", "partial_line": "[PGC_S_INTERACTIVE] =", "completion": "[PGC_S_INTERACTIVE] = \"interactive\", <|endoftext|>"}
{"context": "\tif (getenv(\"LC_MONETARY\"))\n\tif (getenv(\"LC_TIME\"))\n\tif (getenv(\"LANG\"))\n\t\t\t\t\telse\n\t\t\t\tgot_cluster_state = true;", "partial_line": "if (GET_MAJOR_VERSION(clu", "completion": "if (GET_MAJOR_VERSION(cluster->bin_version) <= 906) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t errmsg(\"cannot truncate a table referenced in a foreign key constraint\"),\n\t\t\t\t\t\t\t errdetail(\"Table \\\"%s\\\" references \\\"%s\\\".\",\n\toids = list_copy(relationIds);\n\tfkeyRel = table_open(ConstraintRelationId, AccessShareLock);\nrestart:", "partial_line": "NULL, 0", "completion": "NULL, 0, NULL); <|endoftext|>"}
{"context": "static void\n{\n}\nstatic bool\n}", "partial_line": "static", "completion": "static List * <|endoftext|>"}
{"context": "\tconst char *name;\t\t\t\n\tconst uint8 namelen;\t\t\n} CommandTagBehavior;\nstatic const CommandTagBehavior tag_behavior[] = {\n{", "partial_line": "return tag_behavior", "completion": "return tag_behavior[commandTag].event_trigger_ok; <|endoftext|>"}
{"context": "\t\t\t\tfor (i = 0; i < jsp->content.array.nelems; i++)\n\t\t\t\t\t\tres = getArrayIndex(cxt, &to, jb, &index_to);\n\t\t\t\t\t\tif (jperIsError(res))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tindex_to = index_from;", "partial_line": "errmsg(\"jsonpath array subscript is ou", "completion": "errmsg(\"jsonpath array subscript is out of bounds\")))); <|endoftext|>"}
{"context": "\t\ttryExecuteStatement(con, \"truncate pgbench_history\");\n\t\t{\n\tnclients_dealt = 0;\n\t\tthread->tid = i;\n\t\tinitRandomState(&thread->ts_choose_rs);", "partial_line": "if (errno", "completion": "if (errno != 0) <|endoftext|>"}
{"context": "\t\tA_Const    *aconst = castNode(A_Const, node);\n\t\t\tereport(ERROR,\n\t\t\t\t\t\t\tParseExprKindName(exprKind)),\n\t\ttarget_pos = intVal(&aconst->val);\n\t\t{", "partial_line": "if (!tle->", "completion": "if (!tle->resjunk) <|endoftext|>"}
{"context": "\t\tRelation\trel;\n\tPG_RETURN_XML_P(stringinfo_to_xmltype(database_to_xmlschema_internal(nulls,\nDatum\n\tbool\t\ttableforest = PG_GETARG_BOOL(1);\n\tPG_RETURN_XML_P(stringinfo_to_xmltype(database_to_xml_internal(xmlschema->data,", "partial_line": "map_multipart_sql_identifier_to_xml_name", "completion": "map_multipart_sql_identifier_to_xml_name(const char *a, const char *b, const char *c, const char *d) <|endoftext|>"}
{"context": "\tif (queryDesc->totaltime)\n\tMemoryContextSwitchTo(oldcontext);\nvoid\n}\n\tEState\t   *estate;", "partial_line": "Assert(!(estate->es_top_eflags & E", "completion": "Assert(!(estate->es_top_eflags & EXEC_FLAG_EXPLAIN_ONLY)); <|endoftext|>"}
{"context": "\t\tif (!(old_infomask & HEAP_XMAX_INVALID))\n\t\t\trawxmax = HeapTupleHeaderGetRawXmax(mytup.t_data);\n\t\t\t\tAssert(!HEAP_LOCKED_UPGRADED(mytup.t_data->t_infomask));\n\t\t\t\t\t\tLockBuffer(buf, BUFFER_LOCK_UNLOCK);\n\t\t\t\t\t\tXactLockTableWait(members[i].xid, rel,", "partial_line": "goto", "completion": "goto l4; <|endoftext|>"}
{"context": "#include \"storage/pg_sema.h\"\n#ifndef HAVE_UNION_SEMUN\nunion semun", "partial_line": "int", "completion": "int\t\t\tval; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   batch->input_card, aggstate->hashentrysize);\n\t\t\thashagg_spill_tuple(aggstate, &spill, spillslot, hash);\n\t\t\taggstate->hash_pergroup[batch->setno] = NULL;\n\t\thashagg_spill_finish(aggstate, &spill, batch->setno);\n\t\thash_agg_update_metrics(aggstate, true, 0);", "partial_line": "ResetTupleHashIterator(aggstate->perhas", "completion": "ResetTupleHashIterator(aggstate->perhash[batch->setno].hashtable, <|endoftext|>"}
{"context": "\tif (latency_limit && latency > latency_limit)\n\t\t\t\t\t \"pgbench_history, \"\n}\n\t\t\t\t\t\t\t  \"create%s table pgbench_accounts_%d\\n\"\n\t\t\t\t\t\t\t  \"  partition of pgbench_accounts\\n\"", "partial_line": "unlogged_tables ? \"", "completion": "unlogged_tables ? \" unlogged\" : \"\", p); <|endoftext|>"}
{"context": "assign_recovery_target_name(const char *newval, void *extra)\n\telse\n{\n\t\t\tstrcmp(*newval, \"today\") == 0 ||\n\t\t\tchar\t   *str = *newval;", "partial_line": "int\t\t\tdt", "completion": "int\t\t\tdtype; <|endoftext|>"}
{"context": "\tPlan\t   *plan;\n\tList\t   *in_operators;\n\tint\t\t\tnumGroupCols;\n\tsubplan = create_plan_recurse(root, best_path->subpath, flags);\n\t\t{", "partial_line": "subplan = chang", "completion": "subplan = change_plan_targetlist(subplan, newtlist, <|endoftext|>"}
{"context": "\t\tattr = (struct varlena *) redirect.pointer;\n\t}\n\telse\n\treturn result;\n\t\t{", "partial_line": "struct var", "completion": "struct varlena *tmp = attr; <|endoftext|>"}
{"context": "\t\t\tfpm->singleton_npages = npages;\n\t\t\treturn fpm->singleton_npages;\n\t\t\trelptr_store(base, root->hdr.parent, (FreePageBtree *) NULL);\n\t\t\t\tFreePagePushSpanLeader(fpm, first_page, npages);\n\t\t\t}", "partial_line": "if (re", "completion": "if (result.index > 0) <|endoftext|>"}
{"context": "{\n\t\t\t\treturn 0;\n\t\t}\n\tbool\t\toperandexists;\n} QueryRepresentationOperand;", "partial_line": "} QueryR", "completion": "} QueryRepresentation; <|endoftext|>"}
{"context": "\t\t\t\trinfo = create_join_clause(root, ec, eq_op,\n{\n\t\tOid\t\t\topno;\n\t\topno = get_opfamily_member_for_cmptype(opfamily, lefttype, righttype, COMPARE_EQ);\n\t\tEquivalenceMember *rightp = rightem->em_parent ? rightem->em_parent : rightem;", "partial_line": "ec-", "completion": "ec->ec_collation, <|endoftext|>"}
{"context": "#include \"storage/fd.h\"\n#define WC_BUF_LEN  3\n}\n\t\treturn false;\n\tstp->lineno = 0;", "partial_line": "stp->curline =", "completion": "stp->curline = NULL; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tdumpIndexAttach(fout, (const IndexAttachInfo *) dobj);\n\t\t\tbreak;\n\t\t\tdumpProcLang(fout, (const ProcLangInfo *) dobj);\n\t\t\tbreak;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "static const symbol s_3_4[4] = { 'a', 'l', 'l', 'i' };\nstatic const symbol s_3_19[7] = { 'o', 'u', 's', 'n', 'e', 's', 's' };\n{ 5, s_3_7, -1, 9, 0},\n};\nstatic const symbol s_5_17[5] = { 'e', 'm', 'e', 'n', 't' };", "partial_line": "{ 2, s_5_0, -1,", "completion": "{ 2, s_5_0, -1, 1, 0}, <|endoftext|>"}
{"context": "\t.finish = tar_finish,\n\tpgoff_t\t\tofs_start;\t\t\n\tWalWriteMethod base;\n#ifdef HAVE_LIBZ\n\tz_streamp\tzp;", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t{\n\t\t\treturn true;\nmatch_index_to_operand(Node *operand,\n\tif (indkey != 0)\n\t\t\treturn true;", "partial_line": "indexpr_item = l", "completion": "indexpr_item = list_head(index->indexprs); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tif (Shutdown >= FastShutdown)\n\t\t\tsd_notify(0, \"STOPPING=1\");\n\t\t\tsd_notify(0, \"STOPPING=1\");\n\t\t\tTerminateChildren(SIGQUIT);", "partial_line": "pending_pm_", "completion": "pending_pm_child_exit = true; <|endoftext|>"}
{"context": "\t\t\t\tif (quote == PQUOTE_SQL_LITERAL)\n\t\t\t\t}\nsigjmp_buf\tsigint_interrupt_jmp;\n\t{\n\t\tsiglongjmp(sigint_interrupt_jmp, 1);", "partial_line": "cancel", "completion": "cancel_pressed = true; <|endoftext|>"}
{"context": "\t\t\t\t step2 == EEOP_HASHDATUM_FIRST_STRICT)\n\t{\n\t\t\tstate->evalfunc_private = ExecJustInnerVar;\n\t\t{\n\t\telse if (step0 == EEOP_SCAN_FETCHSOME &&", "partial_line": "(step1 == EEO", "completion": "(step1 == EEOP_FUNCEXPR_STRICT || <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  workspace->refelemlength,\n\tDatum\t\tarraySource = *op->resvalue;\n\t}\n\t\t\t\t\t\t\t\t\tsbsrefstate->upperprovided,\n\t\t\t\t\t\t\t\t\tworkspace->refelembyval,", "partial_line": "ExprContext *", "completion": "ExprContext *econtext) <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\t\t argmodes[i]);\nLCS_asString(LockClauseStrength strength)\n\t\tcase LCS_FORSHARE:\n{", "partial_line": "Assert(strengt", "completion": "Assert(strength != LCS_NONE); <|endoftext|>"}
{"context": "dsa_attach_in_place(void *place, dsm_segment *segment)\ndsa_on_dsm_detach_release_in_place(dsm_segment *segment, Datum place)\n\tdsa_release_in_place(DatumGetPointer(place));\n\tdsa_area_control *control = (dsa_area_control *) place;\n\tLWLockRelease(&control->lock);", "partial_line": "area", "completion": "area->resowner = NULL; <|endoftext|>"}
{"context": "\tif (!ProcSignalBarrierPending)\n\t\t\t\tswitch (type)\n\t\t\t\t\tsuccess = false;\n\tInterruptPending = true;\n{", "partial_line": "retu", "completion": "return true; <|endoftext|>"}
{"context": "\tcontext.prettyFlags = prettyFlags;\n}\n{\n\trte->eref = rte->alias;\n\tdpns->subplans = NIL;", "partial_line": "Lis", "completion": "List * <|endoftext|>"}
{"context": "#ifdef __cplusplus\nstatic int r_verb(struct SN_env * z);\nstatic const symbol s_0_8[6] = { 0xD9, 0xD7, 0xDB, 0xC9, 0xD3, 0xD8 };\nstatic const struct among a_0[9] =", "partial_line": "{ 3,", "completion": "{ 3, s_0_0, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\ttarget_typeids[1] = opcintype;\n\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t   \"If either collation is nondeterministic, then both collations have to be the same.\",\n\t\t\t\t\t\t\t\t   strVal(list_nth(fkconstraint->fk_attrs, i)),\n\t\t\t\t\t\t\t\t\told_pfeqop_item);", "partial_line": "Oid\t\t\tnew_", "completion": "Oid\t\t\tnew_fktype; <|endoftext|>"}
{"context": "static char *AppendSeconds(char *cp, int sec, fsec_t fsec,\nstatic bool AdjustFractMicroseconds(double frac, int64 scale,\n\t\t\t\t\t\t\tstruct pg_itm_in *itm_in);\nstatic bool AdjustFractYears(double frac, int scale,\n\t\t\t\t\t\t\t struct pg_itm_in *itm_in);", "partial_line": "static b", "completion": "static bool AdjustDays(int64 val, int scale, <|endoftext|>"}
{"context": "\t{ name, desc, identify},\nstatic char CustomNumericNames[RM_N_CUSTOM_IDS][CUSTOM_NUMERIC_NAME_LEN] = {0};\nstatic void\n\t\tsnprintf(CustomNumericNames[i], CUSTOM_NUMERIC_NAME_LEN,\n\t\t\t\t \"custom%03d\", i + RM_MIN_CUSTOM_ID);", "partial_line": "CustomRmgrDesc[i].r", "completion": "CustomRmgrDesc[i].rm_identify = default_identify; <|endoftext|>"}
{"context": "\tstatic const char *const list[] = { __VA_ARGS__, NULL }; \\\n\t\tcompletion_squery = &(Query_for_list_of_enum_values_unquoted); \\\n\t\tcompletion_charp = Query_for_list_of_timezone_names_unquoted; \\\nstatic const SchemaQuery Query_for_constraint_of_table = {\n\t.refviscondition = \"pg_catalog.pg_table_is_visible(c1.oid)\",", "partial_line": ".result = \"", "completion": ".result = \"c2.relname\", <|endoftext|>"}
{"context": "\treindexingNestLevel = GetCurrentTransactionNestLevel();\n}\nstatic void\n\t\telog(ERROR, \"cannot modify reindex state during a parallel operation\");\n}", "partial_line": "if (IsInParallel", "completion": "if (IsInParallelMode()) <|endoftext|>"}
{"context": "\t\t\t\trexpr->retexpr = newnode;\n\t\t\t\tnewnode = (Expr *) rexpr;\n\t\t}\n\t\treturn (Node *) newnode;\nNode *", "partial_line": "context.", "completion": "context.result_relation = result_relation; <|endoftext|>"}
{"context": "\t\t\t}\nvoid\n{\n\t\tif (portal->portalPinned)\n\t\t{", "partial_line": "elog(WARNING, \"skipping cl", "completion": "elog(WARNING, \"skipping cleanup for portal \\\"%s\\\"\", portal->name); <|endoftext|>"}
{"context": "{\n\tListCell   *l;\n\tListCell   *curColType = list_head(colTypes);\n\t\t\t\treturn false;\n\t\t\tif (curColType == NULL)", "partial_line": "curColType = lne", "completion": "curColType = lnext(colTypes, curColType); <|endoftext|>"}
{"context": "static int r_Step_5a(struct SN_env * z);\nstatic int r_Step_1b(struct SN_env * z);\nstatic const struct among a_0[4] =\n{ 3, s_0_1, 0, 2, 0},\nstatic const symbol s_1_4[2] = { 'g', 'g' };", "partial_line": "static const symbol s_1_10[2] =", "completion": "static const symbol s_1_10[2] = { 'a', 't' }; <|endoftext|>"}
{"context": "\tTransactionId *other_xids = ProcGlobal->xids;\n\tif (TransactionIdPrecedes(xid, RecentXmin))\n\t\t}\n\t}\n\tLWLockRelease(ProcArrayLock);", "partial_line": "h->catalog_oldes", "completion": "h->catalog_oldest_nonremovable = InvalidTransactionId; <|endoftext|>"}
{"context": "\tchar\t   *opername;\n\t\tcancel_parser_errposition_callback(&pcbstate);\n{\n\t\tOprCacheHash = hash_create(\"Operator lookup cache\", 256,\n\toprentry->opr_oid = opr_oid;", "partial_line": "OprC", "completion": "OprCacheEntry *hentry; <|endoftext|>"}
{"context": "\tmyopt.translate_header = true;\n\treturn false;\n\t\t\t\t\t  \"  o.amopopr::pg_catalog.regoperator AS \\\"%s\\\"\\n,\"\n\t\t\t\t\t  \"  o.amopstrategy AS \\\"%s\\\",\\n\"\n\t\t\t\t\t  \"    WHEN \" CppAsString2(AMOP_SEARCH) \" THEN '%s'\\n\"", "partial_line": "gettext_noop(", "completion": "gettext_noop(\"no\"), <|endoftext|>"}
{"context": "{\n\t\tdebug_elog2(DEBUG2, \"Create: in cache!\");\n\t}\n\txlrec.nmembers = nmembers;\n\tXLogBeginInsert();", "partial_line": "XLogRegisterData(members, nmembers * sizeof", "completion": "XLogRegisterData(members, nmembers * sizeof(MultiXactMember)); <|endoftext|>"}
{"context": "\tdouble\t\tval;\n\tif (result)\n\t}\n\twhile (isspace((unsigned char) *endptr))\n\t\tendptr++;", "partial_line": "if ((flags & GUC_UN", "completion": "if ((flags & GUC_UNIT) == 0) <|endoftext|>"}
{"context": "\t\tAssert(span->nallocatable > 0);\n\t\t\ttransfer_first_span(area, pool, 1, DSA_FULLNESS_CLASSES - 1);\n}\nensure_active_superblock(dsa_area *area, dsa_area_pool *pool,\n\t\t\tdsa_area_span *nextspan;", "partial_line": "tfclass = (nmax -", "completion": "tfclass = (nmax - span->nallocatable) <|endoftext|>"}
{"context": "\tif (MyReplicationSlot != NULL)\n\t\tReplicationSlotRelease();\n\t\treset_syncing_flag();\nSyncReplicationSlots(WalReceiverConn *wrconn)\n{", "partial_line": "PG_ENSURE_ERROR_CLEANU", "completion": "PG_ENSURE_ERROR_CLEANUP(slotsync_failure_callback, PointerGetDatum(wrconn)); <|endoftext|>"}
{"context": "\tpq_sendbyte(out, first_segment ? 1 : 0);\n\tAssert(first_segment);\n\treturn xid;\n}\n{", "partial_line": "pq_sendint32(out", "completion": "pq_sendint32(out, txn->xid); <|endoftext|>"}
{"context": "\t\t\tstats->stakind[slot_idx] = STATISTIC_KIND_CORRELATION;\n\telse if (nonnull_cnt > 0)\n\tint\t\t\tta = ((const ScalarItem *) a)->tupno;\n\t\treturn compare;\n\tint\t\t\tdb = ((const ScalarMCVItem *) b)->first;", "partial_line": "return", "completion": "return da - db; <|endoftext|>"}
{"context": "\t\t\t\t   new_rel_kind,\t\n\t\t\t\t   InvalidOid,\t\n\t\t\t\t   new_array_type,\t\n\t\t\t\t   NULL,\t\t\n\t\t\t\t\t\t Oid relnamespace,", "partial_line": "bool", "completion": "bool mapped_relation, <|endoftext|>"}
{"context": "{\n\tSTACK_OF(GENERAL_NAME) * peer_san;\n\t\t\t\telse\n\t\tsk_GENERAL_NAME_pop_free(peer_san, GENERAL_NAME_free);\n\t\t\t\trc = openssl_verify_peer_name_matches_certificate_name(conn,", "partial_line": "*firs", "completion": "*first_name = common_name; <|endoftext|>"}
{"context": "\treturn JSON_SUCCESS;\n}\n\tTransformJsonStringValuesState *_state = (TransformJsonStringValuesState *) state;\n\tappendStringInfoCharMacro(_state->strval, ':');\n\treturn JSON_SUCCESS;", "partial_line": "stati", "completion": "static JsonParseErrorType <|endoftext|>"}
{"context": "\t\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\t\t{\n\t\t\tbreak;\n\t\t\tAlterSchemaOwner_oid(sdepForm->objid, newrole);\n\t\t\tbreak;", "partial_line": "case Use", "completion": "case UserMappingRelationId: <|endoftext|>"}
{"context": "static int\tscannum(struct vars *v);\nstatic void repeat(struct vars *v, struct state *lp, struct state *rp,\nstatic void wordchrs(struct vars *v);\nstatic struct subre *subre(struct vars *v, int op, int flags,\nstatic void freesubre(struct vars *v, struct subre *sr);", "partial_line": "static void freesubreandsiblings(struct vars *", "completion": "static void freesubreandsiblings(struct vars *v, struct subre *sr); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\n\txl_xact_stats_item item;\n\t\t\t\t\t\t\t\t\t\t\tbool isCommit, int nestDepth);\n\t\treturn;\n\t{", "partial_line": "if (isComm", "completion": "if (isCommit && !pending->is_create) <|endoftext|>"}
{"context": "\t\t{\n\t}\n\twhile ((c = getopt_long(argc, argv, \"c:D:e:fl:m:no:O:u:x:\", long_options, NULL)) != -1)\n\t\tswitch (c)\n\t\t\tcase 'e':", "partial_line": "set_xid = strto", "completion": "set_xid = strtoul(optarg, &endptr, 0); <|endoftext|>"}
{"context": "\telse\nstatic backslashResult\n{\n\t\t\tpset.ctv_args[i] = psql_scan_slash_option(scan_state,\n\tbackslashResult status = PSQL_CMD_SKIP_LINE;", "partial_line": "bool", "completion": "bool\t\tsuccess = true; <|endoftext|>"}
{"context": "\tStringInfoData err_detail;\n\t\t\t\t\tappendStringInfo(&err_detail, _(\"Key already exists in unique index \\\"%s\\\", modified by origin \\\"%s\\\" in transaction %u at %s.\"),\n\t\t\t\telse\n\t\t\t\t\t\t\t\t localxmin, timestamptz_to_str(localts));\n\t\t\tbreak;", "partial_line": "Oid in", "completion": "Oid indexoid) <|endoftext|>"}
{"context": "\t\t\tFreeContextBuffer(outbuf.pBuffers[0].pvBuffer);\n\t\t\t\tDeleteSecurityContext(sspictx);\n\t\tif (r == SEC_I_CONTINUE_NEEDED)\n\t\t\telog(DEBUG4, \"SSPI continue needed\");\n\tFreeCredentialsHandle(&sspicred);", "partial_line": "free(sspi", "completion": "free(sspictx); <|endoftext|>"}
{"context": "\t\tkeywords[3] = \"password\";\n\t\t}\n\t\t\t!password)\n\tif (PQstatus(conn) == CONNECTION_BAD)\n{", "partial_line": "variab", "completion": "variables->vars_sorted = true; <|endoftext|>"}
{"context": "\t\t\t\tint\t\t\tl_index = lfirst_int(lc1) - 1;\n\t\t\t\tNode\t   *u_colvar;\n\t\t\t\t}\n\t\t\t\t\tres_nscolumn->p_vartype = exprType(u_colvar);\n\t\t\t\t\tres_nscolumn->p_vartypmod = exprTypmod(u_colvar);", "partial_line": "res_nscolumn->p_varnosyn =", "completion": "res_nscolumn->p_varnosyn = j->rtindex; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t\tlibpq_append_conn_error(conn, \"could not send GSSAPI negotiation packet: %s\",\n\t\t\t\t\t\t\t\t\t\t\t\tSOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)));\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pqPacketSend(conn, 0, &pv, sizeof(pv)) != STATUS_OK)", "partial_line": "libpq_append_c", "completion": "libpq_append_conn_error(conn, \"could not send SSL negotiation packet: %s\", <|endoftext|>"}
{"context": "\t\t\t\t\t\tparser_errposition(cxt->pstate, jtc->location));\n\tforeach(lc, cxt->pathNames)\n\t{\n\tchar\t   *name = namebuf;\n\tforeach(col, columns)", "partial_line": "Oid\t\t\ttypc", "completion": "Oid\t\t\ttypcoll = InvalidOid; <|endoftext|>"}
{"context": "\t\t\t\t\t*sflagset += pg_mblen(*sflagset);\n\t\t\t\tstop = true;\n\t\tereport(ERROR,\n\t{\n\tif (Conf->nspell >= Conf->mspell)", "partial_line": "if (Conf->", "completion": "if (Conf->mspell) <|endoftext|>"}
{"context": "\t}\n\t\tchar\t\tpkrelname[MAX_QUOTED_REL_NAME_LEN];\n\t\t{\n\t\t\t\t\t\t\triinfo->pf_eq_oprs[i],\n\t\tif (riinfo->hasperiod && is_no_action)", "partial_line": "Oid\t\t\tpk_period_type = RIAttType(pk_rel, riinfo-", "completion": "Oid\t\t\tpk_period_type = RIAttType(pk_rel, riinfo->pk_attnums[riinfo->nkeys - 1]); <|endoftext|>"}
{"context": "{\n\t\tPG_RETURN_NULL();\n{\n\tret = pg_read_file_common(filename_t, 0, -1, true, missing_ok);\n\t\tPG_RETURN_NULL();", "partial_line": "PG_RETURN_", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "\tGinBufferFree(buffer);\n\treturn reltuples;\n}\n\t\t\t\t\t\t\t\t sortmem, true);\nstatic void", "partial_line": "bool", "completion": "bool progress) <|endoftext|>"}
{"context": "\t\toptions.startpoint = startpoint;\n\t\t\t\tereport(LOG,\n\t\t\tfor (;;)\n\t\t\t\tchar\t   *buf;\n\t\t\t\tlong\t\tnap;", "partial_line": "errmsg(\"cannot continue WAL streaming, recovery h", "completion": "errmsg(\"cannot continue WAL streaming, recovery has already ended\"))); <|endoftext|>"}
{"context": "\t\txlrec_vacuum.nupdated = nupdatable;\n{\n\t\tIndexTuple\titup;\n\t\titup = updatable[i]->itup;\n\t{", "partial_line": "XLogRegisterBuf", "completion": "XLogRegisterBufData(0, updatedoffsets, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tint\t\t\tlen;\n\t\t\t\t\t(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),\n\t\t\tv.val.string.len = len;\n\tresult.res = pushJsonbValue(&result.parseState, WJB_END_OBJECT, NULL);", "partial_line": "Datu", "completion": "Datum\t   *key_datums, <|endoftext|>"}
{"context": "\t\t\t}\n\telse if (exprtype == JSONBOID)\nint\n\t\t\t\tempty = false;\n\t{", "partial_line": "*op->resvalue", "completion": "*op->resvalue = BoolGetDatum(exists); <|endoftext|>"}
{"context": "static const symbol s_2_0[8] = { 0xF3, 'i', 'd', 'e', 'a', 'c', 'h', 'a' };\nstatic const symbol s_2_4[6] = { 'e', 'a', 'c', 'h', 't', 'a' };\nstatic const symbol s_2_6[5] = { 'p', 'a', 'i', 't', 'e' };\nstatic const symbol s_2_12[9] = { 'g', 'r', 'a', 'f', 'a', 0xED, 'o', 'c', 'h' };\nstatic const symbol s_2_19[4] = { 'a', 'c', 'h', 't' };", "partial_line": "static", "completion": "static const struct among a_2[25] = <|endoftext|>"}
{"context": "\t\t\tcstate->input_buf_len = 0;\n\t\t\t\tcstate->line_buf.len--;\n\t\t\t\tbreak;\n\t\tif (quotec == escapec)\n\t\tint\t\t\tprev_raw_ptr;", "partial_line": "CopyLoadInpu", "completion": "CopyLoadInputBuf(cstate); <|endoftext|>"}
{"context": "\tconst unsigned char *namedata;\n}\n\tconst unsigned char *addrdata;\n\tif (addr_entry == NULL)\n}", "partial_line": "is_ip_", "completion": "is_ip_address(const char *host) <|endoftext|>"}
{"context": "static bool synchronous = false;\nstatic XLogRecPtr endpos = InvalidXLogRecPtr;\n}\nusage(void)\n\tprintf(_(\"      --if-not-exists    do not error if slot already exists when creating a slot\\n\"));", "partial_line": "printf(_(\"\\nReport bugs to <", "completion": "printf(_(\"\\nReport bugs to <%s>.\\n\"), PACKAGE_BUGREPORT); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tLOG_METAINFO_DATAFILE)));\n\t}\n\t\t\t\t\t errmsg(\"could not write file \\\"%s\\\": %m\",\n\t\t\t\t\t\t\tLOG_METAINFO_DATAFILE_TMP)));\n\t\t}", "partial_line": "CheckLogro", "completion": "CheckLogrotateSignal(void) <|endoftext|>"}
{"context": "\t\tdatt->attnotnull = satt->attnotnull;\n\trel->rd_rel->reltype = InvalidOid;\n\trel->rd_rel->relpersistence = relpersistence;\n\t\t\trel->rd_backend = INVALID_PROC_NUMBER;\n\t\t\trel->rd_islocaltemp = false;", "partial_line": "case", "completion": "case RELPERSISTENCE_TEMP: <|endoftext|>"}
{"context": "\t\t\t\t\tvalues[4] = CStringGetTextDatum(\"disabled\");\n\t\t\t\t\tbreak;\n\t\t\t\t\tif (leader_pid != InvalidPid)\n\t\t\t\t\t}\n\t\t\telse", "partial_line": "values[10] = Timesta", "completion": "values[10] = TimestampTzGetDatum(beentry->st_proc_start_timestamp); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t \"      AND n.nspname <> 'information_schema'\\n\");\n\tif (!validateSQLNamePattern(&buf, pattern, true, false,\n\tappendPQExpBuffer(&buf,\n\t\t\t\t\t  \"UNION ALL\\n\"\n\t\t\t\t\t  \"  FROM pg_catalog.pg_rewrite r\\n\"", "partial_line": "\"U", "completion": "\"UNION ALL\\n\" <|endoftext|>"}
{"context": "\t\t\t\t   JoinType jointype,\n\t\t\t\t\t\t\t\t   joinrel,\n\t\t\t\t\t\t\t\t   mergeclauses,\n\t\t\t\t\t\t\t\t   extra);\n\t}", "partial_line": "pathkeys_containe", "completion": "pathkeys_contained_in(outersortkeys, outer_path->pathkeys)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t errmsg(\"canceling statement due to conflict with recovery\"),\n\t\tdefault:\n}\n\tfor (ProcSignalReason reason = PROCSIG_RECOVERY_CONFLICT_FIRST;\n\t\t reason <= PROCSIG_RECOVERY_CONFLICT_LAST;", "partial_line": "RecoveryConflictPendingReasons[r", "completion": "RecoveryConflictPendingReasons[reason] = false; <|endoftext|>"}
{"context": "\t\t\ttablespace = PQgetvalue(res, relnum, i_spclocation);\n\t\t\tif (last_tablespace && strcmp(tablespace, last_tablespace) == 0)\n}\n\t\t\t\t\t\"FROM pg_catalog.pg_replication_slots \"\n\t\tfor (int slotnum = 0; slotnum < num_slots; slotnum++)", "partial_line": "curr->caught_up", "completion": "curr->caught_up = (strcmp(PQgetvalue(res, slotnum, i_caught_up), \"t\") == 0); <|endoftext|>"}
{"context": "\toldClassForm->relispartition = isPartition;\n\tnewIndexForm->indisvalid = true;\n\theap_freetuple(oldIndexTuple);\n\tpg_trigger = table_open(TriggerRelationId, RowExclusiveLock);\n\tforeach(lc, constraintOids)", "partial_line": "HeapTuple\tconstrai", "completion": "HeapTuple\tconstraintTuple, <|endoftext|>"}
{"context": "\tfloat8\t   *transvalues;\n{\n\tif (Sxx == 0 || Syy == 0)\n\t\tPG_RETURN_NULL();\n}", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\t\treturn -1;\n\tif (have_cert &&\n\t\tchar\t   *err = SSLerrmessage(ERR_get_error());\n\tif (have_rootcert)\n\t\t\t\treturn PGRES_POLLING_READING;", "partial_line": "return P", "completion": "return PGRES_POLLING_WRITING; <|endoftext|>"}
{"context": "\tinet\t   *a1 = PG_GETARG_INET_PP(0);\n{\n\t{\n\t\tif (is_opclause(req->node))\n\t\t{", "partial_line": "else i", "completion": "else if (is_funcclause(req->node)) <|endoftext|>"}
{"context": "\t\tquery_list = RevalidateCachedQuery(plansource, queryEnv, false);\n\tforboth(l1, plan_list, l2, plan->stmt_list)\n\t{\n\tMemoryContextSwitchTo(oldcxt);\nchoose_custom_plan(CachedPlanSource *plansource, ParamListInfo boundParams)", "partial_line": "double\t\tavg_cust", "completion": "double\t\tavg_custom_cost; <|endoftext|>"}
{"context": "\treturn pathnode;\n\tpathnode->path.pathtype = T_Append;\n\tpathnode->path.parallel_aware = parallel_aware;\n\t\tlist_sort(partial_subpaths, append_startup_cost_compare);\n\t\tif (child->parallel_aware == parallel_aware)", "partial_line": "pathnode->path.start", "completion": "pathnode->path.startup_cost = child->startup_cost; <|endoftext|>"}
{"context": "\t\t\t\telse if (notnull_constraint)\n\t\t\t\t\tif (constraint->conname &&\n\t\t\t\t\t\tnotnull_constraint->conname &&\n\t\t\t\t\t\tnotnull_constraint->conname = constraint->conname;\n\t\t\t\t\t\t\t\t errmsg(\"identity columns are not supported on typed tables\")));", "partial_line": "true", "completion": "true, false, <|endoftext|>"}
{"context": "\t\tdouble\t\tlength_hist_frac;\n\t\tif (range_cmp_bounds(typcache, &hist_lower[i], lower) < 0)\n\t\t\t\tbin_width = 0.0;\n\t\t}\n\t\telse", "partial_line": "bin_widt", "completion": "bin_width = 1.0; <|endoftext|>"}
{"context": "\tinit_var_from_num(rmax, &rmax_var);\n{\n\tinit_var(&result);\n\t\tm += DEC_DIGITS;\n#if DEC_DIGITS == 4", "partial_line": "StaticAssertDecl(lengthof(pow1", "completion": "StaticAssertDecl(lengthof(pow10) == DEC_DIGITS, \"mismatch with DEC_DIGITS\"); <|endoftext|>"}
{"context": "\tr = rmdyjul(mdy, &d);\n\tdate_test_fmt(d, \"yy/mm/dd\");\n\tdate_test_fmt(d, \"mmm. dd, yyyy\");\n\tdate_test_defmt(\"yy/mm/dd\", \"In the year 2525, in the month of July, mankind will be alive on the 28th day\");\n\tdate_test_defmt(\"yy/mm/dd\", \"47/03/29\");", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tFmgrInfo   *consistentFn;\n\tconsistentFn = palloc0_array(FmgrInfo, bdesc->bd_tupdesc->natts);\n\tptr = palloc(len);\n\tmemset(nnullkeys, 0, sizeof(int) * bdesc->bd_tupdesc->natts);\n\tfor (int keyno = 0; keyno < scan->numberOfKeys; keyno++)", "partial_line": "TupleDescAttr(bdesc", "completion": "TupleDescAttr(bdesc->bd_tupdesc, <|endoftext|>"}
{"context": "\t\t\tcluster->controldata.cat_ver = str2uint(p);\n\t\t\tif (p == NULL || strlen(p) <= 1)\n\t\t\tp++;\t\t\t\t\n\t\t\tsegno = str2uint(p);\n\t\t\tgot_log_seg = true;", "partial_line": "else if ((p = strstr", "completion": "else if ((p = strstr(bufin, \"Latest checkpoint's NextXID:\")) != NULL) <|endoftext|>"}
{"context": "\trebuild_joinclause_attr_needed(root);\nremove_rel_from_restrictinfo(RestrictInfo *rinfo, int relid, int ojrelid)\n\t\t\t\tforeach(lc2, andargs)\n\t\t\t\t\tRestrictInfo *rinfo2 = lfirst_node(RestrictInfo, lc2);\n\t\t\t\t\t   int relid, int subst)", "partial_line": "Assert(ec->ec_chil", "completion": "Assert(ec->ec_childmembers == NULL); <|endoftext|>"}
{"context": "static const symbol s_3_9[10] = { 0xD7, 0xA6, 0xD7, 0xB0, 0xD7, 0x95, 0xD7, 0xA0, 0xD7, 0x92 };\n{ 8, s_3_20, -1, 13, 0},\n{ 12, s_3_23, -1, 24, 0},\n{ 8, s_3_25, -1, 17, 0}\nstatic const symbol s_4_12[8] = { 0xD7, 0xA2, 0xD7, 0x9C, 0xD7, 0xA2, 0xD7, 0x9B };", "partial_line": "static const symbol s_4_17[1", "completion": "static const symbol s_4_17[10] = { 0xD7, 0x98, 0xD7, 0xA2, 0xD7, 0xA0, 0xD7, 0xA2, 0xD7, 0x9E }; <|endoftext|>"}
{"context": "\t\t\tOid\t\t\tntype = exprType(nexpr);\n\t\t\treturn ptype;\n\t\t}\n\t}\n\t\t\t\t\t\t\t\tformat_type_be(ptype),", "partial_line": "ret", "completion": "return ptype; <|endoftext|>"}
{"context": "\t\tif (cmpresult != 0)\n\t\tinput->numTuples++;\nstatic int\n\tfor (int nkey = 0; nkey < setopstate->numCols; nkey++)\n\t\t\t\t\tisNull2 = s2->tts_isnull[attno - 1];", "partial_line": "setop_fill_hash_table(SetOpStat", "completion": "setop_fill_hash_table(SetOpState *setopstate) <|endoftext|>"}
{"context": "extern void catalan_UTF_8_close_env(struct SN_env * z);\n#endif", "partial_line": "static const symbol s_0", "completion": "static const symbol s_0_3[2] = { 0xC3, 0xA1 }; <|endoftext|>"}
{"context": "\t\tif (blocknum == InvalidBlockNumber)\n\t\t\t\tread_stream_unget_block(stream, blocknum);\nstatic ReadStream *\n\t\t\t\t\t   ForkNumber forknum,\n\tint16\t\tqueue_overflow;", "partial_line": "int", "completion": "int\t\t\tmax_ios; <|endoftext|>"}
{"context": "\t\t\t log_opts.basedir, \"loadable_libraries.txt\");\n\t\t  sizeof(LibraryInfo), library_name_compare);\n\t\tint\t\t\tllen = strlen(lib);\n\t\t\t\tif (script == NULL && (script = fopen_priv(output_path, \"w\")) == NULL)\n\t\t\t\twas_load_failure = false;", "partial_line": "pg_log(PG_", "completion": "pg_log(PG_REPORT, \"fatal\"); <|endoftext|>"}
{"context": "\treturn inhinfo;\n\tif (fout->remoteVersion < 110000)\n\t\treturn;\n\tappendPQExpBufferStr(query,\n\t\t\t\t\t\t \"ON c.opcmethod = a.oid\\n\"", "partial_line": "\"WHERE opcname = 'en", "completion": "\"WHERE opcname = 'enum_ops' \" <|endoftext|>"}
{"context": "\t\tfldsep = PG_GETARG_TEXT_PP(1);\n\t\tTextPositionState state;\n\t\t\tfound = text_position_next(&state);\n\t\t\t\tbreak;\n\t\tbool\t\tnulls[1];", "partial_line": "tstate->t", "completion": "tstate->tupdesc, <|endoftext|>"}
{"context": "\tif (pcxt->nworkers > 0)\nLaunchParallelWorkers(ParallelContext *pcxt)\n\tsprintf(worker.bgw_library_name, \"postgres\");\n\t{\n\t\t{", "partial_line": "pcxt->nworkers_lau", "completion": "pcxt->nworkers_launched++; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tpointflag = 0;\n\t\t\t\t\t{\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tformat += 2;", "partial_line": "fo", "completion": "format += 2; <|endoftext|>"}
{"context": "drop_existing_subscriptions(PGconn *conn, const char *subname, const char *dbname)\ncheck_and_drop_existing_subscriptions(PGconn *conn,\n\tchar\t   *dbname;\n\t\tdrop_existing_subscriptions(conn, PQgetvalue(res, i, 0),\n\t\tdisconnect_database(conn, false);", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\tRelation\trelation;\n\targuments[0] = v1;\n\t\t\t\t\t\t\t\t\t  NULL,\n\t\t\t{\n\t\t\tbreak;\t\t\t\t", "partial_line": "table_c", "completion": "table_close(relation, AccessShareLock); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  false,\t\n\treturn ccbin;\nreplace_domain_constraint_value(ParseState *pstate, ColumnRef *cref)\n\t{\n\t\t\t\t\t\t\t\t\t\t\t   NULL,", "partial_line": "Inv", "completion": "InvalidOid, <|endoftext|>"}
{"context": "\tJsonOutput *output = jsexpr->output;\n\t\t\t\t\t\t\t\t\t\t\t expr->expr,\n\t\t{\n\t\t\tget_type_category_preferred(returning->typid, &typcategory,\n\t\t\t\tereport(ERROR,", "partial_line": "errhint(\"Try returni", "completion": "errhint(\"Try returning a string type or bytea.\"))); <|endoftext|>"}
{"context": "\t\treturn buf;\n\t\t\treturn \"EADDRINUSE\";\n\t\tcase EADDRNOTAVAIL:\n\t\tcase EBADMSG:\n\t\t\treturn \"EBUSY\";", "partial_line": "case E", "completion": "case EDOM: <|endoftext|>"}
{"context": "pg_hmac_free(pg_hmac_ctx *ctx)\nconst char *\n{\n\tif (ctx->errreason)\n\t\tcase PG_HMAC_ERROR_DEST_LEN:", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\tif (!type_is_array(srctype))\n\t\t\treturn true;\n\tif (targettype == ANYENUMOID)\n\t\tif (is_complex_array(srctype))\nfind_coercion_pathway(Oid targetTypeId, Oid sourceTypeId,", "partial_line": "sourceTypeId", "completion": "sourceTypeId = getBaseType(sourceTypeId); <|endoftext|>"}
{"context": "pg_vfprintf(FILE *stream, const char *fmt, va_list args)\n\tPrintfTarget target;\n\treturn target.failed ? -1 : target.nchars;\n\treturn len;\n\t\t\ttarget->failed = true;", "partial_line": "PrintfAr", "completion": "PrintfArgValue *argvalues); <|endoftext|>"}
{"context": "\tshmInvalBuffer->nextThreshold = CLEANUP_MIN;\n\tSpinLockInit(&shmInvalBuffer->msgnumLock);\n\tshmInvalBuffer->numProcs = 0;\nSharedInvalBackendInit(bool sendOnly)\n\tProcState  *stateP;", "partial_line": "pid_t", "completion": "pid_t\t\toldPid; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),\n\t\t\t\t errmsg_internal(\"invalid transaction ID in streamed replication transaction\")));\n\t\t\tif (pa_send_data(winfo, s->len, s->data))\n\t\tcase TRANS_LEADER_PARTIAL_SERIALIZE:\n\t\t\tstream_write_change(action, &original_msg);", "partial_line": "action", "completion": "action != LOGICAL_REP_MSG_TYPE); <|endoftext|>"}
{"context": "            }\n        case 149:\n            if (!(z->I[1])) return 0;\n            }\n                if (ret < 0) return ret;", "partial_line": "if (ret", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "void\n\tRelation\trel = scan->indexRelation;\n}\n_bt_array_set_low_or_high(Relation rel, ScanKey skey, BTArrayKeyInfo *array,\n{", "partial_line": "if", "completion": "if (!low_not_high) <|endoftext|>"}
{"context": "\t\tdbconnlimit = defGetInt32(connlimitEl);\n\t\t\tereport(ERROR,\n\t\tereport(ERROR,\n\t\t\t\t\t &src_dboid, &src_owner, &src_encoding,\n\t\t\t\terrmsg(\"cannot use invalid database \\\"%s\\\" as template\", dbtemplate),", "partial_line": "if (pg_s", "completion": "if (pg_strcasecmp(strategy, \"wal_log\") == 0) <|endoftext|>"}
{"context": "\trelid = RangeVarGetRelidExtended(stmt->relation, AccessExclusiveLock,\n\t\t\t\t\t\t\t\t\t stmt->missing_ok ? RVR_MISSING_OK : 0,\n\t\t\t\t\t\t\t\t\t RangeVarCallbackForRenameAttribute,\n\t\t\t\t\t\t   Oid mytypid,\n\t\t\t\t\t\t   int expected_parents)", "partial_line": "targetrelation = relatio", "completion": "targetrelation = relation_open(myrelid, AccessExclusiveLock); <|endoftext|>"}
{"context": "\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t   key->partsupfunc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   values, isnull);\n\t\t\t{\n\t\t\t\t\tif (cmpval == 0)", "partial_line": "if (bound", "completion": "if (bound_offset >= 0 && equal) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  \"ORDER BY 1;\",\n\t\t\tresult = PSQLexec(buf.data);\n\t\t\t\tgoto error_return;\n\t\t}\n\t\t\tprintfPQExpBuffer(&buf,", "partial_line": "\"", "completion": "\"       conname,\\n\" <|endoftext|>"}
{"context": "\t\t\t\t\tsnprintf(buf, v.val.string.len + 1, \"%s\", v.val.string.val);\n\t\t\t\t\t\t\t errmsg(\"object keys must be strings\")));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\tswitch (type)", "partial_line": "single_s", "completion": "single_scalar = true; <|endoftext|>"}
{"context": "{ 3, s_2_466, -1, 116, 0},\n{ 4, s_2_468, 466, 33, 0},\n{ 6, s_2_474, 466, 122, 0},\n{ 4, s_2_482, 466, 13, 0},\n{ 6, s_2_484, 482, 6, 0},", "partial_line": "{ 6, s_2_496, 4", "completion": "{ 6, s_2_496, 492, 94, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\tbreak;\n\t\tdefault:\n\t\t\telog(ERROR, \"unrecognized SQL/JSON expression op %d\",", "partial_line": "*op-", "completion": "*op->resnull = true; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tif (clause_is_strict_for(clause,\n\t\t\t\t\t\t}\n\t\t\t\treturn false;\t\n\t\t\tbreak;", "partial_line": "defa", "completion": "default: <|endoftext|>"}
{"context": "\t\t\twch[3] = 0x80 | (cvalue & 0x3F);\n\t\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),\n\t\tif ((is_mb && (cvalue > 127)) || (!is_mb && (cvalue > 255)))\n\t\t\tereport(ERROR,\n{", "partial_line": "text", "completion": "text\t   *string = PG_GETARG_TEXT_PP(0); <|endoftext|>"}
{"context": "\tchar\t   *sql,\n\twhile ((p = strchr(p, ':')) != NULL)\n\t\tchar\t\tvar[13];\n\t\tchar\t   *name;\n\t\t\t const char *line, const char *command,", "partial_line": "const char *msg, c", "completion": "const char *msg, const char *more, int column) <|endoftext|>"}
{"context": "#if  defined(WIN32) || defined(__CYGWIN__)\n#else", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "{\n\tCommandId\tcombocid;", "partial_line": "typedef ComboCidEntr", "completion": "typedef ComboCidEntryData *ComboCidEntry; <|endoftext|>"}
{"context": "\t\toid = GetSysCacheOid3(COLLNAMEENCNSP,\n\tmemset(nulls, 0, sizeof(nulls));\n\tnamestrcpy(&name_name, collname);\n\toid = GetNewOidWithIndex(rel, CollationOidIndexId,\n\tvalues[Anum_pg_collation_collprovider - 1] = CharGetDatum(collprovider);", "partial_line": "values[Anum_pg_collation_collcollate - 1] = CStringGe", "completion": "values[Anum_pg_collation_collcollate - 1] = CStringGetTextDatum(collcollate); <|endoftext|>"}
{"context": "\t    buf_ptr++;\n\t    if (t_ptr >= buf_end)\n    }\n\tcase 014:\t\t\n\t\tdump_line();", "partial_line": "*e_com++", "completion": "*e_com++ = ' ', *e_com++ = '*', *e_com++ = ' '; <|endoftext|>"}
{"context": "}\n\tif (ARR_NDIM(acl) != 1)\n\t\t\t\t errmsg(\"ACL arrays must be one-dimensional\")));\n\t\t\t\t errmsg(\"ACL arrays must not contain null values\")));\n{", "partial_line": "s = aclparse", "completion": "s = aclparse(s, aip, escontext); <|endoftext|>"}
{"context": "\t\trelation_close(rel, lmode);\n\t\tPopActiveSnapshot();\n\t\tCommitTransactionCommand();\n\t}\n\t{", "partial_line": "PopActiveSnaps", "completion": "PopActiveSnapshot(); <|endoftext|>"}
{"context": "{\n\toldCtx = MemoryContextSwitchTo(buildstate->tmpCtx);\n\twhile (!spgdoinsert(index, &buildstate->spgstate, tid,\n\t{", "partial_line": "spgbuild(Relation", "completion": "spgbuild(Relation heap, Relation index, IndexInfo *indexInfo) <|endoftext|>"}
{"context": "\t}\n\t\tObjectAddressSet(referenced, TransformRelationId, transformid);\n\t\trecordDependencyOnExpr(&myself, prosqlbody, NIL, DEPENDENCY_NORMAL);\n\t\t\t\t\t\t\t   NIL, DEPENDENCY_NORMAL);\n\t\t\tif (set_items)\t\t", "partial_line": "pgstat_creat", "completion": "pgstat_create_function(retval); <|endoftext|>"}
{"context": "\tCompoundAffixFlag *fv1 = (CompoundAffixFlag *) f1,\n}\n\t}\n{\n\tint\t\t\tl1 = strlen((const char *) s1) - 1,", "partial_line": "l2 = strlen((const ch", "completion": "l2 = strlen((const char *) s2) - 1, <|endoftext|>"}
{"context": "\t\t\t\t&& (!SxactIsCommitted(writer)\n\t\t\t\t\t|| t2->prepareSeqNo <= writer->commitSeqNo)\n\t\t\t\tbreak;\n\t}\n\t\t\t\t\t&& (!SxactIsCommitted(t0)", "partial_line": "&& (!SxactIsRe", "completion": "&& (!SxactIsReadOnly(t0) <|endoftext|>"}
{"context": "\tupgrade_task_free(task);\n\t\tpg_fatal(\"Your installation contains \\\"contrib/isn\\\" functions which rely on the\\n\"\nstatic void\n{\n\tint\t\t\ti_typnsp = PQfnumber(res, \"typnsp\");", "partial_line": "fprintf(report->file, \"  (oid=%s) %s.%s", "completion": "fprintf(report->file, \"  (oid=%s) %s.%s (%s.%s, NONE)\\n\", <|endoftext|>"}
{"context": "\t\t\t   file, VfdCache[file].fileName,\nretry:\n\tpgstat_report_wait_end();\n\tDO_DB(elog(LOG, \"FileSize %d (%s)\",\n\t{", "partial_line": "file, VfdCache[file", "completion": "file, VfdCache[file].fileName)); <|endoftext|>"}
{"context": "static int\n\t\t\t\t\t   const struct sockaddr_in *netmask)\n\t\treturn 1;\n\t{\n\t\t\t netmask->sin6_addr.s6_addr[i]) != 0)", "partial_line": "char", "completion": "char\t   *endptr; <|endoftext|>"}
{"context": "\t\t\tmatch_sjinfo = sjinfo;\n\t\t\t\t bms_equal(sjinfo->syn_righthand, rel2->relids) &&\n\t\t\t\t bms_equal(sjinfo->syn_righthand, rel1->relids) &&\n\t\t\t\tcontinue;\t\t\n\t{", "partial_line": "Relid", "completion": "Relids\t\tjoin_lateral_rels; <|endoftext|>"}
{"context": "\t\t\tcoll = ((const CoerceToDomain *) expr)->resultcollid;\n\t\t\tbreak;\n\t\t\tcoll = exprCollation((Node *) ((const InferenceElem *) expr)->expr);\n\t\t\tbreak;\n\t\tcase T_FuncExpr:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tpage->status = oldstatus;\n\t\tpagetable_destroy(tbm->pagetable);\n{\n\t{\n\t\tptpages = dsa_get_address(dsa, istate->spages);", "partial_line": "tbm_add_tuples(TIDBitmap *tbm, c", "completion": "tbm_add_tuples(TIDBitmap *tbm, const ItemPointer tids, int ntids, <|endoftext|>"}
{"context": "\tint\t\t\tdno;\n\tPLpgSQL_datum *datum;\n\t\tscratch.d.cparam.paramfunc = plpgsql_param_eval_recfield;\n\t\tscratch.d.cparam.paramfunc = plpgsql_param_eval_generic;\n\tAssert(var->dtype == PLPGSQL_DTYPE_VAR);", "partial_line": "case PLPGSQL_RWO", "completion": "case PLPGSQL_RWOPT_TRANSFER: <|endoftext|>"}
{"context": "\t\t\t errmsg(\"value out of range: overflow\")));\nfloat_underflow_error(void)\n\tPG_RETURN_FLOAT4(float4in_internal(num, NULL, \"real\", num,\n}\nfloat4", "partial_line": "ereturn(", "completion": "ereturn(escontext, 0, <|endoftext|>"}
{"context": "\t\t\t   *end = src + len;\n\twhile (s < end)\n\t\tif (pos < 0)\n\t\t{\n\t\t*p++ = _base64[(buf >> 12) & 0x3f];", "partial_line": "int\t\t\tpo", "completion": "int\t\t\tpos = 0, <|endoftext|>"}
{"context": "\treturn tmp;\n\tstruct varlena *result;\n\t\tereport(ERROR,\n\tSET_VARSIZE(result, rawsize + VARHDRSZ);\n\treturn result;", "partial_line": "struct varlen", "completion": "struct varlena *result; <|endoftext|>"}
{"context": "\t\t\t\trightop = ((RelabelType *) rightop)->arg;\n\t\t\tAssert(rightop != NULL);\n\t\t\t\tif (((Const *) rightop)->constisnull)\n\t\t\t\t{\n\t\t\t\t\t\t\tpalloc(max_runtime_keys * sizeof(IndexRuntimeKeyInfo));", "partial_line": "scanval", "completion": "scanvalue); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tssize_t srclen, pg_locale_t locale);\nstatic size_t strnxfrm_libc(char *dest, size_t destsize,\n\t\t\t\t\t\t\t\t\t pg_locale_t locale);\n#endif\n#ifdef TRUST_STRXFRM", "partial_line": "#", "completion": "#else <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tAlterDomainDefault(stmt->typeName,\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\taddress =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  stmt->missing_ok);", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\tappendPQExpBufferStr(details, \",\\n    FINALFUNC_MODIFY = SHAREABLE\");\n\t\tappendPQExpBuffer(details, \",\\n    MSSPACE = %s\",\n\t\tif (aggmfinalextra)\n\t\t\t\tcase AGGMODIFY_READ_ONLY:\n\t\t}", "partial_line": "aggsortconvop = getFormatt", "completion": "aggsortconvop = getFormattedOperatorName(aggsortop); <|endoftext|>"}
{"context": "\t\tResourceOwnerRelease(portal->resowner,\n\t\t\t\t\t\t\t RESOURCE_RELEASE_LOCKS,\n\t\t\t\t\t\t\t isCommit, false);\n{\n\t\tPortal\t\tportal = hentry->portal;", "partial_line": "PortalReleas", "completion": "PortalReleaseCachedPlan(portal); <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\t\t\t\t\t   xlrec->locator);\n\t\tcase XLOG_BTREE_INSERT_LEAF:\n\t\t\tbreak;\n\t\tcase XLOG_BTREE_INSERT_UPPER:", "partial_line": "btree_xlog_insert(", "completion": "btree_xlog_insert(false, false, false, record); <|endoftext|>"}
{"context": "\t\tchar\t   *sharedquery;\n\t}\n\tbtleader->sharedsort = sharedsort;\n\tbtleader->walusage = walusage;\n\tbtleader->bufferusage = bufferusage;", "partial_line": "buildstate->btle", "completion": "buildstate->btleader = btleader; <|endoftext|>"}
{"context": "\t\t\tvalidateDomainNotNullConstraint(domainoid);\n\tOid\t\t\tdomainoid;\n\tRelation\ttyprel;\n\tDatum\t\tval;\n\tcheckDomainOwner(tup);", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\t\t\t\t\t\t\t\t  l_ptr(TypeStorageBool));\n\t\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t  l_sbool_const(1), \"\"),", "partial_line": "l_call", "completion": "l_call(b, <|endoftext|>"}
{"context": "#define diag(...)\t\t\temit_tap_output(DIAG, __VA_ARGS__)\n#define bail(...)\t\t\tbail_out(false, __VA_ARGS__)\n\t\tlim.rlim_cur = lim.rlim_max;\n#endif\n\tva_start(ap, fmt);", "partial_line": "test", "completion": "testnumber, <|endoftext|>"}
{"context": "\tbool\t\tlower2 = b2->lower;\n\t\tif (kind1[i] < kind2[i])\n\t\t\treturn -colnum;\n\t\t\tbreak;\n\t\t\t\t\t\t   Datum *rb_datums, PartitionRangeDatumKind *rb_kind,", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   PageGetItemId(page, chainSrc[i]));\n\t}\n\t{\n\t\t\t\tmax = PageGetMaxOffsetNumber(page);\n\t\t\t\t lt->tupstate);", "partial_line": "XLogBeg", "completion": "XLogBeginInsert(); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tAnum_pg_attribute_attfdwoptions,\n\tif (isnull)\n\t\t\t\t\t\t\t\t\toptions,\n\trepl_repl[Anum_pg_attribute_attfdwoptions - 1] = true;\n\tCatalogTupleUpdate(attrel, &newtuple->t_self, newtuple);", "partial_line": "ObjectAddressSubSet(address, Rela", "completion": "ObjectAddressSubSet(address, RelationRelationId, <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\"misbehavior in various character string processing functions.\",\n\t\tpg_log_error_hint(\"Rerun %s and either do not specify an encoding explicitly, \"\n\t}\n\tif (!(is_encoding_supported_by_icu(user_enc)))", "partial_line": "pg_log_error_detail(\"The encoding you selected (%s) is", "completion": "pg_log_error_detail(\"The encoding you selected (%s) is not supported with the ICU provider.\", <|endoftext|>"}
{"context": "    z->ket = z->c;\n    z->bra = z->c;\n    if (!find_among_b(z, a_59, 1)) return 0;\n        if (ret < 0) return ret;\n    }", "partial_line": "if (z->c > z-", "completion": "if (z->c > z->lb) return 0; <|endoftext|>"}
{"context": "static const symbol s_2_179[6] = { 'i', 'v', 'i', 't', 'a', 't' };\nstatic const symbol s_2_197[3] = { 'i', 0xC3, 0xB3 };\n{ 4, s_2_25, 24, 1, 0},\n{ 3, s_2_34, -1, 1, 0},\n{ 4, s_2_41, -1, 1, 0},", "partial_line": "{ 4, s_2_50,", "completion": "{ 4, s_2_50, 49, 1, 0}, <|endoftext|>"}
{"context": "\tif (p == NULL)\n\tappendPQExpBufferStr(&my_command->lines, p);\nstatic void\n\tpg_free(command);\n}", "partial_line": "strlcpy(buffer, my_command->lines.data,", "completion": "strlcpy(buffer, my_command->lines.data, sizeof(buffer)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t BYTES_TO_KILOBYTES(metrics->bytesSent),\n\t\tif (es->buffers && peek_buffer_usage(es, &metrics->bufferUsage))\n\t}\n\telse\n\t\t\t\t\t\t\t\t 1000.0 * INSTR_TIME_GET_DOUBLE(metrics->timeSpent),", "partial_line": "ExplainCloseGroup(\"Serialization\", \"Seriali", "completion": "ExplainCloseGroup(\"Serialization\", \"Serialization\", true, es); <|endoftext|>"}
{"context": "#define MAX_MAYBE_ENTRIES\t4\nstatic GinTernaryValue\nstatic bool\n\t\t\t\t\t\t\t\t\t\t\t\t\t key->collation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t UInt32GetDatum(key->nuserentries),", "partial_line": "UInt16Get", "completion": "UInt16GetDatum(key->strategy), <|endoftext|>"}
{"context": "\tdeconstruct_array_builtin(key_array, TEXTOID, &key_datums, &key_nulls, &key_count);\n\t\t\tappendStringInfoString(&result, \"null\");\n\t\t\t\t\t\t\t (text *) DatumGetPointer(val_datums[i]));\n\tpfree(key_nulls);\n\tpfree(val_nulls);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "static const symbol s_2_33[3] = { 'e', 't', 'a' };\nstatic const symbol s_2_49[3] = { 'b', 'l', 'e' };\nstatic const symbol s_2_51[4] = { 'i', 'b', 'l', 'e' };\nstatic const symbol s_2_68[4] = { 0xED, 'v', 'o', 'l' };\nstatic const symbol s_2_84[2] = { 'o', 'r' };", "partial_line": "static const symbol", "completion": "static const symbol s_2_85[3] = { 'd', 'o', 'r' }; <|endoftext|>"}
{"context": "\tvalues[Anum_pg_ts_parser_prsnamespace - 1] = ObjectIdGetDatum(namespaceoid);\n\tforeach(pl, parameters)\n\t\t{\n\t\t\t\tget_ts_parser_func(defel, Anum_pg_ts_parser_prstoken);\n\t\t{", "partial_line": "errmsg(\"text sear", "completion": "errmsg(\"text search parser gettoken method is required\"))); <|endoftext|>"}
{"context": "Datum\n\tOid\t\t\ttypelem = PG_GETARG_OID(1);\n\tNode\t   *escontext = fcinfo->context;\n\tchar\t   *field[MAXDATEFIELDS];\n\tDateTimeErrorExtra extra;", "partial_line": "result = SetEpochTim", "completion": "result = SetEpochTimestamp(); <|endoftext|>"}
{"context": "\t\t\tappendPQExpBufferStr(query, \"ALWAYS\");\n\t\t\t\t\t\t  \"UNLOGGED \" : \"\",\n\telse\n\t\t\t\t\t\t\t\t  .namespace = tbinfo->dobj.namespace->dobj.name,\n\tif (OidIsValid(tbinfo->owning_tab) && !tbinfo->is_identity_sequence)", "partial_line": "if (", "completion": "if (owning_tab == NULL) <|endoftext|>"}
{"context": "\tunion\n\t}\t\t\ttbuf;\n\tuint32\t\tnewlen;\n\tItemPointerSetOffsetNumber(&target_tid, xlrec->offnum);\n\t\tBuffer\t\tvmbuffer = InvalidBuffer;", "partial_line": "action = XLogReadBufferForRedo", "completion": "action = XLogReadBufferForRedo(record, 0, &buffer); <|endoftext|>"}
{"context": "\t\tportal = CreatePortal(name, false, false);\n\tspicallbackarg.query = plansource->query_string;\n\t\tcplan = NULL;\t\t\t\n\t\t\t\t\t  stmt_list,\n\tif (!(portal->cursorOptions & (CURSOR_OPT_SCROLL | CURSOR_OPT_NO_SCROLL)))", "partial_line": "linitial_node(Planne", "completion": "linitial_node(PlannedStmt, stmt_list)->commandType != CMD_UTILITY && <|endoftext|>"}
{"context": "\t\tretval = InputFunctionCall(&prodesc->result_in_func,\npltcl_trigger_handler(PG_FUNCTION_ARGS, pltcl_call_state *call_state,\n\tpltcl_proc_desc *prodesc;\n\tint\t\t\ttcl_rc;\n\t\t\t\t\t\t\t\t Tcl_NewStringObj(utf_e2u(stroid), -1));", "partial_line": "Tcl_ListObj", "completion": "Tcl_ListObjAppendElement(NULL, tcl_trigtup, Tcl_NewObj()); <|endoftext|>"}
{"context": "}\n\tQuery\t   *parse = root->parse;\n\t\t\t\t\t\t\t   0,\n\t\t\tgroup_by_has_partkey(input_rel, extra->targetList,\n\t}", "partial_line": "if ((extra->flags &", "completion": "if ((extra->flags & GROUPING_CAN_PARTIAL_AGG) != 0) <|endoftext|>"}
{"context": "\t\tother = b;\n\t\tpfree(a);\n}\n#ifdef REALLOCATE_BITMAPSETS\n\ta = bms_copy_and_free(a);", "partial_line": "if", "completion": "if (a == NULL) <|endoftext|>"}
{"context": "\t}\n\t\tdest_flags = p.flags & (PIPE_PROTO_DEST_STDERR |\n\t\t\tList\t   *buffer_list;\n\t\t\t\t\tbreak;\n\t\t\t\t\tstr = &(existing_slot->data);", "partial_line": "p.le", "completion": "p.len); <|endoftext|>"}
{"context": "static bool\n{\n\t\t\t\t\t\t\t   bool escape_period)\n\tinitStringInfo(&buf);\n\t\t}", "partial_line": "return buf.", "completion": "return buf.data; <|endoftext|>"}
{"context": "\t\t\t\tstrcmp(de->d_name + 8, firstoff + 8) >= 0 &&\n\t\t\t{\n\t\tCheckXLogRemoved(startsegno, state.starttli);\n\t\t\t\t\t\t &tli, &segno, wal_segment_size);\n\t\t\tereport(ERROR,", "partial_line": "char\t   *wal", "completion": "char\t   *walFileName = (char *) lfirst(lc); <|endoftext|>"}
{"context": "describeTypes(const char *pattern, bool verbose, bool showSystem)\n{\n\tPGresult   *res;\n\t\t\t\t\t\t  \"      THEN CAST('tuple' AS pg_catalog.text)\\n\"\n\t\t\t\t\t\t  \"    ELSE CAST(t.typlen AS pg_catalog.text)\\n\"", "partial_line": "\"  END", "completion": "\"  END AS \\\"%s\\\",\\n\" <|endoftext|>"}
{"context": "\tif (!schemaName)\n\t}\n\t\t\t\t\t   get_database_name(MyDatabaseId));\n\t\t\t\t errdetail(\"The prefix \\\"pg_\\\" is reserved for system schemas.\")));\n\t\tif (OidIsValid(namespaceId))", "partial_line": "ObjectAddressSet(address, NamespaceR", "completion": "ObjectAddressSet(address, NamespaceRelationId, namespaceId); <|endoftext|>"}
{"context": "\t\t\tindxinfo[j].indnullsnotdistinct = (PQgetvalue(res, j, i_indnullsnotdistinct)[0] == 't');\n\t\t\t\tNULL, NULL\n\t\t\t{\n\t\t\t\t\tconstrinfo->condef = NULL;\n\t\t\t\tconstrinfo->conperiod = *(PQgetvalue(res, j, i_conperiod)) == 't';", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\tnewXlogSegNo = minXlogSegNo;\n\t{\n\tif ((fd = open(XLOG_CONTROL_FILE, O_RDONLY | PG_BINARY, 0)) < 0)\n\t\texit(1);\n\t\t\t\t\t\t\t\t\tControlFile.xlog_seg_size),", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\tres = true;\n\t\t\t\t\tres = false;\n\t\t\tres = true;\n\t\t\t\tif (!check[i])\n\t\t\t\t{", "partial_line": "res = fa", "completion": "res = false; <|endoftext|>"}
{"context": "#include \"common/int128.h\"\n#include \"parser/scansup.h\"\n#include \"utils/datetime.h\"", "partial_line": "#e", "completion": "#endif <|endoftext|>"}
{"context": "{ 8, s_11_10, -1, 1, 0}\nstatic const symbol s_12_6[16] = { 0xCE, 0xB1, 0xCE, 0xBD, 0xCF, 0x84, 0xCE, 0xB9, 0xCE, 0xB4, 0xCE, 0xB1, 0xCE, 0xBD, 0xCE, 0xB5 };\nstatic const struct among a_12[7] =\n{ 4, s_12_0, -1, 1, 0},\nstatic const symbol s_13_0[10] = { 0xCF, 0x84, 0xCE, 0xBF, 0xCF, 0x80, 0xCE, 0xB9, 0xCE, 0xBA };", "partial_line": "static const symbol s_14_0[12] = { 0xCE, 0xB9, 0xCF, 0x83, 0xCE, 0xBC, 0xCE", "completion": "static const symbol s_14_0[12] = { 0xCE, 0xB9, 0xCF, 0x83, 0xCE, 0xBC, 0xCE, 0xBF, 0xCF, 0x85, 0xCF, 0x83 }; <|endoftext|>"}
{"context": "\tHashCompareFunc match;\n\tif (action == HASH_ENTER || action == HASH_ENTER_NULL)\n\t\tprevBucketPtr = &(currBucket->link);\n\t\t*foundPtr = (bool) (currBucket != NULL);\n\t\t\t\tAssert(hctl->freeList[freelist_idx].nentries > 0);", "partial_line": "hctl->freeLi", "completion": "hctl->freeList[freelist_idx].nentries--; <|endoftext|>"}
{"context": "\t\t\td = -1;\n\t\tif (d < 0)\n\t}\n\t\tERR(REG_EESCAPE);\n}", "partial_line": "brenext(struct v", "completion": "brenext(struct vars *v, <|endoftext|>"}
{"context": "{\nstatic text *headline_json_value(void *_state, char *elem_value, int elem_len);\n\tfuncctx->attinmeta = TupleDescGetAttInMetadata(tupdesc);\n}\n{", "partial_line": "char\t\ttx", "completion": "char\t\ttxtid[16]; <|endoftext|>"}
{"context": "\t\t\treturn 1;\n\treturn 0;\n}\n\t\t\t\trscale2;\n\t\t\t\ti2;", "partial_line": "int\t\t\tcar", "completion": "int\t\t\tcarry = 0; <|endoftext|>"}
{"context": "\t}\n\tArrayBuildState *state;\n}\n\tMemoryContext aggcontext;\n\t{", "partial_line": "state = (ArrayBuildS", "completion": "state = (ArrayBuildStateArr *) PG_GETARG_POINTER(0); <|endoftext|>"}
{"context": "\tfile_crc = *((pg_crc32c *) (buf + crc_offset));\n\tchar\t   *errormsg;\n\t\t\t\t errdetail(\"Failed while allocating a WAL reading processor.\")));\n\tif (record == NULL)\n\t\t\tereport(ERROR,", "partial_line": "errmsg(\"could not read two-phase state f", "completion": "errmsg(\"could not read two-phase state from WAL at %X/%X\", <|endoftext|>"}
{"context": "\t\t\tif (query_buf->len == 0)\n\t\t\t\tprompt_status = PROMPT_READY;\n\t\t\t}\n\t\t\t}\n\t\t\tputs(_(\"The input is a PostgreSQL custom-format dump.\\n\"", "partial_line": "successResult = E", "completion": "successResult = EXIT_FAILURE; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   &aggstate->perhash[batch->setno].hashiter);\n\tTupleTableSlot *result = NULL;\n\t\t\tif (!agg_refill_hash_table(aggstate))\n\t\t\t{\nstatic TupleTableSlot *", "partial_line": "AggStatePerHash", "completion": "AggStatePerHash perhash; <|endoftext|>"}
{"context": "\t\t   var->digits[last_digit_pos] == 0)\n\tif (last_digit_pos >= 0)\n\t\t\t\tlast_digit /= 10;\n\telse\n\tinit_var_from_num(num, &arg);", "partial_line": "PG_RETURN_NU", "completion": "PG_RETURN_NUMERIC(duplicate_numeric(num)); <|endoftext|>"}
{"context": "\t\t}\n\t\t{\n\t\t\tpreprocess_aggrefs(root, (Node *) parse->havingQual);\n\t\t\twflists = find_window_functions((Node *) root->processed_tlist,\n\t\t\t\tparse->hasWindowFuncs = false;", "partial_line": "preprocess_minmax_aggreg", "completion": "preprocess_minmax_aggregates(root); <|endoftext|>"}
{"context": "\t\tResetUsage();\n\t{\n\t\telse\n\t\tListCell   *lc;\n\t\tforeach(lc, querytree_list)", "partial_line": "elog(WARNING, \"outfuncs/r", "completion": "elog(WARNING, \"outfuncs/readfuncs failed to produce an equal rewritten parse tree\"); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\tPQfinish(con);\n\t\t\t\tappendPQExpBufferStr(&stats, \", \");\n\t\t\t\t PQgetvalue(res, 0, 0));\n\t\tpg_log_warning(\"scale option ignored, using count from pgbench_branches table (%d)\",", "partial_line": "s", "completion": "scale); <|endoftext|>"}
{"context": "\t\t\t\t\tconst IndexInfo *indexInfo,\n\tfor (i = 0; i < indexInfo->ii_NumIndexAttrs; i++)\n\t\texprsDatum = CStringGetTextDatum(exprsString);\n\t}\n\tvalues[Anum_pg_index_indimmediate - 1] = BoolGetDatum(immediate);", "partial_line": "values[Anum_pg_index_in", "completion": "values[Anum_pg_index_indkey - 1] = PointerGetDatum(indkey); <|endoftext|>"}
{"context": "}\n\tscanstate->ss.ps.plan = (Plan *) node;\n\tscanstate->eflags = eflags;\nExecEndCteScan(CteScanState *node)\n\tif (node->leader == node)", "partial_line": "node->leader", "completion": "node->leader->eof_cte = false; <|endoftext|>"}
{"context": "}\n\t{\n\t}\n\t\t\t\tvoid *callback_data)\n\t\t\tpg_fatal(\"could not read COPY data: %s\",", "partial_line": "pg_fatal(\"backgr", "completion": "pg_fatal(\"background process terminated unexpectedly\"); <|endoftext|>"}
{"context": "\t\t\taggstate->hash_disk_used = disk_used;\nhash_create_memory(AggState *aggstate)\n\taggstate->hash_metacxt = AllocSetContextCreate(aggstate->ss.ps.state->es_query_cxt,\n\taggstate->hash_tablecxt = BumpContextCreate(aggstate->ss.ps.state->es_query_cxt,\n\t\t\t\t\t\t\t\t\t\t\t\tmaxBlockSize);", "partial_line": "nbuckets", "completion": "nbuckets = max_nbuckets; <|endoftext|>"}
{"context": "\t\t}\nstatic void\n\tif (token_has_regexp(token))\n\t\tpg_regfree(token->regex);\nstatic int", "partial_line": "(errcode(ERRCODE_INVALID_RE", "completion": "(errcode(ERRCODE_INVALID_REGULAR_EXPRESSION), <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n\ttp = SearchSysCache1(COLLOID, ObjectIdGetDatum(collid));\n\tif (collform->collprovider == COLLPROVIDER_BUILTIN)\n\telse if (collform->collprovider == COLLPROVIDER_LIBC)\n\t\tPGLOCALE_SUPPORT_ERROR(collform->collprovider);", "partial_line": "char\t   *", "completion": "char\t   *collversionstr; <|endoftext|>"}
{"context": "{ 5, s_0_5, -1, 1, 0},\n{ 6, s_0_16, -1, 1, 0},\n{ 5, s_0_18, 17, 1, 0},\n{ 2, s_0_19, -1, 1, 0},\n{ 6, s_0_41, -1, 1, 0},", "partial_line": "{ 3, s_0_", "completion": "{ 3, s_0_42, -1, 1, 0}, <|endoftext|>"}
{"context": "\tif (have_poly_anycompatible)\n\t\t\t\t\tereport(ERROR,\n\t\t\t\tanycompatible_range_typelem = get_range_subtype(anycompatible_range_typeid);\n\t\t\t\tanycompatible_actual_types[n_anycompatible_args++] =\n\t\t}", "partial_line": "if (have_anyco", "completion": "if (have_anycompatible_array) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   find_list_position(node, clauselist));\n\t\tclauseids = bms_add_member(clauseids,\n\t}\n\t{\n\telse if (IsA(bitmapqual, IndexPath))", "partial_line": "List", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase HEAPTUPLE_DEAD:\n\t\t\tdefault:\n\t\tif (istat == NULL || istat->estimated_count)\nvacuum_error_callback(void *arg)", "partial_line": "case VACUUM_E", "completion": "case VACUUM_ERRCB_PHASE_SCAN_HEAP: <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t{\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t   cmd->timeline,\n\t\t}", "partial_line": "if (Fl", "completion": "if (FlushPtr < cmd->startpoint) <|endoftext|>"}
{"context": "\t\t}\n\telse\n\tCHECK_FOR_INTERRUPTS();\n\tPopActiveSnapshot();\n\t\tcase 1:", "partial_line": "Functio", "completion": "FunctionCallInfo fcinfo) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase JOIN_ANTI:\n\t\t\tnrows = outer_rows * (1.0 - fkselec * jselec);\n\t\t\telog(ERROR, \"unrecognized join type: %d\", (int) jointype);\n\t\t\tbms_is_member(fkinfo->ref_relid, inner_relids))", "partial_line": "if (rinfo-", "completion": "if (rinfo->parent_ec) <|endoftext|>"}
{"context": "\tforeach(idx, indirection)\n\t\t\t\tsubexpr = NULL;\n\t\t\tAssert(ai->lidx == NULL && !ai->is_slice);\n\t\t\t\t\t\t parser_errposition(pstate, exprLocation(ai->uidx))));\n\t\tupperIndexpr = lappend(upperIndexpr, subexpr);", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tconvinfo->dobj.namespace->dobj.name);\n\tfree(qconvname);\n\t\tappendPQExpBufferStr(&buf, agginfo->aggfn.dobj.name);\n\t{\n\t\tfor (j = 0; j < agginfo->aggfn.nargs; j++)", "partial_line": "(j >", "completion": "(j > 0) ? \", \" : \"\", <|endoftext|>"}
{"context": "\t\t(*ptr)++;\n{\n\tchar\t   *cp;\n\t\t\tcarry /= 10;\n\t\t\tvar->weight++;", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\telse\n\t\t strcmp(te->desc, \"PUBLICATION TABLES IN SCHEMA\") == 0))\n\t\treturn 0;\n\t\treturn 0;\n\t\t\tif (!(ropt->dumpSections & DUMP_PRE_DATA))", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tif (rel->rd_rel->relhasindex)\n\t\tList\t   *index_oids = RelationGetIndexList(rel);\n\t\t{\n\t\t\tidxRel = relation_open(idxOid, AccessShareLock);\n\t\t\t\tsize += calculate_relation_size(&(idxRel->rd_locator),", "partial_line": "idxRel->rd_ba", "completion": "idxRel->rd_backend, <|endoftext|>"}
{"context": "\treturn hemdistsign(GETSIGN(a), GETSIGN(b), siglena);\n}\n\tBITVECP\t\tsign;\n\titem->allistrue = false;\n\t\titem->allistrue = true;", "partial_line": "memcpy(item->sign, GETSIGN(k", "completion": "memcpy(item->sign, GETSIGN(key), siglen); <|endoftext|>"}
{"context": "\t{\n\t\t\treturn WALAVAIL_RESERVED;\n\t\treturn WALAVAIL_EXTENDED;\n\t\treturn WALAVAIL_UNRESERVED;\n\t{", "partial_line": "segno = c", "completion": "segno = currSegNo - keep_segs; <|endoftext|>"}
{"context": "\tnow = time(NULL);\n\t\tpercent_rel = (int) (relations_checked * 100 / relations_total);\n\tsnprintf(checked_rel, sizeof(checked_rel), UINT64_FORMAT, relations_checked);\n\tsnprintf(total_rel, sizeof(total_rel), UINT64_FORMAT, relations_total);\n\t\t\t\t\ttruncate ? VERBOSE_DATNAME_LENGTH - 3 : VERBOSE_DATNAME_LENGTH,", "partial_line": "checked_pages, total_", "completion": "checked_pages, total_pages, percent_pages); <|endoftext|>"}
{"context": "\t\tforeach(lc, aggref->aggdistinct)\n\t\tif (numDistinctCols == 1)\n\t\t\t\t\t\t\t\t\t   ops,\n\t\t\t\t\t\t\t\t\t   &aggstate->ss.ps);\n\t}", "partial_line": "pertrans->sortst", "completion": "pertrans->sortstates = (Tuplesortstate **) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\tcreaterole = TRI_YES;\n\t\t\tcase 'S':\n\t\t\t\tbreak;\n\t\t\t\tbreak;", "partial_line": "case", "completion": "case 5: <|endoftext|>"}
{"context": "\t\t\t\t\tconditional_stack_poke(cs, IFSTATE_ELSE_FALSE);\n\t\t\t\t\tif (!conditional_stack_pop(cs))\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t}", "partial_line": "Psql", "completion": "PsqlScanState sstate; <|endoftext|>"}
{"context": "\tOid\t\t\tnamespaceoid;\n\tnamespaceoid = QualifiedNameGetCreationNamespace(names, &prsname);\n\tvalues[Anum_pg_ts_parser_prsnamespace - 1] = ObjectIdGetDatum(namespaceoid);\n\tforeach(pl, parameters)\n\t\t{", "partial_line": "get_ts_par", "completion": "get_ts_parser_func(defel, Anum_pg_ts_parser_prstoken); <|endoftext|>"}
{"context": "\t\t\tcase OBJECT_FDW:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t castNode(String, object), missing_ok);\n\t\t\t\tbreak;\n\t\t\t\taddress.classId = ConversionRelationId;\n\t\t\tcase OBJECT_OPFAMILY:", "partial_line": "address.object", "completion": "address.objectId = oidparse(object); <|endoftext|>"}
{"context": "\t\t\t\tLocTriggerData.tg_newtuple = NULL;\n\t\tif (LocTriggerData.tg_trigger->tgoldtable)\n\t\t\t\tLocTriggerData.tg_newtable = evtshared->ats_table->new_upd_tuplestore;\n\t\trettuple != LocTriggerData.tg_newtuple)\n\t}", "partial_line": "afterTriggerMar", "completion": "afterTriggerMarkEvents(AfterTriggerEventList *events, <|endoftext|>"}
{"context": "#include \"ecpglib_extern.h\"\n\t\t\treturn \"char\";\n\t\tcase ECPGt_unsigned_char:\n\t\tcase ECPGt_short:\n\t\tcase ECPGt_long_long:", "partial_line": "case ECPG", "completion": "case ECPGt_double: <|endoftext|>"}
{"context": "\t\tRestrictInfo *rinfo = (RestrictInfo *) lfirst(lc);\n\t\tAssert(IsA(rinfo, RestrictInfo));\n\t\tchildqual = adjust_appendrel_attrs(root,\n\t\t\t\t!DatumGetBool(((Const *) childqual)->constvalue))\n\t\t\t\t\t\t\t\t\t\t   NULL, NULL, NULL);", "partial_line": "cq_min_security = Min(cq_min_security, rinf", "completion": "cq_min_security = Min(cq_min_security, rinfo->security_level); <|endoftext|>"}
{"context": "static void set_rel_consider_parallel(PlannerInfo *root, RelOptInfo *rel,\nstatic void set_append_rel_pathlist(PlannerInfo *root, RelOptInfo *rel,\nstatic void set_dummy_rel_pathlist(RelOptInfo *rel);\n\t\t\t\t\t\t\t\tRangeTblEntry *rte);\n\t\t\t\t\t\t\t\t   RangeTblEntry *rte);", "partial_line": "Rang", "completion": "RangeTblEntry *rte); <|endoftext|>"}
{"context": "\t\t\tcase EEOP_PARAM_CALLBACK:\n\t\t\t\t\t\t\t\t\t\t llvm_pg_var_type(\"TypeExecEvalSubroutine\"));\n\t\t\t\t\t\t\t\tv_state, op, v_econtext);\n\t\t\t\t\tint\t\t\tjumpdone = op->d.sbsref_subscript.jumpdone;\n\t\t\t\t\tLLVMValueRef v_func;", "partial_line": "LLVMV", "completion": "LLVMValueRef v_params[3]; <|endoftext|>"}
{"context": "\t\tfillTypeDesc(&cache->attType, atttype);\n\t\t\tif (!OidIsValid(index_getprocid(index, 1, SPGIST_COMPRESS_PROC)))\n\t\tfillTypeDesc(&cache->attPrefixType, cache->config.prefixType);\n\t\t\tSpGistMetaPageData *metadata;\n\t\t\tLockBuffer(metabuffer, BUFFER_LOCK_SHARE);", "partial_line": "getSpGistTupleDesc(Relation index, SpGist", "completion": "getSpGistTupleDesc(Relation index, SpGistTypeDesc *keyType) <|endoftext|>"}
{"context": "\tchar\t   *data;\n\tif (action == BLK_NEEDS_REDO || action == BLK_RESTORED)\n\t{\n\t\toldpage = BufferGetPage(oldbuf);\n\t_hash_initbuf(newbuf, xlrec->new_bucket, xlrec->new_bucket,", "partial_line": "xlrec->new_b", "completion": "xlrec->new_bucket_flag, true); <|endoftext|>"}
{"context": "\t\tif (ret == -1)\n\t\t\tpg_fatal(\"program \\\"%s\\\" is needed by %s but was not found in the same directory as \\\"%s\\\"\",\n\t\t\t\t\t \"pg_dump\", full_path, progname);\n\t{\n\t\t\tcase 'c':", "partial_line": "output_cle", "completion": "output_clean = true; <|endoftext|>"}
{"context": "}\nheap_prepare_pagescan(TableScanDesc sscan)\n\tBuffer\t\tbuffer = scan->rs_cbuf;\n\tSnapshot\tsnapshot;\n\tAssert(BufferGetBlockNumber(buffer) == block);", "partial_line": "snapshot =", "completion": "snapshot = scan->rs_base.rs_snapshot; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tlateral_refs);\n\t\t\t\t\t\t\t\tlateral_refs);\n\t\t{\n\t\t\tvarno = -1;\n\t\t\t\tbrel->lateral_relids = bms_add_members(brel->lateral_relids,", "partial_line": "lateral_", "completion": "lateral_refs); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t(errcode(ERRCODE_DUPLICATE_COLUMN),\n\t\t\t\t\terrcode(ERRCODE_SYNTAX_ERROR),\n\tvarattno = 0;\n\t\tAssert(varattno == te->resno);", "partial_line": "if (v", "completion": "if (varattno > numaliases) <|endoftext|>"}
{"context": "{ 7, s_2_1933, -1, 93, 0},\n{ 6, s_2_1934, -1, 94, 0},\n{ 5, s_2_1937, -1, 79, 0},\n{ 5, s_2_1968, 1967, 68, 0},\n{ 4, s_2_1973, -1, 94, 0},", "partial_line": "{ 5, s_2_1", "completion": "{ 5, s_2_1989, -1, 61, 0}, <|endoftext|>"}
{"context": "static const symbol s_3_171[6] = { 'i', 'e', 'r', 'a', 'i', 's' };\nstatic const symbol s_3_192[6] = { 'e', 'r', 0xC3, 0xA9, 'i', 's' };\nstatic const symbol s_3_204[8] = { 'i', 'r', 0xC3, 0xAD, 'a', 'm', 'o', 's' };\nstatic const symbol s_3_215[3] = { 'a', 't', 's' };\nstatic const symbol s_3_228[2] = { 'a', 't' };", "partial_line": "static const sy", "completion": "static const symbol s_3_231[3] = { 'e', 'n', 't' }; <|endoftext|>"}
{"context": "\tpgstat_report_subscription_error(MyLogicalRepWorker->subid,\n\tStartTransactionCommand();\n\tCommitTransactionCommand();\nIsLogicalWorker(void)\nstatic void", "partial_line": "ereport(", "completion": "ereport(LOG, <|endoftext|>"}
{"context": "\t\t\t\treturn false;\n\t_bt_returnitem(scan, so);\n}\n\tRelation\trel = scan->indexRelation;\n\tpage = BufferGetPage(so->currPos.buf);", "partial_line": "pstat", "completion": "pstate.targetdistance = 0; <|endoftext|>"}
{"context": "#include <ecpglib.h>\n#define SQLERRMC_LEN\t150\nstruct sqlca_t\n\tchar\t\tsqlwarn[8];\n};", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\tint64\t\ttotal_months = (int64) itm_in->tm_year * MONTHS_PER_YEAR + itm_in->tm_mon;\n\ttm->tm_mon = t0->tm_mon;\n\tstruct pg_tm tt,\n\t\t\t   *tm = &tt;\n\treturn dt;", "partial_line": "timestamp_cmp_internal(Tim", "completion": "timestamp_cmp_internal(Timestamp dt1, Timestamp dt2) <|endoftext|>"}
{"context": "#include <limits.h>\n#include \"utils/hsearch.h\"", "partial_line": "typedef struct IterateJso", "completion": "typedef struct IterateJsonStringValuesState <|endoftext|>"}
{"context": "\t\tAttrNumber\tattnum;\n\t\tint\t\t\tinhcount = 0;\n\t\tconstr = list_nth_node(Constraint, constraints, outerpos);\n\t\t\t{\n\t\t\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),", "partial_line": "errmsg(\"cannot", "completion": "errmsg(\"cannot define not-null constraint on column \\\"%s\\\" with NO INHERIT\", <|endoftext|>"}
{"context": "\treturn selec;\n}\n\t\t\t\t   float4 *numbers, int nnumbers,\n{\n\tint\t\t\tnum_elems;", "partial_line": "bool\t\tnull_pr", "completion": "bool\t\tnull_present; <|endoftext|>"}
{"context": "\t{\n\t\tdsm_control_handle = pg_prng_uint32(&pg_global_prng_state) << 1;\n\tshim->dsm_control = dsm_control_handle;\ndsm_cleanup_using_control_segment(dsm_handle old_control_handle)\n\t\t\t\t\t&mapped_address, &mapped_size, LOG);", "partial_line": "uin", "completion": "uint32\t\trefcnt; <|endoftext|>"}
{"context": "#include \"common/keywords.h\"\n#include \"nodes/makefuncs.h\"\n#include \"parser/parse_oper.h\"\n#include \"utils/array.h\"\n#include \"utils/rel.h\"", "partial_line": "#define PR", "completion": "#define PRETTYINDENT_STD\t\t8 <|endoftext|>"}
{"context": "\t\tcase AT_ReplaceRelOptions:\t\n\t\t\tATExecEnableDisableTrigger(rel, cmd->name,\n\t\t\t\t\t\t\t\t\t   lockmode);\n\t\t\tATExecEnableDisableTrigger(rel, cmd->name,\n\t\t\tATExecEnableDisableTrigger(rel, NULL,", "partial_line": "loc", "completion": "lockmode); <|endoftext|>"}
{"context": "\t\t\t\t\tif (rel->rd_rel->relkind != RELKIND_RELATION &&\n\t\t\t\t\t\t\t\t errmsg(\"inherited relation \\\"%s\\\" is not a table or foreign table\",\n\t\t\t\t\t{\n\t\t\t\t\t\tForm_pg_attribute inhattr = TupleDescAttr(rel->rd_att,\n\t\t\t\t\t\tif (strcmp(key, inhname) == 0)", "partial_line": "iparam->expr", "completion": "iparam->expr = NULL; <|endoftext|>"}
{"context": "NUM_cache_getnew(const char *str)\n\t\t{\n\t\t\tfor (int i = 1; i < NUM_CACHE_ENTRIES; i++)\n\t\t\t\t}\n\t\t\t}", "partial_line": "elog(DEBUG_elog_output, \"O", "completion": "elog(DEBUG_elog_output, \"OLD: \\\"%s\\\" AGE: %d\", old->str, old->age); <|endoftext|>"}
{"context": "\t{\n\t\t\t\t(errcode(ERRCODE_CONNECTION_FAILURE),\n\tattnamelist = make_copy_attnamelist(relmapentry);\n{\n\tRepOriginId originid;", "partial_line": "bool\t\tmust_u", "completion": "bool\t\tmust_use_password; <|endoftext|>"}
{"context": "\tHASHCTL\t\thash_ctl;\n\t\t\t\tlexeme_no;\n\t\tint\t\t\tj;\n\t\t\tcontinue;\n\t\t{", "partial_line": "hash_key.lexeme = l", "completion": "hash_key.lexeme = lexemesptr + curentryptr->pos; <|endoftext|>"}
{"context": "static int\tListComparatorForWalSummaryFiles(const ListCell *a,\n{\n\t\tXLogRecPtr\tfile_start_lsn;\n\t\tXLogRecPtr\tfile_end_lsn;\n\t\t\tcontinue;", "partial_line": "if (!XLogRecPtrIsInvalid(", "completion": "if (!XLogRecPtrIsInvalid(end_lsn) && end_lsn <= file_start_lsn) <|endoftext|>"}
{"context": "\t\t\tclause_expr = lsecond(expr->args);\n\t\t\treturn false;\n\t\tclause_expr = linitial(expr->args);\n\t\t\treturn false;\n\t\t\t\treturn false;", "partial_line": "*expr =", "completion": "*expr = or_expr; <|endoftext|>"}
{"context": "#ifdef HAVE_LIBZ\n#endif\n#include \"libpq-fe.h\"\nstatic bool do_sync = true;\nstatic bool synchronous = false;", "partial_line": "static XLogRe", "completion": "static XLogRecPtr endpos = InvalidXLogRecPtr; <|endoftext|>"}
{"context": "dumpEventTrigger(Archive *fout, const EventTriggerInfo *evtinfo)\n\tdelqry = createPQExpBuffer();\n\tqevtname = pg_strdup(fmtId(evtinfo->dobj.name));\n\tappendPQExpBufferStr(query, qevtname);\n\t\tappendPQExpBuffer(query, \"\\nALTER EVENT TRIGGER %s \",", "partial_line": ".owner = e", "completion": ".owner = evtinfo->evtowner, <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t union config_var_val *newval, void **newextra)\n\t{\n\t\t\tbreak;\n\t\t\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "if (newval->intval < con", "completion": "if (newval->intval < conf->min || newval->intval > conf->max) <|endoftext|>"}
{"context": "\t\tforeach(l, stmt->argtypes)\n\t\t\t DestReceiver *dest, QueryCompletion *qc)\n\t\testate->es_param_list_info = params;\n\t\tparamLI = EvaluateParams(pstate, entry, stmt->params, estate);\n\tportal->visible = false;", "partial_line": "plan_li", "completion": "plan_list, <|endoftext|>"}
{"context": "\tif (i == natts)\t\t\t\t\n\t\tmtuple = NULL;\n\t\tSPI_result = SPI_ERROR_NOATTRIBUTE;\n\tconst FormData_pg_attribute *sysatt;\n\t{", "partial_line": "sysatt = SystemAttribu", "completion": "sysatt = SystemAttributeByName(fname); <|endoftext|>"}
{"context": "\t{\n\t\tif (tuplesort_getdatum(tuplesortstate, ScanDirectionIsForward(dir),\n\tSortState  *sortstate;\n\tSO1_printf(\"ExecInitSort: %s\\n\",\n\tsortstate->ss.ps.ExecProcNode = ExecSort;", "partial_line": "sortstate->randomAccess = (eflags", "completion": "sortstate->randomAccess = (eflags & (EXEC_FLAG_REWIND | <|endoftext|>"}
{"context": "\t(_DST)->tm_mday = (_SRC)->tm_mday; \\\ndo {\t\\\n\t(_X)->tm_mday = (_X)->tm_mon = 1; \\\n\t\tereport(ERROR, \\\n#define DCH_S_TH\t0x02", "partial_line": "#define", "completion": "#define DCH_S_SP\t0x08 <|endoftext|>"}
{"context": "\t}\n\t\tsize_t\t\tdstsize;\n\t\tsize_t\t\tneeded;\n\t\tneeded = pg_strupper(dst, dstsize, src, srclen, mylocale);\n\t\t\tneeded = pg_strupper(dst, dstsize, src, srclen, mylocale);", "partial_line": "mylocale", "completion": "mylocale = pg_newlocale_from_collation(collid); <|endoftext|>"}
{"context": "\tin_progress_list_len--;\n\trel = relation_open(typentry->typrelid, AccessShareLock);\n\tAssert(rel->rd_rel->reltype == typentry->type_id);\n{\n\tOid\t\t\topclassOid;", "partial_line": "canonicalOid = pg_rang", "completion": "canonicalOid = pg_range->rngcanonical; <|endoftext|>"}
{"context": "\tif (ecode == 0)\n\tmemset(ctx, 0, sizeof(pg_hmac_ctx));\n#ifdef USE_RESOWNER_FOR_HMAC\n}\n\t\t\tbreak;", "partial_line": "case", "completion": "case PG_SHA256: <|endoftext|>"}
{"context": "{ 6, s_2_10, 2, 2, 0},\n{ 14, s_2_11, 2, 2, 0},\n{ 6, s_2_17, 15, 1, 0},\n{ 2, s_2_27, -1, 2, 0},\n{ 8, s_3_0, -1, 1, 0},", "partial_line": "{ 6, s_3_2, -", "completion": "{ 6, s_3_2, -1, 1, 0}, <|endoftext|>"}
{"context": "\tscan_clauses = order_qual_clauses(root, scan_clauses);\n\t\t\t\t\t\t\t\t  subplan);\n\tcopy_generic_path_info(&scan_plan->scan.plan, &best_path->path);\nstatic FunctionScan *\n\trte = planner_rt_fetch(scan_relid, root);", "partial_line": "functions = r", "completion": "functions = rte->functions; <|endoftext|>"}
{"context": "\t\t\t\t\t\t JoinType jointype,\n\tif (jointype == JOIN_UNIQUE_OUTER || jointype == JOIN_UNIQUE_INNER)\n\t\tfind_mergeclauses_for_outer_pathkeys(root,\n\t\t\t  ;\n\t\t\t\t\t   joinrel,", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t\t\tForm_pg_auth_members authmem_form;\n\t\t\tif (actions[i] == RRG_NOOP &&\n\t\t\tereport(ERROR,\n\t\t\t\t\t errmsg(\"%s option cannot be granted back to your own grantor\",\n\t\tHeapTuple\tauthmem_tuple;", "partial_line": "Objec", "completion": "ObjectIdGetDatum(roleid); <|endoftext|>"}
{"context": "\t\telse if (strcmp(defel->defname, \"tablespace\") == 0)\n\t\telse\n\t{\n\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\tif (distemplate && distemplate->arg)", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tfprintf(stderr, libpq_gettext(\"WARNING: libpq was not built with sslkeylogfile support\\n\"));\n\t\t\tif (SSL_set_tlsext_host_name(conn->ssl, host) != 1)\n\t\t}\n\t\t}\n\t\t\t)", "partial_line": "free(eng", "completion": "free(engine_str); <|endoftext|>"}
{"context": "#include \"postgres.h\"\nstatic const char *get_am_type_string(char amtype);\n\tDatum\t\tvalues[Natts_pg_am];", "partial_line": "if (", "completion": "if (OidIsValid(amoid)) <|endoftext|>"}
{"context": "static Plan *set_plan_refs(PlannerInfo *root, Plan *plan, int rtoffset);\nstatic Plan *set_indexonlyscan_references(PlannerInfo *root,\n\t\t\t\t\t\t\t\t\t\t  int rtoffset);\n\t\t\t\t\t\t\t\t   Append *aplan,\n\t\t\t\t\t\t\t\t   int rtoffset);", "partial_line": "static Relid", "completion": "static Relids offset_relid_set(Relids relids, int rtoffset); <|endoftext|>"}
{"context": "            if (!find_among_b(z, a_1, 7)) { z->lb = mlimit1; return 0; }\n            }\n        if (!among_var) { z->lb = mlimit1; return 0; }\n            {   int ret = slice_from_s(z, 2, s_0);\n            {   int ret = slice_from_s(z, 4, s_1);", "partial_line": "z->lb = z->c; z->c", "completion": "z->lb = z->c; z->c = z->l; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\t\t\t\n\t\t}\n\t\t\tnthistime = size;\n\t\tif (lt->buffer)\n\tlt->pos = 0;", "partial_line": "lt->nex", "completion": "lt->nextBlockNumber = -1L; <|endoftext|>"}
{"context": "\t\targtypes[1] = NAMEOID;\n\t}\n\tif (spirc != SPI_OK_SELECT)\n\telse\n\t\truletup = SPI_tuptable->vals[0];", "partial_line": "elog(ERROR, \"SPI_fi", "completion": "elog(ERROR, \"SPI_finish failed\"); <|endoftext|>"}
{"context": "\twstate.heap = btspool->heap;\n\twstate.index = btspool->index;\n\t_bt_load(&wstate, btspool, btspool2);\nstatic void\n\t\t\t\t   Datum *values,", "partial_line": "boo", "completion": "bool *isnull, <|endoftext|>"}
{"context": "\t\t\t\t\t\tgoto error_return;\n\t\t\t\t\treturn PGRES_POLLING_WRITING;\n\t\t\t\telse if (pollres == PGRES_POLLING_FAILED)\n\t\tcase CONNECTION_AWAITING_RESPONSE:\n\t\t\t\tchar\t\tberesp;", "partial_line": "bool", "completion": "bool\t\tasync; <|endoftext|>"}
{"context": "static const symbol s_6_3[3] = { 's', 's', 'a' };\nstatic const symbol s_6_6[3] = { 's', 't', 'a' };\nstatic const symbol s_6_15[3] = { 'h', 'e', 'n' };\nstatic const symbol s_6_19[3] = { 'h', 'o', 'n' };\nstatic const symbol s_6_21[4] = { 'h', 0xC3, 0xB6, 'n' };", "partial_line": "static const symbol s_6_23[4] = { 'l',", "completion": "static const symbol s_6_23[4] = { 'l', 'l', 0xC3, 0xA4 }; <|endoftext|>"}
{"context": "{\n\tstate.escontext = escontext;\n\tsem.object_end = jsonb_in_object_end;\n}\nstatic JsonParseErrorType", "partial_line": "return JSON_", "completion": "return JSON_SUCCESS; <|endoftext|>"}
{"context": "\thspool->low_mask = (hspool->high_mask >> 1);\n\t\t\t\t\t\t\t\t\t\t\t\t   hspool->high_mask,", "partial_line": "return h", "completion": "return hspool; <|endoftext|>"}
{"context": "\tfps->database_id = MyDatabaseId;\n\tSpinLockInit(&fps->mutex);\n\t\tchar\t   *tstatespace;\n\t\tchar\t   *clientconninfospace;\n\t\t\tshm_toc_insert(pcxt->toc, PARALLEL_KEY_TRANSACTION_SNAPSHOT,", "partial_line": "session_ds", "completion": "session_dsm_handle_space = shm_toc_allocate(pcxt->toc, <|endoftext|>"}
{"context": "\t\t\t\tfilename = pg_strdup(optarg);\n\t\t\t\tbreak;\n\t\t\t\tif (!option_parse_int(optarg, \"-j/--jobs\", 1,\n\t\t\t\t\t\t\t\t\t  &numWorkers))\n\t\t\t\tbreak;", "partial_line": "dopt.include_everyt", "completion": "dopt.include_everything = false; <|endoftext|>"}
{"context": "{ 6, s_2_72, -1, 1, 0},\n{ 4, s_2_75, -1, 1, 0},\n{ 3, s_2_90, -1, 1, 0},\n{ 4, s_2_92, -1, 2, 0},\n{ 7, s_2_95, -1, 1, 0},", "partial_line": "{ 6, s_", "completion": "{ 6, s_2_109, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\ttmplinfo[i].dobj.catId.oid = atooid(PQgetvalue(res, i, i_oid));\n\t\ttmplinfo[i].tmpllexize = atooid(PQgetvalue(res, i, i_tmpllexize));\n\tint\t\t\tntups;\n\tint\t\t\ti_cfgname;\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);", "partial_line": "cfginfo = (TS", "completion": "cfginfo = (TSConfigInfo *) pg_malloc(ntups * sizeof(TSConfigInfo)); <|endoftext|>"}
{"context": "\tstart = 0;\t\t\t\t\t\n\t\tmaxvalue = ranges->values[2 * midpoint + 1];\n\t\t\tend = (midpoint - 1);\n\t\tif (DatumGetBool(compar))\n\t\treturn true;", "partial_line": "range_contains_value", "completion": "range_contains_value(BrinDesc *bdesc, Oid colloid, <|endoftext|>"}
{"context": "\t\t\t\t\tAddEventToPendingNotifies(childn);\n\t\tpfree(childPendingActions);\n}\nvoid\n{", "partial_line": "PG_T", "completion": "PG_TRY(); <|endoftext|>"}
{"context": "\t\t\t\t\t\t   inner_path,\n\t\t\t\t\t\t\t\t\t   cheapest_safe_inner,\n\t\t\t\t\t\t\t\t\t   outerkeys,\n}\n\t\t\t\t\t\t JoinType jointype,", "partial_line": "if (jointype == JOIN_UNIQUE_OUTER || joi", "completion": "if (jointype == JOIN_UNIQUE_OUTER || jointype == JOIN_UNIQUE_INNER) <|endoftext|>"}
{"context": "\tbool\t\tlaunched;\n\t\twinfo = (ParallelApplyWorkerInfo *) lfirst(lc);\n\tlaunched = logicalrep_worker_launch(WORKERTYPE_PARALLEL_APPLY,\n\t\t\t\t\t\t\t\t\t\tMyLogicalRepWorker->dbid,\n\treturn winfo;", "partial_line": "ctl.keysize = sizeof(", "completion": "ctl.keysize = sizeof(TransactionId); <|endoftext|>"}
{"context": "\t\t}\n\t\t{\n\t\t\tappendStringInfo(es->str, \"Batches: %d  Memory Usage: \" INT64_FORMAT \"kB\",\n\t\t\t\t\t\t\t aggstate->hash_batches_used, memPeakKb);\n\t\t}", "partial_line": "appendStringInfoChar(", "completion": "appendStringInfoChar(es->str, '\\n'); <|endoftext|>"}
{"context": "\t\tLogicalTapeSetCreate(false,\n{\n\ttapeSpace = (int64) maxTapes * TAPE_BUFFER_OVERHEAD;\n{\n\t\tstate->outputTapes[state->nOutputTapes] = state->destTape;", "partial_line": "init_slab_allocator(Tuplesortstat", "completion": "init_slab_allocator(Tuplesortstate *state, int numSlots) <|endoftext|>"}
{"context": "\t\t\t\t\tint *st,\n\tchar\t   *srcdataptr;\n\t\t\t\tdest_offset,\n\t\t\t\t\t\t\t\t\tdist[j],\n\t} while ((j = mda_next_tuple(ndim, indx, span)) != -1);", "partial_line": "ArrayType *o", "completion": "ArrayType *origArray, <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\tPartitionRangeBound *inner_lb,\n{\n\t\t\t\t\t\t\t\touter_lb, inner_lb) == lb_cmpval);\n\tswitch (jointype)", "partial_line": "*merged_lb = (l", "completion": "*merged_lb = (lb_cmpval < 0) ? *outer_lb : *inner_lb; <|endoftext|>"}
{"context": "\t\t\tpfree(prepl);\n\t\tpfree(ptype);\n\tbool\t\toldformat = false;\n\t\tereport(ERROR,\n\t\t\t\t\ts += pg_mblen(s);", "partial_line": "Conf->u", "completion": "Conf->usecompound = true; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t  top_level);\n\t\t\tcase OR_EXPR:\n\t\t\t\t{\n\t\t\tcase NOT_EXPR:\n\t\t\t\telog(ERROR, \"unrecognized boolop: %d\", (int) expr->boolop);", "partial_line": "else if", "completion": "else if (IsA(node, ArrayCoerceExpr)) <|endoftext|>"}
{"context": "\tPQclear(res);\ncheck_testspec(TestSpec *testspec)\n\tfor (i = 0; i < testspec->nsessions; i++)\n\t\t\t\t   allsteps[i]->name) == 0)\n\t\t\t\texit(1);", "partial_line": "pste", "completion": "pstep->step = *this; <|endoftext|>"}
{"context": "#endif\n{\n\t\tcase 0:\n\t\t\tif (created)\n\t\t\tpg_fatal(\"could not access directory \\\"%s\\\": %m\", dirname);", "partial_line": "progress_update_fi", "completion": "progress_update_filename(const char *filename) <|endoftext|>"}
{"context": "\t\t\treturn false;\n{\n\tbool\t\tdiscover = false;\n\t\tcase FE_OAUTH_INIT:\n\t\t\telse", "partial_line": "case", "completion": "case FE_OAUTH_BEARER_SENT: <|endoftext|>"}
{"context": "{\n\treturn int4send(fcinfo);\n}\nstatic void\n\tint\t\t\tchunk_len;", "partial_line": "from_sub_t", "completion": "from_sub_text_len = VARSIZE_ANY_EXHDR(from_sub_text); <|endoftext|>"}
{"context": "static void make_directory(const char *dir);\nstatic void test_status_print(bool ok, const char *testname, double runtime, bool parallel);\nstatic void bail_out(bool noatexit, const char *fmt,...) pg_attribute_printf(2, 3);\nstatic void emit_tap_output(TAPtype type, const char *fmt,...) pg_attribute_printf(2, 3);\n#define diag(...)\t\t\temit_tap_output(DIAG, __VA_ARGS__)", "partial_line": "#define b", "completion": "#define bail(...)\t\t\tbail_out(false, __VA_ARGS__) <|endoftext|>"}
{"context": "#include \"ecpg_config.h\"\n#define REPEATS\t\t50\n\tstruct\n\tchar\t\tsqlstate[5];\n#ifdef WIN32", "partial_line": "int", "completion": "int i; <|endoftext|>"}
{"context": "\t\t\t\tForm_pg_amop amopForm;\n\t\t\t\tScanKeyInit(&skey[0],\n\t\t\t\t\t\t\t\t\t\t\tNULL, 1, skey);\n\t\t\t\t}\n\t\t\t\tif (objname)", "partial_line": "appendStrin", "completion": "appendStringInfo(&buffer, \"operator %d (%s, %s) of %s\", <|endoftext|>"}
{"context": "\t\t0x21280AA0, 0x38433A4F, 0xE288867B, 0xFBE3B694,\n\t\t0x561FFF12, 0x4F74CFFD, 0x95BF73C9, 0x8CD44326,\n\t\t0x8D16F485, 0x947DC46A, 0x4EB6785E, 0x57DD48B1,\n\t\t0x9FB0F16E, 0x86DBC181, 0x5C107DB5, 0x457B4D5A,\n\t\t0x6591F059, 0x7CFAC0B6, 0xA6317C82, 0xBF5A4C6D,", "partial_line": "0x12A605E", "completion": "0x12A605EB, 0x0BCD3504, 0xD1068930, 0xC86DB9DF, <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t}\n\t\t\tLockBuffer(otherBuffer, BUFFER_LOCK_EXCLUSIVE);\n\t\t\tLockBuffer(buffer, BUFFER_LOCK_EXCLUSIVE);\n\t\t\t\t\t\t\t vmbuffer_other);", "partial_line": "MarkBufferDi", "completion": "MarkBufferDirty(buffer); <|endoftext|>"}
{"context": "\t\t&&CASE_EEOP_BOOL_AND_STEP_FIRST,\n\t\t&&CASE_EEOP_JUMP_IF_NOT_TRUE,\n\t\t&&CASE_EEOP_NULLTEST_ROWISNULL,\n\t\t&&CASE_EEOP_NULLTEST_ROWISNOTNULL,\n\t\t&&CASE_EEOP_BOOLTEST_IS_NOT_FALSE,", "partial_line": "&&CASE_EEOP_PARAM", "completion": "&&CASE_EEOP_PARAM_EXTERN, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   OUTER_VAR,\n\t\t\t\t\t\t\t\t\t\t inner_itlist,\n\telse if (IsA(join, HashJoin))\n\t\thj->hashclauses = fix_join_expr(root,\n\t\t\t\t\t\t\t\t\t\touter_itlist,", "partial_line": "hj->hash", "completion": "hj->hashkeys = (List *) fix_upper_expr(root, <|endoftext|>"}
{"context": "\t\tstart = PG_GETARG_INT32(3);\n\t\t\tereport(ERROR,\n\t\t\tereport(ERROR,\n\t}\n}", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tcase 'm':\t\t\n\t\t\t\t\tereport(ERROR,\nDatum\n\t\t\t\t\t\t\t\t\t\t   strlen(NameStr(*n)),", "partial_line": "text\t   *p = PG_G", "completion": "text\t   *p = PG_GETARG_TEXT_PP(1); <|endoftext|>"}
{"context": "\t\t\t\t\t  \"EXECUTE dumpTableAttach('%u')\",\n\t\t\t\t\t\t\t  .section = SECTION_PRE_DATA,\n\tchar\t   *foreign;\n\tif (!adinfo->separate)\n\tforeign = tbinfo->relkind == RELKIND_FOREIGN_TABLE ? \"FOREIGN \" : \"\";", "partial_line": "if (adinfo->dobj.dum", "completion": "if (adinfo->dobj.dump & DUMP_COMPONENT_DEFINITION) <|endoftext|>"}
{"context": "\t\treturn pg_strdup(want_hyphen ? \"-\" : \"\");\n\t}\nvoid\n\tAH->WriteBytePtr(AH, AH->intSize);\n\tAH->WriteBytePtr(AH, AH->format);", "partial_line": "WriteInt(A", "completion": "WriteInt(AH, crtm.tm_min); <|endoftext|>"}
{"context": "\t\t\t__myhe->prev = NULL;\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\tif (++(_hn) >= PGLZ_HISTORY_SIZE + 1) {\t\t\t\t\t\t\t\\\n\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t*(_buf)++ = (unsigned char)(_byte);\t\t\t\t\t\t\t\t\t\t\\\n\tpglz_out_ctrl(_ctrlp,_ctrlb,_ctrl,_buf);\t\t\t\t\t\t\t\t\\", "partial_line": "if (_len > 17)", "completion": "if (_len > 17)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\ <|endoftext|>"}
{"context": "\tamroutine->amadjustmembers = gistadjustmembers;\n}\nvoid\ngistbuildempty(Relation index)\n\tSTART_CRIT_SECTION();", "partial_line": "Index", "completion": "IndexUniqueCheck checkUnique, <|endoftext|>"}
{"context": "\t\t\t\treturn;\n\t\t{\n\t\t\t\t\t\t\t\t\t\t  &rightsib_empty, vstate))\n}\n\topaque = BTPageGetOpaque(page);", "partial_line": "leafblkno =", "completion": "leafblkno = BufferGetBlockNumber(leafbuf); <|endoftext|>"}
{"context": "KnownAssignedXidsGetAndSetXmin(TransactionId *xarray, TransactionId *xmin,\n{\n\thead = procArray->headKnownAssignedXids;\n\t\t\treturn KnownAssignedXids[i];\n\t}", "partial_line": "nx", "completion": "nxids++; <|endoftext|>"}
{"context": "    {   int m12 = z->l - z->c; (void)m12;\n    {   int m13 = z->l - z->c; (void)m13;\n        }\n        z->c = z->l - m16;\n        }", "partial_line": "{   int ret = r_st", "completion": "{   int ret = r_step_4(z); <|endoftext|>"}
{"context": "{\n\tchar\t\ttmppath[MAXPGPATH];\n\tDirectoryMethodData *dir_data = (DirectoryMethodData *) wwmethod;\n\tsnprintf(tmppath, sizeof(tmppath), \"%s/%s\",\n\t\t\t dir_data->basedir, pathname);", "partial_line": "dir_finish(Wal", "completion": "dir_finish(WalWriteMethod *wwmethod) <|endoftext|>"}
{"context": "\tOid\t\t\topcintype;\n\tchar\t   *opclassname;\n\tchar\t   *opfamilyname;\n\tint\t\t\ti;\n\tspgConfigOut configOut;", "partial_line": "opfamilyname = get_op", "completion": "opfamilyname = get_opfamily_name(opfamilyoid, false); <|endoftext|>"}
{"context": "\t\t\treturn 1;\n\tif (GISTSearchItemIsHeap(*sa) && !GISTSearchItemIsHeap(*sb))\n\tscan = RelationGetIndexScan(r, nkeys, norderbys);\n\toldCxt = MemoryContextSwitchTo(giststate->scanCxt);\n\tso->numKilled = 0;", "partial_line": "else if (so->queueC", "completion": "else if (so->queueCxt == so->giststate->scanCxt) <|endoftext|>"}
{"context": "\t}\n\t\tif (conn->gctx)\n\tif (maj_stat == GSS_S_COMPLETE)\n}\npg_GSS_startup(PGconn *conn, int payloadlen)", "partial_line": "if (con", "completion": "if (conn->gctx) <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"access/heapam_xlog.h\"\n#include \"access/transam.h\"\n#include \"storage/proc.h\"", "partial_line": "#include \"s", "completion": "#include \"storage/standby.h\" <|endoftext|>"}
{"context": "\t\tcase Pattern_Type_Like:\n\t\t\t\t\t\t\t\tpatt->constlen,\n\t\tdefault:\n\t\t\telog(ERROR, \"unrecognized ptype: %d\", (int) ptype);\n\treturn result;", "partial_line": "Const *pref", "completion": "Const *prefixcon) <|endoftext|>"}
{"context": "\t\tnewtuple = heap_form_tuple(RelationGetDescr(description),\n\t\theap_freetuple(newtuple);\n\tHeapTuple\toldtuple;\n\t\tvalues[Anum_pg_shdescription_classoid - 1] = ObjectIdGetDatum(classoid);\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,", "partial_line": "while ((oldtuple = systable_g", "completion": "while ((oldtuple = systable_getnext(sd)) != NULL) <|endoftext|>"}
{"context": "\t{\n\t\tforeach(lc, evi_list)\n\t}\n\t\t\tint\t\t\tnewdist;\n\t\t\t{", "partial_line": "evi2", "completion": "evi2->previous = evi; <|endoftext|>"}
{"context": "#include \"access/visibilitymap.h\"\n\tRelFileLocator rlocator;\n\tXLogRedoAction action;\n\tmaindataptr += SizeOfHeapPrune;\n\t{", "partial_line": "(xlrec.flags & XLHP_CLE", "completion": "(xlrec.flags & XLHP_CLEANUP_LOCK) != 0, <|endoftext|>"}
{"context": "\t\t\t| (weight & NUMERIC_SHORT_WEIGHT_MASK);\n\t{\n\t\tlen = NUMERIC_HDRSZ + n * sizeof(NumericDigit);\n\t\tresult->choice.n_long.n_weight = weight;\n\t\tmemcpy(NUMERIC_DIGITS(result), digits, n * sizeof(NumericDigit));", "partial_line": "if", "completion": "if (have_error) <|endoftext|>"}
{"context": "\treturn address;\n\ttypename = makeTypeNameFromNameList(names);\n\ttypTup = (Form_pg_type) GETSTRUCT(tup);\n\tcheckDomainOwner(tup);\n\t\ttable_close(typrel, RowExclusiveLock);", "partial_line": "return", "completion": "return address; <|endoftext|>"}
{"context": "\t\t}\n\t\t\tresult = list_make1(makeBoolExpr(NOT_EXPR,\n\ti = 0;\n\t\tEState\t   *estate;\n\t\tldatum = lfirst_node(PartitionRangeDatum, cell1);", "partial_line": "estate = CreateExe", "completion": "estate = CreateExecutorState(); <|endoftext|>"}
{"context": "\tint\t\t\ti;\n\thash_seq_init(&status, guc_hashtab);\n\tqsort(result, *num_vars,\n\t\tstruct config_bool *conf = &ConfigureNamesBool[i];\n\t\tAssert(!found);", "partial_line": "hent", "completion": "hentry->gucvar = gucvar; <|endoftext|>"}
{"context": "\t\t\tAssert((leftarg->sk_flags | rightarg->sk_flags) & SK_SEARCHNOTNULL);\n\t\tif (leftarg->sk_flags & SK_ISNULL)\n\t\t\tAssert(leftarg->sk_flags & (SK_SEARCHNULL | SK_SEARCHNOTNULL));\n\t\t\trightnull = false;\n\t\t\t\t*result = (leftnull == rightnull);", "partial_line": "*result =", "completion": "*result = (leftnull >= rightnull); <|endoftext|>"}
{"context": "\tDatum\t\tzero;\nstatic Numeric\n{\n}\n\t\tif (unit[1].name == NULL ||", "partial_line": "int64_to_numeric(unit", "completion": "int64_to_numeric(unit->limit))) <|endoftext|>"}
{"context": "{\n\tTStoreState *myState = (TStoreState *) self;\n}\nSetTuplestoreDestReceiverParams(DestReceiver *self,\n\t\t\t\t\t\t\t\tMemoryContext tContext,", "partial_line": "bool d", "completion": "bool detoast, <|endoftext|>"}
{"context": "\t\trb->stream_abort(rb, txn, lsn);\n\t}\n\ttxn->final_lsn = lsn;\nvoid\n\t\t\telog(DEBUG2, \"aborting old transaction %u\", txn->xid);", "partial_line": "if (rbtxn_", "completion": "if (rbtxn_is_streamed(txn)) <|endoftext|>"}
{"context": "{\n\t\t\t*(str + 4) = '\\0';\n\t\t}\n\t\t\ttm->tm_mon = 1;\n\t\t}", "partial_line": "return", "completion": "return DTK_TIME; <|endoftext|>"}
{"context": "\tntups = PQntuples(res);\n\tif (ntups == 0)\n\t}\n}\n\t\t\t\t\t\t\t\t  fmtQualifiedIdEnc(PQgetvalue(res, i, 1),", "partial_line": "PQclientEncodin", "completion": "PQclientEncoding(conn))); <|endoftext|>"}
{"context": "\tprintfPQExpBuffer(&buf,\n\t\t\t\t\t  \" WHERE p.oid = '%s'\\n\"\n\t\t\t\t\t  \"UNION ALL\\n\"\n\t\t\t\t\t  \" FROM pg_catalog.pg_ts_parser p\\n\"\n\t\t\t\t\t  gettext_noop(\"Method\"),", "partial_line": "gette", "completion": "gettext_noop(\"Function\"), <|endoftext|>"}
{"context": "\t\t\t\tappendStringInfoString(es->str, \" shared\");\n\t\t\t\tif (!INSTR_TIME_IS_ZERO(usage->shared_blk_read_time))\n\t\t\t\t\tappendStringInfoChar(es->str, ',');\n\t\t\t\tif (!INSTR_TIME_IS_ZERO(usage->local_blk_read_time))\n\t\t\t\t\t\t\t\t\t INSTR_TIME_GET_MILLISEC(usage->local_blk_read_time));", "partial_line": "appendStringInfo(es->str", "completion": "appendStringInfo(es->str, \" read=%0.3f\", <|endoftext|>"}
{"context": "                {   int ret = slice_from_s(z, 2, s_13);\n                    if (ret < 0) return ret;\n                }\n                break;\n                    if (ret < 0) return ret;", "partial_line": "{   int ret = slice_from_s(", "completion": "{   int ret = slice_from_s(z, 2, s_19); <|endoftext|>"}
{"context": "\t\t\t\t\t   const Oid *eqOperators,\n\treturn expr;\n\t\t\t\t\t  const Oid *eqOperators,\n\t\t\t\t\t  FmgrInfo **hashFunctions)\n\tint\t\t\ti;", "partial_line": "int nu", "completion": "int numCols, <|endoftext|>"}
{"context": "    {\"cdb\", PRO_BOOL, true, ON, &comment_delimiter_on_blankline},\n    {\"nbc\", PRO_BOOL, true, ON, &ps.leave_comma},\n    {\"nip\", PRO_BOOL, true, OFF, &ps.indent_parameters},\n    {\"nlp\", PRO_BOOL, true, OFF, &lineup_to_parens},\n    {\"npsl\", PRO_BOOL, true, OFF, &procnames_start_line},", "partial_line": "snprintf(fname, sizeof(f", "completion": "snprintf(fname, sizeof(fname), \"%s/%s\", getenv(\"HOME\"), prof); <|endoftext|>"}
{"context": "#include \"parser/parse_coerce.h\"\n#include \"parser/parse_cte.h\"\n\tgettext_noop(\"recursive reference to query \\\"%s\\\" must not appear within EXCEPT\")", "partial_line": "type", "completion": "typedef struct CteItem <|endoftext|>"}
{"context": "\tslot = table_slot_create(heapRelation, NULL);\n\tpredicate = ExecPrepareQual(indexInfo->ii_Predicate, estate);\n\t}\n\tAssert(snapshot == SnapshotAny || IsMVCCSnapshot(snapshot));\n\tif (progress)", "partial_line": "if (hscan->rs_b", "completion": "if (hscan->rs_base.rs_parallel != NULL) <|endoftext|>"}
{"context": "relation_excluded_by_constraints(PlannerInfo *root,\n\tbool\t\tinclude_noinherit;\n\tif (rel->baserestrictinfo == NIL)\n\t\tif (clause && IsA(clause, Const) &&\n\t\t\t\tinclude_partition = true;", "partial_line": "RestrictIn", "completion": "RestrictInfo *rinfo = (RestrictInfo *) lfirst(lc); <|endoftext|>"}
{"context": "\t\tint\t\t\ti;\n\t\t\tif (nulls[i])\n\telse\n\t\tcase OBJECT_DOMCONSTRAINT:\n\t\t\tif (list_length(args) != 1)", "partial_line": "(errcode(ERRCODE_INVALID_", "completion": "(errcode(ERRCODE_INVALID_PARAMETER_VALUE), <|endoftext|>"}
{"context": "\t\t\t Matches(\"ALTER\", \"TABLE\", MatchAny, \"ALTER\", MatchAny, \"SET\"))\n\t\t\t\t\t  \"INCREMENT\", \"MINVALUE\", \"MAXVALUE\", \"START\", \"NO\", \"CACHE\", \"CYCLE\");\n\telse if (Matches(\"ALTER\", \"TABLE\", MatchAny, \"ALTER\", \"COLUMN\", MatchAny, \"SET\", \"(\") ||\n\telse if (Matches(\"ALTER\", \"TABLE\", MatchAny, \"ALTER\", \"COLUMN\", MatchAny, \"SET\", \"GENERATED\") ||\n\t\tCOMPLETE_WITH(\"DEFAULT\", \"PLAIN\", \"EXTERNAL\", \"EXTENDED\", \"MAIN\");", "partial_line": "set_completion_re", "completion": "set_completion_reference(prev3_wd); <|endoftext|>"}
{"context": "        z->c = z->l - m1;\n            return 0;\n        lab2:\n        if (z->c <= z->lb || z->p[z->c - 1] != 'y') goto lab1;\n                z->c--;", "partial_line": "z->c = z->l - m", "completion": "z->c = z->l - m_test4; <|endoftext|>"}
{"context": "} GUCHashEntry;\nstatic HTAB *guc_hashtab;\t\t\nstatic void reapply_stacked_values(struct config_generic *variable,\n\t\t\t\t\t\t\t\t   GucStack *stack,\n\t\t\t\t\t\t\t\t\t  const char *name, const char *value);", "partial_line": "static bool", "completion": "static bool valid_custom_variable_name(const char *name); <|endoftext|>"}
{"context": "\treturn false;\n\tadd_path(rel, (Path *) create_append_path(NULL, rel, NIL, NIL,\n}\n\t\t\tcontinue;\n\t\t\tConst\t   *con = (Const *) rinfo->clause;", "partial_line": "return t", "completion": "return true; <|endoftext|>"}
{"context": "\tfree(s->thousands_sep);\n\t\treturn false;\n\t\treturn false;\n}\ndb_encoding_convert(int encoding, char **str)", "partial_line": "worklconv.grouping = strdup(", "completion": "worklconv.grouping = strdup(extlconv->grouping); <|endoftext|>"}
{"context": "\t\treturn;\nPredicateLockTID(Relation relation, ItemPointer tid, Snapshot snapshot,\n\tPREDICATELOCKTARGETTAG tag;\n\t\t\t\t\t\t\t\t\t\trelation->rd_locator.dbOid,\n\t\t\t\t\t\t\t\t\t\trelation->rd_id);", "partial_line": "dlist_foreach_m", "completion": "dlist_foreach_modify(iter, &target->predicateLocks) <|endoftext|>"}
{"context": "\t\t\t\tMergePath  *mpath = (MergePath *) path;\n\t\tcase T_HashPath:\n\t\t\t\tHashPath   *hpath = (HashPath *) path;\n\t\t\t\tREPARAMETERIZE_CHILD_PATH(jpath->outerjoinpath);\n\t\tcase T_AppendPath:", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (res)\n}\n\tspgLeafConsistentOut *out = (spgLeafConsistentOut *) PG_GETARG_POINTER(1);\n\t\treconstrValue = (text *) DatumGetPointer(in->reconstructedValue);\n\tAssert(reconstrValue == NULL ? level == 0 :", "partial_line": "fullValue = palloc0(NAM", "completion": "fullValue = palloc0(NAMEDATALEN); <|endoftext|>"}
{"context": "\t\treturn;\n\t\tif (rel->reloptkind == RELOPT_BASEREL &&\n\t\tif (heap_pages >= 0)\n\t\t\tint\t\t\theap_parallel_threshold;\n\t\t\t{", "partial_line": "if (index_parallel_th", "completion": "if (index_parallel_threshold > INT_MAX / 3) <|endoftext|>"}
{"context": "                {   int ret = slice_del(z);\n            break;\n            {   int ret = slice_from_s(z, 3, s_12);\n            }\n        case 4:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tr = VARBITS(result);\n\t\tPG_RETURN_VARBIT_P(result);\n\tp = VARBITS(arg) + byte_shift;\n\t{\n\t}", "partial_line": "PG_RETURN_VAR", "completion": "PG_RETURN_VARBIT_P(result); <|endoftext|>"}
{"context": "\t}\nWaitBufHdrUnlocked(BufferDesc *buf)\n}\nstatic inline int\n\tRelFileLocator rlocatorb;", "partial_line": "rlocatorb =", "completion": "rlocatorb = BufTagGetRelFileLocator(bb); <|endoftext|>"}
{"context": "\t\trule_action->returningList = (List *)\n\treturn rule_action;\n\t\t{\n\t\t\t\tbreak;\n\treturn newjointree;", "partial_line": "static", "completion": "static List * <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   typioparam, typmod,\n\t\t\t\tif (nest_level != ndim)\n\t\t\t\tbreak;\n\t\t\t\t errmsg(\"malformed array literal: \\\"%s\\\"\", origStr),\n\t\t\t\t errmsg(\"malformed array literal: \\\"%s\\\"\", origStr),", "partial_line": "errdetail(\"Multidimensional arrays", "completion": "errdetail(\"Multidimensional arrays must have sub-arrays with matching dimensions.\"))); <|endoftext|>"}
{"context": "void\n\tif (mcvsToUse <= 0)\n\t\t}\n\t\tnbuckets = pg_nextpower2_32(mcvsToUse + 1);\n\t\tnbuckets <<= 2;", "partial_line": "hashtable->ske", "completion": "hashtable->skewBucketLen = nbuckets; <|endoftext|>"}
{"context": "#include \"optimizer/optimizer.h\"\n#include \"utils/lsyscache.h\"\n\tAttrNumber\tlast_outer;", "partial_line": "AttrNumber\tlas", "completion": "AttrNumber\tlast_old; <|endoftext|>"}
{"context": "\t\t\tif (!have_dp)\n\t\t}\n\t\t\t}\n\t\t}\n\tdest->ndigits = i;", "partial_line": "char", "completion": "char\t   *endptr; <|endoftext|>"}
{"context": "\t\telse\npathkeys_useful_for_merging(PlannerInfo *root, RelOptInfo *rel, List *pathkeys)\n{\n}\n\tListCell   *l;", "partial_line": "int", "completion": "int\t\t\tn = 0; <|endoftext|>"}
{"context": "\tOid\t\t\topclassOid;\n\tcanonicalOid = pg_range->rngcanonical;\n\topcintype = get_opclass_input_type(opclassOid);\n\t\t\t\t\t  CacheMemoryContext);\n}", "partial_line": "Oid\t\t\trange", "completion": "Oid\t\t\trangetypeOid; <|endoftext|>"}
{"context": "int\n\tSMgrRelation reln = smgropen(ftag->rlocator, INVALID_PROC_NUMBER);\n\t\tfile = reln->md_seg_fds[ftag->forknum][ftag->segno].mdfd_vfd;\n\t\tfile = PathNameOpenFile(path, _mdfd_open_flags());\n\t}", "partial_line": "File", "completion": "FileClose(file); <|endoftext|>"}
{"context": "\tamroutine->amclusterable = false;\n\tamroutine->amkeytype = InvalidOid;\n\tamroutine->amcostestimate = dicostestimate;\n\tamroutine->ambuildphasename = NULL;\n\tamroutine->amrescan = direscan;", "partial_line": "amroutine->aminitp", "completion": "amroutine->aminitparallelscan = NULL; <|endoftext|>"}
{"context": "#define COPY_LOCATION_FIELD(fldname) \\\n\tCOPY_SCALAR_FIELD(consttype);\n\t}\n\t\t\tcase T_Boolean:\n\t\t\tcase T_String:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\tres = jperOk;\n\t\t\t\t}\n\t\t\t\t\tint\t\t\tival;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Node *) &escontext,", "partial_line": "RETURN_ERROR(", "completion": "RETURN_ERROR(ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\tfunc_signature_string(funcname, nargs,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  actual_arg_types)),\n\t\t\t\t\t\t\t\t\t\t\t\t\tcatDirectArgs),\n\t\t\t\t\t\t   actual_arg_types[0], rettype, -1,\n\t{", "partial_line": "if (is_co", "completion": "if (is_column) <|endoftext|>"}
{"context": "\tHELP0(\"  expanded (or x)\\n\"\n\tHELPN(\"  fieldsep\\n\"\n\t\t  \"    field separator for unaligned output (default \\\"%s\\\")\\n\",\n\tHELP0(\"  null\\n\"\n\t\t  \"    record (line) separator for unaligned output\\n\");", "partial_line": "\"    [full, c", "completion": "\"    [full, column, page, integer value]\\n\"); <|endoftext|>"}
{"context": "\telse if (TailMatches(\"FROM\", \"SERVER\", MatchAny))\n\telse if (TailMatches(\"OVERRIDING\"))\n\t\tCOMPLETE_WITH(\"ACCESS SHARE MODE\",\n\t\t\t\t\t  \"SHARE ROW EXCLUSIVE MODE\",\n\telse if (TailMatches(\"MERGE\", \"INTO\", MatchAny))", "partial_line": "else if (TailMatche", "completion": "else if (TailMatches(\"MERGE\", \"INTO\", MatchAny, \"AS\", MatchAny) || <|endoftext|>"}
{"context": "\t\t\treturn (double) DatumGetObjectId(value);\nstatic void\n\t\t\t\t\t\t char *hibound,\n\t\t\t\trangehi;\n\tchar\t   *sptr;", "partial_line": "rangelo = rangehi = (unsigned ch", "completion": "rangelo = rangehi = (unsigned char) hibound[0]; <|endoftext|>"}
{"context": "void\n\tfor (i = 0; i < size; ++i)\n\t\twhile (DsaPointerIsValid(item_pointer))\n\t\t\titem = dsa_get_address(hash_table->area, item_pointer);\n\t}", "partial_line": "dsa_free(ha", "completion": "dsa_free(hash_table->area, hash_table->control->handle); <|endoftext|>"}
{"context": "\taddress.objectSubId = 0;\n\tif (objtype == OBJECT_DOMAIN)\n\t\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\tObjectAddress address;\n\t\t\taddress.classId = OperatorClassRelationId;", "partial_line": "address.", "completion": "address.classId = OperatorFamilyRelationId; <|endoftext|>"}
{"context": "{\n\tlocallock->holdsStrongLockCount = false;\nvoid\n\treturn awaitedLock;\n{", "partial_line": "Assert(locallock->", "completion": "Assert(locallock->nLocks > 0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tstat->schema, stat->name,\n\t\t\t\t\t\t\t\tRelationGetRelationName(onerel)),\n\t\t\telse if (t == STATS_EXT_DEPENDENCIES)\n\t\t\t\tmcv = statext_mcv_build(data, totalrows, stattarget);\n\t\t\t\tnexprs = list_length(stat->exprs);", "partial_line": "exprstats = serializ", "completion": "exprstats = serialize_expr_stats(exprdata, nexprs); <|endoftext|>"}
{"context": "                    {   int ret = slice_from_s(z, 1, s_3);\n                    {   int ret = slice_from_s(z, 1, s_4);\n                case 6:\n                    z->c++;\n        if (z->c == z->l || z->p[z->c] != 'y') { z->c = c3; goto lab1; }", "partial_line": "while", "completion": "while(1) { <|endoftext|>"}
{"context": "\t\t\t\tObjectIdGetDatum(dbid));\n\t\t\t\tObjectIdGetDatum(classid));\n\t}\n\t\tif (oldtup)\n\t\t\tCatalogTupleDelete(sdepRel, &oldtup->t_self);", "partial_line": "values[Anum_pg_shdepend_cl", "completion": "values[Anum_pg_shdepend_classid - 1] = ObjectIdGetDatum(classid); <|endoftext|>"}
{"context": "\t\tchar\t   *colname = strVal(lfirst(cell));\n\t\t\t\t\t errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" does not exist\",\n\t\tcol_privileges[attnum] |= this_privileges;\nstatic void\nexpand_all_col_privileges(Oid table_oid, Form_pg_class classForm,", "partial_line": "if (curr_att == Inva", "completion": "if (curr_att == InvalidAttrNumber) <|endoftext|>"}
{"context": "\t\tbool\t\tmustwait;\n\t\tint\t\t\tj;\n\t\t{\n\t\t\t\t\tif (w >= nwaiting)\n\t\t\t\t\t\tabort();\t", "partial_line": "nwaiting = try_complete_steps(test", "completion": "nwaiting = try_complete_steps(testspec, waiting, nwaiting, <|endoftext|>"}
{"context": "                case 4:\n                    {   int ret = slice_from_s(z, 1, s_3);\n                    {   int ret = slice_from_s(z, 1, s_4);\n                case 6:\n                    z->c++;", "partial_line": "if (z->c == z->l || z->p[z->c] != 'y')", "completion": "if (z->c == z->l || z->p[z->c] != 'y') { z->c = c3; goto lab1; } <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   &newslot->tts_isnull[ex->attnum - 1]);\n\t\t\t\tecontext->ecxt_scantuple = newslot;\n\t\t\t\t\tnewslot->tts_values[ex->attnum - 1]\n\t\t\t\t\t\t= ExecEvalExpr(ex->exprstate,\n\t\t\t\t}", "partial_line": "attnum = E", "completion": "attnum = ExecRelGenVirtualNotNull(rInfo, insertslot, <|endoftext|>"}
{"context": "\t\t{\n\t\t\tif (S_ISDIR(st.st_mode))\n\treturn cstate;\n\tcstate->routine->CopyFromEnd(cstate);\n\t{", "partial_line": "cstate->file", "completion": "cstate->filename))); <|endoftext|>"}
{"context": "\tSpinLockAcquire(&cv->mutex);\n\tproclist_push_tail(&cv->wakeup, pgprocno, cvWaitLink);\nvoid\n}\n\t{", "partial_line": "INSTR_TIME_SET_CURR", "completion": "INSTR_TIME_SET_CURRENT(cur_time); <|endoftext|>"}
{"context": "\t\t\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t}\n\tif (geteuid() == 0)\n\t\t\t\t DataDir);\n\tCheckDataVersion();", "partial_line": "pg_log_error_hint(\"Is a se", "completion": "pg_log_error_hint(\"Is a server running?  If not, delete the lock file and try again.\"); <|endoftext|>"}
{"context": "static const symbol s_11_136[9] = { 'm', 0xC3, 0xBC, 0xC3, 0xBC, 'k', 's', 'i', 'd' };\nstatic const symbol s_11_153[9] = { 'n', 0xC3, 0xA4, 'e', 'k', 's', 'i', 't', 'e' };\nstatic const symbol s_11_155[5] = { 'n', 0xC3, 0xA4, 'e', 'n' };\nstatic const symbol s_11_156[6] = { 'n', 0xC3, 0xA4, 'e', 't', 'e' };\nstatic const symbol s_11_158[7] = { 'n', 0xC3, 0xA4, 'g', 'e', 'm', 'a' };", "partial_line": "static const symbol s_11_162[6] = { 'n',", "completion": "static const symbol s_11_162[6] = { 'n', 0xC3, 0xA4, 'h', 't', 'i' }; <|endoftext|>"}
{"context": "\tif (!TransactionIdIsValid(MyProc->xmin))\n\tsnapshot->curcid = GetCurrentCommandId(false);\n\tTransactionId oldestxid;\n\tAssert(snapshot != NULL);\n\t\tsnapshot->xip = (TransactionId *)", "partial_line": "(errcode(ERR", "completion": "(errcode(ERRCODE_OUT_OF_MEMORY), <|endoftext|>"}
{"context": "\tfor (exprno = 0; exprno < nexprs; exprno++)\n\t\tif (!stats->stats_valid)\n\t\t{\n\t\t\t\t\t\t\t\t\t  true,\n\t\t\tnulls[i] = false;", "partial_line": "values[Anum_pg_statistic_sta", "completion": "values[Anum_pg_statistic_starelid - 1] = ObjectIdGetDatum(InvalidOid); <|endoftext|>"}
{"context": "\t\tcase jbvBool:\n\tJsonbValue\tv;\n\t{\n\t\tcase JSON_TOKEN_NUMBER:\n\t\t\tv.val.numeric = DatumGetNumeric(numd);", "partial_line": "v.type = j", "completion": "v.type = jbvBool; <|endoftext|>"}
{"context": "{ 6, s_5_14, -1, 1, 0},\n{ 4, s_5_20, -1, 7, 0},\n{\n{ 5, s_6_3, -1, 4, 0},\n{ 6, s_6_5, -1, 1, 0},", "partial_line": "static const symbol s_7_4[4] = { 'i',", "completion": "static const symbol s_7_4[4] = { 'i', 'b', 'l', 'e' }; <|endoftext|>"}
{"context": "\tPG_RETURN_TEXT_P(string_to_text(str));\n\tchar\t  **argnames;\n\tnumargs = get_func_arg_info(proctup,\n\tdpns.numargs = numargs;\n\t{", "partial_line": "stmts = linitial(c", "completion": "stmts = linitial(castNode(List, n)); <|endoftext|>"}
{"context": "{\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_CONNECTION_DOES_NOT_EXIST),\n\t}\n\t\tint\t\t\tr;", "partial_line": "(errcode", "completion": "(errcode_for_socket_access(), <|endoftext|>"}
{"context": "\t\t\t DestReceiver *dest, QueryCompletion *qc)\n\t\testate->es_param_list_info = params;\n\t\tparamLI = EvaluateParams(pstate, entry, stmt->params, estate);\n\tportal->visible = false;\n\t\t\t\t\t  plan_list,", "partial_line": "c", "completion": "cplan, <|endoftext|>"}
{"context": "}\nDatum\n\tfloat8\t\targ1 = PG_GETARG_FLOAT8(0);\nDatum\ndfloor(PG_FUNCTION_ARGS)", "partial_line": "float8\t\tar", "completion": "float8\t\targ1 = PG_GETARG_FLOAT8(0); <|endoftext|>"}
{"context": "\t\t\tif (isspace((unsigned char) *s))\n\t\t\t   *StopMiddle;\n\tflag &= FF_COMPOUNDFLAGMASK;\n}\n\t\t\tConf->maffixes *= 2;", "partial_line": "Aff", "completion": "Affix->isregis = 0; <|endoftext|>"}
{"context": "                if (ret < 0) return ret;\n            }\n    switch (among_var) {\n            }\n        {   int ret = r_verb_sfx(z);", "partial_line": "if (ret < 0) r", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\tif (semId >= 0)\n\tstruct stat statbuf;\n\t\t\t\t errmsg(\"could not stat data directory \\\"%s\\\": %m\",\n\tnumSharedSemas = 0;\n\tnumSemaSets = 0;", "partial_line": "on_shmem_exit(", "completion": "on_shmem_exit(ReleaseSemaphores, 0); <|endoftext|>"}
{"context": "\toptions |= HEAP_INSERT_SPECULATIVE;\nheapam_tuple_complete_speculative(Relation relation, TupleTableSlot *slot,\n{\n\tbool\t\tshouldFree = true;\n\tTM_Result\tresult;", "partial_line": "pf", "completion": "pfree(tuple); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   REG_ADVANCED | REG_ICASE,\n\t\t\t\t\t\t\t\t\t\t   PG_GET_COLLATION(),\nDatum\nDatum\n\ttext\t   *s = PG_GETARG_TEXT_PP(0);", "partial_line": "0,", "completion": "0, NULL)); <|endoftext|>"}
{"context": "\treturn true;\n\tint\t\t\tnindexes;\n\t{\n\t\tboundKinds = (PartitionRangeDatumKind *) palloc(ndatums * partnatts *\n\t\t\t\tbyval = key->parttypbyval[j];", "partial_line": "typlen = ke", "completion": "typlen = key->parttyplen[j]; <|endoftext|>"}
{"context": "\tbase->arg = arg;\n\t\tsortKey->ssup_collation = scanKey->sk_collation;\n}\n\t\t\t\t\t\t\tRelation indexRel,\n\t\t\t\t\t\t\tint sortopt)", "partial_line": "TuplesortPublic", "completion": "TuplesortPublic *base = TuplesortstateGetPublic(state); <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n\t\tWSAEMFILE, \"Too many open sockets\"", "partial_line": "WSAEWOU", "completion": "WSAEWOULDBLOCK, \"Operation would block\" <|endoftext|>"}
{"context": "\t\t\tif (opno != matchOpno ||\n\ticlause->indexcols = NIL;\n\tint\t\t\top_strategy;\n\tint\t\t\tmatching_cols;\n\ticlause->indexcol = indexcol;", "partial_line": "&op", "completion": "&op_righttype); <|endoftext|>"}
{"context": "\t\tresult = typtup->typstorage;\n{\n\tif (!HeapTupleIsValid(typeTuple))\n\t\t\t\t\t\t\t\ttypeTuple,\n\t\t{", "partial_line": "dat", "completion": "datum, <|endoftext|>"}
{"context": "static void\n\t\t\td->stem = m->stem;\n\t\t\td->needrecode = false;\n\t\t\treturn;\n\t{", "partial_line": "if (m->enc == PG_UTF8 && pg_s", "completion": "if (m->enc == PG_UTF8 && pg_strcasecmp(m->name, lang) == 0) <|endoftext|>"}
{"context": "\t}\n\t\tfinfo = palloc0(sizeof(FmgrInfo));\n\t\t\tscratch.resvalue = &state->resvalue;\n\t\t\tAssert(iresult != NULL);\n\t\t\tscratch.resnull = &iresult->isnull;", "partial_line": "as->opcode == EEOP_HASHDAT", "completion": "as->opcode == EEOP_HASHDATUM_NEXT32 || <|endoftext|>"}
{"context": "\t\t\t\t\t\t flags,\n\treportDependentObjects(targetObjects,\n\t\t\t\t\t\t DropBehavior behavior, int flags)\n\t\t\t\t\t\t\t objects,\n\t\t\t\t\t int objflags,", "partial_line": "const ObjectAddresses *pen", "completion": "const ObjectAddresses *pendingObjects, <|endoftext|>"}
{"context": "\tTidStoreIter *iter;\n\tAssert(vacrel->num_index_scans > 0);\n\t\t\t\t\t\t\t\t\t\tvacrel->bstrategy,\n\t\t\t\t\t\t\t\t\t\tsizeof(TidStoreIterResult));\n\t\tPage\t\tpage;", "partial_line": "OffsetNumber offset", "completion": "OffsetNumber offsets[MaxOffsetNumber]; <|endoftext|>"}
{"context": "\treturn numbytes;\n}\n\tif (nitems <= 0)\n\tdestbitmask = 1 << (destoffset % 8);\n\t\t\tif (srcbitval & srcbitmask)", "partial_line": "destbitval", "completion": "destbitval |= destbitmask; <|endoftext|>"}
{"context": "}\nstatic int r_Step_5a(struct SN_env * z);\nstatic int r_Step_1b(struct SN_env * z);", "partial_line": "static", "completion": "static const struct among a_0[4] = <|endoftext|>"}
{"context": "\tint16\t\tmax_pinned_buffers;\n\tint16\t\toldest_io_index;\n\t\t\t\t\t\t   void *callback_private_data,\n}\n\t\tstream->buffered_blocknum = InvalidBlockNumber;", "partial_line": "VALGRIND_MAKE", "completion": "VALGRIND_MAKE_MEM_UNDEFINED(per_buffer_data, <|endoftext|>"}
{"context": "{\n\tMemoryContext oldcontext;\n\tedata = &errdata;\n\tErrorData  *edata = &errordata[errordata_stack_depth];\n\trecursion_depth++;", "partial_line": "if (edata->output_to_server", "completion": "if (edata->output_to_server && emit_log_hook) <|endoftext|>"}
{"context": "\t\trecoveryStopAfter = true;\n\t\t\t\t LSN_FORMAT_ARGS(recoveryStopLSN));\n\tif (endOfRecovery)\nrecoveryApplyDelay(XLogReaderState *record)\n\tdelayUntil = TimestampTzPlusMilliseconds(xtime, recovery_min_apply_delay);", "partial_line": "while (", "completion": "while (true) <|endoftext|>"}
{"context": "\t}\n\t\t{\n\t\t\tif (GinItupIsCompressed(itup))\n\t\t\t\tfree_items_orig = true;\n\t\t\t\tif (nitems > 0)", "partial_line": "nitem", "completion": "nitems, true); <|endoftext|>"}
{"context": "\tpathnode->path.pathtype = T_ForeignScan;\n\t\t\t\t\t\t  List *fdw_restrictinfo,\n\tpathnode->path.parallel_safe = rel->consider_parallel;\n\treturn pathnode;\ncalc_nestloop_required_outer(Relids outerrelids,", "partial_line": "Relids inne", "completion": "Relids innerrelids, <|endoftext|>"}
{"context": "SPI_cursor_parse_open(const char *name,\n\tif (SPI_result < 0)\n\tplan.parse_mode = RAW_PARSE_DEFAULT;\n\t\tplan.parserSetupArg = options->params->parserSetupArg;\n\tchar\t   *query_string;", "partial_line": "Portal\t\tp", "completion": "Portal\t\tportal; <|endoftext|>"}
{"context": "\tbool\t   *check = (bool *) PG_GETARG_POINTER(0);\n\tbool\t\tres;\n\tswitch (strategy)\n\t\tcase GinOverlapStrategy:\n\t\t\tfor (i = 0; i < nkeys; i++)", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tdclist_init(&MXactCache);\n\tAssert(len == sizeof(MultiXactId));\n}\n{\n}", "partial_line": "debug_elog2(DEBUG2, \"Shared Memory Init", "completion": "debug_elog2(DEBUG2, \"Shared Memory Init for MultiXact\"); <|endoftext|>"}
{"context": "\tcontext.buf = buf;\n\tcontext.targetList = NIL;\n\tcontext.colNamesVisible = colNamesVisible;\n\tset_deparse_for_query(&dpns, query, parentnamespace);\n\t\tcase CMD_UPDATE:", "partial_line": "get_update_query_def(query", "completion": "get_update_query_def(query, &context); <|endoftext|>"}
{"context": "\t\t\tif (t_iseq(str, '#'))\n\t\t\t}\n\t\t\t\tstate = PAE_INFIND;\n\t\t}\n\t\t}", "partial_line": "if (t_is", "completion": "if (t_iseq(str, '#')) <|endoftext|>"}
{"context": "#include \"catalog/pg_aggregate.h\"\n#include \"utils/lsyscache.h\"", "partial_line": "ParseState", "completion": "ParseState *pstate; <|endoftext|>"}
{"context": "\telse if (Matches(\"CREATE\", \"PUBLICATION\", MatchAny, \"FOR\", \"ALL\"))\n\t\tCOMPLETE_WITH(\"WITH (\");\n\t\tCOMPLETE_WITH(\"publish\", \"publish_generated_columns\", \"publish_via_partition_root\");\n\t\t\t Matches(\"CREATE\", \"OR\", \"REPLACE\", \"RULE\", MatchAny, \"AS\", \"ON\"))\n\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_tables);", "partial_line": "COMPLETE_WITH_CS(\"smallin", "completion": "COMPLETE_WITH_CS(\"smallint\", \"integer\", \"bigint\"); <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\tif (TupleDescAttr(tupdesc, attnum - 1)->attgenerated)\n\t\t\t\t  errhint(\"Use %s instead.\", \"ALTER TABLE ... ALTER COLUMN ... DROP EXPRESSION\") : 0)));\n\t\trawEnt->generated = '\\0';\n\t\tAddRelationNewConstraints(rel, list_make1(rawEnt), NIL,", "partial_line": "ATExecCookedColumnDefault(Relation rel,", "completion": "ATExecCookedColumnDefault(Relation rel, AttrNumber attnum, <|endoftext|>"}
{"context": "static void\n\tentry.nodeid = nodeid;\n\tTransactionId oldestCommitTsXid;\n\t\t\t*nodeid = commitTsShared->dataLastCommit.nodeid;\n\t\treturn *ts != 0;", "partial_line": "oldestCommitTsXi", "completion": "oldestCommitTsXid = TransamVariables->oldestCommitTsXid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   escontext, &lower.val))\n\trange = make_range(cache->typcache, &lower, &upper,\nDatum\n\tRangeType  *range = PG_GETARG_RANGE_P(0);\n\toutput_str = range_deparse(flags, lbound_str, ubound_str);", "partial_line": "Oid\t\t\tr", "completion": "Oid\t\t\trngtypoid = PG_GETARG_OID(1); <|endoftext|>"}
{"context": "\t\t\tpfree(str_value);\n\t\t\tpolicy->with_check_qual = NULL;\n\ttable_close(catalog, AccessShareLock);\nvoid\n{", "partial_line": "Oi", "completion": "Oid\t\t\trelid; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\tprintTableAddFooter(&cont, buf.data);\n\t\t\t\t\t\t  \"FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i\\n\"\n\t\t\t{\n\t\t\t\tif (i == 0)", "partial_line": "PQclear(r", "completion": "PQclear(result); <|endoftext|>"}
{"context": "\tECPGt_char,(t),(long)64,(long)1,(64)*sizeof(char), \n#line 83 \"cursor.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\n\tstrcpy(msg, \"fetch :count\");\n\tECPGt_int,&(id),(long)1,(long)1,sizeof(int), ", "partial_line": "#line", "completion": "#line 95 \"cursor.pgc\" <|endoftext|>"}
{"context": "\t\t\taddress.classId = ExtensionRelationId;\n\t\t\taddress.objectSubId = 0;\n\t\t\taddress.objectSubId = 0;\n\t\t\taddress.classId = LanguageRelationId;\n\t\t\taddress.objectId = get_foreign_server_oid(name, missing_ok);", "partial_line": "address.objectId", "completion": "address.objectId = get_event_trigger_oid(name, missing_ok); <|endoftext|>"}
{"context": "\t\taddFkRecurseReferencing(wqueue,\n\t\t\t\t\t\t\t\tfkconstraint,\n\t\t\t\t\t\t\t\tnumfks,\n\t\ttable_close(pkrel, NoLock);\n\t\t\t\t\t\t\t Oid parentConstrOid,", "partial_line": "Oid parent", "completion": "Oid parentUpdTrigger, <|endoftext|>"}
{"context": "\t\tvec = vld1q_u8((const uint8 *) buf);\n\t\taccum4 = vpadalq_u32(accum4, vpaddlq_u16(vpaddlq_u8(vcntq_u8(vec))));\n\t}\n\t\taccum2 = vpadalq_u32(accum2, vpaddlq_u16(vpaddlq_u8(vcntq_u8(vec))));\n\t\tbytes -= bytes_per_iteration;", "partial_line": "popcnt += pg", "completion": "popcnt += pg_popcount64(*((uint64 *) buf)); <|endoftext|>"}
{"context": "typedef enum addFkConstraintSides\n\taddFkReferencingSide,\n\t\t\t\t\t\t\t bool is_partition, List **supconstr,\n\t\t\t\t\t\t\t   Oid oldNspOid, Oid newNspOid, ObjectAddresses *objsMoved,\n\t\t\t\t\t\t\t\t\t\t\tRelation conrel, Relation tgrel,", "partial_line": "Oid Re", "completion": "Oid ReferencingParentInsTrigger, <|endoftext|>"}
{"context": "\t}\n\t}\n\telse\n\t{\n\t\thugepagesize_local = 2 * 1024 * 1024;", "partial_line": "if (mmap_", "completion": "if (mmap_flags) <|endoftext|>"}
{"context": "\tAssert(operation == CMD_MERGE ||\n\t\tnode->onConflictSet = onconflict->onConflictSet;\n\t}\n\tnode->returningNewAlias = root->parse->returningNewAlias;\n\tfdw_private_list = NIL;", "partial_line": "if (rti < root->simp", "completion": "if (rti < root->simple_rel_array_size && <|endoftext|>"}
{"context": "\tOffsetNumber i,\n\tright = (OffsetNumber *) palloc(nbytes);\n\tsplitvec->spl_nright = 0;\n\t\t\t\tright[splitvec->spl_nright++] = i;\n\t\t}", "partial_line": "splitvec->spl_", "completion": "splitvec->spl_nleft = splitvec->spl_nright = 0; <|endoftext|>"}
{"context": "\t\tcase T_DropReplicationSlotCmd:\n\t\t\t\tPreventInTransactionBlock(true, cmdtag);\n\t\t\t\tif (cmd->kind == REPLICATION_KIND_PHYSICAL)\n\t\t\t\tCommitTransactionCommand();\n\t\t\tbreak;", "partial_line": "pr", "completion": "proc_exit(0); <|endoftext|>"}
{"context": "\tint\t\t\toutlen;\ntypedef struct", "partial_line": "if (*in ==", "completion": "if (*in == '\\0') <|endoftext|>"}
{"context": "\tuint64\t\tqueryid;\n{\n\tBufferUsage *buffer_usage;\n\tchar\t   *relnamespace;\n};", "partial_line": "static int\tparallel_vacuum_compute_workers(Relation *i", "completion": "static int\tparallel_vacuum_compute_workers(Relation *indrels, int nindexes, int nrequested, <|endoftext|>"}
{"context": "{\n\tRangeBound\tlower1,\n\tAssert(!empty);\n\tmultirange_get_bounds(rangetyp, mr, 0, &lower2, &upper2);\n\t\t\t\tlower2,", "partial_line": "multirange_get_bounds(rangetyp, mr1, mr", "completion": "multirange_get_bounds(rangetyp, mr1, mr1->rangeCount - 1, <|endoftext|>"}
{"context": "\t\t\t\tmid;\n\t\t\t\t\t\t\t\t\t\t\tboundinfo->datums[mid],\n\t\tif (cmpval <= 0)\n\t\t\thi = mid - 1;\n\t{", "partial_line": "bo", "completion": "bound_modulus, <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include <sys/stat.h>\n#include \"pgstat.h\"\nWalRcvShmemSize(void)\n\treturn size;", "partial_line": "ShmemInitStruct(\"Wal Receiver Ctl\", W", "completion": "ShmemInitStruct(\"Wal Receiver Ctl\", WalRcvShmemSize(), &found); <|endoftext|>"}
{"context": "\tinitStringInfo(&result);\n\t\tappendStringInfo(&result, \".%s\",\n\tchar\t   *tabletypename;\n\t\telse\n\tappendStringInfoString(&result,", "partial_line": "\"  </xsd:seq", "completion": "\"  </xsd:sequence>\\n\" <|endoftext|>"}
{"context": "\t\tcase ConstraintRelationId:\n\t\t\t\t\t\telog(ERROR, \"cache lookup failed for constraint %u\",\n\t\t\t\tif (OidIsValid(con->conrelid))\n\t\t\t\t\tinitStringInfo(&rel);\n\t\t\t\t\tgetRelationDescription(&rel, con->conrelid, false);", "partial_line": "appendStr", "completion": "appendStringInfo(&buffer, _(\"constraint %s\"), <|endoftext|>"}
{"context": "    {   int m2 = z->l - z->c; (void)m2;\n        {   int ret = r_main_suffix(z);\n        {   int ret = r_consonant_pair(z);\n        z->c = z->l - m3;\n        {   int ret = r_other_suffix(z);", "partial_line": "z->c =", "completion": "z->c = z->lb; <|endoftext|>"}
{"context": "\t\tcase SVFOP_CURRENT_USER:\n\t\tcase SVFOP_USER:\n\t\t\t*op->resnull = fcinfo->isnull;\n\t\tcase SVFOP_CURRENT_SCHEMA:\n\t\t\t errmsg(\"WHERE CURRENT OF is not supported for this table type\")));", "partial_line": "switch (op->d.nextvalu", "completion": "switch (op->d.nextvalueexpr.seqtypid) <|endoftext|>"}
{"context": "Datum\n}\n\t}\n\tinet\t   *a2 = PG_GETARG_INET_PP(1);\n\t{", "partial_line": "inet\t   *a1 = PG_GETA", "completion": "inet\t   *a1 = PG_GETARG_INET_PP(0); <|endoftext|>"}
{"context": "\t\t\tresult = lappend_oid(result, aform->amopfamily);\n\tReleaseSysCacheList(catlist);\n\t\t*rhs_opno = InvalidOid;\n\t{\n\t\tif (aform->amopmethod == HASH_AM_OID &&", "partial_line": "if (", "completion": "if (!rhs_opno) <|endoftext|>"}
{"context": "{\n\tconst unsigned char *ptr = (const unsigned char *) name;\n\t{\n\treturn true;\n{", "partial_line": "needed += variab", "completion": "needed += variables->nvars; <|endoftext|>"}
{"context": "Size\nProcArrayShmemSize(void)\n{\n\tSize\t\tsize;\n\t\tsize = add_size(size,", "partial_line": "procArray->replication_slot_catalog_xmin = I", "completion": "procArray->replication_slot_catalog_xmin = InvalidTransactionId; <|endoftext|>"}
{"context": "\t\t\t\tMUTATE(newnode->onConflictWhere, oc->onConflictWhere, Node *);\n\t\t\t\treturn (Node *) newnode;\n\t\t\tbreak;\n\t\tcase T_JoinExpr:\n\t\t\t\tMUTATE(newnode->rarg, join->rarg, Node *);", "partial_line": "Inde", "completion": "IndexClause *newnode; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"cannot delete path in scalar\")));\n\t\tPG_RETURN_JSONB_P(in);\n\tres = setPath(&it, path_elems, path_nulls, path_len, &st,\njsonb_insert(PG_FUNCTION_ARGS)\n\tArrayType  *path = PG_GETARG_ARRAYTYPE_P(1);", "partial_line": "Jsonb", "completion": "Jsonb\t   *newjsonb = PG_GETARG_JSONB_P(2); <|endoftext|>"}
{"context": "List *\n\t\t\t\treturn pstmt->planTree->targetlist;\n\t\tAssert(PortalIsValid(subportal));\n}\n\t\tPortalContext = portal->portalContext;", "partial_line": "myeflags = eflags | EXEC_FLAG_REWIND | E", "completion": "myeflags = eflags | EXEC_FLAG_REWIND | EXEC_FLAG_BACKWARD; <|endoftext|>"}
{"context": "\t\t\t\tnum_hist = num_bins + 1;\n\t\t\tbound_hist_values = (Datum *) palloc(num_hist * sizeof(Datum));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   false,\n\t\t\t\t\tpos++;\n\t\t\tstats->stavalues[slot_idx] = bound_hist_values;", "partial_line": "qsort_interruptib", "completion": "qsort_interruptible(lengths, non_empty_cnt, sizeof(float8), <|endoftext|>"}
{"context": "\tif (aclresult == ACLCHECK_OK)\n\troleid = get_role_oid_or_public(NameStr(*rolename));\n\tprivresult = column_privilege_check(tableoid, colattnum, roleid, mode);\n{\n\tOid\t\t\troleid;", "partial_line": "AclM", "completion": "AclMode\t\tmode; <|endoftext|>"}
{"context": "\t\t\t strcmp(token->string, \"hostssl\") == 0 ||\n\t\t\tereport(elevel,\n\t\t\t\t\t errmsg(\"hostssl record cannot match because SSL is not supported by this build\"),\n\t\t\t*err_msg = \"hostssl record cannot match because SSL is not supported by this build\";\n\t\t}", "partial_line": "else if (", "completion": "else if (token->string[4] == 'g') <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tcur_timeout = -1L;\n\t\t\t\t\t\t\t logbuffer + bytes_in_logbuffer,\n\t\t\t\t\t\t\t sizeof(logbuffer) - bytes_in_logbuffer);\n\t\t\telse if (bytesRead > 0)", "partial_line": "LeaveCriticalSection", "completion": "LeaveCriticalSection(&sysloggerSection); <|endoftext|>"}
{"context": "\tOid\t\t\tdomainoid;\n\tNode\t   *defaultExpr = NULL; \n\tObjectAddress address;\n\trel = table_open(TypeRelationId, RowExclusiveLock);\n\t\telog(ERROR, \"cache lookup failed for type %u\", domainoid);", "partial_line": "defaultEx", "completion": "defaultExpr = NULL; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\texit(0);\n\t\t\t\tputs(\"pg_regress (PostgreSQL) \" PG_VERSION);\n\t\t\t\tsplit_to_stringlist(optarg, \",\", &dblist);\n\t\t\t\tbreak;", "partial_line": "outputdir =", "completion": "outputdir = pg_strdup(optarg); <|endoftext|>"}
{"context": "#include \"commands/copy.h\"\n#include \"parser/parse_relation.h\"", "partial_line": "#include \"replicatio", "completion": "#include \"replication/logicallauncher.h\" <|endoftext|>"}
{"context": "{\n\tif (SRF_IS_FIRSTCALL())\n\t\ttext\t   *prsname = PG_GETARG_TEXT_PP(0);\ntypedef struct\n\tint\t\t\tcur;", "partial_line": "prs_setup_firstcall(F", "completion": "prs_setup_firstcall(FuncCallContext *funcctx, FunctionCallInfo fcinfo, <|endoftext|>"}
{"context": "\t\t{\n\t\t\tif (GinItupIsCompressed(itup))\n\t\t\t\tfree_items_orig = true;\n\t\t\t\tif (nitems > 0)\n\t\t\t\t\t\t\t\t\tnitems, true);", "partial_line": "Buffer", "completion": "Buffer\t\tbuffer; <|endoftext|>"}
{"context": "{ 6, s_2_153, 134, 102, 0},\n{ 3, s_2_155, -1, 116, 0},\n{ 6, s_2_162, 155, 127, 0},\n{ 7, s_2_166, 155, 117, 0},\n{ 7, s_2_167, 155, 90, 0},", "partial_line": "{ 4,", "completion": "{ 4, s_2_170, -1, 13, 0}, <|endoftext|>"}
{"context": "\t\tif (childrel->rd_rel->relkind == RELKIND_PARTITIONED_TABLE)\n\t\t{\n\t\t\t\t\t\t\t\t\t   childrel,\n\t\ttable_close(childrel, NoLock);\n}", "partial_line": "expand_single_inheritance_child(PlannerInfo *root, Ra", "completion": "expand_single_inheritance_child(PlannerInfo *root, RangeTblEntry *parentrte, <|endoftext|>"}
{"context": "\tif (queue->tail == queue->head)\n\thead = io_worker_submission_queue->head;\n\tif (tail > head)\nstatic bool\npgaio_worker_submit_internal(int nios, PgAioHandle *ios[])", "partial_line": "LWLockAcqui", "completion": "LWLockAcquire(AioWorkerSubmissionQueueLock, LW_EXCLUSIVE); <|endoftext|>"}
{"context": "\tif (aggstrategy == AGG_PLAIN)\n\t\ttotal_cost += aggcosts->finalCost.per_tuple * numGroups;\n\t\ttotal_cost += aggcosts->finalCost.per_tuple * numGroups;\n\t\toutput_tuples = numGroups;\n\t\tdouble\t\tpages;", "partial_line": "doubl", "completion": "double\t\tspill_cost; <|endoftext|>"}
{"context": "\t\t\tOid\t\t\tfk_period_type = RIAttType(fk_rel, riinfo->fk_attnums[riinfo->nkeys - 1]);\n\t\t\tappendStringInfoChar(&intersectbuf, '(');\n\t\t\tappendStringInfoChar(&intersectbuf, ')');\n\t\t\t\t\t\t\t\tparamname, pk_type,\n\t\t\t\t\t\t\triinfo->agged_period_contained_by_oper,", "partial_line": "appendStringInfoString(&quer", "completion": "appendStringInfoString(&querybuf, \" FOR KEY SHARE OF x\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  SCRIPT_PREFIX, SCRIPT_EXT);\n\t\t\t   \"\\nWARNING:  new data directory should not be inside the old data directory, i.e. %s\", old_cluster_pgdata);\n\t\tchar\t\told_tablespace_dir[MAXPGPATH];\n\t\tcanonicalize_path(old_tablespace_dir);\n\t\t\tpg_free(*deletion_script_file_name);", "partial_line": "prep_status(\"Cr", "completion": "prep_status(\"Creating script to delete old cluster\"); <|endoftext|>"}
{"context": "\t\t\tvar = plpgsql_build_variable(\"tg_when\", 0,\n\t\t\t\t\t\t\t\t\t\t plpgsql_build_datatype(TEXTOID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNULL),\n\t\t\t((PLpgSQL_var *) var)->promise = PLPGSQL_PROMISE_TG_OP;\n\t\t\t\t\t\t\t\t\t\t true);", "partial_line": "Assert(var->dtyp", "completion": "Assert(var->dtype == PLPGSQL_DTYPE_VAR); <|endoftext|>"}
{"context": "\t}\n\t\tprintTableFooter *footers = footers_with_default(cont);\n{\n\t\t\t\telse if (last_opt_table_attr_char != NULL)\n\t\t\tif (opt_border != 0 && i < cont->ncolumns - 1)", "partial_line": "latex_esc", "completion": "latex_escaped_print(*ptr, fout); <|endoftext|>"}
{"context": "\t\twhile ((r1 = JsonbIteratorNext(it1, &v1, true)) != WJB_END_OBJECT)\n\t\t\tres = pushJsonbValue(state, r2, r2 != WJB_END_OBJECT ? &v2 : NULL);\n\t}\n\t\t{\n\t\t}", "partial_line": "pushJsonbValue(state, WJB_B", "completion": "pushJsonbValue(state, WJB_BEGIN_OBJECT, NULL); <|endoftext|>"}
{"context": "static int\tZeroSUBTRANSPage(int64 pageno);\n{\n\tTransactionId *ptr;\n\tptr += entryno;\n\t\tAssert(*ptr == InvalidTransactionId);", "partial_line": "*ptr", "completion": "*ptr = parent; <|endoftext|>"}
{"context": "\t{\n\t{\n\ttm_tmp = localtime(&time_tmp);\n\t\tXLByteToSeg(ControlFile->checkPointCopy.redo, segno, WalSegSz);\n\tfor (i = 0; i < MOCK_AUTH_NONCE_LEN; i++)", "partial_line": "ControlFi", "completion": "ControlFile->pg_control_version); <|endoftext|>"}
{"context": "\t\t\tcase RTE_VALUES:\n\t\tget_rte_alias(rte, varno, false, context);\n\t\t\tget_from_clause_coldeflist(rtfunc1, colinfo, context);\n\t\t{\n\t\tJoinExpr   *j = (JoinExpr *) jtnode;", "partial_line": "-PR", "completion": "-PRETTYINDENT_STD, <|endoftext|>"}
{"context": "\t\t\tappendPQExpBufferStr(dbQry, \";\\n\");\n\t\t\t\t\t\t\t\t\t  .description = \"COMMENT\",\n\t\tshres = ExecuteSqlQuery(fout, seclabelQry->data, PGRES_TUPLES_OK);\n\t\t\t\t\t\t\t\t\t  .createStmt = seclabelQry->data,\n\t\t\t\t\t\t\t\t\t  .deps = &dbDumpId,", "partial_line": "if (strlen(datconnlimit) > 0 && strcmp(datco", "completion": "if (strlen(datconnlimit) > 0 && strcmp(datconnlimit, \"-1\") != 0) <|endoftext|>"}
{"context": "{ 12, s_1_37, -1, 4, 0},\nstatic const symbol s_2_18[12] = { 0xCF, 0x80, 0xCE, 0xB5, 0xCF, 0x81, 0xCE, 0xB9, 0xCF, 0x80, 0xCE, 0xB1 };\nstatic const symbol s_2_28[8] = { 0xCE, 0xBA, 0xCE, 0xBF, 0xCF, 0x81, 0xCE, 0xBD };\nstatic const symbol s_2_30[14] = { 0xCF, 0x83, 0xCF, 0x85, 0xCE, 0xBD, 0xCE, 0xB1, 0xCE, 0xB8, 0xCF, 0x81, 0xCE, 0xBF };\n{ 2, s_2_0, -1, 2, 0},", "partial_line": "{ 2, s_2_2, -1,", "completion": "{ 2, s_2_2, -1, 2, 0}, <|endoftext|>"}
{"context": "\tif (stat(ConfigFileName, &stat_buf) != 0)\n\t{\n\tSetConfigOption(\"data_directory\", DataDir, PGC_POSTMASTER, PGC_S_OVERRIDE);\n\tpg_timezone_abbrev_initialize();\n\t}", "partial_line": "els", "completion": "else if (configdir) <|endoftext|>"}
{"context": "\t\t\t attnum, relid);\n\t\t\t\t\t\t\tInt16GetDatum(attnum));\n\t\t\t attnum, relid);\n\t\t\t\t\t\tformat_type_be(targettypeid))));\n\t\telog(ERROR, \"cache lookup failed for collation %u\", colloid);", "partial_line": "if (H", "completion": "if (HeapTupleIsValid(tp)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\troot);\n\t\tif (indexonly)\n\t{\n\t\tpages_fetched = ceil(indexSelectivity * (double) baserel->pages);\n\t\telse", "partial_line": "if (inde", "completion": "if (indexonly) <|endoftext|>"}
{"context": "\tsnapshot->xip =\n\t\t(TransactionId *) ((char *) snapshot + sizeof(SnapshotData));\nSnapBuildInitialSnapshot(SnapBuild *builder)\n\tTransactionId safeXid;\n\tTransactionId *newxip;", "partial_line": "if (!build", "completion": "if (!builder->committed.includes_all_transactions) <|endoftext|>"}
{"context": "#include \"access/tableam.h\"\n#include \"catalog/catalog.h\"\n#include \"catalog/dependency.h\"\n#include \"catalog/indexing.h\"\n#include \"catalog/pg_trigger.h\"", "partial_line": "#include \"comm", "completion": "#include \"commands/trigger.h\" <|endoftext|>"}
{"context": "\t\t\t\t\t  rightarg->sk_strategy == BTEqualStrategyNumber);\n\t\t}\n\t\tif (leftarray)\n\t\t\treturn _bt_compare_array_scankey_args(scan, rightarg, leftarg,\n\tlefttype = leftarg->sk_subtype;", "partial_line": "righttype", "completion": "righttype = rightarg->sk_subtype; <|endoftext|>"}
{"context": "\t\telse if (hjstate->hj_CurSkewBucketNo < hashtable->nSkewBuckets)\n\t\t\thashTuple = hashtable->skewBucket[j]->tuples;\n\t\t{\n\t\t\t\tinntuple = ExecStoreMinimalTuple(HJTUPLE_MINTUPLE(hashTuple),\n\t\t\t\t\t\t\t\t\t\t\t\t false);\t", "partial_line": "hjstate->hj_CurTuple =", "completion": "hjstate->hj_CurTuple = hashTuple; <|endoftext|>"}
{"context": "\tbool\t\tnulls[2] = {false, false};\n\t\tnulls[1] = true;\n\telse if (_state->next_scalar)\n\t\tvalues[1] = CStringGetTextDatum(_state->normalized_scalar);\n\telse", "partial_line": "errmsg(\"cannot d", "completion": "errmsg(\"cannot deconstruct a scalar\"))); <|endoftext|>"}
{"context": "\tPyErr_SetString(exc, buf);\nPLy_exception_set_plural(PyObject *exc,\n\tva_list\t\tap;\n{\n\tif (!args)", "partial_line": "if (!e", "completion": "if (!error) <|endoftext|>"}
{"context": "\t\t\t\t\treturn ENOMEM;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\tfree(t);\n\t\t\t\tstrcpy(*output, t);", "partial_line": "fr", "completion": "free(t); <|endoftext|>"}
{"context": "static const char *progname;\nstatic void (*log_locus_callback) (const char **, uint64 *);\n\tif (hOut == INVALID_HANDLE_VALUE)\n\t\treturn false;\n\t\treturn false;", "partial_line": "retu", "completion": "return true; <|endoftext|>"}
{"context": "                        if (ret < 0) return ret;\n        if (!among_var) goto lab9;\n            case 1:\n                    if (ret < 0) return ret;\n                {   int ret = r_R1(z);", "partial_line": "if (", "completion": "if (ret == 0) goto lab9; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t bool isCommit,\n\t}\n\t\t\t\tProcReleaseLocks(isCommit);\n\t\t\t}", "partial_line": "in", "completion": "int\t\t\tnlocks; <|endoftext|>"}
{"context": "\t\tSx = Sx1;\n\t\tSxx = Sxx1;\n\t\tSxy = Sxy1;\n\t\tSxy = Sxy1 + Sxy2 + N1 * N2 * tmp1 * tmp2 / N;\n\t\ttransvalues1[0] = N;", "partial_line": "transv", "completion": "transvalues1[3] = Sy; <|endoftext|>"}
{"context": "}\n\tPG_RETURN_NUMERIC(int64_to_numeric(val));\nint64\n\t\t\treturn 0;\n\t\t\tif (NUMERIC_IS_NAN(num))", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\telse if (ndim == 1)\n\t\tint\t\t\tnelems;\n\t\tdeconstruct_array_builtin(arr, TEXTOID, &datum_opts, NULL, &nelems);\n\t\t}", "partial_line": "if (!RecoveryInPro", "completion": "if (!RecoveryInProgress()) <|endoftext|>"}
{"context": "{ 7, s_6_19, 17, 3, 0},\nstatic const symbol s_7_0[1] = { 'e' };\nstatic const symbol s_7_4[3] = { 'I', 'e', 'r' };\n{ 1, s_7_0, -1, 3, 0},\n{ 4, s_7_2, 0, 2, 0},", "partial_line": "{ 3,", "completion": "{ 3, s_7_4, -1, 2, 0}, <|endoftext|>"}
{"context": "\tswitch (best_path->pathtype)\n\t\t\t\t\t\t\t\t\t\t\t\tscan_clauses);\n\t\t\tbreak;\n\t\tcase T_SampleScan:\n\t\t\t\t\t\t\t\t\t\t\t\t  scan_clauses,", "partial_line": "t", "completion": "tlist, <|endoftext|>"}
{"context": "\t{\n\t\t\treturn false;\t\t\n\t}\n\t\tpg_fatal(\"could not open file \\\"%s\\\" for reading: %m\", path);\n\tmaxlines = 1024;", "partial_line": "maxlines", "completion": "maxlines *= 2; <|endoftext|>"}
{"context": "static const symbol s_2_1860[5] = { 'i', 'j', 'a', 'l', 'u' };\nstatic const symbol s_2_1862[3] = { 'e', 'l', 'u' };\nstatic const symbol s_2_1874[6] = { 'k', 'i', 'j', 'e', 'm', 'u' };\nstatic const symbol s_2_1876[8] = { 0xC5, 0xA1, 'k', 'i', 'j', 'e', 'm', 'u' };\nstatic const symbol s_2_1882[9] = { 'o', 'v', 'i', 't', 'i', 'j', 'e', 'm', 'u' };", "partial_line": "static const symbol s_2_1888[8] = { 'o'", "completion": "static const symbol s_2_1888[8] = { 'o', 0xC5, 0xA1, 'i', 'j', 'e', 'm', 'u' }; <|endoftext|>"}
{"context": "\tJsonPathGinAddPathItemFunc add_path_item;\n\tJsonPathGinExtractNodesFunc extract_nodes;\nstatic Datum make_scalar_key(const JsonbValue *scalarVal, bool is_key);\nstatic void\n\t\t\tentries->buf = repalloc(entries->buf,", "partial_line": "len", "completion": "len2; <|endoftext|>"}
{"context": "\tList\t   *newWithCheckOptions;\n\troot->all_result_relids =\n\troot->append_rel_list = NIL;\n\troot->rowMarks = NIL;\n\troot->placeholdersFrozen = false;", "partial_line": "root->partColsUpdated", "completion": "root->partColsUpdated = false; <|endoftext|>"}
{"context": "\t\t\treturn NULL;\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t(strategy > InvalidStrategy && strategy <= BTMaxStrategyNumber))\n\tamroutine = GetIndexAmRoutineByAmId(amoid, false);\n\tStrategyNumber result;", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tbuf[0] = '?';\n\t\t\t\t\t{\n\t\t\t\t\t\tchar\t   *file = pnstrdup(p + 1, cmdend);\n\t\t\t\t\t\tFILE\t   *fd;", "partial_line": "free", "completion": "free(file); <|endoftext|>"}
{"context": "\t\t\t\t\tif (AttrNumberIsForUserDefinedAttr(attnum))\n\t\t\t\t\tif (unique_attnum == InvalidAttrNumber)\n\t\t\t\t{\n\t\tpfree(func_dependencies);\n\t\tpfree(unique_exprs);", "partial_line": "for (i = 0;", "completion": "for (i = 0; i < nfunc_dependencies; i++) <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) sqlprint();}\n#line 40 \"whenever.pgc\"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);\n#line 43 \"whenever.pgc\"\nif (sqlca.sqlwarn[0] == 'W') warn ( );", "partial_line": "if (sqlc", "completion": "if (sqlca.sqlcode < 0) print ( \"select\" );} <|endoftext|>"}
{"context": "static const symbol s_0_28[2] = { 0xCE, 0x9E };\nstatic const symbol s_0_30[2] = { 0xCE, 0xA0 };\nstatic const symbol s_0_38[2] = { 0xCE, 0xA9 };\n{\n{ 2, s_0_17, 0, 3, 0},", "partial_line": "{ 2, s_0", "completion": "{ 2, s_0_18, 0, 4, 0}, <|endoftext|>"}
{"context": "\t{\n\t\t\tappendPQExpBuffer(&conn->errorMessage,\n\t\t\t\t\t\t\t  libpq_gettext(\"connection to server at \\\"%s\\\", port %s failed: \"),\n\t\t\t\t\t\t\t  displayed_port);\n\telse", "partial_line": "in", "completion": "int\t\t\tval; <|endoftext|>"}
{"context": "#include \"access/commit_ts.h\"\n#include \"access/hash_xlog.h\"\n#include \"access/spgxlog.h\"", "partial_line": "#include \"replic", "completion": "#include \"replication/message.h\" <|endoftext|>"}
{"context": "\tif (grouped_rel->fdwroutine &&\n\t\tgrouped_rel->fdwroutine->GetForeignUpperPaths(root, UPPERREL_GROUP_AGG,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  extra);\nstatic void\n\t\t\t\t\t\t\tgrouping_sets_data *gd,", "partial_line": "const AggClauseCost", "completion": "const AggClauseCosts *agg_costs, <|endoftext|>"}
{"context": "\tif (relId != oldRelId && OidIsValid(oldRelId))\n\tif (!OidIsValid(relId))\n\t\trelkind != RELKIND_PARTITIONED_INDEX)\n\t\t\tereport(NOTICE,\n{", "partial_line": "bool\t\tconcurrent_wa", "completion": "bool\t\tconcurrent_warning = false; <|endoftext|>"}
{"context": "\t\t\toldContext = MemoryContextSwitchTo(aggstate->curaggcontext->ecxt_per_tuple_memory);\n\t\t\t\t\t\t\t\t\t\t\tpertrans->inputtypeLen);\n\ttmpcontext->ecxt_innertuple = save_inner;\n\t\t\t\t\t\t\t ExprContext *econtext)\n\tAggStatePerTrans pertrans = op->d.agg_trans.pertrans;", "partial_line": "int\t\t\tsetno = op->d.a", "completion": "int\t\t\tsetno = op->d.agg_trans.setno; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tlexpr,\n\t\t\t\t parser_errposition(pstate, a->location)));\n\t\tereport(ERROR,\n\t\t\t\t errmsg(\"%s must not return a set\", \"NULLIF\"),\n}", "partial_line": "if (strcmp(strVal(linitial(a->name", "completion": "if (strcmp(strVal(linitial(a->name)), \"<>\") == 0) <|endoftext|>"}
{"context": "}\n\tbool\t\tshouldFree;\n\t\t\t\t\t\t\t\t\t\t   &shared);\n\tExecParallelHashPushTuple(&hashtable->buckets.shared[bucketno],\n\t\theap_free_minimal_tuple(tuple);", "partial_line": "*batchno = pg_r", "completion": "*batchno = pg_rotate_right32(hashvalue, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t &pending_rescan);\n\t\t\t\t\t(errcode(ERRCODE_INVALID_CURSOR_STATE),\n\t\tif (portal->atStart || portal->atEnd)\n\t\t\t\t\t(errcode(ERRCODE_INVALID_CURSOR_STATE),\n\t\telse", "partial_line": "ParamEx", "completion": "ParamExternData prmdata; <|endoftext|>"}
{"context": "\t\tisnull[attnum - 1] = replIsnull[i];\n\tpfree(isnull);\n\treturn newTuple;\n}\n\t\t}", "partial_line": "else if (", "completion": "else if (thisatt->attlen == -1) <|endoftext|>"}
{"context": "\t\t\t\t\t\tappendPQExpBufferStr(&buf, \" INVALID\");\n\t\t\t}\n\t\t\t\t\t\t\t  \"WHERE r.conrelid = '%s' \"\n\t\t\t\t\t\t\t  \"ORDER BY 1;\",\n\t\t\tresult = PSQLexec(buf.data);", "partial_line": "goto erro", "completion": "goto error_return; <|endoftext|>"}
{"context": "\t\t\t\tstart = minoff;\n\t\t\t\t\tstack->bts_blkno = blkno;\n\t\t\t}\n\t\t{\n\t\t\t_bt_relbuf(rel, buf);", "partial_line": "_bt_", "completion": "_bt_relbuf(rel, buf); <|endoftext|>"}
{"context": "\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"alter user regress_ecpg_user1 encrypted password 'connectpw'\", ECPGt_EOIT, ECPGt_EORT);}\n\t{ ECPGconnect(__LINE__, 0, \"ecpg2_regression@localhost\" , NULL, NULL , \"main\", 0); }\n#line 29 \"test1.pgc\"\n#line 30 \"test1.pgc\"\n\t{ ECPGdisconnect(__LINE__, \"CURRENT\");}", "partial_line": "#line", "completion": "#line 44 \"test1.pgc\" <|endoftext|>"}
{"context": "\tJsonParseErrorType result;\n\t\t{\n\t\t\tswitch (top)\n\t\t\t\tcase JSON_SEM_OEND:\n\t\t\t\t\t{", "partial_line": "return r", "completion": "return result; <|endoftext|>"}
{"context": "\t}\n}\nWalRcvForceReply(void)\n}\n\t\t\treturn \"starting\";", "partial_line": "XLogRecPtr\tfl", "completion": "XLogRecPtr\tflushed_lsn; <|endoftext|>"}
{"context": "\t\tPROGRESS_BASEBACKUP_PHASE,\n\t};\n\tval[2] = list_length(sink->bbs_state->tablespaces);\n\t\t\t\t\t\t\t\t\t sink->bbs_state->tablespace_num + 1);\n\tbbsink_forward_archive_contents(sink, len);", "partial_line": "val[nparam++] = state->", "completion": "val[nparam++] = state->bytes_done; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t MIN_OPENSSL_TLS_VERSION,\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\tif (selected != NULL)\n\t\t\t}", "partial_line": "peer_cn = MemoryContextAlloc(TopMemoryC", "completion": "peer_cn = MemoryContextAlloc(TopMemoryContext, len + 1); <|endoftext|>"}
{"context": "        z->lb = mlimit1;\n    switch (among_var) {\n            lab1:\n                z->c = z->l - m2;\n                    if (ret <= 0) return ret;", "partial_line": "lab", "completion": "lab0: <|endoftext|>"}
{"context": "\tif (proc->prorows > 0 && proc->prorows != 1000)\n\t\tint\t\t\ti;\n\t\t\t\t\t\t  -1  ,\n\t\t\t\t\t\t  -1  ,\n\t\t\t\tpos = strchr(configitem, '=');", "partial_line": "if (GetConfi", "completion": "if (GetConfigOptionFlags(configitem, true) & GUC_LIST_QUOTE) <|endoftext|>"}
{"context": "\treturn array_get_element(PointerGetDatum(array), nSubscripts, indx,\n\t\t\t\t\t\t\t isNull);\n\t\t\t\t\t\t\t\t\t\t\t\tdataValue, isNull,\narray_map(Datum arrayd,\n\t\t  Oid retType, ArrayMapState *amstate)", "partial_line": "int", "completion": "int\t\t\ttyplen; <|endoftext|>"}
{"context": "\treturn 0;\t\t\t\t\t\nprivilege_to_string(AclMode privilege)\n\t\tcase ACL_UPDATE:\n\t\t\treturn \"UPDATE\";\n\t\tcase ACL_TRUNCATE:", "partial_line": "return \"TRUN", "completion": "return \"TRUNCATE\"; <|endoftext|>"}
{"context": "\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\tlower.lower = true;\n\tRangeBound\tlower;\n\tRangeBound\tupper;", "partial_line": "lower.val", "completion": "lower.val = PG_ARGISNULL(0) ? (Datum) 0 : arg1; <|endoftext|>"}
{"context": "\t\t\t\tdbName = env;\n\t\t\tpg_fatal(\"--partition-method requires greater than zero --partitions\");\n\t\t}\n\t}\n\t\tif (initialization_option_set)", "partial_line": "pg_fatal(\"log sampling (--sampling-rate) and aggregation", "completion": "pg_fatal(\"log sampling (--sampling-rate) and aggregation (--aggregate-interval) cannot be used at the same time\"); <|endoftext|>"}
{"context": "\t\t\t\ttod;\n\t}\n\tj = EPOCH_YEAR;\n\t{\n\tif ((lp = byword(fields[LP_MONTH], mon_names)) == NULL)", "partial_line": "while (j !=", "completion": "while (j != month) <|endoftext|>"}
{"context": "\tint\t\t\tolength,\n\twhile (value >= 10000)\n\t\tchar\t   *pos = a + olength - i;\n\t}\n\t\tconst uint32 c = (value % 100) << 1;", "partial_line": "const", "completion": "const uint32 c = value << 1; <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\t\tsetopstate->leftInput.needGroup = true;\n\t\tint\t\t\tcmpresult;\n\t\tSetOpStatePerGroupData pergroup;", "partial_line": "if (setopstate->right", "completion": "if (setopstate->rightInput.numTuples == 0) <|endoftext|>"}
{"context": "\tif (ndistinct > totalrows)\n}\n\t\tr *= n--;\n\tstate = (CombinationGenerator *) palloc(sizeof(CombinationGenerator));\nstatic void", "partial_line": "pfree(", "completion": "pfree(state); <|endoftext|>"}
{"context": "static const symbol s_2_9[2] = { 'k', 'i' };\nstatic const symbol s_2_11[5] = { 'l', 'a', 'n', 'i', 'k' };\nstatic const symbol s_2_12[3] = { 'r', 'i', 'k' };\nstatic const symbol s_2_14[4] = { 'z', 't', 'i', 'k' };\n{ 5, s_2_1, -1, 1, 0},", "partial_line": "{ 2, s_2_2,", "completion": "{ 2, s_2_2, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tres = true;\n\t\t\t{\n\t\t\t\t\tres = pred->item_type == JS_TYPE_OBJECT;\n\t\t\t\t\tbreak;\n\t\t\t\t\tres = pred->item_type == JS_TYPE_ARRAY;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tdDate += date0;\n\t\t\ttm->tm_min = tx->tm_min;\n#if defined(HAVE_STRUCT_TM_TM_ZONE)\n\t\t\tif (tzn != NULL)\n\t\t\tif (tzn != NULL)", "partial_line": "*tzn = N", "completion": "*tzn = NULL; <|endoftext|>"}
{"context": "\t}\n\tmslot->minhdr.t_data = (HeapTupleHeader) ((char *) mslot->mintuple - MINIMAL_TUPLE_OFFSET);\n\tMemoryContextSwitchTo(oldContext);\nstatic HeapTuple\n}", "partial_line": "tts_minimal_materiali", "completion": "tts_minimal_materialize(slot); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tAssert(itemcnt <= result->nitems);\n\t\t\t\t\t\t   ObjectIdGetDatum(mvoid), BoolGetDatum(inh));\n\tndist = SysCacheGetAttr(STATEXTDATASTXOID, htup,\n\tfor (i = 0; i < ndistinct->nitems; i++)", "partial_line": "tmp += s", "completion": "tmp += sizeof(uint32); <|endoftext|>"}
{"context": "#include <windows.h>\n#if defined(WIN32) && !defined(__CYGWIN__)\nint\n{\n}", "partial_line": "if (un", "completion": "if (unlink(path) == 0) <|endoftext|>"}
{"context": "\t\tTransactionId recordXid;\n\t\tif (xact_info == XLOG_XACT_COMMIT_PREPARED)\n\t\t\trecordXid = XLogRecGetXid(record);\n\t\t\trecoveryStopName[0] = '\\0';\n\t\t\tif (xact_info == XLOG_XACT_COMMIT ||", "partial_line": "(errmsg(\"recovery stopping", "completion": "(errmsg(\"recovery stopping after commit of transaction %u, time %s\", <|endoftext|>"}
{"context": "\tPQExpBufferData buf;\n\tchar\t   *currdb;\n\tHELP0(\"  \\\\close STMT_NAME       close an existing prepared statement\\n\");\n\tHELP0(\"  \\\\gx [(OPTIONS)] [FILE] as \\\\g, but forces expanded output mode\\n\");\n\tHELP0(\"  \\\\parse STMT_NAME       create a prepared statement\\n\");", "partial_line": "HELP0(\"  \\\\q", "completion": "HELP0(\"  \\\\q                     quit psql\\n\"); <|endoftext|>"}
{"context": "size_t\n\tBufFileReadCommon(file, ptr, size, true, false);\nBufFileReadMaybeEOF(BufFile *file, void *ptr, size_t size, bool eofOK)\n\t{\n\t\t\t{", "partial_line": "int\t\t\tnew", "completion": "int\t\t\tnewFile; <|endoftext|>"}
{"context": "\t{\n\t{\n\t\tPGresult   *next_result = NULL;\n\t\tif (!AcceptResult(result, false))\n\t\t\t\tresult_status == PGRES_COPY_OUT ||", "partial_line": "re", "completion": "result = NULL; <|endoftext|>"}
{"context": "}\noverBelow4D(RectBox *rect_box, RangeBox *query)\n\treturn higher2D(&rect_box->range_box_y, &query->right);\noverAbove4D(RectBox *rect_box, RangeBox *query)\npointToRectBoxDistance(Point *point, RectBox *rect_box)", "partial_line": "if (point", "completion": "if (point->y < rect_box->range_box_y.left.low) <|endoftext|>"}
{"context": "\t\t\tresult = gist_point_consistent_internal(strategy % GeoStrategyNumberOffset,\n\t\t\t\t\t\t  key->high.y >= query->low.y &&\n\t\t\t\tPOLYGON    *query = PG_GETARG_POLYGON_P(1);\n\t\t\t\t\tAssert(box->high.x == box->low.x\n\t\t\t\t}", "partial_line": "PointerGetD", "completion": "PointerGetDatum(entry), <|endoftext|>"}
{"context": "\t\t\t\tif (attp->attbyval)\n\t\t\t\t\tattrmiss[attnum - 1].am_value = missval;\n\t\t\t\t}\n\t\t\t\t\tMemoryContextSwitchTo(oldcxt);\n\t\tconstr->has_generated_stored ||", "partial_line": "constr->num_d", "completion": "constr->num_defval = 0; <|endoftext|>"}
{"context": "{\n{\n\tchar\t\tsqlerrp[8];\n\tlong\t\tsqlerrd[6];\n#define sqlca (*ECPGget_sqlca())", "partial_line": "#ifdef __", "completion": "#ifdef __cplusplus <|endoftext|>"}
{"context": "static Datum\nindexam_property(FunctionCallInfo fcinfo,\n\t\t\t\t const char *propname,\n\t\tAssert(!OidIsValid(amoid));\n\t\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(index_oid));", "partial_line": "ReleaseSy", "completion": "ReleaseSysCache(tuple); <|endoftext|>"}
{"context": "\t{\n\t\t{\n\t\t\treturn;\n\tif (!object_ownercheck(DatabaseRelationId, db_id, GetUserId()))\n\tif (db_istemplate)", "partial_line": "(errcode(ERRCODE_WRONG_OB", "completion": "(errcode(ERRCODE_WRONG_OBJECT_TYPE), <|endoftext|>"}
{"context": "\t\t\tres2 = executeBoolItem(cxt, &rarg, jb, false);\n\t\t\t\treturn jpbTrue;\n\t\tcase jpiGreaterOrEqual:\n\t\t\t\treturn executePredicate(cxt, jsp, &larg, NULL, jb, false,\n\t\t\t}", "partial_line": "false", "completion": "false, NULL); <|endoftext|>"}
{"context": "\t\t\t\t\t errhint(\"Valid values are \\\"[]\\\", \\\"[)\\\", \\\"(]\\\", and \\\"()\\\".\")));\n\t\t\tchar **ubound_str, Node *escontext)\n\tbool\t\tinfinite;\n\t{\n\t\tptr += strlen(RANGE_EMPTY_LITERAL);", "partial_line": "ereturn(esconte", "completion": "ereturn(escontext, false, <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t  newfselect->resulttype,\n\t\t\t\tNullTest   *ntest = (NullTest *) node;\n\t\t\t\targ = eval_const_expressions_mutator((Node *) ntest->arg,\n\t\t\t\t\t{", "partial_line": "(ntest->nullt", "completion": "(ntest->nulltesttype == IS_NULL)) <|endoftext|>"}
{"context": "\tntups = PQntuples(res);\n\t\tinhinfo[i].inhrelid = atooid(PQgetvalue(res, i, i_inhrelid));\n\t\tinhinfo[i].inhparent = atooid(PQgetvalue(res, i, i_inhparent));\n\treturn inhinfo;\n\tif (fout->remoteVersion < 110000)", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t}\n\t\toid = GetSysCacheOid3(COLLNAMEENCNSP,\n\tmemset(nulls, 0, sizeof(nulls));\n\tnamestrcpy(&name_name, collname);", "partial_line": "oid = GetN", "completion": "oid = GetNewOidWithIndex(rel, CollationOidIndexId, <|endoftext|>"}
{"context": "\t{\n\t\t{\n\treturn true;\n}\nconfig_enum_lookup_by_value(struct config_enum *record, int val)", "partial_line": "retu", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\tstack = stack->bts_parent;\n\t\t\t\t\t   Datum arrdatum, ScanKey cur)\n\t\t\tresult = 0;\t\t\t\n\telse\n\t\t\t\tmid_elem = -1,", "partial_line": "resu", "completion": "result = 0; <|endoftext|>"}
{"context": "#define PAGES_PER_CHUNK  (BLCKSZ / 32)\n\tTBM_ITERATING_SHARED,\t\t\n\tMemoryContext mcxt;\t\t\t\n\tint\t\t\tnpages;\t\t\t\n\tTBMIteratingState iterating;\t", "partial_line": "PagetableEntry *", "completion": "PagetableEntry **spages; <|endoftext|>"}
{"context": "\tPG_RETURN_INT32(timetz_cmp_internal(time1, time2));\ntimetz_hash(PG_FUNCTION_ARGS)\n\tPG_RETURN_UINT32(thash);\n\tTimeTzADT  *time2 = PG_GETARG_TIMETZADT_P(1);\n\tTimeTzADT  *time1 = PG_GETARG_TIMETZADT_P(0);", "partial_line": "if (timetz_cmp_i", "completion": "if (timetz_cmp_internal(time1, time2) < 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t const char *locale,\n\t.strnxfrm_prefix = strnxfrm_prefix_icu,\n\t.strxfrm_is_safe = true,\n#else\n\tconst char *icurules = NULL;", "partial_line": "if (!HeapTupleI", "completion": "if (!HeapTupleIsValid(tp)) <|endoftext|>"}
{"context": "\t\t\tabs_pos = mark_pos = 0; \n\t\t\tmark_pos = abs_pos;\n\t\t\t\t\t\twinstate->grouptailpos > winstate->frameheadpos)\n\t\t\t\t\t\tint64\t\toverlapstart = Max(winstate->groupheadpos,\n\t\t\t\t\tbreak;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t}\nstatic void\n}\n\treturn edata->cursorpos;", "partial_line": "return eda", "completion": "return edata->internalpos; <|endoftext|>"}
{"context": "\tMaterialState *node = castNode(MaterialState, pstate);\n\tScanDirection dir;\n\t\t\tint\t\t\tptrno PG_USED_FOR_ASSERTS_ONLY;\n\t\t\t\t\t\t\t\t\t\t\t\t  node->eflags);", "partial_line": "if (!tuplestore_advance(t", "completion": "if (!tuplestore_advance(tuplestorestate, forward)) <|endoftext|>"}
{"context": "\tscan->rs_read_stream = NULL;\n\tif (scan->rs_base.rs_flags & SO_TYPE_SEQSCAN ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  READ_STREAM_USE_BATCHING,\n\telse if (scan->rs_base.rs_flags & SO_TYPE_BITMAPSCAN)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  scan->rs_base.rs_rd,", "partial_line": "if (allow", "completion": "if (allow_strat) <|endoftext|>"}
{"context": "\tif (initial_dbname)\n\t{\n\t\t\t\t\t\t \"\\nSELECT d.datname \"\n\t\t\t\t\t\t \"COUNT(*) FILTER (\"\n\t\t\t\t\t\t \") AS checkable\"", "partial_line": "\"\\nSEL", "completion": "\"\\nSELECT DISTINCT d.datname \" <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t format_type_be_qualified(castForm->casttarget));\n\t\tcase CollationRelationId:\n\t\t\t\tReleaseSysCache(collTup);\n\t\t\t\tconTup = SearchSysCache1(CONSTROID,\n\t\t\t\t{", "partial_line": "quote_identi", "completion": "quote_identifier(NameStr(con->conname))); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  -1,\n\t\t\t\t\t\t\t\t\t\t\t  NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t spi_rv);\n\t\tedata = CopyErrorData();\nSV *", "partial_line": "nulls = (", "completion": "nulls = (char *) palloc(argc); <|endoftext|>"}
{"context": "\t\t\t\t   state->callback_name);\n}\n\terrcallback.arg = &state;\n{\n\tstate.callback_name = \"shutdown\";", "partial_line": "ctx->acc", "completion": "ctx->accept_writes = false; <|endoftext|>"}
{"context": "{ 4, s_6_30, -1, 1, 0},\n{ 6, s_6_37, -1, 6, 0},\n{ 3, s_6_46, -1, 9, 0},\n{ 5, s_6_48, -1, 1, 0},\nstatic const symbol s_7_6[3] = { 'e', 'v', 'a' };", "partial_line": "static con", "completion": "static const symbol s_7_12[3] = { 'a', 'r', 'e' }; <|endoftext|>"}
{"context": "\taction = XLogReadBufferForRedo(record, 0, &metabuf);\n\t\tPage\t\tmetapg;\n\t\tmetapg = BufferGetPage(metabuf);\n\tif (BufferIsValid(metabuf))\n\taction = XLogReadBufferForRedo(record, 0, &buffer);", "partial_line": "UnlockRe", "completion": "UnlockReleaseBuffer(buffer); <|endoftext|>"}
{"context": "\t}\n\t\tLWLock\t   *partition_lock;\n\t\tReservePrivateRefCountEntry();\n\t\tpartition_lock = BufMappingPartitionLock(hash);\n\t\t\tvalid = PinBuffer(existing_hdr, strategy);", "partial_line": "buf_block =", "completion": "buf_block = BufHdrGetBlock(existing_hdr); <|endoftext|>"}
{"context": "\tfree(DataDir);\n{\nstatic Oid\tSessionUserId = InvalidOid;\nstatic int\tSecurityRestrictionContext = 0;\nOid", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "#line 45 \"prep.pgc\"\n#line 46 \"prep.pgc\"\n#line 48 \"prep.pgc\"\nint main ()\n#line 63 \"prep.pgc\"", "partial_line": "if (sql", "completion": "if (sqlca.sqlcode < 0) sqlprint();} <|endoftext|>"}
{"context": "\tbits8\t   *p,\n\t\t\t\t\t\t\t\t\t\t\tVarBitPGetDatum(arg),\n\tif (ishift == 0)\n\t\tmemcpy(r, p, len);\n\t{", "partial_line": "int32\t\ta = PG_GETARG_", "completion": "int32\t\ta = PG_GETARG_INT32(0); <|endoftext|>"}
{"context": "\ts->parallelModeLevel = 0;\n\tProcArrayEndTransaction(MyProc, latestXid);\n\tif (TopTransactionResourceOwner != NULL)\n\t\tAtEOXact_MultiXact();\n\t\t\t\t\t\t\t RESOURCE_RELEASE_AFTER_LOCKS,", "partial_line": "AtEO", "completion": "AtEOXact_Enum(); <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\tfiles = lappend(files, f);\n\t}\n\tif (tuplecid_data == NULL)\n\tAssert(forkno == MAIN_FORKNUM);", "partial_line": "else if (ent =", "completion": "else if (ent == NULL) <|endoftext|>"}
{"context": "}\nstatic int\n\telse\n{\n\tint\t\t\tlen;", "partial_line": "return", "completion": "return len; <|endoftext|>"}
{"context": "\t\t\t \"tables_with_oids.txt\");\n\t\tfclose(report.file);\n\t\t\t\t \"    ALTER TABLE ... SET WITHOUT OIDS;\\n\"\n\t\t\t\t \"    %s\", report.path);\n\tFILE\t   *script = NULL;", "partial_line": "snprintf(output_path, siz", "completion": "snprintf(output_path, sizeof(output_path), \"%s/%s\", <|endoftext|>"}
{"context": "#endif\nstatic const symbol s_0_6[1] = { 'e' };\nstatic const symbol s_0_13[5] = { 'a', 'n', 'd', 'e', 'n' };\nstatic const symbol s_0_28[5] = { 'a', 'n', 'd', 'e', 's' };\nstatic const symbol s_0_30[5] = { 'a', 'r', 'e', 'n', 's' };", "partial_line": "static const symbol s_0_34[5] = { 'a", "completion": "static const symbol s_0_34[5] = { 'a', 'n', 'd', 'e', 't' }; <|endoftext|>"}
{"context": "\t}\n\t\t\t\tapath->path.startup_cost = Min(apath->path.startup_cost,\n\t\t\tapath->path.disabled_nodes += subpath->disabled_nodes;\n\t\t}\n\t\t\t\t  List *pathkeys, int n_streams,", "partial_line": "int inp", "completion": "int input_disabled_nodes, <|endoftext|>"}
{"context": "\tif (need_old_del && table->old_del_tuplestore == NULL)\n}\n\t\t\tif (afterTriggerInvokeEvents(&qs->events, firing_id, estate, false))\n\ttables = qs->tables;\n\t\tAfterTriggersTableData *table = (AfterTriggersTableData *) lfirst(lc);", "partial_line": "if (", "completion": "if (ts) <|endoftext|>"}
{"context": "};\n{\n\t((FPM_PAGE_SIZE - sizeof(FreePageBtreeHeader)) / \\\n\tFreePageBtreeHeader hdr;", "partial_line": "FreePageBtreeInterna", "completion": "FreePageBtreeInternalKey internal_key[FPM_ITEMS_PER_INTERNAL_PAGE]; <|endoftext|>"}
{"context": "\t\tif (pg_strcasecmp(strategy, \"wal_log\") == 0)\n\t\tdblocprovider = src_locprovider;\n\t\tdbicurules = src_icurules;\n\tif (!PG_VALID_BE_ENCODING(encoding))\n\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),", "partial_line": "icu_vali", "completion": "icu_validation_level); <|endoftext|>"}
{"context": "\t\tappendStringInfoChar(&buf, ' ');\n\tif (version)\n\tswitch (standalone)\n\txmlDocPtr\tdoc;\n\t\tif (sizeof(char) != sizeof(xmlChar))", "partial_line": "xml_mem", "completion": "xml_memory_init(); <|endoftext|>"}
{"context": "static inline bool CopyGetInt16(CopyFromState cstate, int16 *val);\n\tpq_sendint16(&buf, natts);\n\t\tpq_sendint16(&buf, format); \n\tpq_endmessage(&buf);\n\tcstate->fe_msgbuf = makeStringInfo();", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\tpt = _conv((t->tm_hour % 12) ?\n\t\t\t\t\tpt = _conv(t->tm_hour, \"%2d\", pt, ptlim);\n\t\t\t\t\tcontinue;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'R':", "partial_line": "c", "completion": "case 'r': <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\ttable_close(attrelation, RowExclusiveLock);\n\tHeapTuple\ttuple;\n\tForm_pg_attribute targetatt;", "partial_line": "addrs = new_object", "completion": "addrs = new_object_addresses(); <|endoftext|>"}
{"context": "\ttupDesc = RelationGetDescr(cstate->rel);\n\tcstate->opts.force_notnull_flags = (bool *) palloc0(num_phys_attrs * sizeof(bool));\n\t\t\tForm_pg_attribute attr = TupleDescAttr(tupDesc, attnum - 1);\n\tif (cstate->opts.on_error != COPY_ON_ERROR_STOP)\n\t{", "partial_line": "(errcode(ERRCODE_", "completion": "(errcode(ERRCODE_INVALID_COLUMN_REFERENCE), <|endoftext|>"}
{"context": "\t\t\t{\n\tfor (i = 0; i < nmerged; i++)\n\tint\t\t\tpos;\n\t\tmerged_bounds->datums[pos++] = (Datum *) lfirst(lc);\n\telse", "partial_line": "merged_bou", "completion": "merged_bounds->kind = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t \"FROM pg_proc AS p \"\n\t\t\t\t\t\t  true, &report);\n\t\tpg_fatal(\"could not open file \\\"%s\\\": %m\", report->path);\ncheck_for_tables_with_oids(ClusterInfo *cluster)\n\tUpgradeTaskReport report;", "partial_line": "\"FROM   pg_catalog.pg_", "completion": "\"FROM   pg_catalog.pg_class c, \" <|endoftext|>"}
{"context": "\t\t\tereport(FATAL,\n\tInitializeGUCOptions();\n\tif (dbname == NULL)\n\t\t\t\t\t\t\tprogname)));\n\tInitPostmasterChildSlots();", "partial_line": "Initialize", "completion": "InitializeFastPathLocks(); <|endoftext|>"}
{"context": "\t\t\twhile (tail < head && !KnownAssignedXidsValid[tail])\n\t\t\t\tpArray->headKnownAssignedXids = 0;\nstatic bool\n{\nKnownAssignedXidsRemovePreceding(TransactionId removeXid)", "partial_line": "in", "completion": "int\t\t\thead, <|endoftext|>"}
{"context": "}\n\tbool\t\tfound;\n\t{\n\t\tout->len = 0;\n\tMemoryContext aggcontext,", "partial_line": "boo", "completion": "bool\t\tskip; <|endoftext|>"}
{"context": "\tPG_FREE_IF_COPY(mr2, 1);\n\tPG_RETURN_BOOL(cmp >= 0);\n\tint\t\t\tcmp = multirange_cmp(fcinfo);\n}\n{", "partial_line": "lastL", "completion": "lastLower, <|endoftext|>"}
{"context": "\tAssert(TransactionIdIsNormal(newFrozenXid));\n\tAssert(MultiXactIdIsValid(newMinMulti));\n\trelation = table_open(DatabaseRelationId, RowExclusiveLock);\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\tif (!HeapTupleIsValid(tuple))", "partial_line": "newFrozenX", "completion": "newFrozenXid = dbform->datfrozenxid; <|endoftext|>"}
{"context": "\t\t\t\ti_refobjid;\n\t\treturn;\n\t\t\t\t\t\t \" JOIN pg_rewrite r1 ON r1.ev_class = d1.objid \"\n\t\t\t\t\t\t \"FROM w \"\n\t\t\t\t\t\t \"JOIN pg_depend d3 ON d3.classid = 'pg_rewrite'::regclass \"", "partial_line": "\"WHERE refrelkind = \"", "completion": "\"WHERE refrelkind = \" CppAsString2(RELKIND_MATVIEW)); <|endoftext|>"}
{"context": "}\nsaop_element_hash(struct saophash_hash *tb, Datum key)\nstatic bool\n\treturn DatumGetBool(result);\n\tbool\t\tinclause = op->d.hashedscalararrayop.inclause;", "partial_line": "bool\t\tstrictfunc = op->d.hashed", "completion": "bool\t\tstrictfunc = op->d.hashedscalararrayop.finfo->fn_strict; <|endoftext|>"}
{"context": "\t\ttypTup = (Form_pg_type) GETSTRUCT(tup);\n\t\tif (typTup->typtype != TYPTYPE_DOMAIN)\n\t\t\t\t\tObjectIdGetDatum(typeOid));\n\t\twhile (HeapTupleIsValid(conTup = systable_getnext(scan)))\n\t\t\tif (isNull)", "partial_line": "constring = TextDa", "completion": "constring = TextDatumGetCString(val); <|endoftext|>"}
{"context": "\tAssert(baserel->rtekind == RTE_RELATION);\n\tcpu_per_tuple = cpu_tuple_cost + qpqual_cost.per_tuple;\n\tcpu_run_cost = cpu_per_tuple * baserel->tuples;\n}\n\tCost\t\tcpu_per_tuple;", "partial_line": "get_tablespace_page_cost", "completion": "get_tablespace_page_costs(baserel->reltablespace, <|endoftext|>"}
{"context": "\t\tsqlcode = ECPG_WARNING_UNKNOWN_PORTAL;\n\tstrncpy(sqlca->sqlerrm.sqlerrmc, message, sizeof(sqlca->sqlerrm.sqlerrmc));\nbool\n\tconst char **conn_values;\n\tif (dbname == NULL && connection_name == NULL)", "partial_line": "else if (strncmp(dbname,", "completion": "else if (strncmp(dbname, \"unix:\", 5) == 0) <|endoftext|>"}
{"context": "        lab0:\n    return 1;\n        z->lb = mlimit1;\n            break;\n                    if (ret == 0) goto lab0;", "partial_line": "{   int ret = slic", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\t\t\t\tpush_back_token(tok4, &aux4, yyscanner);\n\t\t\t\t\t\t\t\t\t\t\t  &aux1.lval.cword))\n\t\t\t\t\t\ttok1 = T_CWORD;\n\t\t\t\tpush_back_token(tok2, &aux2, yyscanner);\n\t\t\telse if (!aux1.lval.word.quoted &&", "partial_line": "yyextra->p", "completion": "yyextra->plpgsql_yyleng = aux1.leng; <|endoftext|>"}
{"context": "\t\t\treturn \"ALTER COLUMN ... SET EXPRESSION\";\n\t\t\treturn \"ALTER COLUMN ... RESET\";\n\t\t\treturn \"DROP COLUMN\";\n\t\tcase AT_AddConstraint:\n\t\tcase AT_AlterConstraint:", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\treturn tup;\ntypenameTypeId(ParseState *pstate, const TypeName *typeName)\n\ttypoid = ((Form_pg_type) GETSTRUCT(tup))->oid;\n\t\t\t\t\t Oid *typeid_p, int32 *typmod_p)\n\tOid\t\t\ttypmodin;", "partial_line": "ListC", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\tva_end(args);\n\t\t\t\te);\n\t}\nchange_directory(char const *dir)\n\t\tif (chdir_errno != 0)", "partial_line": "static zic_t leape", "completion": "static zic_t leapexpires = -1; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tquote_schema = identifier_needs_quotes(schemaname);\n\t\t\tfor (const char *p = schemaname; *p; p++)\n\t\t}\n\t\tif (quote_schema)", "partial_line": "*ptr++", "completion": "*ptr++ = '.'; <|endoftext|>"}
{"context": "\t\t\tRemoveLocalLock(locallock);\n\tpartitionLock = LockHashPartitionLock(locallock->hashcode);\n\tlock = locallock->lock;\n\t\tlocallock->lock = lock;\n\tHASH_SEQ_STATUS status;", "partial_line": "if (!", "completion": "if (!allLocks) <|endoftext|>"}
{"context": "\t\t\terrkind = true;\n\t\tcase EXPR_KIND_MERGE_RETURNING:\n\t\tcase EXPR_KIND_VALUES_SINGLE:\n\t\tcase EXPR_KIND_MERGE_WHEN:\n\t\tcase EXPR_KIND_CHECK_CONSTRAINT:", "partial_line": "err = _(\"set-re", "completion": "err = _(\"set-returning functions are not allowed in trigger WHEN conditions\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t const_em->em_jdomain->jd_relids,\n\t\t\t\t\t\t\t\t\t\t  EquivalenceClass *ec)\n\tAssert(ec->ec_childmembers == NULL);\n\tforeach(lc, ec->ec_members)\n\t\t\tcontinue;", "partial_line": "prev", "completion": "prev_em->em_datatype, <|endoftext|>"}
{"context": "{ 6, s_6_87, 84, 1, 0},\n{ 6, s_6_92, 90, 1, 0},\n{ 6, s_6_93, 90, 1, 0},\n{ 6, s_6_100, 99, 1, 0},\n{ 2, s_6_114, -1, 1, 0},", "partial_line": "{ 3, s_6_118", "completion": "{ 3, s_6_118, -1, 1, 0}, <|endoftext|>"}
{"context": "\tfclose(json_file);\n}\n\tDoState    *_state = (DoState *) state;\n\tif (!_state->elem_is_first)\n\t_state->elem_is_first = false;", "partial_line": "retu", "completion": "return JSON_SUCCESS; <|endoftext|>"}
{"context": "\t\tif (context->inner_itlist)\n\t\t\t\t\t\t\t\t\t\t\t\t  context->inner_itlist,\n\t\t\tvar->varno += context->rtoffset;\n\t\telog(ERROR, \"variable not found in subplan target lists\");\n\tif (IsA(node, PlaceHolderVar))", "partial_line": "contex", "completion": "context->nrm_match); <|endoftext|>"}
{"context": "\t{\n\t\t\t\ttwo_phase = true;\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase 'w':", "partial_line": "cas", "completion": "case 'W': <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t{", "partial_line": "varval = GetConfigOptionByName(var", "completion": "varval = GetConfigOptionByName(varname, NULL, missing_ok); <|endoftext|>"}
{"context": "GetOldestMultiXactId(void)\n\tif (nextMXact < FirstMultiXactId)\n\toldestMXact = nextMXact;\n\tfor (i = 0; i < MaxOldestSlot; i++)\n\t{", "partial_line": "MultiXactIdPrecedes(thisold", "completion": "MultiXactIdPrecedes(thisoldest, oldestMXact)) <|endoftext|>"}
{"context": "\t\t\tatttypmods[i] = att->atttypmod;\nBuildTupleFromCStrings(AttInMetadata *attinmeta, char **values)\n{\n\tint\t\t\tnatts = tupdesc->natts;\n\t\t{", "partial_line": "nulls[i]", "completion": "nulls[i] = false; <|endoftext|>"}
{"context": "\t\tif (range->tli == earliest_wal_range_tli)\n\t\t{\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\tLSN_FORMAT_ARGS(tlep[i]->begin))));\n\t\t}", "partial_line": "LSN_FORMAT_ARGS(tlep[", "completion": "LSN_FORMAT_ARGS(tlep[i]->begin)))); <|endoftext|>"}
{"context": "\t\t\trhs = (((t + X) / (term + S)) * term) / t;\n\t\t\ty = (((U * (t + 1)) / term) * (t + S + 1)) / (t + X);\n\t\t\t\tnumer_lim = t + 1;\n\t\t\tif (exp(log(y) / n) <= (t + X) / t)\n\tpg_prng_seed(randstate, (uint64) seed);", "partial_line": "static", "completion": "static bool oldrs_initialized = false; <|endoftext|>"}
{"context": "\t\t\t\tnumMsgs,\n\t\t\tstateP->resetState = true;\n\t\tif (n < minsig && !stateP->signaled)\n\tif (numMsgs < CLEANUP_MIN)\n\telse", "partial_line": "elog(DEBUG4, \"", "completion": "elog(DEBUG4, \"sending sinval catchup signal to PID %d\", (int) his_pid); <|endoftext|>"}
{"context": "\t}\n\tGinMetaPageData *metadata;\n\t{\n\t\tginxlogDeleteListPages data;\n\t\t\tpage = BufferGetPage(buffers[data.ndeleted]);", "partial_line": "MarkBufferDirty(", "completion": "MarkBufferDirty(metabuffer); <|endoftext|>"}
{"context": "\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_execute, \"ident_name\", \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, ECPGt_EORT);\n\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"truncate test\", ECPGt_EOIT, ECPGt_EORT);\n\t{ ECPGprepare(__LINE__, NULL, 0, v_normal_name, v_query);\n\tECPGt_int,&(ivar1),(long)1,(long)1,sizeof(int), ", "partial_line": "ECPGt_NO_INDICATOR", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, ECPGt_EORT); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   &result_Objc, &result_Objv) != TCL_OK)\n\t\tereport(ERROR,\n\t\t\t\t errmsg(\"could not parse trigger return value: %s\",\n\tTcl_Obj    *tcl_cmd;\n\tint\t\t\ttcl_rc;", "partial_line": "prodesc = compile_pltcl_func", "completion": "prodesc = compile_pltcl_function(fcinfo->flinfo->fn_oid, <|endoftext|>"}
{"context": "\tEState\t   *estate = node->planstate->state;\n\tif (subplan->setParam != NIL && subplan->subLinkType != MULTIEXPR_SUBLINK)\n}\n\t\t\t\tExprContext *econtext,\n\tif (subplan->parParam != NIL || subplan->args != NIL)", "partial_line": "*isN", "completion": "*isNull = false; <|endoftext|>"}
{"context": "Datum\n\tcontext = (rank_context *)\nDatum\nwindow_rank_support(PG_FUNCTION_ARGS)\n\tif (IsA(rawreq, SupportRequestWFuncMonotonic))", "partial_line": "if (IsA(rawreq, SupportRequestO", "completion": "if (IsA(rawreq, SupportRequestOptimizeWindowClause)) <|endoftext|>"}
{"context": "\tPath\t   *path;\t\t\t\n\tList\t   *preds;\t\t\t\n\t\t\t\t\t\t\t\t\t\t   List **considered_relids);\n\t\t\t\t\t\t\t\t IndexClauseSet *rclauseset,\nstatic void get_index_paths(PlannerInfo *root, RelOptInfo *rel,", "partial_line": "static PathC", "completion": "static PathClauseUsage *classify_index_clause_usage(Path *path, <|endoftext|>"}
{"context": "\t\t\tvalues[resind] = MakeExpandedObjectReadOnly(values[resind],\n\t\t\tresind++;\n}\n\treturn ExecScan(&node->ss,\n\t\t\t\t\t(ExecScanRecheckMtd) ValuesRecheck);", "partial_line": "ValuesScanS", "completion": "ValuesScanState * <|endoftext|>"}
{"context": "Datum\n\tVarBit\t   *arg1 = PG_GETARG_VARBIT_P(0);\n}\nbitxor(PG_FUNCTION_ARGS)\n\t\t\t\t errmsg(\"cannot XOR bit strings of different sizes\")));", "partial_line": "VARBITLE", "completion": "VARBITLEN(result) = bitlen1; <|endoftext|>"}
{"context": "\t\tScanKeyData scankey;\n\t\ttuple = SearchSysCache1(AUTHNAME, PointerGetDatum(role));\n\t\t\t{\n\t\t\t\t\t\t\t\trole)));\n\t\troleid = roleform->oid;", "partial_line": "(errcode(ERR", "completion": "(errcode(ERRCODE_OBJECT_IN_USE), <|endoftext|>"}
{"context": "\t\t\tif (((z == 0x0f) &&\n\t\treturn -1;\n\t\t\t\treturn -1;\n\t\t}\n\t\tint\t\t\tlen;", "partial_line": "if ((le", "completion": "if ((len = utf_charcheck(pwcs)) > 0) <|endoftext|>"}
{"context": "{\n\tint32\t\targ1 = PG_GETARG_INT32(0);\nint2lt(PG_FUNCTION_ARGS)\n\tint16\t\targ2 = PG_GETARG_INT16(1);\n}", "partial_line": "int16\t\tar", "completion": "int16\t\targ1 = PG_GETARG_INT16(0); <|endoftext|>"}
{"context": "\t\t\tcase PLPGSQL_DTYPE_VAR:\n\t\t\t\t{\n\t\t\t\t\tfree_expr(rec->default_val, NULL);\n\t\t\tcase PLPGSQL_DTYPE_RECFIELD:\n\tfunc->action = NULL;", "partial_line": "plpgsql_free_function_memory((PLpgSQL_f", "completion": "plpgsql_free_function_memory((PLpgSQL_function *) cfunc); <|endoftext|>"}
{"context": "\tCost\t\tstartup_cost,\n\t\t\t\tinput_run_cost = input_total_cost - input_startup_cost;\n\tAssert(presorted_keys > 0 && presorted_keys < list_length(pathkeys));\n\t\t\t\t   limit_tuples);\n\tstartup_cost = group_startup_cost + input_startup_cost +", "partial_line": "List *pathke", "completion": "List *pathkeys, int input_disabled_nodes, <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) sqlprint ( );}\n#line 55 \"rnull.pgc\"\nif (sqlca.sqlcode < 0) sqlprint ( );}\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ", "partial_line": "ECPGt_timestamp,&(tmp),(long)1,(lo", "completion": "ECPGt_timestamp,&(tmp),(long)1,(long)1,sizeof(timestamp), <|endoftext|>"}
{"context": "\t\t\t\t\t\tchar\t   *name = pnstrdup(p + 1, nameend);\n\t\t\t\t\t\tfree(name);\n\t\t\tesc = false;\n\t\telse if (*p == '%')\n\t\t\tesc = true;", "partial_line": "if (prompt_string == ps", "completion": "if (prompt_string == pset.prompt1) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t(unsigned int) PQbackendPID(param->bgconn));\n\t\t\telse\n#endif\n{\n\t\tcase 0:", "partial_line": "if", "completion": "if (created) <|endoftext|>"}
{"context": "\tresult->binary = 0;\n\tresult->errQuery = NULL;\n\t\t{\n\t\t\tcase PGRES_TUPLES_CHUNK:\n\t\t\t\tbreak;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tListCell   *lcm;\n\tListCell   *lcc;\n\t{\n\tnsitem->p_lateral_only = false;\n\treturn nsitem;", "partial_line": "Alias *", "completion": "Alias *alias, <|endoftext|>"}
{"context": "\t\t\t\tnew_path = (Path *) cpath;\n\t\tcase T_NestPath:\n\t\t\t\tREPARAMETERIZE_CHILD_PATH(jpath->outerjoinpath);\n\t\t\t\tREPARAMETERIZE_CHILD_PATH(jpath->innerjoinpath);\n\t\t\t\tMergePath  *mpath = (MergePath *) path;", "partial_line": "case T", "completion": "case T_HashPath: <|endoftext|>"}
{"context": "\t\tsession_replication_state->acquired_by = MyProcPid;\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\tlocal_lsn = session_replication_state->local_lsn;\n\tif (flush && local_lsn != InvalidXLogRecPtr)\n{", "partial_line": "ch", "completion": "char\t   *name; <|endoftext|>"}
{"context": "\tconst char *portalName;\n\tconst char *paramval;\t\t\n} BindParamCbData;\nstatic bool xact_started = false;\nstatic bool DoingCommandRead = false;", "partial_line": "static volatile si", "completion": "static volatile sig_atomic_t RecoveryConflictPending = false; <|endoftext|>"}
{"context": "\tint32\t\tnth_arg = PG_GETARG_INT32(1);\n\t\tPG_RETURN_NULL();\n\t{\n\t\tReleaseSysCache(proctup);\n\tnth_inputarg = 0;", "partial_line": "nth", "completion": "nth_inputarg++; <|endoftext|>"}
{"context": "\t\t\t\ttup = SearchSysCache1(AMOID,\n\t\t\t\tReleaseSysCache(tup);\n\t\t\t}\n\t\t\t\tScanKeyData skey[1];\n\t\t\t\tamopDesc = table_open(AccessMethodOperatorRelationId,", "partial_line": "ScanKeyI", "completion": "ScanKeyInit(&skey[0], <|endoftext|>"}
{"context": "#include <ecpgerrno.h>\n#define ECPGdebug(X,Y) ECPGdebug((X)+100,(Y))\n#include <stdio.h>\n#line 10 \"parser.pgc\"", "partial_line": "#line", "completion": "#line 17 \"parser.pgc\" <|endoftext|>"}
{"context": "\tDumpableObject *dobj;\n\t\t\t\t\t\t \"SELECT label, provider, classoid, objoid, objsubid \"\n\t\t\t\t\t\t \"FROM pg_catalog.pg_seclabel \"\n\ti_classoid = PQfnumber(res, \"classoid\");\n\t\tCatalogId\tobjId;", "partial_line": "TypeInfo", "completion": "TypeInfo   *cTypeInfo; <|endoftext|>"}
{"context": "\t\t\t\tend_of_scan = true;\n\t{\n\t\tif (--so->currPos.itemIndex < so->currPos.firstItem)\n\t\t{\n\t\t\t\t\t_hash_dropbuf(rel, buf);", "partial_line": "if (!_hash_readpage(scan,", "completion": "if (!_hash_readpage(scan, &buf, dir)) <|endoftext|>"}
{"context": "\tint\t\t\tnonEmptyCount;\n\tbool\t\tempty;\n\tlowerBounds = palloc(sizeof(RangeBound) * in->nTuples);\n\t\tout->leafTupleDatums = palloc(sizeof(Datum) * in->nTuples);\n\t\t\t  bound_cmp, typcache);", "partial_line": "out-", "completion": "out->hasPrefix = true; <|endoftext|>"}
{"context": "\tlibraryspace = shm_toc_lookup(toc, PARALLEL_KEY_LIBRARY, false);\n\ttsnapshot = tsnapspace ? RestoreSnapshot(tsnapspace) : asnapshot;\n\tRestoreGUCState(gucspace);\n\t\t\t\t\t\t  fps->temp_toast_namespace_id);\n\tuncommittedenumsspace = shm_toc_lookup(toc, PARALLEL_KEY_UNCOMMITTEDENUMS,", "partial_line": "clientconninfospace = shm_to", "completion": "clientconninfospace = shm_toc_lookup(toc, PARALLEL_KEY_CLIENTCONNINFO, <|endoftext|>"}
{"context": "\t\tif (s1 >= 0.0)\n\t\t\treturn s1;\n\t\toprsel = get_oprjoin(operator);\n\tif (rightop && IsA(rightop, Const))\n\t\tArrayType  *arrayval;", "partial_line": "bool", "completion": "bool\t\telmbyval; <|endoftext|>"}
{"context": "\tint\t\t\tret;\n\t{\n\t\telse\n\treturn ret == 0;\n}", "partial_line": "CFH->get_error", "completion": "CFH->get_error_func = get_error_none; <|endoftext|>"}
{"context": "\t\t\t\t\tif (empty)\n\t\t\t\tcase RANGESTRAT_CONTAINED_BY:\n\t\t\t\t\tbreak;\n\t\t\tRangeBound *minLower = NULL,\n\t\t\t\tlower.infinite = false;", "partial_line": "lower.lower", "completion": "lower.lower = true; <|endoftext|>"}
{"context": "\t\t\t\t\t   O_RDONLY |\n\t{\n#ifdef PG_O_DIRECT_USE_F_NOCACHE\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_RESOURCES),\n\t\t\tgoto tryAgain;", "partial_line": "re", "completion": "return true; <|endoftext|>"}
{"context": "\t*schunkbitp = schunkbit;\n\t{\n\t\t\tbreak;\n\t\titerator->schunkbit = 0;\n\t{", "partial_line": "if (tb", "completion": "if (tbm->status == TBM_ONE_PAGE) <|endoftext|>"}
{"context": "\t\t\t\tat_chain_start = false;\n\t\theapTuple->t_len = ItemIdGetLength(lp);\n\t\tItemPointerSet(&heapTuple->t_self, blkno, offnum);\n\t\tif (at_chain_start && HeapTupleIsHeapOnly(heapTuple))\n\t\tif (TransactionIdIsValid(prev_xmax) &&", "partial_line": "if (v", "completion": "if (valid) <|endoftext|>"}
{"context": "\tbool\t\tinquotes;\n\t\t\tif (inquotes && *ident == '\"')\n\t\t\t}\n\t\t{\n\t\t\tfree(sname);\t\t", "partial_line": "sname =", "completion": "sname = oname; <|endoftext|>"}
{"context": "\t\t\tdepForm->classid != RelationRelationId ||\n\trelation_close(depRel, AccessShareLock);\n}\n\t\tereport(ERROR,\n\treturn address;", "partial_line": "if (amname", "completion": "if (amname != NULL) <|endoftext|>"}
{"context": "\t\t\tjsonapi_appendBinaryStringInfo(&lex->inc_state->partial_token, \\\n\t\t\treturn JSON_INCOMPLETE; \\\n\tfor (;;)\n\t\telse if (*s == '\"')\n\t\t\tif (s >= end)", "partial_line": "hi_surr", "completion": "hi_surrogate = ch; <|endoftext|>"}
{"context": "\t\tTargetEntry *te = linitial(plan->targetlist);\n\t\tList\t   *params;\n\t\tresult = convert_testexpr(root,\n\t\t\t\t\t\t\t\t  params);\n\t\t}", "partial_line": "plan-", "completion": "plan->targetlist, <|endoftext|>"}
{"context": "\t\t\t\tJsonbHashScalarValue(&jbv, &path->hash);\n\t\t\t}\nmake_jsp_expr_node_args(JsonPathGinNodeType type, List *args)\n{\n\t\t\t\tJsonPathGinNode *n2 = make_jsp_entry_node_scalar(scalar, false);", "partial_line": "jsonb_path_ops_", "completion": "jsonb_path_ops__extract_nodes(JsonPathGinContext *cxt, JsonPathGinPath path, <|endoftext|>"}
{"context": "\tStringInfoData buf;\n\tconst char *p;\n\tinitStringInfo(&buf);\n\t\t\t&& isxdigit((unsigned char) *(p + 5))\n\t\tint16\t\telmlen;", "partial_line": "Datum\t   *elem_", "completion": "Datum\t   *elem_values; <|endoftext|>"}
{"context": "\t\t\t\tmemcpy(elem_lbs, ARR_LBOUND(array), elem_ndims * sizeof(int));\n\t\t\t\t\t\t   elem_ndims * sizeof(int)) != 0)\n\t\t\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),\n\t\tif (haveempty)\n\t\t{", "partial_line": "for (int i = 1; i < n", "completion": "for (int i = 1; i < ndims; i++) <|endoftext|>"}
{"context": "\t\t}\n\t\t\tappendStringInfoString(&cmd, \" PHYSICAL (RESERVE_WAL)\");\n\tres = libpqsrv_exec(conn->streamConn,\n\t\t\t\t\t\tcmd.data,\n\tif (PQresultStatus(res) != PGRES_TUPLES_OK)", "partial_line": "slotname,", "completion": "slotname, pchomp(PQerrorMessage(conn->streamConn))))); <|endoftext|>"}
{"context": "\tchar\t\tmoved_tblspc[MAXPGPATH];\n\tstruct stat st;\n\tsnprintf(old_tblspc, sizeof(old_tblspc), \"%s%s\", old_tablespace, old_tblspc_suffix);\n\tsnprintf(old_db_dir, sizeof(old_db_dir), \"%s/%u\", old_tblspc, db_oid);\n\tsnprintf(new_db_dir, MAXPGPATH, \"%s/%u\", new_tblspc, db_oid);", "partial_line": "snprintf(moved_db_d", "completion": "snprintf(moved_db_dir, MAXPGPATH, \"%s/%u\", moved_tblspc, db_oid); <|endoftext|>"}
{"context": "#include <limits.h>\n#include \"optimizer/geqo_recombination.h\"", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\taggstate->curaggcontext = aggstate->hashcontext;\n}\n{\n\t\t\t\t\t\t\t\t\t\t\t\t  sortnode->nullsFirst,\n}", "partial_line": "if (pertrans->aggs", "completion": "if (pertrans->aggsortrequired) <|endoftext|>"}
{"context": "\t{p_iseqC, '/', A_BINGO, TPS_Base, SPACE, NULL},\n\t{p_isnotalnum, 0, A_NEXT, TPS_InSpace, 0, NULL},\n};\nstatic const TParserStateActionItem actionTPS_InDecimal[] = {\n\t{p_isdigit, 0, A_NEXT, TPS_InDecimal, 0, NULL},", "partial_line": "{p_iseqC, 'E', A_PUSH, TPS_InMantissa", "completion": "{p_iseqC, 'E', A_PUSH, TPS_InMantissaFirst, 0, NULL}, <|endoftext|>"}
{"context": "\t\t\t&& munmap(*mapped_address, *mapped_size) != 0)\n\t\t\t\t\t errmsg(\"could not remove shared memory segment \\\"%s\\\": %m\",\n\t\t\treturn false;\n\t{\n\t\t\tsave_errno = errno;", "partial_line": "if (op == DSM_", "completion": "if (op == DSM_OP_CREATE) <|endoftext|>"}
{"context": "\t\t_bt_relbuf(rel, buf);\n_bt_newlevel(Relation rel, Relation heaprel, Buffer lbuf, Buffer rbuf)\n\t\t\t\trootpage;\n\tItemId\t\titemid;\n\tIndexTuple\tleft_item;", "partial_line": "right_item = CopyIndexT", "completion": "right_item = CopyIndexTuple(item); <|endoftext|>"}
{"context": "\t\t\tExecEndBitmapHeapScan((BitmapHeapScanState *) node);\n\t\t\tbreak;\n\t\t\tExecEndTidRangeScan((TidRangeScanState *) node);\n\t\tcase T_ForeignScanState:\n\t\t\tExecEndForeignScan((ForeignScanState *) node);", "partial_line": "case T_Sort", "completion": "case T_SortState: <|endoftext|>"}
{"context": "{ 0, 0, -1, 5, 0},\n{ 2, s_0_2, 0, 3, 0},\n{ 2, s_0_3, 0, -1, 0},\n{ 2, s_0_4, 0, 4, 0},\n};", "partial_line": "static const symbol s_1_", "completion": "static const symbol s_1_5[1] = { 0xFC }; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\tiscoercion = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  &cfuncid);\n\t\t\t\t\t\t\tif ((sourceType == RECORDOID ||\n\t\t\t\t\t\t\tiscoercion = false;", "partial_line": "*retse", "completion": "*retset = false; <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n#define LW_VAL_SHARED\t\t\t\t1\nStaticAssertDecl((MAX_BACKENDS & LW_FLAG_MASK) == 0,\n\t\t\t\t \"MAX_BACKENDS and LW_FLAG_MASK overlap\");", "partial_line": "StaticAssertDecl((LW_VAL_EXCLUSIV", "completion": "StaticAssertDecl((LW_VAL_EXCLUSIVE & LW_FLAG_MASK) == 0, <|endoftext|>"}
{"context": "\t\t\tnewAbbrevVal != oldAbbrevVal ||\n\t\t{\n\t\t\tfor (i = 0; i < numTransInputs; i++)\n\t\t\t{\n\t\t\t\t   AggStatePerAgg peragg,", "partial_line": "foreach(lc, p", "completion": "foreach(lc, peragg->aggdirectargs) <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#ifdef USE_READLINE\n#include \"mb/pg_wchar.h\"", "partial_line": "const char *", "completion": "const char *query; <|endoftext|>"}
{"context": "\t{\n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tif (isLeaf)\n\t\t\t}", "partial_line": "def", "completion": "default: <|endoftext|>"}
{"context": "                lab6:\n                        }\n                        if (ret < 0) return ret;\n                        if (ret < 0) return ret;\n        if (!among_var) goto lab9;", "partial_line": "case", "completion": "case 1: <|endoftext|>"}
{"context": "\t\t\t\tsnprintf(buf, sizeof(buf), \"unexpected %s!\", inf->text);\n\t\t}\n\treturn construct_md_array(elems, NULL, 1, dims, lbs,\n}\n\tDatum\t   *elems = matchctx->elems;", "partial_line": "int", "completion": "int\t\t\tlbs[1]; <|endoftext|>"}
{"context": "\treturn 'Q';\n\tPGresult   *res;\n\t\tPQExpBuffer db_lit = createPQExpBuffer();\n\t\t\t\tappendPQExpBufferStr(query, \"SELECT 1 \");\n\t\t\t\tprocessSQLNamePattern(conn, query, pat_cell->val, false,", "partial_line": "db_ce", "completion": "db_cell->str); <|endoftext|>"}
{"context": "\t}\n}\n\twhile (true)\n\t\tBuffer\t\tbuffer;\n\t\tIndexTuple\titup;", "partial_line": "page = (Page) BufferGetPa", "completion": "page = (Page) BufferGetPage(buffer); <|endoftext|>"}
{"context": "\t\texpr_op = get_commutator(expr_op);\n\t\tvar_on_left = false;\n\t\t\t\t\t\t\t\t\t\t\t   index,\n\t\tOpExpr\t   *subClause;\n\t\tNode\t   *leftop,", "partial_line": "subClause = (OpExpr", "completion": "subClause = (OpExpr *) subRinfo->clause; <|endoftext|>"}
{"context": "\t\t\tfor (j = 0; j < tbinfo->numatts; j++)\n\t\t\t\t\tif (actual_atts == 0)\n\t\t\t\t\t\t\t\t\t\t\t  tbinfo->attrdefs[j]->adef_expr);\n\t\t\t\t\t\tif (tbinfo->notnull_constrs[j][0] == '\\0')\n\t\t\t\t\t{", "partial_line": "if (!shouldPrintColumn(dopt,", "completion": "if (!shouldPrintColumn(dopt, tbinfo, j) && <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\taddress.classId = ConversionRelationId;\n\t\t\tcase OBJECT_OPFAMILY:\n\t\t\t\taddress.objectId = oidparse(object);\n\t\t\t\tif (!LargeObjectExists(address.objectId))", "partial_line": "TypeName   *targettype = lsecond_nod", "completion": "TypeName   *targettype = lsecond_node(TypeName, castNode(List, object)); <|endoftext|>"}
{"context": "\t\t\t\txl_btree_unlink_page *xlrec = (xl_btree_unlink_page *) rec;\n\t\t\t\t\t\t\t\t xlrec->leaftopparent);\n\t\t\t\txl_btree_reuse_page *xlrec = (xl_btree_reuse_page *) rec;\n\t\t\t\t\t\t\t\t xlrec->locator.relNumber,\n\t\t\t\tbreak;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\t\t\tprs->words[prs->curwords].nvariant = ptr->nvariant;\n\t\t}\n\tif (prs->curwords >= prs->lenwords)\n\t\tprs->lenwords *= 2;", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\tif (am_leader_apply_worker())\n\t\t\tApplyLauncherForgetWorkerStartTime(MyLogicalRepWorker->subid);\n\tMySubscriptionValid = true;\n\t\t\t\t\t\t\t\t  (Datum) 0);\n\t\t\t\t\t\tMySubscription->name,", "partial_line": "CommitTr", "completion": "CommitTransactionCommand(); <|endoftext|>"}
{"context": "\t\t\t(errmsg(\"source text of function \\\"%s\\\": %s\",\n\t\tchar\t   *value;\n\t\ttype_tuple = SearchSysCache1(TYPEOID, ObjectIdGetDatum(argtype));\n\t\t\t\t(errmsg(\"argument: %d; name: %s; value: %s\",\n\t\t\t\t\t\t\t\t ObjectIdGetDatum(prorettype));", "partial_line": "string = SPI_g", "completion": "string = SPI_getnspname(trigdata->tg_relation); <|endoftext|>"}
{"context": "\tCost\t\trun_cost = 0;\n\tAssert(baserel->relid > 0);\n\tget_restriction_qual_cost(root, baserel, param_info, &qpqual_cost);\n\tstartup_cost += path->pathtarget->cost.startup;\n\t\tpath->rows = param_info->ppi_rows;", "partial_line": "run_cost += cpu_p", "completion": "run_cost += cpu_per_tuple * baserel->tuples; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t}\n\t\t\t\t\t\t\t\t\t PQgetvalue(res, 0, 0),\n\t\tif (stream->stream_stop(stream->startpos, stream->timeline, false))\n\t\t\tuint32\t\tnewtimeline;", "partial_line": "if (newtimeline <= stream", "completion": "if (newtimeline <= stream->timeline) <|endoftext|>"}
{"context": "\tioh->callbacks_data[ioh->num_callbacks] = cb_data;\n\tioh->num_callbacks++;\n\tfor (int i = 0; i < len; i++)\nvoid\n{", "partial_line": "pgaio_result_report(PgAioResult result, const PgAioT", "completion": "pgaio_result_report(PgAioResult result, const PgAioTargetData *target_data, int elevel) <|endoftext|>"}
{"context": "\tBuffer\t\tmetabuf = InvalidBuffer;\n\tPage\t\tpage;\n\tbool\t\trightsib_is_rightmost;\n\tBlockNumber leaftopparent;\n\tpage = BufferGetPage(leafbuf);", "partial_line": "leftsib", "completion": "leftsib = leafleftsib; <|endoftext|>"}
{"context": "\t\tscan = systable_beginscan(sdepRel, SharedDependReferenceIndexId, true,\n\t\t\tForm_pg_shdepend sdepForm = (Form_pg_shdepend) GETSTRUCT(tuple);\n\t\t\t{\n\t\t\t\tcase SHARED_DEPENDENCY_INVALID:\n\t\t\t\t\telog(ERROR, \"unexpected dependency type\");", "partial_line": "obj.objectId =", "completion": "obj.objectId = sdepForm->objid; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"commands/trigger.h\"", "partial_line": "TriggerData *tri", "completion": "TriggerData *trigdata = (TriggerData *) fcinfo->context; <|endoftext|>"}
{"context": "\t\t\tif (lex->token_terminator - lex->token_start != ptok->len)\n\t\t\t}\n\t\t}\n\t{\n\t\t\t++lex->line_number;", "partial_line": "if (s", "completion": "if (s >= end) <|endoftext|>"}
{"context": "\t\t\t\t\ti = tm->tm_year / 100;\n\t\t\t\t{\n\t\t\t\t\t\tS_FM(n->suffix) ? 0 :\n\t\t\t\t\t\t(ADJUST_YEAR(tm->tm_year, is_interval) >= 0) ? 4 : 5,\n\t\t\t\tif (S_THth(n->suffix))", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\tbool\t\ttypbyval;\n\tif (trace_sort)\n\t\t\t workMem, sortopt & TUPLESORT_RANDOMACCESS ? 't' : 'f');\n\t\t\t\t\t\t\t\tfalse,\t", "partial_line": "sortopt & TUP", "completion": "sortopt & TUPLESORT_RANDOMACCESS, <|endoftext|>"}
{"context": "\t\tereport(LOG,\n\t\t\t\t(errmsg(\"LDAP server not specified\")));\n\t\tif (port->hba->ldapscheme != NULL &&\n\tif (passwd == NULL)\n\t\treturn STATUS_EOF;\t\t", "partial_line": "if (InitializeLDAPConne", "completion": "if (InitializeLDAPConnection(port, &ldap) == STATUS_ERROR) <|endoftext|>"}
{"context": "\tres = PSQLexec(buf.data);\n\tmyopt.n_translate_columns = lengthof(translate_columns);\n\t\t\t\t\t  \" ELSE pg_catalog.array_to_string(%s, E'\\\\n')\"\n\t\t\t\t\t  colname, gettext_noop(\"(none)\"),\n\tbool\t\thave_where = false;", "partial_line": "\"    WHEN pg_catalog.pg_opclass_is_v", "completion": "\"    WHEN pg_catalog.pg_opclass_is_visible(c.oid)\\n\" <|endoftext|>"}
{"context": "                lab4:\n            case 3:\n    }\n    return 1;\n        z->c = z->l - m_test1;", "partial_line": "{   int", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\t\t handle, refcnt);\n{\n\twhile ((dent = ReadDir(dir, PG_DYNSHMEM_DIR)) != NULL)\n\t\t\tchar\t\tbuf[MAXPGPATH + sizeof(PG_DYNSHMEM_DIR)];\n\t}", "partial_line": "FreeD", "completion": "FreeDir(dir); <|endoftext|>"}
{"context": "\tfollow_updates = (flags & TUPLE_LOCK_FLAG_LOCK_UPDATE_IN_PROGRESS) != 0;\ntuple_lock_retry:\n\tresult = heap_lock_tuple(relation, tuple, cid, mode, wait_policy,\n\t{\n\t\t\t\t{", "partial_line": "SnapshotD", "completion": "SnapshotDirty.xmin, <|endoftext|>"}
{"context": "            }\n    z->ket = z->c;\n        case 1:\n            {   int ret = slice_from_s(z, 1, s_5);\n            }", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t}\n\tchar\t   *e;\nstatic void\nstatic inline void\n{", "partial_line": "sta", "completion": "static inline void <|endoftext|>"}
{"context": "\t}\nmulti_sort_compare_dim(int dim, const SortItem *a, const SortItem *b,\n}\nint\n{", "partial_line": "int\t\t\td", "completion": "int\t\t\tdim; <|endoftext|>"}
{"context": "\tif (havingQual)\n\tadd_new_columns_to_pathtarget(partial_target, non_group_exprs);\n\t\t\tnewaggref = makeNode(Aggref);\n\tlist_free(non_group_cols);\n\t\tif (agg->aggtranstype == INTERNALOID && DO_AGGSPLIT_SERIALIZE(aggsplit))", "partial_line": "ListCell", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\t\t}\n\t\t{\n\t\t\t\t!ItemPointerEquals(&pos->item, &item))\n\t\t\t\telog(ERROR, \"could not find additional pending pages for same heap tuple\");\n\t\t\treturn false;", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t}\n\t\tmemcpy(PqGSSSendBuffer + PqGSSSendLength, &netlen, sizeof(uint32));\n\t}\n\tAssert(len == bytes_encrypted);\n\t\tif (PqGSSResultNext < PqGSSResultLength)", "partial_line": "PqGSSRecvLength", "completion": "PqGSSRecvLength += ret; <|endoftext|>"}
{"context": "\tMemoryContext oldcontext;\n\t\tDEBUG2, LOG, INFO, NOTICE,\n\t\tTcl_SetObjResult(interp, objv[2]);\n\t\t\t\t errmsg(\"%s\", UTF_U2E(Tcl_GetString(objv[2])))));\n\tPG_CATCH();", "partial_line": "Tcl_ListObjAppendElement(", "completion": "Tcl_ListObjAppendElement(interp, obj, <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tif (r == 0 || (r < 0 && errno == EINTR))\n\t\tif (r == -2)\n\t\t\t\t\t\t PQerrorMessage(conn));\n\t\t\tbool\t\treplyRequested;", "partial_line": "pg_log_error(\"stream", "completion": "pg_log_error(\"streaming header too small: %d\", r); <|endoftext|>"}
{"context": "\t\t\terrno = ECONNRESET;\n\t\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),\n\t}\n\tssize_t\t\tn;\n\t\t\t{", "partial_line": "n =", "completion": "n = -1; <|endoftext|>"}
{"context": "    z->ket = z->c;\n        if (ret < 0) return ret;\n        if (z->c > z->lb) goto lab1;\n        switch (among_var) {\n                {   int ret = slice_from_s(z, 4, s_58);", "partial_line": "if (ret < 0)", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\tif (printHeader)\n\t\t\tif (fillAlign)\n\t\t\t\tfill(strlen(PQgetvalue(res, i, j)), fLength[j], ' ', fp);\n}\n\t\t\t  int colWidth\t\t", "partial_line": "nTups = P", "completion": "nTups = PQntuples(res); <|endoftext|>"}
{"context": "\tbool\t   *nulls = op->d.minmax.nulls;\n\t*op->resnull = true;\n\t\t\tfcinfo->args[0].value = *op->resvalue;\n\tHeapTupleData tmptup;\n\t\tif (op->d.fieldselect.resulttype != attr->atttypid)", "partial_line": "(errcod", "completion": "(errcode(ERRCODE_DATATYPE_MISMATCH), <|endoftext|>"}
{"context": "\t\t\t\tmaxoff = GinPageGetOpaque(page)->maxoff;\n\tAssert(GinPageIsData(page));\n\t{\n\t\t\tpitem = GinDataPageGetPostingItem(page, i);\n\t\t\t\t\t(maxoff - offset + 1) * sizeof(PostingItem));", "partial_line": "dataBeginPlaceToPageLeaf(GinBtree btree, Buffer buf", "completion": "dataBeginPlaceToPageLeaf(GinBtree btree, Buffer buf, GinBtreeStack *stack, <|endoftext|>"}
{"context": "\t\t\t\tif (fullCommand && OidIsValid(indexId))\n\t\t\t\t\tOid\t\t\ttblspc;\n\t\t\t\t\t\tappendStringInfo(&buf, \" USING INDEX TABLESPACE %s\",\n\t\t\t\tconbin = TextDatumGetCString(val);\n\t\t\t\t{", "partial_line": "conForm", "completion": "conForm->conrelid); <|endoftext|>"}
{"context": "static const struct among a_5[35] =\n{ 3, s_5_0, -1, 1, 0},\n{ 2, s_5_1, -1, 1, 0},\n{ 7, s_5_3, -1, 1, 0},\n{ 4, s_5_7, -1, 1, 0},", "partial_line": "{ 8, s_5_11, -1,", "completion": "{ 8, s_5_11, -1, 1, 0}, <|endoftext|>"}
{"context": "\telse\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t   ginBuildCallback, &buildstate, NULL);\n\tbuildstate.buildStats.nTotalPages = RelationGetNumberOfBlocks(index);\n\tresult = (IndexBuildResult *) palloc(sizeof(IndexBuildResult));\n\t\t\t\tMetaBuffer;", "partial_line": "MarkBufferDirty(Roo", "completion": "MarkBufferDirty(RootBuffer); <|endoftext|>"}
{"context": "\tNode\t   *escontext = fcinfo->context;\n\tchar\t   *field[MAXDATEFIELDS];\n\t\t\t\t\t\t  field, ftype, MAXDATEFIELDS, &nf);\n\tif (dterr == 0)\n\t\t\t\t\t\t\t   &dtype, tm, &fsec, &tz, &extra);", "partial_line": "tm2time(tm, fsec", "completion": "tm2time(tm, fsec, &result); <|endoftext|>"}
{"context": "{\n\t\t\t0x0A3E,\t\t\t\t\n\t\t\t0x0B4B,\t\t\t\t\n\t\t\t0x0BBF,\t\t\t\t\n\t\t\t0x0BC1,\t\t\t\t", "partial_line": "0x", "completion": "0x0BCC, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  LLVMIntEQ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  v_argnull0,\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t   &v_fcinfo_isnull);\n\t\t\t\t\tLLVMBuildStore(b, v_retval, v_resvaluep);", "partial_line": "CompareType cmptype =", "completion": "CompareType cmptype = op->d.rowcompare_final.cmptype; <|endoftext|>"}
{"context": "\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t errmsg(\"conflicting or redundant options\")));\n\t\t\treserve_wal_given = true;\n\t\t{\n\t\t\t*two_phase = defGetBoolean(defel);", "partial_line": "bool", "completion": "bool\t\tnulls[4] = {0}; <|endoftext|>"}
{"context": "\tinit_var_from_num(num1, &arg1);\nnumeric_sub_opt_error(Numeric num1, Numeric num2, bool *have_error)\n\t\tif (NUMERIC_IS_PINF(num1))\n\t\t}\n\t\tAssert(NUMERIC_IS_NINF(num2));", "partial_line": "free_var(", "completion": "free_var(&result); <|endoftext|>"}
{"context": "\tif (splan->parParam == NIL && subLinkType == EXISTS_SUBLINK)\n\t{\n\t}\n\t\tTargetEntry *te = linitial(plan->targetlist);\n\t\tList\t   *params;", "partial_line": "result = con", "completion": "result = convert_testexpr(root, <|endoftext|>"}
{"context": "\tLOCK\t   *lock = locallock->lock;\n\tbool\t\tfirst_holder = true,\n\t\t\t\tfirst_waiter = true;\n\t\t{\n\t\t\t{", "partial_line": "appendStringInfo", "completion": "appendStringInfo(lock_waiters_sbuf, \"%d\", <|endoftext|>"}
{"context": "\t\t{\n\t}\n\treturn state;\n}\nscram_channel_bound(void *opaq)", "partial_line": "fe_scram_state", "completion": "fe_scram_state *state = (fe_scram_state *) opaq; <|endoftext|>"}
{"context": "\tBitmapset  *live_parts;\n\tint\t\t\ti;\n\tcheck_stack_depth();\n\tAssert(partdesc);\n\t\t\thas_partition_attrs(parentrel, parent_updatedCols, NULL);", "partial_line": "relinfo->all_partrels = bms_add_membe", "completion": "relinfo->all_partrels = bms_add_members(relinfo->all_partrels, <|endoftext|>"}
{"context": "\twhile (*pfmt)\n\t\t\tpstr++;\n\t\tif (*pfmt != '%')\n\t\t\t{\n\t\t\t}", "partial_line": "case '", "completion": "case 'A': <|endoftext|>"}
{"context": "\tStorePartitionBound(attachrel, rel, cmd->bound);\n\tpartConstraint = list_concat_copy(partBoundConstraint,\n\t\tpartConstraint =\n\t\t\t\t\t\t\t\t\t\t   false);\n\t\tAssert(!cmd->bound->is_default);", "partial_line": "defaultrel = table_open(defa", "completion": "defaultrel = table_open(defaultPartOid, NoLock); <|endoftext|>"}
{"context": "\tmy_level = GetCurrentTransactionNestLevel();\n\tif (isCommit)\n\t\ttransInvalInfo = myInfo->parent;\nCommandEndInvalidationMessages(void)\n\t\treturn;", "partial_line": "ProcessInvalidationMessages(&transI", "completion": "ProcessInvalidationMessages(&transInvalInfo->ii.CurrentCmdInvalidMsgs, <|endoftext|>"}
{"context": "\telse if (Matches(\"ALTER\", \"MATERIALIZED\", \"VIEW\", MatchAny))\n\t\tCOMPLETE_WITH_ATTR_PLUS(prev2_wd, \"COLUMN\", \"TO\");\n\telse if (Matches(\"ALTER\", \"MATERIALIZED\", \"VIEW\", MatchAny, \"RENAME\", MatchAnyExcept(\"TO\")))\n\t\tCOMPLETE_WITH(\"TO\");\n\telse if (Matches(\"ALTER\", \"MATERIALIZED\", \"VIEW\", MatchAny, \"SET\", \"ACCESS\", \"METHOD\"))", "partial_line": "else if (", "completion": "else if (Matches(\"ALTER\", \"POLICY\", MatchAny)) <|endoftext|>"}
{"context": "\t\t\t\t\t\terrmsg(\"only one select rule is allowed in views\"));\n\t\t\t\t\trte = rt_fetch(var->varno, query->rtable);\n\t\t\t\t\t\tRelation\trel;\nDatum\n\tRangeVar   *relrv;", "partial_line": "result = currtid_i", "completion": "result = currtid_internal(rel, tid); <|endoftext|>"}
{"context": "{ 4, s_2_443, -1, 66, 0},\n{ 3, s_2_446, -1, 124, 0},\n{ 4, s_2_449, 448, 121, 0},\n{ 3, s_2_466, -1, 116, 0},\n{ 4, s_2_468, 466, 33, 0},", "partial_line": "{ 6, s_2_474, 46", "completion": "{ 6, s_2_474, 466, 122, 0}, <|endoftext|>"}
{"context": "\t\tcase PG_REGEX_STRATEGY_C:\n\t\t\t\treturn iswpunct_l((wint_t) c, pg_regex_locale->info.lt);\n\t\t\treturn (c <= (pg_wchar) 127 &&\n\t\t\tbreak;\n\t\tcase PG_REGEX_STRATEGY_C:", "partial_line": "sta", "completion": "static pg_wchar <|endoftext|>"}
{"context": "{ 5, s_2_1039, 1034, 96, 0},\n{ 4, s_2_1048, 1047, 137, 0},\n{ 3, s_2_1051, -1, 53, 0},\n{ 4, s_2_1055, -1, 135, 0},\n{ 4, s_2_1059, -1, 132, 0},", "partial_line": "{ 3, s_2_1077", "completion": "{ 3, s_2_1077, -1, 104, 0}, <|endoftext|>"}
{"context": "\t\tchar\t   *variable = (char *) mm_alloc(strlen(name) + ((prefix == NULL) ? 0 : strlen(prefix)) + 4);\n\t\tchar\t   *struct_name;\n\t\t\t\tif (((atoi(arrsize) > 0) ||\n\t\t\t\t\tsprintf(variable, \"(%s%s)\", prefix ? prefix : \"\", name);\n\t\t\t\t\t\t (atoi(arrsize) == 0 && strcmp(arrsize, \"0\") != 0))", "partial_line": "&& size =", "completion": "&& size == NULL) <|endoftext|>"}
{"context": "tbm_shared_comparator(const void *left, const void *right, void *arg)\nTBMSharedIterator *\n\titerator->ptbase = dsa_get_address(dsa, istate->pagetable);\nstatic inline void *\npagetable_allocate(pagetable_hash *pagetable, Size size)", "partial_line": "PTEntr", "completion": "PTEntryArray *ptbase; <|endoftext|>"}
{"context": "\t\telse\n\t\tbin_width = 1.0;\ncalc_hist_selectivity_contains(TypeCacheEntry *typcache,\n\t\t\t\t\t\t\t   const RangeBound *lower, const RangeBound *upper,\n\tint\t\t\ti,", "partial_line": "lower_bin", "completion": "lower_bin_width; <|endoftext|>"}
{"context": "\t\t\tblkno = ItemPointerGetBlockNumber(htid);\n\t\t\tAssert(!delstate->bottomup ||\n\t\t\tmaxoff = PageGetMaxOffsetNumber(page);\n\t\telse\n\t\t\t\t\t\t\t\t\t   &heapTuple, NULL, true))", "partial_line": "conti", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"unrecognized object type: %d\", (int) objtype);\n\tObjectAddress address;\n\tListCell   *cell;\n\tswitch (objtype)\n\t\t\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),", "partial_line": "getObjectDes", "completion": "getObjectDescription(&famaddr, false)))); <|endoftext|>"}
{"context": "final_cost_nestloop(PlannerInfo *root, NestPath *path,\n{\n\tCost\t\trun_cost = workspace->run_cost;\n\t\touter_path_rows = 1;\n\t}", "partial_line": "Cost\t\tinn", "completion": "Cost\t\tinner_run_cost = workspace->inner_run_cost; <|endoftext|>"}
{"context": "\tif (pstate->p_expr_kind != EXPR_KIND_MERGE_RETURNING)\n\t\twhile (parent_pstate &&\n\t\t\topname = \"NOT\";\n\t\tNode\t   *arg = (Node *) lfirst(lc);\n\treturn (Node *) makeBoolExpr(a->boolop, args, a->location);", "partial_line": "transformFuncCall(ParseState *", "completion": "transformFuncCall(ParseState *pstate, FuncCall *fn) <|endoftext|>"}
{"context": "\t\texpr = get_typdefault(atttype);\n\t\t\t\treturn true;\n}\nfindDefaultOnlyColumns(RangeTblEntry *rte)\n{", "partial_line": "foreach(lc, rte->valu", "completion": "foreach(lc, rte->values_lists) <|endoftext|>"}
{"context": "\tif (!PQcancelStart(cancelConn))\n\t\tswitch (pollres)\n\t\t\t\tFD_SET(sock, &input_mask);\n\t\t\t\tFD_SET(sock, &output_mask);\n\t\t}", "partial_line": "if (PQcancelStatus(cance", "completion": "if (PQcancelStatus(cancelConn) != CONNECTION_OK) <|endoftext|>"}
{"context": "\tmq->mq_detached = true;\n\t\tused = wb - rb;\n\t\t}\n\t\t\t\tif (shm_mq_get_receiver(mq) == NULL)\n\t\t\t\t\treturn SHM_MQ_WOULD_BLOCK;", "partial_line": "else if (!shm_mq_wait_internal(", "completion": "else if (!shm_mq_wait_internal(mq, &mq->mq_receiver, <|endoftext|>"}
{"context": "\t\t\treturn CreateSQLFunctionDestReceiver();\n\t\t\treturn CreateTupleQueueDestReceiver(NULL);\nvoid\n\tchar\t\tcompletionTag[COMPLETION_TAG_BUFSIZE];\n\t\tcase DestExplainSerialize:", "partial_line": "case DestS", "completion": "case DestSQLFunction: <|endoftext|>"}
{"context": "void\n\tAssert(rw->rw_shmem_slot < max_worker_processes);\n\t{\n\t{\n\t\trw = dlist_container(RegisteredBgWorker, rw_lnode, iter.cur);", "partial_line": "ForgetBackground", "completion": "ForgetBackgroundWorker(rw); <|endoftext|>"}
{"context": "\tprocOid2 = LookupFuncName(procname, 3, argList, true);\n\t\t\t\t\t errmsg(\"type input function %s has multiple matches\",\n\telse\n\t{\n\t\tif (!OidIsValid(procOid))", "partial_line": "if (get_func_rettype", "completion": "if (get_func_rettype(procOid) != typeOid) <|endoftext|>"}
{"context": "\t\t\tOid\t\t\ttypsend;\n\t\t\tpq_sendbytes(&buf, VARDATA(outputbytes),\nstatic void\n\tForm_pg_proc pp;\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),", "partial_line": "pp = (Form_pg_proc) GETS", "completion": "pp = (Form_pg_proc) GETSTRUCT(func_htp); <|endoftext|>"}
{"context": "\telse\t\t\t\t\t\t\n\tvar->svalue = pg_strdup(stringform);\n}\n{\n\t{", "partial_line": "if (!strtoint64(var->svalue,", "completion": "if (!strtoint64(var->svalue, false, &iv)) <|endoftext|>"}
{"context": "\t\t}\n\t{\n\t\tnumaliases = list_length(aliaslist);\n\telse\n\t{", "partial_line": "else if (al", "completion": "else if (aliaslc) <|endoftext|>"}
{"context": "#include \"mb/pg_wchar.h\"\n#include \"miscadmin.h\"\n\t\t\t\t\t\t\tssize_t srclen, pg_locale_t locale);\nstatic size_t strnxfrm_libc(char *dest, size_t destsize,\n\t\t\t\t\t\t\t\t\t pg_locale_t locale);", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\tif (retval <= 0)\n\t\t{\n\t\tnetlen = pg_hton32(output.length);\n\t\tPqGSSSendLength += sizeof(uint32);\n\tAssert(len == PqGSSSendConsumed);", "partial_line": "Assert(len == byte", "completion": "Assert(len == bytes_encrypted); <|endoftext|>"}
{"context": "};\nenum TCPatternKind\n\tTailMatch,\ntypedef struct\n{", "partial_line": "\"autovacuum", "completion": "\"autovacuum_multixact_freeze_min_age\", <|endoftext|>"}
{"context": "    return 1;\n    {   int m1 = z->l - z->c; (void)m1;\n        z->ket = z->c;\n        {   int ret = slice_del(z);\n            {   int ret = r_stem_suffix_chain_before_ki(z);", "partial_line": "l", "completion": "lab1: <|endoftext|>"}
{"context": "\t\treturn;\n\trp->r_hiwasnum = lp == NULL;\n\tif (!rp->r_hiwasnum)\n\t\t\t\texit(EXIT_FAILURE);\n\t\treturn;", "partial_line": "if (*typep", "completion": "if (*typep != '\\0') <|endoftext|>"}
{"context": "}\n\t\tif (sqlerrstate == PLPGSQL_OTHERS)\n\t\t\t\treturn true;\n\tint\t\t\trc;\n\t\tswitch (datum->dtype)", "partial_line": "if (var->de", "completion": "if (var->default_val == NULL) <|endoftext|>"}
{"context": "\t\t\t\t  Oid *partopclass,\n\toidvector  *partcollation_vec;\n\tObjectAddresses *addrs;\n\tvalues[Anum_pg_partitioned_table_partcollation - 1] = PointerGetDatum(partcollation_vec);\n\t\t\tObjectAddressSet(referenced, CollationRelationId, partcollation[i]);", "partial_line": "recordDe", "completion": "recordDependencyOnSingleRelExpr(&myself, <|endoftext|>"}
{"context": "\t(ParallelTableScanDesc) ((char *) (shared) + BUFFERALIGN(sizeof(GinBuildShared)))\n\tint\t\t\tnparticipanttuplesorts;\n\tBuildAccumulator accum;\n\tdouble\t\tbs_numtuples;\nstatic void _gin_end_parallel(GinLeader *ginleader, GinBuildState *state);", "partial_line": "Relation heap, Rel", "completion": "Relation heap, Relation index, <|endoftext|>"}
{"context": "\txact_info = info & XLOG_XACT_OPMASK;\n\t{\n\t\tTransactionId recordXid;\n\t\tif (xact_info == XLOG_XACT_COMMIT_PREPARED)\n\t\t\trecordXid = XLogRecGetXid(record);", "partial_line": "recov", "completion": "recoveryStopName[0] = '\\0'; <|endoftext|>"}
{"context": "\t\tlen--;\n\t}\n\t\t0x9A879FA0, 0x68EC1CA3, 0x7BBCEF57, 0x89D76C54,\n\t\t0xF779DEAE, 0x05125DAD, 0x1642AE59, 0xE4292D5A,\n\t\t0x417B1DBC, 0xB3109EBF, 0xA0406D4B, 0x522BEE48,", "partial_line": "0x456CAC67, 0x", "completion": "0x456CAC67, 0xB7072F64, 0xA457DC90, 0x563C5F93, <|endoftext|>"}
{"context": "\tif (IsA(node, ColumnRef) &&\n\t\tif (exprKind == EXPR_KIND_GROUP_BY)\n\t\t{\n\t\t\t\t{\n\t\t\t\t\t{", "partial_line": "A_Const    *aconst = castNo", "completion": "A_Const    *aconst = castNode(A_Const, node); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   tup,\n\tsub->origin = TextDatumGetCString(datum);\n\tsub->ownersuperuser = superuser_arg(sub->owner);\n}\n\trel = table_open(SubscriptionRelationId, RowExclusiveLock);", "partial_line": "elog(ERROR, \"cache lookup faile", "completion": "elog(ERROR, \"cache lookup failed for subscription %u\", subid); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"ON CONFLICT is not supported with system catalog tables\"),\n\tif (RelationIsUsedAsCatalogTable(pstate->p_target_relation))\n\t\t\tRTEPermissionInfo *perminfo = pstate->p_target_nsitem->p_perminfo;\n\t\t\t\t\t\t\t\t\t\t\t\t\t conattnos);\n\tswitch (sortby->sortby_dir)", "partial_line": "get_sort_group_o", "completion": "get_sort_group_operators(restype, <|endoftext|>"}
{"context": "\tif (num_arg_patterns >= 2)\n\tif (!validateSQLNamePattern(&buf, oper_pattern,\n\t\t\t\t\t\t\t\t\"pg_catalog.pg_operator_is_visible(o.oid)\",\n\t\t\tchar\t\tft[64];\n\t\t\tsnprintf(typname, sizeof(typname), \"t%d.typname\", i);", "partial_line": "snprintf(tiv, s", "completion": "snprintf(tiv, sizeof(tiv), <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"miscadmin.h\"\n#include \"utils/jsonpath.h\"", "partial_line": "#include \"u", "completion": "#include \"utils/xml.h\" <|endoftext|>"}
{"context": "{\n\t{\n\t\t\t\tif (checker(expr->aggfnoid, context))\n\t\t\t\tFuncExpr   *expr = (FuncExpr *) node;\n\t\t\t\tset_opfuncid(expr);", "partial_line": "case T_Coer", "completion": "case T_CoerceViaIO: <|endoftext|>"}
{"context": "\t\t\t\tExtensionControlFile *control;\n}\n\tListCell   *lc;\n\t{\n\t\tExtensionVersionInfo *evi = (ExtensionVersionInfo *) lfirst(lc);", "partial_line": "bool", "completion": "bool\t\tnulls[8]; <|endoftext|>"}
{"context": "static const symbol s_104[] = { 0xCE, 0xBF, 0xCF, 0x85, 0xCE, 0xBD };\n                    if (ret < 0) return ret;\n            case 4:\n            case 5:\n                    if (ret < 0) return ret;", "partial_line": "case", "completion": "case 6: <|endoftext|>"}
{"context": "\tSimpleLruTruncate(MultiXactOffsetCtl,\n\t\t\t\t\t  MultiXactIdToOffsetPage(PreviousMultiXactId(newOldestMulti)));\n\tMultiXactId oldestMulti;\n\tMultiXactOffset newOldestOffset;\n\tLWLockAcquire(MultiXactTruncationLock, LW_EXCLUSIVE);", "partial_line": "oldestMulti = MultiXactState->old", "completion": "oldestMulti = MultiXactState->oldestMultiXactId; <|endoftext|>"}
{"context": "\t\tdouble\t\ttotal_ms = 1000.0 * planstate->instrument->total / nloops;\n\t\t{\n\t\t\tExplainPropertyFloat(\"Actual Loops\", NULL, 0.0, 0, es);\n\t\t\t\t}\n\t\t\tExplainCloseWorker(n, es);", "partial_line": "(es->verbose && ((Join *) plan)-", "completion": "(es->verbose && ((Join *) plan)->inner_unique)) <|endoftext|>"}
{"context": "\ts = str;\n\telse if (*s == LDELIM)\n\t\tcp = (s + 1);\n\t\t\tdepth++, s = cp;\n\t\t\ts++;", "partial_line": "ereturn(", "completion": "ereturn(escontext, (Datum) 0, <|endoftext|>"}
{"context": "\t\tif (wwmethod->compression_algorithm == PG_COMPRESSION_GZIP)\n\t\t\ttar_data->zp->next_out = tar_data->zlibOut;\n\t\t\t{\n\t\t\t\t\t_(\"could not initialize compression library\");\n\t\treturn NULL;", "partial_line": "tar_data->currentfile->base.", "completion": "tar_data->currentfile->base.currpos = 0; <|endoftext|>"}
{"context": "apply_typmod(NumericVar *var, int32 typmod, Node *escontext)\n\t\tvar->dscale = 0;\n\t\t\t\tif (dig < 10)\n#elif DEC_DIGITS == 1\n\t\t\t\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),", "partial_line": "if (NUMERIC_", "completion": "if (NUMERIC_IS_NAN(num)) <|endoftext|>"}
{"context": "\t\treturn;\n\tif (WaitForSingleObject(pgwin32_signal_event,\nvoid\n{\n\tpg_signal_mask = 0;", "partial_line": "if (pgwin32_signal_", "completion": "if (pgwin32_signal_event == NULL) <|endoftext|>"}
{"context": "\t\tform = UNICODE_NFKC;\n}\n\tPG_RETURN_NULL();\n\t\tpg_wchar\tuchar = utf8_to_unicode(p);\n\tinput_chars[i] = (pg_wchar) '\\0';", "partial_line": "output_chars = unicode_normalize(for", "completion": "output_chars = unicode_normalize(form, input_chars); <|endoftext|>"}
{"context": "\treturn options;\n\t\treturn sizeof(short_uri_designator) - 1;\n\tchar\t   *cp;\n\toptions = conninfo_init(errorMessage);\n\t\t{", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t}\nOid\n\tRelation\trel;\n\tOid\t\t\townerId;\n\tlocation = pstrdup(stmt->location);", "partial_line": "if (!in_p", "completion": "if (!in_place && !is_absolute_path(location)) <|endoftext|>"}
{"context": "\t\t\tif (val)\n\t\t\t\tappendPQExpBuffer(msg, libpq_gettext(\"CONTEXT:  %s\\n\"),\n\t\t}\n\t\tif (val)\n\t\tif (val)", "partial_line": "if (v", "completion": "if (val) <|endoftext|>"}
{"context": "}\n\tret = repalloc(pointer, size);\n{\n{\n}", "partial_line": "char", "completion": "char * <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase TBLOCK_STARTED:\n\t\tcase TBLOCK_SUBRESTART:\n\t{\n\t\t\tbreak;", "partial_line": "Rollbac", "completion": "RollbackToSavepoint(const char *name) <|endoftext|>"}
{"context": "\t\tk = i;\n\t\t\t\t{\ncreviterdissect(struct vars *v,\n\tint\t\t\tmin_matches;\n\tint\t\t\ti;", "partial_line": "assert(beg", "completion": "assert(begin <= end); <|endoftext|>"}
{"context": "Datum\n\t{\n\telse\n\t}\n\tTupleDesc\ttupdesc;", "partial_line": "tupdesc = C", "completion": "tupdesc = CreateTemplateTupleDesc(7); <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t  Oid dbId, Oid relId)\n\tSharedInvalidationMessage msg;\n\tAddInvalidationMessage(group, RelCacheMsgs, &msg);\n\t\t\t\t\t\t\t   msg->sn.relId == relId)", "partial_line": "AddInvalidationMessage(group,", "completion": "AddInvalidationMessage(group, RelCacheMsgs, &msg); <|endoftext|>"}
{"context": "\t\tneedCleanup = true;\n\t\tginInsertCleanup(ginstate, false, true, false, NULL);\n\t\telog(ERROR, \"too many entries for GIN index\");\n\t\tcollector->lentuples = pg_nextpower2_32(Max(16, nentries));\n\t}", "partial_line": "for (i = 0; i <", "completion": "for (i = 0; i < nentries; i++) <|endoftext|>"}
{"context": "\t\t\telse\n\titem->filename = pstrdup(\"\");\t\n{\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tScanKeyInit(&child_key,\n\t\t{\n\t\t\t\tAttrNumber\tchild_attno;\n\t\t\t\tchild_attno = extractNotNullColumn(child_tuple);\n\t\t\t\t\tcontinue;", "partial_line": "child_attr = TupleDescAttr(child_rel-", "completion": "child_attr = TupleDescAttr(child_rel->rd_att, child_attno - 1); <|endoftext|>"}
{"context": "\t\ttmfd->xmax = HeapTupleHeaderGetUpdateXid(oldtup.t_data);\n\t\tif (vmbuffer != InvalidBuffer)\n\t\txmax_new_tuple = HeapTupleHeaderGetRawXmax(oldtup.t_data);\n\t\t{\n\t\t}", "partial_line": "infomask2_lock_ol", "completion": "infomask2_lock_old_tuple; <|endoftext|>"}
{"context": "\tArrayType  *namespaces = PG_GETARG_ARRAYTYPE_P(2);\n#ifdef USE_LIBXML\nwellformed_xml(text *data, XmlOptionType xmloption_arg)\n\txmlDocPtr\tdoc;\n\t\txmlFreeDoc(doc);", "partial_line": "xml_is_well_fo", "completion": "xml_is_well_formed(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "int\t\t\tPGTYPESnumeric_sub(numeric *var1, numeric *var2, numeric *result);\nint\t\t\tPGTYPESnumeric_to_decimal(numeric *src, decimal *dst);\n#endif\t\t\t\t\t\t\t\n   typedef struct mytype  MYTYPE ;\n#line 19 \"struct.h\"", "partial_line": "int i", "completion": "int id ; <|endoftext|>"}
{"context": "\t\t\tpfree(ntup);\n\t\t}\n\t\tGinBufferStoreTuple(buffer, tup);\n\t\tntup = _gin_build_tuple(buffer->attnum, buffer->category,\n}", "partial_line": "_gin_paral", "completion": "_gin_parallel_scan_and_build(GinBuildState *state, <|endoftext|>"}
{"context": "\t}\n\tCHECK_SETOPT(actx, CURLOPT_COPYPOSTFIELDS, work_buffer->data, return false);\n\treturn start_request(actx);\n\tif (response_code == 200)\n\t\tactx->errctx = \"failed to parse device authorization\";", "partial_line": "if (!parse_token_error(a", "completion": "if (!parse_token_error(actx, &err)) <|endoftext|>"}
{"context": "\t\treturn;\npg_event_trigger_ddl_commands(PG_FUNCTION_ARGS)\n\t\tObjectAddress addr;\n\t\t\t\t\tchar\t   *type;\n\t\t\t\t\tif (cmd->type == SCT_Simple)", "partial_line": "addr = cmd->d.createop", "completion": "addr = cmd->d.createopc.address; <|endoftext|>"}
{"context": "\t\t\t_bt_relbuf(rel, pbuf);\n\t\t\t\t\t   new_item, MAXALIGN(IndexTupleSize(new_item)),\n{\n\trbuf = _bt_getbuf(rel, lpageop->btpo_next, BT_WRITE);\n\t{", "partial_line": "Buffer", "completion": "Buffer\t\tmetabuf; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t errmsg(\"background worker \\\"%s\\\": parallel workers may not be configured for restart\",\n\t}\n}\n{", "partial_line": "(errcode(ERRC", "completion": "(errcode(ERRCODE_ADMIN_SHUTDOWN), <|endoftext|>"}
{"context": "\tbool\t\tcoerce_at_runtime = false;\n\t\t\texpr = transformExprRecurse(pstate, behavior->expr);\n\t\t\t\t\t\t parser_errposition(pstate, exprLocation(expr))));\n\t\t\tif (expression_returns_set(expr))\n\tif (expr == NULL && btype != JSON_BEHAVIOR_ERROR)", "partial_line": "coerc", "completion": "coerce_at_runtime = true; <|endoftext|>"}
{"context": "\tmemcpy(tle, src_tle, sizeof(TargetEntry));\n\tf->quals = quals;\n\tcnst->consttype = consttype;\n\t\t\t\t\t (int) typLen,\n{", "partial_line": "b->boolop", "completion": "b->boolop = boolop; <|endoftext|>"}
{"context": "static int r_shortv(struct SN_env * z) {\n    if (in_grouping_b(z, g_v, 97, 121, 0)) return 0;\n    int among_var;\n}\n    if (z->c - 1 <= z->lb || (z->p[z->c - 1] != 100 && z->p[z->c - 1] != 103)) return 0;", "partial_line": "{   int m_test1", "completion": "{   int m_test1 = z->l - z->c; <|endoftext|>"}
{"context": "\tchar\t\tinfile[MAXPGPATH];\n\tsnprintf(infile, sizeof(infile), \"%s/sql/%s.sql\",\n\t\t\t\t inputdir, testname);\n\t\t\t\t\t dblist->str,\n\t\t\t\t\t outfile);", "partial_line": "appnameenv = psprin", "completion": "appnameenv = psprintf(\"pg_regress/%s\", testname); <|endoftext|>"}
{"context": "\tPG_RETURN_TEXT_P(cstring_to_text(type));\nget_altertable_subcmdinfo(PG_FUNCTION_ARGS)\n{\n\tCollectedCommand *cmd = (CollectedCommand *) PG_GETARG_POINTER(0);\n\t\t\t\tstrtype = \"SET NOT NULL\";", "partial_line": "case", "completion": "case AT_DropExpression: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t parsetree);\n\t\t\t\t\tcommandCollected = true;\n\t\t\t\taddress = CreateExtension(pstate, (CreateExtensionStmt *) parsetree);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t &secondaryObject);\n\t\t\tcase T_CreateForeignServerStmt:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\tnew_prediction = REALLOC(lex->pstack->prediction,\n\tlex->lex_level += 1;\n\t}\ndec_lex_level(JsonLexContext *lex)\n\treturn pstack->prediction[--pstack->pred_index];", "partial_line": "get_fname(JsonLexCont", "completion": "get_fname(JsonLexContext *lex) <|endoftext|>"}
{"context": "\tif (stmt->relation->relpersistence == RELPERSISTENCE_TEMP\n\t\t\t\t\t  ShareUpdateExclusiveLock);\n\t\ttablespaceId = get_tablespace_oid(stmt->tablespacename, false);\n\t\tif (partitioned && tablespaceId == MyDatabaseTableSpace)\n\t\t\t\t\t errmsg(\"cannot specify default tablespace for partitioned relations\")));", "partial_line": "else if (stmt->pa", "completion": "else if (stmt->partbound) <|endoftext|>"}
{"context": "\tif (entry == NULL)\n\t\tItemPointerEquals(&entry->fn_tid, &procedureTuple->t_self))\n\t\t\t\t\t&found);\n\tentry->fn_tid = procedureTuple->t_self;\nfmgr_internal_function(const char *proname)", "partial_line": "struct fmg", "completion": "struct fmgr_security_definer_cache <|endoftext|>"}
{"context": "\t\t\tif (FileTruncate(v->mdfd_vfd, (off_t) lastsegblocks * BLCKSZ, WAIT_EVENT_DATA_FILE_TRUNCATE) < 0)\n\t\t\t\tregister_dirty_segment(reln, forknum, v);\n\t\tcuropensegs--;\n\tmdnblocks(reln, forknum);\n\t\tMdfdVec    *v = &reln->md_seg_fds[forknum][segno - 1];", "partial_line": "min_inactive_seg = segn", "completion": "min_inactive_seg = segno = reln->md_num_open_segs[forknum]; <|endoftext|>"}
{"context": "}\n{\n\tsnprintf(buf, sizeof(buf), \"%04o\", Unix_socket_permissions);\n\tif (*newval)\n\t{", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "{\n\t\tfprintf(stderr, \"cannot open large object %u\", lobjId);\n\tif (lo_truncate64(conn, lobj_fd, len) < 0)\n\t\tfprintf(stderr, \"error in lo_truncate64: %s\", PQerrorMessage(conn));\nexportFile(PGconn *conn, Oid lobjId, char *filename)", "partial_line": "fprintf(stderr, \"cannot open larg", "completion": "fprintf(stderr, \"cannot open large object %u\", lobjId); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tXLogRegisterData(childblknos,\n\t}\n\telse if (rc == GPTP_SPLIT)\n\t\t}", "partial_line": "data.f", "completion": "data.flags = xlflags; <|endoftext|>"}
{"context": "static bool AdjustDays(int64 val, int scale,\nstatic int\tDetermineTimeZoneOffsetInternal(struct pg_tm *tm, pg_tz *tzp,\nconst char *const months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", NULL};\n\t{\"am\", AMPM, AM},", "partial_line": "{DB_C", "completion": "{DB_C, ADBC, BC}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  array->high_compare, NULL, NULL,\n\t\t\t\t\treturn true;\t\n\t\t\t\tif (!_bt_compare_scankey_args(scan, array->low_compare, skey,\n\t\tdefault:\n\treturn true;", "partial_line": "BTScanOpaque so = (BTSc", "completion": "BTScanOpaque so = (BTScanOpaque) scan->opaque; <|endoftext|>"}
{"context": "\t\tPG_CATCH();\n\t\t{\n\tPG_TRY();\n\t\treturn NULL;\n\t\tPLyExceptionEntry *entry;", "partial_line": "entry = hash", "completion": "entry = hash_search(PLy_spi_exceptions, &(edata->sqlerrcode), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t-1,\n\tif (num_out_args > 0 || function->fn_rettype == VOIDOID ||\n\t\tfunction->fn_retset)\n\tstruct compile_error_callback_arg cbarg;\n\tplpgsql_error_funcname = func_name;", "partial_line": "plpgsql_compile_tmp_cxt", "completion": "plpgsql_compile_tmp_cxt = MemoryContextSwitchTo(func_cxt); <|endoftext|>"}
{"context": "}\n\tmatstate = makeNode(MaterialState);\n\tmatstate->eof_underlying = false;\n\tExecEndNode(outerPlanState(node));\n\ttuplestore_trim(node->tuplestorestate);", "partial_line": "Assert(node->eflags", "completion": "Assert(node->eflags & EXEC_FLAG_MARK); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\ttailval,\n\t\t\t\tspool_tuples(winstate, winstate->frametailpos);\n\t\t\t\t\t\t\t\t\t\t\t winstate->frametail_slot))\n\t\t\telse\n\t\t\t\tmaxtailgroup = winstate->currentgroup + offset;", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "#endif\n\treturn (((((hour * MINS_PER_HOUR) + min) * SECS_PER_MINUTE) + sec) * USECS_PER_SEC) + fsec;\n}\t\t\t\t\t\t\t\t", "partial_line": "time = time2t(tm->tm_hour, tm->tm_min,", "completion": "time = time2t(tm->tm_hour, tm->tm_min, tm->tm_sec, fsec); <|endoftext|>"}
{"context": "#line 8 \"func.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"create table My_Table ( Item1 int , Item2 text )\", ECPGt_EOIT, ECPGt_EORT);\n#line 17 \"func.pgc\"\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\n\tINSERT INTO Log VALUES(TG_NAME, TG_WHEN);\\", "partial_line": "#line", "completion": "#line 32 \"func.pgc\" <|endoftext|>"}
{"context": "Oid\n\t\tif (opclass->opcintype == type_id)\n\t\t{\n\t\t\t}\n\t\tncompatiblepreferred == 1 ||", "partial_line": "return r", "completion": "return result; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tRowCompareExpr *rcexpr = (RowCompareExpr *) sublink->testexpr;\n\t\t\tappendStringInfoChar(buf, ')');\n\t\t\t\t (int) nodeTag(sublink->testexpr));\n\t{", "partial_line": "appendStringInfo(buf, \" %s", "completion": "appendStringInfo(buf, \" %s \", opname); <|endoftext|>"}
{"context": "\t\tlock->commitSeqNo = InvalidSerCommitSeqNo;\n\tLWLockRelease(partitionLock);\n\tif (PredicateLockExists(targettag))\n\tif (!found)\n\t{", "partial_line": "relation->", "completion": "relation->rd_locator.dbOid, <|endoftext|>"}
{"context": "#include \"c.h\"\n#ifdef USE_AVX512_CRC32C_WITH_RUNTIME_CHECK\n\t{\n\t\tp += 8;\n\t}", "partial_line": "while (p <", "completion": "while (p < pend) <|endoftext|>"}
{"context": "\t\t\t{\n\t\tresult = (char *) palloc(NAMEDATALEN);\n{\n\tchar\t   *opr_name_or_oid = PG_GETARG_CSTRING(0);\n\tint\t\t\tnargs;", "partial_line": "if (!parseNameAndAr", "completion": "if (!parseNameAndArgTypes(opr_name_or_oid, true, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tparent_joinrel, joinrel);\nmin_join_parameterization(PlannerInfo *root,\n\t\t\t\t\t\t  RelOptInfo *inner_rel)\n\tforeach(vars, input_rel->reltarget->exprs)\n\t{", "partial_line": "if (IsA(var, P", "completion": "if (IsA(var, PlaceHolderVar)) <|endoftext|>"}
{"context": "\tif (scale < 0)\n{\ngenerate_series_numeric(PG_FUNCTION_ARGS)\n\treturn generate_series_step_numeric(fcinfo);\n\t\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) exit (1);}\n\t{ ECPGdo(__LINE__, 0, 1, \"test1\", 0, ECPGst_normal, \"close $0\", \n\tstrcpy(msg, \"prepare\");\n\tECPGt_char,(t),(long)64,(long)1,(64)*sizeof(char), \n\t{ ECPGdo(__LINE__, 0, 1, \"test1\", 0, ECPGst_normal, \"fetch 1 from $0\", ", "partial_line": "ECPGt_char,&(cur", "completion": "ECPGt_char,&(curname3),(long)0,(long)1,(1)*sizeof(char), <|endoftext|>"}
{"context": "\t\t\t\t\t   index_itlist,\n\t\t\t\t\t   INDEX_VAR,\n\t\t\t\t\t   NUM_EXEC_QUAL((Plan *) plan));\n\tplan->recheckqual = (List *)\n\t\tfix_upper_expr(root,", "partial_line": "rtoff", "completion": "rtoffset, 1); <|endoftext|>"}
{"context": "{\n\tint\t\t\ti;\n\tint\t\t\tnumLocks = NUM_FIXED_LWLOCKS;\n\tnumLocks += NumLWLocksForNamedTranches();\n\t\tint\t\t   *LWLockCounter;", "partial_line": "for (int i = 0; i < NamedL", "completion": "for (int i = 0; i < NamedLWLockTrancheRequests; i++) <|endoftext|>"}
{"context": "\tif (!enable_group_by_reordering)\n\t\t\tAssert(list_length(info->clauses) == list_length(pinfo->clauses));\n}\n\t{\n\t}", "partial_line": "else if", "completion": "else if (keys2 == NIL) <|endoftext|>"}
{"context": "\t\t\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\t\tcmname = \"lz4\";\n\t\t\t\t\t\t\t\t\t  fmtId(tbinfo->attnames[j]),\n\t\t\t}", "partial_line": "fmtId", "completion": "fmtId(tbinfo->attnames[j]), <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include <unistd.h>", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\tif (aclresult != ACLCHECK_OK)\n\t\t\t\tereport(ERROR,\n\t}\n\t\tif (record != NULL)\n\t\t{", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\triinfo->agged_period_contained_by_oper,\n\t\tappendStringInfoString(&querybuf, \" FOR KEY SHARE OF x\");\n\tri_PerformCheck(riinfo, &qkey, qplan,\n\t\t\t\t\tfk_rel, pk_rel,\n\t\telog(ERROR, \"SPI_finish failed\");", "partial_line": "Relation", "completion": "Relation\tpk_rel; <|endoftext|>"}
{"context": "#include <string.h>\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"create table T ( Item1 int , Item2 int )\", ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlcode < 0) sqlprint();}", "partial_line": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_prepnormal, \"se", "completion": "{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_prepnormal, \"select Item2 from T order by Item2 nulls last\", ECPGt_EOIT, <|endoftext|>"}
{"context": "\tListCell   *l;\n\tforeach(l, activeWindows)\n\t{\n\t\tint\t\t\tpresorted_keys;\n\t\tbool\t\tis_sorted;", "partial_line": "path", "completion": "path->pathkeys, <|endoftext|>"}
{"context": "static TupleTableSlot *ExecHashJoinGetSavedTuple(HashJoinState *hjstate,\n\tHashState  *hashNode;\n\t\t\t\tAssert(hashtable == NULL);\n\t\t\t\t}\n\t\t\t\t\tnode->hj_FirstOuterTupleSlot = NULL;", "partial_line": "if", "completion": "if (parallel) <|endoftext|>"}
{"context": "\t\treplaces[nreplaces] = Anum_pg_class_reltuples;\n\t{\n\tReleaseSysCache(ctup);\n\tnewfcinfo->args[2].value = UInt32GetDatum(0);\n\tPG_RETURN_VOID();", "partial_line": "PG_RETURN_BOOL(r", "completion": "PG_RETURN_BOOL(result); <|endoftext|>"}
{"context": "\t}\n}\n\tOffsetNumber chainDest[MaxIndexTuplesPerPage];\n\tOffsetNumber predecessor[MaxIndexTuplesPerPage + 1];\n\t\t\t\tdeletable[i] = true;", "partial_line": "bds->s", "completion": "bds->stats->num_index_tuples += 1; <|endoftext|>"}
{"context": "\troutine = GetIndexAmRoutineByAmId(amoid, true);\n\t\tif (isnull)\n\t\tHeapTuple\ttuple;\n\t\t\t&& attno > rd_index->indnkeyatts)\n\t\t\t\tif (iskey &&", "partial_line": "case", "completion": "case AMPROP_DESC: <|endoftext|>"}
{"context": "\t{\n\tif (buf == NULL)\n\t\tPG_RETURN_DATUM(value);\ndomain_check_safe(Datum value, bool isnull, Oid domainType,\ndomain_check_internal(Datum value, bool isnull, Oid domainType,", "partial_line": "my_extra = (Do", "completion": "my_extra = (DomainIOData *) *extra; <|endoftext|>"}
{"context": "static const symbol s_5_10[12] = { 0xE0, 0xAE, 0x9F, 0xE0, 0xAF, 0x8D, 0xE0, 0xAE, 0xAA, 0xE0, 0xAF, 0x8D };\nstatic const symbol s_5_13[6] = { 0xE0, 0xAE, 0xB5, 0xE0, 0xAF, 0x8D };\nstatic const symbol s_5_14[9] = { 0xE0, 0xAE, 0xA8, 0xE0, 0xAF, 0x8D, 0xE0, 0xAE, 0xA4 };\n{ 12, s_5_4, -1, 4, 0},\n{ 6, s_5_9, -1, 1, 0},", "partial_line": "{ 12", "completion": "{ 12, s_5_10, -1, 3, 0}, <|endoftext|>"}
{"context": "#endif\n\t}\n\tif (a->nwords < b->nwords)\n\telse\n}", "partial_line": "pre", "completion": "prevbit++; <|endoftext|>"}
{"context": "static int\trestore_one_database(const char *inputFileSpec, RestoreOptions *opts,\n\t\t\t\t\t\t\t\t\t\tSimpleStringList db_exclude_patterns);\n\tRestoreOptions *opts;\n\tbool\t\tglobals_only = false;\n\tstatic int\tuse_setsessauth = 0;", "partial_line": "static", "completion": "static int\tstatistics_only = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   val_desc) : 0,\n\t\t\t\tAssert(dispatch->indexes[partidx] < proute->num_partitions);\n\t\t\t\t\tCheckValidResultRel(rri, CMD_INSERT, NIL);\n\t\t\t\t}\n\t\t\tif (likely(dispatch->indexes[partidx] >= 0))", "partial_line": "rri = proute->nonleaf_pa", "completion": "rri = proute->nonleaf_partitions[dispatch->indexes[partidx]]; <|endoftext|>"}
{"context": "\t\t}\n\t\tif (node->hashnulls)\n\t\t\t\t\t\t\t\t\t\t\t\t  node->tab_hash_funcs,\n\t\t{\n\t}", "partial_line": "MemoryContextSwit", "completion": "MemoryContextSwitchTo(oldcontext); <|endoftext|>"}
{"context": "        if (ret <= 0) return ret;\n    }\n        z->c = ret;\n    z->ket = z->c;\n        if (ret < 0) return ret;", "partial_line": "if (z->c - 1 <= z->lb || z->p[z->c", "completion": "if (z->c - 1 <= z->lb || z->p[z->c - 1] != 108) return 0; <|endoftext|>"}
{"context": "static void dumpRoleGUCPrivs(PGconn *conn);\nstatic void dumpTablespaces(PGconn *conn);\nstatic int\trunPgDump(const char *dbname, const char *create_opts,\nstatic ArchiveFormat parseDumpFormat(const char *format);\nstatic bool output_clean = false;", "partial_line": "static bo", "completion": "static bool skip_acls = false; <|endoftext|>"}
{"context": "\tchar\t\tsqlwarn[8];\n};\n#ifdef __cplusplus\n  int done = 0;\n#line 35 \"dyntest.pgc\"", "partial_line": "QUERY = \"select * from", "completion": "QUERY = \"select * from dyntest\"; <|endoftext|>"}
{"context": "\t{\n\t\tio_context = IOContextForStrategy(operation->strategy);\n\t\t\tpgstat_count_buffer_hit(operation->rel);\n\t\tif (VacuumCostActive)\n\t\t\tVacuumCostBalance += VacuumCostPageHit;", "partial_line": "for (int i = nblocks_done + 1; i < operat", "completion": "for (int i = nblocks_done + 1; i < operation->nblocks; i++) <|endoftext|>"}
{"context": "}\n\tif (mylocale->deterministic)\n\t\tDatum\t\targ1 = PG_GETARG_DATUM(0);\n\t}\n\t{", "partial_line": "text\t   *arg1 = PG_GET", "completion": "text\t   *arg1 = PG_GETARG_TEXT_PP(0); <|endoftext|>"}
{"context": "{ 6, s_2_1351, 1350, 1, 0},\n{ 5, s_2_1365, 1341, 84, 0},\n{ 6, s_2_1368, 1341, 86, 0},\n{ 4, s_2_1370, 1369, 1, 0},\n{ 6, s_2_1375, 1373, 89, 0},", "partial_line": "{ 6, s_2", "completion": "{ 6, s_2_1381, 1341, 93, 0}, <|endoftext|>"}
{"context": "\tslot->tts_tableOid = RelationGetRelid(relation);\n\t\t\t\t\t\t\t\t\tTransactionId *freezeXid,\n\tif (persistence == RELPERSISTENCE_UNLOGGED)\n\tdstrel = RelationCreateStorage(*newrlocator, rel->rd_rel->relpersistence, true);\n\t\t\t\t\t\trel->rd_rel->relpersistence);", "partial_line": "forkNum <= MAX_FORKN", "completion": "forkNum <= MAX_FORKNUM; forkNum++) <|endoftext|>"}
{"context": "\texit(1);\n\tvfprintf(stderr, fmt, args);\n}\n#define confirm_query_canceled(conn) confirm_query_canceled_impl(__LINE__, conn)\n\tif (strcmp(PQresultErrorField(res, PG_DIAG_SQLSTATE), \"57014\") != 0)", "partial_line": "while (PQisBu", "completion": "while (PQisBusy(conn)) <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t  PointerGetDatum(opcname),\n\t\t\tCreateOpFamilyStmt *opfstmt;\n\tprocedures = NIL;\n\t\tCreateOpClassItem *item = lfirst_node(CreateOpClassItem, l);", "partial_line": "switch (item->it", "completion": "switch (item->itemtype) <|endoftext|>"}
{"context": "\t\t\tif ((start_pos = strstr(str_copy, month_lower_tmp)))\n\t\t\t\t\ttoken[2][1] = token[1][1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t{", "partial_line": "i =", "completion": "i = -1; <|endoftext|>"}
{"context": "{\n\t\t{\n\treturn cnt;\n\tif (*s == SS2)\n\telse", "partial_line": "if", "completion": "if (*s == SS2) <|endoftext|>"}
{"context": "\t\tmemcpy(ptr, DatumGetPointer(datum), data_length);\n}\n\tif (empty)\n\t{\n\t\t{", "partial_line": "rng_col", "completion": "rng_collation); <|endoftext|>"}
{"context": "\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t\t\t\t\t\t\t   format_type_be(array_typeid),\n\t\t\t}\n\t\telse if (have_anymultirange && OidIsValid(range_typeid))", "partial_line": "Oid\t\t\trang", "completion": "Oid\t\t\trange_typelem; <|endoftext|>"}
{"context": "\t\t\tuniqueifyJsonbObject(&(*pstate)->contVal,\n\t\tcase WJB_END_ARRAY:\n\t\t\t{\n\t\t\t\tswitch ((*pstate)->contVal.type)\n\t\t\t\t\tdefault:", "partial_line": "elog(ERROR, \"unrec", "completion": "elog(ERROR, \"unrecognized jsonb sequential processing token\"); <|endoftext|>"}
{"context": "\ttype = DecodeUnits(0, lowunits, &val);\n\t\tif (TIMESTAMP_NOT_FINITE(timestamp))\n\t\t\t\tcase DTK_MONTH:\n\t\t\t\tcase DTK_MILLISEC:\n\t\t\t\tcase DTK_MICROSEC:", "partial_line": "if (woy <= 1 && tm", "completion": "if (woy <= 1 && tm->tm_mon == MONTHS_PER_YEAR) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t{\n\t\t\t\t\t\t\t   addrBuf, sizeof(addrBuf),", "partial_line": "N", "completion": "NULL, 0, <|endoftext|>"}
{"context": "\t\tif (!ecpg_clocale)\n\t\t\t\tecpg_free(port);\n\t\t\t\tecpg_free(dbname);\n\t}\n\tif (connection_name != NULL)", "partial_line": "all_", "completion": "all_connections = this; <|endoftext|>"}
{"context": "\t\t\tPQftype(res, 1) != INT8OID ||\n\t\t\t\t\t PQftype(res, 0), PQftype(res, 1), PQftype(res, 2));\n\t\t\tPQfformat(res, 2) != 1)\n\t\tif (PQgetisnull(res, 0, 0) ||\n\t\t\tremove_target_file(filename, true);", "partial_line": "filename, chunkoff", "completion": "filename, chunkoff, chunksize); <|endoftext|>"}
{"context": "\t\tif (pstmt->commandType == CMD_UTILITY &&\n\treturn false;\n\tsigprocmask(SIG_SETMASK, &BlockSig, NULL);\n\tif (ClientAuthInProgress && whereToSendOutput == DestRemote)\n\t\t\t\t\t errmsg(\"terminating connection because of unexpected SIGQUIT signal\")));", "partial_line": "(errcode(ERRCODE", "completion": "(errcode(ERRCODE_CRASH_SHUTDOWN), <|endoftext|>"}
{"context": "\t\t\tcase 'D':\n\t\t}\n\t\tappendPQExpBuffer(delcmd, \"DROP RULE %s \",\n\t\t\t\t\t  fmtId(rinfo->dobj.name));\n\t\t\t\t\t ARCHIVE_OPTS(.tag = tag,", "partial_line": "if (rinfo->dobj.dump & DUMP_COMP", "completion": "if (rinfo->dobj.dump & DUMP_COMPONENT_COMMENT) <|endoftext|>"}
{"context": "\tstrcpy(msg, \"declare\");\n\tstrcpy(msg, \"open\");\n\tECPGt_char,&(curname2),(long)0,(long)1,(1)*sizeof(char), \n\tprintf(\"%d %s\\n\", id, t);\n\tECPGt_int,&(count),(long)1,(long)1,sizeof(int), ", "partial_line": "ECPGt_NO_INDICATOR, NU", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, <|endoftext|>"}
{"context": "\tPathTarget *input_target;\n\tList\t   *non_group_vars;\n\t{\n\t\t\t\t\t\t\t\t\t\t  bms_make_singleton(root->group_rtindex),\n\t\t\t\t\t\t\t\t\t\t  NULL);", "partial_line": "list_free(", "completion": "list_free(non_group_vars); <|endoftext|>"}
{"context": "\t{\"sat\", DOW, 6},\n\t{\"september\", MONTH, 9},\n\t{\"tue\", DOW, 2},\nstatic const int szdatetktbl = sizeof datetktbl / sizeof datetktbl[0];\nstatic const datetkn deltatktbl[] = {", "partial_line": "{\"hrs\", UNITS,", "completion": "{\"hrs\", UNITS, DTK_HOUR}, <|endoftext|>"}
{"context": "\t\t\t\tcase 'a':\n\t\t\t\t\tpt = _add((t->tm_wday < 0 ||\n\t\t\t\tcase 'b':\n\t\t\t\t\t\t\t   t->tm_mon >= MONSPERYEAR) ?\n\t\t\t\t\t\t\t\ttrue, false, pt, ptlim);", "partial_line": "contin", "completion": "continue; <|endoftext|>"}
{"context": "\tplan.argtypes = NULL;\n\t_SPI_prepare_plan(src, &plan);\n\tresult = _SPI_make_plan_non_temp(&plan);\nSPIPlanPtr\n\tif (src == NULL)", "partial_line": "plan.narg", "completion": "plan.nargs = 0; <|endoftext|>"}
{"context": "\tbool\t\tgencol_published = false;\n\trelmapentry = logicalrep_rel_open(lrel.remoteid, NoLock);\n\t\tappendStringInfo(&cmd, \"COPY %s\",\n\t\tif (lrel.natts)\n\t\t\t{", "partial_line": "if (", "completion": "if (i < lrel.natts - 1) <|endoftext|>"}
{"context": "{\n\tArrayType  *in_array = PG_GETARG_ARRAYTYPE_P(0);\n\tDatum\t   *in_datums;\n\tswitch (ndims)\n\t\t\t\tereport(ERROR,", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\tif (lex->input_encoding == PG_UTF8)\n\t\t\t\t{\n\t\t\t\t\tcase 'n':\n\t\t{\n\t\t\tconst char *p = s;", "partial_line": "p += sizeof(", "completion": "p += sizeof(Vector8); <|endoftext|>"}
{"context": "\tPG_RETURN_OID(currentEventTriggerState->table_rewrite_oid);\n\t\tcurrentEventTriggerState->table_rewrite_reason == 0)\n\t\treturn;\n}\nEventTriggerUndoInhibitCommandCollection(void)", "partial_line": "if (!current", "completion": "if (!currentEventTriggerState) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\targtypes[i] = poly_actuals.anyarray_type;\n\t\t\tcase ANYMULTIRANGEOID:\n\t\t\t\targtypes[i] = poly_actuals.anymultirange_type;\n\t\t\t\targtypes[i] = anyc_actuals.anyelement_type;", "partial_line": "case ANY", "completion": "case ANYCOMPATIBLERANGEOID: <|endoftext|>"}
{"context": "\t\tnum_standbys < SyncRepConfig->num_sync)\n\t\tSyncRepGetOldestSyncRecPtr(writePtr, flushPtr, applyPtr,\n\t{\n\t\tSyncRepGetNthLatestSyncRecPtr(writePtr, flushPtr, applyPtr,\nSyncRepGetOldestSyncRecPtr(XLogRecPtr *writePtr,", "partial_line": "SyncRepStandbyDat", "completion": "SyncRepStandbyData *sync_standbys, <|endoftext|>"}
{"context": "}\nextern void danish_UTF_8_close_env(struct SN_env * z);\nstatic const symbol s_0_7[3] = { 'e', 'n', 'e' };\n{ 5, s_0_1, 0, 1, 0},\n{ 5, s_0_14, 13, 1, 0},", "partial_line": "{ 5, s_0_19, 18,", "completion": "{ 5, s_0_19, 18, 1, 0}, <|endoftext|>"}
{"context": "\t\tbuf_state = old_buf_state;\n\t\tif (pg_atomic_compare_exchange_u32(&bufHdr->state, &old_buf_state,\n\t}\n\t\tif (VacuumCostActive)\n\tBufferDesc *bufHdr;", "partial_line": "bufHdr = GetLocalBufferDescripto", "completion": "bufHdr = GetLocalBufferDescriptor(-buffer - 1); <|endoftext|>"}
{"context": "void\n{\n\t{\n\tAssert(GetProcessingMode() == InitProcessing);\n\tpqsignal(SIGUSR2, SIG_IGN);", "partial_line": "PG_exception_st", "completion": "PG_exception_stack = &local_sigjmp_buf; <|endoftext|>"}
{"context": "\tRepOriginId nodeid;\n\t\tnulls[0] = false;\n{\nCommitTsShmemSize(void)\n\t\t\tSetConfigOption(\"commit_timestamp_buffers\", buf, PGC_POSTMASTER,", "partial_line": "PGC_S_OVERR", "completion": "PGC_S_OVERRIDE); <|endoftext|>"}
{"context": "\t\t\t bool allow_system_table_mods,\n\tRelation\tindexRelation;\n\tbool\t\tconcurrent = (flags & INDEX_CREATE_CONCURRENT) != 0;\n\tAssert((constr_flags == 0) ||\n\tnamespaceId = RelationGetNamespace(heapRelation);", "partial_line": "IsSystemRelation", "completion": "IsSystemRelation(heapRelation) && <|endoftext|>"}
{"context": "\tarr = DatumGetArrayTypePCopy(value);\n\tif (stmt->slice < 0 || stmt->slice > ARR_NDIM(arr))\n\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  loop_var));\n\t\tereport(ERROR,", "partial_line": "(errcod", "completion": "(errcode(ERRCODE_DATATYPE_MISMATCH), <|endoftext|>"}
{"context": "\t\t\t\ti;\n\tchar\t   *raw;\n\tchar\t   *ptr;\n\tDimensionInfo *info = NULL;\n\tchar\t   *isnullptr;", "partial_line": "if (data ==", "completion": "if (data == NULL) <|endoftext|>"}
{"context": "#include \"catalog/pg_proc.h\"\n#include \"plpy_subxactobject.h\"\n#include \"utils/guc.h\"", "partial_line": "PG_FUNCTION_INFO_V1(plpython3_in", "completion": "PG_FUNCTION_INFO_V1(plpython3_inline_handler); <|endoftext|>"}
{"context": "\t}\n\tif (cmd != CMD_UPDATE && cmd != CMD_DELETE)\n\telse if (cmd == CMD_UPDATE && !pubdesc.cols_valid_for_update)\n\telse if (cmd == CMD_DELETE && !pubdesc.cols_valid_for_delete)\n\t\tereport(ERROR,", "partial_line": "RelationGetRelationNa", "completion": "RelationGetRelationName(rel)), <|endoftext|>"}
{"context": "void\n\t\tDatum\t   *queryValues;\n\t\tbool\t   *partial_matches = NULL;\n\t\tif (skey->sk_flags & SK_ISNULL)\n\t\t\t\t\t\t\t\t\t\t\t  PointerGetDatum(&partial_matches),", "partial_line": "PointerG", "completion": "PointerGetDatum(&extra_data), <|endoftext|>"}
{"context": "\tpathnode->jpath.innerjoinpath = inner_path;\n\t\t\t\t\t List *hashclauses)\n\tpathnode->jpath.path.param_info =\n\t\t\t\t\t\t\t\t  &restrict_clauses);\n{", "partial_line": "pathnode->subp", "completion": "pathnode->subpath = subpath; <|endoftext|>"}
{"context": "\t\t\t\tOid\t\t\tnewetype = exprType(newe);\n\t\t\t\t\t\t\t\tformat_type_be(array_type)),\n\t\telse\n\t}\n\t\tif (coerce_hard)", "partial_line": "errmsg(\"ca", "completion": "errmsg(\"cannot cast type %s to %s\", <|endoftext|>"}
{"context": "\tfree(conn->keepalives_interval);\n\t{\n\t\texplicit_bzero(conn->sslpassword, strlen(conn->sslpassword));\n\tfree(conn->scram_server_key);\n\t\tfor (int i = 0; i < conn->nconnhost; ++i)", "partial_line": "free(conn->connhost[", "completion": "free(conn->connhost[i].port); <|endoftext|>"}
{"context": "\t    state->keyword = 4;\t\n\t}\n\treturn (ident);\t\t\n\tbreak;\n\tdo {\t\t\t", "partial_line": "if (", "completion": "if (buf_ptr >= buf_end) <|endoftext|>"}
{"context": "\t}\n\treturn 0;\n{\n\tint\t\t\tnum = bms_num_members(attrs);\n\titems = (SortItem *) ptr;", "partial_line": "ptr += d", "completion": "ptr += data->numrows * sizeof(SortItem); <|endoftext|>"}
{"context": "\t\tbuf = _bt_getbuf(rel, *blkno, BT_READ);\n\t\t\t{\n\t\t\tif (P_RIGHTMOST(opaque) || ++tries > 4)\n\t\t\t\tbreak;\n\t\topaque = BTPageGetOpaque(page);", "partial_line": "if (P_I", "completion": "if (P_ISDELETED(opaque)) <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\tif (LIST_WALK(sbsref->refupperindexpr))\n\t\t\t\t\treturn true;\n\t\t\t\t\treturn true;\n\t\tcase T_FuncExpr:", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "\t\t} while (*str == *k->name);\n\t\t\t!(*str >= '0' && *str <= '9'));\n\t\tcase NUM_9:\n\t\t\tif (IS_BRACKET(num))\n\t\t\t\tereport(ERROR,", "partial_line": "++num", "completion": "++num->multi; <|endoftext|>"}
{"context": "\t\t\t\t\treturn result;\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   clause,\n\tPredIterInfoData pred_info;", "partial_line": "pclass = predicate_classify(predica", "completion": "pclass = predicate_classify(predicate, &pred_info); <|endoftext|>"}
{"context": "\t\t\t*isNull = true;\n\treturn ArrayCast(retptr, elmbyval, elmlen);\n\t\t\t\t\t\t   bool *isNull)\n\tDatum\t   *dvalues;\n\tAssert(arraytyplen == -1);", "partial_line": "ndim = ea", "completion": "ndim = eah->ndims; <|endoftext|>"}
{"context": "{\n\tTupleDesc\ttupdesc1;\n\tTupleDesc\ttupdesc2;\n\tHeapTupleData tuple1;\n\t\tmy_extra->ncolumns = ncols;", "partial_line": "my_extra->record2_", "completion": "my_extra->record2_type = InvalidOid; <|endoftext|>"}
{"context": "\t\treturn false;\n\tstruct stat stat_buf;\n\tif (stat(archiveStatusPath, &stat_buf) == 0)\n{\n\tchar\t\tarchiveStatusPath[MAXPGPATH];", "partial_line": "unlin", "completion": "unlink(archiveStatusPath); <|endoftext|>"}
{"context": "\t\tdefault:\n\t}\n\tif (bits < 0 || bits > 32)\n\t\tdst += SPRINTF((dst, \"/%u\", bits));\n\treturn (odst);", "partial_line": "i", "completion": "int\t\t\tb; <|endoftext|>"}
{"context": "\t\t\tcase EEOP_HASHDATUM_FIRST:\n\t\t\t\t\t{\n\t\t\t\t\t\tLLVMValueRef tmp;\n\t\t\t\t\t\topcode == EEOP_HASHDATUM_NEXT32_STRICT)\n\t\t\t\t\t\tLLVMPositionBuilderAtEnd(b, b_ifnullblock);", "partial_line": "\"b.%d.n", "completion": "\"b.%d.null\", <|endoftext|>"}
{"context": "{\n\tif (conn->auth_req_received)\n\tconn->status = CONNECTION_BAD;\n\tconn->verbosity = PQERRORS_DEFAULT;\n\tconn->show_context = PQSHOW_CONTEXT_ERRORS;", "partial_line": "conn->Pf", "completion": "conn->Pfdebug = NULL; <|endoftext|>"}
{"context": "\tchar\t   *pro_name = text_to_cstring(PG_GETARG_TEXT_PP(0));\n\t\t\t\t\t\t\t\t\t InvalidOid, -1,\nregprocout(PG_FUNCTION_ARGS)\nDatum\n\t\tPG_RETURN_NULL();", "partial_line": "for (; clist; clist = c", "completion": "for (; clist; clist = clist->next) <|endoftext|>"}
{"context": "\tSERVER_LOG_FILE,\n\tadjust_data_dir(&old_cluster);\n\tcheck_new_cluster();\n\tset_locale_and_encoding();\n\tstop_postmaster(false);", "partial_line": "user_opts.transfer_mode ==", "completion": "user_opts.transfer_mode == TRANSFER_MODE_SWAP) <|endoftext|>"}
{"context": "\t}\n\t\t\treturn false;\t\t\n\tactx_error(actx, \"unexpected response code %ld\", response_code);\n\treturn false;\n\tbool\t\tsuccess = false;", "partial_line": "Assert(tok.access_token || to", "completion": "Assert(tok.access_token || tok.err.error); <|endoftext|>"}
{"context": "\t\tsavedpos = prs->vectorpos;\n\t\t{\n\t\t\tif (ptr->flags & TSL_ADDPOS)\n\t\tpfree(norms);\n{", "partial_line": "PointerGetDa", "completion": "PointerGetDatum(buf), <|endoftext|>"}
{"context": "\t\tisnull[1] = (category != GIN_CAT_NORM_KEY);\n\tif (IndexTupleHasNulls(itup))\n\tGinSetPostingOffset(itup, newsize);\n\tnewsize += dataSize;\n\t{", "partial_line": "pfree(", "completion": "pfree(itup); <|endoftext|>"}
{"context": "\t\t\t\t\t\tcontext->strength = COLLATE_CONFLICT;\n\t\t\tcase COLLATE_CONFLICT:\n\t\t\t\t{\n\tforeach(lc, aggref->args)\nstatic void", "partial_line": "bool", "completion": "bool\t\tmerge_sort_collations; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tTCL_EVAL_GLOBAL);\n\t\t\tMemoryContextDelete(proc_cxt);\n\t\tTcl_DStringFree(&proc_internal_def);\n\t}\n\tprodesc->fn_refcount++;", "partial_line": "if (old", "completion": "if (old_prodesc != NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t\t\t\t\t(errcode(ERRCODE_TOO_MANY_ARGUMENTS),\n\t\t\t\t\t\t\t\t\t\t\t   nargsplusdefs,\n\t{", "partial_line": "newa->element", "completion": "newa->elements = vargs; <|endoftext|>"}
{"context": "\tchar\t   *sname;\n\t\t\t\terrorConflictingDefElem(defel, cxt->pstate);\n\t\t\tloggedEl = defel;\n\t\t\tsnamespaceid = RangeVarGetCreationNamespace(cxt->relation);\n\t\t\tereport(ERROR,", "partial_line": "seqstmt->s", "completion": "seqstmt->sequence->relpersistence = seqpersistence; <|endoftext|>"}
{"context": "\t\t\tmul_var(&vN, &vNminus1, &vNminus1, 0);\t\n\tNumericAggState *state;\n\telse\n\tres = numeric_stddev_internal(state, false, true, &is_null);\n}", "partial_line": "bool", "completion": "bool\t\tis_null; <|endoftext|>"}
{"context": "\tbool\t\tprev_cmd_interactive;\n\t\tPQExpBufferBroken(history_buf))\n\t\tpg_fatal(\"out of memory\");\n\t\t\tpsql_scan_finish(scan_state);\n\t\t\t\tbreak;", "partial_line": "if (", "completion": "if (query_buf->len == 0) <|endoftext|>"}
{"context": "\t\t\t   *tail;\n\t\t\t\t\t\t\t &head, &tail))\n\t\t\terror = true;\n\t\t\tif (!item->ignore &&\n\t{", "partial_line": "errmsg(\"unrecognized configuration parameter", "completion": "errmsg(\"unrecognized configuration parameter \\\"%s\\\" in file \\\"%s\\\" line %d\", <|endoftext|>"}
{"context": "\t\t}\n\t\t{\n\t\t\t\treturn NULL;\n\t\tif (v == NULL)\n\t\t\tif ((behavior & EXTENSION_RETURN_NULL) &&", "partial_line": "FILE_POSSIBLY_", "completion": "FILE_POSSIBLY_DELETED(errno)) <|endoftext|>"}
{"context": "\tconfigdata[i].setting = pstrdup(path);\n\tconfigdata[i].setting = pstrdup(path);\n\tcleanup_path(path);\n\tget_pkglib_path(my_exec_path, path);\n\tcleanup_path(path);", "partial_line": "configdata[i].sett", "completion": "configdata[i].setting = pstrdup(VAL_CPPFLAGS); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t\telog(ERROR, \"cannot translate to multiple leaf relids\");\n\t\t\t\t\tvar->varno = leaf_relid;\n\tif (IsA(node, CurrentOfExpr))\n\t{", "partial_line": "return (", "completion": "return (Node *) cexpr; <|endoftext|>"}
{"context": "\tfree(tok->token_type);\n\tstruct curl_slist *headers; \n\tchar\t\tcurl_err[CURL_ERROR_SIZE];\n\t{\n\t}", "partial_line": "close(", "completion": "close(actx->timerfd); <|endoftext|>"}
{"context": "\t\t\t\tcase 'z':\n\t\t\t\t\t\tnegative = diff < 0;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (t->tm_zone != NULL)\n\t\t\t\t\t\t\t\tnegative = t->tm_zone[0] == '-';", "partial_line": "diff =", "completion": "diff = -diff; <|endoftext|>"}
{"context": "#include \"executor/nodeResult.h\"\n{\n\tCHECK_FOR_INTERRUPTS();", "partial_line": "if (outerPl", "completion": "if (outerPlan != NULL) <|endoftext|>"}
{"context": "        case 109:\n                if (ret < 0) return ret;\n            {   int ret = slice_from_s(z, 2, s_241);\n        case 119:\n            }", "partial_line": "case 1", "completion": "case 122: <|endoftext|>"}
{"context": "\tvalues[Anum_pg_range_rngcanonical - 1] = ObjectIdGetDatum(rangeCanonical);\n\tObjectAddressSet(referenced, OperatorClassRelationId, rangeSubOpclass);\n\tadd_exact_object_address(&referenced, addrs);\n\treferencing.classId = TypeRelationId;\n\ttable_close(pg_range, RowExclusiveLock);", "partial_line": "HeapTuple", "completion": "HeapTuple\ttup; <|endoftext|>"}
{"context": "\t\t\t\tdlist_delete_thoroughly(&(finishedSxact->finishedLink));\n\t\t\t{\n\t\t\ttarget = tag.myTarget;\n\t\t\tdlist_delete(&(predlock->targetLink));\n\t\t\tdlist_delete(&(predlock->xactLink));", "partial_line": "targ", "completion": "targettaghash), <|endoftext|>"}
{"context": "\t\tif (context->boundary <= 0)\n\tif (IsA(rawreq, SupportRequestWFuncMonotonic))\n\tif (IsA(rawreq, SupportRequestOptimizeWindowClause))\n\t{\n\t\t\t\t\t\t\t FRAMEOPTION_ROWS |", "partial_line": "boo", "completion": "bool\t\tconst_offset; <|endoftext|>"}
{"context": "}\nstatic int r_SUFFIX_I_OK(struct SN_env * z);", "partial_line": "ex", "completion": "extern \"C\" { <|endoftext|>"}
{"context": "#include \"access/heapam_xlog.h\"\n#include \"access/xloginsert.h\"\n\tOffsetNumber nowdead[MaxHeapTuplesPerPage];\nstatic void heap_prune_chain(Page page, BlockNumber blockno, OffsetNumber maxoff,\nstatic void heap_prune_record_redirect(PruneState *prstate,", "partial_line": "OffsetNu", "completion": "OffsetNumber offnum, OffsetNumber rdoffnum, <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\tcase 'v':\n\t\t\tcase 'w':\n\t\t\tcase 'W':", "partial_line": "else if (strcm", "completion": "else if (strcmp(optarg, \"f\") == 0 || <|endoftext|>"}
{"context": "\thashtable->skewEnabled = false;\n\thashtable->nSkewBuckets = 0;\n\thashtable->skewBucketNums = NULL;\n\thashtable->nbatch_original = nbatch;\n\thashtable->totalTuples = 0;", "partial_line": "hashtable->partia", "completion": "hashtable->partialTuples = 0; <|endoftext|>"}
{"context": "\treturn root;\n\t\t!(kind == EXPRKIND_RTFUNC ||\n\t\texpr = flatten_join_alias_vars(root, root->parse, expr);\n\t\texpr = (Node *) make_ands_implicit((Expr *) expr);\n\t\treturn;", "partial_line": "preprocess_qual_conditions(ro", "completion": "preprocess_qual_conditions(root, j->larg); <|endoftext|>"}
{"context": "\tsnprintf(path, sizeof(path), \"%s/pg_hba.conf\", pg_data);\n\tfflush(stdout);\n\tsnprintf(headerline, sizeof(headerline), \"# PostgreSQL %s\\n\",\n\t\tpg_log_error_hint(\"Specify the correct path using the option -L.\");\n\tsprintf(buf, \"%d\", (int) sizeof(Pointer));", "partial_line": "bki_lines = replace_toke", "completion": "bki_lines = replace_token(bki_lines, \"ENCODING\", <|endoftext|>"}
{"context": "\t\t\t\t\ttyinfo->dobj.namespace->dobj.name, tyinfo->rolname,\n\t\tdumpACL(fout, tyinfo->dobj.dumpId, InvalidDumpId, \"TYPE\",\n\tPQclear(res);\n\tfree(qualtypname);\n\tint\t\t\tntups;", "partial_line": "query = cre", "completion": "query = createPQExpBuffer(); <|endoftext|>"}
{"context": "\t\t\tin->cur = strchr(in->cur, '\\0');\n\t\tint16\t\tdistance = in->curpol->qoperator.distance;\n\t\t\t(op == OP_PHRASE && rightPhraseOp))\n\t\t{\n\t\tinfix(&nrm, priority, (op == OP_PHRASE));", "partial_line": "case OP", "completion": "case OP_OR: <|endoftext|>"}
{"context": "\tuncommitted_enum_values = NULL;\n\tint\t\t\ti;\nsort_order_cmp(const void *p1, const void *p2)\n\tHeapTuple\tv1 = *((const HeapTuple *) p1);\n\tHeapTuple\tv2 = *((const HeapTuple *) p2);", "partial_line": "Form_pg_enum en2 = (Form_pg_enum)", "completion": "Form_pg_enum en2 = (Form_pg_enum) GETSTRUCT(v2); <|endoftext|>"}
{"context": "    case '*':\n\t\tfill_buffer();\n\t    code = comment;\n\tunary_delim = true;\n\t    err(1, NULL);", "partial_line": "else if ((com", "completion": "else if ((comparison = strcmp(key, typenames[typename_top])) >= 0) { <|endoftext|>"}
{"context": "\t\t\tgettext_noop(\"Lists shared libraries to preload into each backend.\"),\n\t\t\tNULL,\n\t\t\tGUC_LIST_INPUT | GUC_LIST_QUOTE | GUC_SUPERUSER_ONLY\n\t},\n\t{", "partial_line": "{\"search_p", "completion": "{\"search_path\", PGC_USERSET, CLIENT_CONN_STATEMENT, <|endoftext|>"}
{"context": "\t\tdump_ind();\n\t\tdump_expr(stmt->argquery);\n\t{\n\t\tif (stmt->params != NIL)\n\t\t\tListCell   *lc;", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\treturn multirange_bsearch_match(rangetyp, mr, &val,\n{\n}\n{\n\tTypeCacheEntry *typcache;", "partial_line": "typcache = multirange_get_t", "completion": "typcache = multirange_get_typcache(fcinfo, MultirangeTypeGetOid(mr)); <|endoftext|>"}
{"context": "\t0x0DC0, 0x0DC6,\n\t0x0E94, 0x0E97,\n\t0x0EAA, 0x0EAB,\n\t0x1023, 0x1027,\n\t0x1031, 0x1031,", "partial_line": "0x1", "completion": "0x1720, 0x1731, <|endoftext|>"}
{"context": "\t\t\tif ((res = PSQLexec(\"BEGIN\")) == NULL)\n\t\t\t\t\tsuccessResult = EXIT_USER;\n\t\t\telse if (cell->action == ACT_SINGLE_SLASH)\n\t\t\t\t\tputs(cell->val);\n\t\t\telse if (cell->action == ACT_FILE)", "partial_line": "res = PSQLexec", "completion": "res = PSQLexec((successResult != EXIT_SUCCESS && pset.on_error_stop) ? <|endoftext|>"}
{"context": "\t\tif (context == PGC_SIGHUP && applySettings && !IsUnderPostmaster)\n\t\t\tconst char *preval = GetConfigOption(item->name, true, false);\n\t\t\t{\n\t\t\t\t\t\t\t\t\titem->name, item->value)));\n\t\t\t\t\t errmsg(\"configuration file \\\"%s\\\" contains errors; unaffected changes were applied\",", "partial_line": "ere", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\tfprintf(stderr, \"Usage:\\n\");\n\tfprintf(stderr, \"\\nOptions:\\n\");\nstatic void\n\tprintf(\"disallowed_in_pipeline\\n\");\n\tprintf(\"multi_pipelines\\n\");", "partial_line": "errno", "completion": "errno = 0; <|endoftext|>"}
{"context": "}\n\tPG_FREE_IF_COPY(polya, 0);\nDatum\n\tPOLYGON    *polyb = PG_GETARG_POLYGON_P(1);\n\tresult = polya->boundbox.low.x > polyb->boundbox.high.x;", "partial_line": "PG_R", "completion": "PG_RETURN_BOOL(result); <|endoftext|>"}
{"context": "\t\t\t\t\t   unnamed_stmt_context,\n\t\tStorePreparedStatement(stmt_name, psrc, false);\n\t}\n\telse\n\t{", "partial_line": "MemoryContextSwit", "completion": "MemoryContextSwitchTo(oldcontext); <|endoftext|>"}
{"context": "int\n\t{\n\t\tsize += 2;\n\t\textract = abs_long_val - (abs_long_val % reach_limit);\n\t\tvar->digits[i] = extract / reach_limit;", "partial_line": "reach_lim", "completion": "reach_limit /= 10; <|endoftext|>"}
{"context": "\t\t\tnew_oid = GetNewOidWithIndex(pg_enum, EnumOidIndexId,\n\t\toids[elemno] = new_oid;\n\t\tslot[slotCount]->tts_values[Anum_pg_enum_enumtypid - 1] = ObjectIdGetDatum(enumTypeOid);\n\t\tExecStoreVirtualTuple(slot[slotCount]);\n\t\tslotCount++;", "partial_line": "in", "completion": "indstate); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  inner_plan,\n\t\t\t\t\t\t\t  best_path->jpath.jointype,\n\tcopy_generic_path_info(&join_plan->join.plan, &best_path->jpath.path);\n\tList\t   *joinclauses;\n\tList\t   *mergeclauses;", "partial_line": "List\t   *outerpa", "completion": "List\t   *outerpathkeys; <|endoftext|>"}
{"context": "\t\tcase T_Boolean:\n\t\tcase T_A_Const:\n\t\tcase T_A_Star:\n\t\t\t\tSubLink    *sublink = (SubLink *) node;\n\t\tcase T_RowExpr:", "partial_line": "if (", "completion": "if (WALK(jpe->output)) <|endoftext|>"}
{"context": "\tresult = polya->boundbox.low.x > polyb->boundbox.high.x;\n\tPG_RETURN_BOOL(result);\n{\n\tresult = polya->boundbox.low.x >= polyb->boundbox.low.x;\n\tPG_RETURN_BOOL(result);", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\tres->attnums = (AttrNumber *) palloc0(sizeof(AttrNumber) * maplen);\nfree_attrmap(AttrMap *map)\n\tAttrMap    *attrMap;\n\tint\t\t\tnincols;\n\tint\t\t\tn;", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\tindexstate->ss.ps.plan = (Plan *) node;\n\tExecInitScanTupleSlot(estate, &indexstate->ss, tupDesc,\n\tindexstate->ss.ps.qual =\n\tlockmode = exec_rt_fetch(node->scan.scanrelid, estate)->rellockmode;\n\tExecIndexBuildScanKeys((PlanState *) indexstate,", "partial_line": "node->", "completion": "node->indexqual, <|endoftext|>"}
{"context": "\tif (proc->proname)\n}\n\tMemoryContextDelete(proc->mcxt);\n\t\treturn false;\n\tif (!(proc->fn_xmin == HeapTupleHeaderGetRawXmin(procTup->t_data) &&", "partial_line": "*mp++ = *", "completion": "*mp++ = *sp++; <|endoftext|>"}
{"context": "\t}\n}\n\tcur_relname = get_rel_name(workitem->avw_relation);\n\tcur_datname = get_database_name(MyDatabaseId);\n\t}", "partial_line": "PG_", "completion": "PG_CATCH(); <|endoftext|>"}
{"context": "\t\t\t typentry = typentry->nextDomain)\n\t{\n\t\tbool\t\thadPgTypeData = (typentry->flags & TCFLAGS_HAVE_PG_TYPE_DATA);\n\t\ttypentry->flags &= ~TCFLAGS_CHECKED_DOMAIN_CONSTRAINTS;\n\tif (offset > (Oid) INT_MAX)", "partial_line": "re", "completion": "return 0; <|endoftext|>"}
{"context": "\tOid\t\t\trelid = RelationGetRelid(rel);\n\t\t\tgetTypeOutputInfo(get_partition_col_typid(key, i),\n\t\t}\n\t\tif (i > 0)\n\t\t\tappendBinaryStringInfo(&buf, val, vallen);", "partial_line": "st", "completion": "static List * <|endoftext|>"}
{"context": "\t\t\t\t\tif (PQgetisnull(res, row, i))\n\t\t\t\tsqlda->sqlvar[i].sqllen = sizeof(timestamp);\n\t\t\t\tbreak;\n\t\tsqlda->sqlvar[i].sqlind = isnull ? &value_is_null : &value_is_not_null;\n\tecpg_log(\"ecpg_build_native_sqlda on line %d sqld = %d\\n\", line, sqlda->sqld);", "partial_line": "return sq", "completion": "return sqlda; <|endoftext|>"}
{"context": "\t{\n\tcomputeRegionDelta(pageData, curpage, targetpage,\n\t{\n\tfor (i = 0; i < MAX_GENERIC_XLOG_PAGES; i++)\n\t{", "partial_line": "GenericXLogRegisterBuffer(Gene", "completion": "GenericXLogRegisterBuffer(GenericXLogState *state, Buffer buffer, int flags) <|endoftext|>"}
{"context": "\t\t\t STATS_EXT_MCV, mvoid);\n\t\ttypentry = lookup_type_cache(stats[dim]->attrtypid, TYPECACHE_LT_OPR);\n\t\t\tcounts[dim] += 1;\n\t\tssup[dim].ssup_collation = stats[dim]->attrcollid;\n\t\t\tAssert(compare_datums_simple(values[dim][i - 1], values[dim][i], &ssup[dim]) <= 0);", "partial_line": "contin", "completion": "continue; <|endoftext|>"}
{"context": "\t\tmy_extra->record_typmod = 0;\n\t\tmy_extra->record_typmod != tupTypmod)\n\t\tMemSet(my_extra, 0,\n\t\t\t   ncolumns * sizeof(ColumnIOData));\n\t\tmy_extra->record_type = tupType;", "partial_line": "ColumnIOData *column_info", "completion": "ColumnIOData *column_info = &my_extra->columns[i]; <|endoftext|>"}
{"context": "\tbool\t\treplyRequested;\n\treplyRequested = copybuf[pos];\n\t\t\twalfile != NULL)\n\t\t\t\tpg_fatal(\"could not fsync file \\\"%s\\\": %s\",\n\t\t\tlastFlushPosition = blockpos;", "partial_line": "stat", "completion": "static bool <|endoftext|>"}
{"context": "\t\tappendPQExpBufferStr(query,\n\t{\n\t\t\t\t\t\t  \"WHERE NOT proisagg\"\n\t\t\t\t\t\t  \"\\n  AND NOT EXISTS (SELECT 1 FROM pg_depend \"\n\t\tif (fout->remoteVersion >= 90500)", "partial_line": "if (dopt->", "completion": "if (dopt->binary_upgrade) <|endoftext|>"}
{"context": "\tSetCurrentRoleId(InvalidOid, false);\nInitializeSystemUser(const char *authn_id, const char *auth_method)\n\tconst char *sysuser = GetSystemUser();\n\t\tSetOuterUserId(userid, is_superuser);\n\telse", "partial_line": "role", "completion": "roleid = SessionUserId; <|endoftext|>"}
{"context": "\t_stringlist *sl;\n\tget_restricted_token();\n#if defined(WIN32)\n\t\t{\n\t\t\t\texit(0);", "partial_line": "puts(\"pg_regr", "completion": "puts(\"pg_regress (PostgreSQL) \" PG_VERSION); <|endoftext|>"}
{"context": "\t struct state **intermediates)\n\tassert(to != from);\t\t\t\n\t\treturn 0;\n\t{\t\t\t\t\t\t\t\n\t\tif (NISERR())", "partial_line": "freear", "completion": "freearc(nfa, a); <|endoftext|>"}
{"context": "\t\t\t\t\t\tnewname, get_rel_name(con->conrelid))));\n\t\t\t\t\t\t\t newname))\n\tCatalogTupleUpdate(conDesc, &tuple->t_self, tuple);\n\tInvokeObjectPostAlterHook(ConstraintRelationId, conId, 0);\nvoid", "partial_line": "ScanKeyDa", "completion": "ScanKeyData key[2]; <|endoftext|>"}
{"context": "\tfor (i = 0; i < mcv_nvalues; i++)\n\treturn selec;\nstatic Selectivity\n\tif (mcv_exists)\n\t\t{", "partial_line": "hist_selec", "completion": "hist_selec = inet_hist_value_sel(hist_values, hist_nvalues, <|endoftext|>"}
{"context": "static void move_to_ready_heap(TocEntry *pending_list,\nstatic void mark_dump_job_done(ArchiveHandle *AH,\nstatic void reduce_dependencies(ArchiveHandle *AH, TocEntry *te,\n{\n\topts->include_everything = true;", "partial_line": "opts->cparams.promptP", "completion": "opts->cparams.promptPassword = TRI_DEFAULT; <|endoftext|>"}
{"context": "{\n\tRelIdCacheEnt *idhentry;\n\tRelation\trelation;\n\twhile ((idhentry = (RelIdCacheEnt *) hash_seq_search(&status)) != NULL)\n\t\trelation = idhentry->reldesc;", "partial_line": "if (relation->rd_", "completion": "if (relation->rd_createSubid != InvalidSubTransactionId || <|endoftext|>"}
{"context": "\t\t\t\t\t compress->workers, ZSTD_getErrorName(ret));\n\tpg_fatal(\"this build does not support compression with %s\", \"ZSTD\");\n\t\t\t\t\t\t\t  mystreamer->zstd_outBuf.dst,\n\t\t\t\t\t\t ZSTD_getErrorName(yet_to_flush));\n\t\t\tmystreamer->zstd_outBuf.size = mystreamer->base.bbs_buffer.maxlen;", "partial_line": "mystreamer->zstd", "completion": "mystreamer->zstd_outBuf.pos = 0; <|endoftext|>"}
{"context": "\troot->plan_params = lappend(root->plan_params, pitem);\n\tAssert(phv->phlevelsup > 0 && phv->phlevelsup < root->query_level);\n}\nParam *\n\tfor (levelsup = agg->agglevelsup; levelsup > 0; levelsup--)", "partial_line": "pitem->i", "completion": "pitem->item = (Node *) agg; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tstrcpy(repltok, \"iso, dmy\");\n\t\t\t\t\t\t\t\t  dynamic_shared_memory_type, false);\n\tsnprintf(repltok, sizeof(repltok), \"%dkB\",\n\tsnprintf(repltok, sizeof(repltok), \"%dkB\",", "partial_line": "strcmp(authmethodhost, \"scra", "completion": "strcmp(authmethodhost, \"scram-sha-256\") != 0) || <|endoftext|>"}
{"context": "\t\t*varname = record->name;\n\t\t\t\t\tval = conf->show_hook();\n\t\t\t\t\telse\n\t\t\t\telse\n\t\t\t\t{", "partial_line": "recor", "completion": "record->flags & GUC_UNIT, <|endoftext|>"}
{"context": "\t\t\tedge_table[city1].edge_list[i] = 0 - city2;\n\t\t}\n}\n\tint\t\t\tgenes_remaining;\n{", "partial_line": "int\t\t\tmini", "completion": "int\t\t\tminimum_count = -1; <|endoftext|>"}
{"context": "\tswitch (scalarVal->type)\n\t{\n\t\t\tAssert(!is_key);\n\t\t\tbreak;\n\t\t\tcstr = numeric_normalize(scalarVal->val.numeric);", "partial_line": "return", "completion": "return item; <|endoftext|>"}
{"context": "{ 6, s_6_37, -1, 6, 0},\n{ 3, s_6_46, -1, 9, 0},\n{ 5, s_6_48, -1, 1, 0},\nstatic const symbol s_7_6[3] = { 'e', 'v', 'a' };\nstatic const symbol s_7_12[3] = { 'a', 'r', 'e' };", "partial_line": "static const symbol s_7_16[3]", "completion": "static const symbol s_7_16[3] = { 'a', 't', 'e' }; <|endoftext|>"}
{"context": "\tif (create_upper_paths_hook)\n\t\t(*create_upper_paths_hook) (root, UPPERREL_PARTIAL_DISTINCT,\n{\n\tPath\t   *cheapest_input_path = input_rel->cheapest_total_path;\n\tbool\t\tallow_hash;", "partial_line": "if (parse->gr", "completion": "if (parse->groupClause || parse->groupingSets || parse->hasAggs || <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   leafDatums,\n\t\t}\n\t\t\t\t\t\t\t\t   leafDatums,\n\t\t\tleafDatums[spgKeyColumn] = (Datum) 0;\n\t\t\t\t\t\t\t\t totalLeafSizes > SPGIST_PAGE_CAPACITY,", "partial_line": "leafSizes = (int *) palloc0(size", "completion": "leafSizes = (int *) palloc0(sizeof(int) * out.nNodes); <|endoftext|>"}
{"context": "\t\t{\"max_index_keys\", PGC_INTERNAL, PRESET_OPTIONS,\n\t\t\tGUC_NOT_IN_SAMPLE | GUC_DISALLOW_IN_FILE\n\t\t{\"block_size\", PGC_INTERNAL, PRESET_OPTIONS,\n\t\t},\n\t\t&block_size,", "partial_line": "BLCKSZ, B", "completion": "BLCKSZ, BLCKSZ, BLCKSZ, <|endoftext|>"}
{"context": "\t\t\ttable_close(pk_rel, RowShareLock);\n\t\t\t{\n\t\t\t\t\t\t\t(errcode(ERRCODE_FOREIGN_KEY_VIOLATION),\n\t\tquoteRelationName(pkrelname, pk_rel);\n\t\telse", "partial_line": "paramname", "completion": "paramname, fk_type, <|endoftext|>"}
{"context": "\t\t\tif (IsSubTransaction())\n\t\t\t\t\t\t\t\t\t\tInvalidXLogRecPtr,\n\t\t\t\t\t\t\t\t\t\tXL_ROUTINE(.page_read = logical_read_xlog_page,\n\t\telse if (snapshot_action == CRS_USE_SNAPSHOT)\n\t\t\t LSN_FORMAT_ARGS(MyReplicationSlot->data.confirmed_flush));", "partial_line": "dest = C", "completion": "dest = CreateDestReceiver(DestRemoteSimple); <|endoftext|>"}
{"context": "\t\t\t\ttmp = pgtypes_alloc(strlen(\"%I:%M:%S %p\") + strlen(pstr) + 1);\n\t\t\t\treturn err;\n\t\t\t\tscan_type = PGTYPES_TYPE_UINT_LONG;\n\t\t\t\t\tstruct tm  *tms;\n\t\t\t\t\t\t*month = tms->tm_mon + 1;", "partial_line": "pfmt", "completion": "pfmt++; <|endoftext|>"}
{"context": "\t\tcase T_JsonValueExpr:\n\t\t\t\tif (WALK(jve->raw_expr))\n\t\t\t\t\treturn true;\n\t\t\t\tJsonConstructorExpr *ctor = (JsonConstructorExpr *) node;\n\t\tcase T_CoerceToDomain:", "partial_line": "case", "completion": "case T_TargetEntry: <|endoftext|>"}
{"context": "#undef WALSTAT_ACC\n\t\thas_pending_data = true;\n\tif (flags & PGSTAT_BACKEND_FLUSH_WAL)\n\t\treturn false;\n\tPgStat_EntryRef *entry_ref;", "partial_line": "backend_has_io", "completion": "backend_has_iostats = false; <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"unrecognized GrantStmt.targtype: %d\",\n\t\t\t\t (int) stmt->targtype);\n\t\t\terrormsg = gettext_noop(\"invalid privilege type %s for relation\");\n\t\t\tbreak;\n\t\t\tall_privileges = ACL_ALL_RIGHTS_TYPE;", "partial_line": "all_privileg", "completion": "all_privileges = ACL_ALL_RIGHTS_FUNCTION; <|endoftext|>"}
{"context": "\tbool\t   *nulls = matchctx->nulls;\n\tloc = matchctx->next_match * matchctx->npatterns * 2;\n\t\tif (so < 0 || eo < 0)\n\t\telse if (buf)\n\t\t\t\t\t\t\t\t\t\t\t\t   eo - so);", "partial_line": "elems[i] = DirectFunc", "completion": "elems[i] = DirectFunctionCall3(text_substr, <|endoftext|>"}
{"context": "\tif (!OidIsValid(proc))\n\t\t\t\t\t\tpg_encoding_to_char(src_encoding),\n\t(void) OidFunctionCall6(proc,\n\t\t\t\t\t\t\tCStringGetDatum((char *) src),\n\t\tresult = (unsigned char *) repalloc(result, resultlen + 1);", "partial_line": "Int32G", "completion": "Int32GetDatum(srclen), <|endoftext|>"}
{"context": "\tip_family_maxbits(gk_ip_family(gkptr))\n\tSET_VARSIZE_SHORT(dst, offsetof(GistInetKey, ipaddr) + gk_ip_addrsize(dst))\ninet_gist_consistent(PG_FUNCTION_ARGS)\n\tif (gk_ip_family(key) == 0)\n\t{", "partial_line": "switch", "completion": "switch (strategy) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t fn,\n\tSubLink    *sublink;\n\tQuery\t   *qtree;\n\t\t\tsublink = (SubLink *) transformExprRecurse(pstate,\n\t\t\tif (count_nonjunk_tlist_entries(qtree->targetList) != maref->ncolumns)", "partial_line": "(errcode(ERRCODE_S", "completion": "(errcode(ERRCODE_SYNTAX_ERROR), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t ObjectIdGetDatum(namespaceId));\n\t\t\t\t\t\tNameListToString(conname))));\n}\n\t{\n\t\tif (OidIsValid(proc))", "partial_line": "retu", "completion": "return proc; <|endoftext|>"}
{"context": "\t\t.flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n};\nPLy_cursor_init_type(void)\n}\n{", "partial_line": "return", "completion": "return PLy_cursor_query(query); <|endoftext|>"}
{"context": "\telse\n\t\tif (case_insensitive)\n\t\t\t\t\t\t\t\t\t\t   system_user))\n\t\t\t\t\t\t\t  list_make1(identLine->pg_user),\n\t\t\t  const char *pg_user,", "partial_line": "if (usermap_name == NULL || use", "completion": "if (usermap_name == NULL || usermap_name[0] == '\\0') <|endoftext|>"}
{"context": "static void\ntransfer_single_new_db(FileNameMap *maps, int size, char *old_tablespace)\n\tif (old_cluster.controldata.cat_ver < VISIBILITY_MAP_FROZEN_BIT_CAT_VER &&\n\t\tAssert(!vm_must_add_frozenbit);\n\t\t\tstrcmp(maps[mapnum].old_tablespace, old_tablespace) == 0)", "partial_line": "transfer_relfile(&", "completion": "transfer_relfile(&maps[mapnum], \"_fsm\", vm_must_add_frozenbit); <|endoftext|>"}
{"context": "\tHeapTuple\tht_idx;\n\tForm_pg_class idxrelrec;\n\tForm_pg_index idxrec;\n\toidvector  *indclass;\n\tListCell   *indexpr_item;", "partial_line": "index->primary", "completion": "index->primary = idxrec->indisprimary; <|endoftext|>"}
{"context": "\t\t\tpfree(entry->list);\n\t\t\t\t\t\t\t\t\t\t ginstate->index,\n\t\tif (GinPageGetOpaque(page)->flags & GIN_DELETED)\n\t\t}\n\t\t\t\t{", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "#line 18 \"rnull.pgc\"\n decimal dec ;\n#line 22 \"rnull.pgc\"\n#line 23 \"rnull.pgc\"\n#line 24 \"rnull.pgc\"", "partial_line": "#line 27 \"", "completion": "#line 27 \"rnull.pgc\" <|endoftext|>"}
{"context": "\treturn result;\nstatic void\n\t\t\t   GinStatsData *buildStats)\n#endif\n\t\t\tif (GinPageIsIncompleteSplit(BufferGetPage(parent->buffer)))", "partial_line": "updateblkno = GinPageGetOpaque(Buffe", "completion": "updateblkno = GinPageGetOpaque(BufferGetPage(stack->buffer))->rightlink; <|endoftext|>"}
{"context": "\t\tDatum\t\tres = ExecEvalExpr(filter, econtext, &isnull);\n\t\tfcinfo->args[i].value = ExecEvalExpr(argstate, econtext,\n\t{\n\t\t{\n\t\t}", "partial_line": "&winstate->perfu", "completion": "&winstate->perfunc[peraggstate->wfuncno], <|endoftext|>"}
{"context": "\t\tif (!attr_isnull)\n\t\t\twith_check_pstate = make_parsestate(NULL);\n\t\t\tfree_parsestate(with_check_pstate);\n\t\t}\n\ttarget.objectSubId = 0;", "partial_line": "target.object", "completion": "target.objectSubId = 0; <|endoftext|>"}
{"context": "\t}\n\t\t\t   &btp->u.leaf_key[btp->hdr.nused],\n\t{\n}\nFreePageBtreeUpdateParentPointers(char *base, FreePageBtree *btp)", "partial_line": "child = relptr_ac", "completion": "child = relptr_access(base, btp->u.internal_key[i].child); <|endoftext|>"}
{"context": "\t\t\t\toff = 0;\n\t\t\t}\n\t\t\tif (off > boundinfo->ndatums - 1)\n\t\t\t\treturn result;\nstatic PruneStepResult *", "partial_line": "PartitionBoundI", "completion": "PartitionBoundInfo boundinfo = context->boundinfo; <|endoftext|>"}
{"context": "\tif (!pgStatLocal.snapshot.context)\n\tif (pgStatLocal.snapshot.mode == PGSTAT_FETCH_CONSISTENCY_SNAPSHOT)\n\t\tPgStatShared_Common *stats_data;\n\t\tif (p->dropped)\n\t\tLWLockRelease(&stats_data->lock);", "partial_line": "for (PgStat_Kind kind = PGSTAT_KIND_", "completion": "for (PgStat_Kind kind = PGSTAT_KIND_MIN; kind <= PGSTAT_KIND_MAX; kind++) <|endoftext|>"}
{"context": "\tnfa->parent = parent;\t\t\n\tnewarc(nfa, '^', 0, nfa->pre, nfa->init);\n\t\treturn NULL;\n}\nfreenfa(struct nfa *nfa)", "partial_line": "struct stateb", "completion": "struct statebatch *sbnext; <|endoftext|>"}
{"context": "\tbool\t\tcheckingunique = (checkUnique != UNIQUE_CHECK_NO);\n\titup_key = _bt_mkscankey(rel, itup);\n\t}\n\t\t\telse\n\t\t\tif (stack)", "partial_line": "goto sea", "completion": "goto search; <|endoftext|>"}
{"context": "\tdobj->ext_member = true;\n\t\tif (fout->remoteVersion < 90600)\n\treturn true;\n{\n\tif (table_include_oids.head != NULL)", "partial_line": "else if (fout->remoteVersion", "completion": "else if (fout->remoteVersion >= 90600 && <|endoftext|>"}
{"context": "\t\t\t\t\t.name = \"utf8_and_euc2004\",\n\t\t\t\t\t.version = PG_VERSION\n);\n\tint\t\t\tconverted;\n\tCHECK_ENCODING_CONVERSION_ARGS(PG_EUC_JIS_2004, PG_UTF8);", "partial_line": "convert", "completion": "converted = LocalToUtf(src, len, dest, <|endoftext|>"}
{"context": "\tfree(conn->scram_server_key);\n\t\tfor (int i = 0; i < conn->nconnhost; ++i)\n\t\t\tfree(conn->connhost[i].port);\n\t\t\t}\n{", "partial_line": "struct addrinfo *a", "completion": "struct addrinfo *ai = addrlist; <|endoftext|>"}
{"context": "\t\t\t\tXLogPrefetchIncrement(&SharedStats->hit);\n\t\t\t\treturn LRQ_NEXT_NO_IO;\n\t\t}\n#define PG_STAT_GET_RECOVERY_PREFETCH_COLS 10\n\tvalues[3] = Int64GetDatum(pg_atomic_read_u64(&SharedStats->skip_init));", "partial_line": "values[5] = In", "completion": "values[5] = Int64GetDatum(pg_atomic_read_u64(&SharedStats->skip_fpw)); <|endoftext|>"}
{"context": "\tOid\t\t\troleid = GetUserId();\n\t\t\t\t\t\t\t Relation rel,\n\ttrig.tgname = conname;\n\ttrig.tgconstraint = constraintOid;\n\tif (!hasperiod && RI_Initial_Check(&trig, rel, pkrel))", "partial_line": "snapshot = RegisterSnapshot(GetLat", "completion": "snapshot = RegisterSnapshot(GetLatestSnapshot()); <|endoftext|>"}
{"context": "} TransInvalidationInfo;\n#define MAX_SYSCACHE_CALLBACKS 64\n\tint16\t\tlink;\t\t\t\n{\n\tRelSyncCallbackFunction function;", "partial_line": "Datum", "completion": "Datum\t\targ; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  qdatname, dbCatId.oid);\n\t}\n\t\tif (strlen(collate) > 0)\n\t\t{\n\t\t\t\t\t\t\t  .section = SECTION_PRE_DATA,", "partial_line": "appendPQExpBuffer", "completion": "appendPQExpBufferStr(dbQry, \";\\n\"); <|endoftext|>"}
{"context": "\twhile (pending_rels != NIL)\n\t\tif (IsA(setOp, SetOperationStmt))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttop_union->all ? NULL : top_union,\n\tList\t   *tlist = NIL;\n\t\t\t   *cclc,", "partial_line": "Node", "completion": "Node\t   *expr; <|endoftext|>"}
{"context": "\treturn serialized;\n{\n\t\t\t   *dataptr;\n\tAssert(serialized->nvalues >= 0);\n\trange = minmax_multi_init(maxvalues);", "partial_line": "range->target_", "completion": "range->target_maxvalues = serialized->maxvalues; <|endoftext|>"}
{"context": "\t{\n\tif (port->raw_buf != NULL)\n\t\t\t\t\t\t\t port->peer_cn ? port->peer_cn : \"(anonymous)\")));\n#endif\nsecure_close(Port *port)", "partial_line": "if (port->", "completion": "if (port->ssl_in_use) <|endoftext|>"}
{"context": "\t\tdefault:\n\t\t\tstrcat(result, \", YMD\");\nassign_datestyle(const char *newval, void *extra)\n{\n\tpg_tz\t   *new_tz;", "partial_line": "doubl", "completion": "double\t\thours; <|endoftext|>"}
{"context": "        if (z->c <= z->lb || z->p[z->c - 1] >> 5 != 3 || !((1851426 >> (z->p[z->c - 1] & 0x1f)) & 1)) { z->lb = mlimit1; return 0; }\n        lab0:\n            {   int ret = slice_del(z);\n            break;\n            {   int ret = slice_from_s(z, 2, s_0);", "partial_line": "retur", "completion": "return 1; <|endoftext|>"}
{"context": "\t\tint\t\t\tminmatch,\n\t\tfor (morematch = maxmatch + 1; morematch <= DUPINF + 1; morematch++)\n}\nstatic bool\n\tbool\t\tresult = false;", "partial_line": "bool\t\tf", "completion": "bool\t\tfoundloop = false; <|endoftext|>"}
{"context": "static const symbol s_17_1[3] = { 'n', 'u', 'z' };\nstatic const symbol s_18_1[3] = { 't', 'i', 'r' };\n{ 3, s_18_2, -1, -1, 0},\nstatic const symbol s_20_3[3] = { 't', 'i', 'k' };\nstatic const symbol s_20_4[3] = { 'd', 'u', 'k' };", "partial_line": "static const symbol", "completion": "static const symbol s_20_5[3] = { 't', 'u', 'k' }; <|endoftext|>"}
{"context": "\t\t}\n\t\t\tchar\t\tc;\n\t\t\tend_ptr = cur_ptr;\n\t\t\t\tif (cur_ptr >= line_end_ptr)\n\t\t\t\t\t\t\tif (cur_ptr < line_end_ptr)", "partial_line": "if", "completion": "if (ISOCTAL(c)) <|endoftext|>"}
{"context": "\tinitPQExpBuffer(&user_specification);\n\tpg_log(PG_REPORT,\n\t\t\t   \"Running this script will delete the old cluster's data files:\\n\"\n\t\t\t   \"    %s\",\n\tprep_status(\"Checking cluster versions\");", "partial_line": "pg_fatal(\"This", "completion": "pg_fatal(\"This utility can only upgrade from PostgreSQL version %s and later.\", <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"GROUPING must have fewer than 32 arguments\"),\n\tresult->location = p->location;\ncheck_agglevels_and_constraints(ParseState *pstate, Node *expr)\n\tList\t   *directargs = NIL;\n\tList\t   *args = NIL;", "partial_line": "filter = agg->", "completion": "filter = agg->aggfilter; <|endoftext|>"}
{"context": "\titup = gistFormTuple(giststate, r, values, isnull, true);\n\treturn false;\n{\n\t\t\tnpage++;\n\t\t\tGISTInitBuffer(ptr->buffer, (is_leaf) ? F_LEAF : 0);", "partial_line": "in", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\tif (srvinfo->srvoptions && strlen(srvinfo->srvoptions) > 0)\n\t\t\t\t\t\t\t\t  .createStmt = q->data,\n\t\t\t\tNULL, srvinfo->rolname, &srvinfo->dacl);\n}\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);", "partial_line": "appendPQExpBuffer(tag, \"U", "completion": "appendPQExpBuffer(tag, \"USER MAPPING %s SERVER %s\", <|endoftext|>"}
{"context": "\tInterval   *result;\n\tresult = (Interval *) palloc(sizeof(Interval));\n\t\tereport(ERROR,\n\t\t\t\t errmsg(\"division by zero\")));\n\t\telse", "partial_line": "month_remainder_days = (orig_month / fa", "completion": "month_remainder_days = (orig_month / factor - result->month) * DAYS_PER_MONTH; <|endoftext|>"}
{"context": "\t\tcase XLOG_BTREE_DELETE:\n\t\t\tbtree_xlog_newroot(record);\n\t\t\tbreak;\n\t\tcase XLOG_BTREE_META_CLEANUP:\n\t\t\tbreak;", "partial_line": "Page", "completion": "Page\t\tpage = (Page) pagedata; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\"FORCE_QUOTE\", NameStr(attr->attname))));\n\t\tcstate->file_encoding == PG_SQL_ASCII)\n\tcstate->copy_dest = COPY_FILE;\t\n\t{\n\t\tprogress_vals[1] = PROGRESS_COPY_TYPE_PIPE;", "partial_line": "csta", "completion": "cstate->filename))); <|endoftext|>"}
{"context": "\telse\n\t\t\t*atttypcoll = exprCollation(expr);\n\trelation_close(rel, NoLock);\nstatic bool\n\telse", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t   -1,\t\t\t\n\t\t\t\t   InvalidOid); \n\t\t{\n\t}\n\t\t\t\t   TYPTYPE_MULTIRANGE,\t", "partial_line": "Invali", "completion": "InvalidOid, <|endoftext|>"}
{"context": "\t\t\t\t\t\t   ExplainState *es)\n\t\t\tif (es->format == EXPLAIN_FORMAT_TEXT)\n\t}\n\t\t{\n\t\t\tshow_incremental_sort_group_info(fullsortGroupInfo, \"Full-sort\",", "partial_line": "indent", "completion": "indent_first_line, es); <|endoftext|>"}
{"context": "\telse\n\t{\n\t\tErrorData  *edata = &errordata[errordata_stack_depth];\n{\n\tErrorData  *edata;", "partial_line": "for (econtext", "completion": "for (econtext = error_context_stack; <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\tList\t   *fields;\n\t\t\t\t\trowexpr = makeNode(RowExpr);\n\t\t\t\t\trowexpr->row_format = COERCE_IMPLICIT_CAST;\n\t\t\t}", "partial_line": "elog(ERROR, \"cannot tr", "completion": "elog(ERROR, \"cannot translate to multiple leaf relids\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tvoid *per_buffer_data)\n\tAssert(ScanDirectionIsForward(scan->rs_dir));\n\tif (unlikely(!scan->rs_inited))\n\t\t\t\t\t\t\t\t\t\t\t\t (ParallelBlockTableScanDesc) scan->rs_base.rs_parallel);\n\t}", "partial_line": "scan->rs_prefetch_block = heapgettu", "completion": "scan->rs_prefetch_block = heapgettup_initial_block(scan, scan->rs_dir); <|endoftext|>"}
{"context": "bool\n\tRangeBound\tupper1;\n\tRangeBound\tupper2;\n\tbool\t\tempty2;\n\telse if (empty1)", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\telse\n\t\t\t\t\t\t  \"FROM unnest('%s'::pg_catalog.oid[]) AS src(tbloid)\\n\"\n\t\t\t\t\t\t  \"JOIN pg_catalog.pg_class t2 ON (t2.oid = i.indrelid) \"\n\t{\n\t\t\t\t\t\t  \"JOIN pg_catalog.pg_index i ON (src.tbloid = i.indrelid) \"", "partial_line": "res = ExecuteSqlQuery(f", "completion": "res = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK); <|endoftext|>"}
{"context": "\t{\n\t\t\tQueuePartitionConstraintValidation(wqueue, part_rel,\n}\nATExecAttachPartition(List **wqueue, Relation rel, PartitionCmd *cmd,\n\t\t\t\tcatalog;", "partial_line": "ScanKeyData", "completion": "ScanKeyData skey; <|endoftext|>"}
{"context": "\t\t\telog(PANIC, \"invalid lp\");\n\t\thtup->t_infomask &= ~(HEAP_XMAX_BITS | HEAP_MOVED);\n}\nstatic void\n\tunion", "partial_line": "}", "completion": "}\t\t\ttbuf; <|endoftext|>"}
{"context": "{\n\t\t\t\txdigits_u[] = \"0123456789ABCDEF\";\n\t\t\t   *endp,\n\t\t\t   *curtok;\n\t\tif (*++src != ':')", "partial_line": "goto e", "completion": "goto enoent; <|endoftext|>"}
{"context": "\t\t\t\t\tLLVMValueRef v_fcinfo_isnull;\n\t\t\t\t\t\t\t\t\t\t\t\t\"b.%d.argsequal\", opno);\n\t\t\t\t\tv_argnull0 = l_funcnull(b, v_fcinfo, 0);\n\t\t\t\t\t\t\t\t\t\t\t\t  l_sbool_const(1), \"\"),\n\t\t\t\t\tLLVMBuildStore(b, v_arg0, v_resvaluep);", "partial_line": "if (op->d", "completion": "if (op->d.func.make_ro) <|endoftext|>"}
{"context": "\t\t\treturn \"bulkwrite\";\n\t\t\treturn \"init\";\n\t\t\treturn \"relation\";\n\telog(ERROR, \"unrecognized IOObject value: %d\", io_object);\n\tPgStatShared_IO *stat_shmem = (PgStatShared_IO *) stats;", "partial_line": "for (int i =", "completion": "for (int i = 0; i < BACKEND_NUM_TYPES; i++) <|endoftext|>"}
{"context": "\t\t\tslot[slot_stored_count]->tts_values[Anum_pg_ts_config_map_maptokentype - 1] = cfgmap->maptokentype;\n\t\t\tslot_stored_count++;\n\t\t\t\tCatalogTuplesMultiInsertWithInfo(mapRel, slot, slot_stored_count,\n\t\t\tExecDropSingleTupleTableSlot(slot[i]);\n\t}", "partial_line": "if (", "completion": "if (mapRel) <|endoftext|>"}
{"context": "\t\t\t\tpath = (Path *) create_upper_unique_path(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t dNumGroups);\n\t\t\t   *rrel;\n\t\t\t   *path;\n\t\t\t\tresult_trivial_tlist;", "partial_line": "List\t   *nonunion_pathk", "completion": "List\t   *nonunion_pathkeys = NIL; <|endoftext|>"}
{"context": "\tappendPQExpBufferStr(defqry, \");\\n\");\n\tappendPQExpBuffer(labelq, \"TRANSFORM FOR %s LANGUAGE %s\",\n\t\t\t\t\t  transformType, lanname);\n\tdestroyPQExpBuffer(defqry);\n{", "partial_line": "PQExpBuffer", "completion": "PQExpBuffer query; <|endoftext|>"}
{"context": "\t}\t\t\tsqlerrm;\n#line 4 \"indicators.pgc\"\n int intvar = 5 ;\n\t{ ECPGconnect(__LINE__, 0, \"ecpg1_regression\" , NULL, NULL , NULL, 0); }\n#line 22 \"indicators.pgc\"", "partial_line": "ECPGt_int,&(intvar)", "completion": "ECPGt_int,&(intvar),(long)1,(long)1,sizeof(int), <|endoftext|>"}
{"context": "\t\tfirstZeroPage = SerialPage(tailXid);\n\t\tserialControl->headPage = targetPage;\n\telse\n\tTransactionId headXid;\n\tTransactionId tailXid;", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\t\ti = Anum_pg_statistic_staop1 - 1;\n\t\t\t\tarry = construct_array_builtin(numdatums, nnum, FLOAT4OID);\n\t\t\t\t\t\t\t\t\t   stats->statyplen[k],\n\t\t\t}\n\tHeapTuple\thtup;", "partial_line": "elog(ER", "completion": "elog(ERROR, <|endoftext|>"}
{"context": "\t\t\t\tCoerceToDomain *ctest = (CoerceToDomain *) node;\n\t\t\t\tbreak;\n\t\t\t\tif (state->innermost_domainval == NULL)\n\t\t\t\t\tscratch.opcode = EEOP_DOMAIN_TESTVAL;\n\t\t\t\tscratch.opcode = EEOP_CURRENTOFEXPR;", "partial_line": "ExprEvalPushStep(sta", "completion": "ExprEvalPushStep(state, &scratch); <|endoftext|>"}
{"context": "    {   int ret = slice_del(z);\n        z->bra = z->c;\n    lab2:\n        z->bra = z->c;\n    if (z->c > z->lb) return 0;", "partial_line": "{   int ret = slic", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\telse\n\tncandidates = 0;\n\t\t}\n\tfor (i = 0; i < nargs; i++) \n\t\t{", "partial_line": "if (current_typeids[", "completion": "if (current_typeids[i] == input_base_typeids[i] || <|endoftext|>"}
{"context": "\t\treturn;\t\t\t\t\t\n\t\t\t\t\t\t\terrcode(ERRCODE_SYNTAX_ERROR),\n\t\t\t\t\terrmsg(\"table name \\\"%s\\\" specified more than once\",\n\tsave_next_resno = pstate->p_next_resno;\n\t\t\t\t\t\t\t\t\texprLocation(linitial(returningClause->exprs)))));", "partial_line": "Target", "completion": "TargetEntry *tle; <|endoftext|>"}
{"context": "\t{\n\t\t\treturn InvalidBuffer;\n\t\tLockBuffer(buf, BUFFER_LOCK_EXCLUSIVE);\n\t\tif (PageIsNew(BufferGetPage(buf)))\n\t\t\t\t\t\t\t   fsm_nblocks,", "partial_line": "RBM", "completion": "RBM_ZERO_ON_ERROR); <|endoftext|>"}
{"context": "\t\ttblinfo[i].reloftype = atooid(PQgetvalue(res, i, i_reloftype));\n\t\t\t\t\t\t\t\t   DUMP_COMPONENT_DATA |\n\t\ttblinfo[i].dobj.components |= DUMP_COMPONENT_DATA;\n\t\t{\n\t\t\t\t\t\t\t\t\t\t  tblinfo[i].relpages,", "partial_line": "PQgetvalue(r", "completion": "PQgetvalue(res, i, i_reltuples), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t (errcode(ERRCODE_NON_NUMERIC_SQL_JSON_ITEM),\n\t\t\t\t\tArrayType  *arrtypmod;\n\t\t\t\t\t\t\t\t\t\t\t (errcode(ERRCODE_NON_NUMERIC_SQL_JSON_ITEM),\n\t\t\t\t\t\t\tRETURN_ERROR(ereport(ERROR,\n\t\t\t\t\t}", "partial_line": "Invali", "completion": "InvalidOid, dtypmod, <|endoftext|>"}
{"context": "\t}\n\t\t\tif (!ParseVariableBool(value, NULL, &on_off))\n\t{\n\telse if (strcmp(param, \"columns\") == 0)\n\telse", "partial_line": "else if (st", "completion": "else if (strcmp(param, \"columns\") == 0) <|endoftext|>"}
{"context": "\tn_runtime_keys = max_runtime_keys = *numRuntimeKeys;\n\t{\n\t\tOid\t\t\topno;\t\t\n\t\tOid\t\t\top_lefttype;\t\n\t\t\tDatum\t\tscanvalue;", "partial_line": "leftop", "completion": "leftop = (Expr *) get_leftop(clause); <|endoftext|>"}
{"context": "\t\tif (path1->total_cost < path2->total_cost)\n\t\t\treturn +1;\n\t\t\treturn -1;\n\t\t\treturn +1;\n\t\t\treturn +1;", "partial_line": "if (c", "completion": "if (cost1 < cost2) <|endoftext|>"}
{"context": "\t\treturn;\n\ttypeStruct = (Form_pg_type) GETSTRUCT(typeTuple);\n\t\tcase IOFunc_output:\n\t\t\t*func = typeStruct->typoutput;\n\t\t\tbreak;", "partial_line": "#ifdef", "completion": "#ifdef NOT_USED <|endoftext|>"}
{"context": "\t\t\tloc = exprLocation((Node *) ((const FieldStore *) expr)->arg);\n\t\t\t\t\t\t\t\t  exprLocation((Node *) rexpr->arg));\n\t\t\t{\n\t\t\t\t\t\t\t\t  exprLocation((Node *) cexpr->arg));\n\t\t\tbreak;", "partial_line": "loc = ((const MinMaxExpr *", "completion": "loc = ((const MinMaxExpr *) expr)->location; <|endoftext|>"}
{"context": "\t\t\t\tE_WALK(rstmt->expr);\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\t{\n\t\t\t\tPLpgSQL_stmt_raise *rstmt = (PLpgSQL_stmt_raise *) stmt;", "partial_line": "E_WALK", "completion": "E_WALK(dstmt->query); <|endoftext|>"}
{"context": "\t\t\telmbyval = false;\n\t\t\tbreak;\n\t\tcase XIDOID:\n\t\t\telog(ERROR, \"type %u not supported by construct_array_builtin()\", elmtype);\n\t\t\telmbyval = false;", "partial_line": "construct_md_arr", "completion": "construct_md_array(Datum *elems, <|endoftext|>"}
{"context": "Datum\n\t\t\t\t\t\t\t\t\t\t   strlen(NameStr(*n)),\n\ttext\t   *p = PG_GETARG_TEXT_PP(1);\n\t\t\t\t\t\t\t\t\t\t   VARDATA_ANY(s),\n\t\t\t\t\t\t\t\t\t\t   VARSIZE_ANY_EXHDR(s),", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\tfor (int rowno = 0; rowno < ntups; rowno++)\n\t\t\t\tPQgetvalue(res, rowno, i_reloid),\n\tPGconn\t   *conn_template1 = connectToServer(cluster, \"template1\");\n\tUpgradeTaskReport report;\n\t}", "partial_line": "report.fi", "completion": "report.file = NULL; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t   varname);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}", "partial_line": "stati", "completion": "static bool <|endoftext|>"}
{"context": "\t\tif (clause_ec != pathkey_ec)\n\t\telse\npathkeys_useful_for_merging(PlannerInfo *root, RelOptInfo *rel, List *pathkeys)\n{\n}", "partial_line": "ListCel", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "\tDatum\t\tamount = PG_GETARG_DATUM(0);\n\tfpoint = lconvert->frac_digits;\n\tfor (i = 0; i < fpoint; i++)\n\t\tscale *= 10;\n\tamount = DirectFunctionCall2(numeric_mul, amount, numeric_scale);", "partial_line": "int64\t\tsc", "completion": "int64\t\tscale; <|endoftext|>"}
{"context": "{\n\telse\n{\n\tcn.raddr = raddr;\n\t\tereport(LOG,", "partial_line": "erepo", "completion": "ereport(elevel, \\ <|endoftext|>"}
{"context": "\t\treturn false;\n\t\t\t\t\t\t\t\tpg_enc2gettext_tbl[encoding]) != NULL)\n}\npg_bind_textdomain_codeset(const char *domainname)\n\t\tif (encoding != PG_SQL_ASCII &&", "partial_line": "raw_pg_bind_tex", "completion": "raw_pg_bind_textdomain_codeset(domainname, encoding)) <|endoftext|>"}
{"context": "\t\t\ttotaltups++;\nvoid\n\tint\t\t\twas_load_failure = false;\n\tFILE\t   *script = NULL;\n\t\t\t log_opts.basedir, \"loadable_libraries.txt\");", "partial_line": "sizeof(LibraryInfo), libr", "completion": "sizeof(LibraryInfo), library_name_compare); <|endoftext|>"}
{"context": "\t\t\t\t\t\t Path *subpath,\n\tpathnode->path.parent = rel;\n\tpathnode->path.pathtarget = subpath->pathtarget;\n\tpathnode->path.param_info = NULL;\n\tpathnode->path.disabled_nodes = subpath->disabled_nodes;", "partial_line": "pathnode->path.startup_cost = s", "completion": "pathnode->path.startup_cost = subpath->startup_cost; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\treturn false;\n}\n\t{\n\t\t\t\treturn TM_Invisible;", "partial_line": "Inva", "completion": "InvalidTransactionId); <|endoftext|>"}
{"context": "{\n\t\t\treturn lseg_inside_poly(b, s->p + 1, poly, start);\n{\n\tfor (i = start; i < poly->npts && res; i++)\n\t\t{", "partial_line": "res = touched_lseg", "completion": "res = touched_lseg_inside_poly(t.p + 1, t.p, &s, poly, i + 1); <|endoftext|>"}
{"context": "\t\t\tint\t\t\tj;\n#ifdef SHA2_UNROLL_TRANSFORM\n\t(d) += T1;\t\t\t\t\t\t\t\t\\\n\tuint64\t\tT1,\n\tj = 0;", "partial_line": "ROUND512_0_T", "completion": "ROUND512_0_TO_15(e, f, g, h, a, b, c, d); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tInvalidOid, InvalidOid, InvalidOid))\n\t\t\t\t\t\t\t\t\t\t\tcontuple, recurse, &otherrelids,\nstatic bool\n\tcurrcon = (Form_pg_constraint) GETSTRUCT(contuple);\n\tAssert(currcon->contype == CONSTRAINT_FOREIGN);", "partial_line": "AlterConstrUpdateConstraintEntry(cmdcon,", "completion": "AlterConstrUpdateConstraintEntry(cmdcon, conrel, contuple); <|endoftext|>"}
{"context": "\twalsnd->state = state;\nstatic const char *\n\t\tcase WALSNDSTATE_STREAMING:\noffset_to_interval(TimeOffset offset)\n\treturn result;", "partial_line": "XLogRecPtr\tsen", "completion": "XLogRecPtr\tsent_ptr; <|endoftext|>"}
{"context": "}\n\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),\n\t\t\t\t\t\t   attr, sanitize_char(*begin))));\n\t\t\t\t errmsg(\"malformed SCRAM message\"),\n\t{", "partial_line": "*input", "completion": "*input = end; <|endoftext|>"}
{"context": "errstart(int elevel, const char *domain)\n\tErrorData  *edata;\n\tbool\t\toutput_to_server;\n\t\tif (CritSectionCount > 0)\n\toutput_to_client = should_output_to_client(elevel);", "partial_line": "if (elevel < ERROR && !output_to_server &&", "completion": "if (elevel < ERROR && !output_to_server && !output_to_client) <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t generate_qualified_type_name(conForm->contypid),\n\t\tcase CONSTRAINT_FOREIGN:\n\t\t\t\t\t\tbreak;\n\t\t\t\tappendStringInfoString(&buf, string);", "partial_line": "string", "completion": "string = \"RESTRICT\"; <|endoftext|>"}
{"context": "IsToastClass(Form_pg_class reltuple)\nbool\n{\n\treturn (namespaceId == PG_TOAST_NAMESPACE) ||\n\t\t\tname[1] == 'g' &&", "partial_line": "name", "completion": "name[2] == '_'); <|endoftext|>"}
{"context": "\tcontext.sublevels_up = 1;\n\t\treturn NULL;\n\t\t\t\t\t\t\t\t\t\t\t 0);\n\t\tcontext->sublevels_up--;\n\tif (IsA(node, Param))", "partial_line": "result = copyObject(list_nth(context->args, p", "completion": "result = copyObject(list_nth(context->args, param->paramid - 1)); <|endoftext|>"}
{"context": "box_diagonal(PG_FUNCTION_ARGS)\n\tPG_RETURN_LSEG_P(result);\n}\n{\n\tif (*s++ != DELIM)", "partial_line": "while (isspace((u", "completion": "while (isspace((unsigned char) *s)) <|endoftext|>"}
{"context": "\t\tpairingheap_add(&RegisteredSnapshots, &FirstXactSnapshot->ph_node);\n\tAssert(snapshot != InvalidSnapshot);\n\tnewsnap->snapXactCompletionCount = 0;\n\t{\n\t\tmemcpy(newsnap->subxip, snapshot->subxip,", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "#include \"optimizer/optimizer.h\"\n#define PARALLEL_SEQSCAN_NCHUNKS\t\t\t2048\nchar\t   *default_table_access_method = DEFAULT_TABLE_ACCESS_METHOD;\n\t}", "partial_line": "relation->rd_rel->relk", "completion": "relation->rd_rel->relkind == RELKIND_PARTITIONED_TABLE); <|endoftext|>"}
{"context": "\tTcl_CreateObjCommand(interp, \"argisnull\",\n\t\t\t\t\t\t pltcl_subtransaction, NULL, NULL);\n\t\tinterp_desc->interp = interp;\n\tPG_CATCH();\n\telse", "partial_line": "pltcl_init_interp(interp_desc,", "completion": "pltcl_init_interp(interp_desc, prolang, pltrusted); <|endoftext|>"}
{"context": "\treturn p;\nFreePageBtreeFindRightSibling(char *base, FreePageBtree *btp)\n\t\t}\n\t\tAssert(p->hdr.magic == FREE_PAGE_INTERNAL_MAGIC);\nFreePageBtreeFirstKey(FreePageBtree *btp)", "partial_line": "return btp->u.intern", "completion": "return btp->u.internal_key[0].first_page; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase 'j':\n\t\t\tcase 'n':\n\t\t\t\tobjfilter |= OBJFILTER_SCHEMA;\n\t\t\t\tsimple_string_list_append(&objects, optarg);", "partial_line": "objfilter |= OBJFIL", "completion": "objfilter |= OBJFILTER_SCHEMA_EXCLUDE; <|endoftext|>"}
{"context": "\t\t\t\tAddrInfo\ttemp = conn->addr[j];\n\t\t}\n\tif (reset_connection_state_machine)\n\t{\n\t}", "partial_line": "#define ENCRYPTION_NEG", "completion": "#define ENCRYPTION_NEGOTIATION_FAILED(msg) \\ <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\t\ttotal_width += VARSIZE_ANY(DatumGetPointer(value));\n\t\t\t{\n\t\t\t}\n\t\t\ttotal_width += strlen(DatumGetCString(value)) + 1;", "partial_line": "firs", "completion": "firstcount1 = track_cnt; <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tif (cstack != NULL && !conditional_active(cstack))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tbuf[0] = '\\0';\n\t\t\t\t\t\t\t\tbreak;", "partial_line": "buf", "completion": "buf[0] = '?'; <|endoftext|>"}
{"context": "\tPoint\t   *pa = *(Point **) a;\n\tif (pa->y == pb->y)\n\tint\t\t\ti;\n\tPoint\t   *centroid;\n\tout->prefixDatum = PointPGetDatum(centroid);", "partial_line": "Point", "completion": "Point\t   *centroid; <|endoftext|>"}
{"context": "\tJsonbValue\tv;\n\t{\n\tif (idx < 0)\n\t\t\t\t\t\t errmsg(\"path element at position %d is out of range: %d\",\n\t}", "partial_line": "if (op_type & JB_", "completion": "if (op_type & JB_PATH_FILL_GAPS && nelems == 0 && idx > 0) <|endoftext|>"}
{"context": "\tfound = (HeapTupleIsValid(systable_getnext(conscan)));\n}\n{\n\tint\t\t\tpass = 0;\n\t\t}", "partial_line": "Relation\tpg", "completion": "Relation\tpg_constraint; <|endoftext|>"}
{"context": "\tif (PQsendQueryParams(conn, \"SELECT $1\", 1, dummy_param_oids,\n\tif (PQpipelineSync(conn) != 1)\n\t\t\t\t PQresStatus(PQresultStatus(res)));\n\tif (PQgetResult(conn) != NULL)\n\t\tpg_fatal(\"Unexpected result code %s instead of sync result, error: %s\",", "partial_line": "PQer", "completion": "PQerrorMessage(conn)); <|endoftext|>"}
{"context": "\t\t\tNULL,\n\t\t\tGUC_UNIT_MS\n\t\t60 * 1000, 0, INT_MAX,\n\t\tNULL, NULL, NULL\n\t{", "partial_line": "{\"max_connection", "completion": "{\"max_connections\", PGC_POSTMASTER, CONN_AUTH_SETTINGS, <|endoftext|>"}
{"context": "}\nCreateCachedPlan(RawStmt *raw_parse_tree,\n\tplansource->param_types = NULL;\n\tplansource->query_context = NULL;\n\tplansource->is_valid = false;", "partial_line": "MemoryCont", "completion": "MemoryContext oldcxt; <|endoftext|>"}
{"context": "\t\t\t\t\tdo_now = false;\n\t\t\t\t\t\tnext_work_item->desc, next_work_item->tag);\n\t\t\treduce_dependencies(AH, next_work_item, NULL);\n\tif (AH->public.ropt->txn_size > 0)\n\t\tCommitTransaction(&AH->public);", "partial_line": "AH->currTablesp", "completion": "AH->currTablespace = NULL; <|endoftext|>"}
{"context": "\t\t\tupper.lower = false;\n\t\t\t\t\t\t\t\t\t\t\t  1, &constrange);\n\telse if (operator == OID_RANGE_OVERLAPS_MULTIRANGE_OP ||\n\t\t\t operator == OID_RANGE_CONTAINS_MULTIRANGE_OP ||\n\tif (constmultirange)", "partial_line": "case OID_MULTIRANGE_OVERL", "completion": "case OID_MULTIRANGE_OVERLAPS_LEFT_RANGE_OP: <|endoftext|>"}
{"context": "bool\ndescribeRoleGrants(const char *pattern, bool showSystem)\n\tPQExpBufferData buf;\n\tinitPQExpBuffer(&buf);\n\t\t\t\t\t\t\t \"    CASE WHEN pam.set_option THEN 'SET' END\\n\");", "partial_line": "\"     LEFT JOIN pg_catalog.pg_roles r ON (pa", "completion": "\"     LEFT JOIN pg_catalog.pg_roles r ON (pam.roleid = r.oid)\\n\" <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\tOid\t\t\ttransformid;\n\t\t\ttrfoids_list = lappend_oid(trfoids_list, transformid);\n\t\t}\n\t\t\t\t\t\t\t\t\t  &parameterTypes,", "partial_line": "if (", "completion": "if (stmt->is_procedure) <|endoftext|>"}
{"context": "static void\n\tAssert(rec->erh == NULL);\t\n\tif (rec->rectypeid == RECORDOID)\n}\n\tbool\t\ttypIsVarlena;", "partial_line": "re", "completion": "return result; <|endoftext|>"}
{"context": "{ 3, s_6_46, -1, 9, 0},\n{ 4, s_6_49, -1, 1, 0},\n{ 4, s_6_50, -1, 1, 0}\nstatic const symbol s_7_5[3] = { 'a', 'v', 'a' };\nstatic const symbol s_7_11[4] = { 'e', 'n', 'd', 'e' };", "partial_line": "static const symbol", "completion": "static const symbol s_7_14[3] = { 'i', 'r', 'e' }; <|endoftext|>"}
{"context": "\t\tsize_t\t\thlen = strlen(actual_hostname);\n\tif (!port->remote_hostname)\n\t{\n\t\tport->remote_hostname_errcode = ret;\n\t\t\t\t\t\t   (struct sockaddr_in6 *) &port->raddr.addr))", "partial_line": "elog(DEBUG2, \"pg_hba.conf host name \\\"%s\\\" rejected because address resolution did not ret", "completion": "elog(DEBUG2, \"pg_hba.conf host name \\\"%s\\\" rejected because address resolution did not return a match with IP address of client\", <|endoftext|>"}
{"context": "\tif (!found)\n\t{\n\t\t\tio_worker_control->workers[i].latch = NULL;\n\tnew_head = (queue->head + 1) & (queue->size - 1);\n\tif (queue->tail == queue->head)", "partial_line": "head = io_worker_sub", "completion": "head = io_worker_submission_queue->head; <|endoftext|>"}
{"context": "\t\t}\n\t\tListCell   *subtlistl;\n\t\t\tTargetEntry *subtle = (TargetEntry *) lfirst(subtlistl);\n\t\t\t}\n\t\t\t ref_tl_item, refnames_tlist)", "partial_line": "res", "completion": "resno, <|endoftext|>"}
{"context": "\tif (segp == NULL)\n}\n\treturn pg_ceil_log2_64(num);\n}\nstatic int\tnum_seq_scans = 0;", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "{ 4, s_4_30, 29, 2, 0},\n{ 4, s_4_31, 29, 2, 0},\n{ 4, s_4_33, 32, 2, 0},\n{ 4, s_4_34, 32, 2, 0},\n{ 4, s_4_36, -1, 1, 0},", "partial_line": "{ 2, s_4_38, -1,", "completion": "{ 2, s_4_38, -1, 1, 0}, <|endoftext|>"}
{"context": "\t}\n\t\t{\n\t\t\t\t\t\t\t\t   0);\n\t\t\tnumNotReportedDbs++;\n\t\treturn false;", "partial_line": "appendStringInfo(", "completion": "appendStringInfo(&descs, ngettext(\"\\nand %d other object \" <|endoftext|>"}
{"context": "\telse\n\t{\n\t\telse if (aliaslc)\n\t\t\talias->colnames = lappend(alias->colnames, attrname);\n\t\t}", "partial_line": "attrname = makeString(", "completion": "attrname = makeString(pstrdup(NameStr(attr->attname))); <|endoftext|>"}
{"context": "\t}\n\t*targets = *targets_contain_srfs = NIL;\n\t\t\t lc2, context.level_input_vars,\n\t\t\t lc3, context.level_input_srfs)\n\t\t\t\t\t\t  lnext(context.level_input_vars, lc2))", "partial_line": "split_pathtarg", "completion": "split_pathtarget_walker(Node *node, split_pathtarget_context *context) <|endoftext|>"}
{"context": "\t\tagginfo[i].aggfn.nargs = atoi(PQgetvalue(res, i, i_pronargs));\n\t\tif (agginfo[i].aggfn.nargs == 0)\n\t\tagginfo[i].aggfn.postponed_def = false; \n\t\tselectDumpableObject(&(agginfo[i].aggfn.dobj), fout);\n\tPGresult   *res;", "partial_line": "in", "completion": "int\t\t\tntups; <|endoftext|>"}
{"context": "\tforeach(l, root->join_info_list)\n\t\tif (sjinfo->jointype == JOIN_FULL)\n\t\tif (bms_is_subset(sjinfo->min_lefthand, rel1->relids) &&\n\t\t\tresult = true;\n\t\t\tbms_is_subset(sjinfo->min_righthand, rel1->relids))", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "#include \"access/xloginsert.h\"\n\tOffsetNumber nowdead[MaxHeapTuplesPerPage];\nstatic void heap_prune_chain(Page page, BlockNumber blockno, OffsetNumber maxoff,\nstatic void heap_prune_record_redirect(PruneState *prstate,\n\t\t\t\t\t\t\t\t\t   OffsetNumber offnum, OffsetNumber rdoffnum,", "partial_line": "static void heap_prune_re", "completion": "static void heap_prune_record_dead_or_unused(PruneState *prstate, OffsetNumber offnum, <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tif (widthpos >= 0)\n\t\t\t\tchar\t   *str;\n\t\t}\n\t\tif (argpos > 0)", "partial_line": "typid = get_fn_expr_argtype(f", "completion": "typid = get_fn_expr_argtype(fcinfo->flinfo, arg); <|endoftext|>"}
{"context": "\t\t}\n\t}\n\tsigaddset(&UnBlockSig, SIGURG);\n\t\telog(FATAL, \"signalfd() failed\");\n\tReserveExternalFD();", "partial_line": "sz += MAXALIGN(sizeof(", "completion": "sz += MAXALIGN(sizeof(WaitEvent) * nevents); <|endoftext|>"}
{"context": "static Oid\tdistinct_col_search(int colno, List *colnos, List *opids);\n\t\t\t\t\t\t\t\t   Relids outerrelids,\n\t\t\t\t\t\t\t\t   List *restrictlist,\n\tif (sjinfo->jointype != JOIN_LEFT)\n\t\tif (!bms_is_subset(innerrel->attr_needed[attroff], inputrelids))", "partial_line": "cont", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\t\tSwitchIntoArchiveRecovery(xlogreader->EndRecPtr, replayTLI);\n\tint\t\t\tr;\n\t{\n\t\t\t}\n\t\treadFile = -1;", "partial_line": "XLByteToSeg(targetPage", "completion": "XLByteToSeg(targetPagePtr, readSegNo, wal_segment_size); <|endoftext|>"}
{"context": "pathkeys_useful_for_merging(PlannerInfo *root, RelOptInfo *rel, List *pathkeys)\n{\n}\n\tListCell   *l;\n\tint\t\t\tn = 0;", "partial_line": "r", "completion": "return 0; <|endoftext|>"}
{"context": "\t\t\t\t\tList\t   *fields;\n\t\t\t\t\trowexpr = makeNode(RowExpr);\n\t\t\t\t\trowexpr->row_format = COERCE_IMPLICIT_CAST;\n\t\t\t}\n\t\t\t\t\t\telog(ERROR, \"cannot translate to multiple leaf relids\");", "partial_line": "var->va", "completion": "var->varno = leaf_relid; <|endoftext|>"}
{"context": "\t\t\tpwd_to_send = password;\n\t\t\t\t\t   pwd_to_send, strlen(pwd_to_send) + 1);\nstatic bool\n\t\t{\n\t\tswitch (areq)", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tPQclear(res);\n}\n\t\t\t\tstartpos_xrecoff;\n\t\treturn false;\n\t\t\t   &startpos_xrecoff) != 2)", "partial_line": "sta", "completion": "static PGresult * <|endoftext|>"}
{"context": "\tif (isDependentType)\n\telse\n\t\tif (typform->typisdefined)\n\t\ttup = heap_modify_tuple(tup,\n\t\t\t\t\t\t\t\tRelationGetDescr(pg_type_desc),", "partial_line": "typeObjectId = binary_upgrade_ne", "completion": "typeObjectId = binary_upgrade_next_pg_type_oid; <|endoftext|>"}
{"context": "\tqry->hasTargetSRFs = pstate->p_hasTargetSRFs;\n\t\t\t\t\t\t\t false, true, false,\n\tif (require_hash && (rescoltype == RECORDOID || rescoltype == RECORDARRAYOID))\n\tgrpcl->hashable = hashable;\n{", "partial_line": "parser_errposit", "completion": "parser_errposition(pstate, <|endoftext|>"}
{"context": "\t\t\tsets_data = list_concat(sets_data, rollup->gsets_data);\n\t\t}\n\t\t\t{\n\t\t\t\trollup->gsets_data = list_make1(gs);\n\t\t\trollup->gsets_data = empty_sets_data;", "partial_line": "new_roll", "completion": "new_rollups = lappend(new_rollups, rollup); <|endoftext|>"}
{"context": "\tcontext->isReset = false;\n\t\treturn NULL;\n\tif ((flags & MCXT_ALLOC_ZERO) != 0)\nHandleLogMemoryContextInterrupt(void)\nvoid", "partial_line": "LogMemoryContext", "completion": "LogMemoryContextPending = false; <|endoftext|>"}
{"context": "SetQuitSignalReason(QuitSignalReason reason)\n{\nQuitSignalReason\n}\n\tif (PMSignalState->PMChildFlags[slot] != PM_CHILD_UNUSED)", "partial_line": "MarkPostmasterChildSlotUn", "completion": "MarkPostmasterChildSlotUnassigned(int slot) <|endoftext|>"}
{"context": "strlower_libc_sb(char *dest, size_t destsize, const char *src, ssize_t srclen,\n\t\tlocale_t\tloc = locale->info.lt;\n\t\tif (srclen + 1 > destsize)\n\t\tmemcpy(dest, src, srclen);\n\t\tdest[srclen] = '\\0';", "partial_line": "if (locale->i", "completion": "if (locale->is_default) <|endoftext|>"}
{"context": "static void\n\tchar\t\txlogstart[64];\n\tchar\t\txlogend[64] = {0};\n\t{\n\t\tpg_log_error_hint(\"Use -X none or -X fetch to disable log streaming.\");", "partial_line": "in", "completion": "int\t\t\tfd; <|endoftext|>"}
{"context": "\t\t\tOid\t\t\topfamily = rel->rd_opfamily[attno_skip - 1];\n\t\t\tOid\t\t\teq_op = skip_eq_ops[attno_skip - 1];\n\t\t\t\tAssert(inkey->sk_strategy == BTEqualStrategyNumber ||\n\t\t\t\t\t   (inkey->sk_flags & SK_SEARCHNULL));\n\t\t\tif (!RegProcedureIsValid(cmp_proc))", "partial_line": "SK_SEARCHARRAY", "completion": "SK_SEARCHARRAY | SK_BT_SKIP, <|endoftext|>"}
{"context": "\t\t\tdumpIndexAttach(fout, (const IndexAttachInfo *) dobj);\n\t\t\tbreak;\n\t\t\tdumpProcLang(fout, (const ProcLangInfo *) dobj);\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "dumpForeig", "completion": "dumpForeignDataWrapper(fout, (const FdwInfo *) dobj); <|endoftext|>"}
{"context": "Datum\n{\n\tDatum\t\tquery = PG_GETARG_DATUM(1);\n{\n\tuint32\t\tix = ieee_float32_to_uint32(x);", "partial_line": "n = (n | (n << 16)) & UINT64CONS", "completion": "n = (n | (n << 16)) & UINT64CONST(0x0000FFFF0000FFFF); <|endoftext|>"}
{"context": "static void\n}\n\treturn edata->cursorpos;\n\treturn edata->internalpos;\n{", "partial_line": "MemoryContex", "completion": "MemoryContext oldcontext; <|endoftext|>"}
{"context": "\tvoid\t   *state;\n\tupdate_stats = reltuples >= 0 && !IsBinaryUpgrade;\n\t{\n\t\t\tvisibilitymap_count(rel, &relallvisible, &relallfrozen);\n\tScanKeyInit(&key[0],", "partial_line": "if (!HeapTupleIsVali", "completion": "if (!HeapTupleIsValid(tuple)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\tdatum2, isnull2,\n\t\t\t\t\t\t\t\t\t  datum2, isnull2,\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\tstup->datum1 = heap_getattr(&htup,\n\t\t\t\t\t\t\t\t&stup->isnull1);", "partial_line": "TuplesortClusterArg *arg = (Tu", "completion": "TuplesortClusterArg *arg = (TuplesortClusterArg *) base->arg; <|endoftext|>"}
{"context": "gistDeCompressAtt(GISTSTATE *giststate, Relation r, IndexTuple tuple, Page p,\n{\n\t\tDatum\t\tdatum;\n\t\tgistMakeUnionKey(giststate, i,\n\t\t\tcontinue;", "partial_line": "!gistKeyIsEQ(giststate, i, oldentries[", "completion": "!gistKeyIsEQ(giststate, i, oldentries[i].key, attr[i])) <|endoftext|>"}
{"context": "\t\tnew_groupclause = lappend(new_groupclause, gc);\n{\n\tList\t   *result = NIL;\n\tBitmapset **set_masks;\n\tint\t\t\tj_size;", "partial_line": "ListCell", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t plpgsql_build_datatype(TEXTOID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNULL),\n\t\t\t((PLpgSQL_var *) var)->promise = PLPGSQL_PROMISE_TG_OP;\n\t\t\t\t\t\t\t\t\t\t true);\n\t\t\tAssert(var->dtype == PLPGSQL_DTYPE_VAR);", "partial_line": "plpgsql_build_d", "completion": "plpgsql_build_datatype(NAMEOID, <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\tconst char **errstr)\n\tuint8\t\texpected_ServerSignature[SCRAM_MAX_KEY_LEN];\n\tctx = pg_hmac_create(state->hash_type);\n\t\tmemcpy(ServerKey, state->conn->scram_server_key_binary, SCRAM_MAX_KEY_LEN);", "partial_line": "return fa", "completion": "return false; <|endoftext|>"}
{"context": "\treturn true;\n\tdclist_head *waitQueue = &lock->waitProcs;\n\tdclist_foreach(proc_iter, waitQueue)\n\t{\n#endif", "partial_line": "StringInfoD", "completion": "StringInfoData logbuf; <|endoftext|>"}
{"context": "\t\t\t\tif (lstat(XLOG_CONTROL_FILE, &statbuf) != 0)\n\t\t\t{\n\t\t\t\tsendTablespace(sink, ti->path, ti->oid, false, &manifest, ib);\n\t\t\tif (opt->includewal && ti->path == NULL)\n\t\t\t{", "partial_line": "bbsink_end", "completion": "bbsink_end_archive(sink); <|endoftext|>"}
{"context": "\t\tclassForm = (Form_pg_aggregate) GETSTRUCT(tup);\n\t\t\tif (!agg_within_group)\n\t\t\tAssert(numDirectArgs >= 0);\n\t\t\t\t\t\t\t errhint_plural(\"There is an ordered-set aggregate %s, but it requires %d direct argument, not %d.\",\n\t\t\telse", "partial_line": "int\t\t\tp", "completion": "int\t\t\tpronargs; <|endoftext|>"}
{"context": "    {   int ret = slice_del(z);\n    }\n            if (ret < 0) return ret;\n        z->c = z->l - m3;\n    z->c = z->lb;", "partial_line": "return", "completion": "return 1; <|endoftext|>"}
{"context": "static const struct among a_1[130] =\n{ 5, s_1_3, -1, 13, 0},\n{ 5, s_1_5, -1, 15, 0},\n{ 5, s_1_22, -1, 60, 0},\n{ 5, s_1_26, -1, 67, 0},", "partial_line": "{ 6, s_1_", "completion": "{ 6, s_1_29, -1, 23, 0}, <|endoftext|>"}
{"context": "static const symbol s_5[] = { 'g' };\nstatic const symbol s_9[] = { 'a', 'r', 'c' };\n    z->I[2] = z->l;\n        }\n            int ret = in_grouping(z, g_v, 97, 250, 1);", "partial_line": "z->c", "completion": "z->c += ret; <|endoftext|>"}
{"context": "LogicalTapeSeek(LogicalTape *lt, int64 blocknum, int offset)\n{\n\tif (lt->buffer == NULL)\n\t\tltsInitReadBuffer(lt);\n\t\tlt->nbytes = TapeBlockPayloadSize;", "partial_line": "if (offset > lt-", "completion": "if (offset > lt->nbytes) <|endoftext|>"}
{"context": "\tstruct addrinfo *ai = addrlist;\n\t\tconn->addr[i].family = ai->ai_family;\n\t}\n{\n\tconn->xactStatus = PQTRANS_IDLE;", "partial_line": "conn->pipelineStatus = PQ_P", "completion": "conn->pipelineStatus = PQ_PIPELINE_OFF; <|endoftext|>"}
{"context": "{\n\ttuplesort_putdatum(state->tuplesort, Int64GetDatum(encoded), false);\n\t\tcase INDEX_CREATE_SET_VALID:\n\ttable_close(pg_index, RowExclusiveLock);\n\t\t\treturn InvalidOid;", "partial_line": "elog(ERROR, \"cache lookup fa", "completion": "elog(ERROR, \"cache lookup failed for index %u\", indexId); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t}\n\t\t\t\tS_LIST_WALK(ifstmt->else_body);\n\t\t\t}\n\t\t\t\t\tS_LIST_WALK(cwt->stmts);", "partial_line": "E_WA", "completion": "E_WALK(fori->lower); <|endoftext|>"}
{"context": "\t\t\t\t\t\tList\t   *update_colnos = root->update_colnos;\n\t\t\t\t\t\t\t\tadjust_appendrel_attrs_multilevel(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (Node *) withCheckOptions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  this_result_rel,\n\t\t\t\t\t\t\t\t\t\t\t\t returningList);", "partial_line": "MergeAction *action", "completion": "MergeAction *action = lfirst(l), <|endoftext|>"}
{"context": "\t\t\t\t\t\t  EState *estate, ItemPointer conflictTid,\n\t\tif (!indexInfo->ii_Unique && !indexInfo->ii_ExclusionOps)\n\t\t\tExprState  *predicate;\n}\n\tint\t\t\tindnkeyatts = IndexRelationGetNumberOfKeyAttributes(index);", "partial_line": "AttrNumber\tat", "completion": "AttrNumber\tattno = indexInfo->ii_IndexAttrNumbers[indnkeyatts - 1]; <|endoftext|>"}
{"context": "\tchar\t   *save_collate,\n\t\t\t   *save_monetary,\n#endif\t\t\t\t\t\t\t\n\t\t}\n\t\t}", "partial_line": "(errcode(ERRC", "completion": "(errcode(ERRCODE_EXTERNAL_ROUTINE_EXCEPTION), <|endoftext|>"}
{"context": "free_edge_table(PlannerInfo *root, Edge *edge_table)\n\tint\t\t\tedge_total;\t\t\n\t\tedge_table[i].total_edges = 0;\n\t\tgimme_edge(root, tour2[index2], tour2[index1], edge_table);\n}", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\tAssert(i == conn->nconnhost);\n\t{\n\t{\n\t\t{\n\t\t\tch->type = CHT_HOST_NAME;", "partial_line": "ch->type = CH", "completion": "ch->type = CHT_UNIX_SOCKET; <|endoftext|>"}
{"context": "\t\tif (strcmp(cte->ctename, rte->ctename) == 0)\n\t\treturn;\n\tcolumndistance =\n\tif (columndistance < fuzzystate->distance)\n\t\tfuzzystate->distance = columndistance;", "partial_line": "fuzzystate->", "completion": "fuzzystate->rfirst = rte; <|endoftext|>"}
{"context": "\t_bt_insert_parent(rel, heaprel, lbuf, rbuf, stack, wasroot, wasonly);\n{\n\tBlockNumber blkno;\n\t\tpage = BufferGetPage(buf);\n\t\tif (!P_IGNORE(opaque))", "partial_line": "maxoff = PageGetMaxOffsetN", "completion": "maxoff = PageGetMaxOffsetNumber(page); <|endoftext|>"}
{"context": "\t\t\tcase ACL_UPDATE_CHR:\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase ACL_TRIGGER_CHR:\n\t\t\t\tread = ACL_TRIGGER;", "partial_line": "read", "completion": "read = ACL_CREATE; <|endoftext|>"}
{"context": "\t\tcase T_ArrayExpr:\n\t\tcase T_CoalesceExpr:\n\t\tcase T_MinMaxExpr:\n\t\t\t((MinMaxExpr *) expr)->minmaxcollid = collation;\n\t\t\tbreak;", "partial_line": "Assert((((XmlExpr *) expr)->op == IS", "completion": "Assert((((XmlExpr *) expr)->op == IS_XMLSERIALIZE) ? <|endoftext|>"}
{"context": "static void breakconstraintloop(struct nfa *nfa, struct state *sinitial);\n\t\t\t\t\t\t\t\t char *outerdonemap, int nstates);\nstatic bool check_out_colors_match(struct state *s, color co1, color co2);\nstatic void dumpnfa(struct nfa *nfa, FILE *f);\nstatic void dumpstate(struct state *s, FILE *f);", "partial_line": "static vo", "completion": "static void dumparcs(struct state *s, FILE *f); <|endoftext|>"}
{"context": "    if (z->c > z->lb) return 0;\n    {   int ret = slice_del(z);\n    return 1;\n    if (z->c - 11 <= z->lb || z->p[z->c - 1] != 181) return 0;\n    z->bra = z->c;", "partial_line": "{   int ret = sl", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "}\n\tinitPQExpBuffer(&buf);\n\t\t  \"    controls what input is written to standard output\\n\"\n\t\t  \"    the number of result rows to fetch and display at a time (0 = unlimited)\\n\");\n\tHELP0(\"  HISTSIZE\\n\"", "partial_line": "HELP0(\"  ON", "completion": "HELP0(\"  ON_ERROR_ROLLBACK\\n\" <|endoftext|>"}
{"context": "#endif\n\t\t|| ps.p_stack[ps.tos] == stmtl)\n\telse {", "partial_line": "ps.p_stack[++ps", "completion": "ps.p_stack[++ps.tos] = lbrace; <|endoftext|>"}
{"context": "\tnse = plpgsql_ns_lookup(expr->ns, false,\n\t\treturn NULL;\t\t\t\n\t{\n\t\t\tbreak;\n\t\t\t\t{", "partial_line": "MemoryContex", "completion": "MemoryContext oldcontext; <|endoftext|>"}
{"context": "\t\t\t\t\tif (pq_getmessage(cstate->fe_msgbuf, maxmsglen))\n\t\t\t\t\tRESUME_CANCEL_INTERRUPTS();\n\t\t\t\t\tswitch (mtype)\n\t\t\t\t\t\tcase PqMsg_CopyData:\n\t\t\t\t\t\tcase PqMsg_CopyFail:", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "}\n#line 10 \"dec_test.pgc\"\nchar* decs[] = { \"2E394\", \"-2\", \".794\", \"3.44\", \"592.49E21\", \"-32.84e4\",\n\t\t\t\t \"2E-394\", \".1E-2\", \"+.0\", \"-592.49E-07\", \"+32.84e-4\",\n\t\t\t\t \"1234567890123456789012345678.91\", ", "partial_line": "main(v", "completion": "main(void) <|endoftext|>"}
{"context": "#include \"optimizer/paths.h\"\n#include \"utils/lsyscache.h\"\n\t\t\t\t\t\t\t\t\t\t int relid, int ojrelid);\nstatic void remove_rel_from_eclass(EquivalenceClass *ec,", "partial_line": "static bool rel_supports_dist", "completion": "static bool rel_supports_distinctness(PlannerInfo *root, RelOptInfo *rel); <|endoftext|>"}
{"context": "\tmacaddr    *addr2 = PG_GETARG_MACADDR_P(1);\n\tresult->e = 0;\n\tSortSupport ssup = (SortSupport) PG_GETARG_POINTER(0);\n\tPG_RETURN_VOID();\nstatic int", "partial_line": "return m", "completion": "return macaddr_cmp_internal(arg1, arg2); <|endoftext|>"}
{"context": "\tLLVMValueRef v_fn;\n\telse if (basename != NULL)\n\t\tLLVMValueRef v_fn_addr;\n\t\tv_fn_addr = l_ptr_const(fcinfo->flinfo->fn_addr, TypePGFunction);\n\t\tLLVMSetUnnamedAddr(v_fn, true);", "partial_line": "LLVMPassManagerBuilderRe", "completion": "LLVMPassManagerBuilderRef llvm_pmb; <|endoftext|>"}
{"context": "#ifdef WIN32\nstatic size_t\n\t\t\t\t const char *format, const struct tm *tm, locale_t locale)\n\t\t\t\t\t\t\t  wformat, lengthof(wformat));\n\t\t\t GetLastError());", "partial_line": "GetL", "completion": "GetLastError()); <|endoftext|>"}
{"context": "\t\tsnprintf(rc_file, MAXPGPATH, \"%s/%s\", home, PSQLRC);\nstatic void\nstatic void\n\t}\n\telse if (newval[0] == '\\0')", "partial_line": "stati", "completion": "static bool <|endoftext|>"}
{"context": "{\n\tRelation\tpg_class_desc;\n\tSysScanDesc pg_class_scan;\n\t\t\t\tObjectIdGetDatum(targetRelId));\n\tif (force_non_historic)", "partial_line": "if (snaps", "completion": "if (snapshot) <|endoftext|>"}
{"context": "\telog(DEBUG1, \"rehashing catalog cache id %d for %s; %d tups, %d buckets\",\n\t\tdlist_foreach_modify(iter, &cp->cc_bucket[i])\n\t\t\tint\t\t\thashIndex = HASH_INDEX(ct->hash_value, newnbuckets);\n\t\t\tdlist_delete(iter.cur);\nRehashCatCacheLists(CatCache *cp)", "partial_line": "dlis", "completion": "dlist_head *newbucket; <|endoftext|>"}
{"context": "\t\t\t\t\tF_OIDEQ,\n\tscan = table_beginscan_catalog(relsetting, numkeys, keys);\nvoid\n\t\t\t Relation relsetting, GucSource source)\n\tScanKeyInit(&keys[1],", "partial_line": "bool\t\ti", "completion": "bool\t\tisnull; <|endoftext|>"}
{"context": "\tSize\t\tbs_emptyTupleLen;\ntypedef struct BrinInsertState\nstatic double _brin_parallel_merge(BrinBuildState *state);\n\t\t\t\t\t\t\t\t\t\t\t   Relation heap, Relation index);\n{", "partial_line": "amroutine->amparallelvacu", "completion": "amroutine->amparallelvacuumoptions = <|endoftext|>"}
{"context": "\t}\n\t\tvictim_buf_state |= BM_PERMANENT;\n\tuint32\t\toldHash;\t\t\n\tuint32\t\tbuf_state;\n\tUnlockBufHdr(buf, buf_state);", "partial_line": "BufTab", "completion": "BufTableDelete(&oldTag, oldHash); <|endoftext|>"}
{"context": "}\n\t{\n\t\t\tpg_log_error(\"could not close filter file \\\"%s\\\": %m\", fstate->filename);", "partial_line": "retur", "completion": "return \"extension\"; <|endoftext|>"}
{"context": "\telse\n\t\tif (opform->oprresult != BOOLOID)\n\t}\n\t\telog(ERROR, \"cache lookup failed for function %u\", member->object);\n\t\t{", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tif (!get_hex(s, &v2))\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t}", "partial_line": "return p -", "completion": "return p - dst; <|endoftext|>"}
{"context": "\t\t\tchar\t   *walFileName = (char *) lfirst(lc);\n\t\t\tXLogSegNo\tcurrsegno = segno;\n\t\t\tXLogFromFileName(walFileName, &tli, &segno, wal_segment_size);\n\t\t{\n\t\t\tchar\t\tendfname[MAXFNAMELEN];", "partial_line": "foreach(l", "completion": "foreach(lc, walFileList) <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"\\nFROM pg_catalog.pg_collation c, pg_catalog.pg_namespace n\\n\"\n{\n\tchar\t  **footers = NULL;\n\t\t\t\t\t  gettext_noop(\"Owner\"));\n\tif (!validateSQLNamePattern(&buf, pattern,", "partial_line": "appendPQ", "completion": "appendPQExpBufferStr(&buf, \"ORDER BY 1;\"); <|endoftext|>"}
{"context": "\t\t0xF18EB23E, 0x998D9EF6, 0x2188EBAE, 0x498BC766,\n\t\t0x5DAF0E7B, 0x35AC22B3, 0x8DA957EB, 0xE5AA7B23,\n\t\t0x594FB2B1, 0x314C9E79, 0x8949EB21, 0xE14AC7E9,\n\t\t0xA86BEE40, 0xE1579367, 0x3A13140E, 0x732F6929,\n\t\t0xEA50EA9A, 0xA36C97BD, 0x782810D4, 0x31146DF3,", "partial_line": "0x79264D8", "completion": "0x79264D85, 0x301A30A2, 0xEB5EB7CB, 0xA262CAEC, <|endoftext|>"}
{"context": "            break;\n            {   int ret = slice_from_s(z, 3, s_258);\n            break;\n                if (ret < 0) return ret;\n            if (!(z->I[1])) return 0;", "partial_line": "{   int ret = sl", "completion": "{   int ret = slice_from_s(z, 2, s_262); <|endoftext|>"}
{"context": "\t\tPostingItem *tod = GinDataPageGetPostingItem(parentPage, myoff);\nstatic bool\n\tDataPageDeleteStack *me;\n\tPage\t\tpage;\n\t\tif (!parent->child)", "partial_line": "me->leftB", "completion": "me->leftBuffer = InvalidBuffer; <|endoftext|>"}
{"context": "\t\t\t\t{\n}\n{\n\t{\n\t\tdiff = (unsigned char) (a[i] ^ b[i]);", "partial_line": "return hemdistsign(GETSIGN(a), GETSI", "completion": "return hemdistsign(GETSIGN(a), GETSIGN(b), siglena); <|endoftext|>"}
{"context": "\t\t\t\t\tcontinue;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'R':\n\t\t\t\tcase 'r':\n\t\t\t\t\tpt = _fmt(\"%I:%M:%S %p\", t, pt, ptlim, warnp);", "partial_line": "ca", "completion": "case 'u': <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\tpg_fatal(\"could not decompress data: %s\", ZSTD_getErrorName(res));\n\t\t\tpg_fatal(\"could not initialize compression library\");\n\t\tzstdcs->input.size = ZSTD_DStreamInSize();\n\t}", "partial_line": "static", "completion": "static bool <|endoftext|>"}
{"context": "\ttransdata = (Int8TransTypeData *) ARR_DATA_PTR(transarray);\n\tPG_RETURN_ARRAYTYPE_P(transarray);\n}\n\tint\t\t\tndigits;\n\t\t\tprintf(\"NEG\");", "partial_line": "de", "completion": "default: <|endoftext|>"}
{"context": "\t\t\t{\n\terrno = ENOENT;\nvoid\n\tXLogRecoveryCtl->SharedPromoteIsTriggered = true;\n\t}", "partial_line": "retur", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  fmtQualifiedDumpable(owning_tab));\n\t\t\tappendPQExpBufferStr(query, \"ALWAYS\");\n\t\t\t\t\t\t  \"UNLOGGED \" : \"\",\n\telse\n\t\t\t\t\t\t\t\t  .namespace = tbinfo->dobj.namespace->dobj.name,", "partial_line": "if (OidIsValid(tbinfo->owni", "completion": "if (OidIsValid(tbinfo->owning_tab) && !tbinfo->is_identity_sequence) <|endoftext|>"}
{"context": "\t\t}\n\t\telse if (strcmp(defel->defname, \"hashes\") == 0)\n\t\t\t\t strcmp(defel->defname, \"rightarg\") == 0 ||\n\t\t\t\t strcmp(defel->defname, \"function\") == 0 ||\n\t\telse", "partial_line": "restrictionOid = ValidateRestri", "completion": "restrictionOid = ValidateRestrictionEstimator(restrictionName); <|endoftext|>"}
{"context": "static const symbol s_3_240[4] = { 'i', 'r', 'e', 'u' };\nstatic const symbol s_3_251[5] = { 0xC3, 0xA1, 'v', 'e', 'u' };\nstatic const symbol s_3_255[4] = { 0xC3, 0xAD, 'e', 'u' };\nstatic const symbol s_3_262[6] = { 0xC3, 0xA9, 's', 's', 'i', 'u' };\nstatic const symbol s_3_263[6] = { 0xC3, 0xAD, 's', 's', 'i', 'u' };", "partial_line": "static const sy", "completion": "static const symbol s_3_264[3] = { 0xC3, 0xAF, 'u' }; <|endoftext|>"}
{"context": "\t\tif (asc)\n\t\tEXPECT_FALSE(rt_set(radixtree, keys[i], (TestValueType *) &keys[i]));\n\t\tEXPECT_EQ_U64(*value, (TestValueType) keys[i]);\n\t{\n\t\tEXPECT_TRUE(iterval != NULL);", "partial_line": "sta", "completion": "static int <|endoftext|>"}
{"context": "static const symbol s_1_113[5] = { 't', 'e', 't', 'a', 'n' };\nstatic const symbol s_1_125[5] = { 'i', 's', 't', 'a', 'r' };\nstatic const struct among a_1[130] =\n{ 5, s_1_3, -1, 13, 0},\n{ 5, s_1_5, -1, 15, 0},", "partial_line": "{ 5, s_", "completion": "{ 5, s_1_22, -1, 60, 0}, <|endoftext|>"}
{"context": "\t*vp = mulShift(4 * m + 2, mul, j);\n\thi += mid < tmp;\t\t\t\n\t}\n}\n\t{", "partial_line": "re", "completion": "return 15; <|endoftext|>"}
{"context": "\t{\"ms\", UNITS, DTK_MILLISEC},\n\t{\"msec\", UNITS, DTK_MILLISEC},\n\t{\"mseconds\", UNITS, DTK_MILLISEC},\n\t{\"useconds\", UNITS, DTK_MICROSEC},\t\n\t{\"years\", UNITS, DTK_YEAR}, ", "partial_line": "static const datetkn *", "completion": "static const datetkn *datecache[MAXDATEFIELDS] = {NULL}; <|endoftext|>"}
{"context": "\tint\t\t\tcount_in_classes[CLS_COUNT];\n\tv->spl_left = (OffsetNumber *) palloc(nbytes);\n\t\t\tif (count_in_classes[j] > biggest_class_count)\n\t{\n\telse", "partial_line": "memset(cla", "completion": "memset(classes_groups, 0, sizeof(classes_groups)); <|endoftext|>"}
{"context": "#include \"commands/copyapi.h\"\n#include \"commands/copyfrom_internal.h\"\n#include \"utils/snapmgr.h\"\n#define MAX_PARTITION_BUFFERS\t32\n\tResultRelInfo *resultRelInfo;\t", "partial_line": "BulkInsertStat", "completion": "BulkInsertState bistate; <|endoftext|>"}
{"context": "\t\t\t\texpectfile_stderr[MAXPGPATH];\n\t\t\t\texpectfile_source[MAXPGPATH];\n\tsnprintf(insource, sizeof(insource), \"%s/%s.c\", inputdir, testname);\n\tadd_stringlist_item(tags, \"stdout\");\n\tadd_stringlist_item(expectfiles, expectfile_source);", "partial_line": "appnameenv = psprintf", "completion": "appnameenv = psprintf(\"ecpg/%s\", testname_dash.data); <|endoftext|>"}
{"context": "\t\t\tint\t\t\tindnkeyatts = indexStruct->indnkeyatts;\n\t\t\t\t\t\t\t\t\t\t\t\t   indexRel->rd_indextuple,\n\t\t\tindclass = (oidvector *) DatumGetPointer(indclassDatum);\n\t\t\t\tOid\t\t\topclass = indclass->values[i];\n\t\t\t\tif (!HeapTupleIsValid(cla_ht))", "partial_line": "if (", "completion": "if (!OidIsValid(op)) <|endoftext|>"}
{"context": "NamedTuplestoreScanNext(NamedTuplestoreScanState *node)\n\tAssert(ScanDirectionIsForward(node->ss.ps.state->es_direction));\n\ttuplestore_select_read_pointer(node->relation, node->readptr);\n\t\t\t\t\t(ExecScanRecheckMtd) NamedTuplestoreScanRecheck);\n\tAssert(outerPlan(node) == NULL);", "partial_line": "scansta", "completion": "scanstate->ss.ps.plan = (Plan *) node; <|endoftext|>"}
{"context": "int\n\tAssert(PqCommReadingMsg);\n\tr = secure_read(MyProcPort, c, 1);\n}\n{", "partial_line": "Assert(PqCom", "completion": "Assert(PqCommReadingMsg); <|endoftext|>"}
{"context": "\tHashPageOpaque pageopaque;\n\tHashMetaPage metap;\n\tuint32\t\tsplitnum;\n\tuint32\t\tbit;\n\tLockBuffer(buf, BUFFER_LOCK_EXCLUSIVE);", "partial_line": "for", "completion": "for (;;) <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\tgoto keep_going;\n\t\t\t\t{\n\t\t\tcase CHT_UNIX_SOCKET:\n\t\t\t\t\tgoto keep_going;", "partial_line": "if (conn->load_balan", "completion": "if (conn->load_balance_type == LOAD_BALANCE_RANDOM) <|endoftext|>"}
{"context": "{\n\tif (namelen == 0)\n\t\t\t\t errdetail(\"Extension names must not be empty.\")));\n\tif (strstr(extensionname, \"--\"))\n\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\twait_event = \"<insufficient privilege>\";\n\tif (!wait_event)\n}\n\tPgBackendStatus *beentry;\n\tPG_RETURN_TIMESTAMPTZ(result);", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\t\t}\n{\n\t}\n_brin_begin_parallel(BrinBuildState *buildstate, Relation heap, Relation index,\n\tBrinLeader *brinleader = (BrinLeader *) palloc0(sizeof(BrinLeader));", "partial_line": "BufferUsage *buff", "completion": "BufferUsage *bufferusage; <|endoftext|>"}
{"context": "static const symbol s_2_644[5] = { 'u', 'v', 'a', 't', 'e' };\nstatic const symbol s_2_645[6] = { 'a', 0xC4, 0x8D, 'a', 't', 'e' };\nstatic const symbol s_2_668[8] = { 'a', 's', 't', 'a', 'n', 'i', 't', 'e' };\nstatic const symbol s_2_683[7] = { 'i', 's', 't', 'a', 'j', 't', 'e' };\nstatic const symbol s_2_684[7] = { 'o', 's', 't', 'a', 'j', 't', 'e' };", "partial_line": "static const symbol s_2_689[4] = { 'i',", "completion": "static const symbol s_2_689[4] = { 'i', 'j', 't', 'e' }; <|endoftext|>"}
{"context": "#include \"common/logging.h\"\n#include \"port/pg_crc32c.h\"\n#define SH_PREFIX blockreftable\n#define SH_SCOPE static inline\n#define SH_RAW_ALLOCATOR pg_malloc0", "partial_line": "blockreftable_h", "completion": "blockreftable_hash *hash; <|endoftext|>"}
{"context": "\trc = system(pg_ctl_cmd->data);\nstop_standby_server(const char *datadir)\n{\n\tstandby_running = false;\n\tpg_log_info(\"server was stopped\");", "partial_line": "PGconn", "completion": "PGconn\t   *conn; <|endoftext|>"}
{"context": "\triinfo->valid = true;\n\t\ttuple = SearchSysCache1(CONSTROID, ObjectIdGetDatum(constrOid));\n\t\tconstrParentOid = ((Form_pg_constraint) GETSTRUCT(tuple))->conparentid;\n\t\thashvalue = 0;\t\t\t\n\t\t}", "partial_line": "GetUserIdAndSecContext", "completion": "GetUserIdAndSecContext(&save_userid, &save_sec_context); <|endoftext|>"}
{"context": "\tstxtup = SearchSysCache1(STATEXTOID, ObjectIdGetDatum(stxid));\n\t\t{\n\t\t\tif (namespaceId == stxnamespace)\n\t\t\tif (SearchSysCacheExists2(STATEXTNAMENSP,\n\t\t}", "partial_line": "ReleaseSy", "completion": "ReleaseSysCache(stxtup); <|endoftext|>"}
{"context": "\t\t\treturn \"relation\";\n\telog(ERROR, \"unrecognized IOObject value: %d\", io_object);\n\tPgStatShared_IO *stat_shmem = (PgStatShared_IO *) stats;\n\tfor (int i = 0; i < BACKEND_NUM_TYPES; i++)\n\t{", "partial_line": "LWLockRele", "completion": "LWLockRelease(bktype_lock); <|endoftext|>"}
{"context": "\t\t\tlineno = PyObject_GetAttrString(tb, \"tb_lineno\");\n\t\t\tif (name == NULL)\n\t\tPG_CATCH();\n\t\t\tPy_XDECREF(name);\n\t\t\tlong\t\tplain_lineno;", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\treturn false;\n{\n\tint\t\t\ti;\n\tMemSet(nulls, true, num_phys_attrs * sizeof(bool));\nCopyFromCSVOneRow(CopyFromState cstate, ExprContext *econtext, Datum *values,", "partial_line": "boo", "completion": "bool *nulls) <|endoftext|>"}
{"context": "{ 4, s_6_18, -1, 1, 0},\n{ 3, s_6_19, -1, 1, 0},\n{ 4, s_6_28, -1, 1, 0},\nstatic const symbol s_7_6[2] = { 'y', 'o' };\n{ 2, s_7_1, -1, 1, 0},", "partial_line": "{ 3, s_7_3,", "completion": "{ 3, s_7_3, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\tcase ANYARRAYOID:\n\t\t\t\t\t\t\t\telog(ERROR, \"variadic parameter is not an array\");\n\t}\n\tvalues[Anum_pg_proc_proowner - 1] = ObjectIdGetDatum(proowner);", "partial_line": "values[Anum_pg_proc_p", "completion": "values[Anum_pg_proc_prolang - 1] = ObjectIdGetDatum(languageObjectId); <|endoftext|>"}
{"context": "\t\t\t}\n\t\tcase T_SubPlan:\n\t\t\t\t{\n\t\t\tbreak;\n\t\tcase T_RowExpr:", "partial_line": "case", "completion": "case T_MinMaxExpr: <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t\telse if (range_typelem != elem_typeid)\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t{", "partial_line": "if (have_anyenum && elem_type", "completion": "if (have_anyenum && elem_typeid != ANYELEMENTOID) <|endoftext|>"}
{"context": "\tlevelstate->current_page = 0;\n\tfor (; dist != NULL; dist = dist->next)\n\t\tPage\t\ttarget;\n\t\tunion_tuple = dist->itup;\n\t\tblkno = state->pages_allocated++;", "partial_line": "gistinitpa", "completion": "gistinitpage(parent->pages[0], 0); <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t SPGIST_LEAF | (isNulls ? SPGIST_NULLS : 0));\n\t\t\t\t\tredirectTuplePos = toDelete[0];\n\t\t\t\t\t\t\t\t\t\ttoDelete, nToDelete,\n\t\t\t\t\t\t\t\t\t\tInvalidOffsetNumber);", "partial_line": "SGLT_SET_NEXTOFFSET(it, ItemPointer", "completion": "SGLT_SET_NEXTOFFSET(it, ItemPointerGetOffsetNumber(&nodes[n]->t_tid)); <|endoftext|>"}
{"context": "\t\t\tint\t\t\tlindex;\n\t\t\tchar\t   *endptr;\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t*isnull = true;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tif (list_member_oid(aschemaPubids, puboid))\n\t\t\t\t\t*ancestor_level = level;\n\tDatum\t\tvalues[Natts_pg_publication_rel];\n\tObjectAddress myself,\n\t\t\t\t\t\t\t  ObjectIdGetDatum(pubid)))", "partial_line": "RelationG", "completion": "RelationGetRelationName(targetrel), pub->name))); <|endoftext|>"}
{"context": "\t\t{\n\t}\n\tif (hasNulls)\n\t\thoff = len = MAXALIGN(len); \n\t\t\tnullBits = (bits8 *) ((char *) (*targetHeapTuple)->t_data", "partial_line": "(*targetMini", "completion": "(*targetMinimalTuple)->t_hoff = hoff + MINIMAL_TUPLE_OFFSET; <|endoftext|>"}
{"context": "\t\t\telse if (pghost)\n\t\t\t\tpghost_str = pghost;\n\t\telse if (strcmp(def->keyword, \"hostaddr\") == 0)\n\trv = PQpingParams(keywords, values, 1);\n\t\t\t   pgport_str);", "partial_line": "printf(_(\"rejecting conne", "completion": "printf(_(\"rejecting connections\\n\")); <|endoftext|>"}
{"context": "#include \"common/int.h\"\n#include \"storage/lwlock.h\"\n#define PAGES_PER_CHUNK  (BLCKSZ / 32)", "partial_line": "TBM_IT", "completion": "TBM_ITERATING_SHARED, <|endoftext|>"}
{"context": "\tif (!subref)\n\t\telse if (desc->arg_is_rowtype[i])\n\t\t\t{\n\t\t\t\tpfree(tmp);\n\t\t\t\t errmsg(\"%s\", strip_trailing_ws(sv2cstr(ERRSV)))));", "partial_line": "retval = ne", "completion": "retval = newSVsv(POPs); <|endoftext|>"}
{"context": "\t\tif (!isRoot)\n\t\tReleaseBuffer(buffer);\n\t\tReleaseBuffer(buffer);\nstatic bool\n\tBuffer\t\tbuffer;", "partial_line": "Pa", "completion": "Page\t\tpage; <|endoftext|>"}
{"context": "#endif\nstatic const symbol s_0_3[2] = { 0xC3, 0xA1 };\nstatic const symbol s_0_6[2] = { 0xC3, 0xAC };\nstatic const symbol s_1_0[2] = { 'l', 'a' };\nstatic const symbol s_1_7[3] = { '-', 't', 'e' };", "partial_line": "static const", "completion": "static const symbol s_1_15[2] = { '\\'', 'n' }; <|endoftext|>"}
{"context": "\t\t\tcase 7:\n\t\t{\n\t\t\ta += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));\n#else\t\t\t\t\t\t\t\n\t\t\ta += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));", "partial_line": "#e", "completion": "#endif <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase XLOG_BTREE_DELETE:\n\t\t\tbtree_xlog_newroot(record);\n\t\t\tbreak;\n\t\tcase XLOG_BTREE_META_CLEANUP:", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tctas->query = parseTree;\n{\n\t\t\tcase T_InsertStmt:\n\t\t\t\t(void) test_raw_expression_coverage(parseTree, NULL);\n\t\t\tresult = transformInsertStmt(pstate, (InsertStmt *) parseTree);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tECPGt_bytea,&(recv_buf[0]),(long)DATA_SIZE,(long)1,sizeof(struct bytea_2), \n\tinit();\n#line 78 \"bytea.pgc\"\n#line 78 \"bytea.pgc\"\nif (sqlca.sqlcode < 0) sqlprint();}", "partial_line": "#lin", "completion": "#line 82 \"bytea.pgc\" <|endoftext|>"}
{"context": "\t\t\t}\n\t}\n\t\t}\n}\n\tstruct state *nexts;", "partial_line": "markreachable(nfa, nfa->pre, (struct state", "completion": "markreachable(nfa, nfa->pre, (struct state *) NULL, nfa->pre); <|endoftext|>"}
{"context": "                    z->c = ret;\n    lab0:\n}\n    z->I[0] = z->l;\n            if (in_grouping_U(z, g_v, 97, 250, 0)) goto lab2;", "partial_line": "if (out_gr", "completion": "if (out_grouping_U(z, g_v, 97, 250, 0)) goto lab4; <|endoftext|>"}
{"context": "\t(void) set_stack_base();\n\tinit_locale(\"LC_COLLATE\", LC_COLLATE, \"\");\n\tinit_locale(\"LC_MESSAGES\", LC_MESSAGES, \"\");\n\t\tif (strcmp(argv[1], \"--help\") == 0 || strcmp(argv[1], \"-?\") == 0)\n\t\t\tBootstrapModeMain(argc, argv, true);", "partial_line": "case DISP", "completion": "case DISPATCH_BOOT: <|endoftext|>"}
{"context": "\t\t\tbreak;\n\tbuf = pg_hton32((uint32) val);\n\tuint16\t\tbuf;\nClosePipeToProgram(CopyToState cstate)\n\t\t\t\t(errcode_for_file_access(),", "partial_line": "else if (pclos", "completion": "else if (pclose_rc != 0) <|endoftext|>"}
{"context": "\t\t\t}\n\t\t}\n\t\t\tAggState   *aggstate = castNode(AggState, state->parent);\n\t\t\tAggState   *aggstate = castNode(AggState, state->parent);\n\t\t\tAggStatePerTrans pertrans = op->d.agg_trans.pertrans;", "partial_line": "AggSt", "completion": "AggStatePerGroup pergroup = <|endoftext|>"}
{"context": "static const symbol s_1_29[6] = { 0xD5, 0xA1, 0xD6, 0x81, 0xD5, 0xA1 };\nstatic const symbol s_1_30[6] = { 0xD5, 0xA5, 0xD6, 0x81, 0xD5, 0xA1 };\nstatic const symbol s_1_45[10] = { 0xD5, 0xA5, 0xD6, 0x81, 0xD5, 0xB6, 0xD5, 0xA5, 0xD5, 0xAC };\n{ 10, s_1_3, -1, 1, 0},\n{ 10, s_1_8, -1, 1, 0},", "partial_line": "{ 8, s", "completion": "{ 8, s_1_16, 15, 1, 0}, <|endoftext|>"}
{"context": "\t{\n\t\tchar\t   *spcname = PQgetvalue(res, i, 1);\n\t\tappendPQExpBufferStr(buf, \" LOCATION \");\n\t\tif (is_absolute_path(spclocation))\n\t\telse", "partial_line": "if (!ski", "completion": "if (!skip_acls && <|endoftext|>"}
{"context": "#else\t\t\t\t\t\t\t\n#define REMEMBER_EPIPE(spinfo, cond)\nPQinitOpenSSL(int do_ssl, int do_crypto)\nPostgresPollingStatusType\n{", "partial_line": "#e", "completion": "#endif <|endoftext|>"}
{"context": "initGenerateDataServerSide(PGconn *con)\n\tfprintf(stderr, \"generating data (server-side)...\\n\");\n\t\t\t\t\t  \"insert into pgbench_tellers(tid,bid,tbalance) \"\n\t\t\t\t\t  naccounts, (int64) naccounts * scale);\ninitCreateFKeys(PGconn *con)", "partial_line": "fprintf(stderr, \"creating foreig", "completion": "fprintf(stderr, \"creating foreign keys...\\n\"); <|endoftext|>"}
{"context": "\t\thdr_len += 8;\t\t\t\n\t\tcur_record_lsn = fe_recvint64(&copybuf[1]);\n\t\tif (endpos != InvalidXLogRecPtr && cur_record_lsn > endpos)\n\t\t\t\t\t\t\t bytes_left, outfile);\n\t\t}", "partial_line": "PQcle", "completion": "PQclear(res); <|endoftext|>"}
{"context": "#define Sc\t17\n#define Sl\t23\n#define Sm\t 6\n\tuint32\t\tB = ctx->md5_stb;\n\tuint32\t\tC = ctx->md5_stc;", "partial_line": "y[6]", "completion": "y[6] = b64[5]; <|endoftext|>"}
{"context": "\t\t\tIndexClause *iclause = (IndexClause *) lfirst(lc);\n\t\t\tindex_clauses = lappend(index_clauses, iclause);\n\t\t\t\t\t\t\t\t\t\t   rinfo->clause_relids);\n\t\tif (index_clauses == NIL && !index->amoptionalkey)\n\t\tuseful_pathkeys = truncate_useless_pathkeys(root, rel,", "partial_line": "&orderbyclau", "completion": "&orderbyclausecols); <|endoftext|>"}
{"context": "\t\tscratch.opcode = EEOP_OUTER_FETCHSOME;\n\t\tscratch.d.fetch.kind = NULL;\n\t}\n\t\t\tcase INNER_VAR:\n\t\t\t\t\t\tinfo->last_scan = Max(info->last_scan, attnum);", "partial_line": "TupleDesc\tdesc", "completion": "TupleDesc\tdesc = NULL; <|endoftext|>"}
{"context": "\t\t\tif (*default_index == -1)\n\t\tmerged_index = inner_map->merged_indexes[inner_index];\n\t\t\t\t\t  JoinType jointype,\n\tAssert(outer_has_null || inner_has_null);\n\t\tif (outer_map->merged_indexes[outer_null] == -1)", "partial_line": "if (inner_has", "completion": "if (inner_has_null) <|endoftext|>"}
{"context": "test_multi_pipelines(PGconn *conn)\n\tOid\t\t\tdummy_param_oids[1] = {INT4OID};\n\tif (PQsendQueryParams(conn, \"SELECT $1\", 1, dummy_param_oids,\n\tif (PQpipelineSync(conn) != 1)\n\t\t\t\t PQresStatus(PQresultStatus(res)));", "partial_line": "if (PQgetResult(co", "completion": "if (PQgetResult(conn) != NULL) <|endoftext|>"}
{"context": "static const symbol s_0_171[6] = { 'i', 'a', 't', 0xC4, 0x97, 's' };\nstatic const symbol s_0_199[4] = { 'e', 'n', 0xC4, 0xAF };\nstatic const symbol s_0_200[4] = { 'e', 'r', 0xC4, 0xAF };\nstatic const symbol s_0_201[2] = { 0xC5, 0xB3 };\n{ 4, s_0_2, 1, -1, 0},", "partial_line": "{ 3, s_0_15, 9,", "completion": "{ 3, s_0_15, 9, -1, 0}, <|endoftext|>"}
{"context": "    switch (among_var) {\n                if (ret < 0) return ret;\n            {   int ret = slice_from_s(z, 3, s_24);\n            }\n        case 3:", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t errmsg(\"cannot modify statistics for relation \\\"%s\\\"\",\n\t\tAssert(index_lockmode != NoLock);\n\t\t\t\t\t\t   get_relkind_objtype(table->rd_rel->relkind),\n\t\t\t\t errmsg(\"relation \\\"%s.%s\\\" does not exist\",", "partial_line": "argname, format_typ", "completion": "argname, format_type_be(argtype), <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tremove_old = true;\n\t\t\t}\n\t\tif (remove_old)\n\t\t{", "partial_line": "if (!accept", "completion": "if (!accept_new) <|endoftext|>"}
{"context": "{ 3, s_6_2, -1, -1, 0},\n{ 3, s_6_3, -1, -1, 0},\nstatic const symbol s_8_3[3] = { 0xE0, 0xAE, 0xA9 };\nstatic const symbol s_8_6[3] = { 0xE0, 0xAE, 0xB0 };\n{ 3, s_8_5, -1, -1, 0},", "partial_line": "static const symbol s_9_0[3] = { 0xE", "completion": "static const symbol s_9_0[3] = { 0xE0, 0xAF, 0x80 }; <|endoftext|>"}
{"context": "{\n\tint\t\t\ti;\n\tfor (i = 0; keywords[i] != NULL; i++)\n\t\t\tstrcmp(keywords[i], \"fallback_application_name\") == 0)\n\t\tif (!firstkeyword)", "partial_line": "PGres", "completion": "PGresult * <|endoftext|>"}
{"context": "static void\n\tattypes = growalloc(attypes, sizeof *attypes, timecnt, &timecnt_alloc);\n\t}\n\tif (j == charcnt)\n\telse", "partial_line": "i = typ", "completion": "i = typecnt++; <|endoftext|>"}
{"context": "\tvalue.weight = (int16) pq_getmsgint(buf, sizeof(int16));\n\t\t\tereport(ERROR,\n\t}\n\t\t(void) apply_typmod_special(res, typmod, NULL);\nDatum", "partial_line": "pq_begintypsend", "completion": "pq_begintypsend(&buf); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\tAnum_pg_type_oid);\n\t\t\t\t\t\t\t\t 0,\n\t\t   bool typeNotNull,\n{", "partial_line": "bool", "completion": "bool\t\tnulls[Natts_pg_type]; <|endoftext|>"}
{"context": "\tset_pglocale_pgservice(argv[0], PG_TEXTDOMAIN(\"psql\"));\n\tpset.queryFout = stdout;\n\tpset.popt.topt.unicode_header_linestyle = UNICODE_LINESTYLE_SINGLE;\n\tEstablishVariableSpace();\n\tSetVariable(pset.vars, \"VERSION\", PG_VERSION_STR);", "partial_line": "SetVariableBool(pset.vars, \"", "completion": "SetVariableBool(pset.vars, \"AUTOCOMMIT\"); <|endoftext|>"}
{"context": "\t\tif (save_jointype == JOIN_UNIQUE_INNER)\n\t\t\ttry_nestloop_path(root,\n\t\t\t\t\t\t\t  merge_pathkeys,\n\t\t\t\t\t\t\t\t\t\t innerpath, outerpath, jointype,\n\t\t\t\t\t\t\t\t\t\t extra);", "partial_line": "e", "completion": "extra); <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tTableFunc  *newnode;\n\t\t\telog(ERROR, \"unrecognized node type: %d\",\n\t}\n\tMUTATE(query->setOperations, query->setOperations, Node *);", "partial_line": "WindowClause *wc = lfirst_node", "completion": "WindowClause *wc = lfirst_node(WindowClause, temp); <|endoftext|>"}
{"context": "match_index_to_operand(Node *operand,\n\tif (indkey != 0)\n\t\t\treturn true;\n\t\tindexpr_item = list_head(index->indexprs);\n\t\t\t{", "partial_line": "if (indexp", "completion": "if (indexpr_item == NULL) <|endoftext|>"}
{"context": "\t\t\t\tREAD_ERROR_EXIT(fh);\n\t\tif (!isValidTarHeader(AH->lookahead))\n\t\t\tpg_fatal(\"input file does not appear to be a valid archive\");\n\t\tAH->readHeader = 0;\n\tAH->intSize = sizeof(int);", "partial_line": "AH->", "completion": "AH->toc->next = AH->toc; <|endoftext|>"}
{"context": "static const symbol s_0_40[4] = { 'k', 'e', 't', 'a' };\nstatic const symbol s_0_51[4] = { 'p', 'i', 'd', 'e' };\nstatic const symbol s_0_53[5] = { 't', 'z', 'a', 'k', 'e' };\nstatic const symbol s_0_60[4] = { 'k', 'u', 'n', 'e' };\nstatic const symbol s_0_65[5] = { 't', 'a', 'l', 'd', 'i' };", "partial_line": "static const symbol s_0_73[5]", "completion": "static const symbol s_0_73[5] = { 'k', 'a', 'r', 'r', 'i' }; <|endoftext|>"}
{"context": "}\n\tpq_sendbyte(&buf, addr->f);\n\tpq_sendbyte(&buf, addr->h);\n\telse if (lobits(a1) < lobits(a2))\n\t\treturn 0;", "partial_line": "macaddr8_lt(PG_FUNCT", "completion": "macaddr8_lt(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t{\n\t\t\treturn false;\n\t\tif (((PlaceHolderVar *) node)->phlevelsup != 0)\n\t\t}\n\t\t\telog(ERROR, \"PlaceHolderVar found where not expected\");", "partial_line": "N", "completion": "Node * <|endoftext|>"}
{"context": "}\n\tBTPageOpaque opaque;\n\tPage\t\tpage;\n\t\t\t\t\t\t(errcode(ERRCODE_INDEX_CORRUPTED),\n\t\t\t\t\t\t\t\t\t\t RelationGetRelationName(rel))));", "partial_line": "P_FIRSTDATAKEY(opaque) <= PageGetM", "completion": "P_FIRSTDATAKEY(opaque) <= PageGetMaxOffsetNumber(page) || <|endoftext|>"}
{"context": "\t\tAUTHOID,\n\t\tInvalidAttrNumber,\n\t\tAuthMemRelationId,\n\t\tRewriteRelationId,\n\t\tAnum_pg_rewrite_oid,", "partial_line": "OBJECT", "completion": "OBJECT_RULE, <|endoftext|>"}
{"context": "}\n{\n\tint16\t\targ2 = PG_GETARG_INT16(1);\n\tint16\t\targ2 = PG_GETARG_INT16(1);\n\tint32\t\tsum;", "partial_line": "(errcode(ERRCODE", "completion": "(errcode(ERRCODE_INVALID_PRECEDING_OR_FOLLOWING_SIZE), <|endoftext|>"}
{"context": "\t\t\t\t\t   errarg->remote_xid,\n\t\t\t\t\t\t   logicalrep_message_type(errarg->command),\n\t\telse\n\t\t\t\t\t\t   errarg->origin_name,\n\t\t\t\t\t\t   errarg->rel->remoterel.relname,", "partial_line": "errarg->rel->remoterel.attn", "completion": "errarg->rel->remoterel.attnames[errarg->remote_attnum], <|endoftext|>"}
{"context": "RelationClearMissing(Relation rel)\n\tint\t\t\tnatts = RelationGetNumberOfAttributes(rel);\n\tDatum\t\trepl_val[Natts_pg_attribute];\n\t}\n\tRelation\tattrrel;", "partial_line": "Assert(rel->rd_rel->relk", "completion": "Assert(rel->rd_rel->relkind == RELKIND_RELATION); <|endoftext|>"}
{"context": "\telse\n\t\t\t\t\t\t\t\t resultRelInfo,\n\t\t\t\t\t\t\t\t context->mtstate->ps.state);\n\t\tswitch (commandType)\n\t\t\tcase CMD_UPDATE:", "partial_line": "if (!Exec", "completion": "if (!ExecUpdatePrologue(context, resultRelInfo, <|endoftext|>"}
{"context": "{\n int b2 = ( 14 * 7 ) ;\n\tECPGdebug(1, stderr);\n\tprintf(\"%d %d %d %d %d %d %d %d %d %d %d\\n\", a, b, b2, c, d, e, f, g, h, i, j);\n#line 88 \"init.pgc\"", "partial_line": "if (sqlca.sqlcode", "completion": "if (sqlca.sqlcode < 0) fb ( 20 );} <|endoftext|>"}
{"context": "_readConst(void)\n\tREAD_OID_FIELD(constcollid);\n\tREAD_LOCATION_FIELD(location);\n\telse if (length == 2 && strncmp(token, \"or\", 2) == 0)\n\t\tlocal_node->boolop = NOT_EXPR;", "partial_line": "elog(ERROR, \"unre", "completion": "elog(ERROR, \"unrecognized boolop \\\"%.*s\\\"\", length, token); <|endoftext|>"}
{"context": "\t\t\tif (RelationNeedsWAL(rel))\n\t\t\t\t\t\t\t\t\t\ttodelete, ntodelete,\n\t\t\tvstate->stats->tuples_removed += ntodelete;\n\t\tif (nremain == 0)\n\t\t{", "partial_line": "if (blkno == ori", "completion": "if (blkno == orig_blkno) <|endoftext|>"}
{"context": "\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\tcase EEOP_JSON_CONSTRUCTOR:\n\t\t\t\tbreak;\n\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tresult = PGFILETYPE_DIR;\n\t}\n\tAssert(iovcnt > 0);\n\t\t\tAssert(transferred == 0);\nssize_t", "partial_line": "errno =", "completion": "errno = EINVAL; <|endoftext|>"}
{"context": "\tseq++;\n\t\t\tbuflen = Min(buflen, PG_SYSLOG_LIMIT);\n\t\t\t\ti = buflen - 1;\n\t\t\tsyslog(level, \"%s\", line);\n\treturn encoding;", "partial_line": "write_eventlog(int level, const", "completion": "write_eventlog(int level, const char *line, int len) <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n}\n\tif (dterr == 0)\n\t\tdterr = DecodeTimeOnly(field, ftype, nf,\n\tPG_RETURN_TIMETZADT_P(result);", "partial_line": "TimeTzADT  *time", "completion": "TimeTzADT  *time = PG_GETARG_TIMETZADT_P(0); <|endoftext|>"}
{"context": "{\n\tFileTag\t\ttag;\n\tFileTag\t\ttag;\n\tINIT_MD_FILETAG(tag, rlocator.locator, forknum, segno);\n\tFileTag\t\ttag;", "partial_line": "rlocator.dbOi", "completion": "rlocator.dbOid = dbid; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tPQerrorMessage(conn));\n\tif (PQsetnonblocking(conn, 0) != 0)\n\tOid\t\t\ttyp;\n\t\t\t\t\t  1, param_oids) != 1)\n\tif (res != NULL)", "partial_line": "pg_fatal(\"exp", "completion": "pg_fatal(\"expected NULL result\"); <|endoftext|>"}
{"context": "static const symbol s_7_75[3] = { 'a', 't', 'o' };\nstatic const symbol s_7_76[3] = { 'i', 't', 'o' };\n{\n{ 3, s_7_3, -1, 1, 0},\n{ 3, s_7_7, -1, 1, 0},", "partial_line": "{ 5,", "completion": "{ 5, s_7_17, 16, 1, 0}, <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"utils/sortsupport.h\"", "partial_line": "extra->fcinf", "completion": "extra->fcinfo.args[0].value = x; <|endoftext|>"}
{"context": "\t\tcase LOGICAL_REP_MSG_TRUNCATE:\n\t\t\treturn \"RELATION\";\n\t\tcase LOGICAL_REP_MSG_TYPE:\n\t\tcase LOGICAL_REP_MSG_MESSAGE:\n\t\tcase LOGICAL_REP_MSG_STREAM_START:", "partial_line": "retu", "completion": "return \"STREAM COMMIT\"; <|endoftext|>"}
{"context": "\t\tresult[index] = (char) ('0' + output);\n\t\tresult[index + 1] = '.';\n\tif (exp < 0)\n\t}\n\t\t{", "partial_line": "if (ieeeExponent ==", "completion": "if (ieeeExponent == ((1u << FLOAT_EXPONENT_BITS) - 1u) || (ieeeExponent == 0 && ieeeMantissa == 0)) <|endoftext|>"}
{"context": "bool\n\t\tPath\t   *old_path = (Path *) lfirst(p1);\n\t\tif (keyscmp != PATHKEYS_DIFFERENT)\n\t\t\tif (old_path->total_cost > total_cost * STD_FUZZ_FACTOR &&\n\tpathnode->parallel_safe = rel->consider_parallel;", "partial_line": "pathnode->parallel", "completion": "pathnode->parallel_workers = 0; <|endoftext|>"}
{"context": "#include \"snowball/libstemmer/stem_UTF_8_hindi.h\"\n#include \"snowball/libstemmer/stem_UTF_8_hungarian.h\"\n#include \"snowball/libstemmer/stem_UTF_8_nepali.h\"\nPG_FUNCTION_INFO_V1(dsnowball_init);\n\t{#name, enc, name##_##senc##_create_env, name##_##senc##_close_env, name##_##senc##_stem}", "partial_line": "STEMMER_MODULE(russian, P", "completion": "STEMMER_MODULE(russian, PG_KOI8R, KOI8_R), <|endoftext|>"}
{"context": "\t\t\tbreak;\n\tsize = sizeof(Size);\n\tint\t\t\tn;\n\tva_start(vargs, fmt);\n\tif (can_skip_gucvar(gconf))", "partial_line": "switch (gconf->v", "completion": "switch (gconf->vartype) <|endoftext|>"}
{"context": "\ttypalign = my_extra->typalign;\n\tdim = AARR_DIMS(v);\n\t\t\tpq_sendint32(&buf, VARSIZE(outputbytes) - VARHDRSZ);\n\tPG_RETURN_BYTEA_P(pq_endtypsend(&buf));\n\tp = buf;", "partial_line": "p += st", "completion": "p += strlen(p); <|endoftext|>"}
{"context": "\t\t}\n\tdestroyPQExpBuffer(buf);\n{\n\t\t\t\t\t   \"pg_catalog.pg_get_userbyid(\" CppAsString2(BOOTSTRAP_SUPERUSERID) \") AS parowner, \"\n\t{", "partial_line": "PQclear", "completion": "PQclear(res); <|endoftext|>"}
{"context": "\tif (Log_destination & LOG_DESTINATION_JSONLOG)\n\t{\n\t\tfilename = logfile_getname(first_syslogger_file_time, \".json\");\n\t\tpfree(filename);\n\t}", "partial_line": "startup_data.csvlogFile = s", "completion": "startup_data.csvlogFile = syslogger_fdget(csvlogFile); <|endoftext|>"}
{"context": "{ 4, s_2_501, 466, 45, 0},\n{ 4, s_2_505, -1, 85, 0},\n{ 3, s_2_515, -1, 104, 0},\n{ 5, s_2_516, 515, 128, 0},\n{ 4, s_2_525, 515, 113, 0},", "partial_line": "{ 5, s_2_559, 5", "completion": "{ 5, s_2_559, 558, 1, 0}, <|endoftext|>"}
{"context": "\t\tcase T_CoerceViaIO:\n\t\t\t\t\t\t\t\t &iofunc, &typioparam);\n\t\tcase T_RowCompareExpr:\n\t\t\t\tRowCompareExpr *rcexpr = (RowCompareExpr *) node;\n\t\t\t\t\t\t\ttree_walker_callback walker,", "partial_line": "case T_Curre", "completion": "case T_CurrentOfExpr: <|endoftext|>"}
{"context": "\t\t\t\t\t!vardata.freefunc)\n\t\t\t}\n\t\t\t{\n\t\t\t{\n\t\t\t\tif (varCorrelation > *indexCorrelation)", "partial_line": "*indexCorr", "completion": "*indexCorrelation = varCorrelation; <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t\t\t\t\tObjectIdGetDatum(namespaceId));\n\t\t\tstats_oid = GetSysCacheOid2(STATEXTNAMENSP, Anum_pg_statistic_ext_oid,\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),\nStatisticsObjIsVisibleExt(Oid stxid, bool *is_missing)", "partial_line": "HeapTuple", "completion": "HeapTuple\tstxtup; <|endoftext|>"}
{"context": "\t\tRangeVarGetAndCheckCreationNamespace(seq->sequence, NoLock, &seqoid);\n\t\tif (OidIsValid(seqoid))\n\t\t\tObjectAddressSet(address, RelationRelationId, seqoid);\n\t\t\t\t&need_seq_rewrite, &owned_by);\n\t\t\t\tcoldef = makeColumnDef(\"log_cnt\", INT8OID, -1, InvalidOid);", "partial_line": "address = DefineRelation(stmt, RELKIN", "completion": "address = DefineRelation(stmt, RELKIND_SEQUENCE, seq->ownerId, NULL, NULL); <|endoftext|>"}
{"context": "{ 12, s_3_64, 62, 1, 0},\n{ 12, s_3_82, 81, 1, 0},\n{ 12, s_3_84, 83, 1, 0},\nstatic const symbol s_6[] = { 0xE0, 0xA4, 0xA4, 0xE0, 0xA5, 0x8D, 0xE0, 0xA4, 0xB0 };\n        case 1:", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "#line 1 \"quote.pgc\"\n#include <stdio.h>", "partial_line": "int i , loopc", "completion": "int i , loopcount ; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  true);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\tPLpgSQL_rec *rec = (PLpgSQL_rec *) estate.datums[n];\n\t\t\t\t\t}", "partial_line": "elog(ERROR,", "completion": "elog(ERROR, \"unrecognized dtype: %d\", func->datums[i]->dtype); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  NULL, 2, key);\n\tsystable_endscan(scan);\n\t\t\tdeprec->objsubid == 0 &&\n\t\t\tdeprec->refobjsubid != 0 &&\ngetOwnedSequences(Oid relid)", "partial_line": "Oid\t\t\trelid = Relatio", "completion": "Oid\t\t\trelid = RelationGetRelid(rel); <|endoftext|>"}
{"context": "\t\t\t\t\ttransformTableConstraint(&cxt, (Constraint *) cmd->def);\n\t\t\t\t{\n\t\t\t\t\tnewdef->colname = cmd->name;\n\t\t\t\t\tcmd->def = (Node *) newdef;\n\t\t\t\t\t\t\t\t errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" does not exist\",", "partial_line": "get_atttype(relid,", "completion": "get_atttype(relid, attnum), <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\t\tbreak;\n\t\t\tcase DTK_ISOYEAR:\n\t\t\tcase DTK_DOW:\n\t\t\t\tintresult = j2day(date + POSTGRES_EPOCH_JDATE);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t 0);\n\t\tcontext->sublevels_up--;\n\tif (IsA(node, Param))\n\t\t\tresult = copyObject(list_nth(context->args, param->paramid - 1));\n{", "partial_line": "return", "completion": "return result; <|endoftext|>"}
{"context": "ShowAllGUCConfig(DestReceiver *dest)\n\tstruct config_generic **guc_vars;\n\tguc_vars = get_guc_variables(&num_vars);\n\ttupdesc = CreateTemplateTupleDesc(3);\n\t\t\t\t\t\t\t  TEXTOID, -1, 0);", "partial_line": "TEXTOID,", "completion": "TEXTOID, -1, 0); <|endoftext|>"}
{"context": "\t\tROTATEDIST(res);\n\t\tres->list = gistfillitupvec(lvectup, v.splitVector.spl_nleft, &(res->lenlist));\n\tGISTSTATE  *giststate;\n\t\telog(ERROR, \"numberOfAttributes %d > %d\",\n\t\t\t index->rd_att->natts, INDEX_MAX_KEYS);", "partial_line": "giststate->", "completion": "giststate->scanCxt = scanCxt; <|endoftext|>"}
{"context": "\t\t\t\tif (std && n->type == NODE_TYPE_CHAR &&\n\t\tswitch (n->key->id)\n\t\t\tcase DCH_A_M:\n\t\t\t\tif (!from_char_seq_search(&value, &s, ampm_strings_long,\n\t\t\t\t\treturn;", "partial_line": "out->clo", "completion": "out->clock = CLOCK_12_HOUR; <|endoftext|>"}
{"context": "\t\tMyLogicalRepWorker->relstate_lsn = current_lsn;\n\t\tpgstat_report_stat(false);\n\t\t\t\t\t\t\t\t\t\t   sizeof(originname));\n\t\treplorigin_session_origin_lsn = InvalidXLogRecPtr;\n\t\tSpinLockRelease(&MyLogicalRepWorker->relmutex);", "partial_line": "if (table_states", "completion": "if (table_states_not_ready != NIL && !last_start_times) <|endoftext|>"}
{"context": "\t\t\tjoinrel->fdwroutine = outer_rel->fdwroutine;\n\troot->join_rel_list = lappend(root->join_rel_list, joinrel);\n}\n\t\t\t   Relids joinrelids,\n\t\t\t   RelOptInfo *inner_rel,", "partial_line": "Assert(!IS_OTHER_REL(outer_rel", "completion": "Assert(!IS_OTHER_REL(outer_rel) && !IS_OTHER_REL(inner_rel)); <|endoftext|>"}
{"context": "\treturn conn;\n}\n\tret = internal_ping(conn);\n{\n\tconn = pqMakeEmptyPGconn();", "partial_line": "retu", "completion": "return conn; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"could not fetch table info for table \\\"%s.%s\\\" from publisher: %s\",\n\t\t\t\t\t\tnspname, relname, res->err)));\n\tlrel->atttyps = palloc0(MaxTupleAttributeNumber * sizeof(Oid));\n\t\tattnum = DatumGetInt16(slot_getattr(slot, 1, &isnull));\n\t\t\tlrel->attkeys = bms_add_member(lrel->attkeys, natt);", "partial_line": "*gencol_published = DatumGetBool(slot_getattr", "completion": "*gencol_published = DatumGetBool(slot_getattr(slot, 5, &isnull)); <|endoftext|>"}
{"context": "\t\tLWLockAcquire(lock, LW_EXCLUSIVE);\n\tLWLockRelease(lock);\nvoid\n}\n\tif (TransamVariables->oldestCommitTsXid != InvalidTransactionId &&", "partial_line": "LWLockRe", "completion": "LWLockRelease(CommitTsLock); <|endoftext|>"}
{"context": "\t\tNode\t   *n;\n\t\t\t\t\t\t\t\t\t\t  (Node *) fexpr,\n\t\tpstate = make_parsestate(NULL);\n\t\tquerytree->hasTargetSRFs ||\n\t\tquerytree->rtable ||", "partial_line": "querytree->hav", "completion": "querytree->havingQual || <|endoftext|>"}
{"context": "static bool standby_running = false;\n{\n\t\treturn;\n\t\tstruct LogicalRepInfo *dbinfo = &dbinfos.dbinfo[i];\n\t\t\tPGconn\t   *conn;", "partial_line": "if (d", "completion": "if (dbinfo->made_replslot) <|endoftext|>"}
{"context": "}\n        case 1:\n        case 2:\n            }\n                z->ket = z->c;", "partial_line": "if (z->c <= z->lb || z->p[z->c", "completion": "if (z->c <= z->lb || z->p[z->c - 1] != 'g') { z->c = z->l - m1; goto lab0; } <|endoftext|>"}
{"context": "#include \"access/transam.h\"\n#include \"storage/proc.h\"\n#include \"storage/standby.h\"\n#include \"utils/snapmgr.h\"\nstatic ResourceOwner SavedResourceOwnerDuringExport = NULL;", "partial_line": "static void S", "completion": "static void SnapBuildSerialize(SnapBuild *builder, XLogRecPtr lsn); <|endoftext|>"}
{"context": "\t\t\treturn STATUS_ERROR;\n\t}\n\tconst char *cursor = ident_response;\t\n\t{\n\t\t\t\treturn false;", "partial_line": "if (*curs", "completion": "if (*cursor != ':') <|endoftext|>"}
{"context": "#include <fcntl.h>\n#define\tZIC_VERSION_PRE_2013 '2'\ntypedef int64 zic_t;", "partial_line": "#i", "completion": "#ifdef S_IRUSR <|endoftext|>"}
{"context": "\t\treturn (Node *) cexpr;\n\tif (IsA(node, PlaceHolderVar))\n\tif (node == NULL)\n\tAssert(!IsA(node, AlternativeSubPlan));\n\tPlan\t   *inner_plan = join->plan.righttree;", "partial_line": "ListCell", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\tif (op->d.fieldselect.resulttype != attr->atttypid)\n\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),\n\t\t*op->resvalue = expanded_record_get_field(erh, fieldnum,\n\t{\n\telse", "partial_line": "tuphdr =", "completion": "tuphdr = DatumGetHeapTupleHeader(tupDatum); <|endoftext|>"}
{"context": "static void ATPrepSetAccessMethod(AlteredTableInfo *tab, Relation rel, const char *amname);\nstatic void ATPrepSetTableSpace(AlteredTableInfo *tab, Relation rel,\n\t\t\t\t\t\t\t\t\t   char fires_when, bool skip_system, bool recurse,\nstatic ObjectAddress ATExecAddInherit(Relation child_rel, RangeVar *parent, LOCKMODE lockmode);\nstatic void ATExecReplicaIdentity(Relation rel, ReplicaIdentityStmt *stmt, LOCKMODE lockmode);", "partial_line": "List **partexprs, Oid", "completion": "List **partexprs, Oid *partopclass, Oid *partcollation, <|endoftext|>"}
{"context": "\tCHECK_ENCODING_CONVERSION_ARGS(PG_KOI8R, PG_UTF8);\n\tconverted = LocalToUtf(src, len, dest,\n\tPG_RETURN_INT32(converted);\nDatum\n\tunsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2);", "partial_line": "unsigned char *src = (un", "completion": "unsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2); <|endoftext|>"}
{"context": "if (sqlca.sqlcode < 0) sqlprint ( );}\nif (sqlca.sqlcode < 0) sqlprint ( );}\n#line 26 \"dynalloc2.pgc\"\n#line 29 \"dynalloc2.pgc\"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);", "partial_line": "if (sqlca.sqlcode < 0)", "completion": "if (sqlca.sqlcode < 0) sqlprint ( );} <|endoftext|>"}
{"context": "}\n}\ngenerate_series_step_int4(PG_FUNCTION_ARGS)\n\tint32\t\tresult;\n\t\tif (PG_NARGS() == 3)", "partial_line": "result", "completion": "result = fctx->current; <|endoftext|>"}
{"context": "\tenumtypoid = get_fn_expr_argtype(fcinfo->flinfo, 0);\n\t\t\t\t errmsg(\"enum %s contains no values\",\n\tOid\t\t\tenumtypoid;\n\tOid\t\t\tmax;\n\tif (!OidIsValid(max))", "partial_line": "PG_RE", "completion": "PG_RETURN_OID(max); <|endoftext|>"}
{"context": "\t\tMemoryContextSwitchTo(oldcxt);\n\t\tif (status == BGWH_STOPPED)\n\t\t\tLWLockAcquire(LogicalRepWorkerLock, LW_EXCLUSIVE);\n\t\trc = WaitLatch(MyLatch,\n\t{", "partial_line": "LogicalRepWork", "completion": "LogicalRepWorker *w = &LogicalRepCtx->workers[i]; <|endoftext|>"}
{"context": "\t\t\t\t \"left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) \"\n{\n\tchar\t   *sql,\n\twhile ((p = strchr(p, ':')) != NULL)\n\t\tchar\t\tvar[13];", "partial_line": "char", "completion": "char\t   *name; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tlev = LOGSTMT_DDL;\n\t\tcase T_CreateStatsStmt:\n\t\t\t\tPlannedStmt *stmt = (PlannedStmt *) parsetree;", "partial_line": "case C", "completion": "case CMD_SELECT: <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"invalid connection type \\\"%s\\\"\",\n\t\t\t\t errmsg(\"end-of-line before database specification\"),\n\t\t\t\t errcontext(\"line %d of configuration file \\\"%s\\\"\",\n\t}\n\tparsedline->databases = NIL;", "partial_line": "foreach(token", "completion": "foreach(tokencell, tokens) <|endoftext|>"}
{"context": "\t\touter_path_rows = 1;\n\t}\n\t\tCost\t\tinner_run_cost = workspace->inner_run_cost;\n\t\touter_unmatched_rows = outer_path_rows - outer_matched_rows;\n\t\t\t\trun_cost += (outer_matched_rows - 1) * inner_rescan_run_cost * inner_scan_frac;", "partial_line": "ntuples += outer_unmatched_row", "completion": "ntuples += outer_unmatched_rows * inner_path_rows; <|endoftext|>"}
{"context": "\tif (XLogReadBufferForRedo(record, block_id, &buffer) == BLK_NEEDS_REDO)\n}\n\tGinInitBuffer(buffer, GIN_DATA | GIN_LEAF | GIN_COMPRESSED);\nstatic void\n{", "partial_line": "IndexTuple", "completion": "IndexTuple\titup; <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\tint\t\t\tntups,\n\t\t\t\t\t\t \"WHERE deptype != 'p' AND deptype != 'e'\\n\");\n\t\t\t\t\t\t \"classid = 'pg_amop'::regclass AND objid = o.oid \"\n\t\tobjId.oid = atooid(PQgetvalue(res, i, i_objid));", "partial_line": "refobjId.tableoid = atooid(PQg", "completion": "refobjId.tableoid = atooid(PQgetvalue(res, i, i_refclassid)); <|endoftext|>"}
{"context": "\t\tclamped_nvalues2 = Min(sslot2->nvalues, nd2);\n\t\tInitFunctionCallInfoData(*fcinfo, &eqproc, 2, collation,\n\t\tfor (i = 0; i < sslot1->nvalues; i++)\n\t\t\t\tif (hasmatch2[j])\n\t\t\t\tfcinfo->isnull = false;", "partial_line": "hasmatc", "completion": "hasmatch1[i] = hasmatch2[j] = true; <|endoftext|>"}
{"context": "\tint\t\t\tstatus = 0;\n\t\treturn -1;\n\t\t\tif (len < MD5_DIGEST_LENGTH)\n\t\tcase PG_SHA1:\n\t\t\tbreak;", "partial_line": "status =", "completion": "status = HMAC_Final(ctx->hmacctx, dest, &outlen); <|endoftext|>"}
{"context": "\tswitch (reason)\n\t{\n\t\tcase WALRCV_WAKEUP_TERMINATE:\n\t}\n}", "partial_line": "WalRcv", "completion": "WalRcvForceReply(void) <|endoftext|>"}
{"context": "\t\t\tReportApplyConflict(estate, relinfo, LOG, CT_UPDATE_ORIGIN_DIFFERS,\n\t\tMemoryContextSwitchTo(oldctx);\n\t\tInitConflictIndexes(relinfo);\n\telse\n\t\t\t\t\t\t\tremoteslot, newslot, list_make1(&conflicttuple));", "partial_line": "EvalPlan", "completion": "EvalPlanQualEnd(&epqstate); <|endoftext|>"}
{"context": "#define WORKER(state)\t\t((state)->shared && (state)->worker != -1)\nstatic void sort_bounded_heap(Tuplesortstate *state);\nstatic void tuplesort_sort_memtuples(Tuplesortstate *state);\nstatic void tuplesort_heap_insert(Tuplesortstate *state, SortTuple *tuple);\nstatic void tuplesort_heap_delete_top(Tuplesortstate *state);", "partial_line": "static void", "completion": "static void markrunend(LogicalTape *tape); <|endoftext|>"}
{"context": "\t{\n#define MAXAUTOVACPIDS\t10\t\t\n\tint\t\t\ttries;\n\t\tCHECK_FOR_INTERRUPTS();\n\t\t\tuint8\t\tstatusFlags = ProcGlobal->statusFlags[index];", "partial_line": "contin", "completion": "continue; <|endoftext|>"}
{"context": "\tOid\t\t\troleid;\n\tOid\t\t\tfunctionoid;\n\troleid = GetUserId();\n\tmode = convert_function_priv_string(priv_type_text);\nDatum", "partial_line": "has_function_p", "completion": "has_function_privilege_name_id(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\tport->gss->outbuf.length = outbuf.pBuffers[0].cbBuffer;\n\t\t\tFreeContextBuffer(outbuf.pBuffers[0].pvBuffer);\n\t\t\t\tDeleteSecurityContext(sspictx);\n\t\tif (r == SEC_I_CONTINUE_NEEDED)\n\t\t\telog(DEBUG4, \"SSPI continue needed\");", "partial_line": "FreeCrede", "completion": "FreeCredentialsHandle(&sspicred); <|endoftext|>"}
{"context": "\t\tstate->memtuples = NULL;\n\t\tUSEMEM(state, GetMemoryChunkSpace(state->memtuples));\n\t}\n\tif (LACKMEM(state))\n\tMemoryContextSwitchTo(oldcontext);", "partial_line": "if (!optimize_bo", "completion": "if (!optimize_bounded_sort) <|endoftext|>"}
{"context": "\t\tif (att->attisdropped)\n\t\t\tgetTypeOutputInfo(column_type,\n\t\t\t\t\t\t  fcinfo->flinfo->fn_mcxt);\n\t\t\tcolumn_info->column_type = column_type;\n\t\tattr = values[i];", "partial_line": "char", "completion": "char\t\tch = *tmp; <|endoftext|>"}
{"context": "#ifdef SIO_KEEPALIVE_VALS\n\t\t\t\t\t\t\t\t  cancel->keepalives_idle,\n\t\t}\n\t\t\t\t\t\t\t\t cancel->pgtcp_user_timeout))\n\t\t{", "partial_line": "goto cancel", "completion": "goto cancel_errReturn; <|endoftext|>"}
{"context": "\t\tcleanMap = NULL;\n\t\t\t\t\t\t\t TupleDesc cleanTupType,\n\tint\t\t\tcleanLength;\n\tAttrNumber *cleanMap;\n\t\t\tfor (;;)", "partial_line": "return ju", "completion": "return junkfilter; <|endoftext|>"}
{"context": "            }\n    }\nstatic int r_remove_question_suffixes(struct SN_env * z) {\n        z->ket = z->c;\n        z->bra = z->c;", "partial_line": "z->c = z", "completion": "z->c = z->l - m1; <|endoftext|>"}
{"context": "tuple_lock_retry:\n\tresult = heap_lock_tuple(relation, tuple, cid, mode, wait_policy,\n\t{\n\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t SnapshotDirty.xmin,", "partial_line": "switch", "completion": "switch (wait_policy) <|endoftext|>"}
{"context": "\tList\t   *lateral_vars;\n\tif (param_info != NULL)\n\t\t\tOid\t\t\thasheqoperator;\n\t\t\t{\n\t\t\t\tlist_free(*param_exprs);", "partial_line": "expr = (Node *)", "completion": "expr = (Node *) linitial(opexpr->args); <|endoftext|>"}
{"context": "\t\t\t\terrdetail(\"The remote slot has LSN %X/%X and catalog xmin %u, but the local slot has LSN %X/%X and catalog xmin %u.\",\n\t\t\t\t\t\t  remote_slot->catalog_xmin,\n\t\t\t\t\t\t  LSN_FORMAT_ARGS(slot->data.restart_lsn),\n\t\t\t*remote_slot_precedes = true;\n\t{", "partial_line": "if (SnapBuildSnapshot", "completion": "if (SnapBuildSnapshotExists(remote_slot->restart_lsn)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t parser_errposition(cxt->pstate, con->location)));\n\t\t\t\tif (!SUPPORTS_ATTRS(lastprimarycon))\n\t\t\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),\n\t\t\t\telse if (!lastprimarycon->deferrable)\n\t\t\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),", "partial_line": "case CONSTR_ATTR_I", "completion": "case CONSTR_ATTR_IMMEDIATE: <|endoftext|>"}
{"context": "\t\tJsonbValue *o = &result->parseState->contVal;\n\t\t\tdefault:\n\tAssert(dim < ndims);\n\t\t{\n}", "partial_line": "array_to_jsonb_in", "completion": "array_to_jsonb_internal(Datum array, JsonbInState *result) <|endoftext|>"}
{"context": "#define ST_SORT sort_pending_writebacks\n{\n\t\tint\t\t\tahead;\nstatic void\n{", "partial_line": "elog(ERROR,", "completion": "elog(ERROR, \"bad buffer ID: %d\", buffer); <|endoftext|>"}
{"context": "\t\t\tfputs(\"</p>\", fout);\n\t}\n\tfor (p = in; *p; p++)\n\tunsigned int i;\n\t\tfprintf(fout, \"[%scols=\\\"\", !opt_tuples_only ? \"options=\\\"header\\\",\" : \"\");", "partial_line": "for (i = 0; i < cont-", "completion": "for (i = 0; i < cont->ncolumns; i++) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tif (l == -1)\n\t\ts += l;\n\t{\n\t\tif (*++s == '\\0')", "partial_line": "ret", "completion": "return -1; <|endoftext|>"}
{"context": "{\n\t\t\t\ttemp;\n\tleft = geqo_randint(root, num_gene - 1, 0);\n\tif (left > right)\n\t\ttemp = left;", "partial_line": "right =", "completion": "right = temp; <|endoftext|>"}
{"context": "\t0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n\t0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n\t0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n\t0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n\t0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,", "partial_line": "0x86D3D2D4, 0x", "completion": "0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, <|endoftext|>"}
{"context": "\tcheck_stack_depth();\n\telse if (IsA(jtnode, FromExpr))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t lfirst(l),\n\t\t\tnewfromlist = lappend(newfromlist, newchild);\n\t\tJoinExpr   *j;", "partial_line": "Relids\t\tlef", "completion": "Relids\t\tleftrelids; <|endoftext|>"}
{"context": "\trecomputeNamespacePath();\n\t\t!list_member_oid(activeSearchPath, opfnamespace))\nstatic Oid\n\tcolltup = SearchSysCache3(COLLNAMEENCNSP,\n\tif (!HeapTupleIsValid(colltup))", "partial_line": "retur", "completion": "return InvalidOid; <|endoftext|>"}
{"context": "\tpfree(buff_uchar);\n\t\t\t pg_locale_t locale)\n}\n\t\t\t\t\t\t\t\t&buff_conv, buff_uchar, len_uchar);\n\t\t\t\t\t\t\t  &status);", "partial_line": "(errmsg(\"co", "completion": "(errmsg(\"collation failed: %s\", u_errorName(status)))); <|endoftext|>"}
{"context": "extern int french_UTF_8_stem(struct SN_env * z);\nstatic int r_residual_suffix(struct SN_env * z);", "partial_line": "static int", "completion": "static int r_RV(struct SN_env * z); <|endoftext|>"}
{"context": "\tPoint\t   *pt = PG_GETARG_POINT_P(0);\n\tLSEG\t   *lseg = PG_GETARG_LSEG_P(1);\nDatum\n{\n}", "partial_line": "float8", "completion": "float8\t\tresult = 0.0; <|endoftext|>"}
{"context": "\t\t\t}\n\t\ti_conislocal = PQfnumber(res, \"conislocal\");\n\t\t\twhile (++curtblindx < numTables)\n\t\tPQclear(res);\n\t\tint\t\t\tnumConstrs;", "partial_line": "int", "completion": "int\t\t\ti_oid; <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\treturn true;\n\t\t\treturn true;\n{\n\t\t\t\treturn true;", "partial_line": "else if (token_matche", "completion": "else if (token_matches(tok, dbname)) <|endoftext|>"}
{"context": "\tpg_atomic_write_u64(&slot->pss_barrierGeneration, PG_UINT64_MAX);\n{\n\t}\nWaitForProcSignalBarrier(uint64 generation)\n\t\tProcSignalSlot *slot = &ProcSignal->psh_slot[i];", "partial_line": "WAIT_E", "completion": "WAIT_EVENT_PROC_SIGNAL_BARRIER)) <|endoftext|>"}
{"context": "static const symbol s_2_1845[4] = { 'z', 'i', 'j', 'u' };\nstatic const symbol s_2_1848[4] = { 'a', 'n', 'j', 'u' };\nstatic const symbol s_2_1856[2] = { 'k', 'u' };\nstatic const symbol s_2_1860[5] = { 'i', 'j', 'a', 'l', 'u' };\nstatic const symbol s_2_1862[3] = { 'e', 'l', 'u' };", "partial_line": "static const symbol s_2_1874[6] =", "completion": "static const symbol s_2_1874[6] = { 'k', 'i', 'j', 'e', 'm', 'u' }; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\t   &node->iss_Instrument,\n\t\t\tif (!ExecQualAndReset(node->indexqualorig, econtext))\nIndexNextWithReorder(IndexScanState *node)\n\tDatum\t   *lastfetched_vals;", "partial_line": "bool\t   *l", "completion": "bool\t   *lastfetched_nulls; <|endoftext|>"}
{"context": "\tif (cmd)\nATParseTransformCmd(List **wqueue, AlteredTableInfo *tab, Relation rel,\n\tAlterTableCmd *newcmd = NULL;\n\tAlterTableStmt *atstmt = makeNode(AlterTableStmt);\n\t\t\tcase AT_AddConstraint:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t strcmp(te->desc, \"PUBLICATION TABLES IN SCHEMA\") == 0))\n\t\treturn 0;\n\t\treturn 0;\n\t\t\tif (!(ropt->dumpSections & DUMP_PRE_DATA))\n\t\t\tbreak;", "partial_line": "ret", "completion": "return 0; <|endoftext|>"}
{"context": "Datum\n\tchar\t   *result;\n\tif (result)\n\t\tresult = pstrdup(quote_identifier(result));\n\treturn oidrecv(fcinfo);", "partial_line": "return oi", "completion": "return oidsend(fcinfo); <|endoftext|>"}
{"context": "\t\tlock->grantMask &= LOCKBIT_OFF(lockmode);\n\tif (lockMethodTable->conflictTab[lockmode] & lock->waitMask)\n\t\t\tbool wakeupNeeded)\n\t\tdlist_delete(&proclock->lockLink);\n\t\tif (!hash_search_with_hash_value(LockMethodProcLockHash,", "partial_line": "HAS", "completion": "HASH_REMOVE, <|endoftext|>"}
{"context": "\t\t\tselec += hist_part[i] * mult * dist[i] / mcelem_dist[i];\n\t}\n\tpfree(mcelem_dist);\n\tpfree(hist_part);\n\tpfree(elem_selec);", "partial_line": "int", "completion": "int\t\t\tk, <|endoftext|>"}
{"context": "{\n\telse\n\tif (quadrant & 0x2)\n\tif (quadrant & 0x1)\n\t\tnext_rect_box->range_box_y.right.low = centroid->right.high;", "partial_line": "overlap4D(RectBox", "completion": "overlap4D(RectBox *rect_box, RangeBox *query) <|endoftext|>"}
{"context": "\t\t{\n\t\t\tcldConstrId = get_relation_idx_constraint_oid(RelationGetRelid(partTbl),\n\t\t\tif (!OidIsValid(cldConstrId))\n\t{\n\t\tindTup = SearchSysCache1(INDEXRELID,", "partial_line": "tuples +", "completion": "tuples += 1; <|endoftext|>"}
{"context": "\tFmgrInfo\ttypreceive;\n} DeserialIOData;\n\tExpandedArrayHeader *eah;\n\t\t\t\t\t\t\t   sizeof(ArrayMetaState));\n\t\tMemoryContextSwitchTo(oldcxt);", "partial_line": "my_", "completion": "my_extra); <|endoftext|>"}
{"context": "\t{\n\t\tif (*p1++ != *p2++)\n\telse if (locale->is_default)\n#define CHAREQ(p1, p2) wchareq((p1), (p2))\n\t\t while (__l-- > 0) \\", "partial_line": "#define MATCH_LOWER(t, locale) SB_lower_char((unsig", "completion": "#define MATCH_LOWER(t, locale) SB_lower_char((unsigned char) (t), locale) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tbreak;\n\tif (boolmatchstatus == PARTCLAUSE_MATCH_CLAUSE)\n\t\tPartClauseInfo *partclause;\n\t\t\telse if (*clause_steps == NIL)", "partial_line": "partclause = (PartClauseI", "completion": "partclause = (PartClauseInfo *) palloc(sizeof(PartClauseInfo)); <|endoftext|>"}
{"context": "    { ECPGdeallocate(__LINE__, 0, \"con2\", \"stmt_4\");\n#line 149 \"declare.pgc\"\n\tECPGt_char_variable,(ECPGprepared_statement(\"con1\", \"stmt_desc\", __LINE__)),(long)1,(long)1,(1)*sizeof(char), \nif (sqlca.sqlcode < 0) sqlprint();}\n#line 163 \"declare.pgc\"", "partial_line": "#line", "completion": "#line 166 \"declare.pgc\" <|endoftext|>"}
{"context": "\tObjectAddress myself;\n\t\t\tcheckMembershipInCurrentExtension(&myself);\n\t\t\t\t\t errmsg(\"server \\\"%s\\\" already exists, skipping\",\n\taclresult = object_aclcheck(ForeignDataWrapperRelationId, fdw->fdwid, ownerId, ACL_USAGE);\n\tmemset(nulls, false, sizeof(nulls));", "partial_line": "nulls[Anum_pg_foreign_server_srvty", "completion": "nulls[Anum_pg_foreign_server_srvtype - 1] = true; <|endoftext|>"}
{"context": "\t\t\treturn true;\n\t\tif (!type_is_array(srctype))\n\t\t\treturn true;\n\tif (targettype == ANYENUMOID)\n\t\tif (is_complex_array(srctype))", "partial_line": "find_coercion_pathway(Oid targetTypeId,", "completion": "find_coercion_pathway(Oid targetTypeId, Oid sourceTypeId, <|endoftext|>"}
{"context": "#include \"catalog/pg_type.h\"\n#include \"lib/knapsack.h\"\n#include \"utils/backend_status.h\"\n#define EXPRKIND_TABLESAMPLE\t\t9\n{", "partial_line": "List\t   *ac", "completion": "List\t   *activeWindows; <|endoftext|>"}
{"context": "\treturn _bt_search(rel, heaprel, insertstate->itup_key, &insertstate->buf,\n\t\t\t\t\t  BT_WRITE);\n\tItemId\t\tcuritemid = NULL;\n\tOffsetNumber maxoff;\n\tPage\t\tpage;", "partial_line": "int", "completion": "int\t\t\tcurposti = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t unpack_sql_state(edata->sqlerrcode)))\n\t\tgoto failure;\n\t\tgoto failure;\n\tif (!set_string_attr(error, \"column_name\", edata->column_name))\n\t\tgoto failure;", "partial_line": "PyErr_SetObject(excclas", "completion": "PyErr_SetObject(excclass, error); <|endoftext|>"}
{"context": "#include \"common/string.h\"\n#include \"dt.h\"\n#include \"pgtypes_interval.h\"\nstatic void\n\tint\t\t\textra_days;", "partial_line": "if (", "completion": "if (frac == 0) <|endoftext|>"}
{"context": "{\n\telse\n\t\tother = b;\n\t\tpfree(a);\n}", "partial_line": "#ifdef REAL", "completion": "#ifdef REALLOCATE_BITMAPSETS <|endoftext|>"}
{"context": "\t\t\t((ArrayCoerceExpr *) expr)->resultcollid = collation;\n\t\t\tbreak;\n\t\tcase T_ArrayExpr:\n\t\tcase T_CoalesceExpr:\n\t\tcase T_MinMaxExpr:", "partial_line": "((MinMaxE", "completion": "((MinMaxExpr *) expr)->minmaxcollid = collation; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\treturn NULL;", "partial_line": "BitmapAndSt", "completion": "BitmapAndState *bitmapandstate = makeNode(BitmapAndState); <|endoftext|>"}
{"context": "{\n\t\t\tif (object->objectSubId == 0)\n\t\t\t{\n\t\t\t\tif (!attname)\n\t\t\t\tif (proname == NULL)", "partial_line": "SysScanDesc r", "completion": "SysScanDesc rcscan; <|endoftext|>"}
{"context": "\t\t\t0x1063,\t\t\t\t\n\t\t\t0x1068,\t\t\t\t\n\t\t\t0x106C,\t\t\t\t\n\t\t\t0x17C1,\t\t\t\t\n\t\t\t0x19C8,\t\t\t\t", "partial_line": "0x", "completion": "0x1B3F, <|endoftext|>"}
{"context": "#include <signal.h>\n#endif", "partial_line": "bool\t\tproc_exit_inpro", "completion": "bool\t\tproc_exit_inprogress = false; <|endoftext|>"}
{"context": "\t\treturn clause_is_strict_for((Node *) ((ArrayCoerceExpr *) clause)->arg,\n\t\t\t\t\t\t\t\t\tsubexpr, false);\n\tif (IsA(clause, CoerceToDomain))\n\t\t\t\tArrayType  *arrval;\n\t\t\t\t\treturn true;", "partial_line": "nelems = list_length(((ArrayExpr *", "completion": "nelems = list_length(((ArrayExpr *) arraynode)->elements); <|endoftext|>"}
{"context": "#include \"../../Unicode/utf8_to_win1257.map\"\n#include \"../../Unicode/win1251_to_utf8.map\"", "partial_line": "#include \"../../Unicode/w", "completion": "#include \"../../Unicode/win866_to_utf8.map\" <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  false, false);\n\t\t\t\tdefault_str = \"generated by default as identity\";\n\t\t\t{\n\t\t\tprintTableAddCell(&cont, PQgetvalue(res, i, isindexkey_col), true, false);\n\t\tif (fdwopts_col >= 0)", "partial_line": "(storage[0] == T", "completion": "(storage[0] == TYPSTORAGE_MAIN ? \"main\" : <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   rp->r_abbrvar,\n\t\t\t\t\t\tif (*startbuf == '\\0'\n\t\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tdoabbr(ab, zp, rp->r_abbrvar,", "partial_line": "pre", "completion": "prevrp = rp; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   att->atttypmod);\n\t\t\tif (maxlen < 0)\n\t\t\t\t\t\t\tBITMAPLEN(tupdesc->natts)) +\n#define HEAP_OVERHEAD_BYTES_PER_TUPLE \\\n\t\t\t\t\t\t BlockNumber *pages, double *tuples,", "partial_line": "bool", "completion": "bool *recheck, <|endoftext|>"}
{"context": "\t{\n\t\tOid\t\t\targ_type = get_fn_expr_argtype(fcinfo->flinfo, 1);\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tMemoryContextSwitchTo(oldcontext);\n\t\tappendStringInfoChar(state->str, '[');", "partial_line": "(state->val_", "completion": "(state->val_category == JSONTYPE_ARRAY || <|endoftext|>"}
{"context": "        if (ret <= 0) return ret;\n}\n            break;\n                if (ret < 0) return ret;\n}", "partial_line": "if (!among_v", "completion": "if (!among_var) return 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t (Node *) &escontext,\n\t\t\t\t\t\t\t\t\t &result))\nformat_procedure(Oid procedure_oid)\n{\n\tif (HeapTupleIsValid(proctup))", "partial_line": "cha", "completion": "char\t   *nspname; <|endoftext|>"}
{"context": "        case 1:\n            }\n    return 1;\n    z->ket = z->c;\nstatic int r_derivational(struct SN_env * z) {", "partial_line": "z->bra", "completion": "z->bra = z->c; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  !throw_error ? &error : NULL,\n\t\t\t\t\t\t\t\t\t\t\t\tjsexpr->column_name);\n\t\t\t\tif (jbv == NULL)\n\t\t\t\t{\n\t\t\t\t\t}", "partial_line": "else if (jsexp", "completion": "else if (jsexpr->use_json_coercion) <|endoftext|>"}
{"context": "\t{\"zp5\", TZ, -18000},\t\t\n\t{ZULU, TZ, 0},\t\t\t\t\n};\n\t{\"decades\", UNITS, DTK_DECADE}, \n\t{\"hr\", UNITS, DTK_HOUR},\t", "partial_line": "{\"m\", UNITS, DT", "completion": "{\"m\", UNITS, DTK_MINUTE}, <|endoftext|>"}
{"context": "\t\t\t\t\t\tFilePathName(v->mdfd_vfd),\n#ifdef CHECK_WRITE_VS_EXTEND\n\t\tereport(ERROR,\n\t\t\t\t\t\tInvalidBlockNumber)));\n\t\toff_t\t\tseekpos = (off_t) BLCKSZ * segstartblock;", "partial_line": "Assert(segstartbloc", "completion": "Assert(segstartblock + numblocks <= RELSEG_SIZE); <|endoftext|>"}
{"context": "\tif (port->remote_port[0] != '\\0')\n}\n\tint\t\t\tfirstbyte;\n\tpq_startmsgread();\n\t}", "partial_line": "goto rej", "completion": "goto reject; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\ttable_slot_create(rootRelInfo->ri_RelationDesc,\n\t\t\t\t\t\t\t\t\t\t\t\ttgtdesc);\n\t\t\t\t\taction_state->mas_proj =\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;", "partial_line": "table_slot_create(r", "completion": "table_slot_create(resultRelInfo->ri_RelationDesc, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\tcase EXPR_KIND_WINDOW_FRAME_GROUPS:\n\t\t\terr = _(\"set-returning functions are not allowed in window definitions\");\n\t\tcase EXPR_KIND_GROUP_BY:", "partial_line": "case EXP", "completion": "case EXPR_KIND_LIMIT: <|endoftext|>"}
{"context": "\t\t}\n\tStringInfoData issuer;\n\tappendStringInfoString(&buf, \"{ \\\"status\\\": \\\"invalid_token\\\", \");\n\tescape_json(&buf, issuer.data);\n\t\t\"0123456789-._~+/\";", "partial_line": "if (", "completion": "if (header[0] == '\\0') <|endoftext|>"}
{"context": "#define FPOSITIVE_THRESHOLD\t\t0.01\n{\n\tchar\t\telement[MAX_ELEMENT_BYTES];\n\t\t\t\t\t\t\t seed, nfalsepos, (double) nfalsepos / nelements,\nDatum", "partial_line": "int64\t\tnelements = PG_", "completion": "int64\t\tnelements = PG_GETARG_INT64(1); <|endoftext|>"}
{"context": "\t[DO_COLLATION] = PRIO_COLLATION,\n\t[DO_TRIGGER] = PRIO_TRIGGER,\n\t[DO_SEQUENCE_SET] = PRIO_SEQUENCE_SET,\n};\nstatic DumpId postDataBoundId;", "partial_line": "char *b", "completion": "char *buf, int bufsize); <|endoftext|>"}
{"context": "\t\t\t\t\t   index->rd_rel->relam,\n\t\t\t\t\t   RelationGetIndexPredicate(index),\n\t\t\t\t\t   false,\n\tif (indexStruct->indisexclusion)\n\t{", "partial_line": "int\t\t\tn", "completion": "int\t\t\tnumAtts; <|endoftext|>"}
{"context": "static bool _bt_readnextpage(IndexScanDesc scan, BlockNumber blkno,\nstatic void\n\t{\n\t\tsp->buf = InvalidBuffer;\n\tint\t\t\tpage_access = BT_READ;", "partial_line": "BTSta", "completion": "BTStack\t\tnew_stack; <|endoftext|>"}
{"context": "\t\tNERR(REG_ETOOBIG);\n\t\tassert(NISERR());\n\t{\n\t\t\tbreak;\n\t\tcparc(nfa, a, s->tmp, a->to->tmp);", "partial_line": "cleartrave", "completion": "cleartraverse(nfa, start); <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"typelem, typrelid, typarray, \"\n\tres = ExecuteSqlQuery(fout, query->data, PGRES_TUPLES_OK);\n\ti_typisdefined = PQfnumber(res, \"typisdefined\");\n\t\ttyinfo[i].dobj.objType = DO_TYPE;\n\t\tAssignDumpId(&tyinfo[i].dobj);", "partial_line": "if (strcmp(PQgetvalue(", "completion": "if (strcmp(PQgetvalue(res, i, i_typisdefined), \"t\") == 0) <|endoftext|>"}
{"context": "\ttdinfo = (TableDataInfo *) pg_malloc(sizeof(TableDataInfo));\n\ttdinfo->tdtable = tbinfo;\n\t\taddObjectDependency(&tbinfo->stats->dobj, tdinfo->dobj.dumpId);\n\t}\n\t\t\t\ti_objid,", "partial_line": "i_", "completion": "i_refobjid; <|endoftext|>"}
{"context": "#include \"access/timeline.h\"\n#include \"access/xlog_internal.h\"\n#include \"storage/fd.h\"\n\tif (targetTLI == 1)\n\t\tentry->begin = entry->end = InvalidXLogRecPtr;", "partial_line": "if (A", "completion": "if (ArchiveRecoveryRequested) <|endoftext|>"}
{"context": "\t\t\tcase DO_RULE:\nstatic void\n{\n\t\tif (te->nDeps > 0)\n\t\tif (dobj == NULL)", "partial_line": "conti", "completion": "continue; <|endoftext|>"}
{"context": "\t\tereport(ERROR,\nvoid\n\t\t\t\t\t\t\t\tNULL, 1, &skey);\n\t\tbool\t\tisnull;\n\t\tbuild->tgoid = pg_trigger->oid;", "partial_line": "build->tgenabled", "completion": "build->tgenabled = pg_trigger->tgenabled; <|endoftext|>"}
{"context": "\t\tif (!connectOptions1(conn, dbName))\n\t\tif (!connectOptions1(conn, \"\"))\n\t\t{\n\t}\n\t{", "partial_line": "if (!conn->p", "completion": "if (!conn->pghost) <|endoftext|>"}
{"context": "{\n\t\touterslot = fetch_input_tuple(aggstate);\n\t\tadvance_aggregates(aggstate);\n\t}\n\tif (aggstate->hash_batches == NIL)", "partial_line": "&aggsta", "completion": "&aggstate->hash_ngroups_limit, NULL); <|endoftext|>"}
{"context": "{\n\t\tPQExpBuffer q = createPQExpBuffer();\nstatic void\n\tPQExpBuffer query;\n\tchar\t   *stxdef;", "partial_line": "q = createPQEx", "completion": "q = createPQExpBuffer(); <|endoftext|>"}
{"context": "\t\t\t\t\tisascii((unsigned char) text[i]) && text[i] != '_')\n\t\t\t{\n\t\t\t\treturn p;\n\t\t\t}\necpg_is_type_an_array(int type, const struct statement *stmt, const struct variable *var)", "partial_line": "if (!ecpg_type_infoc", "completion": "if (!ecpg_type_infocache_push(&(stmt->connection->cache_head), CHAROID, ECPG_ARRAY_NONE, stmt->lineno)) <|endoftext|>"}
{"context": "\t\ttuplestore_puttupleslot(tuplestorestate, cteslot);\nstatic TupleTableSlot *\n\tCteScanState *node = castNode(CteScanState, pstate);\n}\n\tscanstate->ss.ps.plan = (Plan *) node;", "partial_line": "scanstate-", "completion": "scanstate->eflags = eflags; <|endoftext|>"}
{"context": "} transfer_thread_arg;\nparallel_exec_prog(const char *log_file, const char *opt_log_file,\n\tva_list\t\targs;\n\t\texec_prog(log_file, opt_log_file, true, true, \"%s\", cmd);\n\t\t\tthread_handles = pg_malloc(user_opts.jobs * sizeof(HANDLE));", "partial_line": "if (e", "completion": "if (exec_thread_args == NULL) <|endoftext|>"}
{"context": "ri_ExtractValues(Relation rel, TupleTableSlot *slot,\n\tbool\t\tisnull;\n\t\tattnums = riinfo->fk_attnums;\n\t}\n\t\trel_oid = pk_rel->rd_id;", "partial_line": "Form_pg_attribute att = TupleDescAttr(t", "completion": "Form_pg_attribute att = TupleDescAttr(tupdesc, fnum - 1); <|endoftext|>"}
{"context": "\tRangeTblEntry *rte = root->simple_rte_array[rti];\n\t{\n\t\t\t\t\t\t\t\t jtitem,\n\tAssert(security_level <= root->qual_security_level);\nmark_rels_nulled_by_join(PlannerInfo *root, Index ojrelid,", "partial_line": "RelOptInfo *rel = r", "completion": "RelOptInfo *rel = root->simple_rel_array[relid]; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t(errmsg(\"index \\\"%s.%s\\\" was reindexed\",\n\t\t{\n\tMemoryContextDelete(private_context);\n\treturn true;", "partial_line": "Anum_pg_inherits_i", "completion": "Anum_pg_inherits_inhrelid, <|endoftext|>"}
{"context": "\t\tif (strcmp(defel->defname, \"subtype\") == 0)\n\t\t\t\terrorConflictingDefElem(defel, pstate);\n\t\t}\n\t\t\t\terrorConflictingDefElem(defel, pstate);\n\t\t{", "partial_line": "errorConflictingDefElem(def", "completion": "errorConflictingDefElem(defel, pstate); <|endoftext|>"}
{"context": "#define MAX_REPORTED_DEPS 100\n\tallocedobjects = 128;\t\t\n\tScanKeyInit(&key[1],\n\tscan = systable_beginscan(sdepRel, SharedDependReferenceIndexId, true,\n\t\t\t\t\t\t\t  NULL, 2, key);", "partial_line": "object.classId =", "completion": "object.classId = sdepForm->classid; <|endoftext|>"}
{"context": "\tspicallbackarg.mode = plan->parse_mode;\n\ttuptable->vals[tuptable->numvals] = ExecCopySlotHeapTuple(slot);\n\tSPICallbackArg spicallbackarg;\n\tspicallbackarg.mode = plan->parse_mode;\n\tspierrcontext.callback = _SPI_error_callback;", "partial_line": "spierrcontext.arg = &spic", "completion": "spierrcontext.arg = &spicallbackarg; <|endoftext|>"}
{"context": "void\ngetTypeBinaryOutputInfo(Oid type, Oid *typSend, bool *typIsVarlena)\n\t*typSend = pt->typsend;\n\tHeapTuple\ttp;\n\ttp = SearchSysCache1(TYPEOID, ObjectIdGetDatum(typid));", "partial_line": "Form_pg_type typtup = (Fo", "completion": "Form_pg_type typtup = (Form_pg_type) GETSTRUCT(tp); <|endoftext|>"}
{"context": "\tprintf(_(\"  -I, --no-inherit          role does not inherit privileges\\n\"));\n\tprintf(_(\"  -L, --no-login            role cannot login\\n\"));\n\tprintf(_(\"  -s, --superuser           role will be superuser\\n\"));\n\tprintf(_(\"  -V, --version             output version information, then exit\\n\"));\n\tprintf(_(\"  --interactive             prompt for missing role name and attributes rather\\n\"", "partial_line": "\"", "completion": "\"                            (default)\\n\")); <|endoftext|>"}
{"context": "\tmyopt.translate_header = true;\n\tPQclear(res);\n}\n\t\tappendPQExpBuffer(&buf,\n\t\t\t\t\t\t  \"  CASE d.datlocprovider \"", "partial_line": "appe", "completion": "appendPQExpBuffer(&buf, <|endoftext|>"}
{"context": "RelationCloseCleanup(Relation relation)\n\tif (RelationHasReferenceCountZero(relation) &&\n\tForm_pg_class relp;\n\t\t\trelation->rd_rel->relkind == RELKIND_PARTITIONED_INDEX) &&\n\t\t\t RelationGetRelid(relation));", "partial_line": "pfree(relation->", "completion": "pfree(relation->rd_options); <|endoftext|>"}
{"context": "\t\tstruct subre *next = sr->sibling;\nstatic void\n\t\tsr->child = v->treefree;\n}\n\t{", "partial_line": "if (t2->", "completion": "if (t2->flags & CAP) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tfalse,\n\t}\n\t\t\t\t\t\t\t\t\t\t src_restart_lsn);\n\t\t\tsrc_islogical != copy_islogical ||\n\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "errhint(\"Retry when the source replication", "completion": "errhint(\"Retry when the source replication slot's confirmed_flush_lsn is valid.\"))); <|endoftext|>"}
{"context": "\t\t\tchild_privs = bms_add_member(child_privs,\n\twhole_row = bms_is_member(InvalidAttrNumber - FirstLowInvalidHeapAttributeNumber,\n\t\tattno++;\n\t\t\t\t\t\t\t\t\t\t var->varattno - FirstLowInvalidHeapAttributeNumber);\n\t\t\telog(ERROR, \"rel with relid %u is not a child rel\", rel->relid);", "partial_line": "Assert(root->ap", "completion": "Assert(root->append_rel_array != NULL); <|endoftext|>"}
{"context": "\t\t\t\ti;\n\tbool\t\tscan_default;\n\t\t{\n\t}\n\t\tint\t\t\tpartindex;", "partial_line": "partindex = context->", "completion": "partindex = context->boundinfo->indexes[i]; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\titer.cur);\nAssertChangeLsnOrder(ReorderBufferTXN *txn)\n\t\tAssert(txn->first_lsn <= cur_change->lsn);\n\t\tif (txn->end_lsn != InvalidXLogRecPtr)\nReorderBufferTXN *", "partial_line": "Assert(txn->first", "completion": "Assert(txn->first_lsn != InvalidXLogRecPtr); <|endoftext|>"}
{"context": "\tprintf(_(\"  -P PASSWORD     password of account to register PostgreSQL server\\n\"));\nset_mode(char *modeopt)\n\t}\n\t\tsig = SIGINT;\n\telse if (strcmp(signame, \"ABRT\") == 0)", "partial_line": "else if (strcmp(signam", "completion": "else if (strcmp(signame, \"USR1\") == 0) <|endoftext|>"}
{"context": "\t\tif (buf_ptr[1] == 'b' || buf_ptr[1] == 'B')\n\t\t    CHECK_SIZE_TOKEN(len);\n\t\t\t    seenexp++;\n\t\t\t    if (*buf_ptr == '+' || *buf_ptr == '-')\n\t\t}", "partial_line": "if (*(buf_ptr + 1", "completion": "if (*(buf_ptr + 1) == '\\n') { <|endoftext|>"}
{"context": "static const symbol s_55_29[8] = { 0xCE, 0xBF, 0xCE, 0xBC, 0xCE, 0xBF, 0xCF, 0x84 };\n{ 8, s_55_2, 0, 1, 0},\n{ 10, s_55_3, 0, 1, 0},\n{ 8, s_55_11, 0, 1, 0},\n{ 8, s_55_26, 19, 1, 0},", "partial_line": "{ 6, s_55", "completion": "{ 6, s_55_34, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\t\t\tlateral_relids = bms_add_member(lateral_relids,\n\t\t\t\tPlaceHolderVar *phv = (PlaceHolderVar *) node;\n\t\t\t}\n\t{", "partial_line": "if (ph", "completion": "if (phinfo->ph_lateral == NULL) <|endoftext|>"}
{"context": "\t\tresult = HeapTupleGetDatum(tuple);\n{\n\tif (SRF_IS_FIRSTCALL())\n\t\ttext\t   *prsname = PG_GETARG_TEXT_PP(0);\ntypedef struct", "partial_line": "int", "completion": "int\t\t\tcur; <|endoftext|>"}
{"context": "\tif (transfuncName == NIL)\n\t\tif (mtransfuncName != NIL)\n\t\tif (minitval != NULL)\n\tif (mfinalfuncModify == 0)\n\t{", "partial_line": "if (baseType", "completion": "if (baseType == NULL) <|endoftext|>"}
{"context": "\tdshash_strhash,\n\tif (!found)\ninit_dsm_registry(void)\n}\nGetNamedDSMSegment(const char *name, size_t size,", "partial_line": "(errmsg(\"", "completion": "(errmsg(\"DSM segment name cannot be empty\"))); <|endoftext|>"}
{"context": "\t\tMarkBufferDirty(metabuffer);\n\t\t\tXLogRegisterBuffer(0, metabuffer,\n\t\t\t\t   Page page, OffsetNumber startoff)\n\tOffsetNumber attrnum;\n\tItemPointerSetInvalid(&heapptr);", "partial_line": "Datum\t\tc", "completion": "Datum\t\tcurkey; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\t\tjfe = transformJsonTableColumn(rawc, (Node *) param,\n\t\t\t\telog(ERROR, \"unknown JSON_TABLE column type: %d\", (int) rawc->coltype);\n\t\t\t\tbreak;\n{", "partial_line": "transformJsonTableColumn(JsonTableColumn *jtc, N", "completion": "transformJsonTableColumn(JsonTableColumn *jtc, Node *contextItemExpr, <|endoftext|>"}
{"context": "\t\t\t\tpsprintf(_(\"this build does not support compression with %s\"),\n#else\n\t\t\tbreak;\n\tif (specification == NULL)\n\t\treturn;", "partial_line": "result->", "completion": "result->level = bare_level; <|endoftext|>"}
{"context": "\t\t\t\tx->parent->parent->color = RBTRED;\n\t\t\t\t\tx = x->parent;\n\t\t\t\tx->parent->color = RBTBLACK;\n\t\t\t\trbt_rotate_right(rbt, x->parent->parent);\n\t\t\t}", "partial_line": "x->parent->pa", "completion": "x->parent->parent->color = RBTRED; <|endoftext|>"}
{"context": "\t\tfile->pos += nthistime;\n\t\t\t\t\t   nread, start_size));\n\treturn nread;\nsize_t\n\tBufFileReadCommon(file, ptr, size, true, false);", "partial_line": "BufFileReadMaybeEOF(BufFile", "completion": "BufFileReadMaybeEOF(BufFile *file, void *ptr, size_t size, bool eofOK) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tfnbuf, strerror_r(errno, sebuf, sizeof(sebuf)));\n\t{\n\t\thave_cert = true;\n\tif (!(conn->ssl = SSL_new(SSL_context)) ||\n#ifdef LIBRESSL_VERSION_NUMBER", "partial_line": "#e", "completion": "#else <|endoftext|>"}
{"context": "\t\tmyrelid = RangeVarGetRelidExtended(rv, lockmode,\n\t\trel = table_open(myrelid, NoLock);\n\t\ttruncate_check_activity(rel);\n\t\t\t\trel = table_open(childrelid, NoLock);\n\t\t\t\tif (RELATION_IS_OTHER_TEMP(rel))", "partial_line": "truncate_check_activ", "completion": "truncate_check_activity(rel); <|endoftext|>"}
{"context": "Datum\n\tPG_FREE_IF_COPY(jba, 0);\n\tPG_FREE_IF_COPY(jbb, 1);\n}\n\tJsonb\t   *jbb = PG_GETARG_JSONB_P(1);", "partial_line": "PG_R", "completion": "PG_RETURN_BOOL(res); <|endoftext|>"}
{"context": "\tCost\t\tcpu_per_tuple;\n\tget_tablespace_page_costs(baserel->reltablespace,\n\t\t\t\t  int input_disabled_nodes,\n\tdouble\t\tlogN;\n\t\tpath->path.rows = *rows;", "partial_line": "comparison_cost = 2.0 * cpu_o", "completion": "comparison_cost = 2.0 * cpu_operator_cost; <|endoftext|>"}
{"context": "\tBrinInsertState *bistate;\n}\nbool\nbrininsert(Relation idxRel, Datum *values, bool *nulls,\n\torigHeapBlk = ItemPointerGetBlockNumber(heaptid);", "partial_line": "heapBlk = (origHeapBlk / pagesPer", "completion": "heapBlk = (origHeapBlk / pagesPerRange) * pagesPerRange; <|endoftext|>"}
{"context": "\tif (!TransactionIdIsValid(slot->data.xmin) &&\n\t\tTransactionIdIsValid(slot->effective_xmin))\n\t{\n\t\tSpinLockAcquire(&slot->mutex);\n\t\tConditionVariableBroadcast(&slot->active_cv);", "partial_line": "MyReplicationSl", "completion": "MyReplicationSlot = NULL; <|endoftext|>"}
{"context": "\t\t{\n\t{\n\t\ttoken_count++;\n\tif (token_count < 2)\n\tif (token_count != 3)", "partial_line": "re", "completion": "return -1; <|endoftext|>"}
{"context": "\t\t\treturn -1;\n\t\t}\n\t\tmemcpy(PqGSSSendBuffer + PqGSSSendLength, &netlen, sizeof(uint32));\n\t}\n\tAssert(len == bytes_encrypted);", "partial_line": "if (PqGSSResultNext", "completion": "if (PqGSSResultNext < PqGSSResultLength) <|endoftext|>"}
{"context": "\t\t\"subscription\", OBJECT_SUBSCRIPTION\n\t\t\t\t\t\t\t\t\t\t\t\t\tLOCKMODE lockmode, bool missing_ok);\nstatic ObjectAddress get_object_address_relobject(ObjectType objtype,\n\t\t\t\t\t\t\t\t\t\t\t\t  LOCKMODE lockmode, bool missing_ok);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbool missing_ok);", "partial_line": "bool", "completion": "bool missing_ok); <|endoftext|>"}
{"context": "\tcontext.first = true;\t\t\n\t\tint\t\t\ti1,\n\t\t\t\tintervalsLower[i - FirstOffsetNumber].lower = box->low.y;\n\t\t\t\t\tleftUpper = intervalsLower[i1].upper;\n\t\t}", "partial_line": "leftUpper = in", "completion": "leftUpper = intervalsUpper[i2].upper; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t(strategy > InvalidStrategy && strategy <= BTMaxStrategyNumber))\n\tamroutine = GetIndexAmRoutineByAmId(amoid, false);\n\tStrategyNumber result;\nDatum", "partial_line": "amvalida", "completion": "amvalidate(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t}\n\treturn result;\n\tNumeric\t\tnum = PG_GETARG_NUMERIC(0);\n}\n\tPG_RETURN_NUMERIC(int64_to_numeric(val));", "partial_line": "int", "completion": "int64 <|endoftext|>"}
{"context": "\topno = ((OpExpr *) rinfo->clause)->opno;\n\trightvar = (Expr *) get_rightop(rinfo->clause);\n\tright_relids = rinfo->right_relids;\n\t\tint\t\t\tcoal_idx = -1;\n\t\tif (!cur_ec->ec_has_const)", "partial_line": "if (!equal(rinfo->mergeopfamilies,", "completion": "if (!equal(rinfo->mergeopfamilies, cur_ec->ec_opfamilies)) <|endoftext|>"}
{"context": "\tfps = (FixedParallelState *)\n\tfps->database_id = MyDatabaseId;\n\tSpinLockInit(&fps->mutex);\n\t\tchar\t   *tstatespace;\n\t\tchar\t   *clientconninfospace;", "partial_line": "shm_toc_inse", "completion": "shm_toc_insert(pcxt->toc, PARALLEL_KEY_TRANSACTION_SNAPSHOT, <|endoftext|>"}
{"context": "\tdigest[10] = ctx->md5_st8[9];\n\tdigest[14] = ctx->md5_st8[13];\n\tctx->md5_stc = MD5_C0;\n}\n\t\t\tmd5_calc(data + i, ctx);", "partial_line": "ctx->md5_i = l", "completion": "ctx->md5_i = len - i; <|endoftext|>"}
{"context": "\t\t\t\t\t\tv_values = v_outervalues;\n\t\t\t\t\t\tv_nulls = v_scannulls;\n\t\t\t\t\tvalue = l_load_gep1(b, TypeSizeT, v_values, v_attnum, \"\");\n\t\t\t\t\tLLVMBuildStore(b, value, v_resvaluep);\n\t\t\tcase EEOP_INNER_SYSVAR:", "partial_line": "build_EvalXFunc(b, mod, \"ExecEva", "completion": "build_EvalXFunc(b, mod, \"ExecEvalWholeRowVar\", <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   exprTypmod(rawExpr),\n\t\t\t\t\t\t\t\t   true));\n\tList\t   *result;\n\tbool\t\tisnull;\n\tMemoryContext oldcxt;", "partial_line": "Bitmapset", "completion": "Bitmapset  *uindexattrs; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\tpubform->pubviaroot,\n\t\t\t\tpubdesc->gencols_valid_for_update = !invalid_gen_col;\n\tif (relation->rd_pubdesc)\n\t\trelation->rd_pubdesc = NULL;\n{", "partial_line": "Memo", "completion": "MemoryContext oldcxt; <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\tnewes->next = NULL;\n\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&TTSOpsMinimalTuple);\n\t\t\tfcache->junkFilter = ExecInitJunkFilterConversion(resulttlist,", "partial_line": "fcache->junkFilter = ExecInitJunkFi", "completion": "fcache->junkFilter = ExecInitJunkFilter(resulttlist, slot); <|endoftext|>"}
{"context": "distribute_qual_to_rels(PlannerInfo *root, Node *clause,\n\t\tJoinTreeItem *pitem;\n\t\tAssert(root->hasLateralRTEs);\t\n\t\t\t}\n\t\telse if (contain_volatile_functions(clause))", "partial_line": "relids = bms_c", "completion": "relids = bms_copy(qualscope); <|endoftext|>"}
{"context": "#include \"common/string.h\"\n#ifdef ENABLE_GSS\n#endif\n};\n#ifdef USE_BSD_AUTH", "partial_line": "\"bs", "completion": "\"bsd\", <|endoftext|>"}
{"context": "\tBlockNumber next_eager_scan_region_start;\ntypedef struct LVSavedErrInfo\n\tOffsetNumber offnum;\nstatic void heap_vacuum_eager_scan_setup(LVRelState *vacrel,\nstatic BlockNumber heap_vac_scan_next_block(ReadStream *stream,", "partial_line": "bool sharelock,", "completion": "bool sharelock, Buffer vmbuffer); <|endoftext|>"}
{"context": "void\n\tecxt_callback->function = function;\n\tecxt_callback->arg = arg;\n\tExprContext_CB **prev_callback;\n\t}", "partial_line": "Datum", "completion": "Datum\t\tresult; <|endoftext|>"}
{"context": "}\n\tuse_wal = XLogIsNeeded() &&\n\t\tpiv_flags = PIV_LOG_WARNING;\n\t\t\tpiv_flags |= PIV_IGNORE_CHECKSUM_FAILURE;\n\t\t{", "partial_line": "forkNu", "completion": "forkNum); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t \"    <xsd:element name=\\\"%s\\\" type=\\\"%s\\\"/>\\n\",\n\t\tappendStringInfoString(&result,\n\tappendStringInfo(&result,\n\t\t\t\t\t xmlsn, schematypename);\n\treturn result.data;", "partial_line": "initStr", "completion": "initStringInfo(&result); <|endoftext|>"}
{"context": "\tif (hashtable->parallel_state != NULL &&\n\t\t\t   BarrierPhase(&batch->batch_barrier) == PHJ_BATCH_SCAN);\n\t\t}\n\t\t\tAssert(BarrierPhase(&batch->batch_barrier) == PHJ_BATCH_FREE);\n\t\t\t\tHashMemoryChunk chunk =", "partial_line": "batch->size + sizeo", "completion": "batch->size + sizeof(dsa_pointer_atomic) * hashtable->nbuckets); <|endoftext|>"}
{"context": "\tDO_DB(_dump_lru());\n{\n\t--nfile;\n{\n\tDO_DB(elog(LOG, \"Insert %d (%s)\",", "partial_line": "DO_DB(_dump_l", "completion": "DO_DB(_dump_lru()); <|endoftext|>"}
{"context": "\tPartitionRangeBound **all_bounds,\n\tall_bounds = (PartitionRangeBound **)\n\t\t\tdefault_index = i;\n\t\tall_bounds[ndatums++] = lower;\n\tAssert(ndatums == nparts * 2 ||", "partial_line": "qsort_arg(all_boun", "completion": "qsort_arg(all_bounds, ndatums, <|endoftext|>"}
{"context": "\tconst char *tmp;\n\t\tappendPQExpBufferChar(buffer, ',');\n\t\t\t}\n\t\tchar\t   *value;\n\t\t\t\t\t  const char *schemavar, const char *namevar,", "partial_line": "const char *altnamevar, c", "completion": "const char *altnamevar, const char *visibilityrule, <|endoftext|>"}
{"context": "#include <fcntl.h>\n#include <unistd.h>\n\t\treturn -1;\t\t\t\t\n\tstrcat(fullname, name);", "partial_line": "retu", "completion": "return NULL; <|endoftext|>"}
{"context": "\t}\n\telement_type = element_type1;\n\tndims2 = ARR_NDIM(v2);\n\t\tPG_RETURN_ARRAYTYPE_P(v1);\n\t\t\t\t(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),", "partial_line": "errmsg(\"cannot concatena", "completion": "errmsg(\"cannot concatenate incompatible arrays\"), <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t{\n\t\t\t\t\tdataoff = SHORTALIGN(dataoff);\n\t\t\t\tif (ptr1->haspos)\n\t\t\t\t\tmemcpy(data + dataoff, _POSVECPTR(in1, ptr1), POSDATALEN(in1, ptr1) * sizeof(WordEntryPos) + sizeof(uint16));", "partial_line": "if (ad", "completion": "if (addlen == 0) <|endoftext|>"}
{"context": "\t\telse\n\t\t\tstatic Oid\tsuffixcollation = 0;\n\t\t\t\tcmptxt[len] = suffixchar;\n\t\t\t}\n\t\t\tif (datatype == BYTEAOID)", "partial_line": "workstr_const =", "completion": "workstr_const = string_to_const(workstr, datatype); <|endoftext|>"}
{"context": "\t\tisIDKey = (indexOid == relreplindex);\n\t\t\tif (attrnum != 0)\n\t\t\t\tif (isKey && i < indexDesc->rd_index->indnkeyatts)\n\t\t\t\t\tuindexattrs = bms_add_member(uindexattrs,\n\t\t\t\tif (isPK && i < indexDesc->rd_index->indnkeyatts)", "partial_line": "list_free(inde", "completion": "list_free(indexoidlist); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t ObjectIdGetDatum(operatorid),\nSelectivity\n\t\t\t\t\t Oid funcid,\n\t\t\t\t\t SpecialJoinInfo *sjinfo)\n\t\t\t\t\t\t\t\t\t\t PointerGetDatum(&req)));", "partial_line": "req.root =", "completion": "req.root = root; <|endoftext|>"}
{"context": "}\nconst TupleTableSlotOps *\n\t}\n\t\treturn &TTSOpsVirtual;\nconst TupleTableSlotOps *", "partial_line": "return N", "completion": "return NULL; <|endoftext|>"}
{"context": "\tTV(\"UTF-8\", \"1\"),\n\tTV(\"UTF-8\", \"'\"),\n\tTV(\"UTF-8\", \"1\\xF0\\\"; \"),\n\tTV(\"UTF-8\", \"some\\0\"),\n\tTV(\"GB18030\", \"\\\\\\x81\\x5c\\\"\"),", "partial_line": "TV(\"gbk\",", "completion": "TV(\"gbk\", \"\\x80\"), <|endoftext|>"}
{"context": "\t\t\t\t vactuples, vacthresh, instuples, vacinsthresh, anltuples, anlthresh);\n\t\t\t(vac_ins_base_thresh >= 0 && instuples > vacinsthresh);\n\t\t*dovacuum = force_vacuum;\n\tif (relid == StatisticRelationId)\n\tint\t\t\tlen;", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t}\n\tif (IsA(node, PathTarget))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontext);\ncontain_volatile_functions_after_planning(Expr *expr)\n\treturn (func_id != F_NEXTVAL &&", "partial_line": "contain_volatile_functions_n", "completion": "contain_volatile_functions_not_nextval_walker(Node *node, void *context) <|endoftext|>"}
{"context": "\t\t}\n\t\t\tprocform->amproclefttype == thisgroup->lefttype &&\n\t\t\t\tthisgroup->functionset |= ((uint64) 1) << procform->amprocnum;\n\t\t\t}\n\t\t\t  (oprform->amoplefttype == procform->amproclefttype &&", "partial_line": "thisgroup->lefttype = oprform-", "completion": "thisgroup->lefttype = oprform->amoplefttype; <|endoftext|>"}
{"context": "\t\tNode\t   *n = lfirst(fl);\n\t\tsetNamespaceLateralState(namespace, true, true);\n\tint\t\t\tcolcount = 0;\n\tattnum = 0;\n\t\tchar\t   *colname = strVal(lfirst(lc));", "partial_line": "res_nscolumns[colcount] = src_nscolu", "completion": "res_nscolumns[colcount] = src_nscolumns[attnum - 1]; <|endoftext|>"}
{"context": "\tSnapBuild  *builder = ctx->snapshot_builder;\n\t\t\t\txl_xact_parsed_commit parsed;\n\t\t\t\tDecodeCommit(ctx, buf, &parsed, xid, two_phase);\n\t\t\t}\n\t\t\t\txl_xact_abort *xlrec;", "partial_line": "pars", "completion": "parsed.twophase_gid)); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tMemoryContext old_context;\n\t\t\tdouble\t\tcorr_xsum,\n\t\t\tcorr_xsum = ((double) (values_cnt - 1)) *\n\t\t\tstats->stakind[slot_idx] = STATISTIC_KIND_CORRELATION;", "partial_line": "else if (nonnul", "completion": "else if (nonnull_cnt > 0) <|endoftext|>"}
{"context": "\t\tColumnIOData *column_info = &my_extra->columns[i];\n\t\tOid\t\t\tcolumn_type = att->atttypid;\n\t\t\tcontinue;\n\t\t\tcoltypoid < FirstGenbkiObjectId &&\n\t\t\t\t\t\t\tcolumn_type,", "partial_line": "FORMAT_TYPE_A", "completion": "FORMAT_TYPE_ALLOW_INVALID), <|endoftext|>"}
{"context": "\t\t\tif (lmatch == TS_MAYBE || rmatch == TS_MAYBE)\n\t\t\t\tRdata.width = 0;\n\t\t\tLoffset = maxwidth - Ldata.width;\n\t\t\t\t(void) TS_phrase_output(data, &Ldata, &Rdata,\n\t\t\t{", "partial_line": "data", "completion": "data->negate = true; <|endoftext|>"}
{"context": "    lab3:\n            }\n            z->c = c9;\n                if (ret == 0) goto lab5;\n    }", "partial_line": "la", "completion": "lab2: <|endoftext|>"}
{"context": "\tsbsref->reftypmod = -1;\nstatic bool\njsonb_subscript_check_subscripts(ExprState *state,\n\t\t\t\t\t  ExprEvalStep *op,\n{", "partial_line": "SubscriptingRefState *sbsre", "completion": "SubscriptingRefState *sbsrefstate = op->d.sbsref.state; <|endoftext|>"}
{"context": "\tchar\t   *buf;\n\tParseScript(buf, filename, weight);\n{\n{\n\tfor (i = 0; i < lengthof(builtin_script); i++)", "partial_line": "if", "completion": "if (found == 1) <|endoftext|>"}
{"context": "\tif (len <= 0)\n\t{\n\t\tif (PG_VALID_BE_ENCODING(encoding))\n\t\t\t{\n\t\t\t}", "partial_line": "retur", "completion": "return unconstify(char *, s); <|endoftext|>"}
{"context": "\tresult = ++(btvacinfo->cycle_ctr);\n\tLWLockAcquire(BtreeVacuumLock, LW_EXCLUSIVE);\n\t\tBTOneVacInfo *vac = &btvacinfo->vacuums[i];\n\t_bt_end_vacuum((Relation) DatumGetPointer(arg));\n\treturn size;", "partial_line": "btvacinfo = (BTVac", "completion": "btvacinfo = (BTVacInfo *) ShmemInitStruct(\"BTree Vacuum State\", <|endoftext|>"}
{"context": "\t\t\tvalue = PointerGetDatum(PG_DETOAST_DATUM(value));\n\t\tif (totbytes / nbytes != nitems ||\n\t\t\t!AllocSizeIsValid(totbytes))\n\t\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),\n\t\t\tp += ArrayCastAndSet(value, elmlen, elmbyval, elmalign, p);", "partial_line": "int\t\t\tdata", "completion": "int\t\t\tdataoffset; <|endoftext|>"}
{"context": "            break;\n    int among_var;\n    if (z->c + 1 >= z->l || z->p[z->c + 1] != 101) return 0;\n            }\n        case 4:", "partial_line": "{   int ret = slice", "completion": "{   int ret = slice_from_s(z, 4, s_6); <|endoftext|>"}
{"context": "isTempToastNamespace(Oid namespaceId)\n\tif (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)\n\t\treturn false;\t\t\t\n\tPGPROC\t   *proc;\n\t\treturn TEMP_NAMESPACE_IDLE;", "partial_line": "GetTempNamespaceP", "completion": "GetTempNamespaceProcNumber(Oid namespaceId) <|endoftext|>"}
{"context": "static void prepare_vacuum_command(PQExpBuffer sql, int serverVersion,\n\t\t{\"username\", required_argument, NULL, 'U'},\n\t\t{\"full\", no_argument, NULL, 'f'},\n\t};\n\tconst char *dbname = NULL;", "partial_line": "memset(&vacopts, 0", "completion": "memset(&vacopts, 0, sizeof(vacopts)); <|endoftext|>"}
{"context": "\tif (NUMERIC_IS_SPECIAL(rmin))\n\t\t\t\t\terrcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\telse\n\tinit_var_from_num(rmax, &rmax_var);\n{", "partial_line": "init_var(", "completion": "init_var(&result); <|endoftext|>"}
{"context": "#include \"replication/logical.h\"\n#include \"utils/array.h\"\nbinary_upgrade_set_next_pg_type_oid(PG_FUNCTION_ARGS)\n\tOid\t\t\ttypoid = PG_GETARG_OID(0);\n}", "partial_line": "binary_upgr", "completion": "binary_upgrade_set_next_array_pg_type_oid(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\taccessMethodForm = (Form_pg_am) GETSTRUCT(tuple);\n\tindexInfo = makeIndexInfo(numberOfAttributes, numberOfAttributes,\n\ttypeIds = palloc_array(Oid, numberOfAttributes);\n\t\t\t\t\t  typeIds, collationIds, opclassIds, opclassOptions,\n\t\t\t\t\t  coloptions, attributeList,", "partial_line": "exclusionOp", "completion": "exclusionOpNames, relationId, <|endoftext|>"}
{"context": "\t\t\t\tstate = RS_IN_NONEOF;\n\t\t\t\tstate = RS_IN_ONEOF_IN;\n\t\t\tif (t_isalpha(c))\n\t\t\t\t  ;\n\tptr = (RegisNode *) palloc0(RNHDRSZ + len + 1);", "partial_line": "int\t\t\tlen = st", "completion": "int\t\t\tlen = strlen(str); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  NULL, 2, skey);\n\ttable_close(pg_shseclabel, RowExclusiveLock);\n\t{\n\t{\n\t\tnkeys = 2;", "partial_line": "provider->provider_name = pstrdup(", "completion": "provider->provider_name = pstrdup(provider_name); <|endoftext|>"}
{"context": "\t\tcase T_MultiAssignRef:\n\t\t\tresult = transformGroupingFunc(pstate, (GroupingFunc *) expr);\n\t\t\t\tNamedArgExpr *na = (NamedArgExpr *) expr;\n\t\t\t}\n\t\t\tbreak;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tinet\t   *ip = PG_GETARG_INET_PP(0);\n\tunsigned char *b;\n\tdst = (inet *) palloc0(sizeof(inet));\n\tbits = ip_maxbits(ip) - ip_bits(ip);\n\t\t{", "partial_line": "byt", "completion": "byte--; <|endoftext|>"}
{"context": "\tbytelen1 = VARBITBYTES(arg1);\n\tbytelen2 = VARBITBYTES(arg2);\n\tint\t\t\tbitlen1,\n\tbitlen2 = VARBITLEN(arg2);\n\tPG_FREE_IF_COPY(arg2, 1);", "partial_line": "bi", "completion": "bitlen2; <|endoftext|>"}
{"context": "\t\tbasename[basenamelen] = '\\0';\n\t\t\tstrcpy(arch_file, basename);\n\t\t\tarch_file = DatumGetCString(binaryheap_remove_first(arch_files->arch_heap));\n\t}\n\tif (arch_files->arch_heap->bh_size == 0)", "partial_line": "arch_files->arch_files[i] =", "completion": "arch_files->arch_files[i] = DatumGetCString(binaryheap_remove_first(arch_files->arch_heap)); <|endoftext|>"}
{"context": "\t\t\tRELSEG_SIZE - (blocknum % ((BlockNumber) RELSEG_SIZE)));\n\tAssert(nblocks <= iovcnt);\n\t\t\t\t\t\tblocknum + nblocks_this_segment - 1,\nvoid\n\t\tint\t\t\tnbytes;", "partial_line": "elog(ERROR, \"write", "completion": "elog(ERROR, \"write crosses segment boundary\"); <|endoftext|>"}
{"context": "static StringInfo\n\t\txmltn = map_sql_identifier_to_xml_name(tablename, true, false);\ntable_to_xmlschema(PG_FUNCTION_ARGS)\n\tPG_RETURN_XML_P(cstring_to_xmltype(result));\nDatum", "partial_line": "cursor_to_xmlschema(PG", "completion": "cursor_to_xmlschema(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\tcase PREDLOCKTAG_PAGE:\n\t\t\treturn true;\n\t\t\treturn true;\n\t\ttargettag = parenttag;\n\tbool\t\tfound;", "partial_line": "Assert(LWLockHeldByMe(Seria", "completion": "Assert(LWLockHeldByMe(SerializablePredicateListLock)); <|endoftext|>"}
{"context": "\tStringInfoData logbuf;\t\t\n\tStringInfoData locktagbuf;\n\tinitStringInfo(&locktagbuf);\n\t\tresetStringInfo(&locktagbuf);\n\t\t\t\t\t\t info->pid,", "partial_line": "GetLockmodeName(info->locktag.", "completion": "GetLockmodeName(info->locktag.locktag_lockmethodid, <|endoftext|>"}
{"context": "\t\t\t\t  \"1999.008\",\n\t\t\t\t  \"13:24:40.495+3\",\n\t\t\t\t\t  \"2 day 12 hour 59 minute 10 second\",\n char * text ;\n interval * i1 ;", "partial_line": "ECPGde", "completion": "ECPGdebug(1, stderr); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t  &levels_up);\n\t\t\t\t\tcrerr = CRERR_NO_RTE;\n\t\t\t\t\tbreak;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tif (v->content.like_regex.flags)\n\t\t\t\tif (v->content.like_regex.flags & JSP_REGEX_WSPACE)\n\t\t\t\t\tappendStringInfoChar(buf, 'x');\n\t\t\t\tjspGetRightArg(v, &elem);", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\tif (noprogress)\n\t\tFDEBUG((\"c%d[%d]->c%d\\n\",\n\treturn p;\n\td = getladfa(v, n);\n\t\treturn 0;", "partial_line": "if (LATYPE_IS_AH", "completion": "if (LATYPE_IS_AHEAD(sub->latype)) <|endoftext|>"}
{"context": "\t\tif (retval)\n\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t\t\t  actual_arg_types)),\n\t\tif (agg_within_group)\n\t\t\t\t\t parser_errposition(pstate, location)));", "partial_line": "if (agg_fi", "completion": "if (agg_filter) <|endoftext|>"}
{"context": "\telse\n\t\tbool\t\tresult;\n\telse\nget_typlenbyval(Oid typid, int16 *typlen, bool *typbyval)\n\ttp = SearchSysCache1(TYPEOID, ObjectIdGetDatum(typid));", "partial_line": "typtup", "completion": "typtup = (Form_pg_type) GETSTRUCT(tp); <|endoftext|>"}
{"context": "                break;\n                {   int ret = slice_del(z);\n                        if (!(eq_s_b(z, 2, s_14))) goto lab10;\n                    }\n                break;", "partial_line": "l", "completion": "lab4: <|endoftext|>"}
{"context": "\treturn ndistinct;\n\tinitStringInfo(&str);\n\t\t\tAttrNumber\tattnum = item.attributes[j];\nDatum\n\tPG_RETURN_VOID();\t\t\t", "partial_line": "ndistinct_for_combination(double", "completion": "ndistinct_for_combination(double totalrows, StatsBuildData *data, <|endoftext|>"}
{"context": "}\nstatic inline bool\n}\n\t\tjsonapi_destroyStringInfo(lex->errormsg);\n\t\t{", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tparamname, pk_type,\n\t\t\t\t\t\t\triinfo->agged_period_contained_by_oper,\n\t\tappendStringInfoString(&querybuf, \" FOR KEY SHARE OF x\");\n\tri_PerformCheck(riinfo, &qkey, qplan,\n\t\t\t\t\tfk_rel, pk_rel,", "partial_line": "elog(ERROR, \"", "completion": "elog(ERROR, \"SPI_finish failed\"); <|endoftext|>"}
{"context": "\t\t\tplatt = PyList_GetItem(plkeys, i);\n\t\t\tattn = SPI_fnumber(tupdesc, plattstr);\n\t\t\t\tereport(ERROR,\n\t\t\t\tereport(ERROR,\n\t\t\t\tereport(ERROR,", "partial_line": "modvalues[attn - 1] =", "completion": "modvalues[attn - 1] = PLy_output_convert(att, <|endoftext|>"}
{"context": "\t\t\tresult = (PlanState *) ExecInitBitmapAnd((BitmapAnd *) node,\n\t\t\t\t\t\t\t\t\t\t\t\t   estate, eflags);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\testate, eflags);\n\t\tcase T_TableFuncScan:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t estate, eflags);", "partial_line": "estate", "completion": "estate, eflags); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"out of memory\")));\n\t\tBufferDesc *buf = GetLocalBufferDescriptor(i);\n\tLocalBufHash = hash_create(\"Local Buffer Lookup Table\",\n\tif (LocalRefCount[bufid] == 0)\n\t\t{", "partial_line": "buf_state += BUF", "completion": "buf_state += BUF_USAGECOUNT_ONE; <|endoftext|>"}
{"context": "\treturn incrsortstate;\n}\n{\n\tExecEndNode(outerPlanState(node));\nExecReScanIncrementalSort(IncrementalSortState *node)", "partial_line": "ExecClearTuple(node-", "completion": "ExecClearTuple(node->group_pivot); <|endoftext|>"}
{"context": "{ 2, s_3_2, -1, 2, 0},\n};\nstatic const symbol s_4_0[3] = { 'e', 'n', 'd' };\nstatic const symbol s_4_4[4] = { 'b', 'a', 'a', 'r' };\n{ 4, s_4_3, -1, 3, 0},", "partial_line": "static co", "completion": "static const symbol s_10[] = { 'g', 'e', 'm' }; <|endoftext|>"}
{"context": "\t\t\t\tif (get_rel_relkind(partOid) != RELKIND_PARTITIONED_TABLE)\n\telse\n\t\tlevel++;\n\t\t{\n\t\t\tif (list_member_oid(aschemaPubids, puboid))", "partial_line": "*ancestor_level", "completion": "*ancestor_level = level; <|endoftext|>"}
{"context": "\t}\n\t\t\ttmp = (t + 1) / term;\n\t\t\trhs = (((t + X) / (term + S)) * term) / t;\n\t\t\ty = (((U * (t + 1)) / term) * (t + S + 1)) / (t + X);\n\t\t\t\tnumer_lim = t + 1;", "partial_line": "if (exp(log(y) /", "completion": "if (exp(log(y) / n) <= (t + X) / t) <|endoftext|>"}
{"context": "\tsem.array_end = json_manifest_array_end;\nstatic JsonParseErrorType\njson_manifest_object_start(void *state)\n\tswitch (parse->state)\n\t{", "partial_line": "parse->pathname", "completion": "parse->pathname = NULL; <|endoftext|>"}
{"context": "static CommandId currentCommandId;\ntypedef struct XactCallbackItem\n\tvoid\t   *arg;\n{\n\tstruct SubXactCallbackItem *next;", "partial_line": "static void AtCle", "completion": "static void AtCleanup_Memory(void); <|endoftext|>"}
{"context": "\t\t\t\tstartpos_xrecoff;\n\t\treturn false;\n\t\t\t   &startpos_xrecoff) != 2)\nstatic PGresult *\n\twhile (1)", "partial_line": "in", "completion": "int\t\t\tr; <|endoftext|>"}
{"context": "#include \"catalog/pg_tablespace_d.h\"\n#include \"miscadmin.h\"\nstatic char *\n\t}", "partial_line": "(errcode(ERRCODE_INS", "completion": "(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE), <|endoftext|>"}
{"context": "\t{\n\tva_start(args, fmt);\n\t\tprintf(_(\"Failure, exiting\\n\"));\n\tint\t\t\tv1 = 0,\n\tPQExpBufferData pgoptions;", "partial_line": "if (!exit_hook_", "completion": "if (!exit_hook_registered) <|endoftext|>"}
{"context": "\t\t\towner = CurrentResourceOwner;\n\t\tfor (i = locallock->numLockOwners - 1; i >= 0; i--)\n\t\tif (i < 0)\n\t\t\treturn false;\n\tif (EligibleForRelationFastPath(locktag, lockmode) &&", "partial_line": "LWLockAcquire(&MyPr", "completion": "LWLockAcquire(&MyProc->fpInfoLock, LW_EXCLUSIVE); <|endoftext|>"}
{"context": "\tif (array)\n\t\t\t\t\trightarray;\n\t\tleftarray = ((leftarg->sk_flags & SK_SEARCHARRAY) &&\n\t\t\t\t\t  rightarg->sk_strategy == BTEqualStrategyNumber);\n\t\t}", "partial_line": "if (left", "completion": "if (leftarray) <|endoftext|>"}
{"context": "\t\t\tif (IS_LSIGN(num))\n\t\t\t\tnum->flag |= NUM_F_LSIGN;\n\t\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),\n\t\t\t\tereport(ERROR,\n\t\t\tnum->flag |= NUM_F_PLUS;", "partial_line": "(errco", "completion": "(errcode(ERRCODE_SYNTAX_ERROR), <|endoftext|>"}
{"context": "\t\t&PostAuthDelay,\n\t\t\t\t\t\t \"queries if the resulting FROM list would have no more than \"\n\t{\n\t\t\tgettext_noop(\"Sets the FROM-list size beyond which JOIN \"\n\t\t\t\t\t\t \"list of no more than this many items would result.\"),", "partial_line": "&join_collap", "completion": "&join_collapse_limit, <|endoftext|>"}
{"context": "\ttext\t   *flags = PG_GETARG_TEXT_PP_IF_EXISTS(2);\nDatum\n\tif (re_flags.glob)\n\t\tereport(ERROR,\n\tif (matchctx->nmatches == 0)", "partial_line": "if (SRF_IS_FI", "completion": "if (SRF_IS_FIRSTCALL()) <|endoftext|>"}
{"context": "\t\t\t\t\t*tz = ftz.gmtoffset;\n\t\t\t\t}\n\t\t\t\tif (tm2timestamp(&tm, fsec, tz, &result) != 0)\n\t\t\t\tAdjustTimestampForTypmod(&result, *typmod, escontext);\n\t\t\telse", "partial_line": "*typid = TI", "completion": "*typid = TIMESTAMPOID; <|endoftext|>"}
{"context": "\t\tpid_t\t\tpid;\n\t\tif (result)\n\t\tResetLatch(MyLatch);\n\tsender = mq->mq_sender;\n{", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t*deleteTriggerOid = trgform->oid;\n\t\t{\n\t\t\tAssert(*updateTriggerOid == InvalidOid);\n\t\t\t*updateTriggerOid = trgform->oid;\n#ifndef USE_ASSERT_CHECKING", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "\telse if (pg_add_s32_overflow(S, L, &E))\n\telse\n}\nbyteaoverlay(PG_FUNCTION_ARGS)\n{", "partial_line": "sl =", "completion": "sl = VARSIZE_ANY_EXHDR(t2); <|endoftext|>"}
{"context": "{\n\t\tnewval = pg_strdup(\"10\");\nstatic bool\n\telse if (pg_strcasecmp(newval, \"errors\") == 0)\n\t\tpset.echo = PSQL_ECHO_ERRORS;", "partial_line": "ret", "completion": "return true; <|endoftext|>"}
{"context": "static const symbol s_1_81[4] = { 'm', 'i', 'n', 'a' };\nstatic const symbol s_1_94[3] = { 'n', 'o', 'a' };\nstatic const symbol s_1_102[3] = { 't', 'o', 'a' };\nstatic const symbol s_1_113[4] = { 't', 'a', 'r', 'a' };\nstatic const symbol s_1_117[4] = { 'k', 'e', 'r', 'a' };", "partial_line": "static const symbol", "completion": "static const symbol s_1_124[3] = { 'o', 's', 'a' }; <|endoftext|>"}
{"context": "static const symbol s_66_14[4] = { 0xCE, 0xB1, 0xCF, 0x89 };\nstatic const symbol s_66_18[12] = { 0xCE, 0xBF, 0xCF, 0x83, 0xCE, 0xBF, 0xCF, 0x85, 0xCE, 0xBD, 0xCE, 0xB1 };\nstatic const symbol s_66_27[16] = { 0xCE, 0xB9, 0xCE, 0xBF, 0xCF, 0x85, 0xCE, 0xBC, 0xCE, 0xB1, 0xCF, 0x83, 0xCF, 0x84, 0xCE, 0xB5 };\nstatic const symbol s_66_28[14] = { 0xCE, 0xB9, 0xCE, 0xB5, 0xCE, 0xBC, 0xCE, 0xB1, 0xCF, 0x83, 0xCF, 0x84, 0xCE, 0xB5 };\nstatic const symbol s_66_35[12] = { 0xCE, 0xB7, 0xCE, 0xB8, 0xCE, 0xB5, 0xCE, 0xB9, 0xCF, 0x84, 0xCE, 0xB5 };", "partial_line": "static const symbol s_66_39[8] = { 0xCE, 0xB5, 0xCF, 0x83,", "completion": "static const symbol s_66_39[8] = { 0xCE, 0xB5, 0xCF, 0x83, 0xCE, 0xB1, 0xCE, 0xB9 }; <|endoftext|>"}
{"context": "\t\tcase T_A_Const:\n\t\tcase T_A_Star:\n\t\t\t\tSubLink    *sublink = (SubLink *) node;\n\t\tcase T_RowExpr:\n\t\t\t\tif (WALK(jpe->output))", "partial_line": "case", "completion": "case T_JsonSerializeExpr: <|endoftext|>"}
{"context": "\t\tpgstat_progress_update_multi_param(2, index, val);\n\tforeach(lc, statslist)\n\t\t{\n\t\t\tif (!AmAutoVacuumWorkerProcess())\n\t\t\t\t\t\t errmsg(\"statistics object \\\"%s.%s\\\" could not be computed for relation \\\"%s.%s\\\"\",", "partial_line": "stat->sche", "completion": "stat->schema, stat->name, <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"could not remove shared memory segment \\\"%s\\\": %m\",\n\t\t\treturn false;\n\t{\n\t\t\tsave_errno = errno;\n\t\tif (op == DSM_OP_CREATE)", "partial_line": "(errcode_for_dynamic_shar", "completion": "(errcode_for_dynamic_shared_memory(), <|endoftext|>"}
{"context": "\tmemset(&pa_arg, 0, sizeof(ObjectAccessPostAlter));\n\tObjectAccessNamespaceSearch ns_arg;\n\tAssert(object_access_hook != NULL);\n\t(*object_access_hook) (OAT_FUNCTION_EXECUTE,\n{", "partial_line": "drop_arg.dropflags", "completion": "drop_arg.dropflags = dropflags; <|endoftext|>"}
{"context": "\telog(DEBUG3, \"row filter evaluates to %s (isnull: %s)\",\n\t\t\t\t\t\t\t\t\t\t\t ALLOCSET_SMALL_SIZES);\n\t\t\t\t\t\t RelationSyncEntry *entry)\n\tbool\t\tno_filter[] = {false, false, false};\t\n\t\tHeapTuple\trftuple = NULL;", "partial_line": "bool\t\tpub_no_", "completion": "bool\t\tpub_no_filter = true; <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"configuration column \\\"%s\\\" must not be null\",\n\t\tList\t   *names;\n\t\t\t\t\t\t\ttrigger->tgargs[1])));\n\tfor (i = 2; i < trigger->tgnargs; i++)\n\t\tint\t\t\tnumattr;", "partial_line": "if (numattr", "completion": "if (numattr == SPI_ERROR_NOATTRIBUTE) <|endoftext|>"}
{"context": "\t\t\tdoing_extended_query_message = false;\n\t\t\tmaxmsglen = PQ_SMALL_MESSAGE_LIMIT;\n\t\tcase PqMsg_Execute:\n\t\tcase PqMsg_Sync:\n\t\t\tmaxmsglen = PQ_SMALL_MESSAGE_LIMIT;", "partial_line": "int", "completion": "int\t\t\tresult; <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\t\t\t\t errhint(\"Use %s instead.\",\n\tif (typTup->typtype == TYPTYPE_COMPOSITE)\n\ttable_close(rel, RowExclusiveLock);\n{", "partial_line": "HeapT", "completion": "HeapTuple\tnewtup; <|endoftext|>"}
{"context": "\t\t\tivinfo.analyze_only = true;\n\t\t\tivinfo.num_heap_tuples = onerel->rd_rel->reltuples;\n\t\t\t\t\t\t\t\t\t   params->log_min_duration))\n\t\t\t\tread_rate = (double) BLCKSZ * total_blks_read /\n\t\t\t\t\t\t\t get_database_name(MyDatabaseId),", "partial_line": "RelationGetRelationName", "completion": "RelationGetRelationName(onerel)); <|endoftext|>"}
{"context": "_bt_set_cleanup_info(Relation rel, BlockNumber num_delpages)\n\tBuffer\t\tmetabuf;\n\tmetad = BTPageGetMeta(metapg);\n\tmetad->btm_last_cleanup_num_heap_tuples = -1.0;\n\tEND_CRIT_SECTION();", "partial_line": "BTPageO", "completion": "BTPageOpaque rootopaque; <|endoftext|>"}
{"context": "\tif (more != NULL)\n\t{\n\t\t{\ncreate_sql_command(PQExpBuffer buf, const char *source)\n\tif (p == NULL)", "partial_line": "appendPQExpBufferStr(&", "completion": "appendPQExpBufferStr(&my_command->lines, p); <|endoftext|>"}
{"context": "\t\t\t\t\t stack[*lenstack].distance);\n\tOperatorElement opstack[STACKDEPTH];\n\t\t\tdefault:\n\t\t\t\t\t\t\t errmsg(\"syntax error in tsquery: \\\"%s\\\"\",\n\t\t}", "partial_line": "if (*pos >= n", "completion": "if (*pos >= nnodes) <|endoftext|>"}
{"context": "nextline:\n\t\tpfree(pstr);\nisnewformat:\n\tptr = Conf->AffixData + Conf->nAffixData;\n\t}", "partial_line": "ptr+", "completion": "ptr++; <|endoftext|>"}
{"context": "bool\npg_popcount_avx512_available(void)\n\t\tavx512_popcnt_available();\npg_attribute_target(\"avx512vpopcntdq,avx512bw\")\n{", "partial_line": "__m512i", "completion": "__m512i\t\taccum = _mm512_setzero_si512(); <|endoftext|>"}
{"context": "byteasend(PG_FUNCTION_ARGS)\n\tPG_RETURN_BYTEA_P(vlena);\n\t{\n\t\tbool\t\tisfirst = false;\n\t\tif (state == NULL)", "partial_line": "bytea", "completion": "bytea\t   *delim = PG_GETARG_BYTEA_PP(2); <|endoftext|>"}
{"context": "\t\tnewcmds = lappend(newcmds, newcmd);\n\t}\n\trelation_close(rel, NoLock);\n\tstmt->cmds = newcmds;\n\tbool\t\tsaw_enforced = false;", "partial_line": "ListCel", "completion": "ListCell   *clist; <|endoftext|>"}
{"context": "static int\n{\n\tconst FileNameMap *map1 = (const FileNameMap *) a;\n\tchar\t   *endp;\n\tdir = opendir(new_db_dir);", "partial_line": "if (dir", "completion": "if (dir == NULL) <|endoftext|>"}
{"context": "\t\tpg_fatal(\"could not open directory \\\"%s\\\": %m\", ARCHSTATDIR);\n\t\t\t strcmp(xlde->d_name + XLOG_FNAME_LEN, \".partial.done\") == 0))\n\t\t{\n\t\t\tif (unlink(path) < 0)\n#define WALSUMMARY_NHEXCHARS\t40", "partial_line": "PGAlignedXLogBl", "completion": "PGAlignedXLogBlock buffer; <|endoftext|>"}
{"context": "#line 54 \"array_of_struct.pgc\"\n#line 56 \"array_of_struct.pgc\"\n\t    printf( \"phone - %d\\n\", custs1[r].phone );\n    }\n\tECPGt_varchar,&(custs2->name),(long)50,(long)10,sizeof( customer2 ), ", "partial_line": "#line", "completion": "#line 64 \"array_of_struct.pgc\" <|endoftext|>"}
{"context": "static const symbol s_1_28[6] = { 'j', 'a', 'c', 'i', 'm', 'a' };\nstatic const symbol s_1_29[6] = { 'n', 'i', 'c', 'i', 'm', 'a' };\nstatic const symbol s_1_36[6] = { 'p', 'e', 's', 'i', 'm', 'a' };\nstatic const symbol s_1_43[5] = { 'a', 'n', 'a', 't', 'a' };\nstatic const symbol s_1_73[5] = { 'v', 'o', 'j', 'c', 'i' };", "partial_line": "static const sym", "completion": "static const symbol s_1_86[4] = { 'i', 't', 'a', 'k' }; <|endoftext|>"}
{"context": "#define ATT_IS_PACKABLE(att) \\\n#define VARLENA_ATT_IS_PACKABLE(att) \\\n\tint\t\t\tlen;", "partial_line": "stati", "completion": "static uint32 <|endoftext|>"}
{"context": "{ 2, s_1_27, -1, 1, 0},\n{ 4, s_1_29, -1, 1, 0},\n{ 2, s_1_60, -1, 1, 0},\n{ 4, s_1_61, 60, 3, 0},\n{ 3, s_1_65, 60, 1, 0},", "partial_line": "{ 5, s_1_69", "completion": "{ 5, s_1_69, -1, 1, 0}, <|endoftext|>"}
{"context": "\tinitStringInfo(&str);\n\t\t\tAttrNumber\tattnum = item.attributes[j];\nDatum\n\tPG_RETURN_VOID();\t\t\t\nndistinct_for_combination(double totalrows, StatsBuildData *data,", "partial_line": "int", "completion": "int\t\t\ti, <|endoftext|>"}
{"context": "                z->c = z->l - m4;\n    }\n    return 1;\n    {   int mlimit1;\n                {   int ret = r_LONG(z);", "partial_line": "{   i", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\tneed_initialization = true;\n\t\tcase RELOPT_TYPE_REAL:\n\tnewoption->kinds = kinds;\nvoid\n\t\t\t\t\t\t\t\t\t\t\t\t default_val, lockmode);", "partial_line": "add_local_boo", "completion": "add_local_bool_reloption(local_relopts *relopts, const char *name, <|endoftext|>"}
{"context": "\t\t\tAssert(!found);\t\t\n\t\tMemSet(entry, 0, sizeof(TSConfigCacheEntry));\n\t\tReleaseSysCache(tp);\n\t\t\tForm_pg_ts_config_map cfgmap = (Form_pg_ts_config_map) GETSTRUCT(maptup);\n\t\t\t\t\t\t\t\t\t\t   sizeof(Oid) * ndicts);", "partial_line": "mapdicts[", "completion": "mapdicts[0] = cfgmap->mapdict; <|endoftext|>"}
{"context": "\t\tfor (; child != NULL && ichild < max_children;\n\t\t\t child = child->nextchild, ichild++)\n\t\tMemoryContextCounters local_totals;\n\t\tif (print_location == PRINT_STATS_TO_STDERR)\n\t\t\tfor (int i = 0; i <= level; i++)", "partial_line": "(errh", "completion": "(errhidestmt(true), <|endoftext|>"}
{"context": "\tif (txn->base_snapshot != NULL)\n\t{\n\t\tdclist_delete_from(&rb->catchange_txns, &txn->catchange_node);\n\t\tdlist_delete(&change->node);\n\t}", "partial_line": "ReorderBufferChangeMemoryUpdate(rb, NULL, txn", "completion": "ReorderBufferChangeMemoryUpdate(rb, NULL, txn, false, mem_freed); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t true, false,\n\t\t\t\t\tappendPQExpBuffer(state->manifest_buffer, copybuf + 1,\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t  r - 1, ASTREAMER_UNKNOWN);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tif (!seq->is_called)\n\t{\n\t\t\tlogit = true;\n\t\t\t\t(maxv < 0 && next + incby > maxv))\n\t\t\t\t\tereport(ERROR,", "partial_line": "if (rescn", "completion": "if (rescnt > 0) <|endoftext|>"}
{"context": "static List *\n{\n\tint\t\t\tnumnames = list_length(fields);\n\t\tchar\t   *relname = NULL;\n\t\t}", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tprojInfo->pi_state.type = T_ExprState;\n\tstate->ext_params = NULL;\n\t\tif (tle->resjunk)\n\t\tassignedCols = bms_add_member(assignedCols, targetattnum);\n\t\tif (attr->attisdropped)", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase OBJECT_DATABASE:\n\t\t\treturn RenameDatabase(stmt->subname, stmt->newname);\n\t\tcase OBJECT_TABLESPACE:\n\t\tcase OBJECT_TABLE:\n\t\t\treturn RenameType(stmt);", "partial_line": "case O", "completion": "case OBJECT_AGGREGATE: <|endoftext|>"}
{"context": "\treturn dsize;\n\t{\n\t\tint\t\t\tchunk = Min(remaining, DEFAULT_IO_BUFFER_SIZE);\n\t\t\treturn false;\n\t\t}", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "#include <stdio.h>\n#include \"indent.h\"\nstruct pro {", "partial_line": "{\"cdb\", PRO_", "completion": "{\"cdb\", PRO_BOOL, true, ON, &comment_delimiter_on_blankline}, <|endoftext|>"}
{"context": "\t\tconn->default_transaction_read_only =\n\t\t\t(strcmp(value, \"on\") == 0) ? PG_BOOL_YES : PG_BOOL_NO;\n}\n\t\tres = PQcopyResult(res,\n\t\t\t\t\t\t   PG_COPYRES_ATTRS | PG_COPYRES_EVENTS |", "partial_line": "if (!r", "completion": "if (!res) <|endoftext|>"}
{"context": "\tbool\t\tpushed_active_snap = false;\n\t\t!_SPI_current->atomic && !IsSubTransaction();\n\tspierrcontext.callback = _SPI_error_callback;\n\t\tereport(ERROR,\n\tforeach(lc1, plan->plancache_list)", "partial_line": "CachedPlanSource *p", "completion": "CachedPlanSource *plansource = (CachedPlanSource *) lfirst(lc1); <|endoftext|>"}
{"context": "\treturn make_multirange(mltrngtypoid, rangetyp, range_count3, ranges3);\nDatum\n\t\tPG_RETURN_MULTIRANGE_P(make_empty_multirange(mltrngtypoid, rangetyp));\n\t\t\t\t\t\t\t  int32 range_count1, RangeType **ranges1,\n\tr2 = ranges2[0];", "partial_line": "if (range_overlaps_inte", "completion": "if (range_overlaps_internal(rangetyp, r1, r2)) <|endoftext|>"}
{"context": "\t\treturn 0;\t\t\t\t\n}\n\t\treturn PROPARALLEL_UNSAFE;\n\t\t\ta = NULL;\n\tList\t   *procName = defGetQualifiedName(defel);", "partial_line": "(errcode(ERRCODE_", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "#define WRITE_LONG_FIELD(fldname) \\\n\t\t\t\t\t booltostr(node->fldname))\n#define WRITE_NODE_ARRAY(fldname, len) \\\n\t(appendStringInfoString(str, \" :\" CppAsString(fldname) \" \"), \\\n\t writeOidCols(str, node->fldname, len))", "partial_line": "(appendStringInfoString(", "completion": "(appendStringInfoString(str, \" :\" CppAsString(fldname) \" \"), \\ <|endoftext|>"}
{"context": "charin(PG_FUNCTION_ARGS)\n}", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "int main(void)\n#line 15 \"whenever_do_continue.pgc\"\n#line 18 \"whenever_do_continue.pgc\"\nif (sqlca.sqlcode < 0) exit (1);}\nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "ECPGt_NO_IN", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, <|endoftext|>"}
{"context": "\tnentries = context.entries_count = maxoff - FirstOffsetNumber + 1;\n\tby_lower = (NonEmptyRange *) palloc(nentries * sizeof(NonEmptyRange));\n\tfor (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))\n\t\tbool\t\tempty;\n\t\t\t\t\t\t  &by_lower[i - FirstOffsetNumber].lower,", "partial_line": "Ass", "completion": "Assert(!empty); <|endoftext|>"}
{"context": "helpSQL(const char *topic, unsigned short int pager)\n\t\tint\t\t\tscreen_width;\n\t\tint\t\t\tj;\n\t\tstruct winsize screen_size;\n\t\tif (ioctl(fileno(stdout), TIOCGWINSZ, &screen_size) == -1)", "partial_line": "QL_MA", "completion": "QL_MAX_CMD_LEN + 1, <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\t\t\t{\n\t\t\t\tarry = construct_array_builtin(numdatums, nnum, FLOAT4OID);\n\t\t\t{", "partial_line": "nulls[i]", "completion": "nulls[i] = true; <|endoftext|>"}
{"context": "  HANDLE *threads;\n#line 32 \"thread.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"create table test_thread ( tstamp timestamp not null default cast ( timeofday ( ) as timestamp ) , thread text not null , iteration integer not null , primary key ( thread , iteration ) )\", ECPGt_EOIT, ECPGt_EORT);}\n    }\n      pthread_create(&threads[n], NULL, test_thread, (void *) (n + 1));", "partial_line": "#ifndef W", "completion": "#ifndef WIN32 <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgroup_rel,\n\t\t\tif (!list_member_ptr(varinfos, vinfo))\n\tbool\t\tisdefault;\n\t\t\t\t*mcv_freq = sslot.numbers[0];\n\t\t}", "partial_line": "ndistinct = get_variable_numdistinc", "completion": "ndistinct = get_variable_numdistinct(&vardata, &isdefault); <|endoftext|>"}
{"context": "\t\treturn PG_SASL_EXCHANGE_CONTINUE;\n\t\t\t\t errmsg(\"malformed SCRAM message\"),\n\t\tcase SCRAM_AUTH_INIT:\n\t\tdefault:\n\t}", "partial_line": "memcpy(MyProcPort->scram_ServerKey, state->ServerKey,", "completion": "memcpy(MyProcPort->scram_ServerKey, state->ServerKey, sizeof(MyProcPort->scram_ServerKey)); <|endoftext|>"}
{"context": "{ 6, s_5_38, -1, 3, 0},\n{ 5, s_5_40, -1, 1, 0},\n{ 4, s_5_41, -1, 1, 0},\nstatic const symbol s_6_0[3] = { 'a', 'd', 'a' };\nstatic const symbol s_6_17[4] = { 'a', 'r', 'e', 'i' };", "partial_line": "static const symbo", "completion": "static const symbol s_6_23[5] = { 'e', 'r', 'i', 'a', 'm' }; <|endoftext|>"}
{"context": "\tif (IS_HIGHBIT_SET(*s))\n\t\t\tfrom++;\n\t\t\tlen -= 4;\n\t\t}\n\t\telse if (*from == SS3 && len >= 3)\t", "partial_line": "t", "completion": "to++; <|endoftext|>"}
{"context": "\t\t\t0x0DCF,\t\t\t\t\n\t\t\t0x0DD0,\t\t\t\t\n\t\t\t0x0F7F,\t\t\t\t\n\t\t\t0x1063,\t\t\t\t\n\t\t\t0x1068,\t\t\t\t", "partial_line": "0x10", "completion": "0x106C, <|endoftext|>"}
{"context": "\t{ ECPGconnect(__LINE__, 0, \"ecpg1_regression\" , NULL, NULL , NULL, 0); }\n#line 22 \"indicators.pgc\"\n\tECPGt_int,&(intvar),(long)1,(long)1,sizeof(int), \n\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"select val from indicator_test where id = 2\", ECPGt_EOIT, \n\tintvar = 5; nullind = -1;", "partial_line": "#line", "completion": "#line 41 \"indicators.pgc\" <|endoftext|>"}
{"context": "\t\t\tAssert(!P_ISHALFDEAD(opaque));\n\t\t\t\tIndexTuple\ttargetkey;\n\t\t\t\tBlockNumber leftsib,\n\t\t\t\t\t\t\tleafblkno;\n\t\t\t\t}", "partial_line": "itup_key->backw", "completion": "itup_key->backward = true; <|endoftext|>"}
{"context": "\t\t\t\t\t  COERCION_CODE_EXPLICIT,\n\t\t\t\t\t  gettext_noop(\"no\"),\n\t\t\t\t\t  gettext_noop(\"yes\"),\n\t\t\t\t\t\t \"     ON c.castfunc = p.oid\\n\"\n\t\t\t\t\t\t \"     ON c.castsource = ts.oid\\n\"", "partial_line": "appendPQExpBufferStr(&", "completion": "appendPQExpBufferStr(&buf, \"WHERE ( (true\"); <|endoftext|>"}
{"context": "\t\tif (XLogRecPtrIsInvalid(private.startptr))\n\t\t\t\t\t\t fname);\n\t\t\tgoto bad_argument;\n\t\t}\n\t\t\tsplit_path(argv[optind + 1], &directory, &fname);", "partial_line": "fd = ope", "completion": "fd = open_file_in_directory(waldir, fname); <|endoftext|>"}
{"context": "\t\t\t\tSetHintBits(tuple, buffer, HEAP_XMAX_INVALID,\n\t\t\tif (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)\n\t\t\t\treturn true;\t\n\t\t\telse\n\t}", "partial_line": "return fa", "completion": "return false; <|endoftext|>"}
{"context": "\tINSTR_TIME_SUBTRACT(others, fcu->save_total);\n\tself = total;\npgstat_function_flush_cb(PgStat_EntryRef *entry_ref, bool nowait)\n{\n\tshfuncent = (PgStatShared_Function *) entry_ref->shared_stats;", "partial_line": "INSTR_TIM", "completion": "INSTR_TIME_GET_MICROSEC(localent->self_time); <|endoftext|>"}
{"context": "\tGSS_C_SEQUENCE_FLAG | GSS_C_CONF_FLAG | GSS_C_INTEG_FLAG\n#define PQ_GSS_RECV_BUFFER_SIZE 16384\n#define PqGSSResultNext (conn->gss_ResultNext)\n\tsize_t\t\tbytes_to_encrypt;\n\t\terrno = EINVAL;", "partial_line": "bytes_encrypted =", "completion": "bytes_encrypted = PqGSSSendConsumed; <|endoftext|>"}
{"context": "error_view_not_updatable(Relation view,\n\t\t\t\t\t\t const char *detail)\n\t\tcase CMD_INSERT:\n\t\t\tereport(ERROR,\n\t\t\t\t\terrmsg(\"cannot update view \\\"%s\\\"\",", "partial_line": "detail ? errdetail_internal(\"", "completion": "detail ? errdetail_internal(\"%s\", _(detail)) : 0, <|endoftext|>"}
{"context": "\t\t\t\t\t\tlengthof(unicode_white_space),\nbool\npg_u_prop_join_control(pg_wchar code)\n{\nbool", "partial_line": "pg_u_", "completion": "pg_u_islower(pg_wchar code) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t forkNum);\n\t\thash_search(pendingSyncHash, &rlocator, HASH_FIND, NULL) == NULL)\n\tHASH_SEQ_STATUS scan;\n\tRelFileLocator *src;\n\tRelFileLocator *dest = (RelFileLocator *) startAddress;", "partial_line": "got", "completion": "goto terminate; <|endoftext|>"}
{"context": "\t\telse\n\t\t\tadd_abs(var1, var2, result);\n\t\t\tresult->sign = NUMERIC_NEG;\n\t\t\t\t\tresult->sign = NUMERIC_NEG;\n\telse", "partial_line": "result->d", "completion": "result->dscale = Max(var1->dscale, var2->dscale); <|endoftext|>"}
{"context": "\t\t\tp += len + 1;\n\thentry = (rendezvousHashEntry *) hash_search(rendezvousHash,\n\tif (!found)\n{\n\t\t file_scanner = file_scanner->next)", "partial_line": "size = add_size(size, strlen(", "completion": "size = add_size(size, strlen(file_scanner->filename) + 1); <|endoftext|>"}
{"context": "\tLWLockRelease(SerialControlLock);\n\tAssert(!IsUnderPostmaster);\n\t\t\t\t\t\t\t\t\t\t\tmax_table_size,\n\t\t\t\t\t\t\t\t\t\t\t&info,\n\t\t\t\t\t\t   HASH_ENTER, &found);", "partial_line": "info.num_partitions = NUM_PREDICATE", "completion": "info.num_partitions = NUM_PREDICATELOCK_PARTITIONS; <|endoftext|>"}
{"context": "\t\t\tif (t_iseq(str, '#'))\n\t\t\t{\n\t\t\t{\n\t\t\telse if (!isspace((unsigned char) *str))\n\t\t\telog(ERROR, \"unrecognized state in parse_affentry: %d\", state);", "partial_line": "char *s, uin", "completion": "char *s, uint32 val) <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\t\t\t\t  ACL_SELECT | ACL_USAGE) != ACLCHECK_OK)\n\t\t\t\t\t\tRelationGetRelationName(seqrel))));\n\t\tereport(ERROR,\n\t\t\t\t errmsg(\"setval: value %\" PRId64 \" is out of bounds for sequence \\\"%s\\\" (%\" PRId64 \"..%\" PRId64 \")\",", "partial_line": "START_CRIT_SEC", "completion": "START_CRIT_SECTION(); <|endoftext|>"}
{"context": "{\n\tsqlstate = PQresultErrorField(result, PG_DIAG_SQLSTATE);\n\t\tif (PQstatus(conn) == CONNECTION_BAD)\n\telse\n\t\tecpg_raise_backend(lineno, NULL, connection, compat);", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tObjectAddress old_address = {InvalidOid, InvalidOid, 0};\n\t\tswitch (objtype)\n\t\t\t\t\tget_object_address_attrdef(objtype, castNode(List, object),\n\t\t\t\t\t\t\t\t\t\t\t   &relation, lockmode,\n\t\t\tcase OBJECT_TABCONSTRAINT:", "partial_line": "objlist = castNode(", "completion": "objlist = castNode(List, object); <|endoftext|>"}
{"context": "\t}\n\tif (tididx < 0)\n\tfor (i = 0; i < rulelock->numLocks; i++)\n\t\trewrite = rulelock->rules[i];\n\t\t\t\tereport(ERROR,", "partial_line": "errmsg(\"on", "completion": "errmsg(\"only one select rule is allowed in views\")); <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"conditional utility statements are not implemented\")));\n\tcopy = copyObject(qual);\n\t\tparsetree->hasSubLinks = checkExprHasSubLink(copy);\n{\n}", "partial_line": "add_nulling_rel", "completion": "add_nulling_relids_mutator(Node *node, <|endoftext|>"}
{"context": "#include \"access/visibilitymap.h\"\n\tRelFileLocator rlocator;", "partial_line": "XLogRedoActio", "completion": "XLogRedoAction action; <|endoftext|>"}
{"context": "static const symbol s_5_81[2] = { 'e', 'z' };\nstatic const symbol s_5_91[4] = { 'u', 'r', 0xC4, 0x83 };\nstatic const struct among a_5[94] =\n{ 3, s_5_7, -1, 1, 0},\n{ 2, s_5_10, -1, 2, 0},", "partial_line": "{ 3, s", "completion": "{ 3, s_5_18, -1, 1, 0}, <|endoftext|>"}
{"context": "}\n\tif (!name && !str)\n\t\treturn 0;\n\tif (!name)\n\t\treturn -1;\t\t\t\t", "partial_line": "retu", "completion": "return 1; <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\t\t\n\t\t\t\t\t\t\t\t\t\t\t cur_em->em_datatype);\n\t\t\t\t\t\t\t\t\t\t\t\t\t   cur_ec->ec_collation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   leftvar,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   cur_em->em_expr,", "partial_line": "eq_o", "completion": "eq_op, <|endoftext|>"}
{"context": "typedef struct bbsink_zstd\n} bbsink_zstd;\n\t.begin_archive = bbsink_zstd_begin_archive,", "partial_line": ".manifest_contents = bbsink_zs", "completion": ".manifest_contents = bbsink_zstd_manifest_contents, <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_READ_ONLY_SQL_TRANSACTION),\n\t{\n\t\t\t\t{\n\t\t\t\t\tcase TRANS_STMT_BEGIN:\n\t\t\t\t\t\t\tBeginTransactionBlock();", "partial_line": "foreach(lc, s", "completion": "foreach(lc, stmt->options) <|endoftext|>"}
{"context": "\t\tif (!shared->page_dirty[bestvalidslot])\n\tif (ctl->sync_handler != SYNC_HANDLER_NONE)\n}\n\t{\n\t}", "partial_line": "if (curbank != p", "completion": "if (curbank != prevbank) <|endoftext|>"}
{"context": "static bool check_for_column_name_collision(Relation rel, const char *colname,\nstatic void add_column_datatype_dependency(Oid relid, int32 attnum, Oid typid);\n\t\t\t\t\t\t   bool is_valid, bool queue_validation);\n\t\t\t\t\t\t\t\t\t  bool recurse, bool recursing,\n\t\t\t\t\t\t\t\t\t\t Node *newDefault, LOCKMODE lockmode);", "partial_line": "Node *n", "completion": "Node *newValue, LOCKMODE lockmode); <|endoftext|>"}
{"context": "{\n\tint128_add_int64_mul_int64(&span, days, USECS_PER_DAY);\n\treturn span;\n}\n\treturn int128_compare(span, zero);", "partial_line": "Interval   *interval2 = PG_GETARG", "completion": "Interval   *interval2 = PG_GETARG_INTERVAL_P(1); <|endoftext|>"}
{"context": "\t\t\tstate1->data = (char *) repalloc(state1->data, state1->abytes);\n\t\t\t\tstate1->aitems = pg_nextpower2_32(Max(256, newnitems + 1));\n\tpq_sendint32(&buf, state->aitems);\n\t}\n{", "partial_line": "nbytes = pq_", "completion": "nbytes = pq_getmsgint(&buf, 4); <|endoftext|>"}
{"context": "{\n\t\t\t_state->tresult = (text *) NULL;\n\t{\n\t\t\t_state->path_indexes[lex_level] != INT_MIN)\n\t}", "partial_line": "int\t\t\tlex_level = _state", "completion": "int\t\t\tlex_level = _state->lex->lex_level; <|endoftext|>"}
{"context": "\t\t\trestrict_and_check_grant(istmt->is_grant, avail_goptions,\n\t\tnnewmembers = aclmembers(new_acl, &newmembers);\n\t\tUnlockTuple(relation, &tuple->t_self, InplaceUpdateTupleLock);\nstatic void\n\t\tereport(ERROR,", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\tint\t\t\tlevel = in->level;\n\tout->recheck = false;\n\tleafValue = DatumGetTextPP(in->leafDatum);\n\tif (VARSIZE_ANY_EXHDR(leafValue) == 0 && level > 0)\n\t\tout->leafValue = PointerGetDatum(fullText);", "partial_line": "for (j =", "completion": "for (j = 0; j < in->nkeys; j++) <|endoftext|>"}
{"context": "#ifndef WIN32\n#include \"access/xact.h\"", "partial_line": "#includ", "completion": "#include \"pgstat.h\" <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#include \"common/config_info.h\"\n\t{\"--docdir\", \"DOCDIR\"},\n\t{\"--cflags\", \"CFLAGS\"},\n\t{\"--libs\", \"LIBS\"},", "partial_line": "{NULL,", "completion": "{NULL, NULL} <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   \"pid = $1 AND wait_event = $2\",\n\t\tif (PQresultStatus(res) != PGRES_TUPLES_OK)\n\t\t}\n\t\tpg_usleep(10000);\n\t}", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\t\tcp++;\n\t\telse if (pg_strncasecmp(cp, \"Infinity\", 8) == 0)\n\t\t{\n\t\t{\n\t\t{", "partial_line": "if (!isspace((uns", "completion": "if (!isspace((unsigned char) *cp)) <|endoftext|>"}
{"context": "\t\t\tForm_pg_ts_config_map cfgmap = (Form_pg_ts_config_map) GETSTRUCT(maptup);\n\t\t\t\t\t\t\t\t\t\t   sizeof(Oid) * ndicts);\n\t\t\t\tmapdicts[0] = cfgmap->mapdict;\n\t\t\t\tif (ndicts >= MAXDICTSPERTT)\n\t\ttable_close(maprel, AccessShareLock);", "partial_line": "maplists[max", "completion": "maplists[maxtokentype].dictIds = (Oid *) <|endoftext|>"}
{"context": "\tAssert(SecurityRestrictionContext == 0);\n\tAssert(OidIsValid(userid));\n\t\t\t\t\tPGC_INTERNAL, PGC_S_DYNAMIC_DEFAULT);\n{\n}", "partial_line": "GetSyst", "completion": "GetSystemUser(void) <|endoftext|>"}
{"context": "\t\t\t\tauthmethodhost = pg_strdup(optarg);\n\t\t\tcase 'c':\n\t\t\t\t\tchar\t   *buf = pg_strdup(optarg);\n\t\t\t\t}\n\t\t\t\tbreak;", "partial_line": "c", "completion": "case 'E': <|endoftext|>"}
{"context": "\t\tFPgt(range_box->right.high, query->high);\nstatic bool\noverLeft4D(RectBox *rect_box, RangeBox *query)\n\treturn lower2D(&rect_box->range_box_y, &query->right);\n}", "partial_line": "overBelow4D(RectBox *rect_box, R", "completion": "overBelow4D(RectBox *rect_box, RangeBox *query) <|endoftext|>"}
{"context": "\t\t\t\t*op->resnull = true;\n\t\t\t\t\t\t\t\t\t   op->d.jsonexpr_coercion.omit_quotes,\n\t\t\"TRUE\",\n\t\t\"UNKNOWN\",\n\tJsonExprState *jsestate = op->d.jsonexpr.jsestate;", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tExecFindMatchingSubPlans(node->as_prune_state, false, NULL);\n\twhile ((i = bms_next_member(node->as_valid_asyncplans, i)) >= 0)\n\t}\n{\n\t\treturn true;", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "{\nstatic PartitionBoundInfo\n\t\t\t\t   PartitionKey key, int **mapping)\n\tint\t\t\ti;\n\t\t\telog(ERROR, \"invalid strategy in partition bound spec\");", "partial_line": "if (spec->", "completion": "if (spec->is_default) <|endoftext|>"}
{"context": "static const symbol s_2_190[5] = { 'i', 's', 's', 'e', 'u' };\nstatic const symbol s_2_196[1] = { 0xF3 };\n{ 4, s_2_2, -1, 1, 0},\n{ 5, s_2_8, -1, 3, 0},\n{ 4, s_2_9, -1, 1, 0},", "partial_line": "{ 6, s_2_", "completion": "{ 6, s_2_13, -1, 1, 0}, <|endoftext|>"}
{"context": "has_function_privilege_name_id(PG_FUNCTION_ARGS)\n\troleid = get_role_oid_or_public(NameStr(*username));\n\t\tPG_RETURN_NULL();\n\tOid\t\t\tfunctionoid;\n\tAclResult\taclresult;", "partial_line": "if (is_mi", "completion": "if (is_missing) <|endoftext|>"}
{"context": "\t\ti = -1;\n\t\t{\n\t\t\tareq->request_complete = false;\n\t\t}\n\tnode->as_whichplan = INVALID_SUBPLAN_INDEX;", "partial_line": "LWLockInitialize(&pstate->pa_lo", "completion": "LWLockInitialize(&pstate->pa_lock, LWTRANCHE_PARALLEL_APPEND); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"extra garbage at the end of the ACL specification\")));\n}\n\t\t\t\t 2 * N_ACL_RIGHTS +\n\tp = out;\n\t\tif (HeapTupleIsValid(htup))", "partial_line": "putid(p, NameStr((", "completion": "putid(p, NameStr(((Form_pg_authid) GETSTRUCT(htup))->rolname)); <|endoftext|>"}
{"context": "\t\t\t\terrorConflictingDefElem(defel, pstate);\n\t\t\tdconnlimit = defel;\n\t\telse if (strcmp(defel->defname, \"tablespace\") == 0)\n\t\telse\n\t{", "partial_line": "(errcode", "completion": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "\t\trp = (char *) readbuf;\n\t\t\tsize_t\t\toutlen = state->buflen;\n\t\t\t}\n\t\t\trp += read_remain;\n\t\t\t\tsize_t\t\tlen = outlen < lib ? outlen : lib;", "partial_line": "if (eol_f", "completion": "if (eol_flag && <|endoftext|>"}
{"context": "\t}\nhash_initial_lookup(HTAB *hashp, uint32 hashvalue, HASHBUCKET **bucketptr)\n{\n\tbucket = calc_bucket(hctl, hashvalue);\n\tsegment_ndx = MOD(bucket, hashp->ssize);", "partial_line": "if (segp =", "completion": "if (segp == NULL) <|endoftext|>"}
{"context": "static Buffer revmap_get_buffer(BrinRevmap *revmap, BlockNumber heapBlk);\nstatic void revmap_physical_extend(BrinRevmap *revmap);\nbrinRevmapInitialize(Relation idxrel, BlockNumber *pagesPerRange)\n{\n\tBrinMetaPageData *metadata;", "partial_line": "Page", "completion": "Page\t\tpage; <|endoftext|>"}
{"context": "\t\t\t0x0BBF,\t\t\t\t\n\t\t\t0x0BC1,\t\t\t\t\n\t\t\t0x0BCC,\t\t\t\t\n\t\t\t0x0C02,\t\t\t\t\n\t\t\t0x0C83,\t\t\t\t", "partial_line": "0x0C", "completion": "0x0CC4, <|endoftext|>"}
{"context": "void\n\t\t{\n#ifndef USE_FLOAT8_BYVAL\n\t\t\tif (!scan->xs_orderbynulls[i])\n\t\t\telse", "partial_line": "else if (orderByTyp", "completion": "else if (orderByTypes[i] == FLOAT4OID) <|endoftext|>"}
{"context": "#include \"storage/lmgr.h\"\n\tSHARED_OBJECT,\nstatic void getOidListDiff(Oid *list1, int *nlist1, Oid *list2, int *nlist2);\n\t\t\t\t\t\t\t   Oid refclassId, Oid refobjId,\nstatic void shdepReassignOwned_Owner(Form_pg_shdepend sdepForm, Oid newrole);", "partial_line": "r", "completion": "return; <|endoftext|>"}
{"context": "{\n\tstatic const uint64 EpochShift = UINT64CONST(116444736000000000);\n\treturn unified_ft.QuadPart;\nstatic unsigned short\n\tunsigned short uxmode = 0;", "partial_line": "uxm", "completion": "uxmode |= _S_IEXEC; <|endoftext|>"}
{"context": "\t\t\t\tchar\t   *str;\n\t\t}\n\t\tif (argpos > 0)\n\t\t\ttypid = get_fn_expr_argtype(fcinfo->flinfo, arg);\n\t\t\tvalue = elements[arg - 1];", "partial_line": "switch", "completion": "switch (*cp) <|endoftext|>"}
{"context": "\tMultiXactId oldestMultiXactId;\nstatic MultiXactId *OldestMemberMXactId;\nstatic int\tmxactMemberComparator(const void *arg1, const void *arg2);\nstatic MultiXactId mXactCacheGetBySet(int nmembers, MultiXactMember *members);\nstatic int\tZeroMultiXactOffsetPage(int64 pageno, bool writeXlog);", "partial_line": "static int\tZeroMultiXactMemberPage(int64 page", "completion": "static int\tZeroMultiXactMemberPage(int64 pageno, bool writeXlog); <|endoftext|>"}
{"context": "\tif (get_call_result_type(fcinfo, NULL, &tupdesc) != TYPEFUNC_COMPOSITE)\n\t\t\t\t\t\t\t\t\tObjectIdGetDatum(0),\n\t\t\t\t\t\t\t\t\tInt32GetDatum(-1));\npg_wal_replay_pause(PG_FUNCTION_ARGS)\n\t\t\t\t errhint(\"Recovery control functions can only be executed during recovery.\")));", "partial_line": "pg_wal_replay_resume(P", "completion": "pg_wal_replay_resume(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\tif (strcmp(argv[1], \"--help\") == 0 || strcmp(argv[1], \"-?\") == 0)\n\t\t\tBootstrapModeMain(argc, argv, true);\n\t\tcase DISPATCH_BOOT:\n\t\t\tBootstrapModeMain(argc, argv, false);\n#else", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t  REG_DWORD,\n\t{\n\t\tMessageBox(NULL, \"Could not set the supported types.\", \"PostgreSQL error\", MB_OK | MB_ICONSTOP);\n\t\t\t  event_source);\n\tif (RegDeleteKey(HKEY_LOCAL_MACHINE, key_name))", "partial_line": "re", "completion": "return S_OK; <|endoftext|>"}
{"context": "\tAlias\t   *eref;\n\t\tereport(ERROR,\n\trte->joinleftcols = leftcols;\n\tif (numaliases < list_length(colnames))\n\t\tereport(ERROR,", "partial_line": "nsitem->p_", "completion": "nsitem->p_rte = rte; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t LH_BUCKET_PAGE | LH_OVERFLOW_PAGE);\n\t}\n\t{\n\tAssert(cur->sk_strategy == HTEqualStrategyNumber);\n\t\thashkey = _hash_datum2hashkey_type(rel, cur->sk_argument,", "partial_line": "bucket = opaque->h", "completion": "bucket = opaque->hasho_bucket; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tint\t\t\tr;\n\t\t\t\t\tpg_fatal(\"could not read compressed file \\\"%s\\\": read %d of %zu\",\n\t\t\t\t\t\t\t fullpath, r, sizeof(buf));\n\t\t\t\t(buf[1] << 8) | buf[0];", "partial_line": "char\t\tfullpath[MAXPGP", "completion": "char\t\tfullpath[MAXPGPATH * 2]; <|endoftext|>"}
{"context": "\t\t\tif (cstate->opts.csv_mode)\n\t\tCopySendTextLikeEndOfRow(cstate);\n\tCopyToTextLikeOneRow(cstate, slot, true);\n\t\tneed_delim = true;\n\t\t{", "partial_line": "cstate->", "completion": "cstate->opts.force_quote_flags[attnum - 1]); <|endoftext|>"}
{"context": "#include \"optimizer/cost.h\"\n#include \"optimizer/placeholder.h\"\n\tint\t\t\tsublevels_up;", "partial_line": "phv->phr", "completion": "phv->phrels = phrels; <|endoftext|>"}
{"context": "\t\treturn InvalidOid;\n\tif (result == MyDatabaseTableSpace)\n{\n\tchar\t   *rawname;\n\tif (!SplitIdentifierString(rawname, ',', &namelist))", "partial_line": "if (IsTransactio", "completion": "if (IsTransactionState() && MyDatabaseId != InvalidOid) <|endoftext|>"}
{"context": "\t{\n\t\tFdwRoutine *fdwroutine;\n\t\tfdwroutine = GetFdwRoutineForRelation(onerel, false);\n\t}\nstatic void", "partial_line": "BlockNumber relpages, bool inh", "completion": "BlockNumber relpages, bool inh, bool in_outer_xact, <|endoftext|>"}
{"context": "\t\telse\n\t\tpg_fatal(\"directory \\\"%s\\\" is not a database cluster directory\",\n\tSimpleStringListCell *subcell = NULL;\n\tSimpleStringListCell *replslotcell = NULL;\n\t\treplslotcell = opt->replslot_names.head;", "partial_line": "pubcell = pu", "completion": "pubcell = pubcell->next; <|endoftext|>"}
{"context": "\telse\n\tif (removeOld)\n\t\tAssert(!outOfShmem);\n{\n\tPREDICATELOCKTARGET *heaptarget;", "partial_line": "relI", "completion": "relId = relation->rd_id; <|endoftext|>"}
{"context": "\t\t}\n\t\twhile ((res = PQgetResult(conn)) != NULL)\n\t\t\t\tif (i != 3)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tpg_fatal(\"Expected to follow PGRES_SINGLE_TUPLE, but received PGRES_TUPLES_OK directly instead\");", "partial_line": "fprintf(stderr, \", %d tuple: %s\\n\", PQntuples(res),", "completion": "fprintf(stderr, \", %d tuple: %s\\n\", PQntuples(res), PQgetvalue(res, 0, 0)); <|endoftext|>"}
{"context": "\t\tstrip_var(result);\nstatic int\n\twhile (var1weight > var2weight && i1 < var1ndigits)\n\tif (var1weight == var2weight)\n\t\t\t{", "partial_line": "retu", "completion": "return 1; <|endoftext|>"}
{"context": "\tAtEOXact_LargeObject(true);\n\tPreCommit_CheckForSerializationFailure();\n\t\t\t\t errmsg(\"cannot PREPARE a transaction that has operated on temporary objects\")));\n\tAtPrepare_Notify();\n\tAtPrepare_MultiXact();", "partial_line": "XactLastRecEn", "completion": "XactLastRecEnd = 0; <|endoftext|>"}
{"context": "\tif (empty)\n\t\tint64\t\tbnd = DatumGetInt64(lower.val);\n\t\t\tereturn(escontext, (Datum) 0,\n\t}\n\t\tbnd++;", "partial_line": "(errcode(ERRCODE_DATETI", "completion": "(errcode(ERRCODE_DATETIME_VALUE_OUT_OF_RANGE), <|endoftext|>"}
{"context": "\t{\"PG_VERSION\", false},\n\t\t\t(total_size / (1024 * 1024)),\nstatic bool\nskipfile(const char *fn)\n\tPageHeader\theader = (PageHeader) buf.data;", "partial_line": "if", "completion": "if (r != BLCKSZ) <|endoftext|>"}
{"context": "minmax_get_strategy_procinfo(BrinDesc *bdesc, uint16 attno, Oid subtype,\n\tAssert(strategynum >= 1 &&\n\t\topaque->cached_subtype = subtype;\n\t}\n\t\tForm_pg_attribute attr;", "partial_line": "elog(ERROR,", "completion": "elog(ERROR, \"missing operator %d(%u,%u) in opfamily %u\", <|endoftext|>"}
{"context": "#include \"pgstat.h\"\nint\t\t\tmax_prepared_xacts = 0;\n\tTimestampTz prepared_at;\t\n\tXLogRecPtr\tprepare_start_lsn;\t\n\tProcNumber\tlocking_backend;\t", "partial_line": "int", "completion": "int ninvalmsgs, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   &specConflict,\n\t\t}\n\tif (canSetTag)\n\t\t(estate->es_processed)++;\n\t\tresult = ExecProcessReturning(context, resultRelInfo, CMD_INSERT,", "partial_line": "if", "completion": "if (inserted_tuple) <|endoftext|>"}
{"context": "\t},\n\t{\n\t\t0, NULL\n\t}\n\t.name = \"PLyCursor\",", "partial_line": ".flags = P", "completion": ".flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, <|endoftext|>"}
{"context": "\t\terrno = 0;\n\t\tpgstat_report_wait_start(WAIT_EVENT_WAL_WRITE);\n\t\t}\n}\n\t\tissue_xlog_fsync(recvFile, recvSegNo, tli);", "partial_line": "walrcv->receive", "completion": "walrcv->receivedTLI = tli; <|endoftext|>"}
{"context": "\tfor (i = 0; i < desc->natts; i++)\n\t\tif (attr->attisdropped)\nPLy_output_setup_record(PLyObToDatum *arg, TupleDesc desc, PLyProcedure *proc)\nvoid\n\t\t\t\t\t  PLyProcedure *proc)", "partial_line": "arg->typmo", "completion": "arg->typmod = typmod; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tresult = &(*pstate)->contVal;\n\t\t\t(*pstate)->contVal.type = jbvObject;\n\t\t\t(*pstate)->contVal.val.object.nPairs = 0;\n\t\t\tuniqueifyJsonbObject(&(*pstate)->contVal,", "partial_line": "case WJB_EN", "completion": "case WJB_END_ARRAY: <|endoftext|>"}
{"context": "{\n\tPG_RETURN_BOOL(aclresult == ACLCHECK_OK);\n\tAclResult\taclresult;\n\tbool\t\tis_missing = false;\n\troleid = get_role_oid_or_public(NameStr(*username));", "partial_line": "PG_RETURN_N", "completion": "PG_RETURN_NULL(); <|endoftext|>"}
{"context": "\t\t}\n}\n\tconst char *temp;\n\tinitReadOnlyStringInfo(&buf, VARDATA_ANY(sstate),\n\tresult->nelems = nelems;", "partial_line": "temp = pq_getmsgbytes(&buf, sizeof(D", "completion": "temp = pq_getmsgbytes(&buf, sizeof(Datum) * nelems); <|endoftext|>"}
{"context": "\tswitch (exprKind)\n\t\tcase EXPR_KIND_WHERE:\n\t\t\treturn \"FILTER\";\n\t\tcase EXPR_KIND_WINDOW_ORDER:\n\t\t\treturn \"ORDER BY\";", "partial_line": "case E", "completion": "case EXPR_KIND_VALUES: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\toldInfo->ii_Unique,\n\t\t\t\t\t\t\ttrue,\n\t\tindexColNames = lappend(indexColNames, NameStr(att->attname));\n\t}\n\t\tHeapTuple\ttp;", "partial_line": "elog(ERROR, \"cache lookup", "completion": "elog(ERROR, \"cache lookup failed for attribute %d of relation %u\", <|endoftext|>"}
{"context": "\t\tresult = (arg1 > 0.0) ? arg1 : 0;\n\t\tresult = exp(arg1);\n\t\t\telse\n\t\telse if (unlikely(result == 0.0))\n\t}", "partial_line": "errmsg(\"cannot take logarithm of", "completion": "errmsg(\"cannot take logarithm of a negative number\"))); <|endoftext|>"}
{"context": "}\n\tAssert(slot != NULL);\n\tAssert(!TTS_EMPTY(slot));\n\t\treturn slot->tts_ops->get_minimal_tuple(slot);\n}", "partial_line": "HeapTup", "completion": "HeapTuple\ttup; <|endoftext|>"}
{"context": "#include \"access/table.h\"\n#include \"nodes/nodeFuncs.h\"\nstatic AclResult LockTableAclCheck(Oid reloid, LOCKMODE lockmode, Oid userid);\n{", "partial_line": "char", "completion": "char\t\trelkind; <|endoftext|>"}
{"context": "\t\t*num_err = error;\n\t}\n\t\t\treturn JSON_EXPECTED_END;\n\t\tcase JSON_PARSE_STRING:\n\t\t\treturn JSON_EXPECTED_STRING;", "partial_line": "return JSON_EXPECTE", "completion": "return JSON_EXPECTED_ARRAY_FIRST; <|endoftext|>"}
{"context": "\tif (!sbsroutines)\n\t\tereport(ERROR,\n\t\t\t\t parser_errposition(pstate, exprLocation(containerBase))));\n\tsbsref->refassgnexpr = NULL;\t\n\t\t\t\t\t\t-2,", "partial_line": "tru", "completion": "true, <|endoftext|>"}
{"context": "\t\tif (!OidIsValid(typcache->rng_canonical_finfo.fn_oid))\n\t\tboundA.inclusive = !boundA.inclusive;\n\t\tr = make_range(typcache, &boundA, &boundB, false, NULL);\n\t\treturn RangeIsEmpty(r);\n\tif (empty1 || empty2)", "partial_line": "range_deserialize", "completion": "range_deserialize(typcache, r2, &lower2, &upper2, &empty2); <|endoftext|>"}
{"context": "\t\tvalues[1] = LSNGetDatum(MyReplicationSlot->data.restart_lsn);\n\t\t\t\t\t\t\t\t\tfalse,\t\n\t\t\t\t\t\t\t\t\trestart_lsn,\n\tFreeDecodingContext(ctx);\n\tName\t\tplugin = PG_GETARG_NAME(1);", "partial_line": "result = HeapTupleGe", "completion": "result = HeapTupleGetDatum(tuple); <|endoftext|>"}
{"context": "\tincrement_prodesc_refcount(prodesc);\nstatic bool\nstatic void\n\tif (prodesc->reference)\n\t\tSvREFCNT_dec_current(prodesc->reference);", "partial_line": "compile_plperl_function(Oid fn_oid, bool is_t", "completion": "compile_plperl_function(Oid fn_oid, bool is_trigger, bool is_event_trigger) <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"cache lookup failed for operator family %u\", opfid);\nRegProcedure\n\t\tresult = optup->oprcode;\n\t\treturn result;\n\ttp = SearchSysCache1(OPEROID, ObjectIdGetDatum(opno));", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  top_parent_relid);\n\t\tif (update_colnos)\n\t\tAssert(bms_is_member(relid, root->all_result_relids));\n\t\t*processed_tlist = (List *)\n\t\t\t\t\t\t\t\t\t\t\t\t\trelid,", "partial_line": "root->parse->resultR", "completion": "root->parse->resultRelation); <|endoftext|>"}
{"context": "\tfetch = cache;\n\tif (!seq->is_called)\n\t{\n\t\t\tlogit = true;\n\t\t\t\t(maxv < 0 && next + incby > maxv))", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\tbuild_EvalXFunc(b, mod, \"ExecEvalConvertRowtype\",\n\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\tcase EEOP_JSON_CONSTRUCTOR:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t    break;\n\t\tif (break_comma && (!ps.leave_comma ||\n\t\t    max_col - tabsize))\n\t    break;\n\t\t\tfill_buffer();", "partial_line": "if (q", "completion": "if (quote == '\"') <|endoftext|>"}
{"context": "\tif (len == 0)\n\tmystreamer = (astreamer_plain_writer *) streamer;\n}\n{\n\tstreamer = palloc0(sizeof(astreamer_extractor));", "partial_line": "const char *d", "completion": "const char *data, int len, <|endoftext|>"}
{"context": "\tfscan->fs_relids = offset_relid_set(fscan->fs_relids, rtoffset);\nset_customscan_references(PlannerInfo *root,\n\t\t\t\t\t\t   INDEX_VAR,\n\t\t\t\t\t\t   NUM_EXEC_TLIST((Plan *) cscan));\n\t\tcscan->scan.plan.qual = (List *)", "partial_line": "itli", "completion": "itlist, <|endoftext|>"}
{"context": "\t\t\tnulls[19] = true;\n\t\t\tnulls[21] = true;\n\t\t\tnulls[22] = true;\n\tint32\t\tprocNumber = PG_GETARG_INT32(0);\n\t\tPG_RETURN_NULL();", "partial_line": "PG_RETURN_OID(beentry-", "completion": "PG_RETURN_OID(beentry->st_databaseid); <|endoftext|>"}
{"context": "\t\t\t\t\tuncertain;\n\t\tclamped_nvalues2 = Min(sslot2->nvalues, nd2);\n\t\tInitFunctionCallInfoData(*fcinfo, &eqproc, 2, collation,\n\t\tfor (i = 0; i < sslot1->nvalues; i++)\n\t\t\t\tif (hasmatch2[j])", "partial_line": "fcinfo->isn", "completion": "fcinfo->isnull = false; <|endoftext|>"}
{"context": "\t\t\t\t\tExpr\t   *e = (Expr *) lfirst(arg);\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tExecInitExprRec(jve->raw_expr, state, resv, resnull);\n\t\t\t\tif (ctor->func)", "partial_line": "else if ((ct", "completion": "else if ((ctor->type == JSCTOR_JSON_PARSE && !ctor->unique) || <|endoftext|>"}
{"context": "\t\tshm_toc_estimate_keys(&pcxt->estimator, 1);\n\telse\n\tMemSet(shared, 0, est_shared_len);\n\tshared->dead_items_handle = TidStoreGetHandle(dead_items);\n\tpg_atomic_init_u32(&(shared->idx), 0);", "partial_line": "pvs->buffer_u", "completion": "pvs->buffer_usage = buffer_usage; <|endoftext|>"}
{"context": "}\n\tAssert(snap->snapshot_type == SNAPSHOT_HISTORIC_MVCC);\n\tAssert(snap->curcid == FirstCommandId);\n\tAssert(snap->active_count > 0);\n}", "partial_line": "snapshot->xm", "completion": "snapshot->xmin = builder->xmin; <|endoftext|>"}
{"context": "\tchar\t   *dbname_conninfo = NULL;\n\tuint64\t\tpub_sysid;\n\t\t}\n\t\t\texit(0);\n\topt.pub_conninfo_str = NULL;", "partial_line": "opt.recovery", "completion": "opt.recovery_timeout = 0; <|endoftext|>"}
{"context": "}\n\t\t  IndexUniqueCheck checkUnique,\n\t\t\t\t\t\t\t\t\t  ALLOCSET_DEFAULT_SIZES);\n\t\tfor (i = 0; i < ginstate->origTupdesc->natts; i++)\n\tEnterParallelMode();", "partial_line": "shm_toc_estimate_chunk(&pcxt->", "completion": "shm_toc_estimate_chunk(&pcxt->estimator, estsort); <|endoftext|>"}
{"context": "\t\t\t\telse\n\t\t\tcase PROARGMODE_TABLE:\n\t\tif (argsprinted == insertorderbyat)\n\t\telse if (argsprinted)\n\t\tappendStringInfoString(buf, format_type_be(argtype));", "partial_line": "Assert(nexta", "completion": "Assert(nextargdefault != NULL); <|endoftext|>"}
{"context": "\telse\n\t\t\t\tereport(ERROR,\n\t\t\t   &(tm->tm_year), &(tm->tm_mon), &(tm->tm_mday));\n\t\ttz = DetermineTimeZoneOffset(tm, session_timezone);\n\t\tif (!IS_VALID_TIMESTAMP(result))", "partial_line": "TIMESTAMP_NO", "completion": "TIMESTAMP_NOEND(result); <|endoftext|>"}
{"context": "static List *get_collation(Oid collation, Oid actual_datatype);\nstatic List *get_opclass(Oid opclass, Oid actual_datatype);\nstatic void transformIndexConstraints(CreateStmtContext *cxt);\n\t\t\t\t\t\t\t\t\t  bool skipValidation);\n\tListCell   *elements;", "partial_line": "(errcode(ERRCODE_DUPLIC", "completion": "(errcode(ERRCODE_DUPLICATE_TABLE), <|endoftext|>"}
{"context": "\t\t\t\t\t \"PGAIO_RESULT_ERROR_BITS is insufficient for buffer_readv\");\n\tif (error_count > 0)\n\t\tfirst_off = first_error_off;\n#undef READV_COUNT_BITS\n\t\t\t\t\t\t  bool *failed_checksum,", "partial_line": "BufferDesc *buf", "completion": "BufferDesc *buf_hdr = is_temp ? <|endoftext|>"}
{"context": "                }\n            case 4:\n                if (in_grouping_b(z, g_s_ending, 98, 116, 0)) goto lab0;\n                }\n    }", "partial_line": "z-", "completion": "z->ket = z->c; <|endoftext|>"}
{"context": "\t\t\t\tif (!new_expr)\n\t\t\t\t\tif (isAutoUpdatableView)\n\t\t\t\t\t\tallReplaced = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t att_tup->atttypmod,\n\t\t\t\t}", "partial_line": "ListCell", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\t\tNp->L_currency_symbol = \" \";\n\tchar\t   *result,\n\t}\nstatic void\n\t{", "partial_line": "*Np->inout_p, Np->L_positive_sign, Np->", "completion": "*Np->inout_p, Np->L_positive_sign, Np->L_negative_sign); <|endoftext|>"}
{"context": "\t{PG_GBK, \"CP936\"},\n\tchar\t   *codepage;\n\tif (GetLocaleInfoEx(wctype,\n\t\t\t\t\t\t(LPWSTR) &cp, sizeof(cp) / sizeof(WCHAR)) > 0)\n\t\t\tif (cp == CP_ACP)", "partial_line": "pg_get_encoding_from_locale(const char *ctype,", "completion": "pg_get_encoding_from_locale(const char *ctype, bool write_message) <|endoftext|>"}
{"context": "\tamroutine->ammarkpos = NULL;\n\tBrinInsertState *bistate;\n}\nbool\nbrininsert(Relation idxRel, Datum *values, bool *nulls,", "partial_line": "origHeapBlk = ItemP", "completion": "origHeapBlk = ItemPointerGetBlockNumber(heaptid); <|endoftext|>"}
{"context": "Alias *\n\tAlias\t   *a = makeNode(Alias);\n\tr->relabelformat = rformat;\n\tr->location = -1;\nRangeVar *", "partial_line": "r->alias =", "completion": "r->alias = NULL; <|endoftext|>"}
{"context": "\t\taclDatum = (Datum) 0;\npg_type_aclmask_ext(Oid type_oid, Oid roleid, AclMode mask, AclMaskHow how,\n\tbool\t\tisNull;\n\t\t\t}\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),", "partial_line": "typeForm = (Form_", "completion": "typeForm = (Form_pg_type) GETSTRUCT(tuple); <|endoftext|>"}
{"context": "\t\t\t\t\tcase VARBITOID:\n\t\t\t\t\t\tif (strcmp(PQgetvalue(res, tuple, field), \"t\") == 0)\n\t\t\t\t\tdefault:\n\t\t\t}\n\tif (rows_this_statement > 0)", "partial_line": "dest", "completion": "destroyPQExpBuffer(q); <|endoftext|>"}
{"context": "\t\tint\t\t\targlen;\n\t\t\tpg_log_error(\"%s: shell command is too long\", argv[0]);\n\t\tmemcpy(command + len, arg, arglen);\n\t\t{\n\tif (fgets(res, sizeof(res), fp) == NULL)", "partial_line": "(void)", "completion": "(void) pclose(fp); <|endoftext|>"}
{"context": "\telse if (*token == '(')\n\t\tretval = T_Boolean;\n{\n\tNode\t   *result;\n\t{", "partial_line": "re", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t\t\t\tchanged_any = true;\n\t\tcolinfo->printaliases = changed_any;\n\tListCell   *lc;\n\t{\n\t\tforeach(lc, colinfo->parentUsing)", "partial_line": "return fa", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  requestSize,\n\tProcGlobal->subxidStates = (XidCacheStatus *) ptr;\n\tProcGlobal->statusFlags = (uint8 *) ptr;\n\t\t\t\t\t\t\trequestSize,\n\t\t}", "partial_line": "&foun", "completion": "&found); <|endoftext|>"}
{"context": "\t\t\tre_array[i].cre_flags == cflags &&\n\tif (unlikely(RegexpCacheMemoryContext == NULL))\n\tre_temp.cre_context = AllocSetContextCreate(CurrentMemoryContext,\n\t\t\t\t\t\t\t\tpattern,\n\t\t\t\t\t\t\t\tcollation);", "partial_line": "--num_", "completion": "--num_res; <|endoftext|>"}
{"context": "strupper_libc_mb(char *dest, size_t destsize, const char *src, ssize_t srclen,\n\tsize_t\t\tresult_size;\n\tresult_size = wchar2char(result, workspace, max_size + 1, locale);\n\treturn result_size;\npg_locale_t", "partial_line": "tp = SearchSysCache1(DATAB", "completion": "tp = SearchSysCache1(DATABASEOID, ObjectIdGetDatum(MyDatabaseId)); <|endoftext|>"}
{"context": "Datum\n\ttest_empty();\n\ttest_single_value(PG_UINT64_MAX - 1);\nstatic void\ntest_pattern(const test_spec *spec)", "partial_line": "Timestam", "completion": "TimestampTz endtime; <|endoftext|>"}
{"context": "\tcheck_acl(acl);\n\tresult = 0;\n\t\tif ((how == ACLMASK_ALL) ? (result == mask) : (result != 0))\n\t\t*roleids = NULL;\n\tcheck_acl(acl);", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase MinCommandIdAttributeNumber:\n\t\t\tbreak;\n\t\t\tresult = 0;\t\t\t\n\treturn result;", "partial_line": "newTuple = (", "completion": "newTuple = (HeapTuple) palloc(HEAPTUPLESIZE + tuple->t_len); <|endoftext|>"}
{"context": "\t\thash_create(\"Logical rewrite mapping\",\n{\n\tdlist_mutable_iter iter;\n\t\treturn;\n\t\t state->rs_num_rewrite_mappings);", "partial_line": "char", "completion": "char\t   *waldata; <|endoftext|>"}
{"context": "\t\t\tiprev = i - 1;\n\t\t\t\tif (!p2->closed)\n\t\t\t\t\tcontinue;\n\t\t\t\tjprev = p2->npts - 1;\t\n\tPATH\t   *p1 = PG_GETARG_PATH_P(0);", "partial_line": "LSEG\t\ts", "completion": "LSEG\t\tseg1, <|endoftext|>"}
{"context": "\t\tsnprintf(query + strlen(query), sizeof(query) - strlen(query),\n\ti_datname = PQfnumber(res, \"datname\");\n\t\tsnprintf(dbinfos[tupnum].db_tablespace, sizeof(dbinfos[tupnum].db_tablespace), \"%s\",\n\t}\n{", "partial_line": "FirstNor", "completion": "FirstNormalObjectId); <|endoftext|>"}
{"context": "\t\t\tcase FKCONSTR_MATCH_FULL:\n\t\t\t\tsep = \" OR \";\n\t\t\t\t\t\t\t GUC_ACTION_SAVE, true, 0, false);\n\t\tTupleDesc\ttupdesc = SPI_tuptable->tupdesc;\n\t\tfor (int i = 0; i < fake_riinfo.nkeys; i++)", "partial_line": "if (fake_riinfo.confma", "completion": "if (fake_riinfo.confmatchtype == FKCONSTR_MATCH_FULL && <|endoftext|>"}
{"context": "\t\t\t\t\t\t  ordOperators,\n\tSetOp\t   *plan;\n\t\t\t\t\t\t\t\t   flags | CP_LABEL_TLIST);\n\tPlan\t   *rightplan;\n\t\t\t\t\t\t\t\tleftplan,", "partial_line": "best_path->wt", "completion": "best_path->wtParam, <|endoftext|>"}
{"context": "\t{\n\t\tTrigger    *trigger = &trigdesc->triggers[i];\n\t\tHeapTuple\toldtuple;\n\t\tif (!TRIGGER_TYPE_MATCHES(trigger->tgtype,\n\t\tLocTriggerData.tg_newslot = newslot;", "partial_line": "LocTrig", "completion": "LocTriggerData.tg_trigger = trigger; <|endoftext|>"}
{"context": "\t\t\tprocform->pronargs != 1 ||\n\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\telse if (member->number == BTINRANGE_PROC)\n\t\t\t\t\t\t errmsg(\"ordering in_range functions must have five arguments\")));\n\t\t\t\tereport(ERROR,", "partial_line": "member->lefttype = p", "completion": "member->lefttype = procform->proargtypes.values[0]; <|endoftext|>"}
{"context": "\t\tereport(FATAL,\n\t\t\t\t errmsg(\"specified data directory \\\"%s\\\" is not a directory\",\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t\t\t\t\tDataDir),\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),", "partial_line": "errdetail(\"Per", "completion": "errdetail(\"Permissions should be u=rwx (0700) or u=rwx,g=rx (0750).\"))); <|endoftext|>"}
{"context": "#include \"nodes/parsenodes.h\"\n{\n{", "partial_line": "int64\t\tcurpos = WinGetC", "completion": "int64\t\tcurpos = WinGetCurrentPosition(winobj); <|endoftext|>"}
{"context": "{\n\tappinfo->child_reltype = childrel->rd_rel->reltype;\nmake_inh_translation_list(Relation oldrelation, Relation newrelation,\n\t\tint32\t\tatttypmod;\n\t\t\t\t\t\t\t\t\t\t atttypmod,", "partial_line": "contin", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\tgoto search;\n\t\t}\n\t{\n\treturn is_unique;\n_bt_search_insert(Relation rel, Relation heaprel, BTInsertState insertstate)", "partial_line": "if (_bt_conditionallockbu", "completion": "if (_bt_conditionallockbuf(rel, insertstate->buf)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t  fmtId(provider), objtype);\nbool\n{\n\telse\nbool", "partial_line": "char ***", "completion": "char ***namelist) <|endoftext|>"}
{"context": "\t{ ECPGdo(__LINE__, 0, 1, \"test1\", 0, ECPGst_normal, \"fetch 1 from $0\", \n\tECPGt_char,&(curname3),(long)0,(long)1,(1)*sizeof(char), \n#line 165 \"cursor.pgc\"\n\tECPGt_int,&(count),(long)1,(long)1,sizeof(int), \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);", "partial_line": "ECPGt_NO_INDICATOR, NULL", "completion": "ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EOIT, <|endoftext|>"}
{"context": "static bool\n\tint64\t\tval;\n\t\t\treturn false;\n\t}\n\t\t\t\tnewuval;", "partial_line": "if (val", "completion": "if (val < 0) <|endoftext|>"}
{"context": "\t\t\t\tinstrumentSortedGroup(&(node)->incsort_info.groupName##GroupInfo, \\\n\t\t\t} \\\n\tswitch (sort_instr.spaceType)\n\t\tcase SORT_SPACE_TYPE_DISK:\n{", "partial_line": "for (int i = 0; i < plannode->nPres", "completion": "for (int i = 0; i < plannode->nPresortedCols; i++) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   confkey,\n\t\t\t\t\t\t\t\t   conffeqop,\n\t\tfkconstraint = makeNode(Constraint);\n\t\tfkconstraint->location = -1;\n\t\tfkconstraint->fk_del_action = constrForm->confdeltype;", "partial_line": "fkconstrain", "completion": "fkconstraint->initially_valid = constrForm->convalidated; <|endoftext|>"}
{"context": "\tForm_pg_attribute attrtuple;\n\tAttrNumber\tattnum;\n\tObjectAddress address;\n\t}\n\tif (!newtarget_default)", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "        }\n        }\n    if (!find_among_b(z, a_39, 95)) return 0;\n        if (!find_among_b(z, a_40, 1)) goto lab0;\n    {   int ret = slice_del(z);", "partial_line": "z->b", "completion": "z->bra = z->c; <|endoftext|>"}
{"context": "        z->lb = mlimit1;\n            {   int m2 = z->l - z->c; (void)m2;\n                }\n                ;\n}", "partial_line": "cas", "completion": "case 1: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\telog(ERROR, \"unrecognized aggkind: %d\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&loccontext);\n\t\t\t\t\t\t\tforeach(lc, expr->args)\n\t\t\t\t\t\t\t\t(void) assign_collations_walker((Node *) when->result,", "partial_line": "(Node *) sbsref->ref", "completion": "(Node *) sbsref->reflowerindexpr); <|endoftext|>"}
{"context": "\t\tprosrc = TextDatumGetCString(tmp);\n\t\tappendStringInfoString(&buf, prosrc);\n\tPG_RETURN_TEXT_P(string_to_text(buf.data));\npg_get_function_arguments(PG_FUNCTION_ARGS)\n\tOid\t\t\tfuncid = PG_GETARG_OID(0);", "partial_line": "HeapTuple", "completion": "HeapTuple\tproctup; <|endoftext|>"}
{"context": "{ 6, s_2_367, -1, 91, 0},\n{ 5, s_2_370, 369, 128, 0},\n{ 5, s_2_373, 369, 97, 0},\n{ 3, s_2_401, -1, 120, 0},\n{ 4, s_2_412, -1, 13, 0},", "partial_line": "{ 6, s_2_418,", "completion": "{ 6, s_2_418, 416, 30, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   format_type_be(indesc->tdtypeid))));\n{\n{\n\tint\t\t\ti;\n\t\tif (attrMap->attnums[i] == 0 &&", "partial_line": "inatt->attal", "completion": "inatt->attalignby == outatt->attalignby) <|endoftext|>"}
{"context": "\tJsonSemAction sem;\n\tsem.array_start = json_manifest_array_start;\n\tsem.array_end = json_manifest_array_end;\nstatic JsonParseErrorType\njson_manifest_object_start(void *state)", "partial_line": "switch (", "completion": "switch (parse->state) <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t{\n\t\t\tbreak;\n\t\t\t\t\t\t  Datum *datum, GinNullCategory *category,\n\t\telse if (cmp > 0)", "partial_line": "int", "completion": "int\t\t\ti, <|endoftext|>"}
{"context": "    {   int ret = slice_from_s(z, 3, s_23);\n    return 1;\n            }\n    return 1;\n            among_var = find_among_b(z, a_20, 22);", "partial_line": "case", "completion": "case 1: <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\t\t\t\t\t   record,\n\t\t\tappendStringInfo(&buf, \"error decoding record: %s\",\n\t\tMemoryContextSwitchTo(oldCxt);\n\tSpinLockAcquire(&Insert->insertpos_lck);", "partial_line": "SpinLockRelease(&Ins", "completion": "SpinLockRelease(&Insert->insertpos_lck); <|endoftext|>"}
{"context": "static void\n{\n\tAH->restorePass = RESTORE_PASS_MAIN;\n\t\t\t\t\tdo_now = false;\n\t\t\t\t\t\tnext_work_item->desc, next_work_item->tag);", "partial_line": "reduce_dependencies(AH, next_wor", "completion": "reduce_dependencies(AH, next_work_item, NULL); <|endoftext|>"}
{"context": "#include \"catalog/pg_ts_config.h\"\n#include \"miscadmin.h\"\n#define DEPFLAG_ORIGINAL\t0x0001\t\n{\ntypedef struct", "partial_line": "Relation", "completion": "Relation *depRel, int32 flags); <|endoftext|>"}
{"context": "\t\t\trp += read_remain;\n\t\t\t\tsize_t\t\tlen = outlen < lib ? outlen : lib;\n\t\t\t\tif (eol_flag &&\n\t\t\t\t\t(size_t) (p - state->buffer + 1) <= len)\n\t\t\tif (outlen > 0)", "partial_line": "state->overflow", "completion": "state->overflowbuf = pg_realloc(state->overflowbuf, <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tsec < 0 || fsec < 0) ? '-' : '+';\n\t\t\t\telse if (has_day)\n\t\t\t\t\tcp = AppendSeconds(cp, sec, fsec, MAX_INTERVAL_PRECISION, true);\n\t\t\t\t}", "partial_line": "*cp", "completion": "*cp = '\\0'; <|endoftext|>"}
{"context": "\t    ps.not_cast_mask = 0;\n\t\tdiag2(1, \"Unbalanced parens\");\n\t\t}\n\tcase lbrace:\t\t\n\t\t    dump_line();", "partial_line": "ps.i_l_", "completion": "ps.i_l_follow = 0; <|endoftext|>"}
{"context": "\t\t*filename = pset.inputfile;\n#endif\n\tset_pglocale_pgservice(argv[0], PG_TEXTDOMAIN(\"psql\"));\n\tpset.queryFout = stdout;\n\tpset.popt.topt.unicode_header_linestyle = UNICODE_LINESTYLE_SINGLE;", "partial_line": "Establi", "completion": "EstablishVariableSpace(); <|endoftext|>"}
{"context": "\tconverted = LocalToUtf(src, len, dest,\n\tPG_RETURN_INT32(converted);\nDatum\n\tunsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2);\n\tunsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2);", "partial_line": "unsigned char *des", "completion": "unsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3); <|endoftext|>"}
{"context": "\t    }\n\t\tfor (i = 0; token[i]; ++i)\n\tcase binary_op:\t\n\t\tmemcpy(e_code, token, len);\n\t\tif (ps.want_blank)", "partial_line": "scase = f", "completion": "scase = false; <|endoftext|>"}
{"context": "\t\t\t\t\t  int32 range_count, RangeType **ranges)\n\tint32\t\ti;\n\t\t\t\titems[i - 1] -= prev_offset;\n\t\t\t\titems[i - 1] |= MULTIRANGE_ITEM_OFF_BIT;\n\t\t\tprev_offset = ptr - begin;", "partial_line": "memcpy(ptr, (Pointer) (ranges[", "completion": "memcpy(ptr, (Pointer) (ranges[i] + 1), len); <|endoftext|>"}
{"context": "\t  PG_ISGRAPH | PG_ISPRINT | PG_ISPUNCT,\n\t  PG_ISALPHA | PG_ISLOWER | PG_ISGRAPH | PG_ISPRINT,\n\t  PG_ISALPHA | PG_ISLOWER | PG_ISGRAPH | PG_ISPRINT,\n\t  PG_ISALPHA | PG_ISLOWER | PG_ISGRAPH | PG_ISPRINT,\n\t  PG_ISALPHA | PG_ISLOWER | PG_ISGRAPH | PG_ISPRINT,", "partial_line": "errhint(\"Use the COLLATE clause to", "completion": "errhint(\"Use the COLLATE clause to set the collation explicitly.\"))); <|endoftext|>"}
{"context": "\t}\n\t*plen = len;\n\t\t\t\t\t\t\tlobjId_new, GetUserId());\n\tif (descflags == 0)\n\t{", "partial_line": "lobjId", "completion": "lobjId))); <|endoftext|>"}
{"context": "static void tar_free(WalWriteMethod *wwmethod);\nstatic const WalWriteMethodOps WalTarMethodOps = {\n\t.existsfile = tar_existsfile,\n\t.get_file_name = tar_get_file_name,\n\t.finish = tar_finish,", "partial_line": "pgo", "completion": "pgoff_t\t\tofs_start; <|endoftext|>"}
{"context": "\treturn len_dest;\nstatic int32_t\n}\nu_strFoldCase_default(UChar *dest, int32_t destCapacity,\n{", "partial_line": "return u_strFoldCase(d", "completion": "return u_strFoldCase(dest, destCapacity, src, srcLength, <|endoftext|>"}
{"context": "\t\tLWLockAcquire(bktype_lock, LW_SHARED);\n\t\tLWLockRelease(bktype_lock);\n{\n\t\tcase B_STANDALONE_BACKEND:\n\tbool\t\tno_temp_rel;", "partial_line": "if (io", "completion": "if (io_object == IOOBJECT_WAL && <|endoftext|>"}
{"context": "box_contain_pt(PG_FUNCTION_ARGS)\n{\n\tPG_RETURN_BOOL(box_contain_point(box, pt));\n\tPG_RETURN_BOOL(line_contain_point(line, &lseg->p[0]) &&\ninter_sl(PG_FUNCTION_ARGS)", "partial_line": "LINE\t   *line = PG_GE", "completion": "LINE\t   *line = PG_GETARG_LINE_P(1); <|endoftext|>"}
{"context": "\t\t\t\tfsec2;\n\t\t\tINTERVAL_NOBEGIN(result);\n\telse if (TIMESTAMP_IS_NOEND(dt1))\n\t\t\t\t\t errmsg(\"interval out of range\")));\n\t}", "partial_line": "INTER", "completion": "INTERVAL_NOBEGIN(result); <|endoftext|>"}
{"context": "bool\nCheckDateTokenTables(void)\n{\n\treturn ok;\n\tSize\t\ttbl_size;", "partial_line": "n * size", "completion": "n * sizeof(datetkn); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  NULL, 1, entry);\n{\n\t\t{\n\t\t\t\tchar\t   *extname;\n\t\t\t\t\tcontinue;", "partial_line": "if (con", "completion": "if (control->default_version == NULL) <|endoftext|>"}
{"context": "\tPQconninfoFree(connOptions);\n\tAssert(pgconn != NULL);\n\tsnprintf(filename, MAXPGPATH, \"%s/%s\", target_dir,\n\t\t\t use_recovery_conf ? \"recovery.conf\" : \"postgresql.auto.conf\");\n\tif (!use_recovery_conf)", "partial_line": "fclo", "completion": "fclose(cf); <|endoftext|>"}
{"context": "\t\t\tivinfo.num_heap_tuples = onerel->rd_rel->reltuples;\n\t\t\t\t\t\t\t\t\t   params->log_min_duration))\n\t\t\t\tread_rate = (double) BLCKSZ * total_blks_read /\n\t\t\t\t\t\t\t get_database_name(MyDatabaseId),\n\t\t\t\t\t\t\t RelationGetRelationName(onerel));", "partial_line": "MemoryC", "completion": "MemoryContextSwitchTo(caller_context); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t< (yearsecs\n\t\t\t\t\tif (TZ_MAX_TIMES - 2 < timecnt)\n\t\t\t\t\t\tsp->types[timecnt++] = reversed;\n\t\t\t\t\t\tyearlim = year + YEARSPERREPEAT + 1;\n\t\t\t\t\t}", "partial_line": "if (increm", "completion": "if (increment_overflow_time <|endoftext|>"}
{"context": "\t\t\tappendStringInfoChar(buf, '(');\n\t\t\tfirst = false;\n}\n\tforfour(l1, rtfunc->funccoltypes,\n\t\t\tl3, rtfunc->funccolcollations,", "partial_line": "if", "completion": "if (colinfo) <|endoftext|>"}
{"context": "\tbool\t\tfound;\n\t\t{\n\t\t\tchar\t   *hint = NULL;\n\t\t\t\t\t\t\t\tTotalProcs + max_files_per_process);\n\t\t\t}", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tforeach(vars, input_rel->reltarget->exprs)\n\t{\n\t\tif (IsA(var, PlaceHolderVar))\n\t\t\tPlaceHolderInfo *phinfo = find_placeholder_info(root, phv);\n\t\t\t\t\t\t(bms_is_subset(phv->phrels, sjinfo->syn_righthand) ||", "partial_line": "other", "completion": "othersj->ojrelid); <|endoftext|>"}
{"context": "\t\t\tGrantLockLocal(locallock, owner);\n\tif (ConflictsWithRelationFastPath(locktag, lockmode))\n\t\tif (!FastPathTransferRelationLocks(lockMethodTable, locktag,\n\t\tAbortStrongLockAcquire();\n\t\t\treturn LOCKACQUIRE_NOT_AVAIL;", "partial_line": "lock = proclock-", "completion": "lock = proclock->tag.myLock; <|endoftext|>"}
{"context": "{ 4, s_2_562, -1, 13, 0},\n{ 5, s_2_565, -1, 123, 0},\n{ 7, s_2_567, -1, 92, 0},\n{ 2, s_2_578, -1, 13, 0},\n{ 3, s_2_603, -1, 56, 0},", "partial_line": "{ 4, s_2_608, 604,", "completion": "{ 4, s_2_608, 604, 129, 0}, <|endoftext|>"}
{"context": "{\n\t}\n\t\t\t\tbreak;\n\t{\n\t\tExprState **predicate;", "partial_line": "*predicate = ExecPrepareQual((List *)", "completion": "*predicate = ExecPrepareQual((List *) tgqual, estate); <|endoftext|>"}
{"context": "\tPyModuleDef_HEAD_INIT,\n\t.m_name = \"spiexceptions\",\n\tm = PyModule_Create(&PLy_module);\n\treturn m;\n{", "partial_line": "PLy_re", "completion": "PLy_result_init_type(); <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\tfor (block_id = 0; block_id <= XLogRecMaxBlockId(record); block_id++)\n\t\t\tcontinue;\n\t}\n{", "partial_line": "XLogRecG", "completion": "XLogRecGetLen(record, &rec_len, &fpi_len); <|endoftext|>"}
{"context": "static const symbol s_2_385[5] = { 0xC4, 0x8D, 'i', 'n', 'a' };\nstatic const symbol s_2_391[4] = { 'b', 'a', 's', 'a' };\nstatic const symbol s_2_406[5] = { 'o', 'v', 'i', 't', 'a' };\nstatic const symbol s_2_408[4] = { 'e', 's', 't', 'a' };\nstatic const symbol s_2_411[4] = { 'o', 's', 't', 'a' };", "partial_line": "static cons", "completion": "static const symbol s_2_412[4] = { 'n', 'u', 't', 'a' }; <|endoftext|>"}
{"context": "bool\t\tenable_bitmapscan = true;\nbool\t\tenable_sort = true;\nbool\t\tenable_memoize = true;\nbool\t\tenable_parallel_append = true;\nbool\t\tenable_parallel_hash = true;", "partial_line": "RestrictIn", "completion": "RestrictInfo *rinfo, <|endoftext|>"}
{"context": "\tproclist_head wakeup;\n\tproclist_foreach_modify(iter, &lock->waiters, lwWaitLink)\n\t{\n\t\t\twokeup_somebody = true;\n\t\t{", "partial_line": "desired", "completion": "desired_state)) <|endoftext|>"}
{"context": "\t{\n\t{\n\t}\n\t\tint\t\t\tflags = IPCProtection;\n\t\t\t{", "partial_line": "ereport(el", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\tRangeTblEntry *rte = makeNode(RangeTblEntry);\n\tint\t\t\tnumaliases;\n\t\t\t   *coltypmods,\n\tforeach(tlistitem, subquery->targetList)\n\t\t\teref->colnames = lappend(eref->colnames, makeString(attrname));", "partial_line": "(errcode(ERRCODE_", "completion": "(errcode(ERRCODE_INVALID_COLUMN_REFERENCE), <|endoftext|>"}
{"context": "\t\tRestoreArchive(fout, false);\n\tprintf(_(\"\\nGeneral options:\\n\"));\n\tprintf(_(\"  -f, --file=FILENAME          output file or directory name\\n\"));\n\tprintf(_(\"  -j, --jobs=NUM               use this many parallel jobs to dump\\n\"));\n\tprintf(_(\"  -c, --clean                  clean (drop) database objects before recreating\\n\"));", "partial_line": "printf(_(\"  --no-data", "completion": "printf(_(\"  --no-data                    do not dump data\\n\")); <|endoftext|>"}
{"context": "\tpartCollations = (Oid *) palloc(sizeof(Oid) * numPart);\n\tpartNumCols = 0;\n\t\tTargetEntry *tle = get_sortgroupclause_tle(sgc, subplan->targetlist);\n\t\t\t\t\t\t  ordNumCols,\n\t\t\t\t\t\t  ordOperators,", "partial_line": "SetOp\t   *", "completion": "SetOp\t   *plan; <|endoftext|>"}
{"context": "\tINSTR_TIME_ADD(dst->shared_blk_read_time, add->shared_blk_read_time);\n\tINSTR_TIME_ADD(dst->local_blk_write_time, add->local_blk_write_time);\n\t\t\t\t\t const BufferUsage *sub)\n\tdst->shared_blks_written += add->shared_blks_written - sub->shared_blks_written;\n\t\t\t\t\t\t  add->local_blk_write_time, sub->local_blk_write_time);", "partial_line": "WalUsageAdd(WalU", "completion": "WalUsageAdd(WalUsage *dst, WalUsage *add) <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\tif (isnan(base))\n\t\tsum = base + offset;\n}\n\tif (isnan(offset) || offset < 0)", "partial_line": "if (is", "completion": "if (isnan(val)) <|endoftext|>"}
{"context": "\t\t\t\t\tthread->conn_duration += now - start;\n\t\t\t\t}\n\t\t\t\tst->random_state = st->cs_func_rs;\n\t\t\t\t\tst->txn_scheduled = now;\n\t\t\t\tst->command = 0;", "partial_line": "Asser", "completion": "Assert(throttle_delay > 0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t GetCurrentCommandId(true), InvalidSnapshot,\n\t\t\telog(ERROR, \"tuple already updated by self\");\n\t\t\tbreak;\n\tPage\t\tpage;\n\tBlockNumber block;", "partial_line": "boo", "completion": "bool\t\tkey_intact; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   &values[2 * i + 1],\n\t\t\t\t\t\t\t\t\t\t\t   &cxt) == 0);\n\t\treturn false;\n\tneranges = reduce_expanded_ranges(eranges, neranges, distances,\n\tstore_expanded_ranges(range, eranges, neranges);", "partial_line": "MemoryContextDele", "completion": "MemoryContextDelete(ctx); <|endoftext|>"}
{"context": "\t\treturn true;\n\t\tif ((int32) (next_passes - strategy_passes) > 0)\n#ifdef BGW_DEBUG\n\t\t\t\t strategy_delta);\n\t\t\tnext_to_clean = strategy_buf_id;", "partial_line": "#ifdef", "completion": "#ifdef BGW_DEBUG <|endoftext|>"}
{"context": "\treturn AlterTypeNamespaceInternal(typeOid, nspOid,\n}\n\t\t\t\t\t\t   bool ignoreDependent,\n\t\t\t\t\t errmsg(\"type \\\"%s\\\" already exists in schema \\\"%s\\\"\",\n\tif (typform->typtype == TYPTYPE_COMPOSITE && !isCompositeType)", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tcase 'h':\n\t\t\t\t\t\t\t\t\t  &opts.jobs))\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase 'v':", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\treturn 0;\n\treturn rc;\n\tstruct stat st;\n\tif (stat(name, &st) == 0)\n\telse if (!(errno == ENOENT || errno == ENOTDIR || errno == EACCES))", "partial_line": "if (rc", "completion": "if (rc != 0) <|endoftext|>"}
{"context": "\terrcallback.callback = output_plugin_error_callback;\n\tstate.callback_name = \"stream_abort\";\n\tstate.report_location = abort_lsn;\n\terror_context_stack = &errcallback;\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),", "partial_line": "ErrorContextCallback er", "completion": "ErrorContextCallback errcallback; <|endoftext|>"}
{"context": "}\n\t\tProcessProcSignalBarrier();\n\t\tUpdateSharedMemoryConfig();\nCheckArchiveTimeout(void)\n\tpg_time_t\tnow;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t\t\tcase 'q':\n\t\t\t\tbreak;\n\t\t\t\tverbose = true;\n\t\t\t\tbreak;\n\t\t\t\tprompt_password = TRI_YES;", "partial_line": "ex", "completion": "exit(1); <|endoftext|>"}
{"context": "\t\t\t\t\t  \"JOIN pg_catalog.pg_constraint c ON (src.tbloid = c.conrelid)\\n\"\n\ti_conname = PQfnumber(res, \"conname\");\n\t\t\t\tif (tbinfo->dobj.catId.oid == conrelid)\n\t\t\t\tpg_fatal(\"unrecognized table OID %u\", conrelid);\n\t\tconstrinfo[j].dobj.objType = DO_FK_CONSTRAINT;", "partial_line": "Assign", "completion": "AssignDumpId(&constrinfo[j].dobj); <|endoftext|>"}
{"context": "\t\t\t\t\t\tcase INTERVAL_MASK(SECOND):\n\t\t\t\tif (*cp == '-')\n\t\t\t\t\t\treturn DTERR_FIELD_OVERFLOW;\n\t\t\t\t\t\tfval = -fval;\n\t\t\t\t\t\tval = -val;", "partial_line": "case DTK_", "completion": "case DTK_MILLISEC: <|endoftext|>"}
{"context": "\t\t{\n\t\t\t{\n\t\t\t\tres |= ((int64) lobyte) << (byte * 8);\n\t}\n}", "partial_line": "if", "completion": "if (pct) <|endoftext|>"}
{"context": "\t{\n\t\tcase 4:\n\t\t\tif (a < 0x80 || a > 0xBF)\n\t\t\ta = source[1];\n\t\t\t\t\tif (a < 0xA0 || a > 0xBF)", "partial_line": "if (a < 0x90 ||", "completion": "if (a < 0x90 || a > 0xBF) <|endoftext|>"}
{"context": "#define MaxBytesPerInteger\t\t\t\t7\nitemptr_to_uint64(const ItemPointer iptr)\n\treturn val;", "partial_line": "encode_varbyte(uint64 v", "completion": "encode_varbyte(uint64 val, unsigned char **ptr) <|endoftext|>"}
{"context": "\t\t\t\t\t\t   LLVMGetFunctionType(ExecEvalSubroutineTemplate),\n\t\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\t\t\t\t\t\t\t\t  l_ptr(TypeStorageBool));\n\t\t\t\t\tLLVMBuildBr(b, opblocks[opno + 1]);\n\t\t\t\t\tbreak;", "partial_line": "l_sbool_const(1", "completion": "l_sbool_const(1), \"\"), <|endoftext|>"}
{"context": "\ttypeName = (TypeName *) linitial(args);\n\t\t*righttype = typenameTypeId(NULL, typeName);\n\t}\nstatic void\n\tOperator\toptup;", "partial_line": "if (!a", "completion": "if (!amroutine->amcanorderbyop) <|endoftext|>"}
{"context": "\t\t\tseg_offset += fullpages * XLOG_BLCKSZ + bytesleft;\n\t\tif (offset > 0)\nAdvanceXLInsertBuffer(XLogRecPtr upto, TimeLineID tli, bool opportunistic)\n\tXLogCtlInsert *Insert = &XLogCtl->Insert;\n\t\tif (LogwrtResult.Write < OldPageRqstPtr && opportunistic)", "partial_line": "ConditionVariableSleep(&X", "completion": "ConditionVariableSleep(&XLogCtl->InitializedUpToCondVar, WAIT_EVENT_WAL_BUFFER_INIT); <|endoftext|>"}
{"context": "\tif (nparams != num_params)\n\tparams = copyObject(params);\n\tforeach(l, params)\n\t\texpr = coerce_to_target_type(pstate, expr, given_type_id,\n\t\t\t\t\t\t\t\t\t expected_type_id, -1,", "partial_line": "errmsg(\"parameter $%d of type", "completion": "errmsg(\"parameter $%d of type %s cannot be coerced to the expected type %s\", <|endoftext|>"}
{"context": "\t},\n\t\t\"grave-accent\", '`'\n\t{\n\t\t\"right-brace\", '}'\n\t{", "partial_line": "\"tilde\"", "completion": "\"tilde\", '~' <|endoftext|>"}
{"context": "\tresult.res = pushJsonbValue(&result.parseState, WJB_BEGIN_ARRAY, NULL);\nDatum\n{\n\t(void) pushJsonbValue(&result.parseState, WJB_BEGIN_ARRAY, NULL);\n{", "partial_line": "memset(&result, 0, sizeof(Js", "completion": "memset(&result, 0, sizeof(JsonbInState)); <|endoftext|>"}
{"context": "\t\tif (nulls[i])\n\t\t\t\tereturn(escontext, (Datum) 0,\n\tretval->elemtype = element_type;\n\tmemcpy(ARR_LBOUND(retval), lBound, ndim * sizeof(int));\n\t{", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t\t\t\ttimecnt--;\n\t\tfor (i = 0; i < sp->timecnt; ++i)\n\t\t\t\treturn EINVAL;\n\t\tfor (i = 0; i < sp->charcnt; ++i)\n\t\t\t\tsp->lsis[leapcnt].ls_corr = prevcorr = corr;", "partial_line": "ttisp->", "completion": "ttisp->tt_ttisstd = false; <|endoftext|>"}
{"context": "\t\t\t\t\t\tRETURN_ERROR(ereport(ERROR,\n\t\t\t\t\tres = jperOk;\n\t\t\t\t\tchar\t   *tmp = pnstrdup(jb->val.string.val,\n\t\t\t\t\tErrorSaveContext escontext = {T_ErrorSaveContext};\n\t\t\t\t\t\t\t\t\t\t\t  errmsg(\"argument \\\"%s\\\" of jsonpath item method .%s() is invalid for type %s\",", "partial_line": "tmp, jspOperationName(jsp->t", "completion": "tmp, jspOperationName(jsp->type), \"double precision\")))); <|endoftext|>"}
{"context": "\t\treturn;\n\t\t_LoadLOs(AH, te);\nstatic void\n\tOid\t\t\toid;\n\tsize_t\t\tcnt;", "partial_line": "foundLO =", "completion": "foundLO = true; <|endoftext|>"}
{"context": "\t\t\t \"logical replication launcher\");\n\tbgw.bgw_main_arg = (Datum) 0;\n\t\t\t\t\t\tApplyLauncherShmemSize(),\n\tif (!found)\n\t\tint\t\t\tslot;", "partial_line": "LogicalRepCtx->last_start_d", "completion": "LogicalRepCtx->last_start_dsh = DSHASH_HANDLE_INVALID; <|endoftext|>"}
{"context": "\t{\n\tif (nvalues == 0)\n\t{\n\t\t\t\t\t\t\t\t\t\t &is_equal);\n\t\t\t{", "partial_line": "partcol", "completion": "partcollation, <|endoftext|>"}
{"context": "\tpg_fatal(\"this build does not support compression with %s\", \"LZ4\");\n\treturn NULL;\t\t\t\t\n\tnext_in = (uint8 *) data;\n\t\t\t\t\t\t LZ4F_getErrorName(compressed_size));\n\t\t\tenlargeStringInfo(&mystreamer->base.bbs_buffer, out_bound);", "partial_line": "next_out = (uint8 *) mystreamer-", "completion": "next_out = (uint8 *) mystreamer->base.bbs_buffer.data; <|endoftext|>"}
{"context": "\t\t\t\tnewdef->inhcount = 1;\n\t\t\tif (bms_is_member(parent_attno, nncols))\n\t\t\t\tthis_default = TupleDescGetDefault(tupleDesc, parent_attno);\n\t\t\t\t\t\t parent_attno, RelationGetRelationName(relation));\n\t\t\t\tcols_with_defaults = lappend(cols_with_defaults, mergeddef);", "partial_line": "new", "completion": "newattmap, <|endoftext|>"}
{"context": "\tva_start(vargs, fmt);\n\tif (can_skip_gucvar(gconf))\n\tswitch (gconf->vartype)\n\t\tcase PGC_REAL:\n\t\t\t\tstruct config_real *conf = (struct config_real *) gconf;", "partial_line": "SerializeG", "completion": "SerializeGUCState(Size maxsize, char *start_address) <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfprintf(stderr, \" %s\",\n\t\t\t}\n\t\tmustwait = try_complete_step(testspec, pstep, STEP_NONBLOCK);\n\t\t\t\t\t\t\t\t\t  STEP_NONBLOCK | STEP_RETRY);", "partial_line": "if (mustw", "completion": "if (mustwait) <|endoftext|>"}
{"context": "{ 2, s_2_8, -1, -1, 0},\n{ 2, s_2_16, -1, -1, 0},\n{ 3, s_2_17, -1, -1, 0},\n{ 3, s_2_19, -1, -1, 0},\n{ 3, s_2_21, -1, -1, 0},", "partial_line": "static const symbol s_4_25[", "completion": "static const symbol s_4_25[2] = { 'o', 'n' }; <|endoftext|>"}
{"context": "{ 3, s_2_1, -1, 1, 0},\nstatic const symbol s_3_3[12] = { 0xE0, 0xA4, 0xBF, 0xE0, 0xA4, 0x8F, 0xE0, 0xA4, 0x95, 0xE0, 0xA5, 0x80 };\nstatic const symbol s_3_8[9] = { 0xE0, 0xA5, 0x87, 0xE0, 0xA4, 0x9B, 0xE0, 0xA5, 0x81 };\nstatic const symbol s_3_9[12] = { 0xE0, 0xA4, 0xA8, 0xE0, 0xA5, 0x87, 0xE0, 0xA4, 0x9B, 0xE0, 0xA5, 0x81 };\nstatic const symbol s_3_44[6] = { 0xE0, 0xA4, 0xAF, 0xE0, 0xA5, 0x8C };", "partial_line": "static const symbol s_3_50[12] = { 0xE0, 0x", "completion": "static const symbol s_3_50[12] = { 0xE0, 0xA5, 0x87, 0xE0, 0xA4, 0x9B, 0xE0, 0xA4, 0xA8, 0xE0, 0xA5, 0x8D }; <|endoftext|>"}
{"context": "{\n\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t\t\t errmsg(\"first argument of transform function must be type %s\",\n\tHeapTuple\tnewtuple;", "partial_line": "Relation\trel", "completion": "Relation\trelation; <|endoftext|>"}
{"context": "\t\t\t\tRelOptInfo *top_result_rel = find_base_rel(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   parse->resultRelation);\n\t\t\t\t\t\tList\t   *update_colnos = root->update_colnos;\n\t\t\t\t\t\t\t\tadjust_appendrel_attrs_multilevel(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (Node *) withCheckOptions,", "partial_line": "this_r", "completion": "this_result_rel, <|endoftext|>"}
{"context": "\t\t\tbms_overlap(var->varnullingrels, context->removable_relids))\n\t\t{\n\t\t\t\t\t\t\t\t\t\tremove_nulling_relids_mutator,\n\t\t\t\t\t  void *callback_arg,\n\tNode\t   *result;", "partial_line": "context.callback", "completion": "context.callback = callback; <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\t\t\n\t\tscan_clauses = qpqual;\n\tscan_clauses = order_qual_clauses(root, scan_clauses);\n\treturn scan_plan;\ncreate_tidrangescan_plan(PlannerInfo *root, TidRangePath *best_path,", "partial_line": "List *tlist, List *sca", "completion": "List *tlist, List *scan_clauses) <|endoftext|>"}
{"context": "\tOid\t\t\targ1 = PG_GETARG_OID(0);\n\tOid\t\t\targ1 = PG_GETARG_OID(0);\n\tPG_RETURN_BOOL(arg1 > arg2);\n}\n}", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\treturn ECPG_INFORMIX_DATE_CONVERT;\n}\n{\n\tPGTYPESdate_today(d);\n\tswitch (errno)", "partial_line": "case PGTYPES_DATE_ERR", "completion": "case PGTYPES_DATE_ERR_ENOSHORTDATE: <|endoftext|>"}
{"context": "{\n\tint\t\t\tnappinfos;\n\t\tif (childrel->parent)\n\t\t\tnode = adjust_appendrel_attrs_multilevel(root, node,\n\t\t\t\t\t\t\t\t\t\t\t\t\t childrel->parent,", "partial_line": "elog(ERROR, \"childrel is n", "completion": "elog(ERROR, \"childrel is not a child of parentrel\"); <|endoftext|>"}
{"context": "static const symbol s_4_4[4] = { 'b', 'a', 'a', 'r' };\n{ 4, s_4_3, -1, 3, 0},\nstatic const symbol s_10[] = { 'g', 'e', 'm' };\n                case 1:\n                case 4:", "partial_line": "{   int ret", "completion": "{   int ret = slice_from_s(z, 1, s_3); <|endoftext|>"}
{"context": "{\n\t\t\twhile (from <= lim)\n\t\t\t\tif (sco != lastsubcolor)\n\t\t\t\t\tNOERR();\n\t\tcolor\t   *pco;", "partial_line": "cm->classbits[cv->c", "completion": "cm->classbits[cv->cclasscode] = cm->hiarraycols; <|endoftext|>"}
{"context": "#include \"c.h\"\n\tpg_funcptr_t *address;\ninitialize_ntdll(void)\n\t{", "partial_line": "pg_fun", "completion": "pg_funcptr_t address; <|endoftext|>"}
{"context": "_bt_pendingfsm_init(Relation rel, BTVacState *vstate, bool cleanuponly)\n{\n\tAssert(heaprel != NULL);\n\t\tif (vstate->pendingpages)\n\tpfree(vstate->pendingpages);", "partial_line": "if (vstate->", "completion": "if (vstate->npendingpages > 0) <|endoftext|>"}
{"context": "#include \"catalog/pg_tablespace.h\"\n#include \"storage/lmgr.h\"", "partial_line": "SHARED_OB", "completion": "SHARED_OBJECT, <|endoftext|>"}
{"context": "\t\tcase T_SQLValueFunction:\n\t\tcase T_JsonFormat:\n\t\tcase T_CurrentOfExpr:\n\t\t\t\tMUTATE(newnode->qual, wco->qual, Node *);\n\t\tcase T_GroupingFunc:", "partial_line": "newnode-", "completion": "newnode->cols = list_copy(grouping->cols); <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\t\t HEAP_XMAX_IS_LOCKED_ONLY(infomask));\n\t\t\t{\n\t\t\t\t\t*current_is_member = true;\n\t\t\t}", "partial_line": "else if (", "completion": "else if (result) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   fkconstraint,\n\t\t\tnewcon->conid = currcon->oid;\n\t\t\tnewcon->qual = (Node *) fkconstraint;\n\t\t\tAlterConstrEnforceabilityRecurse(wqueue, cmdcon, conrel, tgrel,\n\tif (currcon->condeferrable != cmdcon->deferrable ||", "partial_line": "return cha", "completion": "return changed; <|endoftext|>"}
{"context": "\telse\n\t\t\t\t\t\t \"  LEFT JOIN pg_catalog.pg_namespace ns ON of.opfnamespace = ns.oid\\n\"\n\t\t\t\t\t\t \"  LEFT JOIN pg_catalog.pg_proc p ON ap.amproc = p.oid\\n\");\n\t\tif (!validateSQLNamePattern(&buf, access_method_pattern,\n\t\t\t\t\t\t\t\t\tfalse, false, NULL, \"am.amname\",", "partial_line": "NU", "completion": "NULL, NULL, <|endoftext|>"}
{"context": "\trelease_partition(node);\n\tExecClearTuple(node->ss.ss_ScanTupleSlot);\n\t\tExecClearTuple(node->framehead_slot);\ninitialize_peragg(WindowAggState *winstate, WindowFunc *wfunc,\n\tHeapTuple\taggTuple;", "partial_line": "use_ma", "completion": "use_ma_code = false; <|endoftext|>"}
{"context": "\t\t\t\tAssert(splan->plan.qual == NIL);\n\t\t\t\t\t\t\t\t\t\t\t  rtoffset);\n\t\t\t\t\t\t\t IndexOnlyScan *plan,\n{\n\tindexed_tlist *index_itlist;", "partial_line": "index_", "completion": "index_itlist, <|endoftext|>"}
{"context": "\t\t\tcase VARCHAROID:\n\t\t\tereport(ERROR,\n\t\tif (!OidIsValid(targettype))\n\t\t\t\t\t\t\t\t\t\tCOERCE_EXPLICIT_CAST,\n\t\t\t\t\t\t\t\tformat_type_be(targettype)),", "partial_line": "fnoid = tar", "completion": "fnoid = targettype == JSONOID ? F_TO_JSON : F_TO_JSONB; <|endoftext|>"}
{"context": "static const symbol s_2_1560[8] = { 'i', 's', 't', 'a', 'j', 'a', 'l', 'o' };\nstatic const symbol s_2_1566[5] = { 'u', 'r', 'a', 'l', 'o' };\nstatic const symbol s_2_1573[5] = { 'i', 'v', 'a', 'l', 'o' };\nstatic const symbol s_2_1576[6] = { 'a', 0xC4, 0x8D, 'a', 'l', 'o' };\nstatic const symbol s_2_1583[6] = { 'j', 'e', 't', 'i', 'l', 'o' };", "partial_line": "static const symbol s_2_1588[4] =", "completion": "static const symbol s_2_1588[4] = { 'n', 'u', 'l', 'o' }; <|endoftext|>"}
{"context": "\t\t\tbool\t\tisnull;\n\t\t\topt = SysCacheGetAttr(TSDICTOID, tpdict,\n\tTSConfigCacheHash = hash_create(\"Tsearch configuration cache\", 16,\n\t\t\t\t\t\t\t\t\t&ctl, HASH_ELEM | HASH_BLOBS);\n\tif (!CacheMemoryContext)", "partial_line": "if (TSCon", "completion": "if (TSConfigCacheHash == NULL) <|endoftext|>"}
{"context": "#include \"storage/predicate.h\"\n\t\t\t\tend_of_scan = true;\n\t{\n\t\tif (--so->currPos.itemIndex < so->currPos.firstItem)\n\t\t{", "partial_line": "_has", "completion": "_hash_dropbuf(rel, buf); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t GUC_ACTION_SET, true, 0, false);\n\t\t\treturn buffer;\n\t\t\treturn config_enum_lookup_by_value((struct config_enum *) record,\nconst char *\n\tAssert(record != NULL);", "partial_line": "errdetail(\"Only roles with privile", "completion": "errdetail(\"Only roles with privileges of the \\\"%s\\\" role may examine this parameter.\", <|endoftext|>"}
{"context": "\t\telse\n\t{\n\t\tfinite_interval_mi(span1, span2, result);\nDatum\n\t\t\t\tresult_double;", "partial_line": "result = (Interval *) palloc", "completion": "result = (Interval *) palloc(sizeof(Interval)); <|endoftext|>"}
{"context": "\tplperl_active_interp = interp_desc;\nactivate_interpreter(plperl_interp_desc *interp_desc)\n\t\tset_interp_require(OidIsValid(interp_desc->user_id));\n\tchar\t   *loc;\n\tchar\t   *save_collate,", "partial_line": "*save_mone", "completion": "*save_monetary, <|endoftext|>"}
{"context": "\t\tvalue = -value;\nEncodeInterval(struct pg_itm *itm, int style, char *str)\n\tchar\t   *cp = str;\n\tint\t\t\tsec = itm->tm_sec;\n\t\t\t\t\tmday < 0 || hour < 0 ||", "partial_line": "min != 0 || sec !", "completion": "min != 0 || sec != 0 || fsec != 0; <|endoftext|>"}
{"context": "\tArrayAnalyzeExtraData *extra_data;\n\tint\t\t\tb_current;\n\tint\t\t\tslot_idx;\n\tDECountItem *count_item;\n\tbucket_width = num_mcelem * 1000 / 7;", "partial_line": "elem_hash_c", "completion": "elem_hash_ctl.keysize = sizeof(Datum); <|endoftext|>"}
{"context": "\t\t\telse\n\t\t}\n\t}\n{\n\t{1, 60},\t\t\t\t\t", "partial_line": "last_val =", "completion": "last_val = ints[0]; <|endoftext|>"}
{"context": "\tdopt->outputNoTablespaces = ropt->noTablespace;\n\tdopt->sequence_data = ropt->sequence_data;\n}\nOpenArchive(const char *FileSpec, const ArchiveFormat fmt)\n\tcompression_spec.algorithm = PG_COMPRESSION_NONE;", "partial_line": "AH = _allocAH(FileSp", "completion": "AH = _allocAH(FileSpec, fmt, compression_spec, true, <|endoftext|>"}
{"context": "\t\t\t\tif (S_THth(n->suffix))\n\t\t\t\tbreak;\n\t\t\t\t\tstr_numth(s, s, S_TH_TYPE(n->suffix));\n\t\t\t\ts += strlen(s);\n\t\t\t\tif (is_interval)\t", "partial_line": "i = tm->", "completion": "i = tm->tm_year / 100; <|endoftext|>"}
{"context": "\t\tif (CALLED_AS_TRIGGER(fcinfo))\n\t\t}\n\tForm_pg_type type_struct;\n\t\t\t\t\t\t\t   ObjectIdGetDatum(fcinfo->flinfo->fn_oid));\n\tif (isnull)", "partial_line": "(errmsg(\"sour", "completion": "(errmsg(\"source text of function \\\"%s\\\": %s\", <|endoftext|>"}
{"context": "\t\t\t\tif (rows > (uint64) PY_SSIZE_T_MAX)\n\t\t\t\t\t\tPyList_SetItem(result->rows, i, row);\n\t\tPG_CATCH();\n\t\t{\n\tPG_TRY();", "partial_line": "retu", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t   *segmentpath;\n\t\telse if (S_ISDIR(st.st_mode) || S_ISLNK(st.st_mode))\n\t\t\t\t\t\t\t tblspc_path);\n\t\t{\"check\", no_argument, NULL, 'c'},\n\t\t{\"sync-method\", required_argument, NULL, 1},", "partial_line": "int", "completion": "int\t\t\tc; <|endoftext|>"}
{"context": "\tleftmostRTI = ((RangeTblRef *) leftmostjtnode)->rtindex;\n\trtr->rtindex = leftmostRTI;\n\tparse->setOperations = NULL;\nvoid\nreduce_outer_joins(PlannerInfo *root)", "partial_line": "if (state1 == NULL || !state1->c", "completion": "if (state1 == NULL || !state1->contains_outer) <|endoftext|>"}
{"context": "#include \"catalog/pg_attribute_d.h\"\n#include \"fe_utils/string_utils.h\"\nstatic bool describeOneTSParser(const char *oid, const char *nspname,\nstatic bool describeOneTSConfig(const char *oid, const char *nspname,", "partial_line": "static void p", "completion": "static void printACLColumn(PQExpBuffer buf, const char *colname); <|endoftext|>"}
{"context": "\t\t\tt->flags = COMBINE(t->child->flags, t->child->sibling->flags);\n\t\t}\nstatic void\n\t\t  enum char_classes cls,\n\t\t\t\t\tstruct state *rp)", "partial_line": "NOTE(REG_", "completion": "NOTE(REG_ULOCALE); <|endoftext|>"}
{"context": "\tchar\t   *line_end_ptr;\n\t}\n\t\t}\n\t\t\tchar\t\tc;\n\t\t\tend_ptr = cur_ptr;", "partial_line": "if (cur_ptr >= l", "completion": "if (cur_ptr >= line_end_ptr) <|endoftext|>"}
{"context": "\t\ttable_close(rel, NoLock);\n\treturn address;\n{\n\t\tcase OBJECT_TABLE:\n\t\t\t\t\t\t\t\t\t\t stmt->objectType,", "partial_line": "case OBJECT_CONV", "completion": "case OBJECT_CONVERSION: <|endoftext|>"}
{"context": "#include \"catalog/objectaccess.h\"\n#include \"catalog/pg_type.h\"\n#include \"nodes/nodeFuncs.h\"\n\t\t\t\tbool replace,\n\t\t\t\tconst char *probin,", "partial_line": "cha", "completion": "char prokind, <|endoftext|>"}
{"context": "\t\t\t\tplansource->commandTag == CMDTAG_DELETE ||\n\t\tstmt->mod_stmt_set = true;\n\t\t\ttcount = 2;\n\t\t\texec_set_found(estate, (SPI_processed != 0));\n\t\t\tAssert(stmt->mod_stmt);", "partial_line": "case S", "completion": "case SPI_OK_SELINTO: <|endoftext|>"}
{"context": "\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\tcollation,\n\t\t\t\t\t\t\t\t\t\t\t\t\tPointerGetDatum(bval),\n\t\tif (addrange)\n\t\t\t\tMemoryContextSwitchTo(oldcxt);", "partial_line": "ScanKey orderbys, i", "completion": "ScanKey orderbys, int norderbys) <|endoftext|>"}
{"context": "\tpg_tz\t   *result;\n\tint\t\t\tlen;\n\t\tint\t\t\tisdst;\n\t\t}\n\t\t\t\tDateTimeErrorExtra extra;", "partial_line": "if (tz", "completion": "if (tzp != NULL) <|endoftext|>"}
{"context": "\t\tLocTriggerData.tg_trigger = trigger;\n\t\t\t\t\t\t\t\t\t   relinfo->ri_TrigInstrument,\n\tTriggerData LocTriggerData = {0};\n\t\treturn;\n\tLocTriggerData.type = T_TriggerData;", "partial_line": "LocTriggerData.tg_rel", "completion": "LocTriggerData.tg_relation = relinfo->ri_RelationDesc; <|endoftext|>"}
{"context": "#include \"header.h\"\nextern struct SN_env * nepali_UTF_8_create_env(void);\nstatic const symbol s_0_5[12] = { 0xE0, 0xA4, 0xB8, 0xE0, 0xA4, 0x81, 0xE0, 0xA4, 0x97, 0xE0, 0xA5, 0x88 };\nstatic const symbol s_0_10[18] = { 0xE0, 0xA4, 0xAE, 0xE0, 0xA4, 0xBE, 0xE0, 0xA4, 0xB0, 0xE0, 0xA5, 0x8D, 0xE0, 0xA4, 0xAB, 0xE0, 0xA4, 0xA4 };", "partial_line": "static const symbol s_1_1[3] =", "completion": "static const symbol s_1_1[3] = { 0xE0, 0xA4, 0x82 }; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\t\t\t\t \"(see server log for list)\",\n\t\t\t\t\t errdetail_log(\"%s\", logdetail.data),\n\t\t\t\t\t(errcode(ERRCODE_DEPENDENT_OBJECTS_STILL_EXIST),\n\t\t\t\t\t\t\t   \"drop cascades to %d other objects\",", "partial_line": "pfree(logde", "completion": "pfree(logdetail.data); <|endoftext|>"}
{"context": "static int\texec_stmt_perform(PLpgSQL_execstate *estate,\nstatic int\texec_stmt_forc(PLpgSQL_execstate *estate,\n\t\t\t\t\t\t\t\tPLpgSQL_stmt_foreach_a *stmt);\n\t\t\t\t\t\t\tPLpgSQL_stmt_raise *stmt);\nstatic int\texec_stmt_execsql(PLpgSQL_execstate *estate,", "partial_line": "static int\texec_stmt_", "completion": "static int\texec_stmt_commit(PLpgSQL_execstate *estate, <|endoftext|>"}
{"context": "mic_to_euc_tw(PG_FUNCTION_ARGS)\nDatum\n\tunsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3);\n\tint\t\t\tlen = PG_GETARG_INT32(4);\n\tbool\t\tnoError = PG_GETARG_BOOL(5);", "partial_line": "const uns", "completion": "const unsigned char *start = euc; <|endoftext|>"}
{"context": "\t\t\t\t\tif (te->resjunk)\n\t\t\t\t\t\tchar\t   *label = strVal(lfirst(aliasp_item));\n\t\t\t\t\t\t*colnames = lappend(*colnames, makeString(pstrdup(label)));\n\t\t\t\t\t\tfunctypclass == TYPEFUNC_COMPOSITE_DOMAIN)\n\t\t\t\t\t\t\t*colnames = lappend(*colnames,", "partial_line": "subl", "completion": "sublevels_up); <|endoftext|>"}
{"context": "\tint\t\t\talloc_num;\n\tps.weight = weight;\n\tinitPQExpBuffer(&line_buf);\n\t\tCommand    *command = NULL;\n\t\t\tps.commands[index++] = command;", "partial_line": "command =", "completion": "command = process_backslash_command(sstate, desc, <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t  &recfield->finfo))\n\t\t\t\ttypeid = recfield->finfo.ftypeid;\n\t\t\ttypeid = InvalidOid;\t\n\t{", "partial_line": "case PLPG", "completion": "case PLPGSQL_DTYPE_VAR: <|endoftext|>"}
{"context": "\tif (pg_strncasecmp(ptr, \"NaN\", 3) == 0)\n\telse if (pg_strncasecmp(ptr, \"Infinity\", 8) == 0)\n\t{\necpg_hex_enc_len(unsigned srclen)\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "partial_line": "int\t\t\tr", "completion": "int\t\t\tres = -1; <|endoftext|>"}
{"context": "#endif\n{\n}\n{\n#if defined(NAN) && !(defined(__NetBSD__) && defined(__mips__))", "partial_line": "return (doub", "completion": "return (double) NAN; <|endoftext|>"}
{"context": "}\n\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\n\tPG_RETURN_INT64((int64) arg1 / arg2);\nint82pl(PG_FUNCTION_ARGS)\n{", "partial_line": "int6", "completion": "int64\t\tresult; <|endoftext|>"}
{"context": "\t{\n\t}\n\t\tbool\t\tisnull;\n\t\tResetExprContext(econtext);\n\t\thashvalue = DatumGetUInt32(ExecEvalExprSwitchContext(hjstate->hj_OuterHash,", "partial_line": "bool", "completion": "bool\t\tshouldFree; <|endoftext|>"}
{"context": "#ifdef WIN32\n{\n{\n}\n{", "partial_line": "ret", "completion": "ret = p; <|endoftext|>"}
{"context": "\tPG_RETURN_POINTER(state);\ninterval_avg_combine(PG_FUNCTION_ARGS)\n\t\tPG_RETURN_POINTER(state1);\n\t\tstate1->N = state2->N;\n\t\tstate1->sumX.month = state2->sumX.month;", "partial_line": "elog(ERROR, \"", "completion": "elog(ERROR, \"aggregate function called in non-aggregate context\"); <|endoftext|>"}
{"context": "\t\tif (newtuple)\n\t\t\t\t\t(errcode(ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED),\n\t}\nvoid\n{", "partial_line": "fa", "completion": "false); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\tidx->indexId,\n\t\toldcontext = MemoryContextSwitchTo(private_context);\n\t\t{\n\tforeach(lc, heapRelationIds)\n\t\tlockrelid = palloc_object(LockRelId);", "partial_line": "*lockreli", "completion": "*lockrelid = heapRelation->rd_lockInfo.lockRelId; <|endoftext|>"}
{"context": "\tif (*p != '\\0')\n\t\tereport(ERROR,\n\tif (pg_hmac_init(ctx, state->ServerKey, state->key_length) < 0 ||\n\t\tpg_hmac_update(ctx,\n\tsiglen = pg_b64_enc_len(state->key_length);", "partial_line": "return ps", "completion": "return psprintf(\"v=%s\", server_signature_base64); <|endoftext|>"}
{"context": "\t\t\tshent = dshash_find(pgStatLocal.shared_hash,\n\t\t\t\t\t\t\t\ttrue);\n\t\t}\n\t\treturn LWLockConditionalAcquire(lock, LW_EXCLUSIVE);\n{", "partial_line": "return LWLockC", "completion": "return LWLockConditionalAcquire(lock, LW_SHARED); <|endoftext|>"}
{"context": "\tpgstuple = SearchSysCache1(SEQRELID, ObjectIdGetDatum(relid));\n\t\t\t\t\t  makeDefElem(\"cache\", (Node *) makeFloat(psprintf(INT64_FORMAT, pgsform->seqcache)), -1));\n\t\t\t\t\t  makeDefElem(\"cycle\", (Node *) makeBoolean(pgsform->seqcycle), -1));\n\toptions = lappend(options,\n}", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "}\n\t\tbool\t\tmustwait;\n\t\t{\n\t\t\tbreak;\n\t\t\tuint32\t\tnwaiters PG_USED_FOR_ASSERTS_ONLY = pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);", "partial_line": "LWLo", "completion": "LWLockReportWaitEnd(); <|endoftext|>"}
{"context": "\tslot->tts_flags |= TTS_FLAG_SHOULDFREE;\n\t\t\tdata += data_length;\ntts_virtual_copy_heap_tuple(TupleTableSlot *slot)\n{\n\t\t\t\t\t\t\t\t   slot->tts_isnull,", "partial_line": "ex", "completion": "extra); <|endoftext|>"}
{"context": "\t\t  relkind == RELKIND_TOASTVALUE ||\n\t\t\t\t   InvalidOid,\t\n\t\t\t\t   F_ARRAY_TYPANALYZE,\t\n\t\t\t\t   InvalidOid,\t\n\t\t\t\t   0,\t\t\t", "partial_line": "InvalidO", "completion": "InvalidOid); <|endoftext|>"}
{"context": "\tfor (ptr = *srcptr; ptr < srcend && *ptr != '\\0'; ptr++)\n\treturn retptr;\nstatic void\n{\n\t\t\t   *varsourcefile;", "partial_line": "int", "completion": "int\t\t\tvarsourceline; <|endoftext|>"}
{"context": "#include \"catalog/pg_largeobject.h\"\n\t}\n\tif (VARATT_IS_EXTENDED(datafield))\n\t}\n\t*plen = len;", "partial_line": "lobjId_new, Get", "completion": "lobjId_new, GetUserId()); <|endoftext|>"}
{"context": "};\nstatic const symbol s_7_0[1] = { 'a' };\n{\n{ 1, s_7_2, -1, 1, 0},\n{", "partial_line": "{ 2, s_8_1,", "completion": "{ 2, s_8_1, -1, 2, 0}, <|endoftext|>"}
{"context": "\t\tif (pstate->parallelSlot[i].workerStatus == WRKR_IDLE)\n\treturn NO_SLOT;\nstatic bool\n\t\tif (WORKER_IS_RUNNING(pstate->parallelSlot[i].workerStatus))\n{", "partial_line": "if (pstate", "completion": "if (pstate->parallelSlot[i].workerStatus != WRKR_IDLE) <|endoftext|>"}
{"context": "\tread_stream_end(stream);\n\tgistvacuum_delete_empty_pages(info, &vstate);\n\tvstate.empty_leaf_set = NULL;\n\tIndexVacuumInfo *info = vstate->info;\n\t\tif (callback)", "partial_line": "off = Of", "completion": "off = OffsetNumberNext(off)) <|endoftext|>"}
{"context": "\t\t\tSTART_CRIT_SECTION();\n\t\t\tUnlockReleaseBuffer(buffer);\n\t\t}\n\tBlockNumber npages,\n\t\tinitGinState(&ginstate, index);", "partial_line": "ginInsertCleanup(&ginstate, !AmAutoVacu", "completion": "ginInsertCleanup(&ginstate, !AmAutoVacuumWorkerProcess(), <|endoftext|>"}
{"context": "\t_jumbleNode(jstate, node);\n\tif (jstate->pending_nulls > 0)\n\tAssert(size > 0);\n\t\tjstate->jumble_len += size;\nstatic pg_noinline void", "partial_line": "AppendJumble8(JumbleState *jstate, const un", "completion": "AppendJumble8(JumbleState *jstate, const unsigned char *value) <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\tfor (OffsetNumber offset = FirstOffsetNumber; offset < MaxOffsetNumber; offset++)\n\t\t\tif (TidStoreIsMember(tidstore, &tid))\n\tTidStoreLockShare(tidstore);\n\t{", "partial_line": "TidStoreEndIterat", "completion": "TidStoreEndIterate(iter); <|endoftext|>"}
{"context": "static void *\n\t{\nstatic void\n}\n\t\tfprintf(stderr, _(\"\\\"%s\\\", line %d: \"), filename, linenum);", "partial_line": "fprintf(std", "completion": "fprintf(stderr, \"\\n\"); <|endoftext|>"}
{"context": "\t\t\t\tInt32GetDatum(0));\n\tscan = systable_beginscan(depRel, DependDependerIndexId, true,\n\t\t\tdeprec->refobjsubid == 0 &&\n\t\t\tdeprec->deptype == DEPENDENCY_INTERNAL)\n\t\t\tbreak;", "partial_line": "SysSc", "completion": "SysScanDesc scan; <|endoftext|>"}
{"context": "\t\t}\n\troot->isUsedSubplan[bestplan->plan_id - 1] = true;\n\telse\n\tif (IsA(node, Var))\n\t{", "partial_line": "Assert(var->varno !", "completion": "Assert(var->varno != INNER_VAR); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\tdoc = (DocRepresentation *) repalloc(doc, sizeof(DocRepresentation) * len);\n\t\tDocRepresentation *rptr = doc + 1,\n\t\t\t\t\tstorage;\n\t\t\tif (rptr->pos == (rptr - 1)->pos &&", "partial_line": "stora", "completion": "storage.data.query.nitem = 1; <|endoftext|>"}
{"context": "\t\tchar\t\tnext[MAXPGPATH];\n\t\t\t}\n\t\t\t\tret = -1;\n\t\t{\n\t\t\tbuf->st_mode &= ~S_IFDIR;", "partial_line": "while (ret == 0 && S_ISL", "completion": "while (ret == 0 && S_ISLNK(buf->st_mode)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   BTShared *btshared, Sharedsort *sharedsort,\n\tif (log_btree_build_stats)\n\t\tResetUsage();\n\tbuildstate.heap = heap;\n\t_bt_leafbuild(buildstate.spool, buildstate.spool2);", "partial_line": "result->index_tuples = bui", "completion": "result->index_tuples = buildstate.indtuples; <|endoftext|>"}
{"context": "\tif (!HeapTupleIsValid(pg_class_tuple))\n#ifdef MAYBE_RECOVER_RELATION_BUILD_MEMORY\n\t\t\tMemoryContextSwitchTo(oldcxt);\n\t\tcase RELPERSISTENCE_TEMP:\n\t\t\t\trelation->rd_islocaltemp = true;", "partial_line": "Assert(relation->rd_backend != INVAL", "completion": "Assert(relation->rd_backend != INVALID_PROC_NUMBER); <|endoftext|>"}
{"context": "static void\n\t\t\t\t\t errmsg(\"cannot change logged status of table \\\"%s\\\" because it is temporary\",\n\t\t\t\t\t errtable(rel)));\n\t\t\tbreak;\n\t\t\t\treturn;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t   TimeLineID endtli)\n\tbool\t\tfound_start_timeline = false;\n\t\t\t\t\t\t   starttli, entry->tli));\n\t\tif (starttli == entry->tli)", "partial_line": "found_st", "completion": "found_start_timeline = true; <|endoftext|>"}
{"context": "\tROUND1(B, C, D, A, 7, Sd, 8);\n\tROUND2(D, A, B, C, 10, Sf, 22);\n\tROUND2(D, A, B, C, 14, Sf, 26);\n\tROUND2(A, B, C, D, 13, Se, 29);\n\tROUND3(A, B, C, D, 5, Si, 33);", "partial_line": "ROUND3(D, A, B, C,", "completion": "ROUND3(D, A, B, C, 0, Sj, 42); <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_CS(\"smallint\", \"integer\", \"bigint\");\n\t\tCOMPLETE_WITH(\"(\", \"ON\");\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny))\n\telse if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"OF\") ||\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"OF\"))", "partial_line": "else if (TailMatches(\"CREATE\", \"TA", "completion": "else if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"AS\") || <|endoftext|>"}
{"context": "\t\t\telmalign = TYPALIGN_INT;\n\t\t\tbreak;\n\t\t\telmbyval = false;\n\t\t\tbreak;\n\t\tcase XIDOID:", "partial_line": "elog(ERROR, \"type %u not supported by construct_arra", "completion": "elog(ERROR, \"type %u not supported by construct_array_builtin()\", elmtype); <|endoftext|>"}
{"context": "int\n\tif (sock == INVALID_SOCKET)\n\t\t{\n\t\t\tfree(ii);\n#ifndef _SIZEOF_ADDR_IFREQ", "partial_line": "#end", "completion": "#endif <|endoftext|>"}
{"context": "};\nstatic const symbol s_2_1[2] = { 'c', 'c' };\nstatic const symbol s_2_5[2] = { 'j', 'j' };\nstatic const symbol s_2_10[2] = { 'p', 'p' };\n{", "partial_line": "{ 2, s_2_", "completion": "{ 2, s_2_0, -1, -1, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\tLLVMValueRef v_oldcontext;\n\t\t\t\t\tv_allpergroupsp =\n\t\t\t\t\t\tl_load_struct_gep(b,\n\t\t\t\t\t\t\t\t\t\t  v_aggstatep,\n\t\t\t\t\t\t\t\t\t\t\t  v_pergroupp,", "partial_line": "FIELDNO_AGGS", "completion": "FIELDNO_AGGSTATEPERGROUPDATA_NOTRANSVALUE, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  Oid dbId, Oid relId)\n\tSharedInvalidationMessage msg;\n\tAddInvalidationMessage(group, RelCacheMsgs, &msg);\n\t\t\t\t\t\t\t   msg->sn.relId == relId)\n\tAddInvalidationMessage(group, RelCacheMsgs, &msg);", "partial_line": "Inval", "completion": "InvalidationMsgsGroup *src) <|endoftext|>"}
{"context": "\tradixtree = rt_create(dsa, tranche_id);\n\t\t\t\t\t\t\t\t\t  SLAB_DEFAULT_BLOCK_SIZE,\n\t{\n\t}\n\tqsort(keys, num_keys, sizeof(uint64), key_cmp);", "partial_line": "for (uint64 i = 0; i < num_k", "completion": "for (uint64 i = 0; i < num_keys - 1; i++) <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   plan->parserSetup,\n\t\t\telse\n\t\t}\n\t\t\tereport(ERROR,", "partial_line": "(errco", "completion": "(errcode(ERRCODE_SYNTAX_ERROR), <|endoftext|>"}
{"context": "\t\tstate1->N += state2->N;\n\t\tstate1->sumX2 += state2->sumX2;\n#ifdef HAVE_INT128\n\taccum_sum_final(&state->sumX, &tmp_var);\n#endif", "partial_line": "PolyNumAg", "completion": "PolyNumAggState *result; <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n\t\tif (oldtrig->tgenabled != fires_when)\n\t\tereport(ERROR,\nvoid\n\t\t\t\t\t\t\t\tNULL, 1, &skey);", "partial_line": "bool\t\ti", "completion": "bool\t\tisnull; <|endoftext|>"}
{"context": "#define MULTIXACT_MEMBERGROUP_SIZE \\\nstatic inline int64\n}\nstatic inline int\n\tMultiXactOffset group = offset / MULTIXACT_MEMBERS_PER_MEMBERGROUP;", "partial_line": "return", "completion": "return byteoff; <|endoftext|>"}
{"context": "\t\tif (mtransfuncName != NIL)\n\t\tif (minitval != NULL)\n\tif (mfinalfuncModify == 0)\n\t{\n\t\tif (baseType == NULL)", "partial_line": "(errcode(ERRCODE_INVALID_FUNCTIO", "completion": "(errcode(ERRCODE_INVALID_FUNCTION_DEFINITION), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tint attnum, int natts, bool slow,\n\tbool\t\tslownext = false;\n\t\t\t*offp = thisatt->attcacheoff;\n\t\tvalues[attnum] = fetchatt(thisatt, tp + *offp);\n\t\tif (!slow)", "partial_line": "bool\t\thasnul", "completion": "bool\t\thasnulls = HeapTupleHasNulls(tuple); <|endoftext|>"}
{"context": "\tAtEOXact_Enum();\n\tAtEOXact_SMgr();\n\tAtEOXact_Snapshot(true, false);\n\tAtEOXact_LargeObject(true);\n\tPreCommit_CheckForSerializationFailure();", "partial_line": "errmsg(\"cannot PREPARE a transaction tha", "completion": "errmsg(\"cannot PREPARE a transaction that has operated on temporary objects\"))); <|endoftext|>"}
{"context": "\telse if (cmd == CMD_DELETE && !pubdesc.cols_valid_for_delete)\n\t\tereport(ERROR,\n\t\t\t\t\t\tRelationGetRelationName(rel)),\n\t\t\t\t errdetail(\"Replica identity must not contain unpublished generated columns.\")));\n\t\treturn;", "partial_line": "(errcode(ERRCOD", "completion": "(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE), <|endoftext|>"}
{"context": "\t\t\tIndex\t\tref = transformGroupClauseExpr(flatresult,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   exprKind,\n\t\t\t\t\t errmsg(\"CUBE is limited to 12 elements\"),\nList *\n\t\t\t\t\t\t\t\t\t\t\t\t\t&hasGroupingSets);", "partial_line": "if (flat_grouplist ==", "completion": "if (flat_grouplist == NIL && hasGroupingSets) <|endoftext|>"}
{"context": "\t{\n\t}\n\t\tdlist_delete(&change->node);\n\t\t\tstate->entries[off].lsn = next_change->lsn;\nstatic void", "partial_line": "if (!dlist_is_em", "completion": "if (!dlist_is_empty(&state->old_change)) <|endoftext|>"}
{"context": "append_schema_pattern(PatternInfoArray *pia, const char *pattern, int encoding)\n\tint\t\t\tdotcnt;\n\tif (dotcnt > 1)\n\t{\n\tif (dbbuf.data[0])", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\tNode\t   *expr = transformExprRecurse(pstate, (Node *) ve->raw_expr);\n\tJsonFormatType format;\n\tbool\t\ttypispreferred;\n\t{\n\t\t\tcase VARCHAROID:", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\treturn true;\n\t\tcase T_FuncExpr:\n\t\t\t\t\treturn true;\n\t\tcase T_ScalarArrayOpExpr:\n\t\t\t{", "partial_line": "re", "completion": "return true; <|endoftext|>"}
{"context": "\t\t\tcase OID_RANGE_CONTAINS_OP:\n\t\t\tcase OID_RANGE_GREATER_EQUAL_OP:\n\t\t}\n\tAttStatsSlot lslot;\n\tRangeBound *hist_lower;", "partial_line": "RangeB", "completion": "RangeBound\tconst_lower; <|endoftext|>"}
{"context": "\t\t\tresult->sign = NUMERIC_NEG;\n\t\t\t\t\tresult->sign = NUMERIC_NEG;\n\telse\n\t\t\t\t\tresult->dscale = Max(var1->dscale, var2->dscale);\nstatic void", "partial_line": "int\t\t\tres_", "completion": "int\t\t\tres_ndigits; <|endoftext|>"}
{"context": "\t\t\t\telog(ERROR, \"failed to add item to index page in \\\"%s\\\"\",\n\t\tif (needWal)\n\t\t\tXLogRegisterBuffer(1, buffer, REGBUF_STANDARD);\n\t\t\tXLogRegisterBufData(1, collectordata, collector->sumsize);\n\t}", "partial_line": "MarkBufferDirt", "completion": "MarkBufferDirty(metabuffer); <|endoftext|>"}
{"context": "\t\tdefault:\t\t\t\t\n\t\t\tbreak;\n\t\t\tNOTE(REG_UBSALNUM);\n\t\t\tNOTE(REG_UUNSPEC);\n\t\t\tbreak;", "partial_line": "case CHR(", "completion": "case CHR('A'): <|endoftext|>"}
{"context": "\t\t\t\t   Node *escontext)\n\t\t\t\t\t errmsg(\"date/time field value out of range: \\\"%s\\\"\",\n\t\tcase DTERR_MD_FIELD_OVERFLOW:\n\t\t\t\t\t errmsg(\"time zone displacement out of range: \\\"%s\\\"\",\n\t\t\t\t\t\t\textra->dtee_timezone),", "partial_line": "errsave", "completion": "errsave(escontext, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\ttrans->tuples_inserted + trans->tuples_updated +\n\t\ttabstat->trans = NULL;\n\t}\nvoid", "partial_line": "Assert(tabstat->", "completion": "Assert(tabstat->trans == trans); <|endoftext|>"}
{"context": "\t\t\t\t\t   SpecialJoinInfo *sjinfo,\n\tif (IsA(clause, RestrictInfo))\n\t{\n\tif (IsA(clause, Var))\n\t\tConst\t   *con = (Const *) clause;", "partial_line": "else if (IsA(c", "completion": "else if (IsA(clause, Param)) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tno_parse_wal = true;\n\t\t\t\tbreak;\n\t\t\tcase 's':", "partial_line": "defa", "completion": "default: <|endoftext|>"}
{"context": "\tAcquireRewriteLocks(copied_query, true, false);\n\tUpdateActiveSnapshotCommandId();\n\tFreeQueryDesc(queryDesc);\n{\n\tDR_transientrel *myState = (DR_transientrel *) self;", "partial_line": "myState->ti_options = TABLE_INSERT_SKIP_FSM |", "completion": "myState->ti_options = TABLE_INSERT_SKIP_FSM | TABLE_INSERT_FROZEN; <|endoftext|>"}
{"context": "#include <unistd.h>\n#include \"common/file_perm.h\"\n#include \"common/logging.h\"\nstatic bool two_phase = false;\nstatic XLogRecPtr endpos = InvalidXLogRecPtr;", "partial_line": "static vol", "completion": "static volatile sig_atomic_t time_to_abort = false; <|endoftext|>"}
{"context": "\t\tlivetuples = Max(livetuples, 0);\n\t\tdeadtuples = Max(deadtuples, 0);\n\t{\n\t\tpgstat_info->trans->tuples_inserted += n;\n\t{", "partial_line": "if", "completion": "if (hot) <|endoftext|>"}
{"context": "\t\tfor (i = 0; i < numaggs; i++)\n\t\t\twfuncno = peraggstate->wfuncno;\n\t\t\tadvance_windowaggregate(winstate,\n\tAssert(aggregatedupto_nonrestarted <= winstate->aggregatedupto);\n\tfor (i = 0; i < numaggs; i++)", "partial_line": "result =", "completion": "result = &econtext->ecxt_aggvalues[wfuncno]; <|endoftext|>"}
{"context": "\ttable_close(relation, AccessShareLock);\n\tCACHE_elog(DEBUG2, \"SearchCatCache(%s): put in bucket %d\",\nvoid\nReleaseCatCacheWithOwner(HeapTuple tuple, ResourceOwner resowner)\n\tif (resowner)", "partial_line": "return CatalogCacheComputeHashValue(cache, ca", "completion": "return CatalogCacheComputeHashValue(cache, cache->cc_nkeys, v1, v2, v3, v4); <|endoftext|>"}
{"context": "static void DetachAddConstraintIfNeeded(List **wqueue, Relation partRel);\n\t\t\t\t\t\t\t\t\tbool concurrent, Oid defaultPartOid);\n{\n\tOid\t\t\taccessMethodId = InvalidOid;\n\t\tereport(ERROR,", "partial_line": "partit", "completion": "partitioned = false; <|endoftext|>"}
{"context": "    {   int m3 = z->l - z->c; (void)m3;\n        z->c = z->l - m3;\n                if (ret < 0) return ret;\n                        if (ret < 0) return ret;\n            lab4:", "partial_line": "{   int", "completion": "{   int c9 = z->c; <|endoftext|>"}
{"context": "\t\tvalues[1] = CStringGetTextDatum(waitEventData[idx].name);\n\t}\n\t\t\t\t\t\t waiteventnames[idx]);\n\t}\n\t\tStringInfoData buf;", "partial_line": "values[0] = CStringGetTextDatu", "completion": "values[0] = CStringGetTextDatum(\"InjectionPoint\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  pathkeys,\n\tif (rte->funcordinality)\n\t\t\tVar\t\t   *node = (Var *) lfirst(lc);\n\t\t\t\tnode->varattno == ordattno &&\n\tRelids\t\trequired_outer;", "partial_line": "Plan", "completion": "Plan\t   *cteplan; <|endoftext|>"}
{"context": "\t\t\t\tn = m;\n\t\t\tNEXT();\n\t\t\tbreak;\n\t{\n\t\t\trepeat(v, lp, rp, m, n);", "partial_line": "top->fl", "completion": "top->flags = f; <|endoftext|>"}
{"context": "\tDatum\t\tvalues[Natts_pg_statistic_ext_data];\n\tbool\t\tnulls[Natts_pg_statistic_ext_data];\n\t\tnulls[Anum_pg_statistic_ext_data_stxddependencies - 1] = (data == NULL);\n\t\tbytea\t   *data = statext_mcv_serialize(mcv, stats);\n\t}", "partial_line": "mss->ndims =", "completion": "mss->ndims = ndims; <|endoftext|>"}
{"context": "\tfinish_heap_swap(matviewOid, OIDNewHeap, false, false, true, true,\n\tif (indexStruct->indisunique &&\n\t\tindexStruct->indisvalid &&\n\t\tint\t\t\tnumatts = indexStruct->indnatts;\n\t\tfor (i = 0; i < numatts; i++)", "partial_line": "int\t\t\tattnum = indexSt", "completion": "int\t\t\tattnum = indexStruct->indkey.values[i]; <|endoftext|>"}
{"context": "\t\t\tappendStringInfoString(&buf, _(\"DETAIL:  \"));\n\t\t\tappend_with_tabs(&buf, edata->hint);\n\t\tif (edata->internalquery)\n\t\t{\n\t\t\tlog_line_prefix(&buf, edata);", "partial_line": "appendStringInfo", "completion": "appendStringInfoChar(&buf, '\\n'); <|endoftext|>"}
{"context": "\tentries = ginExtractEntries(ginstate, attnum, value, isNull,\n}\n\t\t  IndexUniqueCheck checkUnique,\n\t\t\t\t\t\t\t\t\t  ALLOCSET_DEFAULT_SIZES);\n\t\tfor (i = 0; i < ginstate->origTupdesc->natts; i++)", "partial_line": "EnterP", "completion": "EnterParallelMode(); <|endoftext|>"}
{"context": "\tindex_set_state_flags(indexId, INDEX_DROP_SET_DEAD);\n}\n\t\tislocal = false;\n\t\tinhcount = 1;\n\tconOid = CreateConstraintEntry(constraintName,", "partial_line": "name", "completion": "namespaceId, <|endoftext|>"}
{"context": "{\n\t\t\t\t\t\t\t\tSpecialJoinInfo *sjinfo,\n\t\t\t\t\t\t\t\t\t\tRelOptInfo *joinrel,\n\t\t\t\t\t\t\t\t\t\tRelOptInfo *outer_rel,\n\t\t\t\t\t\t\t\t   RelOptInfo *inner_rel);", "partial_line": "static List", "completion": "static List *subbuild_joinrel_joinlist(RelOptInfo *joinrel, <|endoftext|>"}
{"context": "\tuint32\t\ti,\n\tLWLockAcquire(&MyProc->fpInfoLock, LW_EXCLUSIVE);\n\t{\n\t\tuint32\t\tlockmode;\n\t\t}", "partial_line": "LWLoc", "completion": "LWLockRelease(partitionLock); <|endoftext|>"}
{"context": "{ 6, s_6_80, 73, 1, 0},\n{ 6, s_6_87, 84, 1, 0},\n{ 6, s_6_92, 90, 1, 0},\n{ 6, s_6_93, 90, 1, 0},\n{ 6, s_6_100, 99, 1, 0},", "partial_line": "{ 2, s_6_", "completion": "{ 2, s_6_114, -1, 1, 0}, <|endoftext|>"}
{"context": "\tNumeric\t\tnum2 = PG_GETARG_NUMERIC(1);\n\tNumericVar\targ2;\n\telse\n\t\tereport(ERROR,\n\t\tres = make_result(&const_one);", "partial_line": "errmsg(\"value overflows n", "completion": "errmsg(\"value overflows numeric format\"))); <|endoftext|>"}
{"context": "\t}\n\t\tdest_encoding = ClientEncoding->encoding;\n\t\tereport(ERROR,\n\t\tSize\t\tresultlen = strlen(result);\n\treturn result;", "partial_line": "pg_unicode_to_s", "completion": "pg_unicode_to_server(pg_wchar c, unsigned char *s) <|endoftext|>"}
{"context": "\t\tscratch.resnull = &fcinfo->args[1].isnull;\n\t\tscratch.resnull = &state->resnull;\n\t\t\t\t\t\t\t\t   state->steps_len - 1);\n\t\tExprEvalStep *as = &state->steps[lfirst_int(lc)];\n\t}", "partial_line": "ExprEvalPushStep(", "completion": "ExprEvalPushStep(state, &scratch); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\topts.on_error_stop = true;\n\t\t\t\tbreak;", "partial_line": "if (pg_strcas", "completion": "if (pg_strcasecmp(optarg, \"all-visible\") == 0) <|endoftext|>"}
{"context": "\t\tchar\t   *endptr;\n\t\t\t\t\t\t\t   len, used),\n\t\t\tereturn(escontext, -1,\n\t\t\t\t(errcode(ERRCODE_DATETIME_VALUE_OUT_OF_RANGE),\n\t\tif (pg_ascii_tolower((unsigned char) **a) != firstc)", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "static const symbol s_2_475[7] = { 0xC5, 0xA1, 'n', 'j', 'i', 'j', 'e' };\nstatic const symbol s_2_494[7] = { 'e', 'v', 'i', 't', 'i', 'j', 'e' };\nstatic const symbol s_2_504[4] = { 'a', 'n', 'j', 'e' };\nstatic const symbol s_2_531[5] = { 'i', 'v', 'a', 'l', 'e' };\nstatic const symbol s_2_536[3] = { 'i', 'l', 'e' };", "partial_line": "static const symbol s_2_538[6] =", "completion": "static const symbol s_2_538[6] = { 'l', 'u', 'c', 'i', 'l', 'e' }; <|endoftext|>"}
{"context": "\tif (cac == CAC_OK)\n\t\t\tcac = CAC_TOOMANY;\n\tstartup_data.canAcceptConnections = cac;\n\t\tereport(LOG,\n\tif (!pg_set_noblock(client_sock->sock))", "partial_line": "ereport(", "completion": "ereport(LOG, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   SimpleStringList *patterns,\nstatic void expand_foreign_server_name_patterns(Archive *fout,\nstatic void prohibit_crossdb_refs(PGconn *conn, const char *dbname,\nstatic void dumpSecLabel(Archive *fout, const char *type, const char *name,\nstatic void dumpDumpableObject(Archive *fout, DumpableObject *dobj);", "partial_line": "static void dumpNamespace(Archive *fout, c", "completion": "static void dumpNamespace(Archive *fout, const NamespaceInfo *nspinfo); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  .owner = evtinfo->evtowner,\n\t\t\t\t\t\t\t\t  .description = \"EVENT TRIGGER\",\n\tdestroyPQExpBuffer(delqry);\n\tPQExpBuffer query;\n\tPQExpBuffer cmd;", "partial_line": "ret", "completion": "return; <|endoftext|>"}
{"context": "\t\tint32\t\toctet = val & 0xff;\n\treturn result;\n{\n\t\t\t\t\tt;\n\t\tm = (pg_prng_uint64(&state) & mask) | 1;", "partial_line": "m = (pg_prng", "completion": "m = (pg_prng_uint64(&state) & mask) | 1; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t  TextDatumGetCString(datum));\n\t\telog(ERROR, \"invalid collation version change\");\n\t\tereport(NOTICE,\n\tObjectAddressSet(address, DatabaseRelationId, db_id);\n\treturn address;", "partial_line": "Oid\t\t\tdatid = g", "completion": "Oid\t\t\tdatid = get_database_oid(stmt->dbname, false); <|endoftext|>"}
{"context": "\tresult->digits = res_digits;\n\tresult->weight = res_weight;\n\tstrip_var(result);\n\tint\t\t\tres_ndigits;\n\tint\t\t\ti,", "partial_line": "rscale2 = va", "completion": "rscale2 = var2->ndigits - var2->weight - 1; <|endoftext|>"}
{"context": "{\n\tcn.raddr = raddr;\n\t\tereport(LOG,\n\tereport(elevel, \\\n\t\t\t  \\", "partial_line": "} while", "completion": "} while (0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   int fnumber,\nExpandedRecordHeader *\n\t\t\t\t\t\t\t\t MemoryContext parentcontext)\n\tExpandedRecordHeader *erh;\n\tif (type_id != RECORDOID)", "partial_line": "TypeCacheE", "completion": "TypeCacheEntry *typentry; <|endoftext|>"}
{"context": "\tif (loop_count > 1)\n\t\t\tpages_fetched = ceil(pages_fetched * (1.0 - baserel->allvisfrac));\n\t\t\t\t\t\t\t\t\t\t\troot);\n\t\tif (indexonly)\n\t{", "partial_line": "pages_fetched = ceil(index", "completion": "pages_fetched = ceil(indexSelectivity * (double) baserel->pages); <|endoftext|>"}
{"context": "\tListCell   *lc;\n\t\t}\n\t\tif (new_indexes[merged_index] >= 0)\ngenerate_matching_part_pairs(RelOptInfo *outer_rel, RelOptInfo *inner_rel,\n\tinner_indexes = (int *) palloc(sizeof(int) * nmerged);", "partial_line": "outer_indexes[i] = inner", "completion": "outer_indexes[i] = inner_indexes[i] = -1; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  RelationGetRelid(rel), 0);\n\t\t\t\t\t const char *column,\n\tObjectAddress address;\n\tcompression = strVal(newValue);\n\tObjectAddressSubSet(address, RelationRelationId,", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  ObjectIdGetDatum(object->objectId));\n\t\t\t\tif (!HeapTupleIsValid(tup))\n\t\t\t\t\t\telog(ERROR, \"cache lookup failed for parameter ACL %u\",\n\t\t\t\t\t\t\t object->objectId);\n\t\t\t\tScanKeyInit(&skey[0],", "partial_line": "elog(ERROR, \"could not f", "completion": "elog(ERROR, \"could not find tuple for policy %u\", <|endoftext|>"}
{"context": "\t\tif (ic < locallock->numLockOwners)\n\t\t\tAssert(!FAST_PATH_CHECK_LOCKMODE(MyProc, f, lockmode));\n\tif (unused_slot < FastPathLockSlotsPerBackend())\n\treturn result;\n}", "partial_line": "uin", "completion": "uint32\t\tj; <|endoftext|>"}
{"context": "            if (in_grouping(z, g_v, 97, 117, 0)) goto lab2;\n                if (in_grouping(z, g_v, 97, 117, 0)) goto lab2;\n                goto lab5;\n            ;\n        }", "partial_line": "{   int c", "completion": "{   int c5 = z->c; <|endoftext|>"}
{"context": "{\n\tVarBit\t   *arg = PG_GETARG_VARBIT_P(0);\n\tint\t\t\tbyte_shift,\n\tbits8\t   *p,\n\t\t\t\t\t\t\t\t\t\t\tVarBitPGetDatum(arg),", "partial_line": "if (ishi", "completion": "if (ishift == 0) <|endoftext|>"}
{"context": "\t\t\tanum = 0;\n\t\t\t\t\tanum++;\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tvaltype = UNKNOWNOID;", "partial_line": "valu", "completion": "value, <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\tList\t   *relations = NIL;\n\t\t\t\tCharGetDatum(relkind));\n\tDefElem    *dnspnames = NULL;\n\tconst char *errormsg;", "partial_line": "if (dnspn", "completion": "if (dnspnames) <|endoftext|>"}
{"context": "#include \"access/xact.h\"\n\t\tif (BufferIsPermanent(buffer) && XLogNeedsFlush(commitLSN) &&\n\t\t{\n\t}", "partial_line": "if (!HeapTupleHe", "completion": "if (!HeapTupleHeaderXminCommitted(tuple)) <|endoftext|>"}
{"context": "\t\t\t\t*cp++ = d1 + '0';\n\t\t\t*cp++ = dig + '0';\n\t\t\tdig = (d >= 0 && d < var->ndigits) ? var->digits[d] : 0;\n#if DEC_DIGITS == 4\n\t\t\td1 = dig / 10;", "partial_line": "*cp = '", "completion": "*cp = '\\0'; <|endoftext|>"}
{"context": "static int32\n\t\t\t\t\t\t\t\t\t\t   key->partcollation[0],\n\t\t\t\t\t\t\t\tb1, b2);\nget_partition_operator(PartitionKey key, int col, StrategyNumber strategy,\n\t\t\t\t\t\t\t\t  key->partopcintype[col],", "partial_line": "strategy, k", "completion": "strategy, key->partopcintype[col], key->partopcintype[col], <|endoftext|>"}
{"context": "\t\tuint32\t\tdst = 0;\n\t\tfor (int idx = 0; idx < owner->narr; idx++)\nstatic void\n\t}\n\t\t{", "partial_line": "res_str = kind->", "completion": "res_str = kind->DebugPrint ? <|endoftext|>"}
{"context": "\t\tPG_RETURN_POINTER(NULL);\n\t{\n\t\t\tcase WJB_BEGIN_ARRAY:\n\t\t\tcase WJB_BEGIN_OBJECT:\n\t\t\t\tstack = (PathHashStack *) palloc(sizeof(PathHashStack));", "partial_line": "stack = pa", "completion": "stack = parent; <|endoftext|>"}
{"context": "\t\tReorderBufferChange *change;\n\t\tvolatile Snapshot snapshot_now = snap;\n\t\t\tTeardownHistoricSnapshot(false);\n#ifdef USE_ASSERT_CHECKING\n\tdlist_iter\titer;", "partial_line": "dlist_foreach(iter, &rb->top", "completion": "dlist_foreach(iter, &rb->toplevel_by_lsn) <|endoftext|>"}
{"context": "\t\ton_proc_exit(CatCachePrintStats, 0);\n\tcp->cc_relisshared = false; \n\tcp->cc_ntup = 0;\n\tfor (i = 0; i < nkeys; ++i)\n\telog(DEBUG1, \"rehashing catalog cache id %d for %s; %d tups, %d buckets\",", "partial_line": "dlist_foreach_modify(iter, &cp-", "completion": "dlist_foreach_modify(iter, &cp->cc_bucket[i]) <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"requested WAL segment %s has already been removed\",\n\t}\nXLogSegNo\n\tXLogSegNo\tlastRemovedSegNo;\n\tSpinLockRelease(&XLogCtl->info_lck);", "partial_line": "xldir =", "completion": "xldir = AllocateDir(XLOGDIR); <|endoftext|>"}
{"context": "\tAssert(snapshot->regd_count == 0);\n\tAssert(snapshot->copied);\n\tActiveSnapshotElt *newactive;\n\tif (snapshot == CurrentSnapshot || snapshot == SecondarySnapshot ||\n\t\t!snapshot->copied)", "partial_line": "newactive", "completion": "newactive->as_level = snap_level; <|endoftext|>"}
{"context": "\t\tusage(argv);\n\t\treturn 1;\n\t}\n\t{\n\t\t\treq->async = misbehave_cb;", "partial_line": "r", "completion": "return 1; <|endoftext|>"}
{"context": "\t\t*p = oldp;\n\tstatic const char short_uri_designator[] = \"postgres:\n\t\tcase PSQL_SEND_EXTENDED_QUERY_PARAMS:\t\n\t\tcase PSQL_SEND_EXTENDED_QUERY_PREPARED: \n\t\t\tfree(pset.bind_params);", "partial_line": "pset.bind_params", "completion": "pset.bind_params = NULL; <|endoftext|>"}
{"context": "\t{\n\t\t\tres = (Datum) 0;\n\t\t\tDatum\t\tvalue = jcstate->arg_values[0];\n\t\t\telse\n}", "partial_line": "ExecEvalJso", "completion": "ExecEvalJsonIsPredicate(ExprState *state, ExprEvalStep *op) <|endoftext|>"}
{"context": "}\n} BTOneVacInfo;\n\tBTCycleId\tresult = 0;\n\treturn result;\n\tLWLockAcquire(BtreeVacuumLock, LW_EXCLUSIVE);", "partial_line": "result = ++(btvacinfo->", "completion": "result = ++(btvacinfo->cycle_ctr); <|endoftext|>"}
{"context": "\tstate->deadTupleStorage = palloc0(SGDTSIZE);\nSpGistNewBuffer(Relation index)\n\t\tbuffer = ReadBuffer(index, blkno);\n\t\t{\n\t\t\tif (PageIsNew(page))", "partial_line": "MarkB", "completion": "MarkBufferDirty(metabuffer); <|endoftext|>"}
{"context": "};\n#endif\n\t\t\t\t\t Z_DEFAULT_STRATEGY) != Z_OK)\n}", "partial_line": "bbsink_gzip *mysink = (bbsink_", "completion": "bbsink_gzip *mysink = (bbsink_gzip *) sink; <|endoftext|>"}
{"context": "\t{\n\t\t\"publication\",\n\t\tPublicationRelationId,\n\t\tSubscriptionRelationId,\n\t\t\"extended statistics\",", "partial_line": "Anum_pg", "completion": "Anum_pg_statistic_ext_stxnamespace, <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_DUPLICATE_OBJECT),\n\t\tpub_rel = palloc(sizeof(PublicationRelInfo));\n\t\t\trelids_with_rf = lappend_oid(relids_with_rf, myrelid);\n\t\t{\n\t\t\tforeach(child, children)", "partial_line": "(t->columns || list_member_oid(relids_with_co", "completion": "(t->columns || list_member_oid(relids_with_collist, childrelid))) <|endoftext|>"}
{"context": "}\n\t{\n\t\t\telog(DEBUG2,\n\t\tavdb = (avw_dbase *) palloc(sizeof(avw_dbase));\n\t\tavdb->adw_datid = pgdatabase->oid;", "partial_line": "avdb->adw_minmulti = pgdatabas", "completion": "avdb->adw_minmulti = pgdatabase->datminmxid; <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n#ifdef USE_BSD_AUTH\n#endif\t\t\t\t\t\t\t\n#endif\nstatic int\tpg_GSS_checkauth(Port *port);", "partial_line": "static", "completion": "static int\tpg_GSS_recvauth(Port *port); <|endoftext|>"}
{"context": "\tif (!abbrev)\n\t\tGUC_check_errmsg(\"missing time zone abbreviation in time zone file \\\"%s\\\", line %d\",\n\tif (!offset)\n\t}\n\t\t\tGUC_check_errmsg(\"invalid number for time zone offset in time zone file \\\"%s\\\", line %d\",", "partial_line": "filename,", "completion": "filename, lineno); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  refnames_tlist,\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t\t\t\t\tnonunion_pathkeys, &dLeftGroups);\n\t\ttmpd = dLeftGroups;\n\t}", "partial_line": "result_rel->rows = dNum", "completion": "result_rel->rows = dNumOutputRows; <|endoftext|>"}
{"context": "\t{\n\t\tdst += SPRINTF((dst, \"%u\", *src++));\n\t\t{\n\t\tsize -= (size_t) (dst - t);\n\tstruct", "partial_line": "for (i = 0; i < NS_I", "completion": "for (i = 0; i < NS_IN6ADDRSZ; i++) <|endoftext|>"}
{"context": "\t\t{\n}\nstatic NUMCacheEntry *\n\tif ((ent = NUM_cache_search(str)) == NULL)\n\t\tparse_format(ent->format, str, NUM_keywords,", "partial_line": "NUM_cache(int len,", "completion": "NUM_cache(int len, NUMDesc *Num, text *pars_str, bool *shouldFree) <|endoftext|>"}
{"context": "\t\tappendPQExpBuffer(&buf,\n\t\t\t\t\t\t  \" ON c.oid = inhrelid\"\n\t\t\t\t\t\t  \"\\nWHERE c.oid = '%s';\", oid);\n\t\t{\n\t\t\t\telse", "partial_line": "result = PS", "completion": "result = PSQLexec(buf.data); <|endoftext|>"}
{"context": "\t\t\t\t\t(Datum *) palloc(sizeof(Datum) * nelems);\n\t\t\t\tscratch.d.arrayexpr.elemtype = arrayexpr->element_typeid;\n\t\t\t}\n\t\t\t{\n\t\t\t\t\t(Datum *) palloc(sizeof(Datum) * nelems);", "partial_line": "(bool *) pa", "completion": "(bool *) palloc(sizeof(bool) * nelems); <|endoftext|>"}
{"context": "\tAlterTableStmt *atstmt = makeNode(AlterTableStmt);\n\t\t\tcase AT_AddConstraint:\n\t\t\t\tbreak;\n\t\t}\n\t\telse", "partial_line": "if (newcmd", "completion": "if (newcmd == NULL && cmd->subtype == cmd2->subtype) <|endoftext|>"}
{"context": "\ttext\t   *str = PG_GETARG_TEXT_PP(0);\n\tconst char *p = VARDATA_ANY(str);\n\t}\n\telse\n\t\t\t\t\t errmsg(\"unterminated format() type specifier\"), \\", "partial_line": "Oid\t\t\telement_type = I", "completion": "Oid\t\t\telement_type = InvalidOid; <|endoftext|>"}
{"context": "\t}\n\tMyProc->waitLSN = lsn;\n\tif (update_process_title)\n\t\t\tereport(WARNING,\n\t\tif (QueryCancelPending)", "partial_line": "queue = &WalSnd", "completion": "queue = &WalSndCtl->SyncRepQueue[mode]; <|endoftext|>"}
{"context": "\t\t\t GetLastError());\n\tdst[len] = '\\0';\nvoid\n\tstruct tm\ttimeinfobuf;\n\telog(DEBUG3, \"cache_locale_time() executed; locale: \\\"%s\\\"\", locale_time);", "partial_line": "#ifdef W", "completion": "#ifdef WIN32 <|endoftext|>"}
{"context": "\tvalue = exec_eval_expr(estate, stmt->expr, &isnull, &arrtype, &arrtypmod);\n\tif (isnull)\n\t\t\t\t(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),\n\t\tereport(ERROR,\n\tarr = DatumGetArrayTypePCopy(value);", "partial_line": "if (stmt->", "completion": "if (stmt->slice < 0 || stmt->slice > ARR_NDIM(arr)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  &spc_random_page_cost,\n\tqual_op_cost = cpu_operator_cost *\n\t\t(list_length(indexQuals) + list_length(indexOrderBys));\n\tcosts->indexSelectivity = indexSelectivity;\nadd_predicate_to_index_quals(IndexOptInfo *index, List *indexQuals)", "partial_line": "ListCel", "completion": "ListCell   *lc; <|endoftext|>"}
{"context": "\t\t\t\t\t\t give_proto_hint ?\n\t\t\t\t\t\t\t\t ssl_protocol_version_to_string(ssl_min_protocol_version) :\n\t\t\t\t\t\t\t\t MIN_OPENSSL_TLS_VERSION,\n\t\t\t\tbreak;\n\t\t\tdefault:", "partial_line": "if (sele", "completion": "if (selected != NULL) <|endoftext|>"}
{"context": "\t{\n\t\t}\n\t\tif (invalidation_cause == RS_INVAL_NONE)\n\t\t\tbreak;\n\t\tAssert(!(*invalidated && SlotIsLogical(s) && IsBinaryUpgrade));", "partial_line": "if (last_signaled_pid", "completion": "if (last_signaled_pid != active_pid) <|endoftext|>"}
{"context": "\tchar\t   *sptr;\n\trangelo = rangehi = (unsigned char) hibound[0];\n\tfor (sptr = hibound; *sptr; sptr++)\n\t\tif (rangehi < (unsigned char) *sptr)\n\t\t\trangehi = 'Z';", "partial_line": "if (rangelo", "completion": "if (rangelo > 'a') <|endoftext|>"}
{"context": "\tappendPQExpBufferStr(&buf, \"ORDER BY 1\");\n\tmyopt.n_translate_columns = lengthof(translate_columns);\n\tPGresult   *res;\n\t\t\t\t\t formatPGVersionNumber(pset.sversion, false,\n\t\t\t\t\t  gettext_noop(\"Schema\"),", "partial_line": "\"  pg_catalog.pg_get_statisticsobj", "completion": "\"  pg_catalog.pg_get_statisticsobjdef_columns(es.oid), \\n\" <|endoftext|>"}
{"context": "\tRangeBound\tlower;\n\tchar\t\tflags;\n\telse\n\tDatum\t\tseed = PG_GETARG_DATUM(1);\n\tTypeCacheEntry *scache;", "partial_line": "typcache = range_get_typcache(fcin", "completion": "typcache = range_get_typcache(fcinfo, RangeTypeGetOid(r)); <|endoftext|>"}
{"context": "\tOid\t\t\tOIDNewHeap;\n\tMultiXactId cutoffMulti;\n\t\t\t  char relpersistence, LOCKMODE lockmode)\n\tRelation\tOldHeap;\n\tsnprintf(NewHeapName, sizeof(NewHeapName), \"pg_temp_%u\", OIDOldHeap);", "partial_line": "Assert", "completion": "Assert(OIDNewHeap != InvalidOid); <|endoftext|>"}
{"context": "\t\tModifyTableState *mtstate = (ModifyTableState *) lfirst(l2);\n\t\tAssert(mtstate);\n\t}\n\t\treturn ExecBRDeleteTriggers(context->estate, context->epqstate,\n\t\t\t\t\t\t\t\t\tresultRelInfo, tupleid, oldtuple,", "partial_line": "estate->", "completion": "estate->es_snapshot, <|endoftext|>"}
{"context": "\t\t}\n\tbool\t\toperandexists;\n} QueryRepresentationOperand;\n} QueryRepresentation;\n\t\t\t\t\t\t\tExecPhraseData *data)", "partial_line": "QueryRepresentation *qr = (Qu", "completion": "QueryRepresentation *qr = (QueryRepresentation *) checkval; <|endoftext|>"}
{"context": "\t[LWTRANCHE_BUFFER_CONTENT] = \"BufferContent\",\n\t[LWTRANCHE_PER_SESSION_RECORD_TYPE] = \"PerSessionRecordType\",\n\t[LWTRANCHE_NOTIFY_SLRU] = \"NotifySLRU\",\nstatic int\tnum_held_lwlocks = 0;\nstatic NamedLWLockTrancheRequest *NamedLWLockTrancheRequestArray = NULL;", "partial_line": "static void In", "completion": "static void InitializeLWLocks(void); <|endoftext|>"}
{"context": "\t\t\t\tAssert(ct->refcount > 0);\n\t\t\t\t}\n\t\t\tsystable_endscan(scandesc);\n\t\t\t\tct->dead &&\n\t}", "partial_line": "cl->hash_value = lH", "completion": "cl->hash_value = lHashValue; <|endoftext|>"}
{"context": "\t\t\ttype = BOOLOID;\n\t\tcase T_BooleanTest:\n\t\tcase T_CoerceToDomainValue:\n\t\tcase T_CurrentOfExpr:\n\t\t\t\ttype = exprType((Node *) n->expr);", "partial_line": "in", "completion": "int32 <|endoftext|>"}
{"context": "\tdbentry->blk_read_time += pgStatBlockReadTime;\n\t\tpgLastSessionReportTime = ts;\nstatic bool\npgstat_should_report_connstat(void)\npgstat_prep_database_pending(Oid dboid)", "partial_line": "entry_ref = pgstat_prep_pending_entry(PGSTAT_K", "completion": "entry_ref = pgstat_prep_pending_entry(PGSTAT_KIND_DATABASE, dboid, InvalidOid, <|endoftext|>"}
{"context": "\tPG_RETURN_DATUM(matches);\n\t\t\t\t\t\t\t\t\t\tattr->attbyval, attr->attlen);\n\t{\nminmax_get_strategy_procinfo(BrinDesc *bdesc, uint16 attno, Oid subtype,\n\tAssert(strategynum >= 1 &&", "partial_line": "opaque->cached_s", "completion": "opaque->cached_subtype = subtype; <|endoftext|>"}
{"context": "\t\t}\n\t\t\tabort();\t\t\t\n\tif (tzdefault == NULL)\n\t{\n\t\t\tfor (j = 0; j < nlinks; ++j)", "partial_line": "dolink(psxrules, TZDE", "completion": "dolink(psxrules, TZDEFRULES, true); <|endoftext|>"}
{"context": "\t\t\t(*buffers_evicted)++;\n\t\telse\n\t\t\t\t\t\tint32 *buffers_flushed, int32 *buffers_skipped)\n\t\tReservePrivateRefCountEntry();\n\t\t\t(*buffers_skipped)++;", "partial_line": "PgAi", "completion": "PgAioWaitRef io_ref; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   TRANSACTION_STATUS_ABORTED, InvalidXLogRecPtr);\n\tint32\t\tdiff;\nTransactionIdPrecedesOrEquals(TransactionId id1, TransactionId id2)\n\t\treturn (id1 <= id2);\n\tdiff = (int32) (id1 - id2);", "partial_line": "if (!TransactionIdIsNormal(id1)", "completion": "if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2)) <|endoftext|>"}
{"context": "static const symbol s_2_615[5] = { 'i', 'r', 'a', 's', 'e' };\nstatic const symbol s_2_617[4] = { 't', 'a', 's', 'e' };\nstatic const symbol s_2_621[5] = { 'i', 'v', 'a', 's', 'e' };\nstatic const symbol s_2_624[3] = { 'e', 's', 'e' };\nstatic const symbol s_2_629[6] = { 'j', 'e', 't', 'i', 's', 'e' };", "partial_line": "static const symbol", "completion": "static const symbol s_2_630[3] = { 'o', 's', 'e' }; <|endoftext|>"}
{"context": "\t\t\t\tif (IsA(newvar, Var))\n\t\t\t\t\t((Var *) newvar)->location = var->location;\n\t\t\trowexpr->args = fields;\n\t\t}\n\t\tnewvar = (Node *) list_nth(rte->joinaliasvars, var->varattno - 1);", "partial_line": "if (IsA(no", "completion": "if (IsA(node, Query)) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t -1);\n\treturn my_rc;\n\t{\n\t\tTcl_WrongNumArgs(interp, 1, objv, \"command\");\n\tif (retcode == TCL_ERROR)", "partial_line": "ret", "completion": "return retcode; <|endoftext|>"}
{"context": "\t{\n\t{\n};\n{\n\t\t\tShareUpdateExclusiveLock", "partial_line": "AccessExc", "completion": "AccessExclusiveLock <|endoftext|>"}
{"context": "\tRelids\t\tupper_varnos;\n\trtoffset = list_length(parse->rtable);\n\tIncrementVarSublevelsUp((Node *) subselect, -1, 1);\n\t\t\tupper_varnos = bms_add_member(upper_varnos, varno);\n\tbms_free(clause_varnos);", "partial_line": "if (list_length(subselect-", "completion": "if (list_length(subselect->jointree->fromlist) == 1) <|endoftext|>"}
{"context": "\t\t\t}\n\tpfree(values1);\n\tReleaseTupleDesc(tupdesc1);\n\tPG_RETURN_BOOL(result);\nrecord_lt(PG_FUNCTION_ARGS)", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "\t\tAssert(slot == MyReplicationSlot);\n\t\tif (slot->data.persistency == RS_TEMPORARY)\n\t\t{\n\t\t\t\t\t\terrmsg_internal(\"cannot synchronize local slot \\\"%s\\\"\",\n\t\t}", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\tXLogRecPtr\toldestLSN;\nrestart:\n\t\tif (!s->in_use)\n\t{\n\treturn invalidated;", "partial_line": "sprintf(path, \"%s/", "completion": "sprintf(path, \"%s/%s\", PG_REPLSLOT_DIR, NameStr(s->data.name)); <|endoftext|>"}
{"context": "\t\t\t\treferenced;\n\t\treferenced.classId = CollationRelationId;\n}\nstatic ObjectAddress\n{", "partial_line": "attr_rel = table_open(At", "completion": "attr_rel = table_open(AttributeRelationId, RowExclusiveLock); <|endoftext|>"}
{"context": "\tMemoryContext bgwriter_context;\n\tWritebackContext wb_context;\n\tpqsignal(SIGINT, SIG_IGN);\n\tpqsignal(SIGUSR2, SIG_IGN);\n\tpqsignal(SIGCHLD, SIG_DFL);", "partial_line": "ALLOCSET_DEFAULT", "completion": "ALLOCSET_DEFAULT_SIZES); <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\t\t\n\t\tif (rc->rti != rc->prti)\n\t\tif (rc->allMarkTypes & ~(1 << ROW_MARK_COPY))\n\t\t{\n\t\t\t\t\t\t  InvalidOid,", "partial_line": "tle = makeTargetEntry", "completion": "tle = makeTargetEntry((Expr *) var, <|endoftext|>"}
{"context": "\t\tAssert(ojscope);\n\t\trelids = ojscope;\n\t\t\t\t\t\t\t\t\t security_level,\n\t\t\t\t\t\t\t\t\t\t   PVC_RECURSE_AGGREGATES |\n\tif (restrictinfo->mergeopfamilies)", "partial_line": "ojcinfo->sjinfo =", "completion": "ojcinfo->sjinfo = sjinfo; <|endoftext|>"}
{"context": "static ObjectAddress dropconstraint_internal(Relation rel,\n\t\t\t\t\t\t\t\t  AlterTableUtilityContext *context);\n\t\t\t\t\t\t\t\t char *cmd, List **wqueue, LOCKMODE lockmode,\n\t\t\t\t\t\t\t\t bool rewrite);\nstatic ObjectAddress ATExecAlterColumnGenericOptions(Relation rel, const char *colName,", "partial_line": "static void ATPrepSetAccessMethod(AlteredTableInfo *ta", "completion": "static void ATPrepSetAccessMethod(AlteredTableInfo *tab, Relation rel, const char *amname); <|endoftext|>"}
{"context": "\t\t\tHeapTuple\ttuple;\n\t\t\t\t\t\tAnum_pg_constraint_conparentid,\n\t\tforeach(lc, conoidlist)\n\t\t\t{\n\t\t\t\t\tfound = true;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tif (standbyState == STANDBY_SNAPSHOT_READY &&\n\txlog_outdesc(&buf, record);\n\tpfree(buf.data);\n\tRmgrData\trmgr = GetRmgr(XLogRecGetRmid(record));\n\tconst char *id;", "partial_line": "appendStringInfo(buf, \"UNKNOWN (%X): \", info", "completion": "appendStringInfo(buf, \"UNKNOWN (%X): \", info & ~XLR_INFO_MASK); <|endoftext|>"}
{"context": "\theap->bh_has_heap_property = false;\n}\nbinaryheap_remove_first(binaryheap *heap)\n\tbh_node_type result;\n\tAssert(!binaryheap_empty(heap) && heap->bh_has_heap_property);", "partial_line": "heap->b", "completion": "heap->bh_nodes[n], <|endoftext|>"}
{"context": "\t\t\tif (dependency_is_fully_matched(dependency, attnums))\n\t\t\t\tstrongest = dependency; \n{\n\tint\t\t\tnattrs;\n\t\tfor (j = 0; j < dependencies[i]->nattributes; j++)", "partial_line": "attidx", "completion": "attidx = 0; <|endoftext|>"}
{"context": "\t\tdpns->index_tlist = ((CustomScan *) plan)->custom_scan_tlist;\n\telse\n\t\tdpns->index_tlist = NIL;\n{\n\tListCell   *lc;", "partial_line": "return ance", "completion": "return ancestor; <|endoftext|>"}
{"context": "\t\t\t\t\t\t  \"  c.colllocale AS \\\"%s\\\",\\n\",\n\telse if (pset.sversion >= 150000)\n\telse\n\t\t\t\t\t\t  gettext_noop(\"ICU Rules\"));\n\telse", "partial_line": "gettext_noop(", "completion": "gettext_noop(\"ICU Rules\")); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   \"brininsert cxt\",\n\t\t}\n\t\t}\n\t\t\tnewtup = brin_form_tuple(bdesc, heapBlk, dtup, &newsz);\n\t\t\tif (!brin_doupdate(idxRel, pagesPerRange, revmap, heapBlk,", "partial_line": "MemoryContextDelete", "completion": "MemoryContextDelete(tupcxt); <|endoftext|>"}
{"context": "\t\tcase JBI_OBJECT_VALUE:\n\t\t\t(*it)->curIndex++;\n\t\t\t{\n\t\t\telse\n\tJsonbIterator *it;", "partial_line": "it->parent", "completion": "it->parent = parent; <|endoftext|>"}
{"context": "\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny))\n\telse if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"OF\") ||\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"OF\"))\n\telse if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"AS\") ||\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"AS\") ||", "partial_line": "TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\",", "completion": "TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"(*)\", \"AS\")) <|endoftext|>"}
{"context": "\t\t\tappendPQExpBuffer(&buf,\n\t\telse\n\t\t\t\t\t\t\t  \"       start_value AS \\\"%s\\\",\\n\"\n\t\t\t\t\t\t\t  \"       CASE WHEN is_cycled THEN '%s' ELSE '%s' END AS \\\"%s\\\",\\n\"\n\t\t\t\t\t\t\t  gettext_noop(\"Maximum\"),", "partial_line": "gettext_noop(\"Ca", "completion": "gettext_noop(\"Cache\")); <|endoftext|>"}
{"context": "\t\t\tadjust_appendrel_attrs(root,\n\t\t\t\t\t\t\t\t   (Node *) rel->reltarget->exprs,\n\t\tparent_tuples += childrel->tuples;\n\t\t\t\t\tchild_width = childrel->attr_widths[cndx];\n\t\t\t}", "partial_line": "set_append_rel_pathlist(Plann", "completion": "set_append_rel_pathlist(PlannerInfo *root, RelOptInfo *rel, <|endoftext|>"}
{"context": "\tif (bytes_read != m->size)\n\t\t\t\t\t\t\trelpath, m->size, bytes_read);\n\tif (checksumlen < 0)\n\t\t\t\t\t\t\trelpath);\n\t\t\t\t   char *wal_directory)", "partial_line": "manifest_wal", "completion": "manifest_wal_range *this_wal_range = manifest->first_wal_range; <|endoftext|>"}
{"context": "\tforeach(glitem, groupClause)\nPathTarget *\n\tPathTarget *target = makeNode(PathTarget);\n\ttarget->sortgrouprefs = (Index *) palloc(list_length(tlist) * sizeof(Index));\n\t\tTargetEntry *tle;", "partial_line": "if (target->s", "completion": "if (target->sortgrouprefs) <|endoftext|>"}
{"context": "\tHeapTuple\ttuple;\n\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relid));\n\t\treturn;\t\t\t\t\t\nObjectAddress\n\tAttrNumber\tattnum;", "partial_line": "relid = Range", "completion": "relid = RangeVarGetRelidExtended(stmt->relation, AccessExclusiveLock, <|endoftext|>"}
{"context": "#include <ctype.h>\n#include \"utils/memutils.h\"\n\tCopyDest\tcopy_dest;\t\t\n\tcopy_data_dest_cb data_dest_cb; ", "partial_line": "CopyForma", "completion": "CopyFormatOptions opts; <|endoftext|>"}
{"context": "#line 182 \"cursor.pgc\"\n\tprintf(\"%d %s\\n\", id, t);\n#line 186 \"cursor.pgc\"\n\tECPGt_char,&(curname5),(long)0,(long)1,(1)*sizeof(char), \nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "strcpy(msg, \"o", "completion": "strcpy(msg, \"open\"); <|endoftext|>"}
{"context": "\t\t&&CASE_EEOP_SUBPLAN,\n\tAssert(state != NULL);\n\toldslot = econtext->ecxt_oldtuple;\n\t\t\t*isnull = state->resnull;\n\t\t\tCheckOpSlotCompatibility(op, scanslot);", "partial_line": "slot_getsomeattrs(oldslo", "completion": "slot_getsomeattrs(oldslot, op->d.fetch.last_var); <|endoftext|>"}
{"context": "\topfamilies = list_make1_oid(index->opfamily[indexcol]);\n\t\tlefttypes = lappend_oid(lefttypes, op_lefttype);\n\t\t}\n\t\telse if (op_strategy == BTLessEqualStrategyNumber ||\n\t\t{", "partial_line": "ListCell   *rightty", "completion": "ListCell   *righttypes_cell; <|endoftext|>"}
{"context": "\t\tif (first_pct == NULL)\n\t\t\tstrvalue = va_arg(args, char *);\n\t\t}\n\t\t\t\tgoto nextch2;\n\t\t\tcase '0':", "partial_line": "c", "completion": "case '6': <|endoftext|>"}
{"context": "\t\tscan->rs_prefetch_block = heapgettup_initial_block(scan, scan->rs_dir);\n\t{\n\t\t\tcontinue;\n\telse\n\tif (!RelationUsesLocalBuffers(scan->rs_base.rs_rd) &&", "partial_line": "scan->rs_base.rs_flags |= SO", "completion": "scan->rs_base.rs_flags |= SO_ALLOW_SYNC; <|endoftext|>"}
{"context": "\t\telse\n\t\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t\t errmsg(\"could not stat file \\\"%s\\\": %m\", filename)));\n\ttupdesc = CreateTemplateTupleDesc(6);\n\tTupleDescInitEntry(tupdesc, (AttrNumber) 6,", "partial_line": "memset(isnu", "completion": "memset(isnull, false, sizeof(isnull)); <|endoftext|>"}
{"context": "static const unsigned char g_V1[] = { 17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 48, 8 };\nstatic const symbol s_0[] = { 'a' };\nstatic const symbol s_9[] = { 't' };\nstatic const symbol s_14[] = { 'l', 0xC3, 0xB6, 0xC3, 0xB6 };\nstatic const symbol s_20[] = { 'v', 0xC3, 0xB5, 'i', 's', 'i' };", "partial_line": "retu", "completion": "return 1; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\"b.%d.argsequal\", opno);\n\t\t\t\t\tv_argnull0 = l_funcnull(b, v_fcinfo, 0);\n\t\t\t\t\t\t\t\t\t\t\t\t  l_sbool_const(1), \"\"),\n\t\t\t\t\tLLVMBuildStore(b, v_arg0, v_resvaluep);\n\t\t\t\t\tif (op->d.func.make_ro)", "partial_line": "llvm_pg_var_func_type(\"MakeExp", "completion": "llvm_pg_var_func_type(\"MakeExpandedObjectReadOnlyInternal\"), <|endoftext|>"}
{"context": "\t\t\t\trte->securityQuals == NIL &&\n\t\t\t\t\t\t\t\t\tACL_SELECT) == ACLCHECK_OK) ||\n\t\t\t\t\t\t\t\t\t\tACL_SELECT) == ACLCHECK_OK));\n\t\t\t{\n\t\t\t\t\tvarno = appinfo->parent_relid;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t\t\t\t\tcontinue;\n\t\t\tcooked->name = ccname;\n\t\telse if (cdef->contype == CONSTR_NOTNULL)\n\t\t{\n\t\t\t\tereport(ERROR,", "partial_line": "if (ConstraintNameIsUs", "completion": "if (ConstraintNameIsUsed(CONSTRAINT_RELATION, <|endoftext|>"}
{"context": "{\n\t\tint\t\t\tfirst_elem_dir;\n\t\t\tfirst_elem_dir = 0;\n\treturn _bt_verify_keys_with_arraykeys(scan);\n\tint\t\t\tlast_sk_attno = InvalidAttrNumber,", "partial_line": "if (cur->", "completion": "if (cur->sk_strategy != BTEqualStrategyNumber || <|endoftext|>"}
{"context": "\t{\n\t\tTypeCacheEntry *typcache;\n\tFuncCallContext *funcctx;\n\t\tfctx->mr = mr;\n\tTypeCacheEntry *typcache,", "partial_line": "int32\t\trang", "completion": "int32\t\trange_count, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\"lo_unlink\");\n\tconn->lobjfuncs = lobjfuncs;\n}\nstatic int64_t\n\t}\t\t\tswap;", "partial_line": "swap.i32[1] = pg", "completion": "swap.i32[1] = pg_hton32(t); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"replication slot file \\\"%s\\\" has wrong magic number: %u instead of %u\",\n\t\tereport(PANIC,\n\tif (cp.length != ReplicationSlotOnDiskV2Size)\n\treadBytes = read(fd,\n\tpgstat_report_wait_end();", "partial_line": "errmsg(\"could not close f", "completion": "errmsg(\"could not close file \\\"%s\\\": %m\", path))); <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_SCHEMA_QUERY(Query_for_list_of_tables);\n\t\tCOMPLETE_WITH_CS(\"smallint\", \"integer\", \"bigint\");\n\t\tCOMPLETE_WITH(\"(\", \"ON\");\n\t\t\t TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny))\n\telse if (TailMatches(\"CREATE\", \"TABLE\", MatchAny, \"OF\") ||", "partial_line": "TailMatches(\"C", "completion": "TailMatches(\"CREATE\", \"TEMP|TEMPORARY|UNLOGGED\", \"TABLE\", MatchAny, \"OF\")) <|endoftext|>"}
{"context": "#ifndef PGDLLIMPORT\n\tlong\t\tsqlcode;\n\tchar\t\tsqlerrp[8];\n#include <stdlib.h>\n char ** d4 = 0 ;", "partial_line": "#line 14", "completion": "#line 14 \"dynalloc.pgc\" <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  tableinfo.relkind, schemaname, relationname);\n\t\t\tbreak;\n\t\theaders[cols++] = gettext_noop(\"Default\");\n\tif (indexdef_col >= 0)\n\t\theaders[cols++] = gettext_noop(\"FDW options\");", "partial_line": "if (attstorage_c", "completion": "if (attstorage_col >= 0) <|endoftext|>"}
{"context": "\t\t\t\t\t\t   O_CREAT | O_EXCL | O_WRONLY | PG_BINARY);\n\t\t\t\t(errcode_for_file_access(),\n\t{\n\t\t\t\t(errcode_for_file_access(),\n\t}", "partial_line": "(errcode_f", "completion": "(errcode_for_file_access(), <|endoftext|>"}
{"context": "\t\thash_search(PrivateRefCountHash, &buffer, HASH_REMOVE, &found);\n\t\tPrivateRefCountOverflowed--;\n\t\tfalse \\\n\t\tBufferIsLocal(bufnum) ? \\\n\t\t\t\t\t\t\t\tSMgrRelation smgr, char smgr_persistence,", "partial_line": "ForkNumb", "completion": "ForkNumber fork, <|endoftext|>"}
{"context": "\t\t\t(sjinfo == NULL || !bms_is_member(sjinfo->ojrelid, phinfo->ph_eval_at)))\n\t\t\t\tphinfo->ph_eval_at = adjust_relid_set(phinfo->ph_eval_at,\n\t\t\tAssert(!bms_is_empty(phinfo->ph_eval_at));\t\n\t\t\tif (bms_is_member(0, phinfo->ph_needed))\n\t\t\t\tphinfo->ph_needed = NULL;", "partial_line": "phinfo->ph_lateral = bms_diffe", "completion": "phinfo->ph_lateral = bms_difference(phinfo->ph_lateral, phinfo->ph_eval_at); <|endoftext|>"}
{"context": "\t{\n\t\tJsonbValue\tobj;\n\t\tAssert(tok == WJB_VALUE);\n\t\tpushJsonbValue(&ps, WJB_BEGIN_OBJECT, NULL);\n\t\tpushJsonbValue(&ps, WJB_KEY, &valstr);", "partial_line": "cxt->baseObject = ba", "completion": "cxt->baseObject = baseObject; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 3:", "partial_line": "have_h", "completion": "have_heading = true; <|endoftext|>"}
{"context": "\t\t\t\tcase ipCmpMask:\n\t\t\t\tdefault:\n\tList\t   *new_parsed_lines = NIL;\n\t}\n\tfree_auth_file(file, 0);", "partial_line": "MemoryContextD", "completion": "MemoryContextDelete(hbacxt); <|endoftext|>"}
{"context": "\t\t\tif (ItemIdIsRedirected(lp) && at_chain_start)\n\t\t\t\tat_chain_start = false;\n\t\theapTuple->t_len = ItemIdGetLength(lp);\n\t\tItemPointerSet(&heapTuple->t_self, blkno, offnum);\n\t\tif (at_chain_start && HeapTupleIsHeapOnly(heapTuple))", "partial_line": "if (Tra", "completion": "if (TransactionIdIsValid(prev_xmax) && <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\tList\t   *allargs = NIL;\n\t\t\t\t\telse\n\t\t\t\t\t\tint\t\t\tfuncno = 0;\n\t\t\t\t\t\t\tif (funcno > 0)", "partial_line": "if (rtfun", "completion": "if (rtfunc->funccolnames != NIL) <|endoftext|>"}
{"context": "\tif (info == XLOG_BTREE_UNLINK_PAGE_META)\n\t\t_bt_restore_meta(record, 4);\n\tif (xlrec->level == 0)\n\t\t_bt_restore_page(page, ptr, len);\n{", "partial_line": "xlrec->l", "completion": "xlrec->locator); <|endoftext|>"}
{"context": "const struct config_enum_entry recovery_target_action_options[] = {\n\t{\"promote\", RECOVERY_TARGET_ACTION_PROMOTE, false},\nchar\t   *archiveCleanupCommand = NULL;\nstatic bool doRequestWalReceiverReply;\nstatic uint32 readLen = 0;", "partial_line": "static TimeLineID r", "completion": "static TimeLineID receiveTLI = 0; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  checkPoint.nextMultiOffset);\n\t\tMultiXactAdvanceOldest(checkPoint.oldestMulti,\n\t\t\tint\t\t\tnxids;\n\t\t\tTransactionId latestCompletedXid;\n\t\t\trunning.xcnt = nxids;", "partial_line": "Transact", "completion": "TransactionIdRetreat(latestCompletedXid); <|endoftext|>"}
{"context": "\t\t\tdefault:\n\t\t}\n\tif (optind < argc)\n\t{\n\tif (database_exclude_patterns.head != NULL &&", "partial_line": "(globals_", "completion": "(globals_only || roles_only || tablespaces_only)) <|endoftext|>"}
{"context": "\treturn state->last_match;\n\tstate->refpoint = state->str1;\n}\n\t\t\treturn 0;\n\t\t\tresult = memcmp(arg1, arg2, Min(len1, len2));", "partial_line": "return", "completion": "return result; <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\tereport(ERROR,\n\tif (opts_out->csv_mode && opts_out->delim[0] == opts_out->quote[0])\n\t\t\t\t errmsg(\"COPY %s requires CSV mode\", \"FORCE_QUOTE\")));\n\t\t\t\t\t\t\"COPY FROM\")));", "partial_line": "errmsg(\"COPY delimiter charac", "completion": "errmsg(\"COPY delimiter character must not appear in the %s specification\", <|endoftext|>"}
{"context": "\t\t((y - EPOCH_YEAR) % DAYSPERWEEK) *\n\ttmp->tm_wday %= DAYSPERWEEK;\n\tif (tmp->tm_wday < 0)\n\ttmp->tm_hour = (int) (rem / SECSPERHOUR);\n\ttmp->tm_sec = (int) (rem % SECSPERMIN) + hit;", "partial_line": "int const\ti", "completion": "int const\ti = *ip; <|endoftext|>"}
{"context": "            {   int ret = slice_from_s(z, 3, s_29);\n            break;\n            {   int ret = slice_from_s(z, 3, s_31);\n                if (ret < 0) return ret;\n            break;", "partial_line": "re", "completion": "return 1; <|endoftext|>"}
{"context": "\tif (dimschanged)\n\t}\nDatum\narray_set_slice(Datum arraydatum,\n\t\t\t\tint *lowerIndx,", "partial_line": "Datum", "completion": "Datum srcArrayDatum, <|endoftext|>"}
{"context": "\t}\n\t\t\tupper.lower = false;\n\t\t\t\t\t\t\t\t\t\t\t  1, &constrange);\n\telse if (operator == OID_RANGE_OVERLAPS_MULTIRANGE_OP ||\n\t\t\t operator == OID_RANGE_CONTAINS_MULTIRANGE_OP ||", "partial_line": "if (co", "completion": "if (constmultirange) <|endoftext|>"}
{"context": "\t\tbool\t\tempty;\n\t\t\t\t\t\t  &by_lower[i - FirstOffsetNumber].lower,\n\t\tAssert(!empty);\n\tqsort_arg(by_lower, nentries, sizeof(NonEmptyRange),\n\t\t\t  interval_cmp_upper, typcache);", "partial_line": "i1 =", "completion": "i1 = 0; <|endoftext|>"}
{"context": "\t}\n\tecontext->ecxt_scantuple = slot;\n\t\t\t\t\t\t\tEState *estate)\n\t\troot_relid = RelationGetRelid(rootrel->ri_RelationDesc);\n\t\tif (map != NULL)", "partial_line": "Relation\trel = resultRelInfo->ri", "completion": "Relation\trel = resultRelInfo->ri_RelationDesc; <|endoftext|>"}
{"context": "\t\t\t\treturn STATUS_OK;\t\n\t\treturn STATUS_ERROR;\n}\nint\n\t\treturn STATUS_OK;", "partial_line": "if (timeout", "completion": "if (timeout == 0) <|endoftext|>"}
{"context": "\tif (relid == StatisticRelationId)\n\tint\t\t\tlen;\nstatic void\n\tchar\t\tactivity[MAX_AUTOVAC_ACTIV_LEN + 12 + 2];\n\tsnprintf(activity + len, MAX_AUTOVAC_ACTIV_LEN - len,", "partial_line": "in", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "\t\t{\n\t\t}\n\t}\n{\n\tint\t\t\tw,", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tbool\t\tpublish_via_partition_root;\n\tchar\t\tpublish_generated_columns;\n\t\t\t\t\t\t\t  stmt->options,\n\t\t\t\t\t\t\t  &publish_via_partition_root_given,\n\tif (!pubform->puballtables && publish_via_partition_root_given &&", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t{\n\t\t\t\t\tif (po->align)\n\t\t\t\t\t\t\t\t\"%-*s%s %s\\n\",\n\tchar\t   *border = NULL;", "partial_line": "tot += fs_l", "completion": "tot += fs_len * 2 + 2; <|endoftext|>"}
{"context": "\t\t\t\taction->commandType == CMD_UPDATE)\n\t\t\t{\n\t\t\t\t{\n\t\t\t{\n\t\t\t\t\t\t\t errdetail_internal(\"%s\", _(auto_update_detail))));", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tpg_fatal(\"Expected null result, got %s\", PQresStatus(PQresultStatus(res)));\n\tif (PQsendQueryParams(conn, \"SELECT 1; SELECT 2\", 0, NULL, NULL, NULL, NULL, 0) != 1)\n\t\tpg_fatal(\"failed to send query: %s\", PQerrorMessage(conn));\n\t\tpg_fatal(\"got NULL result\");\n\t\tpg_fatal(\"Unexpected result code %s from pipeline sync\",", "partial_line": "pg_fatal(\"f", "completion": "pg_fatal(\"failed to send query: %s\", PQerrorMessage(conn)); <|endoftext|>"}
{"context": "\t\t\t\t\t*locations = rlocations;\n\t\t\t\t\t\t\t\t\t\t\t\t\t0, 0,\n\t\tcase OP_AND:\n\tTSQuery\t\tquery = PG_GETARG_TSQUERY(1);\n\tif (!query->size)", "partial_line": "PG_RETURN_BOO", "completion": "PG_RETURN_BOOL(result); <|endoftext|>"}
{"context": "{\n\tListCell   *lc;\n\t\t\treturn ancestor;\n\t\t wtscan->wtParam);\n{", "partial_line": "deparse_nam", "completion": "deparse_namespace *save_dpns) <|endoftext|>"}
{"context": "\t\t\t\t\t   itfits ? \"\" : \"...\",\nvoid\n}\n\treport_status(PG_REPORT, \"ok\");\nget_user_info(char **user_name_p)", "partial_line": "user_name = ge", "completion": "user_name = get_user_name(&errstr); <|endoftext|>"}
{"context": "\tint\t\t\tc;\n\tconst char *filename = NULL;\n\tRestoreOptions *ropt;\n\tArchive    *fout;\t\t\t\n\tconst char *dumpencoding = NULL;", "partial_line": "ArchiveFormat ar", "completion": "ArchiveFormat archiveFormat = archUnknown; <|endoftext|>"}
{"context": "\t\tbool\t\tvm_page_frozen = false;\n\t\t\tlazy_check_wraparound_failsafe(vacrel);\n\t\t\tlazy_vacuum(vacrel);\n\t\t\tFreeSpaceMapVacuumRange(vacrel->rel, next_fsm_block_to_vacuum,\n\t\tupdate_vacuum_error_info(vacrel, NULL, VACUUM_ERRCB_PHASE_SCAN_HEAP,", "partial_line": "if (lazy_scan_new_or_empty(vacrel, buf, bl", "completion": "if (lazy_scan_new_or_empty(vacrel, buf, blkno, page, !got_cleanup_lock, <|endoftext|>"}
{"context": "\t{\n\t\t\treturn result;\n\t\t}\n\t}\n\tif (IsA(node, GroupingFunc))", "partial_line": "Node\t   *e", "completion": "Node\t   *expr = lfirst(lc); <|endoftext|>"}
{"context": "\tint\t\t\ti;\n\tint\t\t\ti_amtype;\n\tif (fout->remoteVersion < 90600)\n\ti_amtype = PQfnumber(res, \"amtype\");\ngetOpclasses(Archive *fout)", "partial_line": "\"op", "completion": "\"opcnamespace, \" <|endoftext|>"}
{"context": "\t}\n\tif (check_functions_in_node(node, contain_volatile_functions_checker,\n\tif (IsA(node, NextValueExpr))\n\tif (IsA(node, RestrictInfo))\n\t\tif (rinfo->has_volatile == VOLATILITY_NOVOLATILE)", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\t\tPartitionRangeBound *inner_lb,\n{\n\t\t\t\t\t\t\t\touter_lb, inner_lb) == lb_cmpval);\n\tswitch (jointype)\n\t\t\t*merged_lb = (lb_cmpval < 0) ? *outer_lb : *inner_lb;", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "{\n#line 23 \"define.pgc\"\n\t{ ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"insert into Test ( name , amount , letter ) values ( 'false' , 1 , 'f' )\", ECPGt_EOIT, ECPGt_EORT);\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ", "partial_line": "if (sqlca.sqlcode", "completion": "if (sqlca.sqlcode < 0) sqlprint();} <|endoftext|>"}
{"context": "\telse if (sjinfo == NULL)\n\t{\n\t\t\t\t   JoinType jointype,\n{\n\treturn clause_selectivity_ext(root, clause, varRelid,", "partial_line": "SpecialJo", "completion": "SpecialJoinInfo *sjinfo, <|endoftext|>"}
{"context": "\t\t\tint\t\t\ti;\n\t\t\trootpg.page = PageGetTempPageCopySpecial(BufferGetPage(rootpg.buffer));\n\t\t\t\tdownlinks[i++] = ptr->itup;\n\t\t\trootpg.block.blkno = GIST_ROOT_BLKNO;\n\t\t{", "partial_line": "GISTPageSplitInfo *si = palloc(siz", "completion": "GISTPageSplitInfo *si = palloc(sizeof(GISTPageSplitInfo)); <|endoftext|>"}
{"context": "static int\tarray_slice_size(char *arraydataptr, bits8 *arraynullsptr,\nstatic void array_insert_slice(ArrayType *destArray, ArrayType *origArray,\n\t\t\t\t\t\t\t\t\t\t bool remove, Oid collation,\nstatic int\twidth_bucket_array_variable(Datum operand,\n\tNode\t   *escontext = fcinfo->context;", "partial_line": "char\t\tt", "completion": "char\t\ttypdelim; <|endoftext|>"}
{"context": "\t\t}\n\tstrip_var(result);\nstatic void\n\tint\t\t\tres_weight;\n#define PRODSUM1(v1,i1,v2,i2) ((v1)[(i1)] * (v2)[(i2)])", "partial_line": "#define PRODSUM3(v1,i1,v", "completion": "#define PRODSUM3(v1,i1,v2,i2) (PRODSUM2(v1,i1,v2,i2) + (v1)[(i1)+2] * (v2)[(i2)-2]) <|endoftext|>"}
{"context": "{\n\treturn float8_mi(size_box(&unionbox), size_box(original));\n\tStrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);\n\tbool\t   *recheck = (bool *) PG_GETARG_POINTER(4);\n\t\t\t\t\t\t\t\t\t\t\t\t strategy));", "partial_line": "b->l", "completion": "b->low.x = addon->low.x; <|endoftext|>"}
{"context": "\tOid\t\t\topfID;\n\treturn opfID;\n\t\telse\n\telse\n\t{", "partial_line": "Oid namespa", "completion": "Oid namespaceoid, Oid amoid) <|endoftext|>"}
{"context": "\t\t\t\t\t\tformat_type_be(aggTransType))));\n\ttup = SearchSysCache1(PROCOID, ObjectIdGetDatum(transfn));\n\t}\n\tif (aggmtransfnName)\n\t\t\t\t\t\t\t\t\t   fnArgs, variadicArgType,", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tAssert(TransactionIdIsValid(detached_xmin));\n\t\t\tMemoryContextSetParent(rel->rd_pdcxt, new_pdcxt);\n\t}\n\tMemoryContext oldcontext = MemoryContextSwitchTo(mcxt);\n\tPartitionDirectory pdir;", "partial_line": "HASHCTL", "completion": "HASHCTL\t\tctl; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t   conffeqop,\n\t\t\tfkconstraint->fk_matchtype = conform->confmatchtype;\n\t\t\tfkconstraint->fk_upd_action = conform->confupdtype;\n\t\t\tfkconstraint->old_conpfeqop = NIL;\n\t\t\t\tfkconstraint->fk_attrs = lappend(fkconstraint->fk_attrs,", "partial_line": "makeString(NameStr(at", "completion": "makeString(NameStr(att->attname))); <|endoftext|>"}
{"context": "\tbool\t\tallow_hash;\n\tif (parse->groupClause || parse->groupingSets || parse->hasAggs ||\n\t{\n\t\tnumDistinctRows = estimate_num_groups(root, distinctExprs,\n\t\tListCell   *lc;", "partial_line": "list_leng", "completion": "list_length(root->sort_pathkeys)) <|endoftext|>"}
{"context": "{\n\touter_relid = -1;\n\t\t\t\t\t\t\t\t\t\t\t\t outer_relid,\n\t{\n\t\t\t\t\t\t\t\t\t\t  sjinfo->semi_rhs_exprs,", "partial_line": "if (", "completion": "if (rowcount > nunique) <|endoftext|>"}
{"context": "\tinp_sqlda->sqlvar[0].sqltype = ECPGt_int;\n\tdump_sqlda(outp_sqlda);\nif (sqlca.sqlcode < 0) exit (1);}\n\tfree(outp_sqlda);\n\tmemset(inp_sqlda, 0, sizeof(sqlda_t));", "partial_line": "inp_sqld", "completion": "inp_sqlda->sqln = 1; <|endoftext|>"}
{"context": "ExecMergeJoin(PlanState *pstate)\n\tTupleTableSlot *innerTupleSlot;\n\tinnerPlan = innerPlanState(node);\n\tdoFillInner = node->mj_FillInner;\n\t\t\t\t\t\t}", "partial_line": "if (doFi", "completion": "if (doFillInner) <|endoftext|>"}
{"context": "\t}\n\t\t{\n\t\tcontext->min_sublevels_up++;\n\t\t\t\t\t\t\t\t   context,\n\t\t\t\t\t\t\t\t   QTW_EXAMINE_RTES_BEFORE);", "partial_line": "return expression_tree_", "completion": "return expression_tree_walker(node, IncrementVarSublevelsUp_walker, context); <|endoftext|>"}
{"context": "{ 2, s_6_114, -1, 1, 0},\n{ 3, s_6_118, -1, 1, 0},\nstatic const symbol s_7_0[1] = { 'a' };\n{ 1, s_7_0, -1, 1, 0},\n{ 1, s_7_4, -1, 1, 0},", "partial_line": "static const", "completion": "static const symbol s_8_3[1] = { 0xEA }; <|endoftext|>"}
{"context": "\t\t\t\t\t\t-1,\n\t\tif (ind_p != NULL && ind_p != &struct_no_indicator)\n\t\tECPGfree_type(p->type);\n\t\t\t\tswitch (type->u.element->type)\n\t\t\t\t\t\tbase_yyerror(\"internal error: found multidimensional array\\n\");", "partial_line": "ECPGfree_type(type", "completion": "ECPGfree_type(type->u.element); <|endoftext|>"}
{"context": "\t}\n\tforeach(lc, sub_final_rel->pathlist)\n\t\t\t\t\t\t\t\t\t\t  pathkeys, required_outer));\n\t\t\t\t\t\t\t\t\t\t\t\t\t  pathkeys,\n\tif (rte->funcordinality)", "partial_line": "Var\t\t   *node = (Var *)", "completion": "Var\t\t   *node = (Var *) lfirst(lc); <|endoftext|>"}
{"context": "\t\t\t\tpg_fatal(\"%s\", err_msg);\n\t\t\tvalues = pg_malloc0((argcount + 1) * sizeof(*values));\n\t\t{\n\t\t\tvalues[i] = pghost;\n\t\tif (pgport)", "partial_line": "keywords[i] =", "completion": "keywords[i] = \"dbname\"; <|endoftext|>"}
{"context": "\t\tif (file_exists_in_directory(subdirdbpath, dbfilename))\n\t\t{\n\t\t\t\tPQfinish(test_conn);\n\t\t\t\topts->cparams.dbname = connected_db;\n\tif (pfile == NULL)", "partial_line": "if (out", "completion": "if (outfile) <|endoftext|>"}
{"context": "\t\t\t subpath->startup_cost, subpath->total_cost,\n\t\t\t\t\t\t AggStrategy aggstrategy,\n\tPathTarget *target = rel->reltarget;\n\tpathnode->path.pathtype = T_Agg;\n\tpathnode->path.parent = rel;", "partial_line": "pathnode->path.parallel_safe = rel->con", "completion": "pathnode->path.parallel_safe = rel->consider_parallel && <|endoftext|>"}
{"context": "\tOid\t\t\ttypelem = PG_GETARG_OID(1);\n\tNode\t   *escontext = fcinfo->context;\n\tchar\t   *field[MAXDATEFIELDS];\n\tDateTimeErrorExtra extra;\n\t\t\tresult = SetEpochTimestamp();", "partial_line": "ca", "completion": "case DTK_LATE: <|endoftext|>"}
{"context": "void\n{\nint\n\tstruct colormap *cm;\n\tassert(regex != NULL && regex->re_magic == REMAGIC);", "partial_line": "return t", "completion": "return true; <|endoftext|>"}
{"context": "\t*op->resnull = false;\n\t\t(op->d.var.varreturningtype == VAR_RETURNING_NEW &&\n\tif (unlikely(*op->resnull))\n\t\telog(ERROR, \"failed to fetch attribute from slot\");\n\tpergroup->transValueIsNull = false;", "partial_line": "Datum oldValue, bool oldV", "completion": "Datum oldValue, bool oldValueIsNull) <|endoftext|>"}
{"context": "\t\tcase IS_XMLPARSE:\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\t\txmltype    *data;\n\t\t\t\tAssert(list_length(xexpr->args) == 3);", "partial_line": "Asse", "completion": "Assert(!argnull[2]); <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\t\t   PVC_RECURSE_WINDOWFUNCS |\n\treturn restrictinfo;\n{\n\t\t\t\t\t\t\t\t\t false, ", "partial_line": "N", "completion": "NULL, <|endoftext|>"}
{"context": "\t}\nmergeins(struct nfa *nfa,\n{\n\t\t\tcase -1:\n\t\t{", "partial_line": "createarc(nfa, a->type, a", "completion": "createarc(nfa, a->type, a->co, a->from, s); <|endoftext|>"}
{"context": "\t\tconst uint32 c = (output % 100) << 1;\n\t\t{\n\t\tindex = olength + exp;\n\treturn index;\n}", "partial_line": "while ((outp", "completion": "while ((output & 1) == 0) <|endoftext|>"}
{"context": "\t\tdump_expr(stmt->expr);\n\t\tdump_expr(stmt->dynquery);\n\t\tprintf(\"\\n\");\n\t\t}\n\tif (stmt->message)", "partial_line": "printf(", "completion": "printf(\"\\n\"); <|endoftext|>"}
{"context": "\tchar\t   *funcname;\n\tList\t   *inParameterNames_list = NIL;\n\tList\t   *as_clause;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&funcname);\n\t\t\t\t\t\t\t\tstmt->is_procedure,", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tstrcmp(recoveryRestoreCommand, \"\") == 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Int32GetDatum(-1)));\n\t\trecoveryTargetTLI = findNewestTimeLine(recoveryTargetTLI);\nread_backup_label(XLogRecPtr *checkPointLoc, TimeLineID *backupLabelTLI,\n\tchar\t\tstartxlogfilename[MAXFNAMELEN];", "partial_line": "char\t\tbackuptim", "completion": "char\t\tbackuptime[128]; <|endoftext|>"}
{"context": "#define HEAPBLK_TO_MAPBYTE(x) (((x) % HEAPBLOCKS_PER_PAGE) / HEAPBLOCKS_PER_BYTE)\n#define HEAPBLK_TO_OFFSET(x) (((x) % HEAPBLOCKS_PER_BYTE) * BITS_PER_HEAPBLOCK)\n#define VISIBLE_MASK8\t(0x55)\t\n\tint\t\t\tmapByte = HEAPBLK_TO_MAPBYTE(heapBlk);\n\tAssert(flags != VISIBILITYMAP_ALL_VISIBLE);", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "            break;\n            {   int ret = slice_from_s(z, 5, s_24);\n            break;\n            {   int ret = slice_from_s(z, 4, s_25);\n            }", "partial_line": "case", "completion": "case 17: <|endoftext|>"}
{"context": "#include \"executor/executor.h\"\n#include \"executor/nodeCtescan.h\"\n#include \"executor/nodeGatherMerge.h\"", "partial_line": "#include \"executor/nodeI", "completion": "#include \"executor/nodeIncrementalSort.h\" <|endoftext|>"}
{"context": "\telse\n\t\tmemcpy(nitup, itup, origsize);\n\t\tnitup->t_info |= origsize;\n\t\tmemcpy(nitup, itup, IndexTupleSize(itup));\n\treturn (IndexTuple) PageGetItem(page, PageGetItemId(page, maxoff));", "partial_line": "static", "completion": "static bool <|endoftext|>"}
{"context": "#include \"port/pg_bswap.h\"\n#define GSS_REQUIRED_FLAGS GSS_C_MUTUAL_FLAG | GSS_C_REPLAY_FLAG | \\\n\tGSS_C_SEQUENCE_FLAG | GSS_C_CONF_FLAG | GSS_C_INTEG_FLAG", "partial_line": "#define", "completion": "#define PQ_GSS_RECV_BUFFER_SIZE 16384 <|endoftext|>"}
{"context": "\t\tpg_fatal(\"expected 30002, got %d\", protocol_version);\n\tprotocol_version = PQfullProtocolVersion(conn);\nnotice_processor(void *arg, const char *message)\n\tfprintf(stderr, \"\\npipeline idle...\\n\");\n\tres = PQgetResult(conn);", "partial_line": "if (PQ", "completion": "if (PQexitPipelineMode(conn) == 1) <|endoftext|>"}
{"context": "    }\n\tECPGt_varchar,&(custs2->name),(long)50,(long)10,sizeof( customer2 ), \n#line 64 \"array_of_struct.pgc\"\n#line 64 \"array_of_struct.pgc\"\n\t    printf( \"name  - %s\\n\", custs2[r].name.arr );", "partial_line": "ECPGt_int,&(cu", "completion": "ECPGt_int,&(custs3->phone),(long)1,(long)10,sizeof( struct customer3 ), <|endoftext|>"}
{"context": "}\nvoid\n\t\toldext = getExtensionOfObject(object->classId, object->objectId);\ndeleteDependencyRecordsFor(Oid classId, Oid objectId,\n\tdepRel = table_open(DependRelationId, RowExclusiveLock);", "partial_line": "ScanKe", "completion": "ScanKeyInit(&key[0], <|endoftext|>"}
{"context": "\t\telse\n\t\t\t\t\t\t\t\t\t  HASH_ELEM | HASH_STRINGS | HASH_CONTEXT);\n\t}\n\t\tchar\t   *oldname = colinfo->new_colnames[i];\n\tif (colinfo->names_hash)", "partial_line": "nam", "completion": "name, <|endoftext|>"}
{"context": "\t\tresult = query_tree_walker((Query *) node, pull_vars_walker,\n\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t   0);\n\tif (IsA(node, Var))\n\t{", "partial_line": "result = query_t", "completion": "result = query_tree_walker((Query *) node, <|endoftext|>"}
{"context": "\t\tvalid = pgStatLocal.snapshot.custom_valid;\n\t\tvalid[idx] = false;\n\t\tpgStatPendingContext =\n\treturn entry_ref;\npgstat_fetch_pending_entry(PgStat_Kind kind, Oid dboid, uint64 objid)", "partial_line": "entry_ref = pgstat_get_entry_ref(kind,", "completion": "entry_ref = pgstat_get_entry_ref(kind, dboid, objid, false, NULL); <|endoftext|>"}
{"context": "#include \"lib/stringinfo.h\"\n#include \"utils/formatting.h\"\n\t\t\t\t\t\t\t\t\t struct Node *escontext,\n{", "partial_line": "int\t\t\tlen", "completion": "int\t\t\tlen = strlen(in); <|endoftext|>"}
{"context": "\t\topfinfo[i].dobj.name = pg_strdup(PQgetvalue(res, i, i_opfname));\n\tDumpOptions *dopt = fout->dopt;\n\tint\t\t\ti;\n\tint\t\t\ti_acldefault;\n\t\t\t\t\t\t  \"p.pronamespace AS aggnamespace, \"", "partial_line": "\"p.p", "completion": "\"p.proacl AS aggacl, \" <|endoftext|>"}
{"context": "\t\t\t   \"\\nWARNING:  new data directory should not be inside the old data directory, i.e. %s\", old_cluster_pgdata);\n\t\tchar\t\told_tablespace_dir[MAXPGPATH];\n\t\tcanonicalize_path(old_tablespace_dir);\n\t\t\tpg_free(*deletion_script_file_name);\n\tprep_status(\"Creating script to delete old cluster\");", "partial_line": "fprintf(s", "completion": "fprintf(script, \"#!/bin/sh\\n\\n\"); <|endoftext|>"}
{"context": "\t\t\telse if (relation->rd_isnailed)\n\t\t}\n\tforeach(l, rebuildList)\n\t\trelation = (Relation) lfirst(l);\n\t\t\tin_progress_list[i].invalidated = true;", "partial_line": "EOXactTupleDescArray = (Tu", "completion": "EOXactTupleDescArray = (TupleDesc *) repalloc(EOXactTupleDescArray, <|endoftext|>"}
{"context": "\t\telse if (*pattern != '.' && *str != *pattern)\n\treturn false;\n}\n\t\tif (errno == ENOENT)\n\t\tfile_type = strchr(buf, ':');", "partial_line": "if (!plat", "completion": "if (!platform) <|endoftext|>"}
{"context": "\tfflush(stdout);\n\tfor (ops = 0; alarm_triggered == false; ops++)\n\t{\n\tSTOP_TIMER;\n\t\tprintf(NA_FORMAT, _(\"n/a*\"));", "partial_line": "fs_", "completion": "fs_warning = true; <|endoftext|>"}
{"context": "#include \"access/heapam_xlog.h\"\n#include \"access/transam.h\"\n#include \"storage/proc.h\"\n#include \"storage/standby.h\"\n#include \"utils/snapmgr.h\"", "partial_line": "static Reso", "completion": "static ResourceOwner SavedResourceOwnerDuringExport = NULL; <|endoftext|>"}
{"context": "\t\tin_progress_list = repalloc(in_progress_list,\n\tin_progress_list[in_progress_offset] = type_id;\n\t\ttp = SearchSysCache1(TYPEOID, ObjectIdGetDatum(type_id));\n\t\t\t\t\t\t\tNameStr(typtup->typname))));\n\t\ttypentry->type_id_hash = get_hash_value(TypeCacheHash, &type_id);", "partial_line": "typentry->typalign = typtu", "completion": "typentry->typalign = typtup->typalign; <|endoftext|>"}
{"context": "\t\t.shared_data_off = offsetof(PgStatShared_ReplSlot, stats),\n\t\t.shared_size = sizeof(PgStatShared_Subscription),\n\t\t.name = \"archiver\",\n\t\t.shared_data_off = offsetof(PgStatShared_Archiver, stats),\n\t\t.init_shmem_cb = pgstat_archiver_init_shmem_cb,", "partial_line": ".shared_dat", "completion": ".shared_data_off = offsetof(PgStatShared_BgWriter, stats), <|endoftext|>"}
{"context": "\tECPGt_char,(text),(long)25,(long)1,(25)*sizeof(char), \n#line 80 \"array.pgc\"\n\tf=140787;\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, \n\tECPGt_timestamp,&(ts),(long)1,(long)10,sizeof(timestamp), ", "partial_line": "#line 102 \"a", "completion": "#line 102 \"array.pgc\" <|endoftext|>"}
{"context": "}\nrlocator_comparator(const void *p1, const void *p2)\n\t\treturn 1;\n\telse\n\tAssert(!BufferIsLocal(BufferDescriptorGetBuffer(desc)));", "partial_line": "init_local", "completion": "init_local_spin_delay(&delayStatus); <|endoftext|>"}
{"context": "\tAttrNumber *cleanMap;\n\t\t\tfor (;;)\n\treturn junkfilter;\n{\n\tbool\t   *old_isnull;", "partial_line": "cleanTupType = junkfilter", "completion": "cleanTupType = junkfilter->jf_cleanTupType; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t winstate->framehead_slot))\n\t\t{\n\t\t\tif (frameOptions & FRAMEOPTION_START_OFFSET_PRECEDING)", "partial_line": "minheadgroup = winstate->cur", "completion": "minheadgroup = winstate->currentgroup + offset; <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t}\n\tif (firstdigit1 <= firstdigit2)\n\trscale = NUMERIC_MIN_SIG_DIGITS - qweight * DEC_DIGITS;\n\treturn rscale;", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "\tvoid\t   *handle;\n{\n\t\t\"winsock.dll\", 0, 0\n\t},\n};", "partial_line": "if (dlls[i].dll_name", "completion": "if (dlls[i].dll_name && !dlls[i].handle) <|endoftext|>"}
{"context": "\t.excludensp = false,\n\t.startblock = -1,\n\t.parent_check = false,\n\t.no_btree_expansion = false\nstatic bool progress_since_last_stderr = false;", "partial_line": "} Database", "completion": "} DatabaseInfo; <|endoftext|>"}
{"context": "\t}\n}\n\t\t\t\t\t\tdsa_pointer *bucket)\n\tdshash_table_item *item;\n\t\t\t\t\t\t\t\thash_table->params.entry_size +", "partial_line": "sta", "completion": "static bool <|endoftext|>"}
{"context": "  printf(\"Var: Search path: %s\\n\", var);\n#line 22 \"show.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"set standard_conforming_strings to off\", ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) sqlprint();}", "partial_line": "#line 26 \"s", "completion": "#line 26 \"show.pgc\" <|endoftext|>"}
{"context": "\t\t}\n\t{\n\t\tvar->sign = NUMERIC_POS;\n\tdo\n\tchar\t   *endptr;", "partial_line": "return", "completion": "return val; <|endoftext|>"}
{"context": "static const symbol s_2_630[3] = { 'o', 's', 'e' };\nstatic const symbol s_2_632[8] = { 'i', 's', 't', 'a', 'd', 'o', 's', 'e' };\nstatic const symbol s_2_644[5] = { 'u', 'v', 'a', 't', 'e' };\nstatic const symbol s_2_645[6] = { 'a', 0xC4, 0x8D, 'a', 't', 'e' };\nstatic const symbol s_2_668[8] = { 'a', 's', 't', 'a', 'n', 'i', 't', 'e' };", "partial_line": "static const symbol s", "completion": "static const symbol s_2_683[7] = { 'i', 's', 't', 'a', 'j', 't', 'e' }; <|endoftext|>"}
{"context": "\t\tas->d.jump.jumpdone = state->steps_len;\n\tjsestate->escontext.type = T_ErrorSaveContext;\n\t\tFmgrInfo   *finfo;\n\t\tfmgr_info(typinput, finfo);\n\tjsestate->jump_empty = jsestate->jump_error = -1;", "partial_line": "jsestate->jump_error = state", "completion": "jsestate->jump_error = state->steps_len; <|endoftext|>"}
{"context": "\tHeapTuple\ttup;\n\t\tLargeObjectMetadataRelationId : classId;\n\t\tPG_RETURN_NULL();\n\t\ttup = SearchSysCacheCopyAttNum(objectId, attnum);\n\t\t\tPG_RETURN_NULL();", "partial_line": "rel = table_open(catalogId,", "completion": "rel = table_open(catalogId, AccessShareLock); <|endoftext|>"}
{"context": "#line 22 \"show.pgc\"\n  { ECPGdo(__LINE__, 0, 1, NULL, 0, ECPGst_normal, \"set standard_conforming_strings to off\", ECPGt_EOIT, ECPGt_EORT);\nif (sqlca.sqlwarn[0] == 'W') sqlprint();\nif (sqlca.sqlcode < 0) sqlprint();}\n#line 26 \"show.pgc\"", "partial_line": "#line 27 \"sho", "completion": "#line 27 \"show.pgc\" <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t buf))\n\t\t\tcase HEAPTUPLE_DEAD:\n\t\t\tcase HEAPTUPLE_INSERT_IN_PROGRESS:\n\t{\n\t\tif (lpdead_items > 0)", "partial_line": "else if (lpdead_it", "completion": "else if (lpdead_items > 0) <|endoftext|>"}
{"context": "\t\t}\n\t\toverall_length += ptr - dims_str;\n\t\tfor (i = j; i < ndim - 1; i++)\n\t\tif (needquotes[k])\n\t\t\t\t*p++ = ch;", "partial_line": "pfree(v", "completion": "pfree(values[k++]); <|endoftext|>"}
{"context": "\t\tresult->choice.n_long.n_weight = weight;\n\t\tmemcpy(NUMERIC_DIGITS(result), digits, n * sizeof(NumericDigit));\n\t\tif (have_error)\n\t\t\t*have_error = true;\n\t\telse", "partial_line": "errmsg(\"", "completion": "errmsg(\"value overflows numeric format\"))); <|endoftext|>"}
{"context": "static const symbol s_3_13[5] = { 'a', 't', 'i', 'o', 'n' };\nstatic const symbol s_3_16[4] = { 'a', 't', 'o', 'r' };\nstatic const symbol s_3_18[7] = { 'f', 'u', 'l', 'n', 'e', 's', 's' };\nstatic const symbol s_3_19[7] = { 'o', 'u', 's', 'n', 'e', 's', 's' };\n{ 4, s_3_0, -1, 3, 0},", "partial_line": "{ 5, s", "completion": "{ 5, s_3_9, -1, 12, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  TableScanDesc scan)\n\tbool\t\tisnull[INDEX_MAX_KEYS];\n\tTransactionId OldestXmin;\n\tchecking_uniqueness = (indexInfo->ii_Unique ||\n\tslot = table_slot_create(heapRelation, NULL);", "partial_line": "predicate =", "completion": "predicate = ExecPrepareQual(indexInfo->ii_Predicate, estate); <|endoftext|>"}
{"context": "\tbytea\t   *in = PG_GETARG_BYTEA_PP(0);\n\t\t\t\t(errcode(ERRCODE_INTERNAL_ERROR),\n}\n\tsize_t\t\tlen;\n\t\t\ttypestr = \"SHA384\";", "partial_line": "case", "completion": "case PG_MD5: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  \"SELECT n.nspname\\n\"\n\t\t\t\tif (!addFooterToPublicationDesc(&buf, _(\"Tables from schemas:\"),\n\tPQclear(res);\n\tfalse};\n\t\t\t\t\t  \",  pg_catalog.pg_get_userbyid(subowner) AS \\\"%s\\\"\\n\"", "partial_line": "\",  subenable", "completion": "\",  subenabled AS \\\"%s\\\"\\n\" <|endoftext|>"}
{"context": "\t\tdlist_delete_from(&slab->blocklist[newBlocklistIdx], &block->node);\n\t\t}\nSlabRealloc(void *pointer, Size size, int flags)\nMemoryContext\n\tVALGRIND_MAKE_MEM_DEFINED(chunk, Slab_CHUNKHDRSZ);", "partial_line": "block = MemoryChunkGetBl", "completion": "block = MemoryChunkGetBlock(chunk); <|endoftext|>"}
{"context": "\t\tsyncing_slots = false;\n}\n{\n\t\tsleep_ms = Min(sleep_ms * 2, MAX_SLOTSYNC_WORKER_NAPTIME_MS);\n\trc = WaitLatch(MyLatch,", "partial_line": "WAIT_EVENT_REPLICAT", "completion": "WAIT_EVENT_REPLICATION_SLOTSYNC_MAIN); <|endoftext|>"}
{"context": "\t\t\tmystreamer->bytes_written = 0;\n\t\t}\n\t\t\t\t\t  mystreamer->base.bbs_buffer.data,\n\t\t\t\t\t  mystreamer->base.bbs_buffer.maxlen,\n{", "partial_line": "stati", "completion": "static void <|endoftext|>"}
{"context": "}\nint\n\tres->attDescs = (PGresAttDesc *)\n\t\t\tres->attDescs[i].name = res->null_field;\nPQcopyResult(const PGresult *src, int flags)", "partial_line": "dest = PQm", "completion": "dest = PQmakeEmptyPGresult(NULL, PGRES_TUPLES_OK); <|endoftext|>"}
{"context": "#include \"c.h\"\nint\t\t\tpg_file_create_mode = PG_FILE_MODE_OWNER;", "partial_line": "int\t\t\tpg", "completion": "int\t\t\tpg_mode_mask = PG_MODE_MASK_OWNER; <|endoftext|>"}
{"context": "\t\tConditionVariableCancelSleep();\n}\n\t\treturn false;\t\t\t\n\tif (AmCheckpointerProcess())\n\t\tLWLockRelease(CheckpointerCommLock);", "partial_line": "request-", "completion": "request->ftag = *ftag; <|endoftext|>"}
{"context": "\telse\n\t\t\t\t\t\t\t\t 1000.0 * INSTR_TIME_GET_DOUBLE(metrics->timeSpent),\n\tExplainCloseGroup(\"Serialization\", \"Serialization\", true, es);\n\tif (str && str[0] != '\\0')\nstatic void", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "#endif\n\tGeqoPrivateData private;\n#if defined (ERX)\n\tkid = alloc_chromo(root, pool->string_length);", "partial_line": "city_table", "completion": "city_table = alloc_city_table(root, pool->string_length); <|endoftext|>"}
{"context": "\t\t\t\tdecomp_success = false;\n#else\n\t\t\t\tdecomp_success = false;\n\t\t\t\t\t\t\t\t  LSN_FORMAT_ARGS(record->ReadRecPtr),\n\t\tif (!decomp_success)", "partial_line": "return t", "completion": "return true; <|endoftext|>"}
{"context": "\t\tLLVMBuildCondBr(b,\n\t\t\tv_nullbyteno = l_int32_const(lc, attnum >> 3);\n\t\t\tv_nullbit = LLVMBuildICmp(b,\n\t\t\t\t\t\t\t\t\t  LLVMIntEQ,\n\t\t\t\t\t\t\t\t\t  l_int8_const(lc, 0),", "partial_line": "LLVMBuildS", "completion": "LLVMBuildStore(b, <|endoftext|>"}
{"context": "                    }\n                break;\n    lab4:\n    return 1;\nextern int german_UTF_8_stem(struct SN_env * z) {", "partial_line": "{   i", "completion": "{   int c1 = z->c; <|endoftext|>"}
{"context": "\t\tcase T_FetchStmt:\n\t\tcase T_VariableSetStmt:\n\t\tcase T_VacuumStmt:\n\t\t\t{\n\t\t\t\tCopyStmt   *stmt = (CopyStmt *) parsetree;", "partial_line": "case", "completion": "case T_LockStmt: <|endoftext|>"}
{"context": "\tSize\t\tchunk_size;\n\tSize\t\trequired_size;\n\tchunk_size = MAXALIGN(size + 1);\n#endif\n\tblock->nchunks = 1;", "partial_line": "MemoryChunkSetHdrMaskExternal(chunk, MC", "completion": "MemoryChunkSetHdrMaskExternal(chunk, MCTX_GENERATION_ID); <|endoftext|>"}
{"context": "#line 41 \"oldexec.pgc\"\n\tprintf(\"Inserted %ld tuples via prepared execute\\n\", sqlca.sqlerrd[2]);\n\t{ ECPGdo(__LINE__, 0, 1, NULL, 1, ECPGst_normal, \"fetch 8 in CUR\", ECPGt_EOIT, \n\tECPGt_char,(letter),(long)1,(long)8,(1)*sizeof(char), \n#line 54 \"oldexec.pgc\"", "partial_line": "for (i=0, j", "completion": "for (i=0, j=sqlca.sqlerrd[2]; i<j; i++) <|endoftext|>"}
{"context": "\tnamestrcpy(&name_name, collname);\n\toid = GetNewOidWithIndex(rel, CollationOidIndexId,\n\tvalues[Anum_pg_collation_collprovider - 1] = CharGetDatum(collprovider);\n\t\tvalues[Anum_pg_collation_collcollate - 1] = CStringGetTextDatum(collcollate);\n\tCatalogTupleInsert(rel, tup);", "partial_line": "referenced", "completion": "referenced.objectSubId = 0; <|endoftext|>"}
{"context": "\t}\n\tArrayType  *options;\n\t\t\t\tbreak;\n\t\t\tList\t   *names = NIL;\n\t\t\t\t{", "partial_line": "if (hba->a", "completion": "if (hba->addrlen > 0) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tAssert(!OidIsValid(collation)); \n\t\t\tbreak;\n\t\t\tbreak;\n\t\t\t((ArrayCoerceExpr *) expr)->resultcollid = collation;", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\tdata.ntuples = 0;\n\t\tif (metadata->head == InvalidBlockNumber ||\n\t\t\tseparateList = true;\n\t\t\tmetadata->head = sublist.head;\n\t\t\tmetadata->tail = sublist.tail;", "partial_line": "metadata->tai", "completion": "metadata->tailFreeSize = sublist.tailFreeSize; <|endoftext|>"}
{"context": "\twhile ((xlde = ReadDir(xldir, fromdir)) != NULL)\n\t\tif (strcmp(xlde->d_name, \".\") == 0 ||\n\t}\n\t\t\tcontinue;\n\tint\t\t\tdstfd;", "partial_line": "in", "completion": "int\t\t\tnbytes; <|endoftext|>"}
{"context": "\t\t\treturn false;\n\t\tcase PGBT_INT:\n\t\t\treturn false;\n\t{\n\t{", "partial_line": "pg_log_error(\"cannot coerce %s", "completion": "pg_log_error(\"cannot coerce %s to int\", valueTypeName(pval)); <|endoftext|>"}
{"context": "\tint\t\t\tresult;\n{\n\ttext\t   *arg2 = PG_GETARG_TEXT_PP(1);\n\tPG_FREE_IF_COPY(arg1, 0);\nDatum", "partial_line": "len1 = VARS", "completion": "len1 = VARSIZE_ANY_EXHDR(t1); <|endoftext|>"}
{"context": "            lab12:\n            break;\n                if (ret <= 0) return ret;\n        z->ket = z->c;\n        lab0:", "partial_line": "{   int", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\tlibpq_append_conn_error(conn, \"require_auth method \\\"%s\\\" is specified more than once\",\n\t\t\tfor (i = 0; i < lengthof(conn->allowed_sasl_mechs); i++)\n\t\t\t\t{\n\t\t\t\tconn->allowed_auth_methods |= sasl_bits;", "partial_line": "if (strcmp(conn->channel", "completion": "if (strcmp(conn->channel_binding, \"disable\") != 0 <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t   \"token endpoint \\\"%s\\\" must use HTTPS\",\n}\n\t}\n\tCHECK_SETOPT(actx, CURLOPT_COPYPOSTFIELDS, work_buffer->data, return false);", "partial_line": "return sta", "completion": "return start_request(actx); <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tnewexpr->nulltesttype = (expr->nulltesttype == IS_NULL ?\n\t\t\t\t\tcase IS_NOT_FALSE:\n\tList\t   *out_list = NIL;", "partial_line": "foreach(arg, o", "completion": "foreach(arg, orlist) <|endoftext|>"}
{"context": "}\nunicode_titlecase_simple(pg_wchar code)\n\treturn convert_case(dst, dstsize, src, srclen, CaseUpper, full, NULL,\n\t\t\t\t\t\tNULL);\nsize_t", "partial_line": "unicode_strfold", "completion": "unicode_strfold(char *dst, size_t dstsize, const char *src, ssize_t srclen, <|endoftext|>"}
{"context": "\t\t\tDatum\t\tvalues[Natts_pg_class] = {0};\n\t\t\tint\t\t\tnnewmembers;\n\t\t\tOid\t\t   *newmembers;\n\t\t\t\t\tobjtype = OBJECT_SEQUENCE;\n\t\t\tnewtuple = heap_modify_tuple(tuple, RelationGetDescr(relation),", "partial_line": "CatalogTupleUpdate(relation, &newt", "completion": "CatalogTupleUpdate(relation, &newtuple->t_self, newtuple); <|endoftext|>"}
{"context": "\t}\n\tint\t\t\ta = *((const int *) va);\n\tint\t\t\tb = *((const int *) vb);\n\tint\t\t\tblex_len = VARSIZE_ANY_EXHDR(b);\nstatic TSVector", "partial_line": "int indice", "completion": "int indices_count) <|endoftext|>"}
{"context": "\tns = tmp.tv_sec * NS_PER_S + tmp.tv_nsec;\ngenerate_uuidv7(uint64 unix_ts_ms, uint32 sub_ms)\n\tuuid->data[0] = (unsigned char) (unix_ts_ms >> 40);\n\tincreased_clock_precision = (sub_ms * (1 << SUBMS_BITS)) / NS_PER_MS;\n\t\t\t\t errmsg(\"could not generate random values\")));", "partial_line": "PG_RETURN_U", "completion": "PG_RETURN_UUID_P(uuid); <|endoftext|>"}
{"context": "SlabRealloc(void *pointer, Size size, int flags)\nMemoryContext\n\tVALGRIND_MAKE_MEM_DEFINED(chunk, Slab_CHUNKHDRSZ);\n\tblock = MemoryChunkGetBlock(chunk);\n}", "partial_line": "bool print", "completion": "bool print_to_stderr) <|endoftext|>"}
{"context": "\trte->relid = InvalidOid;\n\trte->subquery = NULL;\n\trefname = alias ? alias->aliasname :\n\t\t\t\t\t\t\t\t\t list_copy_tail(tf->colnames, numaliases));\n\t\t\t\t(errcode(ERRCODE_INVALID_COLUMN_REFERENCE),", "partial_line": "list_length(tf->", "completion": "list_length(tf->colnames), numaliases))); <|endoftext|>"}
{"context": "\t\t\t\tif (keyscmp != PATHKEYS_BETTER2)\n\t\t\t}\n\t\t\t{\n\t\t\t\tremove_old = true;\n\t\t\t}", "partial_line": "if", "completion": "if (remove_old) <|endoftext|>"}
{"context": "\tmwriter->still_checksumming = true;\n\tappendStringInfo(&mwriter->buf,\n\t\t\t\t\t uint64 size, time_t mtime,\n\t{\n\t\tmwriter->first_file = false;", "partial_line": "appendStringInfoSt", "completion": "appendStringInfoString(&mwriter->buf, \",\\n\"); <|endoftext|>"}
{"context": "\t\tvalues[Anum_pg_policy_polqual - 1] = CStringGetTextDatum(nodeToString(qual));\n\tmyself.classId = PolicyRelationId;\n\trecordDependencyOnExpr(&myself, qual, qual_pstate->p_rtable,\n\t\t\t\t\t\t   with_check_pstate->p_rtable, DEPENDENCY_NORMAL);\n\t{", "partial_line": "recordSharedDependenc", "completion": "recordSharedDependencyOn(&myself, &target, <|endoftext|>"}
{"context": "\tPG_RETURN_FLOAT8(result);\n}\n\telse if (isinf(arg1))\n\t{\n\t\t}", "partial_line": "float8", "completion": "float8\t\targ1 = PG_GETARG_FLOAT8(0); <|endoftext|>"}
{"context": "\t\treturn jtnode;\t\t\t\n\trvcontext.root = root;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  1,\t\n\trvcontext.target_rte = rte;\n\trvcontext.wrap_option = REPLACE_WRAP_NONE;", "partial_line": "if (parse->g", "completion": "if (parse->groupingSets) <|endoftext|>"}
{"context": "\tHeapTuple\ttup;\n\t\tif (get_typtype(base_typid) == TYPTYPE_COMPOSITE)\n\t\t\tcolumn->io.composite.base_typid = base_typid;\n\t\t{\n\t\t\tcolumn->typcat = TYPECAT_DOMAIN;", "partial_line": "column->io.domain.base_ty", "completion": "column->io.domain.base_typid = base_typid; <|endoftext|>"}
{"context": "\tPG_TRY();\n\t\t\tif (PyUnicode_Check(plrv))\n\t\t\t\tsrv = PLyUnicode_AsString(plrv);\n\t\t\telse if (pg_strcasecmp(srv, \"MODIFY\") == 0)\n\t\t\t{", "partial_line": "TRIGGER_", "completion": "TRIGGER_FIRED_BY_UPDATE(tdata->tg_event)) <|endoftext|>"}
{"context": "\t*offset = file->curOffset + file->pos;\n\treturn BufFileSeek(file,\n}\nBufFileAppend(BufFile *target, BufFile *source)\n\tAssert(source->readOnly);", "partial_line": "target->f", "completion": "target->files = (File *) <|endoftext|>"}
{"context": "\t\t}\n\trustate->tableContext = NULL;\n\trustate->intermediate_empty = true;\n\trustate->intermediate_table = tuplestore_begin_heap(false, false, work_mem);\n\t\t\tAllocSetContextCreate(CurrentMemoryContext,", "partial_line": "Assert(prmdata->exec", "completion": "Assert(prmdata->execPlan == NULL); <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH_QUERY_PLUS(Query_for_list_of_cursors,\n\t\t\t\t\t\t\t\t \"FROM\",\n\t\tCOMPLETE_WITH_QUERY(Query_for_list_of_cursors);\n\telse if (Matches(\"CREATE\", \"SERVER\", MatchAnyN, \"FOREIGN\", \"DATA\", \"WRAPPER\", MatchAny))\n\t\tCOMPLETE_WITH(\"OPTIONS\");", "partial_line": "!TailMatches(\"CREATE\"", "completion": "!TailMatches(\"CREATE\", MatchAny, MatchAny)) <|endoftext|>"}
{"context": "\tScanKeyInit(&skey[0],\n\t\t\t\t\t\tRelationGetRelationName(rel)),\n\ttable_close(tgrel, RowExclusiveLock);\n\tRelation\ttgrel;\n\ttgrel = table_open(TriggerRelationId, AccessShareLock);", "partial_line": "BTEqualStrategy", "completion": "BTEqualStrategyNumber, F_OIDEQ, <|endoftext|>"}
{"context": "\t\t\taddress.objectSubId = 0;\n\t\t\tbreak;\n\t\t\telog(ERROR, \"unrecognized object type: %d\", (int) objtype);\n\tObjectAddress address;\n\tListCell   *cell;", "partial_line": "switch (o", "completion": "switch (objtype) <|endoftext|>"}
{"context": "\t\tif (strcmp(option->keyword, keyword) == 0)\n\tPQconninfoOption *connOptions;\n\t\treturn NULL;\t\t\t\n\t\t\tchar\t  **connmember;\n\tfor (PQconninfoOption *option = connOptions; option->keyword != NULL; option++)", "partial_line": "ch", "completion": "char * <|endoftext|>"}
{"context": "\tmin_nitems = Min(nitems1, nitems2);\n\t\tbool\t\tisnull2;\n\t\t\tresult = 1;\n\t\tif (cmpresult == 0)\n\t\t{", "partial_line": "resu", "completion": "result = -1; <|endoftext|>"}
{"context": "\tif (bound_offset == partdesc->last_found_datum_index)\n\telse\nExecBuildSlotPartitionKeyDescription(Relation rel,\n{\n\tOid\t\t\trelid = RelationGetRelid(rel);", "partial_line": "getTypeOutputInfo(ge", "completion": "getTypeOutputInfo(get_partition_col_typid(key, i), <|endoftext|>"}
{"context": "            z->c = z->l - m4;\n                    if (ret < 0) return ret;\n                z->c = z->l - m5;\n            {   int m6 = z->l - z->c; (void)m6;\n            {   int m7 = z->l - z->c; (void)m7;", "partial_line": "{   int m8", "completion": "{   int m8 = z->l - z->c; (void)m8; <|endoftext|>"}
{"context": "\t\t\t}\n\t\telse\n\t\t}\n\t{\n\t\tgoto fail;", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "\t\tbool\t\ttypIsVarlena;\n\t\tgetTypeOutputInfo(valtype, &typOutput, &typIsVarlena);\n}\n\t\t\t\tFunctionCallInfo fcinfo)\n{", "partial_line": "Assert(OidIsValid(get_base_element_type(get_fn_expr_argtype(", "completion": "Assert(OidIsValid(get_base_element_type(get_fn_expr_argtype(fcinfo->flinfo, argidx)))); <|endoftext|>"}
{"context": "{ 5, s_2_321, -1, 57, 0},\n{ 5, s_2_322, -1, 58, 0},\n{ 9, s_2_344, 338, 29, 0},\n{ 5, s_2_345, -1, 79, 0},\n{ 7, s_2_350, 349, 49, 0},", "partial_line": "{ 7, s_", "completion": "{ 7, s_2_354, -1, 4, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\tentry->complete = true;\n\t\t\t\t\treturn NULL;\n\t\t\t{\n{\n\tint\t\t\ti;", "partial_line": "mstate->ms", "completion": "mstate->mstatus = MEMO_CACHE_LOOKUP; <|endoftext|>"}
{"context": "\t}\n\t\t\t(IsA(node, OpExpr) && ((OpExpr *) node)->opretset))\n\t\t\t\t(errcode(ERRCODE_WINDOWING_ERROR),\n\t\tcase EXPR_KIND_JOIN_ON:\n\t\tcase EXPR_KIND_FROM_SUBSELECT:", "partial_line": "err = _(\"window fun", "completion": "err = _(\"window functions are not allowed in functions in FROM\"); <|endoftext|>"}
{"context": "#line 46 \"prep.pgc\"\n#line 48 \"prep.pgc\"\nint main ()\n#line 63 \"prep.pgc\"\nif (sqlca.sqlcode < 0) sqlprint();}", "partial_line": "#line", "completion": "#line 66 \"prep.pgc\" <|endoftext|>"}
{"context": "\tMyProc->waitLSN = lsn;\n\tif (update_process_title)\n\t\t\tereport(WARNING,\n\t\tif (QueryCancelPending)\n\tqueue = &WalSndCtl->SyncRepQueue[mode];", "partial_line": "if (pro", "completion": "if (proc->waitLSN < MyProc->waitLSN) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  scalarVal->val.array.rawScalar);\n\t\t\t{\n\t\t\t}\n\t\t\tbreak;\n\t\t\tresult = &(*pstate)->contVal;", "partial_line": "(*pstate)-", "completion": "(*pstate)->contVal.type = jbvObject; <|endoftext|>"}
{"context": "\t}\n\t\treturn false;\n\tXLogSegNo\tinstalled_segno;\n\tint\t\t\tfd;\n\tinstr_time\tio_start;", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\treturn lex;\nsetJsonLexContextOwnsTokens(JsonLexContext *lex, bool owned_by_context)\n{\n\tif (lex->incremental && lex->inc_state->started)\n\t\tlex->flags &= ~JSONLEX_CTX_OWNS_TOKENS;", "partial_line": "char\t  **new_f", "completion": "char\t  **new_fnames; <|endoftext|>"}
{"context": "\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\t\t\t\tAnum_pg_description_classoid,\n\t\tCatalogTupleDelete(description, &oldtuple->t_self);\nDeleteSharedComments(Oid oid, Oid classoid)\n\twhile ((oldtuple = systable_getnext(sd)) != NULL)", "partial_line": "table_close(s", "completion": "table_close(shdescription, RowExclusiveLock); <|endoftext|>"}
{"context": "\t\t{\n\t\tif (!TupleDescAttr(desc, i)->attisdropped)\n\t\t\tcontinue;\n\t\t}\n\theap_freetuple(tuple);", "partial_line": "boo", "completion": "bool\t   *nulls; <|endoftext|>"}
{"context": "\ttimeouts[1].keep_indicator = true;\n\tif (!MyProc)\n\tLockReleaseAll(DEFAULT_LOCKMETHOD, !isCommit);\n}\n\t\t\tAssert(dlist_is_empty(&(MyProc->myProcLocks[i])));", "partial_line": "LWLoc", "completion": "LWLockReleaseAll(); <|endoftext|>"}
{"context": "\t\tplan->plan_rows =\n\t\tplan->parallel_aware = false;\n\t\tsubindexquals = NIL;\n\t\tsubindexECs = NIL;\n\t\t\tRestrictInfo *rinfo = iclause->rinfo;", "partial_line": "subquals = lappend(sub", "completion": "subquals = lappend(subquals, rinfo->clause); <|endoftext|>"}
{"context": "\t\t\t\tAPPEND_CHAR(bufp, bufend, *cp++);\n\t\t\t\tftype[nf] = DTK_DATE;\n\t\t\t\t\tAPPEND_CHAR(bufp, bufend, pg_tolower((unsigned char) *cp++));\n\t\t\treturn DTERR_BAD_FORMAT;\n\treturn 0;", "partial_line": "DateTimeErrorEx", "completion": "DateTimeErrorExtra *extra) <|endoftext|>"}
{"context": "\t\t\tudatum = lfirst_node(PartitionRangeDatum, cell2);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   (Expr *) lower_val));\n\t\t\t\tupper_or_arm_args = lappend(upper_or_arm_args,\n\t\t\tif (j - i > current_or_arm)\n\t\t\t\t\tudatum_next->kind != PARTITION_RANGE_DATUM_VALUE)", "partial_line": "lower_or_arms = lappend(lo", "completion": "lower_or_arms = lappend(lower_or_arms, <|endoftext|>"}
{"context": "\tpq_sendint32(&buf, arg1);\noidvector *\n\tif (n > 0 && oids)\n\tresult->dataoffset = 0;\t\t\n}", "partial_line": "while (*oidString && isspace", "completion": "while (*oidString && isspace((unsigned char) *oidString)) <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(!point_eq_point(pt1, pt2));\npoint_eq_point(Point *pt1, Point *pt2)\nDatum\nDatum\nstatic inline float8", "partial_line": "retur", "completion": "return 0.0; <|endoftext|>"}
{"context": "\tif (pgaio_my_backend->num_staged_ios >= PGAIO_SUBMIT_BATCH_SIZE)\nvoid\n\tif (ioh == pgaio_my_backend->handed_out_io)\n\telse\n{", "partial_line": "pgaio_my_backend->handed_ou", "completion": "pgaio_my_backend->handed_out_io = NULL; <|endoftext|>"}
{"context": "\t\tExecCheckPermissions(pstate->p_rtable, list_make1(perminfo), true);\n\t\tif (check_enable_rls(relid, InvalidOid, false) == RLS_ENABLED)\n\t\t{\n\t\t\t\ttarget->val = (Node *) cr;\n\t\t\t\t\ttarget->val = (Node *) cr;", "partial_line": "query = makeNod", "completion": "query = makeNode(RawStmt); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tOid\t\t\teqop;\n\t\t\t\t\t\t\t  best_path->num_workers,\n\tList\t   *tlist = build_path_tlist(root, &best_path->path);\n\tsubplan = prepare_sort_from_pathkeys(subplan, pathkeys,", "partial_line": "fal", "completion": "false, <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\telse\n\t\t\t\tresult = NULL;\t\n\t\t\tresult = (Node *) makeInteger(atoi(token));\n\t\t\t{", "partial_line": "fval[tok", "completion": "fval[tok_len] = '\\0'; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"executor/execPartition.h\"\n#include \"executor/executor.h\"\n#define EVENT_BUFFER_SIZE\t\t\t16\nstatic bool ExecAppendAsyncGetNext(AppendState *node, TupleTableSlot **result);", "partial_line": "static void classify_matching", "completion": "static void classify_matching_subplans(AppendState *node); <|endoftext|>"}
{"context": "\t\tRangeTblEntry *rte = rt_fetch(rtr->rtindex, query->rtable);\n\t\t\t\t\t  subquery->limitCount ||\n\t\telse\n\t\t}\n\t\t\tappendStringInfoString(buf, \"ALL \");", "partial_line": "appendStringInf", "completion": "appendStringInfoChar(buf, '('); <|endoftext|>"}
{"context": "#define sqlca (*ECPGget_sqlca())\n#ifdef __cplusplus\n#line 12 \"sqljson.pgc\"\n char json [ 1024 ] ;\n#line 13 \"sqljson.pgc\"", "partial_line": "{ ECPGs", "completion": "{ ECPGsetcommit(__LINE__, \"on\", NULL); <|endoftext|>"}
{"context": "\t\t\t\t bool *reportedSome,\n\t\t\t\treturn SpGistBreakOffsetNumber;\n\t\telog(ERROR, \"unexpected SPGiST tuple state: %d\", leafTuple->tupstate);\n}\nstatic void", "partial_line": "Buffer\t\tbuffer", "completion": "Buffer\t\tbuffer = InvalidBuffer; <|endoftext|>"}
{"context": "\t\t\tstrcmp(attname, NameStr(att->attname)) != 0)\n\t\t{\n\t\t\tHeapTuple\tnewtup;\n\t\t\t\telog(ERROR, \"could not find inherited attribute \\\"%s\\\" of relation \\\"%s\\\"\",\n\t\t\t\t\t errmsg(\"attribute \\\"%s\\\" of relation \\\"%s\\\" does not match parent's type\",", "partial_line": "attcol", "completion": "attcollation, <|endoftext|>"}
{"context": "static MultiXactId *OldestMemberMXactId;\nstatic int\tmxactMemberComparator(const void *arg1, const void *arg2);\nstatic MultiXactId mXactCacheGetBySet(int nmembers, MultiXactMember *members);\nstatic int\tZeroMultiXactOffsetPage(int64 pageno, bool writeXlog);\nstatic int\tZeroMultiXactMemberPage(int64 pageno, bool writeXlog);", "partial_line": "Mu", "completion": "MultiXactId <|endoftext|>"}
{"context": "is_safe_restriction_clause_for(RestrictInfo *rinfo, RelOptInfo *rel)\n{\n\treturn true;\n{\n\tList\t   *clauselist = NIL;", "partial_line": "Assert(is_orclause(or_rinfo-", "completion": "Assert(is_orclause(or_rinfo->orclause)); <|endoftext|>"}
{"context": "\t\tcase RANGESTRAT_ADJACENT:\n\t\tdefault:\nstatic bool\n\t\t\treturn range_contains_elem_internal(typcache, key, query);\n\t\t\treturn false;\t\t", "partial_line": "stat", "completion": "static void <|endoftext|>"}
{"context": "\t\tsysatt = SystemAttributeDefinition(attid);\n\t\telog(ERROR, \"invalid attribute number %d\", attid);\n\tif (attid <= 0)\n\tif (attid > rd->rd_att->natts)\n\treturn TupleDescAttr(rd->rd_att, attid - 1)->attcollation;", "partial_line": "const char *ba", "completion": "const char *badAlias = NULL; <|endoftext|>"}
{"context": "#include \"header.h\"\n#ifdef __cplusplus\n#endif", "partial_line": "static const symbol s_0_18[2", "completion": "static const symbol s_0_18[2] = { 0xCE, 0x94 }; <|endoftext|>"}
{"context": "{\n\tbool\t\tnext_scalar;\n\tbool\t   *pathok;\t\t\t\ntypedef struct AlenState\n\tconst char *result_start;", "partial_line": "Memory", "completion": "MemoryContext tmp_cxt; <|endoftext|>"}
{"context": "#include \"utils/logtape.h\"\n#include \"utils/memutils_memorychunk.h\"\n#define HASHAGG_MAX_PARTITIONS 1024", "partial_line": "#define HASHAGG", "completion": "#define HASHAGG_READ_BUFFER_SIZE BLCKSZ <|endoftext|>"}
{"context": "\t\t\tif (root_offsets[offnum - 1] == InvalidOffsetNumber)\n\t\telse\n\t\t\tblks_done = hscan->rs_nblocks;\n\t\tpgstat_progress_update_param(PROGRESS_SCAN_BLOCKS_DONE,\n\t}", "partial_line": "table_en", "completion": "table_endscan(scan); <|endoftext|>"}
{"context": "{\n{\n\tInterruptPending = true;\n}\nstatic void", "partial_line": "bool", "completion": "bool\t\tresult; <|endoftext|>"}
{"context": "static const symbol s_6_16[2] = { 'e', 'i' };\nstatic const symbol s_6_23[5] = { 'e', 'r', 'i', 'a', 'm' };\nstatic const symbol s_6_35[5] = { 'i', 's', 's', 'e', 'm' };\nstatic const symbol s_6_37[3] = { 'i', 'd', 'o' };\nstatic const symbol s_6_40[4] = { 'i', 'n', 'd', 'o' };", "partial_line": "static const symbol s_6_49[", "completion": "static const symbol s_6_49[4] = { 'i', 'd', 'a', 's' }; <|endoftext|>"}
{"context": "{\npgaio_result_report(PgAioResult result, const PgAioTargetData *target_data, int elevel)\n\tPgAioHandleCallbackID cb_id = result.id;\n\tconst PgAioHandleCallbacksEntry *ce = &aio_handle_cbs[cb_id];\n\tAssert(ioh->op > PGAIO_OP_INVALID && ioh->op < PGAIO_OP_COUNT);", "partial_line": "uint8\t\tcb_data = ioh->call", "completion": "uint8\t\tcb_data = ioh->callbacks_data[i - 1]; <|endoftext|>"}
{"context": "{ 6, s_17_7, 2, 1, 0},\n{ 2, s_17_15, -1, 1, 0},\n{ 10, s_17_17, 16, 1, 0},\n{ 2, s_17_19, -1, 1, 0},\n{ 10, s_17_29, 27, 1, 0},", "partial_line": "{ 12, s_17", "completion": "{ 12, s_17_37, -1, 2, 0}, <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\tname),\n\t\t\t\t errcontext(\"line %d of configuration file \\\"%s\\\"\",\n\t\t*err_msg = psprintf(\"unrecognized authentication option name: \\\"%s\\\"\",\n}", "partial_line": "foreach(line, p", "completion": "foreach(line, parsed_hba_lines) <|endoftext|>"}
{"context": "\t\tnetwork <<= (ABBREV_BITS_INET4_NETMASK_SIZE +\n\t\tsubnet = ipaddr_datum & subnet_bitmask;\n\t\tres |= network | netmask_size | subnet;\n\t}\n\t\ttmp = (uint32) res;", "partial_line": "inet\t   *a1 =", "completion": "inet\t   *a1 = PG_GETARG_INET_PP(0); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\tcase 'l':\n\t\t\tcase 2:\n\t\t\t\t\t\tpg_log_error_hint(\"Try \\\"%s --help\\\" for more information.\", progname);\n\t\t\t\t\t}", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\treturn false;\t\t\t\n\tchar\t   *buf;\n\t\tbuf = ReadTwoPhaseFile(xid, false);\n\tbufptr += MAXALIGN(hdr->nabortrels * sizeof(RelFileLocator));\n\tbufptr += MAXALIGN(hdr->nabortstats * sizeof(xl_xact_stats_item));", "partial_line": "HOLD_INTER", "completion": "HOLD_INTERRUPTS(); <|endoftext|>"}
{"context": "{\n\t\t\t\tnextst = ca->to;\n\t}\n\t\t\t\tthiscolor = COLORLESS;\n\t\t\t}", "partial_line": "} while (next", "completion": "} while (nextst != -1); <|endoftext|>"}
{"context": "#include \"miscadmin.h\"\n\tInjectionPointConditionType type;\n\tConditionVariable wait_point;\n\t\t\t\t\t\t\t\t\t\tconst void *private_data);\n\t\t\t\t\t\t\t\t\t   const void *private_data);", "partial_line": "ConditionVar", "completion": "ConditionVariableInit(&state->wait_point); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\n\txl_xact_stats_item item;\n\t\t\t\t\t\t\t\t\t\t\tbool isCommit, int nestDepth);", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "#include \"access/htup_details.h\"\n#include \"catalog/pg_type.h\"", "partial_line": "static char *plpgsq", "completion": "static char *plpgsql_extra_errors_string = NULL; <|endoftext|>"}
{"context": "\t\t\t\tcanonicalize_path(manifest_path);\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tno_parse_wal = true;\n\t\t\t\tbreak;", "partial_line": "case", "completion": "case 's': <|endoftext|>"}
{"context": "#elif defined(TCP_KEEPALIVE_THRESHOLD)\n#endif\n\tchar\t   *envvar;\t\t\t\n\toffsetof(struct pg_conn, pgpass)},\n\t{\"channel_binding\", \"PGCHANNELBINDING\", DefaultChannelBinding, NULL,", "partial_line": "offsetof(s", "completion": "offsetof(struct pg_conn, dbName)}, <|endoftext|>"}
{"context": "\t\t}\n\t\telse if (compute_common_attribute(pstate,\n\t\t\t\t\t\t\t\t\t\t  &volatility_item,\n\t\t\t\t\t\t\t\t\t\t  &cost_item,\n\t\t*transform = transform_item->arg;", "partial_line": "*security_definer = boolVal(", "completion": "*security_definer = boolVal(security_item->arg); <|endoftext|>"}
{"context": "\t\t\t\t\tbreak;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcflags &= ~REG_ADVANCED;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'o':\t\t", "partial_line": "cflag", "completion": "cflags |= REG_FAKE; <|endoftext|>"}
{"context": "void\n\treturn awaitedLock;\n{\n\tAssert(locallock->nLocks > 0);\nstatic ProcWaitStatus", "partial_line": "ProcWaitSta", "completion": "ProcWaitStatus result; <|endoftext|>"}
{"context": "\tscan = systable_beginscan(attrel, AttributeRelidNumIndexId, true,\n\ttuple = SearchSysCacheCopy2(ATTNUM,\n\t\t\t\t\t\t\t\tObjectIdGetDatum(relid),\n\t\t\t\t\t\t\t\tInt16GetDatum(attnum));\n\tnamestrcpy(&(attStruct->attname), newattname);", "partial_line": "attStruct->atthasmi", "completion": "attStruct->atthasmissing = false; <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\t{\n\t\t{\n\t}\n\t\tif (collprovider == COLLPROVIDER_LIBC)", "partial_line": "loca", "completion": "locale = colllocale; <|endoftext|>"}
{"context": "\tOid\t\t\tcollid = PG_GET_COLLATION();\n\tkeydata = VARDATA_ANY(key);\n\tkeylen = bcTruelen(key);\n\tmylocale = pg_newlocale_from_collation(collid);\n\t\tSize\t\tbsize,", "partial_line": "r", "completion": "rsize; <|endoftext|>"}
{"context": "static const symbol s_8_20[4] = { 0xC3, 0xAD, 'a', 'n' };\nstatic const symbol s_8_27[4] = { 'a', 'r', 'o', 'n' };\nstatic const symbol s_8_33[3] = { 'i', 'd', 'o' };\nstatic const symbol s_8_44[5] = { 'i', 'e', 'r', 'a', 's' };\nstatic const symbol s_8_46[6] = { 'a', 'r', 0xC3, 0xAD, 'a', 's' };", "partial_line": "static const symbol s_8_49[", "completion": "static const symbol s_8_49[2] = { 'e', 's' }; <|endoftext|>"}
{"context": "\t\t\tif (!colllocale)\n\t\t\t\t\t\t\t\t\"locale\")));\n\t\t\t\t\t\t\t\t\t\t\t\t colllocale);\n\t\t\tif (!IsBinaryUpgrade)\n\t\t\t{", "partial_line": "icu_", "completion": "icu_validation_level); <|endoftext|>"}
{"context": "\tmacaddr8   *addr2 = PG_GETARG_MACADDR8_P(1);\n\tresult->b = addr1->b & addr2->b;\n\tresult->h = addr1->h & addr2->h;\n\tresult->f = addr1->f | addr2->f;\n\tresult = (macaddr8 *) palloc0(sizeof(macaddr8));", "partial_line": "result->", "completion": "result->f = 0; <|endoftext|>"}
{"context": "}\n\tshmhdr->freeoffset = aligned - (char *) shmhdr;\n\t\t\t\t\t\tsize)));\n}\n\t{", "partial_line": "ShmemSegHdr->freeoff", "completion": "ShmemSegHdr->freeoffset = newFree; <|endoftext|>"}
{"context": "};\n{ 2, s_1_0, -1, -1, 0},\n{ 2, s_1_5, -1, -1, 0},\n{\n{ 3, s_2_2, -1, 1, 0},", "partial_line": "if (z->", "completion": "if (z->c > z->l) return 0; <|endoftext|>"}
{"context": "#include \"funcapi.h\"\n#include \"miscadmin.h\"", "partial_line": "#include", "completion": "#include \"storage/standby.h\" <|endoftext|>"}
{"context": "\tIncrementVarSublevelsUp((Node *) grp, -((int) grp->agglevelsup), 0);\n\tAssert(grp->agglevelsup == 0);\n\tpitem->item = (Node *) grp;\n\tpitem->paramId = list_length(root->glob->paramExecTypes);\n\tretval = makeNode(Param);", "partial_line": "retval = m", "completion": "retval = makeNode(Param); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tObjectIdGetDatum(object->objectId));\n\t\t\t\t{\n\t\t\t\t\tif (!missing_ok)\n\t\t\t\t}\n\t\t\t{", "partial_line": "ScanKeyData sk", "completion": "ScanKeyData skey[1]; <|endoftext|>"}
{"context": "\t\t\t\t\"        oid,\"\n\t\t\t\t\"    WHERE\"\n\t\t\t\t\"        typacl IS NOT NULL;\\n\\n\");\n\tPG_CMD_PUTS(\"INSERT INTO pg_init_privs \"\n\t\t\t\t\"  (objoid, classoid, objsubid, initprivs, privtype)\"", "partial_line": "\"", "completion": "\"        oid,\" <|endoftext|>"}
{"context": "\t\t\t\t\tfputs(connectbuf.data, script);\n\t\t\t\tfprintf(script, \"REINDEX INDEX %s.%s;\\n\",\n\t\t\t\t\t\t\t\t\t  \"UPDATE pg_catalog.pg_index i \"\n\t\t\t\t\t\t\t\t\t  \"\t\tpg_catalog.pg_am a, \"\n\t\t\t\t   \"REINDEX instructions.\");", "partial_line": "\"internal formats between yo", "completion": "\"internal formats between your old and new clusters, so they must be\\n\" <|endoftext|>"}
{"context": "\t\t\t\tif (isdefault)\n\t\t\t\t\tList\t   *partialSkipQuals;\n\t\t\t\t\tndistinctfrac = clauselist_selectivity(root, partialSkipQuals,\n\t\t\t\t\t{\n\t\t\t\t}", "partial_line": "if (indexS", "completion": "if (indexSkipQuals == NIL) <|endoftext|>"}
{"context": "\tshmInvalBuffer = (SISeg *)\n\t\tShmemInitStruct(\"shmInvalBuffer\", SharedInvalShmemSize(), &found);\n\tshmInvalBuffer->nextThreshold = CLEANUP_MIN;\n\tSpinLockInit(&shmInvalBuffer->msgnumLock);\n\tshmInvalBuffer->numProcs = 0;", "partial_line": "SharedI", "completion": "SharedInvalBackendInit(bool sendOnly) <|endoftext|>"}
{"context": "\tIndexBulkDeleteResult *istat_res;\n\tivinfo.report_progress = false;\n\tivinfo.num_heap_tuples = pvs->shared->reltuples;\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t   bool vacuum)", "partial_line": "ret", "completion": "return true; <|endoftext|>"}
{"context": "\tif (!HeapTupleIsValid(tuple))\t\n\ttruncate_check_perms(relId, (Form_pg_class) GETSTRUCT(tuple));\n{\n\tif (!OidIsValid(relId))\n\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relId));", "partial_line": "IsSystemClass(relId, (Form_", "completion": "IsSystemClass(relId, (Form_pg_class) GETSTRUCT(tuple))) <|endoftext|>"}
{"context": "\t\tif (node->valnode->qoperator.oper != ex->valnode->qoperator.oper)\n\t\t\tif (QTNEq(node, ex))\n\t\t\tmatched = (bool *) palloc0(node->nchild * sizeof(bool));\n\t\t\ti = j = 0;\n\t\t\t\tint\t\t\tcmp = QTNodeCompare(node->child[i], ex->child[j]);", "partial_line": "i++,", "completion": "i++, j++; <|endoftext|>"}
{"context": "\tinitStringInfo(&result);\n\t\tappendStringInfo(&result, \"%s\\n\",\n\t\t\t\t\t\t map_sql_type_to_xmlschema_type(lfirst_oid(cell0),\n\t\t\t\t\t\t\t   \"  </xsd:sequence>\\n\"\n\t\t\t\t\t\t\t\t\t (typmod - VARHDRSZ) & 0xffff);", "partial_line": "\"    <xsd:maxInclusive v", "completion": "\"    <xsd:maxInclusive value=\\\"%d\\\"/>\\n\" <|endoftext|>"}
{"context": "\t\t}\n\t\tif (vallen >= 6 &&\n\t\t\tdopr_outchmulti('0', zeropadlen, target);\nfail:\n\tint\t\t\tvallen;", "partial_line": "char\t\tc", "completion": "char\t\tconvert[64]; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   errarg->rel->remoterel.relname,\n\t\t\t\t\t\t   errarg->rel->remoterel.attnames[errarg->remote_attnum],\n\t\t}\n\tapply_error_callback_arg.remote_xid = xid;\n\toldcxt = MemoryContextSwitchTo(TopTransactionContext);", "partial_line": "MemoryContextSw", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "\tplan = (Plan *) make_result(tlist, NULL, subplan);\n\t{\n{\n\tIncrementalSort *plan;\n\t\t\t\t\t\t\t\t  flags | CP_SMALL_TLIST);", "partial_line": "best_path->spath.path.", "completion": "best_path->spath.path.parent->relids : NULL, <|endoftext|>"}
{"context": "\t\t\tAggTransInfo *transinfo = makeNode(AggTransInfo);\n\t\t\ttransinfo->combinefn_oid = aggcombinefn;\n\t\t\ttransinfo->transtypeByVal = transtypeByVal;\n\t\t\ttransno = list_length(root->aggtransinfos);\n\t{", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\t\trestrictinfo->clause_relids = pull_varnos(root, (Node *) clause);\n\t\trestrictinfo->required_relids = required_relids;\n\t\trestrictinfo->required_relids = restrictinfo->clause_relids;\n\t\t\t\t\t\t\t  root->outer_join_rels);\n\trestrictinfo->outer_selec = -1;", "partial_line": "bool h", "completion": "bool has_clone, <|endoftext|>"}
{"context": "\t\t\tif (found)\n\t\t\t\t\tpredlock->commitSeqNo = sxact->commitSeqNo;\n\t\t}\n\t\telse\n\tsxidtag.xid = sxact->topXid;", "partial_line": "Relea", "completion": "ReleaseRWConflict(conflict); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t addr.classId, addr.objectId, addr.objectSubId);\n\t\t\t\tvalues[i++] = BoolGetDatum(cmd->in_extension);\n\t\t\t\tnulls[i++] = true;\n\t\t\t\tvalues[i++] = CStringGetTextDatum(stringify_grant_objtype(cmd->d.grant.istmt->objtype));\n\t\t\t\tbreak;", "partial_line": "stringify_grant_objtype(Object", "completion": "stringify_grant_objtype(ObjectType objtype) <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"access/stratnum.h\"\n{\n\tGISTENTRY  *retval = entry;", "partial_line": "retval = (key & s", "completion": "retval = (key & sq) != 0; <|endoftext|>"}
{"context": "\tObjectAddress address;\n\t\t\t\t errmsg(\"cannot inherit from temporary relation \\\"%s\\\"\",\n\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\t\t\t\t errmsg(\"cannot inherit from temporary relation of another session\")));\n\t\t\t\t errmsg(\"cannot inherit to temporary relation of another session\")));", "partial_line": "parent->relna", "completion": "parent->relname))); <|endoftext|>"}
{"context": "\t\tcase REINDEX_OBJECT_SCHEMA:\n\t\t\tReindexMultipleTables(stmt, &params);\n\tchar\t\trelkind;\n\tstate.params = *params;\n\telse if ((params->options & REINDEXOPT_CONCURRENTLY) != 0 &&", "partial_line": "ReindexRelation", "completion": "ReindexRelationConcurrently(stmt, indOid, params); <|endoftext|>"}
{"context": "\t\t\t\t\t \"SHOW wal_segment_size\", PQerrorMessage(conn));\n\t\tpg_log_error(ngettext(\"remote server reported invalid WAL segment size (%d byte)\",\n\treturn true;\n\tif (PQresultStatus(res) != PGRES_TUPLES_OK)\n\tif (PQntuples(res) != 1 || PQnfields(res) < 1)", "partial_line": "pg_log_error(\"could not fetch group access fla", "completion": "pg_log_error(\"could not fetch group access flag: got %d rows and %d fields, expected %d rows and %d or more fields\", <|endoftext|>"}
{"context": "\t\t\t\tgoto cleanup;\n\t\t\t\tprintf(\"SUCCESS!\\n\");\n\t\t\tbreak;\n\tfclose(json_file);\n}", "partial_line": "DoState    *_st", "completion": "DoState    *_state = (DoState *) state; <|endoftext|>"}
{"context": "\t\tpage = local_ts_find(ts->tree.local, blk);\n\tif (page == NULL)\n\t{\n\t\t\tif (page->header.full_offsets[i] == off)\n\telse", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\tbitmapandstate->nplans = nplans;\n\tforeach(l, node->bitmapplans)\n\tint\t\t\ti;\n\t\t{\n\t\t\ttbm_intersect(result, subresult);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "mdclose(SMgrRelation reln, ForkNumber forknum)\n\twhile (nopensegs > 0)\n\t\tFileClose(v->mdfd_vfd);\n\t{\n\t\tint\t\t\tnblocks_this_segment;", "partial_line": "if (", "completion": "if (v == NULL) <|endoftext|>"}
{"context": "\t\t\t\t  char **endptr)\n\t\t\t{\n\t\t\t\tstatecode = WAITNEXTCHAR;\n\t\t\t\tPRSSYNTAXERROR;\n\t\t}", "partial_line": "ereturn(stat", "completion": "ereturn(state->escontext, false, <|endoftext|>"}
{"context": "\t}\n\tint\t\t\ti;\n\t\t\t\tconst Datum *bdist, const bool *bnulls,\n\t\tif (anulls[i] && !bnulls[i])\n\t\t\treturn result;", "partial_line": "EState\t   *estate =", "completion": "EState\t   *estate = node->ss.ps.state; <|endoftext|>"}
{"context": "{ 3, s_16_1, -1, -1, 0}\nstatic const symbol s_17_1[3] = { 'n', 'u', 'z' };\nstatic const symbol s_18_1[3] = { 't', 'i', 'r' };\n{ 3, s_18_2, -1, -1, 0},\nstatic const symbol s_20_3[3] = { 't', 'i', 'k' };", "partial_line": "static const symbol s_20_4[3]", "completion": "static const symbol s_20_4[3] = { 'd', 'u', 'k' }; <|endoftext|>"}
{"context": "\tListCell   *lc_colname;\n\t{\n\t\ttypmod = lfirst_int(lc_coltypmod);\n\t\t}\n\t\tif (colnum > scan->colMax)", "partial_line": "colexpr->format->format_type == JS", "completion": "colexpr->format->format_type == JS_FORMAT_JSONB ? <|endoftext|>"}
{"context": "\t\t\treturn result;\n\tif (HeapTupleIsValid(vardata.statsTuple))\n\t\tnullfrac = stats->stanullfrac;\n\t}\n\t}", "partial_line": "int", "completion": "int\t\t\thist_size; <|endoftext|>"}
{"context": "{\n\trecursion_depth++;\n\tescontext->error_data = palloc_object(ErrorData);\n\t\t\t\t\t\t const char *funcname)\n\t\tif (slash)", "partial_line": "if (!backtrace_function_list || func", "completion": "if (!backtrace_function_list || funcname == NULL || funcname[0] == '\\0') <|endoftext|>"}
{"context": "\tTupleDescInitEntry(tupdesc, (AttrNumber) 5, \"stats_reset\",\n\tvalues[3] = Int64GetDatum(wal_counters.wal_buffers_full);\n\tif (stat_reset_timestamp != 0)\nDatum\n\t\t\tbreak;", "partial_line": "CppConcat(pg_sta", "completion": "CppConcat(pg_stat_get_xact_,stat)(PG_FUNCTION_ARGS)\t\t\\ <|endoftext|>"}
{"context": "static const symbol s_0_73[5] = { 'k', 'a', 'r', 'r', 'i' };\nstatic const symbol s_0_86[4] = { 'e', 'z', 'i', 'n' };\nstatic const symbol s_0_90[2] = { 'g', 'o' };\nstatic const symbol s_0_91[3] = { 'a', 'g', 'o' };\n{", "partial_line": "{ 5,", "completion": "{ 5, s_0_2, 0, 1, 0}, <|endoftext|>"}
{"context": "    return 1;\n    {   int mlimit1;\n                {   int ret = r_LONG(z);\n                {   int ret = slice_del(z);\n                    if (ret < 0) return ret;", "partial_line": "lab", "completion": "lab1: <|endoftext|>"}
{"context": "{\n\t\tShmemInitStruct(\"Backend Status Array\", size, &found);\n\tif (!found)\n\tif (!found)\n\t{", "partial_line": "size = mul", "completion": "size = mul_size(NAMEDATALEN, NumBackendStatSlots); <|endoftext|>"}
{"context": "\tbool\t\tisnull;\n\tosastate = (OSAPerGroupState *) PG_GETARG_POINTER(0);\n\tif (PG_ARGISNULL(1))\n\t\tPG_RETURN_NULL();\n\tdeconstruct_array_builtin(param, FLOAT8OID,", "partial_line": "&percentiles", "completion": "&percentiles_null, <|endoftext|>"}
{"context": "struct pg_encoding\n};\n\tchar\t   *namebuf;", "partial_line": "errmsg(\"unrecognized encoding:", "completion": "errmsg(\"unrecognized encoding: \\\"%s\\\"\", namebuf))); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t char **localized_array, Oid collid,\nstatic char *int_to_roman(int number);\nstatic void NUM_numpart_from_char(NUMProc *Np, int id, int input_len);\nstatic DCHCacheEntry *DCH_cache_getnew(const char *str, bool std);\n{", "partial_line": "retu", "completion": "return NULL; <|endoftext|>"}
{"context": "\t\t}\n\t}\n\t\tListCell   *ilist;\n\t\t\t\tif (index->indexkeys[pos] == 0)\n\t\t\t\t\t{", "partial_line": "vardata->isuniq", "completion": "vardata->isunique = true; <|endoftext|>"}
{"context": "                z->c = ret;\n        }\n    lab1:\n        {\n        {", "partial_line": "int ret = in_grouping_U(z,", "completion": "int ret = in_grouping_U(z, g_v, 97, 251, 1); <|endoftext|>"}
{"context": "\t\tdecoded = palloc(required_space);\n\treturn NULL;\n\tint\t\t\treadOff;\n\tstate->abortedRecPtr = InvalidXLogRecPtr;\n\tstate->currRecPtr = RecPtr;", "partial_line": "pageHeaderSize,", "completion": "pageHeaderSize, targetRecOff); <|endoftext|>"}
{"context": "\telse if (rte->rtekind == RTE_RELATION)\n\t\t\tprintalias = true;\nstatic void\n\t\treturn;\n\t\t\tappendStringInfoChar(buf, '(');", "partial_line": "fi", "completion": "first = false; <|endoftext|>"}
{"context": "\tOpenMatViewIncrementalMaintenance();\n\tif (SPI_finish() != SPI_OK_FINISH)\n\tfinish_heap_swap(matviewOid, OIDNewHeap, false, false, true, true,\n\tif (indexStruct->indisunique &&\n\t\tindexStruct->indisvalid &&", "partial_line": "int\t\t\tnumatts = ind", "completion": "int\t\t\tnumatts = indexStruct->indnatts; <|endoftext|>"}
{"context": "\t\t\t\t   new_rel_oid, \n\t\t\t\t   new_rel_kind,\t\n\t\t\t\t   InvalidOid,\t\n\t\t\t\t   new_array_type,\t\n\t\t\t\t   NULL,\t\t", "partial_line": "Oid relnam", "completion": "Oid relnamespace, <|endoftext|>"}
{"context": "\tnullsFirst = (bool *) palloc(numsortkeys * sizeof(bool));\n\tforeach(l, sortcls)\n}\n\t\t\t\t\t\t AttrNumber *grpColIdx,\n{", "partial_line": "List\t   *sub_tli", "completion": "List\t   *sub_tlist = lefttree->targetlist; <|endoftext|>"}
{"context": "{\n{ 10, s_25_4, -1, -1, 0},\n{ 6, s_25_9, -1, -1, 0}\nstatic const symbol s_27_2[6] = { 0xCE, 0xB4, 0xCE, 0xB1, 0xCF, 0x80 };\nstatic const struct among a_27[8] =", "partial_line": "static const symbol s_28_0[1", "completion": "static const symbol s_28_0[10] = { 0xCE, 0xBF, 0xCF, 0x85, 0xCE, 0xB4, 0xCE, 0xB5, 0xCF, 0x83 }; <|endoftext|>"}
{"context": "\tCurrentSession->shared_typmod_registry = registry;\n}\n\ttypmod_table = dshash_attach(CurrentSession->area,\n\tCurrentSession->shared_record_table = record_table;\n\tCurrentSession->shared_typmod_table = typmod_table;", "partial_line": "InvalidateComposi", "completion": "InvalidateCompositeTypeCacheEntry(TypeCacheEntry *typentry) <|endoftext|>"}
{"context": "\t\t}\n\tnewq1 = makeNode(Query);\n\t\t\t\t\t  list_nth_oid(cte->ctecoltypes, i),\n\t\ttle->resorigtbl = list_nth_node(TargetEntry, rte1->subquery->targetList, i)->resorigtbl;\n\t\tExpr\t   *texpr;", "partial_line": "texpr = (Expr *) search_c", "completion": "texpr = (Expr *) search_col_rowexpr; <|endoftext|>"}
{"context": "\t}\n\t{\n\t\tif (interactive && yesno_prompt(\"Shall the new role be a superuser?\"))\n\tif (createdb == TRI_DEFAULT)\n\tif (inherit == TRI_DEFAULT)", "partial_line": "login = TRI", "completion": "login = TRI_YES; <|endoftext|>"}
{"context": "\t\t\t(presorted_keys == 0 || !enable_incremental_sort))\n\t\t\tpath = (Path *) create_sort_path(root,\n\treturn path;\ngather_grouping_paths(PlannerInfo *root, RelOptInfo *rel)\n\telse", "partial_line": "groupby_path", "completion": "groupby_pathkeys = root->group_pathkeys; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\tExecuteStmt *stmt = (ExecuteStmt *) parsetree;\n\t\t\t\treturn false;\n}\n{", "partial_line": "return FetchPreparedSta", "completion": "return FetchPreparedStatementResultDesc(entry); <|endoftext|>"}
{"context": "\t\treturn;\n\t\t{\n\t\t\t\tso->qual_ok = false;\n\t\t\t\tScanKey\t\teq = xform[BTEqualStrategyNumber - 1].inkey;\n\t\t\t\tBTArrayKeyInfo *array = NULL;", "partial_line": "so->qual_ok =", "completion": "so->qual_ok = false; <|endoftext|>"}
{"context": "\tstruct pg_tm tt,\n\t\t\t\t\t\t  field, ftype, MAXDATEFIELDS, &nf);\n\t\t\tif (tm2timestamp(tm, fsec, &tz, &result) != 0)\n\t}\n\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),", "partial_line": "errmsg(\"invalid", "completion": "errmsg(\"invalid input syntax for type %s: \\\"%s\\\"\", <|endoftext|>"}
{"context": "\t\tcase LOGICAL_REP_MSG_MESSAGE:\n\t\tcase LOGICAL_REP_MSG_STREAM_START:\n\t\t\treturn \"STREAM COMMIT\";\nbool\n\tif (!att->attgenerated)", "partial_line": "return", "completion": "return true; <|endoftext|>"}
{"context": "\treturn (typentry->flags & TCFLAGS_HAVE_ELEM_EXTENDED_HASHING) != 0;\nstatic void\ncache_range_element_properties(TypeCacheEntry *typentry)\n\t\tload_rangetype_info(typentry);\n\t\t\ttypentry->flags |= TCFLAGS_HAVE_ELEM_HASHING;", "partial_line": "sta", "completion": "static bool <|endoftext|>"}
{"context": "static const symbol s_3_21[8] = { 0xD5, 0xBE, 0xD5, 0xA1, 0xD5, 0xB6, 0xD5, 0xA4 };\nstatic const symbol s_3_32[8] = { 0xD5, 0xB6, 0xD5, 0xA5, 0xD6, 0x80, 0xD5, 0xAB };\nstatic const symbol s_3_47[14] = { 0xD5, 0xB8, 0xD6, 0x82, 0xD5, 0xA9, 0xD5, 0xB5, 0xD5, 0xA1, 0xD5, 0xB6, 0xD5, 0xB6 };\nstatic const symbol s_3_51[6] = { 0xD5, 0xB8, 0xD5, 0xBB, 0xD5, 0xBD };\n{ 4, s_3_0, -1, 1, 0},", "partial_line": "{ 8, s", "completion": "{ 8, s_3_5, 4, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t}\n\tappendStringInfoChar(&result, '{');\n\t\t\tescape_json_text(&result,\n\t\t\t\t\t\t\t (text *) DatumGetPointer(in_datums[i * 2 + 1]));", "partial_line": "*val_n", "completion": "*val_nulls; <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"cannot copy a replication slot that doesn't reserve WAL\")));\n\t\t\t\terrcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\t\t\t\terrmsg(\"cannot copy invalidated replication slot \\\"%s\\\"\",\n\t\tplugin = NameStr(*(PG_GETARG_NAME(3)));\n\t}", "partial_line": "tempor", "completion": "temporary, <|endoftext|>"}
{"context": "\tdsa_handle\tdsah;\n\tdsm_handle\thandle;\n\toffsetof(DSMRegistryEntry, handle),\n\tdshash_strcmp,\n\tdshash_strhash,", "partial_line": "if (", "completion": "if (!found) <|endoftext|>"}
{"context": "\telse\n\t\tquery = \"SELECT seqrelid, format_type(seqtypid, NULL), \"\n\t\t\t\"seqstart, seqincrement, \"\n\t\tsequences[i].startv = strtoi64(PQgetvalue(res, i, 2), NULL, 10);\n\t}", "partial_line": "TableI", "completion": "TableInfo  *owning_tab = NULL; <|endoftext|>"}
{"context": "\t}\nvoid\n\t}\n\tscratch->d.func.fn_addr = flinfo->fn_addr;\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "exprLocation((Node *)", "completion": "exprLocation((Node *) node)) : 0)); <|endoftext|>"}
{"context": "\t\t\tjbv.val.string.val = str;\n}\n\t\tprepare_column_cache(col, typid, typmod, mcxt, true);\n\t*isnull = JsValueIsNull(jsv);\n\t\ttypcat != TYPECAT_DOMAIN &&", "partial_line": "case TYPECAT_", "completion": "case TYPECAT_ARRAY: <|endoftext|>"}
{"context": "dshash_memcpy(void *dest, const void *src, size_t size, void *arg)\nint\n{\ndshash_hash\n{", "partial_line": "status-", "completion": "status->curpartition = -1; <|endoftext|>"}
{"context": "\tfilehash_init();\n\tif (showprogress)\n\t\tprint_filemap(filemap);\n\t\t\t\t\t(unsigned long) (filemap->fetch_size / (1024 * 1024)),\n\tif (showprogress)", "partial_line": "GetDbname", "completion": "GetDbnameFromConnectionOptions(connstr_source))); <|endoftext|>"}
{"context": "static const symbol s_215[] = { 0xC4, 0x8D, 'i', 'n' };\nstatic const symbol s_226[] = { 'i', 'r' };\nstatic const symbol s_241[] = { 'a', 's' };\nstatic const symbol s_242[] = { 'i' };\nstatic const symbol s_247[] = { 'l', 'u', 'c' };", "partial_line": "static const symb", "completion": "static const symbol s_252[] = { 'u', 'c' }; <|endoftext|>"}
{"context": "\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\t\t\t\t\terrdetail(\"MERGE is not supported for views with INSTEAD OF triggers for some actions but not all.\"),\n\t}\n\t}", "partial_line": "new_rt_index = lis", "completion": "new_rt_index = list_length(parsetree->rtable); <|endoftext|>"}
{"context": "\t\tAssert(!bootstrap);\n\tif (am_walsender && !am_db_walsender)\n\t{\n\t\tCommitTransactionCommand();\n\t\tdbform = (Form_pg_database) GETSTRUCT(tuple);", "partial_line": "LockSharedObject(DatabaseRelatio", "completion": "LockSharedObject(DatabaseRelationId, dboid, 0, RowExclusiveLock); <|endoftext|>"}
{"context": "\t\tif (my_extra->typoid != typoid)\n\t}\n\t\t\t\t\t\t\t\t (Node *) escontext,\n{\n\t\tnextp++;", "partial_line": "char", "completion": "char\t   *endp; <|endoftext|>"}
{"context": "\trb->streamCount = 0;\n\trb->totalBytes = 0;\n{\n\t\t\t\t\t\t\t\t\ttrue,\t\n\t\t\tchar\t   *errm = NULL;", "partial_line": "LogicalDecodingProcessRecord", "completion": "LogicalDecodingProcessRecord(ctx, ctx->reader); <|endoftext|>"}
{"context": "pg_SASL_continue(PGconn *conn, int payloadlen, bool final, bool *async)\n\t}\n\tif (conn->Pfdebug)\n\tif (status == SASL_ASYNC)\n\tif (output)", "partial_line": "res = pqPacketSend(conn, PqMsg_SASLRes", "completion": "res = pqPacketSend(conn, PqMsg_SASLResponse, output, outputlen); <|endoftext|>"}
{"context": "\t\terror_context_stack = &plerrcontext;\n\t\t\trv = (Datum) 0;\n\t\t\t\t srfstate && srfstate->iter == NULL)\n\t\telse\n\t\t\t\tPLy_function_drop_args(srfstate->savedargs);", "partial_line": "if (srfstate->iter", "completion": "if (srfstate->iter == NULL) <|endoftext|>"}
{"context": "charin(PG_FUNCTION_ARGS)\n}\nDatum\n\t\tresult[1] = TOOCTAL(((unsigned char) ch) >> 6);\ncharsend(PG_FUNCTION_ARGS)", "partial_line": "pq_begintypsend", "completion": "pq_begintypsend(&buf); <|endoftext|>"}
{"context": "\t\telse\n\tinit_var_from_num(rmax, &rmax_var);\n{\n\tinit_var(&result);\n\t\tm += DEC_DIGITS;", "partial_line": "#if D", "completion": "#if DEC_DIGITS == 4 <|endoftext|>"}
{"context": "IsCatalogRelation(Relation relation)\n}\nbool\nIsInplaceUpdateRelation(Relation relation)\n\treturn IsInplaceUpdateOid(RelationGetRelid(relation));", "partial_line": "IsInplaceUp", "completion": "IsInplaceUpdateOid(Oid relid) <|endoftext|>"}
{"context": "\tchar\t   *identity;\n\taddress.classId = classid;\n\t{\n\t\tpfree(identity);\n\t}", "partial_line": "PG_RETUR", "completion": "PG_RETURN_DATUM(HeapTupleGetDatum(htup)); <|endoftext|>"}
{"context": "#include \"access/table.h\"\n#include \"catalog/pg_database_d.h\"\n#include \"catalog/pg_foreign_server.h\"", "partial_line": "#include \"catalog/", "completion": "#include \"catalog/pg_ts_dict.h\" <|endoftext|>"}
{"context": "            break;\n                goto lab1;\n        lab1:\n            {   int ret = skip_b_utf8(z->p, z->c, z->lb, 1);\n                z->c = ret;", "partial_line": "retu", "completion": "return 1; <|endoftext|>"}
{"context": "\t\t\tWordEntryPos *wptr;\n\t\t\t}\nto_tsvector(PG_FUNCTION_ARGS)\nstatic TSVector\n\tstate.prs = &prs;", "partial_line": "iterate_jsonb_values(jb, flags, &state,", "completion": "iterate_jsonb_values(jb, flags, &state, add_to_tsvector); <|endoftext|>"}
{"context": "\tint\t\t\tlen,\n\t\t\t\t errmsg(\"invalid length in external bit string\")));\n\t\t\t\t\t\tatttypmod)));\n\tVARBITLEN(result) = bitlen;\n\tPG_RETURN_VARBIT_P(result);", "partial_line": "pq_sendin", "completion": "pq_sendint32(&buf, VARBITLEN(s)); <|endoftext|>"}
{"context": "\tOrArgIndexMatch *matches;\n\t\tNode\t   *arg = lfirst(lc);\n\t\tRestrictInfo *argrinfo;\n\t\t\t\t   *rightop;\n\t\tmatches[i].colnum = -1;", "partial_line": "if (list_lengt", "completion": "if (list_length(clause->args) != 2) <|endoftext|>"}
{"context": "\tint\t\t\tleftrti;\t\t\n\tList\t   *usingNames;\t\t\n\tHTAB\t   *names_hash;\t\t\nbool\t\tquote_all_identifiers = false;\nstatic char *pg_get_statisticsobj_worker(Oid statextid, bool columns_only,", "partial_line": "bool", "completion": "bool missing_ok); <|endoftext|>"}
{"context": "\tDatum\t\textConfig;\n\t\tint\t\t\tndatums;\n\tInsertExtensionTuple(text_to_cstring(extName),\n\t\t\t\t\t\t requiredExtensions);\n{", "partial_line": "binary_upgrade_logical_slot_has_cau", "completion": "binary_upgrade_logical_slot_has_caught_up(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "};\nstatic const symbol s_3_2[2] = { 'e', 'n' };\n{ 1, s_3_4, -1, 3, 0}\n};\nstatic const symbol s_4_1[2] = { 'i', 'g' };", "partial_line": "static const sym", "completion": "static const symbol s_4_4[4] = { 'b', 'a', 'a', 'r' }; <|endoftext|>"}
{"context": "\tqevtname = pg_strdup(fmtId(evtinfo->dobj.name));\n\tappendPQExpBufferStr(query, qevtname);\n\t\tappendPQExpBuffer(query, \"\\nALTER EVENT TRIGGER %s \",\n\t\t\t\t\t\t\t\t  .owner = evtinfo->evtowner,\n\t\t\t\t\t\t\t\t  .description = \"EVENT TRIGGER\",", "partial_line": "destroyPQE", "completion": "destroyPQExpBuffer(delqry); <|endoftext|>"}
{"context": "\t\t\tcase ATYPE_INT:\n}\n\tint\t\t\tpadlen,\n\t\tvallen = strlen(value);\nstatic void", "partial_line": "fmtint(long long value, char type, int force", "completion": "fmtint(long long value, char type, int forcesign, int leftjust, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  int *maxvars, const char *varname,\nstatic char *get_guctype(const char *varname);\nvoid\n\trl_attempted_completion_function = psql_completion;\n\t\tunsigned char *fqc = (unsigned char *) pg_malloc(256);", "partial_line": "return !word_mat", "completion": "return !word_matches(pattern + 1, word, case_sensitive); <|endoftext|>"}
{"context": "\tfunction->fn_hashkey = &hentry->key;\ncfunc_hashtable_delete(CachedFunction *function)\n\tif (tupdesc)\ncompute_function_hashkey(FunctionCallInfo fcinfo,\n\t\t\t   procStruct->pronargs * sizeof(Oid));", "partial_line": "forVa", "completion": "forValidator, <|endoftext|>"}
{"context": "\telse if (inSize > in->level)\n\telse\n\t\tout->result.addNode.nodeLabel = Int16GetDatum(nodeChar);\n\tPG_RETURN_VOID();\n\t\t   VARSIZE_ANY_EXHDR(reconstructedValue) == in->level);", "partial_line": "if (in-", "completion": "if (in->hasPrefix) <|endoftext|>"}
{"context": "\t\t\tif (ec->ec_has_const)\n\t\t\t\tcontinue;\n\t\t\t\tcontinue;\n\t\tec_index++;\n\t\t\t\t\t\t\t\t\t   EquivalenceClass *ec)", "partial_line": "RestrictInfo *restric", "completion": "RestrictInfo *restrictinfo = (RestrictInfo *) linitial(ec->ec_sources); <|endoftext|>"}
{"context": "\tListCell   *lc;\n\telse\n\tlfirst(lc) = bms_add_member((Bitmapset *) lfirst(lc), jindex);\n}\nstatic void", "partial_line": "if (exprKind == EXPR_KIND_LIMIT && li", "completion": "if (exprKind == EXPR_KIND_LIMIT && limitOption == LIMIT_OPTION_WITH_TIES && <|endoftext|>"}
{"context": "\t\t\t\tset_sa_opfuncid(saop);\n\t\t\t\t\tcase OR_EXPR:\n\t\t\t\t\t\t\tnewargs = simplify_or_arguments(expr->args,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\treturn (Node *) linitial(newargs);", "partial_line": "bool\t\tforc", "completion": "bool\t\tforceFalse = false; <|endoftext|>"}
{"context": "\t\t}\n\tbc += VARHDRSZ;\n\t\t\t\t (tp[2] >= '0' && tp[2] <= '7') &&\n\t\t\t\t (tp[3] >= '0' && tp[3] <= '7'))\n\t\t\tbc <<= 3;", "partial_line": "*rp++ = bc +", "completion": "*rp++ = bc + VAL(tp[3]); <|endoftext|>"}
{"context": "\t\t\tadd_object_address(ConstraintRelationId, onconflict->constraint, 0,\n\t\t\t\t\t\t\t   context->addrs);\n\t\tif (OidIsValid(sgc->sortop))\n\t\t\twc->inRangeColl != DEFAULT_COLLATION_OID)\n\t\tListCell   *lc;", "partial_line": "case", "completion": "case RTE_JOIN: <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tList *src_colnames,\nstatic ParseNamespaceItem *transformRangeFunction(ParseState *pstate,\n\t\t\t\t\t\t\t\t\t List **namespace);\nstatic WindowClause *findWindowClause(List *wclist, const char *name);\n\t\t\t\t\t\t\t\t  Oid rangeopfamily, Oid rangeopcintype, Oid *inRangeFunc,", "partial_line": "Node\t   *", "completion": "Node\t   *n = lfirst(fl); <|endoftext|>"}
{"context": "\tAfterTriggerEndXact(true);\n\tAtEOXact_LargeObject(true);\n\tAtEOXact_RelationMap(true, is_parallel_worker);\n\ts->state = TRANS_COMMIT;\n\t\tdisable_timeout(TRANSACTION_TIMEOUT, false);", "partial_line": "RESOURCE_REL", "completion": "RESOURCE_RELEASE_BEFORE_LOCKS, <|endoftext|>"}
{"context": "\treturn result;\n\t\t\t\t  AttrNumber attrno,\n\t\t\t\t  bool *isNull)\n\t\telog(ERROR, \"invalid attribute number %d\", attrno);\n\t{", "partial_line": "result = hea", "completion": "result = heap_getattr(&tmptup, <|endoftext|>"}
{"context": "{\n\tret = ExecEvalExprSwitchContext(state, econtext, &isnull);\n\telog(DEBUG3, \"row filter evaluates to %s (isnull: %s)\",\n\t\t\t\t\t\t\t\t\t\t\t ALLOCSET_SMALL_SIZES);\n\t\t\t\t\t\t RelationSyncEntry *entry)", "partial_line": "bool\t\tno_fil", "completion": "bool\t\tno_filter[] = {false, false, false}; <|endoftext|>"}
{"context": "\t\ttable_endscan(sysscan->scan);\n\t\tUnregisterSnapshot(sysscan->snapshot);\n\tif (TransactionIdIsValid(CheckXidAlive))\n\t\t\t\t\t\t   Relation indexRelation,\n\t\t\t\t\t\t   int nkeys, ScanKey key)", "partial_line": "snapshot = RegisterSna", "completion": "snapshot = RegisterSnapshot(GetCatalogSnapshot(relid)); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\tif (!pgstat_track_counts)\n\tpgstat_unlock_entry(entry_ref);\nvoid\n\tdbent->temp_files++;", "partial_line": "dbentry = pgstat_prep_data", "completion": "dbentry = pgstat_prep_database_pending(MyDatabaseId); <|endoftext|>"}
{"context": "\t\t\t\tif (WALK(jse->output))\n\t\t\t\t\treturn true;\n\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\tif (WALK(jt->on_error))", "partial_line": "case T_JsonTable", "completion": "case T_JsonTableColumn: <|endoftext|>"}
{"context": "\tif (parent_pd)\n\t}\n\tMemoryContextSwitchTo(oldcxt);\n\t\ttable_close(pd->reldesc, NoLock);\n\t\tResultRelInfo *resultRelInfo = proute->partitions[i];", "partial_line": "resultRelInfo->ri_FdwRoutine->EndForei", "completion": "resultRelInfo->ri_FdwRoutine->EndForeignInsert != NULL) <|endoftext|>"}
{"context": "\t}\nvoid\n{\n\tAssert(AllocSizeIsValid(max_required));\n\tif (xloginsert_cxt == NULL)", "partial_line": "\"WAL record constr", "completion": "\"WAL record construction\", <|endoftext|>"}
{"context": "\t\trootopaque = BTPageGetOpaque(rootpage);\n\t\tif (metad->btm_version < BTREE_NOVAC_VERSION)\n\t\tmetad->btm_root = rootblkno;\n\t\tmetad->btm_last_cleanup_num_heap_tuples = -1.0;\n\t\tMarkBufferDirty(rootbuf);", "partial_line": "XLo", "completion": "XLogBeginInsert(); <|endoftext|>"}
{"context": "\tLockRelId\theaprelid;\n\tint\t\t\troot_save_nestlevel;\n\troot_save_nestlevel = NewGUCNestLevel();\n\telse\n\tnumberOfAttributes = list_length(allIndexParams);", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "static const symbol s_3_228[2] = { 'a', 't' };\nstatic const symbol s_3_231[3] = { 'e', 'n', 't' };\nstatic const symbol s_3_235[2] = { 'a', 'u' };\nstatic const symbol s_3_240[4] = { 'i', 'r', 'e', 'u' };\nstatic const symbol s_3_251[5] = { 0xC3, 0xA1, 'v', 'e', 'u' };", "partial_line": "static const symbol s_3_255[4] = { 0xC3,", "completion": "static const symbol s_3_255[4] = { 0xC3, 0xAD, 'e', 'u' }; <|endoftext|>"}
{"context": "#endif\n  { ECPGconnect(__LINE__, 0, \"ecpg1_regression\" , NULL, NULL , NULL, 0); }\n#ifndef _MSC_VER\n#line 106 \"thread.pgc\"\n#line 107 \"thread.pgc\"", "partial_line": "if(", "completion": "if( sqlca.sqlcode != 0 ) <|endoftext|>"}
{"context": "\t{\n\t\tchildcmd = copyObject(*cmd);\n\t\tcolDef->inhcount = 1;\n\t\tcolDef->is_local = false;\n\t}", "partial_line": "childcmd", "completion": "childcmd = *cmd; <|endoftext|>"}
{"context": "\t\t\t\tcase TIMEOID:\n\t\tcase TIMEOID:\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t\t*cast_error = true; ", "partial_line": "retu", "completion": "return 0; <|endoftext|>"}
{"context": "\t\t\treturn false;\n\telse if (strcmp(param, \"unicode_column_linestyle\") == 0)\n\t\t\t;\n\t\t\trefresh_utf8format(&(popt->topt));\n\t\t{", "partial_line": "ret", "completion": "return false; <|endoftext|>"}
{"context": "\tif (vacrel->rel_pages < 2 * EAGER_SCAN_REGION_SIZE)\n\tif (!oldest_unfrozen_before_cutoff)\n\t\tvacrel->eager_scan_max_fails_per_region *\n\tBlockNumber orig_rel_pages,\n\tvacrel->relnamespace = get_namespace_name(RelationGetNamespace(rel));", "partial_line": "errcall", "completion": "errcallback.arg = vacrel; <|endoftext|>"}
{"context": "char *\n\tHeapTuple\ttup;\n\tSnapshot\tsnapshot = RegisterSnapshot(GetTransactionSnapshot());\n\t{\n\t\t\t\t\t\t\t generate_qualified_type_name(conForm->contypid),", "partial_line": "case", "completion": "case CONSTRAINT_FOREIGN: <|endoftext|>"}
{"context": "\t\tportal = SPI_cursor_open(NULL, qdesc->plan, argvalues, nulls,\n\t\tif (argc > 0)\n\t\t\t\t SPI_result_code_string(SPI_result));\n\t\tCurrentResourceOwner = oldowner;\n\t{", "partial_line": "SPIPlanPtr", "completion": "SPIPlanPtr\tplan; <|endoftext|>"}
{"context": "\t\t\t\t\t}\n\t\t\t\t\tcurrentSource = XLOG_FROM_STREAM;\n\t\t\t\t\t\t\t\t\t\t\t\t\twal_retrieve_retry_interval))\n\t\t\telog(DEBUG2, \"switched WAL source from %s to %s after %s\",\n\t\t\t\t{", "partial_line": "if (randAc", "completion": "if (randAccess) <|endoftext|>"}
{"context": "\t\t}\n\t\t\tnew_joininfo = list_append_unique_ptr(new_joininfo, rinfo);\n\t{\n\tupperrel->consider_startup = (root->tuple_fraction > 0);\n\tupperrel->cheapest_unique_path = NULL;", "partial_line": "Relids requir", "completion": "Relids required_outer) <|endoftext|>"}
{"context": "\t\t\tint\t\t\tnsupport;\n\t\t\tint16\t   *indoption;\n\t\t\tOid\t\t   *indcollation;\n\t\t\trel->rd_indextuple = (HeapTuple) palloc(len);\n\t\t\tif (fread(rel->rd_indextuple, 1, len, fp) != len)", "partial_line": "rel->rd_indextuple->t_data = (HeapTupleHeader) ((char *", "completion": "rel->rd_indextuple->t_data = (HeapTupleHeader) ((char *) rel->rd_indextuple + HEAPTUPLESIZE); <|endoftext|>"}
{"context": "\t\treturn REG_ETOOBIG;\n\t{\n\t\t\tbreak;\n\t\t\tbreak;\n\t\tcase '|':\t\t\t\t", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t restype, TEXTOID, -1,\n}\nassignSortGroupRef(TargetEntry *tle, List *tlist)\nbool\n{", "partial_line": "List", "completion": "ListCell   *l; <|endoftext|>"}
{"context": "#include \"utils/formatting.h\"\n#define\t\tPGLOCALE_SUPPORT_ERROR(provider) \\\n\t\t\t\t\t\t\t   ssize_t srclen, pg_locale_t locale);\n\t\t\t\t\t\t\t  ssize_t srclen, pg_locale_t locale);", "partial_line": "extern size_t strtitle_icu(char *ds", "completion": "extern size_t strtitle_icu(char *dst, size_t dstsize, const char *src, <|endoftext|>"}
{"context": "\t\t{\n\t\t\tint32\t\tmax_size = VARATT_EXTERNAL_GET_EXTSIZE(toast_pointer);\n\t\t\t\t\t\t\t\t  sliceoffset, slicelength);\n\t}\n\t\tif (tmp != attr)", "partial_line": "result = (struct varlena *) pallo", "completion": "result = (struct varlena *) palloc(attrsize + VARHDRSZ); <|endoftext|>"}
{"context": "\tparallel_vacuum_process_unsafe_indexes(pvs);\n\tparallel_vacuum_process_safe_indexes(pvs);\n\t}\n\t\tpg_atomic_add_fetch_u32(VacuumActiveNWorkers, 1);\n\t\tif (!indstats->parallel_workers_can_process)", "partial_line": "parallel_vacuum_process_one_index(pvs, pvs->ind", "completion": "parallel_vacuum_process_one_index(pvs, pvs->indrels[idx], indstats); <|endoftext|>"}
{"context": "\tOid\t\t   *nodeCollations = NULL;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  false)),\n\t}\n\t{\n\t\t{", "partial_line": "int", "completion": "int\t\t\tnumsortkeys; <|endoftext|>"}
{"context": "\tstream_bytes = txn->total_size;\n\t\tcase REORDER_BUFFER_CHANGE_INTERNAL_SPEC_INSERT:\n\t\t\t\t\tsz += sizeof(HeapTupleData);\n\t\t\t\tif (newtup)\n\t\t\t\t\tsz += sizeof(HeapTupleData);", "partial_line": "newlen = newtup-", "completion": "newlen = newtup->t_len; <|endoftext|>"}
{"context": "\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t estate->func->fn_input_collation,\n\t\tbool\t\tvalue;\n\treturn exec_stmts(estate, stmt->else_stmts);\n}", "partial_line": "exec_eval_cleanup(", "completion": "exec_eval_cleanup(estate); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tExprState *state,\nstatic bool ExecComputeSlotInfo(ExprState *state, ExprEvalStep *op);\nstatic void ExecInitWholeRowVar(ExprEvalStep *scratch, Var *variable,\nstatic void ExecInitSubscriptingRef(ExprEvalStep *scratch,\n\t\t\t\t\t\t\t\t   ExprState *state,", "partial_line": "ErrorSaveContext *escontext, boo", "completion": "ErrorSaveContext *escontext, bool omit_quotes, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tRECOVERY_TARGET_TIMELINE_LATEST)\n\t\t\t\t\t\tXLogRecPtr\tptr;\n\t\t\t\t\t\tif (fetching_ckpt)\n\t\t\t\t\t\t\ttli = RedoStartTLI;\n\t\t\t\t\t\thavedata = true;", "partial_line": "if (latestChunk", "completion": "if (latestChunkStart <= RecPtr) <|endoftext|>"}
{"context": "numeric_abbrev_abort(int memtupcount, SortSupport ssup)\n{\n\tif (abbr_card < nss->input_count / 10000.0 + 0.5)\n\t\tif (trace_sort)\n\t\t\t\t \" below threshold %f after \" INT64_FORMAT \" values (%d rows)\",", "partial_line": "return t", "completion": "return true; <|endoftext|>"}
{"context": "{ 6, s_1_14, -1, 1, 0},\nstatic const symbol s_2_5[6] = { 0xD1, 0x83, 0xD1, 0x8E, 0xD1, 0x89 };\nstatic const struct among a_2[8] =\nstatic const symbol s_4_9[4] = { 0xD1, 0x82, 0xD1, 0x8C };\nstatic const symbol s_4_23[6] = { 0xD0, 0xB9, 0xD1, 0x82, 0xD0, 0xB5 };", "partial_line": "static const symbol s_4_24[8] = { 0xD1, 0x83, 0xD", "completion": "static const symbol s_4_24[8] = { 0xD1, 0x83, 0xD0, 0xB9, 0xD1, 0x82, 0xD0, 0xB5 }; <|endoftext|>"}
{"context": "\treturn ExecProject(newProj);\n\treturn ExecProject(newProj);\n}\nExecInsert(ModifyTableContext *context,\n\t\t\t\t\t\t\t\t\t   &partRelInfo);", "partial_line": "resultRelInfo->ri_TrigDesc->tr", "completion": "resultRelInfo->ri_TrigDesc->trig_insert_before_row) <|endoftext|>"}
{"context": "\t\t}\n\t\t\tif (val->constisnull)\n\tif (elems)\n\t\topexpr = NULL;\n\t\tnulltest->nulltesttype = IS_NOT_NULL;", "partial_line": "nulltest->argisrow", "completion": "nulltest->argisrow = false; <|endoftext|>"}
{"context": "\tAssert(!TuplesortstateGetPublic(state)->haveDatum1);\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\nremoveabbrev_datum(Tuplesortstate *state, SortTuple *stups, int count)\n\treturn comparetup_datum_tiebreak(a, b, state);\n\tTuplesortDatumArg *arg = (TuplesortDatumArg *) base->arg;", "partial_line": "LogicalTapeWrite(tape, &writtenlen, siz", "completion": "LogicalTapeWrite(tape, &writtenlen, sizeof(writtenlen)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   \"expanded record\",\n\ttmptup.t_tableOid = InvalidOid;\n\terh->fstartptr = (char *) newtuple->t_data;\n\treturn EOHPGetRWDatum(&erh->hdr);\n\tExpandedRecordHeader *erh = (ExpandedRecordHeader *) eohptr;", "partial_line": "tupdesc = expanded_re", "completion": "tupdesc = expanded_record_get_tupdesc(erh); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t  scan_clauses,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttlist,\n\t\t\tplan = (Plan *) create_tidscan_plan(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t scan_clauses);\n\t\tcase T_ValuesScan:", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\tif (qual1 == NULL)\n\telse\nIndexInfo *\n\t\t\t  bool withoutoverlaps)\n\tn->ii_Unique = unique;", "partial_line": "n->conte", "completion": "n->content = content; <|endoftext|>"}
{"context": "static const symbol s_1_278[4] = { 'l', 'e', 'k', 'u' };\nstatic const struct among a_1[295] =\n{ 6, s_1_7, 6, 1, 0},\n{ 5, s_1_23, 22, 1, 0},\n{ 5, s_1_26, -1, 1, 0},", "partial_line": "{ 2,", "completion": "{ 2, s_1_27, -1, 1, 0}, <|endoftext|>"}
{"context": "{ 5, s_2_104, 103, 1, 0},\n{ 6, s_2_109, -1, 1, 0},\n{ 4, s_2_114, -1, 1, 0},\n{ 4, s_2_122, -1, 1, 0},\n{ 5, s_2_124, -1, 1, 0},", "partial_line": "{ 8,", "completion": "{ 8, s_2_128, 127, 3, 0}, <|endoftext|>"}
{"context": "\tif (request.cleanup)\n\tif (!conn->oauth_issuer || !conn->oauth_client_id)\n\t}\n\t\tif (!conn->oauth_issuer_id)\n\t\t\tlibpq_append_conn_error(conn, \"out of memory\");", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\tif (is_missing)\n\taclresult = object_aclcheck_ext(ForeignServerRelationId, serverid,\n\tOid\t\t\troleid = PG_GETARG_OID(0);\n\ttext\t   *priv_type_text = PG_GETARG_TEXT_PP(2);\n\tAclMode\t\tmode;", "partial_line": "Oid\t\t\troleid = PG_G", "completion": "Oid\t\t\troleid = PG_GETARG_OID(0); <|endoftext|>"}
{"context": "\tcn.raddr = raddr;\n\t\tereport(LOG,\n\tereport(elevel, \\\n\t\t\t  \\\n} while (0)", "partial_line": "if (argva", "completion": "if (argvar == NULL) { \\ <|endoftext|>"}
{"context": "\tcolindex = 0;\n\t{\n\t\t\tAssert(nscol->p_varno > 0);\n\t\t\tvar->location = location;\n\t\t{", "partial_line": "colinde", "completion": "colindex++; <|endoftext|>"}
{"context": "\tint\t\t\tnelem_alloc;\n\tdo\n\tint\t\t\tnsegs;\n\twhile (nbuckets < hctl->num_partitions)\n\t\tif (!hashp->dir)", "partial_line": "fprintf(stderr, \"", "completion": "fprintf(stderr, \"init_htab:\\n%s%p\\n%s%ld\\n%s%ld\\n%s%d\\n%s%ld\\n%s%u\\n%s%x\\n%s%x\\n%s%ld\\n\", <|endoftext|>"}
{"context": "\t\tcnt += 1;\n\t}\n\t\t\t\tdenom,\n\t\t\t\tndistinct;\n\t\t(double) f1 * (double) numrows / totalrows;", "partial_line": "if (ndisti", "completion": "if (ndistinct < (double) d) <|endoftext|>"}
{"context": "\tint\t\t\ti;\n\t}\n\tif (modulus1 < modulus2)\npartition_list_bsearch(FmgrInfo *partsupfunc, Oid *partcollation,\n\t\t\t\t\t\t\t\t\t\t\t\t partcollation[0],", "partial_line": "boundi", "completion": "boundinfo->kind[mid], <|endoftext|>"}
{"context": "\t\telse\n\t\t\tdef->compression = NULL;\n\t\t\t\t\t\t\t\t\t\t\t   makeString(cxt->relation->relname),\n\tAttrNumber\tparent_attno;\n\tTupleDesc\ttupleDesc;", "partial_line": "TupleConstr *c", "completion": "TupleConstr *constr; <|endoftext|>"}
{"context": "\t\tTcl_WrongNumArgs(interp, 1, objv,\n\t\tif (++i >= objc)\n\t\t}\n\t}\n\t\t\t\t\t\t\t\t\t\t spi_rc,", "partial_line": "return", "completion": "return my_rc; <|endoftext|>"}
{"context": "\tNameData\topfName;\n\t\t\t\t\t\t\t  ObjectIdGetDatum(amoid),\n\t\tereport(ERROR,\n\tvalues[Anum_pg_opfamily_opfname - 1] = NameGetDatum(&opfName);\n\tvalues[Anum_pg_opfamily_opfowner - 1] = ObjectIdGetDatum(GetUserId());", "partial_line": "referenced.objectId = na", "completion": "referenced.objectId = namespaceoid; <|endoftext|>"}
{"context": "\t\t\t*fasteqfunc = texteqfast;\n\t\t\t*fasteqfunc = int4eqfast;\n\t\t\tbreak;\n\treturn hashValue;\n}", "partial_line": "sta", "completion": "static uint32 <|endoftext|>"}
{"context": "{ 3, s_7_16, -1, 1, 0},\n{ 5, s_7_19, 16, 1, 0},\n{ 3, s_7_26, -1, 1, 0},\n{ 6, s_7_36, -1, 1, 0},\n{ 3, s_7_39, -1, 1, 0},", "partial_line": "{ 5, s_7_50, -1,", "completion": "{ 5, s_7_50, -1, 1, 0}, <|endoftext|>"}
{"context": "} NullingRelsMatch;\n} tlist_vinfo;\n\tPlannerInfo *root;\ntypedef struct\n{", "partial_line": "int", "completion": "int\t\t\trtoffset; <|endoftext|>"}
{"context": "        if (ret < 0) return ret;\n    }\n    if (z->c > z->lb) return 0;\nstatic int r_step_5m(struct SN_env * z) {\n    {   int ret = slice_del(z);", "partial_line": "if (ret < 0) r", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\tif (ret != STATUS_OK)\n}\n\t\t\t\t\t\t  mprefix, (unsigned int) r);\n\t\tinbuf.cBuffers = 1;\n\t\tInBuffers[0].pvBuffer = inputbuf;", "partial_line": "OutBuffer", "completion": "OutBuffers[0].pvBuffer = NULL; <|endoftext|>"}
{"context": "\tall_connections = this;\n\t\t\t realname ? realname : \"<DEFAULT>\",\n\tif (realname)\n\t}\n\t{", "partial_line": "conn_keywords[i] =", "completion": "conn_keywords[i] = \"port\"; <|endoftext|>"}
{"context": "\t\t\t\tnumSkipArrayKeys,\n\tAssert(scan->numberOfKeys);\n#ifdef DEBUG_DISABLE_SKIP_SCAN\n\t\tprev_numSkipArrayKeys = numSkipArrayKeys;\n\t\t\tbreak;", "partial_line": "get_opfamily_member(opfamily, opcin", "completion": "get_opfamily_member(opfamily, opcintype, opcintype, <|endoftext|>"}
{"context": "static JsonParseErrorType\n\t\tconst char *start = _state->result_start;\n\treturn JSON_SUCCESS;\nget_object_field_start(void *state, char *fname, bool isnull)\n\tbool\t\tget_next = false;", "partial_line": "_state->t", "completion": "_state->tresult = NULL; <|endoftext|>"}
{"context": "\tPartitionPruneContext context;\n\tif (!enable_partition_pruning || clauses == NIL)\n\tif (gcontext.contradictory)\n\tif (pruning_steps == NIL)\n\tcontext.exprcontext = NULL;", "partial_line": "get_matching_partitions(Partit", "completion": "get_matching_partitions(PartitionPruneContext *context, List *pruning_steps) <|endoftext|>"}
{"context": "}\n\tAttInMetadata *attinmeta;\n\telse if (call_state->trigdata)\n\t{\n\t\tattinmeta = TupleDescGetAttInMetadata(tupdesc);", "partial_line": "tupdesc", "completion": "tupdesc = NULL; <|endoftext|>"}
{"context": "\t\tcase PARTITION_STRATEGY_RANGE:\n\tsep = \"\";\n\t{\n\t\t\tchar\t   *attname;\n\t\t\tif (looks_like_function(partkey))", "partial_line": "keycoltyp", "completion": "keycoltype = exprType(partkey); <|endoftext|>"}
{"context": "\t\t\t\tpfree(arg2val);\n\telse if (typLen == -2)\n\t\telog(ERROR, \"unexpected typLen: %d\", typLen);\n\tSize\t\tlen;\n\telse", "partial_line": "res", "completion": "result = 0; <|endoftext|>"}
{"context": "\t\tFreeErrorData(edata);\nvoid\n\tReleaseCurrentSubTransaction();\n\tMemoryContextSwitchTo(oldcontext);\nPLy_spi_subtransaction_abort(MemoryContext oldcontext, ResourceOwner oldowner)", "partial_line": "PLyException", "completion": "PLyExceptionEntry *entry; <|endoftext|>"}
{"context": "\t\t   \"  -c, --client=NUM         number of concurrent database clients (default: 1)\\n\"\n\t\t   \"                           protocol for submitting queries (default: simple)\\n\"\n\t\t   \"  -r, --report-per-command report latencies, failures, and retries per command\\n\"\n\t\t   \"  --log-prefix=PREFIX      prefix for transaction time log file\\n\"\n\t\t   \"  --sampling-rate=NUM      fraction of transactions to log (e.g., 0.01 for 1%%)\\n\"", "partial_line": "p", "completion": "ptr++; <|endoftext|>"}
{"context": "static void dumpFunc(Archive *fout, const FuncInfo *finfo);\nstatic void dumpTableSchema(Archive *fout, const TableInfo *tbinfo);\nstatic void dumpIndexAttach(Archive *fout, const IndexAttachInfo *attachinfo);\nstatic DumpableObject *createBoundaryObjects(void);\nstatic void getTableData(DumpOptions *dopt, TableInfo *tblinfo, int numTables, char relkind);", "partial_line": "static const cha", "completion": "static const char *getFormattedTypeName(Archive *fout, Oid oid, OidOptions opts); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\t\t\t optarg);\n\t\t\t\tbackup_parse_compress_options(optarg, &compression_algorithm,\n\t\t\t\txlog_dir = pg_strdup(optarg);\n\t\t\tcase 2:", "partial_line": "ca", "completion": "case 6: <|endoftext|>"}
{"context": "\t\t\tVirtualTransactionId *newer_snapshots;\n\t\t\tint\t\t\tn_newer_snapshots;\n\t\t\t\t\t\t\t\t\t\t\t\t\t| PROC_IN_SAFE_IC,\n\t\t\t\t\tcontinue;\t\n\t\t\t\t\t\tbreak;", "partial_line": "bool chec", "completion": "bool check_rights, <|endoftext|>"}
{"context": "\t\t\t(pmState == PM_STARTUP || pmState == PM_RECOVERY ||\n\t\tmaybe_start_bgworkers();\n\tswitch (signal)\n\t\t\tPM_TOSTR_CASE(SIGCHLD);\n\t\t\tPM_TOSTR_CASE(SIGINT);", "partial_line": "#undef PM_TO", "completion": "#undef PM_TOSTR_CASE <|endoftext|>"}
{"context": "\t{\n\t\tpgaio_result_report(result, td, DEBUG1);\n\treturn result;\n\tBlockNumber first = td->smgr.blockNum;\n\t{", "partial_line": "affected_count = zeroed", "completion": "affected_count = zeroed_or_error_count; <|endoftext|>"}
{"context": "TupleDesc\nTupleDesc\nlookup_rowtype_tupdesc_domain(Oid type_id, int32 typmod, bool noError)\n\t{\n\t\ttypentry = lookup_type_cache(type_id,", "partial_line": "return lookup_rowtype_tupdesc_noerror(typent", "completion": "return lookup_rowtype_tupdesc_noerror(typentry->domainBaseType, <|endoftext|>"}
{"context": "\tmemset(inp_sqlda, 0, sizeof(sqlda_t));\n\tinp_sqlda->sqln = 1;\n#line 233 \"sqlda.pgc\"\n\t{ ECPGtrans(__LINE__, \"con2\", \"commit\");\n\tfree(outp_sqlda);", "partial_line": "strcpy(msg, \"di", "completion": "strcpy(msg, \"disconnect\"); <|endoftext|>"}
{"context": "\tif (!found)\n\t{\n\t\t\t\t\t\t\t\t\t\trelation->rd_locator.dbOid,\n\t\t\t\t\t\t\t\t\t\trelation->rd_id);\n\t\treturn;", "partial_line": "PredicateLockTID(Relation relation, ItemPointer t", "completion": "PredicateLockTID(Relation relation, ItemPointer tid, Snapshot snapshot, <|endoftext|>"}
{"context": "\t}\n\tstmt->oldthreadlocale = _configthreadlocale(_ENABLE_PER_THREAD_LOCALE);\n\tif (stmt->oldlocale == NULL)\n\t{\n\tsetlocale(LC_NUMERIC, \"C\");", "partial_line": "stmt->c", "completion": "stmt->command = prepname; <|endoftext|>"}
{"context": "\t\t\tMemoryContextSwitchTo(oldcontext);\n\t\t\t\tbreak;\n\treturn current_tuple_count;\n{\n\t\t\tsnapshot = RegisterSnapshot(snapshot);", "partial_line": "ProcessU", "completion": "ProcessUtility(pstmt, <|endoftext|>"}
{"context": "#include \"utils/pgstat_internal.h\"\nPgStat_CheckpointerStats PendingCheckpointerStats = {0};\n\tPgStatShared_Checkpointer *stats_shmem = &pgStatLocal.shmem->checkpointer;", "partial_line": "CHECKPOI", "completion": "CHECKPOINTER_ACC(num_timed); <|endoftext|>"}
{"context": "        case 39:\n            }\n                if (ret < 0) return ret;\n            break;\n        case 45:", "partial_line": "if (ret < 0)", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t{\n\t\t\"windows950\", PG_BIG5\n\t[PG_EUC_JP] = DEF_ENC2NAME(EUC_JP, 20932),\n\t[PG_LATIN7] = DEF_ENC2NAME(LATIN7, 0),\n\t[PG_LATIN10] = DEF_ENC2NAME(LATIN10, 0),", "partial_line": "[PG_KOI8R] =", "completion": "[PG_KOI8R] = DEF_ENC2NAME(KOI8R, 20866), <|endoftext|>"}
{"context": "\t\telse\n\t\t\treturn -1;\n\telse\nDatum\n\t\t\tPG_RETURN_NUMERIC(make_result(&const_one));", "partial_line": "PG_RETURN_NUMERIC(make_result(&con", "completion": "PG_RETURN_NUMERIC(make_result(&const_minus_one)); <|endoftext|>"}
{"context": "\t\tif (collid)\n}\n\tAssert(mcvlist != NULL);\n\t\t\tFmgrInfo\topproc;\n\t\t\tfmgr_info(get_opcode(expr->opno), &opproc);", "partial_line": "if (item->isnull[idx] ||", "completion": "if (item->isnull[idx] || cst->constisnull) <|endoftext|>"}
{"context": "void\nvoid\nvoid\n\t\t\t\t\t\t  uint32 wantLength, TimeLineID currTLI)\n{", "partial_line": "stat", "completion": "state->readLen != 0 && <|endoftext|>"}
{"context": "\t\tif (oldtup)\n\t\t\tCatalogTupleDelete(sdepRel, &oldtup->t_self);\n\t\tvalues[Anum_pg_shdepend_classid - 1] = ObjectIdGetDatum(classid);\n\t\tCatalogTupleInsert(sdepRel, oldtup);\n}", "partial_line": "sdepRel = table_open(SharedDepe", "completion": "sdepRel = table_open(SharedDependRelationId, RowExclusiveLock); <|endoftext|>"}
{"context": "\t\tpg_fatal(\"Unexpected result code %s from pipeline sync\",\n\t\tpg_fatal(\"failed to send query: %s\", PQerrorMessage(conn));\n\t{\n\t\t{\n\t\t\tcase PGRES_SINGLE_TUPLE:", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "#endif\n\tint\t\t\ti,\n\tbuffer->maxitems = (64 * 1024L) / sizeof(ItemPointerData);\n\t\t\tif (!OidIsValid(typentry->cmp_proc_finfo.fn_oid))\n\t\t\t\t\t\t errmsg(\"could not identify a comparison function for type %s\",", "partial_line": "retur", "completion": "return buffer; <|endoftext|>"}
{"context": "}\n\tHASHCTL\t\tctl;\n\t\t\t\t\t\t\t&ctl,\n\trels_list = list_make1_oid(parentrelId);\n\t\t\tOid\t\t\tchild_oid = lfirst_oid(lc);", "partial_line": "bo", "completion": "bool\t\tfound; <|endoftext|>"}
{"context": "\t\t\t\t\tAssert(!restriction_is_or_clause(ri));\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t}", "partial_line": "static", "completion": "static List * <|endoftext|>"}
{"context": "static const symbol s_2_2019[6] = { 'i', 'n', 'j', 'e', 0xC5, 0xA1 };\n{ 6, s_2_11, 3, 95, 0},\n{ 7, s_2_21, 3, 77, 0},\n{ 6, s_2_38, 34, 88, 0},\n{ 5, s_2_40, 3, 120, 0},", "partial_line": "{ 6, s_2_43, 3,", "completion": "{ 6, s_2_43, 3, 94, 0}, <|endoftext|>"}
{"context": "\tlobj_fd = lo_open(conn, lobjId, INV_WRITE);\n\t{\n\tlo_close(conn, lobj_fd);\nstatic void\n\tint\t\t\tlobj_fd;", "partial_line": "lobj_fd = lo_ope", "completion": "lobj_fd = lo_open(conn, lobjId, INV_READ); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tReorderBufferTXN *txn, XLogRecPtr commit_lsn);\n\t\t\t\t\t\t\t\t  ReorderBufferTXN *txn);\nstatic void pgoutput_stream_abort(struct LogicalDecodingContext *ctx,\n\t\t\t\t\t\t\t\t\t\tReorderBufferTXN *txn, XLogRecPtr prepare_lsn);", "partial_line": "bool se", "completion": "bool send_origin); <|endoftext|>"}
{"context": "\tPG_RETURN_FULLTRANSACTIONID(topfxid);\nDatum\n\tpg_snapshot *snap;\n\tsnap->nxip = nxip;\n\t\tsnap->xip[i] =", "partial_line": "pg_snapsh", "completion": "pg_snapshot *snap; <|endoftext|>"}
{"context": "{\n\tpq_putemptymessage(PqMsg_CopyDone);\n\tTupleDesc\ttupdesc;\nstatic void\n\tListCell   *lc;", "partial_line": "TupleDescInitBui", "completion": "TupleDescInitBuiltinEntry(tupdesc, (AttrNumber) 2, \"spclocation\", TEXTOID, -1, 0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t expected_type_id, -1,\n\t\t\t\t\t errmsg(\"parameter $%d of type %s cannot be coerced to the expected type %s\",\n\texprstates = ExecPrepareExprList(params, estate);\n\t\tprm->value = ExecEvalExprSwitchContext(n,\n}", "partial_line": "HASHC", "completion": "HASHCTL\t\thash_ctl; <|endoftext|>"}
{"context": "\t\t\t\t\t errdetail(\"Index \\\"%s\\\" is already attached to another index.\",\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t\t\t errdetail(\"Index \\\"%s\\\" is not an index on any partition of table \\\"%s\\\".\",\n\t\tchildInfo = BuildIndexInfo(partIdx);", "partial_line": "RelationGet", "completion": "RelationGetDescr(parentTbl), <|endoftext|>"}
{"context": "\t\tdterr = ParseISO8601Number(str, &str, &val, &fval);\n\t\t\treturn dterr;\n\t\t\tswitch (unit)\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\0':", "partial_line": "datepart =", "completion": "datepart = false; <|endoftext|>"}
{"context": "\t\telse if (op_strategy == BTLessEqualStrategyNumber ||\n\t\t{\n\t\t\tListCell   *righttypes_cell;\n\t\t\t\telog(ERROR, \"unexpected strategy number %d\", op_strategy);\n\t\t\trc->cmptype = (CompareType) op_strategy;", "partial_line": "rc->inputcollids = list_cop", "completion": "rc->inputcollids = list_copy_head(clause->inputcollids, <|endoftext|>"}
{"context": "\t\tchar\t  **strfrms;\n\t\tfor (int i = num_skip; i < nframes; i++)\n\tCHECK_STACK_DEPTH();\n}\n\tErrorData  *edata = &errordata[errordata_stack_depth];", "partial_line": "ErrorData  *edata = &", "completion": "ErrorData  *edata = &errordata[errordata_stack_depth]; <|endoftext|>"}
{"context": "\t\tif (state == NULL)\n\t\t\tbytea\t   *delim = PG_GETARG_BYTEA_PP(2);\n\tPG_RETURN_CSTRING(TextDatumGetCString(txt));\n\tStringInfo\tbuf = (StringInfo) PG_GETARG_POINTER(0);\ntextsend(PG_FUNCTION_ARGS)", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\tif (stmt->whereClause)\n\t\t\t\t\t\t\t  !concurrent,\n\tComputeIndexAttrs(indexInfo,\n\t\t\t\t\t  typeIds, collationIds, opclassIds, opclassOptions,\n\t\t\t\t\t  stmt->excludeOpNames, tableId,", "partial_line": "else i", "completion": "else if (stmt->excludeOpNames) <|endoftext|>"}
{"context": "\t\t\t\tObjectIdGetDatum(targetRelId));\n\tif (force_non_historic)\n\tif (snapshot)\n\treturn pg_class_tuple;\n}", "partial_line": "Memory", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "\tsave_namespace = pstate->p_namespace;\n\tpstate->p_namespace = save_namespace;\nstatic ParseNamespaceItem *\ntransformRangeSubselect(ParseState *pstate, RangeSubselect *r)\n{", "partial_line": "coldeflist = (List *)", "completion": "coldeflist = (List *) lsecond(pair); <|endoftext|>"}
{"context": "\tif (lobjId == 0)\n\tclose(fd);\n\treturn lobjId;\n\tint\t\t\tnbytes;\n\tbuf = malloc(len + 1);", "partial_line": "nread =", "completion": "nread = 0; <|endoftext|>"}
{"context": "NonFiniteTimestampTzPart(int type, int unit, char *lowunits,\n\t\t\t\t errmsg(\"unit \\\"%s\\\" not recognized for type %s\",\n\t\tcase DTK_MILLISEC:\n\t\tcase DTK_CENTURY:\n\t\t\t\treturn get_float8_infinity();", "partial_line": "de", "completion": "default: <|endoftext|>"}
{"context": "\t\t\t\t\t NULL);\t\t\n\tnode->pscan_len = table_parallelscan_estimate(node->ss.ss_currentRelation,\n}\n\ttable_parallelscan_initialize(node->ss.ss_currentRelation,\n}", "partial_line": "ExecSeqSc", "completion": "ExecSeqScanInitializeWorker(SeqScanState *node, <|endoftext|>"}
{"context": "\t0x105A, 0x109F,\n\t0x12AF, 0x12AF,\n\t0x1715, 0x171F,\n\t0x176D, 0x176D,\n\t0x1771, 0x1771,", "partial_line": "0x1F16, 0", "completion": "0x1F16, 0x1F17, <|endoftext|>"}
{"context": "\t\t\t\tXLogRegisterBuffer(3, parent->buffer, REGBUF_STANDARD);\n\t\tif (saveCurrent.buffer != InvalidBuffer)\n\t\t\tPage\t\tpage = BufferGetPage(saveCurrent.buffer);\n\t\t\tPageSetLSN(parent->page, recptr);\n\t\tUnlockReleaseBuffer(newLeafBuffer);", "partial_line": "spgMatchNodeAction(Relation", "completion": "spgMatchNodeAction(Relation index, SpGistState *state, <|endoftext|>"}
{"context": "\t\t\t\t\t*tobeinserted_p = mallocedval;\n\t\t\t\t\tif (!mallocedval)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\tecpg_free(str);\n\t\t\t\t\t\t\treturn false;", "partial_line": "ecpg_fr", "completion": "ecpg_free(str); <|endoftext|>"}
{"context": "static XLogRecPtr sentPtr = InvalidXLogRecPtr;\nstatic StringInfoData tmpbuf;\nstatic volatile sig_atomic_t got_STOPPING = false;\n} WalTimeSample;\n\tXLogRecPtr\tlast_lsn;", "partial_line": "static void InitWa", "completion": "static void InitWalSenderSlot(void); <|endoftext|>"}
{"context": "            }\n                    z->lb = z->c; z->c = z->l;\n                        if (ret == 0) goto lab4;\n    lab3:\n            }", "partial_line": "z->c", "completion": "z->c = c9; <|endoftext|>"}
{"context": "ipv6eq(struct sockaddr_in6 *a, struct sockaddr_in6 *b)\n\t\tsize_t\t\thlen = strlen(actual_hostname);\n\tif (!port->remote_hostname)\n\t{\n\t\tport->remote_hostname_errcode = ret;", "partial_line": "(struct sock", "completion": "(struct sockaddr_in6 *) &port->raddr.addr)) <|endoftext|>"}
{"context": "\t\t\t\t\t errmsg(\"%s option cannot be granted back to your own grantor\",\n\t\tHeapTuple\tauthmem_tuple;\n\t\t\tObjectIdGetDatum(roleid);\n\t\tnew_record[Anum_pg_auth_members_grantor - 1] =\n\t\t\t\t\t\t\t\t\t\tObjectIdGetDatum(grantorId));", "partial_line": "Form_p", "completion": "Form_pg_auth_members authmem_form; <|endoftext|>"}
{"context": "\ts = str;\n\t\ts++;\n\t\tif (!line_decode(s + 1, str, line, escontext))\n\t\t\tPG_RETURN_NULL();\n\t\t\t\t\t\t escontext))", "partial_line": "char\t   *astr = float8", "completion": "char\t   *astr = float8out_internal(line->A); <|endoftext|>"}
{"context": "\t\t\tstatus = (AH->WorkerJobRestorePtr) (AH, te);\n\t\telse\nstatic bool\n\t\t\tpg_fatal(\"a worker process died unexpectedly\");\n\t\tParallelSlot *slot = &pstate->parallelSlot[worker];", "partial_line": "status = par", "completion": "status = parseWorkerResponse(AH, te, msg); <|endoftext|>"}
{"context": "\t{\n\t\tfor (i = 0; i < sizeof(b2c3) / (sizeof(unsigned short) * 2); i++)\n\t\t{\n\t\t\t\t*lc = LC_CNS11643_3;\n\t\t\t}", "partial_line": "return cns | 0", "completion": "return cns | 0x8080; <|endoftext|>"}
{"context": "\t\tif (tindex != 0)\n\tdecomp = get_code_decomposition(entry, &dec_size);\n\treturn size;\n\t{\n\t}", "partial_line": "const pg_unicode_de", "completion": "const pg_unicode_decomposition *entry; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\treturned_events++;\n}\nWaitEventSetCanReportClosed(void)\nlatch_sigurg_handler(SIGNAL_ARGS)", "partial_line": "#ifdef WAIT_", "completion": "#ifdef WAIT_USE_SELF_PIPE <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\t*op->resnull = fcinfo->isnull;\n\t\t\tEEO_NEXT();\n\t\t{\n\t\t\t\tif (!fcinfo->isnull && DatumGetBool(result))", "partial_line": "ExecEvalCurrentOfExpr(s", "completion": "ExecEvalCurrentOfExpr(state, op); <|endoftext|>"}
{"context": "#define SLOTSYNC_RESTART_INTERVAL_SEC 10\n\tReplicationSlotInvalidationCause invalidated;\nstatic bool\n\t\t\t\t\t\t bool *remote_slot_precedes)\n\t\tTransactionIdPrecedes(remote_slot->catalog_xmin,", "partial_line": "slot->d", "completion": "slot->data.catalog_xmin)) <|endoftext|>"}
{"context": "\tscram_get_mechanisms,\n} scram_state_enum;\n{\n\tconst char *username;\t\t\n\tchar\t   *salt;\t\t\t", "partial_line": "uint8\t\tSer", "completion": "uint8\t\tServerKey[SCRAM_MAX_KEY_LEN]; <|endoftext|>"}
{"context": "\tint\t\t\tdestbitsleft,\n\tresult = (VarBit *) palloc(rlen);\n\tSET_VARSIZE(result, rlen);\n\tVARBITLEN(result) = typmod;\n\tsrcbitsleft = Min(srcbitsleft, destbitsleft);", "partial_line": "des", "completion": "destbitsleft -= 8; <|endoftext|>"}
{"context": "\t\t\tif (!OidIsValid(typrelid))\n\t\t\t\tbreak;\n\t\t{\n\t\t\t\tbreak;\nquote_identifier(const char *ident)", "partial_line": "bool", "completion": "bool\t\tsafe; <|endoftext|>"}
{"context": "\tif (PQresultStatus(res) != PGRES_TUPLES_OK)\n\t\t\t\t\t\t\"the primary server: %s\",\n\t\t\t\t\t\tpchomp(PQerrorMessage(conn->streamConn)))));\n\t*len = PQgetlength(res, 0, 1);\n{", "partial_line": "if (PQconsumeInp", "completion": "if (PQconsumeInput(conn->streamConn) == 0) <|endoftext|>"}
{"context": "socket_putmessage_noblock(char msgtype, const char *s, size_t len)\npq_putmessage_v2(char msgtype, const char *s, size_t len)\n\tDWORD\t\tretsize;\n\t\tinterval = 1;\t\t\t\n\t\t\t\t (LPVOID) &ka,", "partial_line": "(errmsg(\"%s(%s)", "completion": "(errmsg(\"%s(%s) failed: error code %d\", <|endoftext|>"}
{"context": "\t\t\t\t\t\tstmt->partbound != NULL,\n\t\t\tcooked->attnum = attnum;\n\t\t\tcookedDefaults = lappend(cookedDefaults, cooked);\n\t{\n\t}", "partial_line": "Invalid", "completion": "InvalidOid, <|endoftext|>"}
{"context": "\tref = GetPrivateRefCountEntry(buffer, false);\n\t}\n\t\thash_search(PrivateRefCountHash, &buffer, HASH_REMOVE, &found);\n\t\tPrivateRefCountOverflowed--;\n\t\tfalse \\", "partial_line": "BufferI", "completion": "BufferIsLocal(bufnum) ? \\ <|endoftext|>"}
{"context": "\t0xFB3F, 0xFB3F,\n\t0xFB45, 0xFB45,\n\t0xFD40, 0xFD4F,\n\t0xFE53, 0xFE53,\n\t0xFF00, 0xFF00,", "partial_line": "0xFFDD, 0x", "completion": "0xFFDD, 0xFFDF, <|endoftext|>"}
{"context": "\t\t\t(total_size / (1024 * 1024)),\nstatic bool\nskipfile(const char *fn)\n\tPageHeader\theader = (PageHeader) buf.data;\n\t\tif (r != BLCKSZ)", "partial_line": "if (csum !=", "completion": "if (csum != header->pd_checksum) <|endoftext|>"}
{"context": "\tstate->bs_emptyTupleLen = 0;\n\tif (tablePages > 0)\nstatic void\nterminate_brin_buildstate(BrinBuildState *state)\n\tBlockNumber scanNumBlks;", "partial_line": "if (heapBl", "completion": "if (heapBlk + state->bs_pagesPerRange > heapNumBlks) <|endoftext|>"}
{"context": "\t\t\t\t\t unsigned truncation_block_length);\n\t\t\t\t\t\t size_t *bytes_done, void *data, size_t length);\n\t\t\t\t\t\t\t\t BlockNumber blkno,\n\t\t\t\t\t\t\t\t uint16 *expected_checksum);\n{", "partial_line": "bool\t\tmat", "completion": "bool\t\tmatch_prefix; <|endoftext|>"}
{"context": "\tErrorData  *edata;\n\tfor (econtext = error_context_stack;\n\t\t econtext != NULL;\n\tint\t\t\tfd,\n\t}", "partial_line": "\"01234", "completion": "\"0123456789_\" <|endoftext|>"}
{"context": "\t\treturn PLPGSQL_RC_RETURN;\n\t\testate->retval = (Datum) 0;\n\t\testate->rettype = VOIDOID;\n\t\t\t\t errmsg(\"cannot use RETURN NEXT in a non-SETOF function\")));\n\t\t\t\t\ttuplestore_putvalues(estate->tuple_store, tupdesc,", "partial_line": "instantiate_em", "completion": "instantiate_empty_record_variable(estate, rec); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"invalid length in external bit string\")));\n\t\t\t\t\t\tatttypmod)));\n\tVARBITLEN(result) = bitlen;\n\tPG_RETURN_VARBIT_P(result);\n\tpq_sendint32(&buf, VARBITLEN(s));", "partial_line": "FuncExpr   *expr = re", "completion": "FuncExpr   *expr = req->fcall; <|endoftext|>"}
{"context": "\tqry->hasWindowFuncs = pstate->p_hasWindowFuncs;\n\tassign_query_collations(pstate, qry);\n}\n\tif ((stmt->options & CURSOR_OPT_SCROLL) &&\n\t\t\t\t errmsg(\"cannot specify both %s and %s\",", "partial_line": "errmsg(\"DECLARE CURSOR must not", "completion": "errmsg(\"DECLARE CURSOR must not contain data-modifying statements in WITH\"))); <|endoftext|>"}
{"context": "#ifdef ENABLE_GSS\n#endif\n};\n#ifdef USE_BSD_AUTH\n\t\"bsd\",", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\t\tnewedata->detail_log = pstrdup(newedata->detail_log);\n\t\tnewedata->column_name = pstrdup(newedata->column_name);\n}\n\tif (edata->message)\n\tErrorData  *newedata;", "partial_line": "if (edata-", "completion": "if (edata->backtrace) <|endoftext|>"}
{"context": "{ 7, s_2_1732, 1731, 121, 0},\n{ 4, s_2_1747, 1746, 128, 0},\n{ 3, s_2_1754, 1746, 113, 0},\n{ 5, s_2_1757, 1754, 112, 0},\n{ 8, s_2_1782, 1780, 106, 0},", "partial_line": "{ 4, s_2", "completion": "{ 4, s_2_1818, 1813, 39, 0}, <|endoftext|>"}
{"context": "\t\t\t\t\t\t LZ4F_getErrorName(status));\n\t\t\t\tchar\t   *readend;\n\t\t\t\t\t\t\t\t\t\t\t readp, &read_size, &dec_opt);\n\t\t\t\tpg_fatal(\"could not free LZ4 decompression context: %s\",\n#endif", "partial_line": "if ((segno > high_", "completion": "if ((segno > high_segno) || <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\"v_scannulls\");\n\t\t\t\t\t\t\t\t\t  StructTupleTableSlot,\n\t\t\t\t\t\t\t\t\tFIELDNO_TUPLETABLESLOT_VALUES,\n\tv_aggvalues = l_load_struct_gep(b,\n\t\t\t\t\t\t\t\t   StructExprContext,", "partial_line": "FIELDNO_EXP", "completion": "FIELDNO_EXPRCONTEXT_AGGNULLS, <|endoftext|>"}
{"context": "\t\tpg_wchar\tuchar = utf8_to_unicode(p);\n\tinput_chars[i] = (pg_wchar) '\\0';\n\toutput_chars = unicode_normalize(form, input_chars);\n\tUnicodeNormalizationForm form;\n\tUnicodeNormalizationQC quickcheck;", "partial_line": "if (quickcheck", "completion": "if (quickcheck == UNICODE_NORM_QC_YES) <|endoftext|>"}
{"context": "\tdelta += ((float8) b->a - (float8) a->a);\n\tPG_RETURN_FLOAT8(delta);\n{\n\tmacaddr8   *a = PG_GETARG_MACADDR8_P(0);\n\tint\t\t\tlen;", "partial_line": "l", "completion": "lenb; <|endoftext|>"}
{"context": "                if (ret < 0) return ret;\n    {   int mlimit4;\n        mlimit4 = z->lb; z->lb = z->I[1];\n                        if (ret < 0) return ret;\n                }", "partial_line": "if (ret =", "completion": "if (ret == 0) goto lab8; <|endoftext|>"}
{"context": "\tif (*length == 2 && ret_str[0] == '<' && ret_str[1] == '>')\n\tpg_strtok_ptr = local_str;\ndebackslash(const char *token, int length)\n\t\tlength--;\n}", "partial_line": "#define O", "completion": "#define OTHER_TOKEN (1000000 + 4) <|endoftext|>"}
{"context": "\t{\n\tappendStringInfoChar(&buf, ':');\n\tif (MyProcPort)\n\tif (MyProcPort)\n\t\tappendJSONKeyValue(&buf, \"dbname\", MyProcPort->database_name, true);", "partial_line": "appendJSONKeyValueFmt(&", "completion": "appendJSONKeyValueFmt(&buf, \"pid\", false, \"%d\", MyProcPid); <|endoftext|>"}
{"context": "\t\tcontext.inserted_sublink = false;\n\t{\n\t\tCurrentOfExpr *cexpr = (CurrentOfExpr *) node;\n\t\t}\n\t\tQuery\t   *newnode;", "partial_line": "cont", "completion": "context->sublevels_up++; <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"being rotated.\"),\n\t\t\tGUC_UNIT_KB\n\t\tFUNC_MAX_ARGS, FUNC_MAX_ARGS, FUNC_MAX_ARGS,\n\t},\n\t\t{\"max_index_keys\", PGC_INTERNAL, PRESET_OPTIONS,", "partial_line": "GUC_NOT_IN_SAMPLE | GUC_DISA", "completion": "GUC_NOT_IN_SAMPLE | GUC_DISALLOW_IN_FILE <|endoftext|>"}
{"context": "{\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\toldcontext = MemoryContextSwitchTo(base->maincontext);\n\t\t\t\t\t\t\t\tfalse,\t\n\t\t\t\t\t\t\t\tbase->nKeys,", "partial_line": "base", "completion": "base->arg = arg; <|endoftext|>"}
{"context": "{\n\tif (!HeapTupleIsValid(typeTuple))\n\t\t\t\t\t\t\t\ttypeTuple,\n\t\t{\n\t\t\t\t\t\t\t\t\t  datum,", "partial_line": "int32", "completion": "int32\t\ttypmod = -1; <|endoftext|>"}
{"context": "static bool\n\tList\t   *groupexprs = get_sortgrouplist_exprs(groupClause, targetList);\n\t{\n\t\tList\t   *partexprs = input_rel->partexprs[cnt];\n\t\tforeach(lc, partexprs)", "partial_line": "if (fou", "completion": "if (found) <|endoftext|>"}
{"context": "\tif (reset)\n\t\tset_ps_display(\"\");\n\t\tshutdown = false;\n\tCheckpointStats.ckpt_start_t = GetCurrentTimestamp();\n\t\tLWLockAcquire(ControlFileLock, LW_EXCLUSIVE);", "partial_line": "UpdateCo", "completion": "UpdateControlFile(); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tnitems, true);\n\tBuffer\t\tbuffer;\n\tgvs.strategy = info->strategy;\n\t{\n\tgvs.result = stats;", "partial_line": "RBM_NORMAL, in", "completion": "RBM_NORMAL, info->strategy); <|endoftext|>"}
{"context": "\t\t\t\t\tinfo->pid = checkProc->pid;\n\t\t\t\t\t(*nSoftEdges)++;\n\t\t\t}\n\t}\nExpandConstraints(EDGE *constraints,", "partial_line": "int nConstr", "completion": "int nConstraints) <|endoftext|>"}
{"context": "#include \"access/transam.h\"\n#include \"catalog/namespace.h\"\n{", "partial_line": "return RL", "completion": "return RLS_NONE; <|endoftext|>"}
{"context": "\t\tint\t\t\trc;\n\t\tswitch (stmt->cmd_type)\n\t\t{\n\t\t\t\trc = exec_stmt_block(estate, (PLpgSQL_stmt_block *) stmt);\n\t\t\t\trc = exec_stmt_if(estate, (PLpgSQL_stmt_if *) stmt);", "partial_line": "case P", "completion": "case PLPGSQL_STMT_CASE: <|endoftext|>"}
{"context": "\tDatum\t\tvalues[INDEX_MAX_KEYS];\n\tbool\t\tisnull[INDEX_MAX_KEYS];\n\t\t\t\t\t\t\t\t\t\tALLOCSET_DEFAULT_SIZES);\n\told_context = MemoryContextSwitchTo(ind_context);\n\t\testate = CreateExecutorState();", "partial_line": "exprnulls = (bool *) palloc(num", "completion": "exprnulls = (bool *) palloc(numrows * attr_cnt * sizeof(bool)); <|endoftext|>"}
{"context": "\tcode = comma;\n\tunary_delim = false;\n    case '-':\n\tunary_delim = true;\n    case '>':", "partial_line": "case", "completion": "case '<': <|endoftext|>"}
{"context": "\tpq_sendint(&buf, state->cursor, 4);\n\tAssert(AggCheckCallContext(fcinfo, NULL));\n}\n\t\tPG_RETURN_TEXT_P(cstring_to_text_with_len(&state->data[state->cursor],\n\t\tbool\t\ttypIsVarlena;", "partial_line": "getTypeOutputInfo(valtype,", "completion": "getTypeOutputInfo(valtype, &typOutput, &typIsVarlena); <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\telse\n\t\t\t\telog(ERROR, \"expected single-column result descriptor for non-composite SETOF result\");\n\t\t\ttuplestore_begin_heap(rsi->allowedModes & SFRM_Materialize_Random,\n\t\t\t\t\t\t\t\t  \"PL/Perl return_next temporary cxt\",", "partial_line": "ALLOCSET_DEF", "completion": "ALLOCSET_DEFAULT_SIZES); <|endoftext|>"}
{"context": "\t\t\treturn false;\n\tif (EligibleForRelationFastPath(locktag, lockmode) &&\n\t\tLWLockAcquire(&MyProc->fpInfoLock, LW_EXCLUSIVE);\n\t\t{\n\t\t\tRemoveLocalLock(locallock);", "partial_line": "partitionLock = LockHas", "completion": "partitionLock = LockHashPartitionLock(locallock->hashcode); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\tNode\t   *save_case_val;\n\t\t\t\tsave_case_val = context->case_val;\n\t\t\t\tconst_true_cond = false;\n\t\t\t\t\t\tConst\t   *const_input = (Const *) casecond;", "partial_line": "co", "completion": "context); <|endoftext|>"}
{"context": "\t\tMemoryContext oldContext = MemoryContextSwitchTo(state1->mcontext);\n\t\tAssert(state1->element_type == state2->element_type);\n\t\t\t\t\t\t\t\t\t\t\t\t state1->alen * sizeof(Datum));\n\t\tfor (int i = 0; i < state2->nelems; i++)\n\t\t\t\t\tdatumCopy(state2->dvalues[i],", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\tif (val < 0)\n\t{\n\t{\n\tif (val == 0)\n\tif (ndigits == 0)", "partial_line": "*result", "completion": "*result = 0; <|endoftext|>"}
{"context": "{ 4, s_2_608, 604, 129, 0},\n{ 8, s_2_610, 608, 139, 0},\n{ 4, s_2_618, 604, 134, 0},\n{ 5, s_2_626, 625, 124, 0},\n{ 3, s_2_630, -1, 123, 0},", "partial_line": "{ 4, s_2_640, 63", "completion": "{ 4, s_2_640, 634, 113, 0}, <|endoftext|>"}
{"context": "    int among_var;\n        among_var = find_among(z, a_1, 3);\n        switch (among_var) {\n                }\n            case 3:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "#endif\nstatic int\tpg_GSS_checkauth(Port *port);\nstatic int\tpg_GSS_recvauth(Port *port);\n\t\t\t\t\t\t\t size_t accountnamesize,\n\tchar\t   *cdetail;", "partial_line": "errstr = gettex", "completion": "errstr = gettext_noop(\"authentication failed for user \\\"%s\\\": host rejected\"); <|endoftext|>"}
{"context": "    int among_var;\n    while(1) {\n        z->bra = z->c;\n        switch (among_var) {\n                {   int ret = slice_from_s(z, 2, s_1);", "partial_line": "c", "completion": "case 3: <|endoftext|>"}
{"context": "\t\tPortal\t\tportal = hentry->portal;\n\t\t\t\t}\n\t\t\t}\nvoid\n{", "partial_line": "if (portal->porta", "completion": "if (portal->portalPinned) <|endoftext|>"}
{"context": "\t\t\t\tsimple = simplify_function(outfunc,\n\t\t\t\t\t\t\t\t\t\t   context);\n\t\t\t\tif (simple)\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tInvalidOid,\n\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "partial_line": "tr", "completion": "true)); <|endoftext|>"}
{"context": "\t\t\t\t\tgoto bad_argument;\n\t\t\t\tconfig.stats_per_record = false;\n\t\t\tcase 1:\n\t\t\t\t\t \"-B/--block\", \"-R/--relation\");\n\tif (waldir != NULL)", "partial_line": "waldir = di", "completion": "waldir = directory; <|endoftext|>"}
{"context": "\tappendPQExpBuffer(q, \"    LEXIZE = %s );\\n\",\n\tappendPQExpBuffer(delq, \"DROP TEXT SEARCH TEMPLATE %s;\\n\",\n\t\t\t\t\t\t\t\t  .createStmt = q->data,\n}\n\tchar\t   *qcfgname;", "partial_line": "char", "completion": "char\t   *nspname; <|endoftext|>"}
{"context": "\t}\n\twhile (n > 0)\n\t\tfor (i = 0; i < n; i++)\n\treturn rc;\n\t{", "partial_line": "expr->expr_rwopt = PLPGSQL_R", "completion": "expr->expr_rwopt = PLPGSQL_RWOPT_UNKNOWN; <|endoftext|>"}
{"context": "{\n\tPG_RETURN_INT16(arg1 << arg2);\n}\n}\ngenerate_series_step_int4(PG_FUNCTION_ARGS)", "partial_line": "in", "completion": "int32\t\tresult; <|endoftext|>"}
{"context": "\t\t{\n\t}\n\tuint32\t\tidsubst = 0;\n\t\tptr = line;\n\t\t\t\t{", "partial_line": "state = TR", "completion": "state = TR_WAITSUBS; <|endoftext|>"}
{"context": "\t\t{\n\t\telse if (TailMatches(\"GRANT\"))\n\t\telse if (TailMatches(\"REVOKE\", \"ADMIN|INHERIT|SET\", \"OPTION\", \"FOR\"))\n\t\tCOMPLETE_WITH(\"ON PARAMETER\", \"OPTION FOR\");\n\t\tCOMPLETE_WITH(\"TO\");", "partial_line": "TailMatches(\"REVOKE\", \"GRANT\"", "completion": "TailMatches(\"REVOKE\", \"GRANT\", \"OPTION\", \"FOR\", MatchAny)) <|endoftext|>"}
{"context": "#endif\t\t\t\t\t\t\t\n\tlong\t\tsqlabc;\n\t\tint\t\t\tsqlerrml;\n#line 20 \"code100.pgc\"\n#line 22 \"code100.pgc\"", "partial_line": "if (sqlca.sqlco", "completion": "if (sqlca.sqlcode) printf(\"%ld:%s\\n\",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); <|endoftext|>"}
{"context": "\t\t\t\t\telse if (conn->send_appname &&\n\t\t\t\t\t\tif (sqlstate &&\n\t\t\t\t\t\t\tPQclear(res);\n\t\t\t\t\tgoto error_return;\n\t\t\t\t\t\tconn->status = CONNECTION_OK;", "partial_line": "libpq_append_conn_err", "completion": "libpq_append_conn_error(conn, \"session is read-only\"); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tdefault:\t\t\t\t\n\t\t\tbreak;\n\t\t\tNOTE(REG_UBSALNUM);\n\t\t\tNOTE(REG_UUNSPEC);", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "#include \"replication/origin.h\"\nreplorigin_desc(StringInfo buf, XLogReaderState *record)\n\t\t\t\t\t\t\t\t LSN_FORMAT_ARGS(xlrec->remote_lsn),\n\t\tcase XLOG_REPLORIGIN_DROP:", "partial_line": "sw", "completion": "switch (info) <|endoftext|>"}
{"context": "\t}\nrestrict_and_check_grant(bool is_grant, AclMode avail_goptions, bool all_privs,\n\t\t\twhole_mask = ACL_ALL_RIGHTS_DATABASE;\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "case OBJ", "completion": "case OBJECT_FDW: <|endoftext|>"}
{"context": "\t\t\t\t\t   *token2;\n\t\t\t}\n\t\treturn false;\n\tthis->autocommit = autocommit;\n\tpthread_mutex_lock(&connections_mutex);", "partial_line": "con", "completion": "con = con->next; <|endoftext|>"}
{"context": "\tumask(pg_mode_mask);\n\tif (do_drop_slot)\n\t{\n\t\t\tpg_log_info(\"dropping replication slot \\\"%s\\\"\", replication_slot);\n\t\t\texit(1);", "partial_line": "if (ver", "completion": "if (verbose) <|endoftext|>"}
{"context": "static void\n\t}\n\t\t\tcontinue;\n\t\telse\n\t\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),", "partial_line": "errmsg(\"cannot alter", "completion": "errmsg(\"cannot alter type \\\"%s\\\" because column \\\"%s.%s\\\" uses it\", <|endoftext|>"}
{"context": "#include \"utils/relmapper.h\"\n\tOid\t\t\toid;\n\tint16\t\tlen;\n\tchar\t\talign;\n\tF_INT2IN, F_INT2OUT},", "partial_line": "F_NA", "completion": "F_NAMEIN, F_NAMEOUT}, <|endoftext|>"}
{"context": "\t\tdeleteDependencyRecordsForClass(ExtensionRelationId, extensionOid,\n\t\t\t\t\t\t\t\t requiredSchemas,\n}\n\t\tcase OBJECT_DATABASE:\n\t\tcase OBJECT_STATISTIC_EXT:", "partial_line": "Oid\t\t\to", "completion": "Oid\t\t\toldExtension; <|endoftext|>"}
{"context": "\t\tcase TBLOCK_SUBABORT_END:\n\t}\n\tif (target->savepointLevel != s->savepointLevel)\n\t\tcase TBLOCK_STARTED:\n\t\tcase TBLOCK_ABORT_END:", "partial_line": "case TBLOCK_ABORT_", "completion": "case TBLOCK_ABORT_PENDING: <|endoftext|>"}
{"context": "\t\t\tnbuckets = 1;\t\t\n\t\t\tif (nbuckets < 1)\n\t\t\t\tnbuckets = 1;\n\t\t}\n\t\tif (node->hashnulls)", "partial_line": "node->tab_ha", "completion": "node->tab_hash_funcs, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   presorted_keys);\n\tif (best_path->materialize_inner)\n\t\tmatplan->total_cost += cpu_operator_cost * matplan->plan_rows;\n\tnClauses = list_length(mergeclauses);\n\t\tEquivalenceClass *oeclass;", "partial_line": "if (r", "completion": "if (rinfo->outer_is_left) <|endoftext|>"}
{"context": "\t\tp = base->weight * DEC_DIGITS;\n\t\t}\n\t\tcase 1:\n\t\t\tset_var_from_var(base, result);\n\t\t\tround_var(result, rscale);", "partial_line": "case", "completion": "case 2: <|endoftext|>"}
{"context": "\tNode\t   *last_srf = pstate->p_last_srf;\n\t\tNode\t   *n = lfirst(i);\n\t\t{\n\t\t\t\t\t\t\t\t\t\t  list_make1(result),\n\t\t\t\t\t\t\t\t\t\t  location);", "partial_line": "result = ne", "completion": "result = newresult; <|endoftext|>"}
{"context": "static const symbol s_6_19[3] = { 'o', 's', 'o' };\nstatic const symbol s_6_35[5] = { 'i', 'b', 'l', 'e', 's' };\nstatic const symbol s_6_44[8] = { 'i', 'm', 'i', 'e', 'n', 't', 'o', 's' };\n{\n{ 4, s_6_5, -1, 1, 0},", "partial_line": "{ 3, s_6_6,", "completion": "{ 3, s_6_6, -1, 9, 0}, <|endoftext|>"}
{"context": "\tconst char *pg_data = cluster->pgdata;\n\tcheck_single_dir(pg_data, \"\");\n\t\tcheck_single_dir(pg_data, \"pg_wal\");\n\tif (GET_MAJOR_VERSION(cluster->major_version) <= 906)\n\t\tcheck_single_dir(pg_data, \"pg_xact\");", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\t\tif (!schema_does_not_exist_skipping(castNode(List, object), &msg, &name))\n\t\t\t\tname = NameListToString(castNode(List, object));\n\t\t\tif (!schema_does_not_exist_skipping(castNode(List, object), &msg, &name))\n\t\t\t{\n\t\t\t\tname = NameListToString(castNode(List, object));", "partial_line": "msg = gettext_noop(\"text search", "completion": "msg = gettext_noop(\"text search configuration \\\"%s\\\" does not exist, skipping\"); <|endoftext|>"}
{"context": "\tListCell   *lc;\n\t{\n\t\tExtensionVersionInfo *evi = (ExtensionVersionInfo *) lfirst(lc);\n\t\tbool\t\tnulls[8];\n\t\tcontrol = read_extension_aux_control_file(pcontrol, evi->name);", "partial_line": "values[3] =", "completion": "values[3] = BoolGetDatum(control->trusted); <|endoftext|>"}
{"context": "\t\tDatum\t\tdatum;\n\t\tgistMakeUnionKey(giststate, i,\n\t\t\tcontinue;\n\t\t\t\t!gistKeyIsEQ(giststate, i, oldentries[i].key, attr[i]))\n\tgistDeCompressAtt(giststate, r,", "partial_line": "else if (best_penalt", "completion": "else if (best_penalty[j] == usize) <|endoftext|>"}
{"context": "#include <signal.h>\n#endif\nbool\t\tproc_exit_inprogress = false;\n\t\t\tbefore_shmem_exit_index;", "partial_line": "proc_exit_prep", "completion": "proc_exit_prepare(code); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase BRIN_PROCNUM_CONSISTENT:\n\t\t\t\t\t\t\t errmsg(\"operator family \\\"%s\\\" of access method %s contains function %s with invalid support number %d\",\n\t\t\t\t\t\t\t\t\tformat_procedure(procform->amproc),\n\t\t\t\tbreak;", "partial_line": "allops |= ((uint64) 1) << op", "completion": "allops |= ((uint64) 1) << oprform->amopstrategy; <|endoftext|>"}
{"context": "\t\tif (owning_tab == NULL)\n\t\tif (seqinfo->is_identity_sequence)\n\t\telse\n\t\t}\n{", "partial_line": "PGresult", "completion": "PGresult   *res; <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type, NULL);\n\t\t\t\tjb.val.string.len = strlen(outputstr);\n\tif (!is_null && !scalar_jsonb &&", "partial_line": "Js", "completion": "JsonbValue\tva; <|endoftext|>"}
{"context": "\tif (exact)\n\t\tcarry = 0;\n\t\t\telse\n\t\tremainder[0] = carry;\n\t\t\t\tfor (i = var2ndigitpairs - 1; i > 0; i--)", "partial_line": "remain", "completion": "remainder[i] = newdig; <|endoftext|>"}
{"context": "\t\t\t\t\t\t(hmultiline && (format != &pg_asciiformat_old)))\n\t\t\t\t\tswidth++;\n\t\t\t\tint\t\t\ttarget_width = dwidth,\n\t\t\t\t\t\t\tbytes_to_output,\n\t\t\t\t\tif ((opt_border > 1) ||", "partial_line": "(dmultili", "completion": "(dmultiline && (format != &pg_asciiformat_old))) <|endoftext|>"}
{"context": "\t\tROUND512(d, e, f, g, h, a, b, c);\n\tcontext->state[1] += b;\n\tcontext->state[7] += h;\n\tint\t\t\tj;\n\tj = 0;", "partial_line": "e =", "completion": "e = d + T1; <|endoftext|>"}
{"context": "\t*needcleanup = false;\n\tint\t\t\tcommonlen;\n\tQueryItem  *ptr;\n\tint\t\t\ttsv_flags = P_TSV_OPR_IS_DELIM | P_TSV_IS_TSQUERY;\n\t\tstate.gettoken = gettoken_query_websearch;", "partial_line": "state.gettoken = get", "completion": "state.gettoken = gettoken_query_standard; <|endoftext|>"}
{"context": "\t\tchar\t   *sendtime;\n\t\tchar\t   *receipttime;\n\t\treceipttime = pstrdup(timestamptz_to_str(lastMsgReceiptTime));\n\t\t\t\t sendtime,\n\t\t\t\t receipttime,", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\t\tkeepwal_add_entry(xlogfname);\n\t\t\tCheckPoint\tcheckPoint;\n\t\t\t*lastchkptrec = searchptr;\n\t\tclose(xlogreadfd);\n\tuint32\t\ttargetPageOff;", "partial_line": "if (xlog", "completion": "if (xlogreadfd >= 0 && <|endoftext|>"}
{"context": "\t\t\t\t\t\tindexRelationName)));\n\t\t\t\t(errcode(ERRCODE_DUPLICATE_OBJECT),\n\tindexTupDesc = ConstructTupleDescriptor(heapRelation,\n\t\t\t\t\t\t\t\t\t\t\tcollationIds,\n\t\t\tif (!OidIsValid(binary_upgrade_next_index_pg_class_oid))", "partial_line": "indexRelationId =", "completion": "indexRelationId = binary_upgrade_next_index_pg_class_oid; <|endoftext|>"}
{"context": "\t{NULL, 0, false, 0}\n\tdirdesc = AllocateDir(path);\n\t\tsnprintf(filename, sizeof(filename), \"%s/%s\", path, direntry->d_name);\n\tint64\t\ttotalsize;\n\t\taclcheck_error(aclresult, OBJECT_DATABASE,", "partial_line": "get_database_name(", "completion": "get_database_name(dbOid)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t  gettext_noop(\"Lexize\"),\n\tappendPQExpBufferStr(&buf, \"FROM pg_catalog.pg_ts_template t\\n\"\n\treturn true;\n\tprintQueryOpt myopt = pset.popt;\n\tprintfPQExpBuffer(&buf,", "partial_line": "\"FROM pg_catalog.pg_", "completion": "\"FROM pg_catalog.pg_ts_config c\\n\" <|endoftext|>"}
{"context": "\t\t\tfor (child = oldparent->firstchild; child; child = child->nextchild)\n\t\t\t}\n\t\towner->nextchild = newparent->firstchild;\n\t\towner->parent = NULL;\n{", "partial_line": "pfre", "completion": "pfree(item); <|endoftext|>"}
{"context": "\t{\n\tEState\t   *estate;\n\tbool\t\tresultTypByVal;\n\tconst_val = ExecEvalExprSwitchContext(exprstate,\n\t{", "partial_line": "const_val =", "completion": "const_val = PointerGetDatum(PG_DETOAST_DATUM_COPY(const_val)); <|endoftext|>"}
{"context": "\tdlist_init(&txn->tuplecids);\n}\n\t\thash_destroy(txn->tuplecid_hash);\n\tif (txn->invalidations)\nReorderBufferChange *", "partial_line": "ReorderBuff", "completion": "ReorderBufferChange *change; <|endoftext|>"}
{"context": "\t\tif (HeadMatches(\"ALTER\", \"DEFAULT\", \"PRIVILEGES\"))\n\t\t{\n\t\telse if (TailMatches(\"GRANT\"))\n\t\telse if (TailMatches(\"REVOKE\", \"ADMIN|INHERIT|SET\", \"OPTION\", \"FOR\"))\n\t\tCOMPLETE_WITH(\"ON PARAMETER\", \"OPTION FOR\");", "partial_line": "COMPLETE_W", "completion": "COMPLETE_WITH(\"TO\"); <|endoftext|>"}
{"context": "\tchar\t   *cp;\n\ttz = (hr * MINS_PER_HOUR + min) * SECS_PER_MINUTE + sec;\n\tif (*cp != '\\0')\n\t\t\t\t\t int *ftype, int *offset, pg_tz **tz,\n\t{", "partial_line": "TimeZoneAbbrevIsKno", "completion": "TimeZoneAbbrevIsKnown(lowtoken, session_timezone, <|endoftext|>"}
{"context": "\t}\n\tentry->combocid = combocid;\nstatic CommandId\n{\n\tendptr = start_address + sizeof(int) +", "partial_line": "RestoreComboCIDState(char *c", "completion": "RestoreComboCIDState(char *comboCIDstate) <|endoftext|>"}
{"context": "\tint\t\t\tk = bs->n - bs->m;\t\nreservoir_init_selection_state(ReservoirState rs, int n)\n\tsampler_random_init_state(pg_prng_uint32(&pg_global_prng_state),\ndouble\n\t}", "partial_line": "tmp = (t + 1", "completion": "tmp = (t + 1) / term; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   false,\n\t\t\t\t\t\t\t\t\t\t\t   arg1, elem,\n\t\t\t\t}\n\t\t\tresult = make_opclause(operoid,\n\tPartitionKey key = RelationGetPartitionKey(parent);", "partial_line": "Node\t   *", "completion": "Node\t   *remainderConst; <|endoftext|>"}
{"context": "\tstate->base = NULL;\n\tstate->phystupsize = 0;\n\t\tItemId\t\thitemid = PageGetItemId(page, P_HIKEY);\n\t\t{\n\t\t}", "partial_line": "if (singleval", "completion": "if (singlevalstrat) <|endoftext|>"}
{"context": "\t\tforeach(lc, evi_list)\n\t}\n\t\t\tint\t\t\tnewdist;\n\t\t\t{\n\t\t\t\tevi2->previous = evi;", "partial_line": "*best_", "completion": "*best_path = NIL; <|endoftext|>"}
{"context": "\tTransactionId xid1 = PG_GETARG_TRANSACTIONID(0);\n{\nhashxidextended(PG_FUNCTION_ARGS)\n}\nxid_age(PG_FUNCTION_ARGS)", "partial_line": "if (!Transaction", "completion": "if (!TransactionIdIsNormal(xid)) <|endoftext|>"}
{"context": "void\nsmgrwriteback(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,\n\tresult = smgrnblocks_cached(reln, forknum);\n}\n\tif (InRecovery && reln->smgr_cached_nblocks[forknum] != InvalidBlockNumber)", "partial_line": "smgrtruncate", "completion": "smgrtruncate(SMgrRelation reln, ForkNumber *forknum, int nforks, <|endoftext|>"}
{"context": "PG_MODULE_MAGIC_EXT(\nDatum", "partial_line": "unsigned char *src = (unsigned char *) PG_", "completion": "unsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2); <|endoftext|>"}
{"context": "\targv[2].len = 4;\n\t\t\t   &retval, &result_len, 1, argv, 3);\n\telse\n\tif (lo_initialize(conn) < 0)\n\t{", "partial_line": "int", "completion": "int\t\t\tretval; <|endoftext|>"}
{"context": "\t\t\t\ttarget->val = (Node *) cr;\n\t\t\t\t\ttarget->val = (Node *) cr;\n\t\tquery = makeNode(RawStmt);\n\t\tCopyFromState cstate;\n\t\t*processed = CopyFrom(cstate);\t", "partial_line": "EndCop", "completion": "EndCopyFrom(cstate); <|endoftext|>"}
{"context": "#include \"../../Unicode/utf8_to_win1257.map\"\n#include \"../../Unicode/win1251_to_utf8.map\"\n#include \"../../Unicode/win866_to_utf8.map\"", "partial_line": "PG_FUN", "completion": "PG_FUNCTION_INFO_V1(utf8_to_win); <|endoftext|>"}
{"context": "}\n{\n\t\t{\n\t\t\t\tdotdots = 0,\n\tif (dotdotetcsize <= linksize)", "partial_line": "if (!r", "completion": "if (!result) <|endoftext|>"}
{"context": "#define LW_VAL_SHARED\t\t\t\t1\nStaticAssertDecl((MAX_BACKENDS & LW_FLAG_MASK) == 0,\n\t\t\t\t \"MAX_BACKENDS and LW_FLAG_MASK overlap\");\nStaticAssertDecl((LW_VAL_EXCLUSIVE & LW_FLAG_MASK) == 0,\n\t[LWTRANCHE_SUBTRANS_BUFFER] = \"SubtransBuffer\",", "partial_line": "[LWTRANCHE_SERIAL_BUFFER]", "completion": "[LWTRANCHE_SERIAL_BUFFER] = \"SerialBuffer\", <|endoftext|>"}
{"context": "\t\t\tPLACE_RIGHT(range, idx);\n\t\t\t\ti2;\n\tnentries = context.entries_count = maxoff - FirstOffsetNumber + 1;\n\tby_lower = (NonEmptyRange *) palloc(nentries * sizeof(NonEmptyRange));\n\tfor (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))", "partial_line": "bo", "completion": "bool\t\tempty; <|endoftext|>"}
{"context": "{ 8, s_2_1888, -1, 91, 0},\n{ 6, s_2_1891, -1, 122, 0},\n{ 7, s_2_1906, -1, 93, 0},\n{ 6, s_2_1920, -1, 85, 0},\n{ 7, s_2_1933, -1, 93, 0},", "partial_line": "{ 6, s_2_1", "completion": "{ 6, s_2_1934, -1, 94, 0}, <|endoftext|>"}
{"context": "\tv->spl_rdatum = PointerGetDatum(right_range);\n\t\tleft_count = max_left_count;\n\t\t\t\t(overlap == context->overlap && ratio > context->ratio))\n\t\t}\n\t\t\tcontext->ratio = ratio;", "partial_line": "context->overlap =", "completion": "context->overlap = overlap; <|endoftext|>"}
{"context": "\thashtable->partialTuples = 0;\n\tprintf(\"Hashjoin %p: initial nbatch = %d, nbuckets = %d\\n\",\n\t\t\t\t\t\t\t\t\t\t\t\tALLOCSET_DEFAULT_SIZES);\n\t\t\t\t\t\t\t\t\t\t\t\tALLOCSET_DEFAULT_SIZES);\n\t\thashtable->innerBatchFile = palloc0_array(BufFile *, nbatch);", "partial_line": "MemoryCon", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "\t\treturn;\n#endif\nstatic int\n\tSSL_CTX    *SSL_context;\n\telse\t\t\t\t\t\t", "partial_line": "SSL_CTX_set_options(", "completion": "SSL_CTX_set_options(SSL_context, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcase XML_STANDALONE_YES:\n\t\t\t\t\t\t\t\t\tcase XML_STANDALONE_NO:\n\t\t\t\t\t\t\t\t\t\tappendStringInfoString(buf,\n\t\t\t\t\t\t\t}", "partial_line": "appendStringInfo(b", "completion": "appendStringInfo(buf, \" AS %s\", <|endoftext|>"}
{"context": "\tint\t\t\tpipefd[2];\n\tset_cancel_slot_archive(slot, NULL);\n\tDisconnectDatabase(&(AH->public));\n#ifdef WIN32\ninit_spawned_worker_win32(WorkerInfo *wi)", "partial_line": "ParallelSlot *slot", "completion": "ParallelSlot *slot = wi->slot; <|endoftext|>"}
{"context": "#line 27 \"rnull.pgc\"\n\tECPGt_short,&(s),(long)1,(long)1,sizeof(short), \n\tECPGt_double,&(dbl),(long)1,(long)1,sizeof(double), \n\trsetnull(CDECIMALTYPE, (char *) &dec);\n\t{ ECPGdo(__LINE__, 1, 0, NULL, 0, ECPGst_normal, \"insert into test ( id , c , s , i , b , f , l , dbl , dec , dat , tmp ) values ( 2 , $1  , $2  , $3  , $4  , $5  , $6  , $7  , $8  , $9  , $10  )\", ", "partial_line": "ECPGt_double,&(dbl),", "completion": "ECPGt_double,&(dbl),(long)1,(long)1,sizeof(double), <|endoftext|>"}
{"context": "static HTAB *PrivateRefCountHash = NULL;\nstatic int32 PrivateRefCountOverflowed = 0;\n\t.name = \"buffer pin\",\n\t.ReleaseResource = ResOwnerReleaseBufferPin,\n\tif (ReservedRefCountEntry != NULL)", "partial_line": "for (i = 0; i < REFCOU", "completion": "for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++) <|endoftext|>"}
{"context": "\t\t\t\t\t\treturn 0;\n\t\t\t\t\trecord->status &= ~GUC_PENDING_RESTART;\n\t\t\t\t}\n\t\t\t\t\t\tconf->assign_hook(newval, newextra);\n\t\t\t\t\tset_extra_field(&conf->gen, &conf->gen.extra,", "partial_line": "set_extra_field(&conf->gen,", "completion": "set_extra_field(&conf->gen, &conf->reset_extra, <|endoftext|>"}
{"context": "\t*isdefault = true;\n}\n\tbool\t\thave_data = false;\n\tif (!statistic_proc_security_check(vardata,\n\t\t{", "partial_line": "STATIST", "completion": "STATISTIC_KIND_HISTOGRAM, InvalidOid, <|endoftext|>"}
{"context": "\t\tcase BAS_NORMAL:\n\t\tcase BAS_BULKREAD:\n\t\tcase BAS_VACUUM:\n{\n\tBufferAccessStrategy strategy;", "partial_line": "ring_buffers = ring_size_kb / (B", "completion": "ring_buffers = ring_size_kb / (BLCKSZ / 1024); <|endoftext|>"}
{"context": "{\ndsa_get_handle(dsa_area *area)\n{\n\tarea = attach_internal(dsm_segment_address(segment), segment, handle);\n\treturn area;", "partial_line": "dsa_attach_in_place(void *p", "completion": "dsa_attach_in_place(void *place, dsm_segment *segment) <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n{\n\tif (OidIsValid(actuals->anyarray_type))\n\t}\n\t\t\t\t\t\t\tformat_type_be(multirange_base_type))));", "partial_line": "if (!OidIsValid(range", "completion": "if (!OidIsValid(range_typelem)) <|endoftext|>"}
{"context": "{\n}\nDatum\n}\n\t\t\tereport(ERROR,", "partial_line": "locale = pg_newlocale_from_c", "completion": "locale = pg_newlocale_from_collation(collation); <|endoftext|>"}
{"context": "static const symbol s_2_1372[4] = { 'e', 'l', 'i', 'm' };\nstatic const symbol s_2_1376[4] = { 'o', 's', 'i', 'm' };\nstatic const symbol s_2_1379[5] = { 'j', 'e', 't', 'i', 'm' };\nstatic const symbol s_2_1388[5] = { 'e', 0xC4, 0x87, 'i', 'm' };\nstatic const symbol s_2_1399[4] = { 'u', 'g', 'o', 'm' };", "partial_line": "static const symbol s_2_1410[7] = { 'p', 'a', 'n',", "completion": "static const symbol s_2_1410[7] = { 'p', 'a', 'n', 'i', 'j', 'o', 'm' }; <|endoftext|>"}
{"context": "\t\t\tcase PLPGSQL_STMT_OPEN:\n\t\t\t((*plpgsql_plugin_ptr)->stmt_end) (estate, stmt);\n}\n\texec_assign_expr(estate, estate->datums[stmt->varno], stmt->expr);\n\treturn PLPGSQL_RC_OK;", "partial_line": "st", "completion": "static int <|endoftext|>"}
{"context": "\t\t\t\tif (constr->missing[i].am_present)\n\t\t\t}\n\t\t\tcpy->check = (ConstrCheck *) palloc(cpy->num_check * sizeof(ConstrCheck));\n\t\t\t}\n{", "partial_line": "memcpy(dst,", "completion": "memcpy(dst, src, TupleDescSize(src)); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t{\n\t\t\t\tcontinue;\n\t\tif (save_jointype == JOIN_UNIQUE_INNER)", "partial_line": "try_nestloop_pat", "completion": "try_nestloop_path(root, <|endoftext|>"}
{"context": "\t{\n\t\tARR_ELEMTYPE(arr) != TEXTOID)\n\t\tif (ARR_NDIM(arr) != 1 ||\n\t\targmodes = NULL;\n\tfor (i = 0; i < numargs; i++)", "partial_line": "inargnames[numinargs]", "completion": "inargnames[numinargs] = pname; <|endoftext|>"}
{"context": "\telse if (Matches(\"GRANT\", MatchAnyN, \"TO\", MatchAny, \"WITH\", \"ADMIN|INHERIT|SET\"))\n\t\tCOMPLETE_WITH(\"GRANTED BY\");\n\telse if (TailMatches(\"GRANT|REVOKE\", MatchAny, \"ON\", \"FOREIGN\", \"DATA\", \"WRAPPER\", MatchAny) ||\n\t\tif (TailMatches(\"GRANT\", MatchAny, MatchAny, MatchAny, MatchAny, MatchAny, MatchAny))\n\t\telse", "partial_line": "COMPLETE_WIT", "completion": "COMPLETE_WITH(\"FOREIGN SCHEMA\"); <|endoftext|>"}
{"context": "\t\tcase PG_U_PARAGRAPH_SEPARATOR:\n\t\t\treturn \"Close_Punctuation\";\n\t\tcase PG_U_OTHER_PUNCTUATION:\n\t\t\treturn \"Currency_Symbol\";\n\t\tcase PG_U_MODIFIER_SYMBOL:", "partial_line": "case PG_U", "completion": "case PG_U_OTHER_SYMBOL: <|endoftext|>"}
{"context": "\t\tDatum\t\tvalues[PG_GET_PROCESS_MEMORY_CONTEXTS_COLS];\n\t\t\tname = (char *) dsa_get_address(MemoryStatsDsaArea, memcxt_info[i].name);\n\t\t\tnulls[0] = true;\n\t\t\tident = (char *) dsa_get_address(MemoryStatsDsaArea, memcxt_info[i].ident);\n}", "partial_line": "sz = add_size(sz, mul_size(To", "completion": "sz = add_size(sz, mul_size(TotalProcs, sizeof(MemoryStatsBackendState))); <|endoftext|>"}
{"context": "\telse\n\tFinishStrongLockAcquire();\n\tif (log_lock)\nstatic PROCLOCK *\nSetupLockInTable(LockMethod lockMethodTable, PGPROC *proc,", "partial_line": "hashco", "completion": "hashcode, <|endoftext|>"}
{"context": "\t\t{\"sync-method\", required_argument, NULL, 8},\n\tchar\t   *incremental_manifest = NULL;\n\tset_pglocale_pgservice(argv[0], PG_TEXTDOMAIN(\"pg_basebackup\"));\n\t\t\t\t || strcmp(argv[1], \"--version\") == 0)\n\t\t\tcase 'd':", "partial_line": "else if (strcmp(opt", "completion": "else if (strcmp(optarg, \"t\") == 0 || strcmp(optarg, \"tar\") == 0) <|endoftext|>"}
{"context": "\t\tif (function_parse_error_transpose(cbarg->proc_source))\n{\n\t\tnew->cmd_type = PLPGSQL_STMT_BLOCK;\n\t\tnew->stmtid = ++function->nstatements;\nstatic Node *", "partial_line": "plpgsql_post_column_ref(ParseState *pstate, Colum", "completion": "plpgsql_post_column_ref(ParseState *pstate, ColumnRef *cref, Node *var) <|endoftext|>"}
{"context": "\t\t\t\t\tif (leader_pid != InvalidPid)\n\t\t\t\t\t}\n\t\t\telse\n\t\t\t\tvalues[10] = TimestampTzGetDatum(beentry->st_proc_start_timestamp);\n\t\t\tif (beentry->st_state_start_timestamp != 0)", "partial_line": "values[11] = TimestampTzGetDatum(beentry", "completion": "values[11] = TimestampTzGetDatum(beentry->st_state_start_timestamp); <|endoftext|>"}
{"context": "\tpossibly_freeable = vacrel->rel_pages - vacrel->nonempty_pages;\n\tif (possibly_freeable > 0 &&\n\t\treturn true;\n\treturn false;\nlazy_truncate_heap(LVRelState *vacrel)", "partial_line": "int\t\t\tlock_", "completion": "int\t\t\tlock_retry; <|endoftext|>"}
{"context": "\tif (result.result == 0)\n\t}\n\tif (result.status != PGAIO_RS_ERROR &&\n{\n\t\t\t\t\t   td->smgr.blockNum,", "partial_line": "result.result * (size_", "completion": "result.result * (size_t) BLCKSZ, <|endoftext|>"}
{"context": "\t\t(codes & DH_CHECK_P_NOT_SAFE_PRIME))\n}\n\tAssert(rwflag == 0);\n{\nprepare_cert_name(char *name)", "partial_line": "char\t   *truncated", "completion": "char\t   *truncated = name; <|endoftext|>"}
{"context": "\tXLogSegNo\tstartsegno;\n\t\t\t\tpg_localtime(&state->starttime, log_timezone));\n\t\tchar\t\tstopxlogfile[MAXFNAMELEN];\t\n\t\tXLogFileName(stopxlogfile, state->stoptli, stopsegno, wal_segment_size);\n\tappendStringInfo(result, \"CHECKPOINT LOCATION: %X/%X\\n\",", "partial_line": "appendStringInfo(result, \"START T", "completion": "appendStringInfo(result, \"START TIMELINE: %u\\n\", state->starttli); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t}\n\t\t\t\t\t\t\t\t   &column_info->typiofunc,\n\t\t\t\t\t\t errmsg(\"improper binary format in record column %d\",\n\t\t\t\t\t\t\t\ti + 1)));", "partial_line": "pfree", "completion": "pfree(values); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   Anum_pg_index_indcollation,\n\trelation->rd_amcache = NULL;\n}\n\t\t\t\t\t   AttrNumber maxAttributeNumber)\n\t\tOpClassCacheEnt *opcentry;", "partial_line": "elog(ERROR, \"bogus pg", "completion": "elog(ERROR, \"bogus pg_index tuple\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tadjust_appendrel_attrs_multilevel(root,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (Node *) withCheckOptions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  this_result_rel,\n\t\t\t\t\t\t\t\t\t\t\t\t returningList);\n\t\t\t\t\t\t\tMergeAction *action = lfirst(l),", "partial_line": "this_r", "completion": "this_result_rel, <|endoftext|>"}
{"context": "\t\"Hyphenated word, letters and digits\",\n\tTPS_InUnsignedInt,\n\tTPS_InXMLEntityNumFirst,\n\tTPS_InTagBeginEnd,\n\tTPS_InTag,", "partial_line": "TPS_InCo", "completion": "TPS_InComment, <|endoftext|>"}
{"context": "\t\t\t\tGroupByOrdering *info = (GroupByOrdering *) lfirst(lc2);\n\t\t\t\t\t\t\t create_agg_path(root,\n\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t   dNumPartialGroups));\n\t\t\t{", "partial_line": "info->", "completion": "info->pathkeys, <|endoftext|>"}
{"context": "#include \"postmaster/autovacuum.h\"\n#include \"postmaster/postmaster.h\"\ntypedef struct PMChildPool", "partial_line": "dlist_", "completion": "dlist_head\tfreelist; <|endoftext|>"}
{"context": "}\ntar_existsfile(WalWriteMethod *wwmethod, const char *pathname)\n{\n\t\t{\n\t\t\tif (r == Z_STREAM_ERROR)", "partial_line": "wwmethod->lasterrn", "completion": "wwmethod->lasterrno = errno ? errno : ENOSPC; <|endoftext|>"}
{"context": "\t\tparsed = unparse = spath;\n\t\tif (*unparse_next != '\\0')\n\t\t\tunparse = unparse_next;\n\t\telse\n\t\t\t\t\tparsed = append_subdir_to_path(parsed, unparse);", "partial_line": "pathde", "completion": "pathdepth++; <|endoftext|>"}
{"context": "static const symbol s_8_3[4] = { 0xD8, 0xB3, 0xD9, 0x8A };\nstatic const symbol s_10_5[2] = { 0xD9, 0x8A };\n{ 2, s_10_4, -1, 1, 0},\nstatic const struct among a_11[1] =\n{ 2, s_12_2, -1, 1, 0}", "partial_line": "{ 4, s_13_0, -1", "completion": "{ 4, s_13_0, -1, 1, 0} <|endoftext|>"}
{"context": "\t\t{\"quiet\", no_argument, NULL, 'q'},\n\t\t{NULL, 0, NULL, 0},\n\t\t\t\tusage(NULL);\n\t\t\t\texit(0);\n\t\t\t\ttc.conninfo = optarg;", "partial_line": "case", "completion": "case 'q': <|endoftext|>"}
{"context": "{\n\tchar\t   *ptr;\n\tAssert(lsize == leaf->lsize);\n\t\tseginfo = dlist_container(leafSegmentInfo, node, node);\n}", "partial_line": "dataBeginPlaceToPageInternal(GinBtree btree, B", "completion": "dataBeginPlaceToPageInternal(GinBtree btree, Buffer buf, GinBtreeStack *stack, <|endoftext|>"}
{"context": "\tBuffer\t\trbuf;\n\tBuffer\t\tmetabuf = InvalidBuffer;\n\tPage\t\tpage;\n\tbool\t\trightsib_is_rightmost;\n\tBlockNumber leaftopparent;", "partial_line": "page = BufferGetPa", "completion": "page = BufferGetPage(leafbuf); <|endoftext|>"}
{"context": "\tif (best_path->param_info)\n\t\t\t\t\t\t\t\t   tablefunc);\n\tIndex\t\tscan_relid = best_path->parent->relid;\n\t\t\treplace_nestloop_params(root, (Node *) values_lists);\n}", "partial_line": "static CteS", "completion": "static CteScan * <|endoftext|>"}
{"context": "\t\t\tgistBufferingFindCorrectParent(buildstate,\n\t\tgistRelocateBuildBuffersOnSplit(gfbb,\n\t\t\tif (level > 0)\n\t\t\t\t\t\t\t\t   BufferGetBlockNumber(splitinfo->buf),\n\t\t}", "partial_line": "Unloc", "completion": "UnlockReleaseBuffer(buffer); <|endoftext|>"}
{"context": "\t\tAssert(numargs == procStruct->pronargs);\n\t\t\t\t\t\t\t\t  Anum_pg_proc_proargnames,\n\t\t\telog(ERROR, \"proargnames must have the same number of elements as the function has arguments\");\n\t\t*p_argmodes = NULL;\n\telse", "partial_line": "arr = Datum", "completion": "arr = DatumGetArrayTypeP(proargmodes); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t (long long int) statbuf.st_size);\nreport_manifest_error(JsonManifestParseContext *context, const char *fmt,...)\n\tva_end(ap);\n\tmanifest_data *manifest = context->private_data;\n\t\t\t\t\t\t const char *pathname, uint64 size,", "partial_line": "pg_che", "completion": "pg_checksum_type checksum_type, <|endoftext|>"}
{"context": "static const symbol s_5_29[5] = { 'i', 'r', 'o', 'n', 't' };\nstatic const symbol s_5_32[6] = { 'i', 's', 's', 'i', 'e', 'z' };\nstatic const symbol s_5_34[5] = { 'i', 's', 's', 'e', 'z' };\n{ 5, s_5_27, -1, 1, 0},\n{ 6, s_5_28, -1, 1, 0},", "partial_line": "static const symbol s_6_", "completion": "static const symbol s_6_12[5] = { 'a', 'n', 't', 'e', 's' }; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tport->default_keepalives_count = -1;\t\n#ifdef TCP_KEEPCNT\n\t\treturn STATUS_OK;\n\t\t\t\treturn STATUS_OK;\t", "partial_line": "return", "completion": "return STATUS_ERROR; <|endoftext|>"}
{"context": "\txlog_outdesc(&buf, record);\n\tpfree(buf.data);\n\tRmgrData\trmgr = GetRmgr(XLogRecGetRmid(record));\n\tconst char *id;\n\t\tappendStringInfo(buf, \"UNKNOWN (%X): \", info & ~XLR_INFO_MASK);", "partial_line": "static", "completion": "static void <|endoftext|>"}
{"context": "\t\t}\n\t}\n\t\t}\n\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode_for_file_access(),", "partial_line": "path", "completion": "path, offset))); <|endoftext|>"}
{"context": "\t\t\tfor (i = 0; QL_HELP[i].cmd; i++)\n\t\t\t\tif (pg_strncasecmp(topic, QL_HELP[i].cmd, len) == 0 ||\n\t\t\t}\n\t\t\t{\n\t\t \"paragraph and the following two paragraphs appear in all copies.\\n\\n\"", "partial_line": "\"DIRECT, INDIRECT, SPECIAL, INCIDENTAL,", "completion": "\"DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING\\n\" <|endoftext|>"}
{"context": "\t\t\tchar\t   *endptr;\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t*isnull = true;\n\t\t\tbreak;", "partial_line": "have_object = JsonContainerIsObj", "completion": "have_object = JsonContainerIsObject(container); <|endoftext|>"}
{"context": "\t\t\t\t\t\tif (dist || (dist == 0 && (pos[i] == POSNULL || pos[k] == POSNULL)))\n\t\t\t\t\t\t{\n\tposnull.npos = 1;\n\t\t\t{\n\t\t\t\tdimt = posnull.npos;", "partial_line": "post =", "completion": "post = posnull.pos; <|endoftext|>"}
{"context": "\tMemoryContextSwitchTo(oldcxt);\n\tAssert(plansource->is_valid);\n\tif (plan->is_valid && plan->dependsOnRole &&\n\t\tplan->is_valid = false;\n\tReleaseGenericPlan(plansource);", "partial_line": "qlist = copyObject(pl", "completion": "qlist = copyObject(plansource->query_list); <|endoftext|>"}
{"context": "\t}\npgstat_shutdown_hook(int code, Datum arg)\n\tAssert(!pgstat_is_shutdown);\n\tpgstat_detach_shmem();\n#ifdef USE_ASSERT_CHECKING", "partial_line": "pgstat_init", "completion": "pgstat_initialize(void) <|endoftext|>"}
{"context": "double\t\tlog_statement_sample_rate = 1.0;\nint\t\t\ttemp_file_limit = -1;\nchar\t   *cluster_name = \"\";\nstatic char *datestyle_string;\nstatic int\twal_block_size;", "partial_line": "static int\tnum_os_se", "completion": "static int\tnum_os_semaphores; <|endoftext|>"}
{"context": "\tMemoryContextSwitchTo(oldcontext);\n\t\tCHECK_FOR_INTERRUPTS();\n\t\tqdesc->nargs = argc;\n\t\t\tint32\t\ttypmod;\n\t\t\tchar\t   *typstr;", "partial_line": "qdesc->a", "completion": "qdesc->argtypes[i] = typId; <|endoftext|>"}
{"context": "{ 5, s_2_211, 210, 53, 0},\n{ 5, s_2_222, -1, 152, 0},\n{ 5, s_2_223, -1, 154, 0},\n{ 6, s_2_228, -1, 74, 0},\n{ 5, s_2_231, -1, 79, 0},", "partial_line": "{ 7, s_2_233", "completion": "{ 7, s_2_233, -1, 64, 0}, <|endoftext|>"}
{"context": "\t\t\t(errcode(sqlcode),\n}\n{\n\txmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) error->ctxt;\n\tint\t\t\tlevel = error->level;", "partial_line": "elog(FATAL, \"xml_erro", "completion": "elog(FATAL, \"xml_errorHandler called with invalid PgXmlErrorContext\"); <|endoftext|>"}
{"context": "\t{\n\t\tappendStringInfo(buf, \"page %\" PRId64, pageno);\n\t{", "partial_line": "xlrec.pageno, xlrec", "completion": "xlrec.pageno, xlrec.oldestXact); <|endoftext|>"}
{"context": "\tOid\t\t\toid;\t\t\t\n} TableSpaceCacheEntry;\n{\n\t\tif (hash_search(TableSpaceCacheHash,\n}", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t\tObjectIdGetDatum(typeOid));\n\t\twhile (HeapTupleIsValid(conTup = systable_getnext(scan)))\n\t\t\tif (isNull)\n\t\t\tconstring = TextDatumGetCString(val);\n\t\t\t\tdcc->constraints = NIL;", "partial_line": "check_expr = (Expr *) strin", "completion": "check_expr = (Expr *) stringToNode(constring); <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"commands/trigger.h\"\n\tTriggerData *trigdata = (TriggerData *) fcinfo->context;\n\tHeapTuple\tnewtuple,", "partial_line": "(errcode(ERRCODE_E_R_I_E_TRIGGE", "completion": "(errcode(ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED), <|endoftext|>"}
{"context": "\t\tsrc++;\n\tint\t\t\tvalue_for_indicator = 0;\n\t\treturn false;\n\t\tlog_offset = -1;\n\tif (!pval)", "partial_line": "ECPGset_noind_null(type, var +", "completion": "ECPGset_noind_null(type, var + offset * act_tuple); <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t  false, NULL);\n\t}\n\tJsonbValue *prev;\n\tprev = cxt->current;", "partial_line": "cxt->c", "completion": "cxt->current = prev; <|endoftext|>"}
{"context": "\tTupleTableSlot *slot;\n\t{\n\t\t\t\t\t\t\t\t\t\t gather->initParam);\n\t\t\t\tnode->nreaders = pcxt->nworkers_launched;\n{", "partial_line": "ExecShutdo", "completion": "ExecShutdownGather(node); <|endoftext|>"}
{"context": "\tint\t\t\ti;\n\tconst char *sep = \"\";\n\t\tereport(ERROR,\n\t\tjson_unique_builder_init(&unique_check);\n\t\t{", "partial_line": "appendS", "completion": "appendStringInfoString(result, sep); <|endoftext|>"}
{"context": "\t\t\tdissuper = defel;\n\t\telse if (strcmp(defel->defname, \"createdb\") == 0)\n\t\t{\n\t\t\tif (dcanlogin)\n\t\t}", "partial_line": "disreplicat", "completion": "disreplication = defel; <|endoftext|>"}
{"context": "}\n\tListCell   *lc;\n\tif (a == NULL || b == NIL)\n\tif (a == NULL)\n\tdo", "partial_line": "elog(ERROR, \"bitmaps", "completion": "elog(ERROR, \"bitmapset is empty\"); <|endoftext|>"}
{"context": "\t\treturn SIGNAL_BACKEND_NOPERMISSION;\n#ifdef HAVE_SETSID\n\tif (kill(pid, sig))\n\t\t\t\t errdetail(\"Only roles with privileges of the \\\"%s\\\" role may cancel autovacuum workers.\",\n\tif (r == SIGNAL_BACKEND_NOPERMISSION)", "partial_line": "\"pg_si", "completion": "\"pg_signal_backend\"))); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t}\n\ttransformIndexConstraints(&cxt);\n\ttransformFKConstraints(&cxt, true, false);\n\tresult = lappend(cxt.blist, stmt);", "partial_line": "ListCell", "completion": "ListCell   *option; <|endoftext|>"}
{"context": "int\n\t\telse", "partial_line": "MAXPGPATH - fulln", "completion": "MAXPGPATH - fullnamelen - 1)) <|endoftext|>"}
{"context": "\tHANDLE\t\ttoken;\n\t\t\t{\n\t\t\t\tereport(ERROR,\n\t\t\t\tfree(sspictx);\n\t\tOutBuffers[0].cbBuffer = 0;", "partial_line": "ASC_REQ_A", "completion": "ASC_REQ_ALLOCATE_MEMORY, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\ttemp_file_limit)));\n\t{\n\treturn returnCode;\nint\n\tint\t\t\treturnCode;", "partial_line": "pgstat_repor", "completion": "pgstat_report_wait_start(wait_event_info); <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\n\telse\n\tvalues[0] = NameGetDatum(&MyReplicationSlot->data.name);\n\tnulls[0] = false;\n\tReplicationSlotRelease();", "partial_line": "nul", "completion": "nulls[1] = false; <|endoftext|>"}
{"context": "{\n\t\telog(ERROR, \"int8_accum_inv called with NULL state\");\n\t\t\telog(ERROR, \"do_numeric_discard failed unexpectedly\");\n#else\n\treturn numeric_sum(fcinfo);", "partial_line": "#en", "completion": "#endif <|endoftext|>"}
{"context": "\t\telog(LOG,\n\t\t\t workMem,\n\t\t\t sortopt & TUPLESORT_RANDOMACCESS ? 't' : 'f');\n\tbase->nKeys = 1;\t\t\t\n\tint\t\t\ti;", "partial_line": "if (trace", "completion": "if (trace_sort) <|endoftext|>"}
{"context": "{\n\t\treturn (pg_wchar) c[0];\n\telse\n}", "partial_line": "re", "completion": "return 2; <|endoftext|>"}
{"context": "\t\t}\n\t{\n\t\tcluster->controldata.default_char_signedness = false;\n\t}\n\t\tif (!got_mxoff)", "partial_line": "if (!got_i", "completion": "if (!got_ident) <|endoftext|>"}
{"context": "\t\tCurrentSnapshot->curcid = curcid;\n\tAssert(!FirstSnapshotSet);\n\tCurrentSnapshot = GetSnapshotData(&CurrentSnapshotData);\n\tCurrentSnapshot->xmin = sourcesnap->xmin;\n\t\t\t\t\t errmsg(\"could not import the requested snapshot\"),", "partial_line": "if (Isolatio", "completion": "if (IsolationIsSerializable()) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\t\tcase CMD_SELECT:\n\t\t\t\t\tbreak;\n\t\t\t\tcase CMD_UPDATE:\n\t\t\tsname = \"Custom Scan\";", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\tLogicalRepPartMapEntry *entry;\n\t\treturn;\n\telse\n\t\tHASH_SEQ_STATUS status;\n\t\t\tentry->relmapentry.localrelvalid = false;", "partial_line": "memset(entry, 0, sizeof(", "completion": "memset(entry, 0, sizeof(LogicalRepRelMapEntry)); <|endoftext|>"}
{"context": "\telse\n\t{\n\t\t\t|| topt->expanded_header_width_type == PRINT_XHEADER_EXACT_WIDTH)\n\t\t{\n\t\t\t{", "partial_line": "if (opt_", "completion": "if (opt_border == 0) <|endoftext|>"}
{"context": "#define JsValueIsNull(jsv) \\\n\t\t(!(jsv)->val.json.str || (jsv)->val.json.type == JSON_TOKEN_NULL) : \\\n#define JsObjectFree(jso) \\\n\t\tif ((jso)->is_json) \\\nstatic JsonParseErrorType get_object_start(void *state);", "partial_line": "static JsonParseErrorType elements_scalar(void", "completion": "static JsonParseErrorType elements_scalar(void *state, char *token, JsonTokenType tokentype); <|endoftext|>"}
{"context": "\t\tcase jbvBool:\n\t\t\tbreak;\n\t\t\t\tcmp = compareDatetime(jb1->val.datetime.value,\n\t\t\t\t\t\t\t\t\t  jb2->val.datetime.typid,\n\t\t\t\t\t\t\t\t\t  useTz,", "partial_line": "if (cas", "completion": "if (cast_error) <|endoftext|>"}
{"context": "\t\tfcinfo_in = op->d.iocoerce.fcinfo_data_in;\n\t}\n\tswitch (svf->op)\n\t\t\tbreak;\n\t\tcase SVFOP_CURRENT_TIME_N:", "partial_line": "case SVFOP_CUR", "completion": "case SVFOP_CURRENT_TIMESTAMP: <|endoftext|>"}
{"context": "\t\t\tnode = pstate->p_post_columnref_hook(pstate, cref, NULL);\n\t\tVar\t\t   *result;\n\t\tRowExpr    *rowexpr;\n}\n\tNode\t   *expr;", "partial_line": "expr = transform", "completion": "expr = transformExprRecurse(pstate, arg); <|endoftext|>"}
{"context": "\t\t\tcluster->controldata.blocksz = str2uint(p);\n\t\t{\n\t\t}\n\t\t\tgot_walsz = true;\n\t\t\tif (p == NULL || strlen(p) <= 1)", "partial_line": "got_walse", "completion": "got_walseg = true; <|endoftext|>"}
{"context": "\t\t}\n\t}\n\t}\nSlruDeleteSegment(SlruCtl ctl, int64 segno)\nrestart:", "partial_line": "if (shared->page_status[s", "completion": "if (shared->page_status[slotno] == SLRU_PAGE_EMPTY) <|endoftext|>"}
{"context": "\t\tresult = find_nonnullable_vars_walker((Node *) expr->arg, top_level);\n\t\tif ((top_level && splan->subLinkType == ANY_SUBLINK) ||\n\t\tPlaceHolderVar *phv = (PlaceHolderVar *) node;\nfind_forced_null_vars(Node *node)\n\t}", "partial_line": "if (e", "completion": "if (expr->boolop == AND_EXPR) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\t  rel1, rel2);\n\t\t\t\t\t\t!bms_is_subset(sjinfo->min_righthand, join_plus_rhs))\n\tjoinrelids = bms_union(rel1->relids, rel2->relids);\n\t}\n\t\tinit_dummy_sjinfo(sjinfo, rel1->relids, rel2->relids);", "partial_line": "joinrel = build_join_rel(root, j", "completion": "joinrel = build_join_rel(root, joinrelids, rel1, rel2, <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\tnewcmds = lappend(newcmds, cmd);\n\t\t\tcase AT_AddConstraint:\n\t\t\t\t\ttransformTableConstraint(&cxt, (Constraint *) cmd->def);\n\t\t\t\t{", "partial_line": "newdef->colnam", "completion": "newdef->colname = cmd->name; <|endoftext|>"}
{"context": "}\nDatum\n\t\tresult[1] = TOOCTAL(((unsigned char) ch) >> 6);\ncharsend(PG_FUNCTION_ARGS)\n\tpq_begintypsend(&buf);", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\tListCell   *l;\n\tapath->path.rows = 0;\n\t\tList\t   *pathkeys = apath->path.pathkeys;\n\t\t{\n\t\t\tforeach(l, apath->subpaths)", "partial_line": "N", "completion": "NULL, <|endoftext|>"}
{"context": "\t\tOid\t\t\tcfgId;\n\t\t\t\t\t\t\t\t\t\t\t (Node *) &escontext);\n\t\tif (namelist != NIL)\n\t\tif (!OidIsValid(cfgId))\n\t\t\t\tereport(NOTICE,", "partial_line": "errmsg(\"text search configuration \\\"%s\\\" does no", "completion": "errmsg(\"text search configuration \\\"%s\\\" does not exist\", *newval))); <|endoftext|>"}
{"context": "\tint\t\t\treadlen = 0;\n\t\treadlen = p - state->overflowbuf + 1;\n{\n\tint\t\t\tsize = ptrsize;\n\t\tstate->buflen = size;", "partial_line": "char\t   *", "completion": "char\t   *rend; <|endoftext|>"}
{"context": "\telse\n\t\tmemcpy(ps_buffer + ps_buffer_cur_len, suffix, len + 1);\nset_ps_display_remove_suffix(void)\n\tif (ps_buffer_nosuffix_len == 0)\n\t\treturn;\t\t\t\t\t", "partial_line": "ps_buffer_nos", "completion": "ps_buffer_nosuffix_len = 0; <|endoftext|>"}
{"context": "static const symbol s_3_9[12] = { 0xE0, 0xA4, 0xA8, 0xE0, 0xA5, 0x87, 0xE0, 0xA4, 0x9B, 0xE0, 0xA5, 0x81 };\nstatic const symbol s_3_44[6] = { 0xE0, 0xA4, 0xAF, 0xE0, 0xA5, 0x8C };\nstatic const symbol s_3_50[12] = { 0xE0, 0xA5, 0x87, 0xE0, 0xA4, 0x9B, 0xE0, 0xA4, 0xA8, 0xE0, 0xA5, 0x8D };\nstatic const symbol s_3_72[6] = { 0xE0, 0xA4, 0x87, 0xE0, 0xA4, 0x9B };\nstatic const symbol s_3_80[6] = { 0xE0, 0xA4, 0xBF, 0xE0, 0xA4, 0x9B };", "partial_line": "static const symb", "completion": "static const symbol s_3_81[9] = { 0xE0, 0xA5, 0x87, 0xE0, 0xA4, 0x95, 0xE0, 0xA4, 0xBE }; <|endoftext|>"}
{"context": "\t\t\t\t  bool *isNull)\n\tif (arraytyplen > 0)\n\t\tfixedDim[0] = arraytyplen / elmlen;\n\t\tarraydataptr = (char *) DatumGetPointer(arraydatum);\n\t}", "partial_line": "arraynullsptr = ARR", "completion": "arraynullsptr = ARR_NULLBITMAP(array); <|endoftext|>"}
{"context": "\t\t\t\tcontinue;\n\t\t\t\telog(ERROR, \"wrong phnullingrels %s (expected %s) for PlaceHolderVar %d\",\n\t\t\tnewvar = makeVarFromTargetEntry(newvarno, tle);\n{\n\tTargetEntry *tle;", "partial_line": "if (", "completion": "if (tle) <|endoftext|>"}
{"context": "\t\t\tall_privileges = ACL_ALL_RIGHTS_FDW;\n\t\t\telog(ERROR, \"unrecognized GrantStmt.objtype: %d\",\n\tif (stmt->privileges == NIL)\n{\n\t\tcase OBJECT_LANGUAGE:", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\tcase PG_WAIT_LWLOCK:\n\t\tcase PG_WAIT_LOCK:\n\t\t\tevent_type = \"BufferPin\";\n\t\t\tevent_type = \"Activity\";\n\t\t\tbreak;", "partial_line": "pgstat_get_wait_ev", "completion": "pgstat_get_wait_event(uint32 wait_event_info) <|endoftext|>"}
{"context": "\tif (recycleSegNo < minSegNo)\n\tbool\t\tispartialpage;\n\tuint32\t\tstartoffset;\n\tstartidx = 0;\n\t{", "partial_line": "XLogRecPtr\tEn", "completion": "XLogRecPtr\tEndPtr = pg_atomic_read_u64(&XLogCtl->xlblocks[curridx]); <|endoftext|>"}
{"context": "{ 4, s_6_49, 47, 1, 0},\n{ 4, s_6_56, 47, 1, 0},\n{ 2, s_6_58, -1, 1, 0},\n{ 5, s_6_59, 58, 1, 0},\n{ 5, s_6_75, 73, 1, 0},", "partial_line": "{ 4,", "completion": "{ 4, s_6_89, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\tupper -= itemidptr->alignedlen;\n\t\t\t\tmemcpy(scratchptr + itemidptr->itemoff, page + itemidptr->itemoff,\n\t\t{\n\t\t\tmemcpy(scratchptr + phdr->pd_upper,\n\t\tfor (; i < nitems; i++)", "partial_line": "copy_tail = itemidptr->itemoff + itemi", "completion": "copy_tail = itemidptr->itemoff + itemidptr->alignedlen; <|endoftext|>"}
{"context": "\t}\n\t{\n{\n\t\treturn TCL_ERROR;\n\tif (fcinfo == NULL)", "partial_line": "ret", "completion": "return TCL_ERROR; <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#ifdef USE_INJECTION_POINTS", "partial_line": "#define", "completion": "#define INJ_LIB_MAXLEN\t\t128 <|endoftext|>"}
{"context": "\t\t\t\t\t\tpath, checksum, cp.checksum)));\n\t\t\t\t\t(errmsg(\"could not remove directory \\\"%s\\\"\",\n\t\tfsync_fname(PG_REPLSLOT_DIR, true);\n\t\t\t\t\t\t\tNameStr(cp.slotdata.name)),\n\t}", "partial_line": "ereport(F", "completion": "ereport(FATAL, <|endoftext|>"}
{"context": "\t\t{\n\t\tforeach(lc, columns)\n\t\t{\n\t\t\tnewcol_attno++;\n\t\tif (list_length(columns) > MaxHeapAttributeNumber)", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tDatum\t\tval;\n\t}\n\tmemcpy(slot->tts_isnull, nulls, sizeof(*nulls) * natts);\n\tbool\t\tneed_projection = false;\n\tExecCheckPlanOutput(resultRelInfo->ri_RelationDesc, insertTargetList);", "partial_line": "resultRelInfo->", "completion": "resultRelInfo->ri_projectNew = <|endoftext|>"}
{"context": "}\n\tconst unsigned char *addrdata;\n\tif (addr_entry == NULL)\n}\nis_ip_address(const char *host)", "partial_line": "struct in6_addr", "completion": "struct in6_addr dummy6; <|endoftext|>"}
{"context": "\tqsort(lowXs, in->nTuples, sizeof(float8), compareDoubles);\n\tqsort(highYs, in->nTuples, sizeof(float8), compareDoubles);\n\tmedian = in->nTuples / 2;\n\tcentroid = palloc(sizeof(BOX));\n\tPG_RETURN_VOID();", "partial_line": "case RTOverAbov", "completion": "case RTOverAboveStrategyNumber: <|endoftext|>"}
{"context": "\tstruct arc *a;\n\tsortarray = (struct arc **) MALLOC(n * sizeof(struct arc *));\n\t\treturn;\n\tfor (a = s->outs; a != NULL; a = a->outchain)\n\tassert(i == n);", "partial_line": "FREE(sortar", "completion": "FREE(sortarray); <|endoftext|>"}
{"context": "PLy_spi_subtransaction_abort(MemoryContext oldcontext, ResourceOwner oldowner)\n\tPLyExceptionEntry *entry;\n\tPyObject   *exc;\nstatic void\n\tPyObject   *spierror = NULL;", "partial_line": "goto fa", "completion": "goto failure; <|endoftext|>"}
{"context": "\tchar\t   *nonce;\n\tchar\t   *prep_password;\n\tpg_saslprep_rc rc;\n\t\treturn NULL;\n\tstate->conn = conn;", "partial_line": "return", "completion": "return NULL; <|endoftext|>"}
{"context": "\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n\t-1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "partial_line": "sig", "completion": "signed char lookup; <|endoftext|>"}
{"context": "\tRESUME_INTERRUPTS();\nvoid\n\tsmgrreleaseall();\nstatic void\n{", "partial_line": "Assert(off == od->writ", "completion": "Assert(off == od->write.offset); <|endoftext|>"}
{"context": "\t\t\tfLength[j] = strlen(PQfname(res, j));\n\tif (printHeader)\n\t\t\tif (fillAlign)\n\t\t\t\tfill(strlen(PQgetvalue(res, i, j)), fLength[j], ' ', fp);\n}", "partial_line": "in", "completion": "int colWidth <|endoftext|>"}
{"context": "\t}\n\tif (!slotname)\n\t\toriginid = replorigin_create(originname);\n\torigin_startpos = replorigin_session_get_progress(false);\n\tCommitTransactionCommand();", "partial_line": "errmsg(\"apply worker for subscription \\\"%s\\\" could not conn", "completion": "errmsg(\"apply worker for subscription \\\"%s\\\" could not connect to the publisher: %s\", <|endoftext|>"}
{"context": "\t\t\t}\n\t\tcase T_OnConflictClause:\n\t\t\t\t\treturn true;\n\t\tcase T_JsonKeyValue:\n\t\t\t\tJsonKeyValue *jkv = (JsonKeyValue *) node;", "partial_line": "if (WALK", "completion": "if (WALK(jkv->value)) <|endoftext|>"}
{"context": "\tif ((mode & 2) == 2)\n\t\tchar\t   *line = loc_alloc(strlen(\"\\n#line %d \\\"%s\\\"\\n\") + sizeof(int) * CHAR_BIT * 10 / 3 + strlen(input_filename) * 2);\n};\n\t\tst = ECPGst_normal;\n\t\tfputs(\"\\\"\", base_yyout);", "partial_line": "argsinser", "completion": "argsinsert = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\thas_ndistinct = (strcmp(PQgetvalue(result, i, 5), \"t\") == 0);\n\t\t\t\t\tprintfPQExpBuffer(&buf, \"    \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  PQgetvalue(result, i, 8));\n\t\t\telse", "partial_line": "tuples =", "completion": "tuples = PQntuples(result); <|endoftext|>"}
{"context": "{ 4, s_3_217, -1, 1, 0},\n{ 3, s_3_231, -1, 1, 0},\n{ 3, s_3_234, -1, 1, 0},\n{ 6, s_3_249, -1, 1, 0},\n{ 5, s_3_259, -1, 1, 0},", "partial_line": "{ 6, s_3_", "completion": "{ 6, s_3_261, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\t\t\tintset_add_member(vstate->empty_leaf_set, blkno);\n\tif (recurse_to != InvalidBlockNumber)\n\t\tvacuum_delay_point(false);\n\t\tgoto restart;\n}", "partial_line": "intset_begin_iterat", "completion": "intset_begin_iterate(vstate->internal_page_set); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tdefel->defname)));\n\t\t\t\t(errcode(ERRCODE_INVALID_OBJECT_DEFINITION),\n\t\treturn NULL;\n}\n\t{", "partial_line": "referenced.objec", "completion": "referenced.objectSubId = 0; <|endoftext|>"}
{"context": "\t\t\t\tfprintf(fout, \"%s\\n\", f->data);\n}\n\t{\n\tint\t\t\ti;\n\t\tfputc('\\n', fout);", "partial_line": "bre", "completion": "break; <|endoftext|>"}
{"context": "\t\t\tConditionVariableBroadcast(&s->active_cv);\n\t\t\tgoto restart;\n\t\t\t\t\t\t   \" on the standby\"));\n\t\t\tereport(ERROR,\n\t\t\tMyReplicationSlot->data.failover = *failover;", "partial_line": "update_", "completion": "update_slot = true; <|endoftext|>"}
{"context": "\tstatic bool force_nonopt = false;\n\t\t\tfor (int i = optind; i < argc - 1; i++)\n\t\tif (place[0] == '-' && place[1] == '\\0')\n\t\t\tplace++;\n\t\t\t\t\tint\t\t\thas_arg = longopts[i].has_arg;", "partial_line": "optarg =", "completion": "optarg = place + namelen + 1; <|endoftext|>"}
{"context": "\treturn JSON_SUCCESS;\n}\nparse_scalar(JsonLexContext *lex, const JsonSemAction *sem)\n\tJsonTokenType tok = lex_peek(lex);\n\t\treturn report_parse_error(JSON_PARSE_VALUE, lex);", "partial_line": "if (va", "completion": "if (val == NULL) <|endoftext|>"}
{"context": "\t\t\t\t  old_cluster.controldata.chkpnt_nxtmxoff,\n\t}\nstatic void\n\tint\t\t\ti_datallowconn;\n\tPQclear(executeQueryOrDie(conn_template1,", "partial_line": "\"UPDATE pg_catalog.pg_", "completion": "\"UPDATE pg_catalog.pg_database \" <|endoftext|>"}
{"context": "\t\treln = CreateFakeRelcacheEntry(rlocator);\n\txl_heap_delete *xlrec = (xl_heap_delete *) XLogRecGetData(record);\n\tXLogRecGetBlockTag(record, 0, &target_locator, NULL, &blkno);\n\t\tBuffer\t\tvmbuffer = InvalidBuffer;\n\t\t\telog(PANIC, \"invalid lp\");", "partial_line": "htup->t_infomask &= ~(HEAP_XMA", "completion": "htup->t_infomask &= ~(HEAP_XMAX_BITS | HEAP_MOVED); <|endoftext|>"}
{"context": "            }\n            break;\n        case 3:\n            }\n}", "partial_line": "{   int ret =", "completion": "{   int ret = slice_del(z); <|endoftext|>"}
{"context": "\t\t\t\t\t\t}\n}\n\tint\t\t\tmaxbytes;\n\tmaxsize = SHORTALIGN_DOWN(maxsize);\n\tmaxbytes = maxsize - offsetof(GinPostingList, bytes);", "partial_line": "result-", "completion": "result->nbytes = ptr - result->bytes; <|endoftext|>"}
{"context": "\tprintf(_(\"  -w, --no-password        never prompt for password\\n\"));\ndropRoles(PGconn *conn)\n\tint\t\t\ti;\n\tPGresult   *res;\n\t\t\t\ti_rolcreaterole,", "partial_line": "i_rolcanl", "completion": "i_rolcanlogin, <|endoftext|>"}
{"context": "{\n\tchar\t   *name;\t\t\t\nget_ts_parser_func(DefElem *defel, int attnum)\n\tswitch (attnum)\n\t\tcase Anum_pg_ts_parser_prsend:", "partial_line": "retTyp", "completion": "retTypeId = VOIDOID; <|endoftext|>"}
{"context": "\terrno = 0;\n\t\t\t\t(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),\ndsin(PG_FUNCTION_ARGS)\n\tresult = sin(arg1);\n\tif (errno != 0 || isinf(arg1))", "partial_line": "(errcode(ERRCODE_N", "completion": "(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE), <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tExecInitExprWithParams(expr,\n}\nstatic void\nInitExecPartitionPruneContexts(PartitionPruneState *prunestate,\n\t\t\t\t\t\t\t   PlanState *parent_plan,", "partial_line": "estate = pa", "completion": "estate = parent_plan->state; <|endoftext|>"}
{"context": "{\n\tLocalPredicateLockHash = hash_create(\"Local predicate lock\",\n\tSERIALIZABLEXIDTAG sxidtag;\n\t\t\t\t\t\t\t\t\tblkno);\nstatic bool", "partial_line": "LOCALPREDI", "completion": "LOCALPREDICATELOCK *lock; <|endoftext|>"}
{"context": "\tstruct pg_tm tt,\n\t\t\t   *tm = &tt;\n\t\tTIMESTAMP_NOBEGIN(result);\n\telse if (DATE_IS_NOEND(dateVal))\n\telse", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tif (ControlFile_target.state != DB_SHUTDOWNED &&\n\t\tControlFile_source.state != DB_SHUTDOWNED &&\n\tstatic pg_time_t last_progress_report = 0;\n\tpg_time_t\tnow;\n\tif (!showprogress)", "partial_line": "now = time(", "completion": "now = time(NULL); <|endoftext|>"}
{"context": "\tGlobalVisSharedRels.definitely_needed =\n\t\t\t\t\t\t\t   GlobalVisDataRels.definitely_needed);\n\tif (GlobalVisTestShouldUpdate(state))\n\telse\n\t\treturn false;", "partial_line": "fxid = FullXidRe", "completion": "fxid = FullXidRelativeTo(state->definitely_needed, xid); <|endoftext|>"}
{"context": "\t\t{\n\t\t\treturn 1;\n\tif (GISTSearchItemIsHeap(*sa) && !GISTSearchItemIsHeap(*sb))\n\tscan = RelationGetIndexScan(r, nkeys, norderbys);", "partial_line": "oldCxt = Memory", "completion": "oldCxt = MemoryContextSwitchTo(giststate->scanCxt); <|endoftext|>"}
{"context": "\tEventTriggerCacheState = ETCS_REBUILD_STARTED;\n\t\tHeapTuple\ttup;\n\t\tbool\t\tevttags_isnull;\n\t\telse if (strcmp(evtevent, \"table_rewrite\") == 0)\n\t\t\t\t\t\t\t   RelationGetDescr(rel), &evttags_isnull);", "partial_line": "item->tagset = Decod", "completion": "item->tagset = DecodeTextArrayToBitmapset(evttags); <|endoftext|>"}
{"context": "\t\t\t\t\t filename);\n\t}\n\t\tconn = ConnectDatabase(pgdb, connstr, pghost, pgport, pguser,\n\t}\n\t{", "partial_line": "prompt_pass", "completion": "prompt_password, false, <|endoftext|>"}
{"context": "\t\t}\n\t\t\telog(ERROR, \"PlaceHolderVar found where not expected\");\nNode *\nstatic Node *\n\t\tif (rte->rtekind != RTE_JOIN)", "partial_line": "List\t   *fiel", "completion": "List\t   *fields = NIL; <|endoftext|>"}
{"context": "{\n\t{\nvoid\n\t\tcase XLOG_SWITCH:\n\t}", "partial_line": "SnapBuild  *builder =", "completion": "SnapBuild  *builder = ctx->snapshot_builder; <|endoftext|>"}
{"context": "\t\t\t}\n\telse\ngistCompressValues(GISTSTATE *giststate, Relation r,\n\t\t\tGISTENTRY\tcentry;\n\t\t{", "partial_line": "if (gists", "completion": "if (giststate->fetchFn[i].fn_oid != InvalidOid) <|endoftext|>"}
{"context": "\t\tAssert(((GroupingFunc *) node)->agglevelsup == 0);\n}\n\t\tWindowFunc *wfunc = (WindowFunc *) node;\n\t\t\telog(ERROR, \"WindowFunc contains out-of-range winref %u\",\n\tAssert(!IsA(node, SubLink));", "partial_line": "do", "completion": "double <|endoftext|>"}
{"context": "\t\t\t   *rvars;\n\t\tmarkVarForSelectPriv(pstate, rvar);\n\t\tresult = (Node *) linitial(andargs);\n\treturn result;\n{", "partial_line": "save_na", "completion": "save_namespace = pstate->p_namespace; <|endoftext|>"}
{"context": "#include \"mb/pg_wchar.h\"\n#include \"miscadmin.h\"", "partial_line": "extern pg_locale_t create_p", "completion": "extern pg_locale_t create_pg_locale_builtin(Oid collid, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t\tresult = NULL;\t\t\n\t\t\t\t parser_errposition(pstate, location)));\n\t\t\t\t\t parser_errposition(pstate, location)));", "partial_line": "(errcode(E", "completion": "(errcode(ERRCODE_UNDEFINED_COLUMN), <|endoftext|>"}
{"context": "\t\tsem->scalar = populate_recordset_scalar;\n\t\tsem->object_field_start = populate_recordset_object_field_start;\n\t\tsem->object_field_end = populate_recordset_object_field_end;\n\t\tfreeJsonLexContext(&lex);\n\t\tbool\t\tskipNested = false;", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\tPartitionDesc partdesc = RelationGetPartitionDesc(rel, true);\n\t\tint\t\t\ti;\n\t\tperChildCxt = AllocSetContextCreate(CurrentMemoryContext,\n\t\tAssert(!OidIsValid(indexOid));\n\t\toldcxt = MemoryContextSwitchTo(perChildCxt);", "partial_line": "chi", "completion": "childTbl, rel); <|endoftext|>"}
{"context": "\t\t\t\tFLATCOPY(newnode, sbsref, SubscriptingRef);\n\t\t\t\t\t   List *);\n\t\t\t\tMUTATE(newnode->refexpr, sbsref->refexpr,\n\t\t\t\t\t   Expr *);\n\t\t\t{", "partial_line": "NullIfExpr *expr = (NullIfE", "completion": "NullIfExpr *expr = (NullIfExpr *) node; <|endoftext|>"}
{"context": "\t\t\tPGconn\t   *conn;\n\t\t\t\tif (dbinfo->made_replslot)\n\t\t\t\t\t\t\t\t   dbinfo->dbname);\n\tif (standby_running)\n\tprintf(_(\"  %s [OPTION]...\\n\"), progname);", "partial_line": "printf(_(\"  -p, --subscriber-port=PORT", "completion": "printf(_(\"  -p, --subscriber-port=PORT      subscriber port number (default %s)\\n\"), DEFAULT_SUB_PORT); <|endoftext|>"}
{"context": "\t\t\tif (narcs > 1)\n\t\tstail = refarc->to;\n\t}\n\t{\n\tif (NISERR())", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\tprintf(_(\"  -O                 allow system table structure changes\\n\"));\n\tprintf(_(\"  -W NUM             wait NUM seconds to allow attach from a debugger\\n\"));\n\tprintf(_(\"  --single           selects single-user mode (must be first argument)\\n\"));\n\tprintf(_(\"  DBNAME             database name (mandatory argument in bootstrapping mode)\\n\"));\n\t\t\t \"configuration settings and how to set them on the command line or in\\n\"", "partial_line": "\"the configuration f", "completion": "\"the configuration file.\\n\\n\" <|endoftext|>"}
{"context": "\t}\nChooseIndexNameAddition(const List *colnames)\n\t\tint\t\t\ti;\n\t\tif (ielem->indexcolname)\n\t\tcurname = origname;", "partial_line": "in", "completion": "int\t\t\tnlen; <|endoftext|>"}
{"context": "\t\tAssert(entry->isrelfile);\n\t\t\t\toff_t\t\tend_offset;\ncheck_file_excluded(const char *path, bool is_source)\n\t{\n\t{", "partial_line": "filename =", "completion": "filename = last_dir_separator(path); <|endoftext|>"}
{"context": "#define PREP_WAITING \"isolationtester_waiting\"\ntypedef struct IsoConnInfo", "partial_line": "cons", "completion": "const char *sessionname; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  tuplen);\n\t\t\treturn true;\n\t\t\t{\n\t\t\t\t\tLogicalTapeClose(srcTape);\n\t\t\t\t\treturn true;", "partial_line": "tuplesor", "completion": "tuplesort_heap_replace_top(state, &newtup); <|endoftext|>"}
{"context": "\t\treturn address;\n\t\t\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\t\tcase OBJECT_SEQUENCE:\n\t\t\t\tereport(ERROR,\n\t\t\tif (relation->rd_rel->relkind != RELKIND_MATVIEW)", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t{\n\t\t\t}\n\t\telse if (!options->psql_inout)\n\t\tif ((result = fstat(fileno(copystream), &st)) < 0)\n\tinitPQExpBuffer(&query);", "partial_line": "free(reas", "completion": "free(reason); <|endoftext|>"}
{"context": "smgrinit(void)\n{\n\tHOLD_INTERRUPTS();\n\t\t\tsmgrsw[i].smgr_init();\n{", "partial_line": "if (smgrsw[", "completion": "if (smgrsw[i].smgr_shutdown) <|endoftext|>"}
{"context": "\t\t\t\t\tsingle_scalar = true;\n\t\t\t\t\tresult->res = pushJsonbValue(&result->parseState,\n\t\t\tcase WJB_BEGIN_OBJECT:\n\t\t\t\tif (v.type == jbvString)\n\t\t\t\t{", "partial_line": "snprintf(buf, v.val.stri", "completion": "snprintf(buf, v.val.string.len + 1, \"%s\", v.val.string.val); <|endoftext|>"}
{"context": "{\n\tDatum\t\tvalues[Natts_pg_operator];\n\t\t\t\t(errcode(ERRCODE_INVALID_NAME),\n\tmakeOperatorDependencies(tup, true, false);\n\tOid\t\t\toperatorObjectId;", "partial_line": "bool", "completion": "bool\t\tselfCommutator = false; <|endoftext|>"}
{"context": "            if (!(z->I[1])) return 0;\n            break;\n            if (!(z->I[1])) return 0;\n                if (ret < 0) return ret;\n            }", "partial_line": "ca", "completion": "case 149: <|endoftext|>"}
{"context": "#include \"postgres.h\"\n#include \"lib/bloomfilter.h\"\n\tuint64\t\tseed;\n\tuint64\t\tm;", "partial_line": "static int\toptimal_k(uint64 bitset_bits, i", "completion": "static int\toptimal_k(uint64 bitset_bits, int64 total_elems); <|endoftext|>"}
{"context": "\t\t\tItemPointer heapPtr, Datum *datums, bool *isnulls)\n\t\t\t\tparent;\n\t\telse\n\tleafSize = SpGistGetLeafTupleSize(leafDescriptor, leafDatums, isnulls);\n\t\tereport(ERROR,", "partial_line": "errmsg(\"index row s", "completion": "errmsg(\"index row size %zu exceeds maximum %zu for index \\\"%s\\\"\", <|endoftext|>"}
{"context": "\t\t}\n\t\tif (bistate && bistate->next_free != InvalidBlockNumber)\n\t\t}\n\t}\n\t\tif (!visibilitymap_pin_ok(targetBlock, *vmbuffer))", "partial_line": "unloc", "completion": "unlockedTargetBuffer = true; <|endoftext|>"}
{"context": "\tchar\t\tpath[MAXPGPATH];\n\tfor (nbytes = 0; nbytes < wal_segment_size; nbytes += sizeof(buffer))\n\t\t{\n\t\t\t\t\t\t\t(errcode(ERRCODE_DATA_CORRUPTED),\n\t\t\t}", "partial_line": "pgstat_repor", "completion": "pgstat_report_wait_end(); <|endoftext|>"}
{"context": "\t\t\t\t\tExecInitExprRec(e, state,\n\t\t\t\tbreak;\n\t\tcase T_CoerceViaIO:\n\t\t\t{\n\t\t\t\tFunctionCallInfo fcinfo_in;", "partial_line": "scratch.d.iocoerce.finfo_out = pal", "completion": "scratch.d.iocoerce.finfo_out = palloc0(sizeof(FmgrInfo)); <|endoftext|>"}
{"context": "\tint\t\t\treturnValue;\n\t{\n\t\treturnValue = LruInsert(file);\n\t\t\treturn returnValue;\n\t\tif ((size / 1024) >= log_temp_files)", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "static void\n\tMySubscriptionValid = false;\n{\n\tchar\t\tpath[MAXPGPATH];\n\tBufFile    *fd;", "partial_line": "retu", "completion": "return; <|endoftext|>"}
{"context": "\tfdwid = convert_foreign_data_wrapper_name(fdwname);\n\tAclResult\taclresult;\n\troleid = GetUserId();\nDatum\nhas_foreign_data_wrapper_privilege_id(PG_FUNCTION_ARGS)", "partial_line": "AclResult\tac", "completion": "AclResult\taclresult; <|endoftext|>"}
{"context": "\t\t\tfor (i = 0; i < nkeys; i++)\n\t\t\tbreak;\n\t\t\tres = true;\n\t\t\t\t\tres = false;\n\t\t\tres = true;", "partial_line": "if (", "completion": "if (!check[i]) <|endoftext|>"}
{"context": "static const symbol s_11_16[6] = { 'j', 'e', 'i', 't', 'e', 'k' };\nstatic const symbol s_11_26[4] = { 'a', 'i', 'n', 'k' };\nstatic const symbol s_11_31[5] = { 0xC3, 0xA9, 'i', 'n', 'k' };\nstatic const symbol s_11_41[4] = { 0xC3, 0xA9, 'i', 'm' };\n{ 4, s_11_14, -1, 1, 0},", "partial_line": "{ 6, s_11", "completion": "{ 6, s_11_16, 15, 1, 0}, <|endoftext|>"}
{"context": "\t\tnamespaceid = PG_TOAST_NAMESPACE;\n\t\t\t\t\t\t\t\t\t\t   namespaceid,\n\t\t\t\t\t\t\t\t\t\t   tupdesc,\n\t\t\t\t\t\t\t\t\t\t   NULL);\n\tCommandCounterIncrement();", "partial_line": "indexInfo->ii_Expressi", "completion": "indexInfo->ii_ExpressionsState = NIL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t progname, postopts_file);\n\t\t\t}\n\t\t\t\toptline = optlines[0];\n\t\t\t\t{\n\tint\t\t\tret;", "partial_line": "if (exec", "completion": "if (exec_path == NULL) <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\tif (parsetree->onConflict &&\n\t\t\t\tparsetree->onConflict->action == ONCONFLICT_UPDATE)\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\tCMD_UPDATE,", "partial_line": "NULL, 0, N", "completion": "NULL, 0, NULL); <|endoftext|>"}
{"context": "\tdlist_foreach(iter, &saved_plan_list)\n\t\t\tcontinue;\n\t\t\t\tplansource->is_valid = false;\n\t\t}\n\t\t\t\t\tcontinue;\t", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "\tres = _SPI_begin_call(true);\n\toptions.read_only = read_only;\n\treturn SPI_execute(src, false, tcount);\n\t\t\t\t\t const SPIExecuteOptions *options)\n{", "partial_line": "_SPI_pl", "completion": "_SPI_plan\tplan; <|endoftext|>"}
{"context": "{\n\tint\t\t\ti;\n\t}\n\t\tereport(FATAL,\n\thash_seq_init(&status, RelationIdCache);", "partial_line": "con", "completion": "continue; <|endoftext|>"}
{"context": "#include \"common/logging.h\"\n#define ERRCODE_DATA_CORRUPTED\t\"XX001\"\ntypedef struct TablespaceListCell", "partial_line": "struct", "completion": "struct TablespaceListCell *next; <|endoftext|>"}
{"context": "        case 1:\n        case 4:\n            if (!find_among_b(z, a_1, 6)) return 0;\n        case 5:\n            {   int ret = slice_del(z);", "partial_line": "if (in_grouping_b(z, g_V", "completion": "if (in_grouping_b(z, g_V2, 97, 246, 0)) return 0; <|endoftext|>"}
{"context": "\t\t\tcontinue;\n\t\t\t\t\t\t  PartitionPruneStepOp *opstep)\n\t\t\t   *lc2;\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\topstep->opstrategy,", "partial_line": "pa", "completion": "partsupfunc, <|endoftext|>"}
{"context": "\t{\n\t\tExprState  *expr = (ExprState *) lfirst(lc1);\n\t\t\t\t\t(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),\n\t\tns_uri = TextDatumGetCString(value);\n\t{", "partial_line": "errmsg(\"column", "completion": "errmsg(\"column filter expression must not be null\"), <|endoftext|>"}
{"context": "\t\t\t\tconn->engine = NULL;\n\t\t\t\tfree(engine_str);\n\t\t\t\t\t\t\t\t\t\t   NULL, NULL);\n\t\t\t\tlibpq_append_conn_error(conn, \"could not read private SSL key \\\"%s\\\" from engine \\\"%s\\\": %s\",\n\t\t\t\t\t\t\t\t\t\tengine_colon, engine_str, err);", "partial_line": "ENGINE_finish(", "completion": "ENGINE_finish(conn->engine); <|endoftext|>"}
{"context": "\t\t\t\t{\n\t\t\t\t\tgs->numGroups = numGroups;\n\t\t\t\t\tgd->dNumHashGroups += numGroups;\n\t\t\t}\n\t\t{", "partial_line": "ta", "completion": "target_list); <|endoftext|>"}
{"context": "\t\t\tgettext_noop(\"If more than this number of tuples on the same page are locked \"\n\t},\n\t\t\tNULL,\n\t{\n\t\t\tgettext_noop(\"Maximum distance to read ahead in the WAL to prefetch referenced data blocks.\"),", "partial_line": "GU", "completion": "GUC_UNIT_MB <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),\nDatum\n\tchar\t   *result;\n\tif (result)\n\t\tresult = pstrdup(quote_identifier(result));", "partial_line": "retu", "completion": "return oidrecv(fcinfo); <|endoftext|>"}
{"context": "\t\tCatalogTupleUpdate(pg_rewrite_desc, &ruletup->t_self, ruletup);\n\theap_freetuple(ruletup);\n\tif (changed)\n\t\t\t\t errdetail_relkind_not_supported(form->relkind)));\n\tif (!allowSystemTableMods && IsSystemClass(relid, form))", "partial_line": "Relat", "completion": "Relation\tpg_rewrite_desc; <|endoftext|>"}
{"context": "\t\t\t\t\thasmatch1[i] = hasmatch2[j] = true;\n\t\t\t\t\tbreak;\n\t\t}\n\t\t\tnd2 -= nmatches;\n\t\t\t\tselec = 1.0 - nullfrac1;", "partial_line": "JoinType\tjointype =", "completion": "JoinType\tjointype = (JoinType) PG_GETARG_INT16(3); <|endoftext|>"}
{"context": "\t}\npqSetKeepalivesWin32(pgsocket sock, int idle, int interval)\n{\n\t\t\t\t\t\t \"keepalives_idle\"))\n\tif (!pqSetKeepalivesWin32(conn->sock, idle, interval))", "partial_line": "retur", "completion": "return 0; <|endoftext|>"}
{"context": "\t\txl_relmap_update xlrec;\n\tif (preserve_files)\n\t\tfor (i = 0; i < newmap->num_mappings; i++)\n{\n\tif (shared)", "partial_line": "(shared ? Inva", "completion": "(shared ? InvalidOid : MyDatabaseId), <|endoftext|>"}
{"context": "{ 5, s_6_3, -1, 4, 0},\n{ 6, s_6_5, -1, 1, 0},\nstatic const symbol s_7_4[4] = { 'i', 'b', 'l', 'e' };\nstatic const symbol s_7_11[3] = { 'i', 'o', 'n' };\n{ 3, s_7_5, -1, 1, 0},", "partial_line": "{ 5,", "completion": "{ 5, s_7_17, 16, 1, 0} <|endoftext|>"}
{"context": "\tupdate_stats = reltuples >= 0 && !IsBinaryUpgrade;\n\t{\n\t\t\tvisibilitymap_count(rel, &relallvisible, &relallfrozen);\n\tScanKeyInit(&key[0],\n\tif (!HeapTupleIsValid(tuple))", "partial_line": "di", "completion": "dirty = false; <|endoftext|>"}
{"context": "\tif (partition_constraint_failed)\n\t{\n\t\t{\n\t\t\t\tresultRelInfo->ri_TrigDesc->trig_update_after_row)\n\t\t\t\t\t\t\t\t&context->tmfd, &updateCxt->lockmode,", "partial_line": "NULL,", "completion": "NULL, NIL, <|endoftext|>"}
{"context": "\t\t\tecontext->ecxt_outertuple = outerTupleSlot;\n\t\t\tforeach(lc, nl->nestParams)\n\t\t\t\tinnerPlan->chgParam = bms_add_member(innerPlan->chgParam,\n\t\tENL1_printf(\"getting new inner tuple\");\n\t\t\t\tecontext->ecxt_innertuple = node->nl_NullInnerTupleSlot;", "partial_line": "return ExecProject(node->j", "completion": "return ExecProject(node->js.ps.ps_ProjInfo); <|endoftext|>"}
{"context": "\t*endptr = cp;\nout_of_range:\ninvalid_syntax:\n\t\tdig >= 'a' && dig <= 'f' ? dig - 'a' + 10 :\nset_var_from_non_decimal_integer_str(const char *str, const char *cp, int sign,", "partial_line": "if (bas", "completion": "if (base == 16) <|endoftext|>"}
{"context": "\t\tread_stream_look_ahead(stream);\n\t\tint16\t\tio_index = stream->oldest_io_index;\n\t\t\t   &stream->buffers[oldest_buffer_index]);\n\t\t\tstream->oldest_io_index = 0;\n\t\t\tstream->ios[io_index].op.blocknum == stream->seq_until_processed)", "partial_line": "stream->buffers[oldest_buffer_i", "completion": "stream->buffers[oldest_buffer_index] = InvalidBuffer; <|endoftext|>"}
{"context": "{\n\tprintf(_(\" [-D, --pgdata=]DATADIR    data directory\\n\"));\n\tprintf(_(\"  -V, --version            output version information, then exit\\n\"));\n\tprintf(_(\"  -?, --help               show this help, then exit\\n\"));\n\t{\"PG_VERSION\", false},", "partial_line": "(total_size", "completion": "(total_size / (1024 * 1024)), <|endoftext|>"}
{"context": "\tFmgrInfo\textra_procinfos[INCLUSION_MAX_PROCNUMS];\n\t\t\t\t\t\t\t\t\t\tuint16 procnum, bool missing_ok);\nbrin_inclusion_opcinfo(PG_FUNCTION_ARGS)\n\t\tlookup_type_cache(typoid, 0);\n\tCompactAttribute *attr;", "partial_line": "column->bv_val", "completion": "column->bv_values[INCLUSION_UNION] = <|endoftext|>"}
{"context": "{ 4, s_11_14, -1, 1, 0},\n{ 6, s_11_16, 15, 1, 0},\n{ 3, s_11_25, -1, 1, 0},\n{ 4, s_11_26, 25, 1, 0},\n{ 6, s_11_33, 32, 1, 0},", "partial_line": "static const s", "completion": "static const symbol s_10[] = { 'a' }; <|endoftext|>"}
{"context": "\t\telog(LOG, \"worker %d starting quicksort of run %d: %s\",\n\t\t\t state->worker, state->currentRun,\n\t\t\t pg_rusage_show(&state->ru_start));\n\ttuplesort_sort_memtuples(state);\n\t\tdefault:", "partial_line": "tuplesort_markpos(Tuplesorts", "completion": "tuplesort_markpos(Tuplesortstate *state) <|endoftext|>"}
{"context": "\t\t\tif (ctx->tarFH == NULL)\n\t\t\t\tpg_fatal(\"could not open TOC file \\\"%s\\\" for input: %m\",\n\t\tctx->FH = tarOpen(AH, \"toc.dat\", 'r');\n\tif (te->dataDumper != NULL)\n\tte->formatData = ctx;", "partial_line": "lclTocEntry *ctx = (lclTocEntr", "completion": "lclTocEntry *ctx = (lclTocEntry *) te->formatData; <|endoftext|>"}
{"context": "\t\treturn;\n\t\t\terrno = ENOSPC;\nstatic void\n\tz_stream   *zs;\n\t\t&astreamer_gzip_decompressor_ops;", "partial_line": "stream", "completion": "streamer->base.bbs_next = next; <|endoftext|>"}
{"context": "\t\tcase AT_DetachPartitionFinalize:\n\t\t\treturn \"DETACH PARTITION ... FINALIZE\";\n\t\tcase AT_SetIdentity:\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\tif (exec_path == NULL)\n\tif (post_opts == NULL)\ndo_start(void)\n{\n\t\t\t\t\t\t   \"trying to start server anyway\\n\"),", "partial_line": "unli", "completion": "unlimit_core_size(); <|endoftext|>"}
{"context": "\t\tdist->page = BufferGetPage(dist->buffer);\n\t\t\trecptr = GistBuildLSN;\n\t\t\t\trecptr = gistXLogSplit(is_leaf,\n\t\t\tfor (ptr = dist->next; ptr; ptr = ptr->next)\n\t\tSTART_CRIT_SECTION();", "partial_line": "if (", "completion": "if (ntup == 1) <|endoftext|>"}
{"context": "\t{\n\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),\nBrinDesc *\nbrin_build_desc(Relation rel)\n\tTupleDesc\ttupdesc;", "partial_line": "re", "completion": "return bdesc; <|endoftext|>"}
{"context": "\t\t   \"Usage:\\n\"\n\t\t   \"  -f, --force-unsupported   test invalid input even if unsupported\\n\"\n}\n\t\t{\"help\", no_argument, NULL, 'h'},\n\t\t{\"quiet\", no_argument, NULL, 'q'},", "partial_line": "{NULL", "completion": "{NULL, 0, NULL, 0}, <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tvaltype = UNKNOWNOID;\n\t\t\t\t\t\t\t\t\t\t\t\t  value,\n\t\t\t\t\t\t\t\t\t\t\t\t  &isnull,", "partial_line": "(errcode(ERRCODE_DATATYPE", "completion": "(errcode(ERRCODE_DATATYPE_MISMATCH), <|endoftext|>"}
{"context": "\tbool\t\tresult = matchall;\n\tint\t\t\tj;\n\t\tnelems2 = array2->xpn.nelems;\n\t\t\t\t\t\t\t collation, NULL, NULL);\n\t\tbool\t\tisnull1;", "partial_line": "result", "completion": "result = false; <|endoftext|>"}
{"context": "\tInitProcessGlobals();\n#endif\n\tInitProcessLocalLatch();\n\tpgwin32_signal_initialize();\n\tInitProcessLocalLatch();", "partial_line": "if (pkglib", "completion": "if (pkglib_path[0] == '\\0') <|endoftext|>"}
{"context": "\telse\n\t\tif (!should_be_super && roleid == BOOTSTRAP_SUPERUSERID)\n\t\tnew_record[Anum_pg_authid_rolcanlogin - 1] = BoolGetDatum(boolVal(dcanlogin->arg));\n\t{\n\t\t\t\t\t\t\t\t\t\t   password);", "partial_line": "new_tuple = heap_modify_tuple(tuple,", "completion": "new_tuple = heap_modify_tuple(tuple, pg_authid_dsc, new_record, <|endoftext|>"}
{"context": "\t{\n\t\tResultRelInfo *rInfo = NULL;\n\t\t{\n\t\t\t\t\t\t\t  oldrel,\n\t\tif (newrel)", "partial_line": "table_slo", "completion": "table_slot_callbacks(oldrel)); <|endoftext|>"}
{"context": "\t{ ECPGprepare(__LINE__, NULL, 0, \"normal_name\", v_query);\n#line 103 \"prepareas.pgc\"\n\tcheck_result_of_insert();\n#line 116 \"prepareas.pgc\"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ", "partial_line": "if (sqlca.sqlcode", "completion": "if (sqlca.sqlcode < 0) sqlprint();} <|endoftext|>"}
{"context": "\tFILE\t   *out_file;\n\t{\npopen_check(const char *command, const char *mode)\n\t\treturn;\n\tif (!noclean)", "partial_line": "pg_log_error(\"failed to", "completion": "pg_log_error(\"failed to remove data directory\"); <|endoftext|>"}
{"context": "}\n{\n\tplan->lefttree = NULL;\n\tplan->righttree = NULL;\n\treturn node;", "partial_line": "plan->qual", "completion": "plan->qual = otherclauses; <|endoftext|>"}
{"context": "\tAssert(metadata_bytes <= size);\n\tcontrol->handle = control_handle;\n\tcontrol->init_segment_size = init_segment_size;\n\tsegment_map->header = (dsa_segment_header *) place;\n\t\tFreePageManagerPut(segment_map->fpm, metadata_bytes / FPM_PAGE_SIZE,", "partial_line": "segment_map->pagema", "completion": "segment_map->pagemap = (dsa_pointer *) <|endoftext|>"}
{"context": "binary_upgrade_logical_slot_has_caught_up(PG_FUNCTION_ARGS)\n{\n\tCHECK_IS_BINARY_UPGRADE;\n\tXLogRecPtr\tsublsn;\n\tif (PG_ARGISNULL(0) || PG_ARGISNULL(1) || PG_ARGISNULL(2))", "partial_line": "D", "completion": "Datum <|endoftext|>"}
{"context": "\t\t((*s == '+' || *s == '-') &&\n\t{\n\t{\n\t} \\\n{", "partial_line": "for (int i", "completion": "for (int i = 0; i < len; i++) <|endoftext|>"}
{"context": "\telse if (use_sort)\n\t\t\t\t\t\tnspname,\n\t\t\t\t\t\tRelationGetRelationName(OldHeap))));\n\t\t\t\t\t\tRelationGetRelationName(OldHeap))));\n\t\t\t\t\t\t\t\t\t&num_tuples, &tups_vacuumed,", "partial_line": "\"%", "completion": "\"%s.\", <|endoftext|>"}
{"context": "\t\t\tpstmt = FetchPreparedStatement(stmt->name, false);\n\t\t\t\terrdetail(\"prepare: %s\", pstmt->plansource->query_string);\n\t\t\t}\n\tif (params && params->numParams > 0 && log_parameter_max_length != 0)\n\t\tstr = BuildParamLogString(params, NULL, log_parameter_max_length);", "partial_line": "st", "completion": "static int <|endoftext|>"}
{"context": "#include \"parser/parse_func.h\"\n#include \"utils/builtins.h\"\n\t (TCL_MAJOR_VERSION == maj && TCL_MINOR_VERSION >= min))\n\t\tchar *_pltcl_utf_dst = NULL\n\t} while (0)", "partial_line": "(_pltcl_u", "completion": "(_pltcl_utf_dst = utf_u2e(_pltcl_utf_src = (x))) <|endoftext|>"}
{"context": "}\n\t\telse\n\t\t\t}\n\tif (fputc(i, AH->FH) == EOF)\nstatic void", "partial_line": "if (fread(buf, 1, len, AH-", "completion": "if (fread(buf, 1, len, AH->FH) != len) <|endoftext|>"}
{"context": "\t\t\t\t\tcontext.paramids =\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t  gather_param,\n\t\t\t\t}\n\t\tcase T_BitmapOr:", "partial_line": "case T_Nest", "completion": "case T_NestLoop: <|endoftext|>"}
{"context": "            }\n            break;\n    return 1;\n                if (ret < 0) return ret;\n            lab1:", "partial_line": "z-", "completion": "z->c--; <|endoftext|>"}
{"context": "}\nlogicalrep_partmap_invalidate_cb(Datum arg, Oid reloid)\n\tLogicalRepPartMapEntry *entry;\n\t\treturn;\n\telse", "partial_line": "HASH_SEQ_ST", "completion": "HASH_SEQ_STATUS status; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   mul_size(sizeof(WalUsage), pcxt->nworkers));\n\tif (debug_query_string)\n\t\t\tUnregisterSnapshot(snapshot);\n\tbtshared->heaprelid = RelationGetRelid(btspool->heap);\n\tbtshared->nparticipantsdone = 0;", "partial_line": "if (debug_query_", "completion": "if (debug_query_string) <|endoftext|>"}
{"context": "\t\t}\n\t\trelkind == RELKIND_MATVIEW ||\n\t\trelkind == RELKIND_TOASTVALUE)\n\t\t\t\t\t\t\t  \"SELECT spcname FROM pg_catalog.pg_tablespace\\n\"\n\t\t\t\t\t\t\t\t\t  PQgetvalue(result, 0, 0));", "partial_line": "printfPQExpBu", "completion": "printfPQExpBuffer(&buf, <|endoftext|>"}
{"context": "#include \"storage/spin.h\"\n{", "partial_line": "uint6", "completion": "uint64\t\ttoc_magic; <|endoftext|>"}
{"context": "\tint\t\t\tnbytes;\n\tevec = palloc(sizeof(GISTENTRY) * entryvec->n + GEVHDRSZ);\n}\n\t\t\t\t  IndexTuple *itup, int len, GISTSTATE *giststate)\n\t{", "partial_line": "genericPickSplit(giststate, e", "completion": "genericPickSplit(giststate, entryvec, sv, attno); <|endoftext|>"}
{"context": "\tcp.length = ReplicationSlotOnDiskV2Size;\n\t\t\t\tReplicationSlotOnDiskChecksummedSize);\n\t}\n\t{\n\t\tLWLockRelease(&slot->io_in_progress_lock);", "partial_line": "int\t\t\tsave_errno", "completion": "int\t\t\tsave_errno = errno; <|endoftext|>"}
{"context": "\t\t\t\t\tas->d.jump.jumpdone = state->steps_len;\n\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tExprEvalPushStep(state, &scratch);", "partial_line": "(Datum *", "completion": "(Datum *) palloc(sizeof(Datum) * nelems); <|endoftext|>"}
{"context": "pg_log_generic(enum pg_log_level level, enum pg_log_part part,\n\t\t\t   const char *pg_restrict fmt,...)\n\tva_end(ap);\n}\n\tchar\t   *buf;", "partial_line": "fflush(st", "completion": "fflush(stdout); <|endoftext|>"}
{"context": "pqTraceOutput_Execute(FILE *f, const char *message, int *cursor, bool regress)\n{\n}\n\tpqTraceOutputString(f, message, cursor, false);\n\tpqTraceOutputString(f, message, cursor, false);", "partial_line": "initialResponse = pqTraceOutputInt32(f", "completion": "initialResponse = pqTraceOutputInt32(f, message, cursor, false); <|endoftext|>"}
{"context": "\tTidStoreEndIterate(iter);\n\tqsort(items.lookup_tids, items.num_tids, sizeof(ItemPointerData), itemptr_cmp);\n\t\t\t\t ItemPointerGetBlockNumber(&items.insert_tids[i]),\n}\nDatum", "partial_line": "tidsto", "completion": "tidstore = NULL; <|endoftext|>"}
{"context": "\t\t\t*dst_ptr++ = *arg_ptr;\n\tif (!*cell->old_dir || !*cell->new_dir)\n\t\tpg_fatal(\"old directory is not an absolute path in tablespace mapping: %s\",\n\telse\nusage(void)", "partial_line": "printf(_(\"  -r, --max-rate=RATE    maximum", "completion": "printf(_(\"  -r, --max-rate=RATE    maximum transfer rate to transfer data directory\\n\" <|endoftext|>"}
{"context": "\t\tXLogSetRecordFlags(XLOG_INCLUDE_ORIGIN);\n\t}\n\tHeapTupleHeaderSetCmin(tup->t_data, cid);\n\t\trelation->rd_rel->relkind != RELKIND_MATVIEW)\n\t\tsize_t\t\ttup_sz = sizeof(ItemIdData) + MAXALIGN(heaptuples[i]->t_len);", "partial_line": "if (page_", "completion": "if (page_avail < tup_sz) <|endoftext|>"}
{"context": "\t\t\tcoll = exprCollation((Node *) ((const InferenceElem *) expr)->expr);\n\t\t\tbreak;\n\t\tcase T_FuncExpr:\n\t\t\tbreak;\n\t\tcase T_MergeSupportFunc:", "partial_line": "case T_Subscript", "completion": "case T_SubscriptingRef: <|endoftext|>"}
{"context": "\t\tbool\t\tnulls[Natts_pg_default_acl] = {0};\n\t\tbool\t\treplaces[Natts_pg_default_acl] = {0};\n\t\t\t\t\t\t\treferenced;\n\t\t\t\t\t\t\t  nnewmembers, newmembers);\n\t}", "partial_line": "Form_pg_default_acl", "completion": "Form_pg_default_acl pg_default_acl_tuple; <|endoftext|>"}
{"context": "{\n\t\t\t\tspc_random_page_cost;\n\t\tqpquals = list_concat(extract_nonindex_conditions(path->indexinfo->indrestrictinfo,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  path->indexclauses));\n\t\t\t\t\t\t\t  &spc_random_page_cost,", "partial_line": "if (l", "completion": "if (loop_count > 1) <|endoftext|>"}
{"context": "{\n\tRelation\tr;\n\tpgstat_init_relation(r);\n}", "partial_line": "pgstat_init_re", "completion": "pgstat_init_relation(r); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   MAXPGPATH - fullnamelen - 1))\n\t}\n\tstruct dirent *direntry;\n\twhile ((direntry = ReadDirExtended(dirdesc, dirname, LOG)) != NULL)\n\t{", "partial_line": "found", "completion": "found = true; <|endoftext|>"}
{"context": "\t\t\t\tres->noticeHooks.noticeRec(res->noticeHooks.noticeRecArg, res);\n\t\treturn;\n\t\tif (res->errMsg && res->errMsg[0])\n\t\tappendPQExpBufferStr(msg, val);\n\t\tif (querytext && querypos > 0)", "partial_line": "reportErrorPositio", "completion": "reportErrorPosition(msg, querytext, querypos, <|endoftext|>"}
{"context": "\t\t\tdictloaded = true;\n\t\telse if (strcmp(defel->defname, \"stopwords\") == 0)\n\t\t{\n\t\t\t\tereport(ERROR,\n\t\t\tstoploaded = true;", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tpath = GetRelationPath(dboid, spcoid, relfilenumber, INVALID_PROC_NUMBER,\n\t\t\t\t\t\t   forknum);\n\t\t\t\t\tOid dboid, Oid spcoid,\n\t\t\t\t\tRelFileNumber relfilenumber, ForkNumber forknum,\n\t\t\t\t\tBlockNumber *relative_block_numbers,", "partial_line": "rlocator.spcOid", "completion": "rlocator.spcOid = spcoid; <|endoftext|>"}
{"context": "\tIndexInfo **indexInfoArray;\n\tAssert(resultRelInfo->ri_IndexRelationDescs == NULL);\n\t\tif (speculative && ii->ii_Unique && !indexDesc->rd_index->indisexclusion)\n\tRelationPtr indexDescs;\n\t\t\t\t\t  List *arbiterIndexes,", "partial_line": "IndexInfo", "completion": "IndexInfo **indexInfoArray; <|endoftext|>"}
{"context": "\t\tdefault:\n\treturn true;\n\tBTScanOpaque so = (BTScanOpaque) scan->opaque;\n\tMemoryContext oldContext;\n\t\tarray->high_compare->sk_strategy == BTLessStrategyNumber)", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t\t\tif (dbp->adl_datid == tmp->adw_datid)\n\t\t\t\t\t\t\t\t\t\t\t\tcurrent_time, 0) &&\n\t\tif (skipit)\n\t}\n\t\tworker = dlist_container(WorkerInfoData, wi_links, wptr);", "partial_line": "retval = avdb->ad", "completion": "retval = avdb->adw_datid; <|endoftext|>"}
{"context": "\tif (newtuple == NULL && comment != NULL)\n\t{\n\tif (newtuple != NULL)\n\ttable_close(shdescription, NoLock);\nvoid", "partial_line": "int", "completion": "int\t\t\tnkeys; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   node->join.jointype == JOIN_SEMI);\n\t\t\tmergestate->mj_FillOuter = false;\n\t\t\tmergestate->mj_FillInner = true;\n\t\t\tmergestate->mj_FillOuter = true;\n\t\t\tmergestate->mj_FillInner = true;", "partial_line": "mergestate", "completion": "mergestate->mj_NullOuterTupleSlot = <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\telse if (func == PGBENCH_BITOR)\n\t\t\t\t\treturn false;\n\t\t\tsetDoubleValue(retval, M_PI);\n\t\t\t\tif (varg->type == PGBT_INT)", "partial_line": "else if", "completion": "else if (varg->type == PGBT_BOOLEAN) <|endoftext|>"}
{"context": "#endif\n#endif\npqsecure_read(PGconn *conn, void *ptr, size_t len)\n\t{\n\tSOCK_ERRNO_SET(0);", "partial_line": "\"\\tbefore", "completion": "\"\\tbefore or while processing the request.\"); <|endoftext|>"}
{"context": "\t\treturn false;\n\t\t\tstopsHere = (recordXtime >= recoveryTargetTime);\n\t\trecoveryStopLSN = InvalidXLogRecPtr;\n\t\t{\n\tuint8\t\tinfo;", "partial_line": "strlcpy(recoveryStopName, recordRestorePointData->", "completion": "strlcpy(recoveryStopName, recordRestorePointData->rp_name, MAXFNAMELEN); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"could not open file \\\"%s\\\": %m\",\n\tpgstat_report_wait_end();\n\t\t\t\t\t\tmaptempfilename)));\n\t\txl_relmap_update xlrec;\n\tif (preserve_files)", "partial_line": "for (i = 0; i < newmap->n", "completion": "for (i = 0; i < newmap->num_mappings; i++) <|endoftext|>"}
{"context": "_bt_conditionallockbuf(Relation rel, Buffer buf)\n\t\tVALGRIND_MAKE_MEM_DEFINED(BufferGetPage(buf), BLCKSZ);\n_bt_upgradelockbufcleanup(Relation rel, Buffer buf)\n\tBTPageOpaque opaque;\n\tchar\t   *updatedbuf = NULL;", "partial_line": "Size\t\tupdatedbuf", "completion": "Size\t\tupdatedbuflen = 0; <|endoftext|>"}
{"context": "\t{\n\t\t\tio_worker_control->workers[i].latch = NULL;\n\tnew_head = (queue->head + 1) & (queue->size - 1);\n\tif (queue->tail == queue->head)\n\thead = io_worker_submission_queue->head;", "partial_line": "if (ta", "completion": "if (tail > head) <|endoftext|>"}
{"context": "\tfcinfo->args[1].isnull = false;\n\telse\n}\n\t*result = (*func) (fcinfo);\n\t\treturn false;", "partial_line": "Datum", "completion": "Datum\t\tresult; <|endoftext|>"}
{"context": "\t\tjtitem->qualscope = bms_make_singleton(varno);\n\t\tremaining = list_length(f->fromlist);\n\t\t\tsub_members = list_length(sub_joinlist);\n\t\t\tif (sub_members <= 1 ||\n\telse if (IsA(jtnode, JoinExpr))", "partial_line": "*fj_", "completion": "*fj_domain; <|endoftext|>"}
{"context": "\t(&MainLWLockArray[PREDICATELOCK_MANAGER_LWLOCK_OFFSET + \\\n#define SxactIsRolledBack(sxact) (((sxact)->flags & SXACT_FLAG_ROLLED_BACK) != 0)\n#define SxactIsReadOnly(sxact) (((sxact)->flags & SXACT_FLAG_READ_ONLY) != 0)\n#define SxactHasSummaryConflictIn(sxact) (((sxact)->flags & SXACT_FLAG_SUMMARY_CONFLICT_IN) != 0)\n#define SxactHasConflictOut(sxact) (((sxact)->flags & SXACT_FLAG_CONFLICT_OUT) != 0)", "partial_line": "#define SxactIsDeferrableWai", "completion": "#define SxactIsDeferrableWaiting(sxact) (((sxact)->flags & SXACT_FLAG_DEFERRABLE_WAITING) != 0) <|endoftext|>"}
{"context": "\t\t\t\t\t \"pg_dump\", full_path, progname);\n\t{\n\t\t\tcase 'c':\n\t\t\t\toutput_clean = true;\n\t\t\t\tconnstr = pg_strdup(optarg);", "partial_line": "c", "completion": "case 'E': <|endoftext|>"}
{"context": "\t\tpg_free(new_arg->new_pgdata);\n\t\tpg_free(new_arg->old_tablespace);\n#endif\n\t\treturn false;\n#ifndef WIN32", "partial_line": "thread_num = WaitForMultipleObjects(parallel_j", "completion": "thread_num = WaitForMultipleObjects(parallel_jobs, thread_handles, <|endoftext|>"}
{"context": "\tif (conn != NULL)\n\tfor (relprogress = 0, cell = relations.head; cell; cell = cell->next)\n\t\t\tbreak;\n\t\tif (!free_slot)\n\t\t{", "partial_line": "if (rel->is", "completion": "if (rel->is_heap) <|endoftext|>"}
{"context": "\taccum_sum_final(&state->sumX, &tmp_var);\n\tNumericVar\ttmp_var;\n\tsstate = PG_GETARG_BYTEA_PP(0);\n\tresult->N = pq_getmsgint64(&buf);\n\tstate = (NumericAggState *) PG_GETARG_POINTER(0);", "partial_line": "accum_sum_final(", "completion": "accum_sum_final(&state->sumX, &tmp_var); <|endoftext|>"}
{"context": "\tconst char *mode;\n\t\tfn = fileno(AH->FH);\nSaveOutput(ArchiveHandle *AH)\n\terrno = 0;\n\tif (!EndCompressFileHandle(AH->OF))", "partial_line": "fr", "completion": "free(p); <|endoftext|>"}
{"context": "\ttuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relId));\n\t\tIsSystemClass(relId, (Form_pg_class) GETSTRUCT(tuple)))\n\tif (IsA(stmt, RenameStmt))\n\t\tereport(ERROR,\n\t\tereport(ERROR,", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\t\t\tscore = list_length(outer_ec->ec_members) - 1;\n\t\t\t\t\t\tscore++;\n\t\t}\n\t\tif (!pathkey_is_redundant(best_pathkey, retval))\n\t\t\tretvallen++;", "partial_line": "retu", "completion": "return retval; <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\tfprintf(stderr, ANSI_ESCAPE_FMT, sgr_error);\n\t\t\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t\tbreak;", "partial_line": "fprintf(std", "completion": "fprintf(stderr, _(\"hint: \")); <|endoftext|>"}
{"context": "\tplan.parse_mode = RAW_PARSE_DEFAULT;\n\t\tplan.parserSetupArg = options->params->parserSetupArg;\n\tchar\t   *query_string;\n\tPortal\t\tportal;\n\t\tconst char *cmdtag;", "partial_line": "erepo", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\telse\n\t}\nvoid\nLWLockRelease(LWLock *lock)\n\tmode = LWLockDisownInternal(lock);", "partial_line": "RESU", "completion": "RESUME_INTERRUPTS(); <|endoftext|>"}
{"context": "\t\tround_var(result, rscale);\nstatic void\n{\n\tint\t\t\tres_ndigits;\n\tint\t\t\ti;", "partial_line": "errcode(ERRCODE_INVALID_PARA", "completion": "errcode(ERRCODE_INVALID_PARAMETER_VALUE), <|endoftext|>"}
{"context": "\t\tt.c_lflag &= ~ECHO;\n\tif (prompt)\n\t{\n\t\tfputs(\"\\n\", termout);\n#endif", "partial_line": "fcl", "completion": "fclose(termin); <|endoftext|>"}
{"context": "calc_hist_selectivity_contains(TypeCacheEntry *typcache,\n\t\t\t\t\t\t\t   const RangeBound *lower, const RangeBound *upper,\n\tint\t\t\ti,\n\t\t\t\tlower_bin_width;\n\tlower_bin_width = get_position(typcache, lower, &hist_lower[lower_index],", "partial_line": "for (i = lowe", "completion": "for (i = lower_index; i >= 0; i--) <|endoftext|>"}
{"context": "\t\t}\n\t{\n\t\tforeach(lc, defaults)\n}\n\tndelete = nargsprovided + list_length(defaults) - pronargs;", "partial_line": "elog(ERROR, \"not enough de", "completion": "elog(ERROR, \"not enough default arguments\"); <|endoftext|>"}
{"context": "\t\ttuple = systable_getnext(scan);\n\t\t\telog(ERROR, \"could not find tuple for large object %u\", loid);\n\t\t{\n\t\tthis_privileges =\n\t\t\t\t\t\t\t\t\t   istmt->grantees, this_privileges,", "partial_line": "nnewmembers = aclmember", "completion": "nnewmembers = aclmembers(new_acl, &newmembers); <|endoftext|>"}
{"context": "\t\telse\n\t\t{\n\t\t}\n\t}\n\telse", "partial_line": "return clamp_row_est(retu", "completion": "return clamp_row_est(return_tuples); <|endoftext|>"}
{"context": "\t\tbitmask <<= 1;\n{\n\tbool\t\ttypbyval;\n\tint\t\t\ti;\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),", "partial_line": "Datum\t\te", "completion": "Datum\t\telt2; <|endoftext|>"}
{"context": "typedef enum WalRcvWakeupReason\n\tWALRCV_WAKEUP_PING,\n\tWALRCV_WAKEUP_REPLY,\nstatic void WalRcvDie(int code, Datum arg);\nstatic void XLogWalRcvSendHSFeedback(bool immed);", "partial_line": "static void ProcessWal", "completion": "static void ProcessWalSndrMessage(XLogRecPtr walEnd, TimestampTz sendTime); <|endoftext|>"}
{"context": "\t\t\tso->needPrimScan = true;\n\t\t\t*next_scan_page = btscan->btps_nextScanPage;\n\t\t\texit_loop = true;\n\t\t}\n}", "partial_line": "_bt_parallel_", "completion": "_bt_parallel_release(IndexScanDesc scan, BlockNumber next_scan_page, <|endoftext|>"}
{"context": "\t\t\tconstr->has_generated_virtual = true;\n\t\t\t\tbool\t\tis_null;\n\t\t\t\tif (attp->attbyval)\n\t\t\t\t\tattrmiss[attnum - 1].am_value = missval;\n\t\t\t\t}", "partial_line": "MemoryCon", "completion": "MemoryContextSwitchTo(oldcxt); <|endoftext|>"}
{"context": "static const symbol s_18_2[4] = { 0xD9, 0x8A, 0xD9, 0x86 };\nstatic const symbol s_18_7[6] = { 0xD8, 0xAA, 0xD9, 0x85, 0xD8, 0xA7 };\n};\n{ 2, s_20_0, -1, 1, 0},\nstatic const symbol s_21_0[2] = { 0xD9, 0x89 };", "partial_line": "static const symbol s", "completion": "static const symbol s_2[] = { '2' }; <|endoftext|>"}
{"context": "}\n\tOffsetNumber colN;\n\t\tcolN = FirstOffsetNumber;\n\t}\ngintuple_get_key(GinState *ginstate, IndexTuple tuple,", "partial_line": "GinNull", "completion": "GinNullCategory *category) <|endoftext|>"}
{"context": "#ifndef _MSC_VER\n#line 106 \"thread.pgc\"\n#line 107 \"thread.pgc\"\n  if( sqlca.sqlcode != 0 )\n      printf(\"%s: ERROR: cannot connect to database!\\n\", l_connection);", "partial_line": "{ ECPGtrans(__LINE__, l_connecti", "completion": "{ ECPGtrans(__LINE__, l_connection, \"commit\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\tList *resultRelations,\n\t\t\t\t\t\tList *mergeActionLists, List *mergeJoinConditions,\n\tModifyTablePath *pathnode = makeNode(ModifyTablePath);\n\t\t\tlist_length(resultRelations) == list_length(updateColnosLists) :\n\t\t\tupdateColnosLists == NIL));", "partial_line": "pathnode->path.par", "completion": "pathnode->path.parallel_safe = false; <|endoftext|>"}
{"context": "\t}\n\tpgstat_unlock_entry(entry_ref);\n\t\tPgStat_TableXactStatus *trans;\n\t\tdeadtuples -= rel->pgstat_info->counts.delta_dead_tuples;\n\t\tlivetuples = Max(livetuples, 0);", "partial_line": "deadtuples =", "completion": "deadtuples = Max(deadtuples, 0); <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t next_index);\n\t{\n\tif (outer_has_default)\n\t\tAssert(outer_default >= 0 && outer_default < outer_map->nparts);", "partial_line": "outer_merged", "completion": "outer_merged_index = outer_map->merged_indexes[outer_default]; <|endoftext|>"}
{"context": "\tif (!OidIsValid(member->lefttype))\naddFamilyMember(List **list, OpFamilyMember *member)\n\tListCell   *l;\n\t\tif (old->number == member->number &&\n\t\t\t\t\t\t\t\tmember->number,", "partial_line": "*list = l", "completion": "*list = lappend(*list, member); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   StrategyNumber strategy, bool *need_relabel);\n\t\t\t\t\t\t\t\t\t ListCell **partexprs_item,\n\t\t\tbreak;\n\t}\n{", "partial_line": "(*mappi", "completion": "(*mapping)[i] = -1; <|endoftext|>"}
{"context": "\tPath\t   *cheapest_partial_path = NULL;\n\tPath\t   *cheapest_total_path = NULL;\n\t\t!force_rel_creation)\n\tpartially_grouped_rel->consider_parallel =\n\t\tif (parse->hasAggs)", "partial_line": "get_number_of", "completion": "get_number_of_groups(root, <|endoftext|>"}
{"context": "\t\tlower.inclusive = true;\n\t\tDateADT\t\tbnd = DatumGetDateADT(upper.val);\n\tPG_RETURN_RANGE_P(range_serialize(typcache, &lower, &upper,\n\tint32\t\tv1 = PG_GETARG_INT32(0);\nDatum", "partial_line": "int64\t\tv1 =", "completion": "int64\t\tv1 = PG_GETARG_INT64(0); <|endoftext|>"}
{"context": "\t\tif (!newtuple)\n\t\t{\n\t}\n{\n\t{", "partial_line": "co", "completion": "continue; <|endoftext|>"}
{"context": "                    case 24:\n                        break;\n                            if (ret < 0) return ret;\n                            if (ret < 0) return ret;\n                        }", "partial_line": "z->c", "completion": "z->c = ret; <|endoftext|>"}
{"context": "\t\t\tif (two_phase_given)\n\t\telse\n\tReplicationSlotAcquire(cmd->slotname, true, true);\n\t\tereport(LOG,\n\tlogical_decoding_ctx =", "partial_line": "WalSndS", "completion": "WalSndSetState(WALSNDSTATE_CATCHUP); <|endoftext|>"}
{"context": "\t\trecordDependencyOnExpr(&myself, defaultExpr, NIL, DEPENDENCY_NORMAL);\n\t\tObjectAddressSet(referenced, RelationRelationId, typeForm->typrelid);\n\t\tif (relationKind != RELKIND_COMPOSITE_TYPE)\n\t{\n\tForm_pg_type typ;", "partial_line": "Oid\t\t\tol", "completion": "Oid\t\t\toldTypeOid; <|endoftext|>"}
{"context": "\t\t(base_rte->relkind != RELKIND_RELATION &&\n\t{\n}\n\t\t\t\t\t\t\t Bitmapset *required_cols,\n\tAttrNumber\tcol;", "partial_line": "const", "completion": "const char *col_update_detail; <|endoftext|>"}
{"context": "\tcommute_below_r = bms_del_members(commute_below_r, min_righthand);\n\tif (commute_below_l || commute_below_r)\n\t\tsjinfo->commute_below_l = commute_below_l;\n\t\t{\n\t\t\t\totherinfo->commute_above_r =", "partial_line": "List\t   *semi_", "completion": "List\t   *semi_rhs_exprs; <|endoftext|>"}
{"context": "\tAssert(startup_data_len == 0);\n\t}\n\tPG_exception_stack = &local_sigjmp_buf;\n\tload_file(\"libpqwalreceiver\", false);\n\tif (cluster_name[0])", "partial_line": "app_name.data,", "completion": "app_name.data, err)); <|endoftext|>"}
{"context": "\tint\t\t\tleft;\n\tright = ArrayGetNItems(ARR_NDIM(thresholds), ARR_DIMS(thresholds));\n\t\tchar\t   *ptr;\n\t\tlocfcinfo->args[0].value = operand;\n\t\tlocfcinfo->args[1].value = fetch_att(ptr, typbyval, typlen);", "partial_line": "cmpresult = DatumGetInt32(Function", "completion": "cmpresult = DatumGetInt32(FunctionCallInvoke(locfcinfo)); <|endoftext|>"}
{"context": "\t\t\tfor (int i = 0; i < mcvlist->nitems; i++)\n\t\t\t\tMCVItem    *item = &mcvlist->items[i];\n\t\t\t\t\t{\n\t\t\t\tbool\t\tmatch = false;\t\n\t\t\t\tMCVItem    *item = &mcvlist->items[i];", "partial_line": "case I", "completion": "case IS_NULL: <|endoftext|>"}
{"context": "\tint const\ti = *ip;\nstatic bool\nincrement_overflow_time(pg_time_t *tp, int32 j)\n\t}\n\t\t\t\t\t const pg_tz *tz)", "partial_line": "retu", "completion": "return 0; <|endoftext|>"}
{"context": "\t\t\t\t\terrmsg(\"database OID %u is already in use by database \\\"%s\\\"\",\n\telse\n\t\tDirectFunctionCall1(namein, CStringGetDatum(dbname));\n\tnew_record[Anum_pg_database_datallowconn - 1] = BoolGetDatum(dballowconnections);\n\tnew_record[Anum_pg_database_dattablespace - 1] = ObjectIdGetDatum(dst_deftablespace);", "partial_line": "InvokeObjectPostCreateHook(D", "completion": "InvokeObjectPostCreateHook(DatabaseRelationId, dboid, 0); <|endoftext|>"}
{"context": "\tmake_template0(cmdfd);\n\t\t{\"lc-ctype\", required_argument, NULL, 3},\n\t\t{\"lc-numeric\", required_argument, NULL, 5},\n\t\t{\"version\", no_argument, NULL, 'V'},\n\t\t{\"no-clean\", no_argument, NULL, 'n'},", "partial_line": "{\"no-ins", "completion": "{\"no-instructions\", no_argument, NULL, 13}, <|endoftext|>"}
{"context": "\t\tHandleCatchupInterrupt();\n\tif (CheckProcSignal(PROCSIG_NOTIFY_INTERRUPT))\n\t\tHandleRecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_TABLESPACE);\n\t\tHandleRecoveryConflictInterrupt(PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK);\n\t\tif (pg_atomic_read_u32(&slot->pss_pid) != backendPID)", "partial_line": "if (pg_atomic_read_u32(&slot->p", "completion": "if (pg_atomic_read_u32(&slot->pss_pid) != backendPID) <|endoftext|>"}
{"context": "\tHeapTupleData tuple1;\n\t\tmy_extra->ncolumns = ncols;\n\t\tmy_extra->record2_type = InvalidOid;\n\t\tif (att1->atttypid != att2->atttypid)\n\t\t\tereport(ERROR,", "partial_line": "errmsg(\"cannot compare dissimilar column types", "completion": "errmsg(\"cannot compare dissimilar column types %s and %s at record column %d\", <|endoftext|>"}
{"context": "        int ret = in_grouping_U(z, g_v, 97, 248, 1);\n    z->I[1] = z->c;\n    z->I[1] = z->I[0];\nstatic int r_main_suffix(struct SN_env * z) {\n        z->ket = z->c;", "partial_line": "if (ret < 0) r", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\tfor (te = AH->toc->next; te != AH->toc; te = te->next)\n\trepoint_table_dependencies(AH);\n\t\t\t}\n\t}\n\tfor (te = AH->toc->next; te != AH->toc; te = te->next)", "partial_line": "TocE", "completion": "TocEntry   *te; <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH(\"WHEN MATCHED\", \"WHEN NOT MATCHED\");\n\t\tCOMPLETE_WITH(\"MATCHED\", \"NOT MATCHED\");\n\telse if (TailMatches(\"WHEN\", \"MATCHED\") ||\n\t\tCOMPLETE_WITH(\"INSERT\", \"DO NOTHING\");\n\telse if (TailMatches(\"NOTIFY\"))", "partial_line": "COMPLETE_WITH_QUERY", "completion": "COMPLETE_WITH_QUERY_PLUS(Query_for_list_of_roles, <|endoftext|>"}
{"context": "\t\tappendStringInfo(&cmd, \"COPY %s\",\n\t\tif (lrel.natts)\n\t\t\t{\n\t\t\tif (i < lrel.natts - 1)\n\t\t}", "partial_line": "char\t   *q", "completion": "char\t   *q = strVal(linitial(qual)); <|endoftext|>"}
{"context": "\t}\n\t\tnode->as_eventset = NULL;\n\tif (nevents > EVENT_BUFFER_SIZE)\n\tnoccurred = WaitEventSetWait(node->as_eventset, timeout, occurred_event,\n\t\treturn;", "partial_line": "for (i = 0; i <", "completion": "for (i = 0; i < noccurred; i++) <|endoftext|>"}
{"context": "        {\n            if (ret < 0) goto lab7;\n        }\n            z->c += ret;\n    int among_var;", "partial_line": "among_var", "completion": "among_var = find_among(z, a_1, 3); <|endoftext|>"}
{"context": "\tif (winstate->grouptail_valid)\n\t}\n\t}\nstatic pg_noinline void\n\t\t\t\t\t\t\t\t\t\t  &isnull);", "partial_line": "if (i", "completion": "if (isnull) <|endoftext|>"}
{"context": "#include \"catalog/dependency.h\"\n#include \"catalog/pg_inherits.h\"\n#include \"catalog/toasting.h\"\n#include \"utils/pg_rusage.h\"\n\t\t\t}", "partial_line": "er", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "{\n\t\t\t\tObjectIdGetDatum(classId));\n\t\t\t\t\t\t\t  NULL, 2, key);\n\ttable_close(depRel, RowExclusiveLock);\n\tlong\t\tcount = 0;", "partial_line": "depRel = table_o", "completion": "depRel = table_open(DependRelationId, RowExclusiveLock); <|endoftext|>"}
{"context": "\t\t\t\t\t  gettext_noop(\"Owner\"));\n\t\t\t\t\t\t  gettext_noop(\"Table\"));\n\t\t\t\t\t\t  \"WHEN \" CppAsString2(RELPERSISTENCE_TEMP) \" THEN '%s' \"\n\t\t\t\t\t\t\t CppAsString2(RELKIND_PARTITIONED_TABLE) \",\");\n\t\tappendPQExpBufferStr(&buf, \"'s',\"); ", "partial_line": "\"n.nsp", "completion": "\"n.nspname\", \"c.relname\", NULL, <|endoftext|>"}
{"context": "\telse if (Matches(\"REASSIGN\", \"OWNED\"))\n\t\tCOMPLETE_WITH(\"BY\");\n\t\tCOMPLETE_WITH(\"NO DATA\", \"DATA\");\n\telse if (Matches(\"REFRESH\", \"MATERIALIZED\", \"VIEW\", MatchAny, \"WITH\", \"NO\"))\n\t\t\t Matches(\"REINDEX\", \"(*)\", \"INDEX\"))", "partial_line": "COMPLETE_WI", "completion": "COMPLETE_WITH_SCHEMA_QUERY_PLUS(Query_for_list_of_indexes, <|endoftext|>"}
{"context": "\t\tcase TBLOCK_ABORT_PENDING:\n\t\tcase TBLOCK_PREPARE:\nBeginImplicitTransactionBlock(void)\n\t\ts->blockState = TBLOCK_STARTED;\n\t\t\tbreak;", "partial_line": "case", "completion": "case TBLOCK_DEFAULT: <|endoftext|>"}
{"context": "\tname = NameStr(proc->proname);\n\tisfunction = (proc->prokind != PROKIND_PROCEDURE);\n\t(void) print_function_arguments(&buf, proctup, false, true);\n\t\tappendStringInfoString(&buf, \" RETURNS \");\n\t}", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t{\n\t\tappendPQExpBufferStr(&sql, \" ICU_LOCALE \");\n\t}\n\tif (icu_rules)\n\t}", "partial_line": "pg_log_error(\"database creation f", "completion": "pg_log_error(\"database creation failed: %s\", PQerrorMessage(conn)); <|endoftext|>"}
{"context": "\t\t\tmsgfmt = gettext_noop(\"text search configuration \\\"%s\\\" already exists in schema \\\"%s\\\"\");\n}\n\tint\t\t\toidCacheId = get_object_catcache_oid(classId);\n\tbool\t\tisnull;\n\tOid\t\t\tnamespaceId;", "partial_line": "oldtup = SearchSysCache1(oidCacheId, ObjectId", "completion": "oldtup = SearchSysCache1(oidCacheId, ObjectIdGetDatum(objectId)); <|endoftext|>"}
{"context": "                goto lab2;\n                z->bra = z->c;\n                {   int ret = slice_from_s(z, 1, s_8);\n                }\n                z->bra = z->c;", "partial_line": "z->c", "completion": "z->c++; <|endoftext|>"}
{"context": "\t\tif (filename[0] == '.' && (filename[1] == '\\0'\n\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t   tar->tblspc_oid,\n\t\tverify_tar_file(context, tar->relpath, fullpath, streamer);\nprecheck_tar_backup_file(verifier_context *context, char *relpath,", "partial_line": "uint64", "completion": "uint64\t\tnum = strtoul(relpath, &suffix, 10); <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tdumpForeignDataWrapper(fout, (const FdwInfo *) dobj);\n\t\t\tdumpLO(fout, (const LoInfo *) dobj);\n\t\t\t\t\t\t\t\t\t\t\t   .section = SECTION_DATA,\n\t\t\tdumpPublication(fout, (const PublicationInfo *) dobj);", "partial_line": "dumpSubscription(fout,", "completion": "dumpSubscription(fout, (const SubscriptionInfo *) dobj); <|endoftext|>"}
{"context": "\t\tPG_RETURN_NULL();\n}\n\t\tPG_RETURN_NULL();\n\t\tcase AF_INET6:\n\tret = pg_getnameinfo_all(&beentry->st_clientaddr.addr,", "partial_line": "r", "completion": "result++; <|endoftext|>"}
{"context": "\t\t\t\tescape_json(es->str, (const char *) lfirst(lc));\n\t\t\t\tfirst = false;\n\t\t\t{\nvoid\n{", "partial_line": "switch (es-", "completion": "switch (es->format) <|endoftext|>"}
{"context": "\t\t{\n\t\t\tqoffset++;\n\t\tbeg_trunc = false;\n\t\t\telse\n\t\t\t\t\tend_trunc = true;", "partial_line": "appendPQExpBuf", "completion": "appendPQExpBufferStr(msg, &wquery[qidx[ibeg]]); <|endoftext|>"}
{"context": "\tif (namestrcmp(&evtForm->evtevent, \"login\") == 0 &&\n}\n\tHeapTuple\ttup;\n\tRelation\trel;\n\tObjectAddress address;", "partial_line": "evtOid =", "completion": "evtOid = evtForm->oid; <|endoftext|>"}
{"context": "\tctx->end_xact = true;\ncommit_prepared_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn,\n{\n\tctx->write_location = txn->end_lsn; \n\tif (ctx->callbacks.commit_prepared_cb == NULL)", "partial_line": "erep", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "create_indexscan_plan(PlannerInfo *root,\n\tfixed_indexorderbys = fix_indexorderby_references(root, best_path);\n\t{\n\t\t\tcontinue;\t\t\t\n\t\tif (is_redundant_with_indexclauses(rinfo, indexclauses))", "partial_line": "qpqual = lappend", "completion": "qpqual = lappend(qpqual, rinfo); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tgoto redirect;\n\t\t\t\t}\n\t\t\telse\t\t\t\t\n}\n{", "partial_line": "so->hea", "completion": "so->heapPtrs[so->nPtrs] = *heapPtr; <|endoftext|>"}
{"context": "\t\t\t\t\t\t List *tlist, Plan *lefttree, Plan *righttree,\nstatic Result *make_result(List *tlist, Node *resconstantqual, Plan *subplan);\nstatic ModifyTable *make_modifytable(PlannerInfo *root, Plan *subplan,\n\t\telog(ERROR, \"failed to assign all NestLoopParams to plan nodes\");\n{", "partial_line": "Plan", "completion": "Plan\t   *plan; <|endoftext|>"}
{"context": "\t\tdo\n\t\t{\n\t\t*dst++ = (u_char) tmp;\n\t\tif (ch == '\\0' || ch == '/')\n\t\t\tgoto enoent;", "partial_line": "errno = EN", "completion": "errno = ENOENT; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   0);\n\t\t\tnumNotReportedDbs++;\n\t\treturn false;\n\t\tappendStringInfo(&descs, ngettext(\"\\nand %d other object \"\n\t\t\t\t\t\t\t\t\t\t  \"(see server log for list)\",", "partial_line": "\"\\nand", "completion": "\"\\nand objects in %d other databases \" <|endoftext|>"}
{"context": "\t\t{\n\tif (low != middle && pos >= offset && pos - offset < txt->size)\n\tif (middle + 1 != high && pos >= offset && pos - offset < txt->size)\n\t\tstat = MemoryContextAllocZero(persistentContext, sizeof(TSVectorStat));\n\t}", "partial_line": "pfre", "completion": "pfree(txt); <|endoftext|>"}
{"context": "\t\tif (chosen[i])\n\t\t{\n\t\tif (chosen[i])\n\t\tfind.key = i;\n\t\tnode = (IntRBTreeNode *) rbt_find(tree, (RBTNode *) &find);", "partial_line": "if (size <= 0 || size > M", "completion": "if (size <= 0 || size > MaxAllocSize / sizeof(int)) <|endoftext|>"}
{"context": "void\n\tListCell   *lc;\n\t\t}\n\t\telse\n\t\tif (DO_AGGSPLIT_SERIALIZE(aggsplit) &&", "partial_line": "avgwidth = transinfo->agg", "completion": "avgwidth = transinfo->aggtransspace; <|endoftext|>"}
{"context": "int\n\tif (!cancelConn || cancelConn->conn.status == CONNECTION_BAD)\n\t\tlibpq_append_conn_error(conn, \"unexpected response from server\");\n\t\treturn PGRES_POLLING_FAILED;\nint", "partial_line": "PQcancelErrorMessage", "completion": "PQcancelErrorMessage(const PGcancelConn *cancelConn) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t \"    <xsd:maxInclusive value=\\\"%d\\\"/>\\n\"\n\t\t\t\t\t\t\t\t \"    <xsd:minInclusive value=\\\"%d\\\"/>\\n\"\n\t\t\t\tappendStringInfo(&result,\n\t\t\t\tbreak;\n\t\t\t\tbreak;", "partial_line": "if (t", "completion": "if (typmod == -1) <|endoftext|>"}
{"context": "\t\tif (newval > 0 && !get_timeout_active(TRANSACTION_TIMEOUT))\n\tchar\t   *rawstring;\n\trawstring = pstrdup(*newval);\n\t\tchar\t   *tok = (char *) lfirst(l);\n\t\t\tpfree(rawstring);", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t}\n\treturn strcmp(fna + 8, fnb + 8);\n\tbool\t\to_progress = false;\n\tbool\t\to_tablespace_map = false;\n\tchar\t   *target_detail_str = NULL;", "partial_line": "errmsg(\"duplicate option \\", "completion": "errmsg(\"duplicate option \\\"%s\\\"\", defel->defname))); <|endoftext|>"}
{"context": "\t\t\t\t\t(Datum *) palloc(sizeof(Datum) * nelems);\n\t\t\t\t\t\t\t\t\t&scratch.d.minmax.nulls[off]);\n\t\t\t\tint\t\t\tnargs = list_length(xexpr->args);\n\t\t\t\tscratch.opcode = EEOP_XMLEXPR;\n\t\t\t\t\tscratch.d.xmlexpr.named_argvalue =", "partial_line": "(bool *) palloc(siz", "completion": "(bool *) palloc(sizeof(bool) * nnamed); <|endoftext|>"}
{"context": "#include \"access/xlog_internal.h\"\n#include \"catalog/pg_control.h\"\n\tastreamer\tbase;\n\tbool\t\tverify_checksum;\n\t\t\t\t\t\t\t\t\t const char *data, int len);", "partial_line": "static void member_reset_", "completion": "static void member_reset_info(astreamer *streamer); <|endoftext|>"}
{"context": "\t\tAffix->issimple = 0;\n\t\tRS_compile(&(Affix->reg.regis), (type == FF_SUFFIX),\n\t\tint\t\t\terr;\n\t\tAffix->issimple = 0;\n\t\tif (type == FF_SUFFIX)", "partial_line": "REG_ADVANCED |", "completion": "REG_ADVANCED | REG_NOSUB, <|endoftext|>"}
{"context": "\t\t\t\t\t*nextpos = posb + 1;\n\t\tpos = posb + 1;\n}\n\t\tif (prs->words[i].item)\n\t\t\tbreak;", "partial_line": "for (i = *startpos", "completion": "for (i = *startpos; i <= *endpos && *curlen < max_words; i++) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tresult = TM_Ok;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tresult = TM_Ok;\n\t\t\t\t\t\tbreak;\n\t\t{", "partial_line": "if (!HeapTupleH", "completion": "if (!HeapTupleHeaderIsOnlyLocked(tuple->t_data) && <|endoftext|>"}
{"context": "\tincrsortstate->prefixsort_state = NULL;\n\t\tprefixsortGroupInfo->totalMemorySpaceUsed = 0;\n\t}\n\t\t\t\t\t\t\t\t &TTSOpsMinimalTuple);\n\tincrsortstate->transfer_tuple =", "partial_line": "SO_printf(\"ExecInitIncrementalS", "completion": "SO_printf(\"ExecInitIncrementalSort: sort node initialized\\n\"); <|endoftext|>"}
{"context": "\treturn constraintId;\n\tRelation\tpg_constraint;\n\tHeapTuple\ttuple;\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\tScanKeyInit(&skey[2],", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tdouble\t\tclamp = rel->tuples;\n\t} while (varinfos != NIL);\n\t\treturn hashclauses;\n\t\t\tGroupVarInfo *varinfo;\n\t\t\tif (bms_get_singleton_member(relids, &relid) &&", "partial_line": "origin_rinfos = lappend(origin_r", "completion": "origin_rinfos = lappend(origin_rinfos, rinfo); <|endoftext|>"}
{"context": "\t{\n\t\treadSource = source;\n\treturn -1;\n\tList\t   *tles;\n\t\t\t\tif (!expectedTLEs)", "partial_line": "expectedTLEs =", "completion": "expectedTLEs = tles; <|endoftext|>"}
{"context": "#ifndef FRONTEND\n#include \"postgres.h\"\n{", "partial_line": "*errstr", "completion": "*errstr = NULL; <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\tset_extra_field(&conf->gen, &conf->gen.extra,\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\t\tconf->assign_hook(conf->reset_val,", "partial_line": "set_extra", "completion": "set_extra_field(&conf->gen, &conf->gen.extra, <|endoftext|>"}
{"context": "\t\t\tshowProcedure = true;\n\t\t\t\t\t  gettext_noop(\"Schema\"),\n\tif (pset.sversion >= 110000)\n\t\t\t\t\t\t  \"  WHEN \" CppAsString2(PROKIND_WINDOW) \" THEN '%s'\\n\"\n\t\t\t\t\t\t  \"  ELSE '%s'\\n\"", "partial_line": "gettext_n", "completion": "gettext_noop(\"Result data type\"), <|endoftext|>"}
{"context": "\t\tbool\t\tisnull;\n\t\t\t\t\t  -1  ,\n\t\t\t\t\t  false  ,\n\t\t\t\t\t\t\t\t false,\n\t\t\t\t\t\t\t\t -1  ,", "partial_line": "ArrayTy", "completion": "ArrayType * <|endoftext|>"}
{"context": "\tgm_state->ps.outeropsset = true;\n\tExecInitResultTypeTL(&gm_state->ps);\n\t{\n\t\tgm_state->gm_sortkeys =\n\t\t\t\t\t\t\t\t\t\t gm->initParam);", "partial_line": "estate->es_parallel", "completion": "estate->es_parallel_workers_launched += pcxt->nworkers_launched; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t   JsonbValue *rarg,\ntypedef Numeric (*BinaryArithmFunc) (Numeric num1, Numeric num2, bool *error);\n\t\t\t\t\t\t\t\t\t\t  JsonbValue *v, JsonValueList *found, bool copy);\nstatic JsonPathBool executePredicate(JsonPathExecContext *cxt,\nstatic JsonPathExecResult executeBinaryArithmExpr(JsonPathExecContext *cxt,", "partial_line": "static JsonPathExecRes", "completion": "static JsonPathExecResult executeNumericItemMethod(JsonPathExecContext *cxt, <|endoftext|>"}
{"context": "\tif (forkNumber == InvalidForkNumber)\ntable_block_relation_estimate_size(Relation rel, int32 *attr_widths,\n\t\t\t\t\t\t\t\t   BlockNumber *pages, double *tuples,\n\t{\n\t\t*allvisfrac = 0;", "partial_line": "int\t\t\tfi", "completion": "int\t\t\tfillfactor; <|endoftext|>"}
{"context": "\t\tif (!dbform->datallowconn && !override_allow_connections)\n\t\t\tereport(FATAL,\n\t\tif (!am_superuser && !override_allow_connections &&\n\t\t\tobject_aclcheck(DatabaseRelationId, MyDatabaseId, GetUserId(),\n\t\t\t\t\t(errcode(ERRCODE_TOO_MANY_CONNECTIONS),", "partial_line": "errmsg(\"too many connections for da", "completion": "errmsg(\"too many connections for database \\\"%s\\\"\", <|endoftext|>"}
{"context": "\t\t}\n\t\tfprintf(stderr, \"added \" UINT64_FORMAT \" values in %d ms\\n\",\n\t\tbool\t\tb;\n\t\t{\n\tif (intset_test_stats)", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "#include <limits.h>\n#include \"libpq-int.h\"\n\t.errMsg = \"out of memory\\n\",", "partial_line": "static void pa", "completion": "static void parseInput(PGconn *conn); <|endoftext|>"}
{"context": "\t\t\t\t\tpltcl_set_tuple_values(interp, arrayname, i,\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\t\t\t\tTcl_SetObjResult(interp, Tcl_NewWideIntObj(ntuples));\n\t\t\tTcl_AppendResult(interp, \"pltcl: SPI_execute failed: \",", "partial_line": "volatile Me", "completion": "volatile MemoryContext plan_cxt = NULL; <|endoftext|>"}
{"context": "\tECPGt_char,&(curname2),(long)0,(long)1,(1)*sizeof(char), \n\tprintf(\"%d %s\\n\", id, t);\n\tECPGt_int,&(count),(long)1,(long)1,sizeof(int), \n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, \n\tECPGt_char,(t),(long)64,(long)1,(64)*sizeof(char), ", "partial_line": "strcpy(msg,", "completion": "strcpy(msg, \"move\"); <|endoftext|>"}
{"context": "\tctx->m.b8[23] = tctx.m.b8[20];\n\tctx->m.b8[24] = tctx.m.b8[27];\n\tctx->m.b8[26] = tctx.m.b8[25];\n\tctx->m.b8[41] = tctx.m.b8[42];\n\tctx->m.b8[45] = tctx.m.b8[46];", "partial_line": "ctx->m.b8[57] = tctx.", "completion": "ctx->m.b8[57] = tctx.m.b8[58]; <|endoftext|>"}
{"context": "\tres = PQfn(conn, conn->lobjfuncs->fn_lo_unlink,\n\t\tPQclear(res);\n\t\tlobjOid = lo_create(conn, oid);\n\tlobj = lo_open(conn, lobjOid, INV_WRITE);\n\t(void) close(fd);", "partial_line": "lo_export(PGconn *conn, Oid lobjId", "completion": "lo_export(PGconn *conn, Oid lobjId, const char *filename) <|endoftext|>"}
{"context": "\t\ttuple = heap_form_tuple(funcctx->tuple_desc, values, nulls);\nTransactionId\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}", "partial_line": "Pr", "completion": "ProcNumber <|endoftext|>"}
{"context": "\t\tEXPECT_EQ_U64(*value, (TestValueType) keys[i]);\n\t{\n\t\tEXPECT_TRUE(iterval != NULL);\nstatic int\n\tuint64\t   *keys;", "partial_line": "radixtree = rt_create(d", "completion": "radixtree = rt_create(dsa, tranche_id); <|endoftext|>"}
{"context": "\tif (spec->parse_error != NULL)\n\t\t\tmin_level = ZSTD_minCLevel();\n\t\tcase PG_COMPRESSION_NONE:\n\t\tspec->level != default_level)\n\t}", "partial_line": "return N", "completion": "return NULL; <|endoftext|>"}
{"context": "Datum\n{\n{\n\t\t\t\t\t\tfloat8_mi(circle1->radius, circle2->radius)));\n\t\t\t\t\t\tfloat8_pl(circle2->center.y, circle2->radius)));", "partial_line": "PG_RETURN_BOOL(FPle(float8_pl(cir", "completion": "PG_RETURN_BOOL(FPle(float8_pl(circle1->center.y, circle1->radius), <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(FPle(float8_pl(circle1->center.y, circle1->radius),\nDatum\ncircle_overabove(PG_FUNCTION_ARGS)\n\tCIRCLE\t   *circle2 = PG_GETARG_CIRCLE_P(1);\n\tPG_RETURN_BOOL(FPeq(circle_ar(circle1), circle_ar(circle2)));", "partial_line": "CIRCLE\t   *circle2 = PG_G", "completion": "CIRCLE\t   *circle2 = PG_GETARG_CIRCLE_P(1); <|endoftext|>"}
{"context": "void\n\tmy_level = GetCurrentTransactionNestLevel();\n\tif (isCommit)\n\t\ttransInvalInfo = myInfo->parent;\nCommandEndInvalidationMessages(void)", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "\t\tNOERR();\n\t\t{\n\t\tt = t->sibling;\n\treturn REG_NOMATCH;\nciterdissect(struct vars *v,", "partial_line": "assert(t->child != NUL", "completion": "assert(t->child != NULL && t->child->cnfa.nstates > 0); <|endoftext|>"}
{"context": "\t\t}\n\t}\n\tfree_object_addresses(addrs_auto);\n\t\t\t\tadd_exact_object_address(&oprobject, addrs_normal);\n\t\t\t\toprobject.objectId = ffEqOp[i];", "partial_line": "add_exact_", "completion": "add_exact_object_address(&oprobject, addrs_normal); <|endoftext|>"}
{"context": "\t\t\t const char *macro, const char *macro_val)\n\tp = path;\n\t\tchar\t   *full;\n\t\t\t\t\t(errcode(ERRCODE_INVALID_NAME),\n\t\t\tbreak;", "partial_line": "p += l", "completion": "p += len + 1; <|endoftext|>"}
{"context": "\trel->eclass_indexes = NULL;\n\trel->subplan_params = NIL;\n\t\t\t   parent->rtekind == RTE_SUBQUERY);\n\t\t\tperminfo = getRTEPermissionInfo(root->parse->rteperminfos, rte);\n\trel->baserestrictcost.per_tuple = 0;", "partial_line": "rel->baserestrict_min_sec", "completion": "rel->baserestrict_min_security = UINT_MAX; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t  (cmptype == COMPARE_GT),\n\telse\n\t\tpathkeys = NIL;\n\t\tPathKey    *sub_pathkey = (PathKey *) lfirst(i);\n\t\tEquivalenceClass *sub_eclass = sub_pathkey->pk_eclass;", "partial_line": "if (sub_ecla", "completion": "if (sub_eclass->ec_sortref == 0) <|endoftext|>"}
{"context": "prsd_start(PG_FUNCTION_ARGS)\n\tPG_RETURN_POINTER(TParserInit((char *) PG_GETARG_POINTER(0), PG_GETARG_INT32(1)));\n\tchar\t  **t = (char **) PG_GETARG_POINTER(1);\n\t\tPG_RETURN_INT32(0);\nprsd_end(PG_FUNCTION_ARGS)", "partial_line": "#define NONWORDTOKEN(x) ( (x)==SPACE || HLIDREPLA", "completion": "#define NONWORDTOKEN(x) ( (x)==SPACE || HLIDREPLACE(x) || HLIDSKIP(x) ) <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\ttrack[j].count = track[j - 1].count;\n\t\t\t\t\tsummultiple;\n\t\t\tif (N > 0)\n\t\t\tif (stadistinct > N)", "partial_line": "stats->stadistinct", "completion": "stats->stadistinct = floor(stadistinct + 0.5); <|endoftext|>"}
{"context": "#include \"parser/parse_func.h\"\n\tchar\t   *oprName;\n\tOid\t\t\ttypeId2 = InvalidOid;", "partial_line": "if (strc", "completion": "if (strcmp(defel->defname, \"leftarg\") == 0) <|endoftext|>"}
{"context": "\telse\nDatum\n\tmultirange_get_bounds(typcache->rngtype, mr, 0,\n{\n\tMultirangeType *mr = PG_GETARG_MULTIRANGE_P(0);", "partial_line": "Ran", "completion": "RangeBound\tupper; <|endoftext|>"}
{"context": "\tCHECK_STACK_DEPTH();\n\trecursion_depth--;\nint\n\tErrorData  *edata = &errordata[errordata_stack_depth];\n\tMemoryContext oldcontext;", "partial_line": "oldcontext", "completion": "oldcontext = MemoryContextSwitchTo(edata->assoc_context); <|endoftext|>"}
{"context": "\tv->next = NULL;\n\t\tv->stem = (char **) palloc(sizeof(char *) * v->lenstem);\n\t\tv->nstem = 0;\nstatic void\n\t}", "partial_line": "int\t\t\tcom", "completion": "int\t\t\tcompoundflag = 0; <|endoftext|>"}
{"context": "\tif (oldlen != newlen || htup->t_hoff != tuple->t_data->t_hoff)\n\tdst = (char *) htup + htup->t_hoff;\n\t\t\t\t\t\t\t\t\t\t\t   &RelcacheInitFileInval);\n\tMyProc->delayChkptFlags |= DELAY_CHKPT_START;\n\tif (RelationNeedsWAL(relation))", "partial_line": "xl_heap_inp", "completion": "xl_heap_inplace xlrec; <|endoftext|>"}
{"context": "static void deltraverse(struct nfa *nfa, struct state *leftend,\nstatic void dupnfa(struct nfa *nfa, struct state *start, struct state *stop,\nstatic struct state *single_color_transition(struct state *s1,\nstatic void specialcolors(struct nfa *nfa);\nstatic long optimize(struct nfa *nfa, FILE *f);", "partial_line": "static void breakconstraintloop(struct nfa", "completion": "static void breakconstraintloop(struct nfa *nfa, struct state *sinitial); <|endoftext|>"}
{"context": "\tint\t\t\taccum_ndigits;\n\tval_rscale = val->ndigits - val->weight - 1;\n\t\tweightdiff = accum_weight - old_weight;\n\t\tnew_neg_digits = palloc0(accum_ndigits * sizeof(int32));\n\t\t\tmemcpy(&new_neg_digits[weightdiff], accum->neg_digits,", "partial_line": "accum", "completion": "accum->weight = accum_weight; <|endoftext|>"}
{"context": "\t\t\t   procStruct->pronargs * sizeof(Oid));\n\t\t\t\t\t\t\t\t\t\t   forValidator,\n\t}\n\t\t\tcase TYPEFUNC_COMPOSITE:\n\t\t\t\t\t\t\t\t   Node *call_expr, bool forValidator,", "partial_line": "in", "completion": "int\t\t\tinargno; <|endoftext|>"}
{"context": "#include \"common/string.h\"\nstatic void notice_processor(void *arg, const char *message);\n\tremoteversion_str = PQparameterStatus(AH->connection, \"server_version\");\n\t\tropt->cparams.override_dbname = pg_strdup(dbname);", "partial_line": "const ConnParams *", "completion": "const ConnParams *cparams, <|endoftext|>"}
{"context": "}\n\t\t\t\t\t\t\t\t\tdclist_count(&rb->catchange_txns));\n\t\t\t\t\t\t\t\t\t\t\t\t catchange_node,\n\tAssert(xcnt == dclist_count(&rb->catchange_txns));\n{", "partial_line": "fa", "completion": "false); <|endoftext|>"}
{"context": "\tbool\t\tisExplicit = PG_GETARG_BOOL(2);\n}\n#ifdef NOT_USED\n\tint\t\t\tlen,\t\t\t\n\tif (bit_not_hex)", "partial_line": "else if", "completion": "else if (bitlen > atttypmod) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t   .section = SECTION_DATA,\n\t\t\tdumpPublication(fout, (const PublicationInfo *) dobj);\n\t\t\tdumpSubscription(fout, (const SubscriptionInfo *) dobj);\n}\n\tchar\t   *qnspname;", "partial_line": "\"SCHEMA\", qns", "completion": "\"SCHEMA\", qnspname, NULL); <|endoftext|>"}
{"context": "\t\t{\n\t\t\tpfree(lower_element);\nstatic bool\n\tif (localized_array == NULL)\n\t\t\t\t*c = '\\0';", "partial_line": "\"the all", "completion": "\"the allowed values for this field.\"))); <|endoftext|>"}
{"context": "\t\t\tbool check_rights,\n\tOid\t\t\ttablespaceId;\n\tForm_pg_am\taccessMethodForm;\n\tbool\t\tpartitioned;\n\tLockRelId\theaprelid;", "partial_line": "int\t\t\troot_sa", "completion": "int\t\t\troot_save_nestlevel; <|endoftext|>"}
{"context": "\tif (state == NULL || (totCount = NA_TOTAL_COUNT(state)) == 0)\n\t\t*is_null = true;\n\taccum_sum_final(&(state->sumX2), &vsumX2);\n\tmul_var(&vsumX, &vsumX, &vsumX, rscale);\t\n\t\tif (sample)", "partial_line": "mul_var(&vN, &vNminus1, &v", "completion": "mul_var(&vN, &vNminus1, &vNminus1, 0); <|endoftext|>"}
{"context": "\t\t\t\t\t \"cluster cannot currently be upgraded.  You can drop the problem \\n\"\n\t\t\t\t\t \"The \\\"abstime\\\" type has been removed in PostgreSQL version 12,\\n\"\n\t\t.base_query =\n\t\t\t\t\t \"The \\\"reltime\\\" type has been removed in PostgreSQL version 12,\\n\"\n\t\t.threshold_version = 1100", "partial_line": ".ba", "completion": ".base_query = <|endoftext|>"}
{"context": "}\n\tif (dotcnt > 0)\n\t}\nappend_schema_pattern(PatternInfoArray *pia, const char *pattern, int encoding)\n\tint\t\t\tdotcnt;", "partial_line": "if (dotcnt", "completion": "if (dotcnt > 1) <|endoftext|>"}
{"context": "        if (ret < 0) return ret;\n        z->c = c2;\n    }\n                    {   int ret = r_standard_suffix(z);\n                        if (ret == 0) goto lab5;", "partial_line": "la", "completion": "lab5: <|endoftext|>"}
{"context": "\t\t\t\tuint64\t\ti;\n\t\t\t\t{\n\t\t\t\t\tpltcl_set_tuple_values(interp, arrayname, i,\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;", "partial_line": "Tcl_SetObjResult(interp, Tcl_Ne", "completion": "Tcl_SetObjResult(interp, Tcl_NewWideIntObj(ntuples)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t   inner_rel,\n\t\t\t\t\t\t\t\t\t\t   restrictlist);\nget_parameterized_joinrel_size(PlannerInfo *root, RelOptInfo *rel,\n\t\t\t\t\t\t\t   List *restrict_clauses)\n\t\t\t\t\t\t   RelOptInfo *outer_rel,", "partial_line": "RelOpt", "completion": "RelOptInfo *inner_rel, <|endoftext|>"}
{"context": "\tTuplesortstate *state = tuplesort_begin_common(workMem, coordinate,\n\tTuplesortPublic *base = TuplesortstateGetPublic(state);\n\tbool\t\ttypbyval;\n\tif (trace_sort)\n\t\t\t workMem, sortopt & TUPLESORT_RANDOMACCESS ? 't' : 'f');", "partial_line": "f", "completion": "false, <|endoftext|>"}
{"context": "\tint\t\t\tnlockids;\n\tlockids = (DumpId *) pg_malloc(te->nDeps * sizeof(DumpId));\n\t\t\t((strcmp(AH->tocsByDumpId[depid]->desc, \"TABLE DATA\") == 0) ||\n\t\treturn;\n}", "partial_line": "pg_log_info(\"table \\\"%s\\\" coul", "completion": "pg_log_info(\"table \\\"%s\\\" could not be created, will not restore its data\", <|endoftext|>"}
{"context": "{ 3, s_1_41, -1, -1, 0},\n{ 4, s_1_42, 41, -1, 0},\n{ 2, s_1_49, -1, -1, 0},\n{ 4, s_1_51, 50, -1, 0},\n{ 3, s_1_53, -1, -1, 0},", "partial_line": "{ 5, s_1_54, -", "completion": "{ 5, s_1_54, -1, -1, 0}, <|endoftext|>"}
{"context": "\t\t;\n\tswitch (mtype)\n\t\t\t\t\t(errcode(ERRCODE_QUERY_CANCELED),\n\t\t\t\t\t errmsg(\"COPY from stdin failed: %s\",\n\tXLogRecPtr\tFlushPtr;", "partial_line": ".segment_close", "completion": ".segment_close = wal_segment_close), <|endoftext|>"}
{"context": "\tmode = convert_server_priv_string(priv_type_text);\n\tOid\t\t\troleid;\n\tbool\t\tis_missing = false;\n\tif (is_missing)\n\taclresult = object_aclcheck_ext(ForeignServerRelationId, serverid,", "partial_line": "Oid\t\t\troleid", "completion": "Oid\t\t\troleid = PG_GETARG_OID(0); <|endoftext|>"}
{"context": "\t\t\t\t\t\t  Index removed_relid)\n{\n\t\t\t\tcontinue;\n{\n\t{", "partial_line": "binfo_candidate", "completion": "binfo_candidates = lappend(binfo_candidates, rinfo); <|endoftext|>"}
{"context": "\t{\n\t\t\tnextNotify = lnext(pendingNotifies->events, nextNotify);\n\t\t\tqe.dboid = InvalidOid;\n\t\tmemcpy(NotifyCtl->shared->page_buffer[slotno] + offset,\n\t\t\t   qe.length);", "partial_line": "QUEUE_HEA", "completion": "QUEUE_HEAD = queue_head; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t PQerrorMessage(conn));\n{\n\t\t{\n{\n\t\t\t(standby_message_timeout - 1) * ((int64) 1000);", "partial_line": "s", "completion": "secs = 1; <|endoftext|>"}
{"context": "\t\tRelids\t\treal_outer_and_req;\n\t\t\t\t\t\t\t\t\t\t\t outer_and_req))\n\t*restrict_clauses = list_concat(pclauses, *restrict_clauses);\n\t\treturn ppi;\n\tppi = makeNode(ParamPathInfo);", "partial_line": "ParamPathIn", "completion": "ParamPathInfo *ppi; <|endoftext|>"}
{"context": "\tclose(fd);\n\trecurse_dir(datadir, NULL, callback);\n\t\tsnprintf(fullparentpath, MAXPGPATH, \"%s/%s\", datadir, parentpath);\n\t\tsnprintf(fullparentpath, MAXPGPATH, \"%s\", datadir);\n\t\tstruct stat fst;", "partial_line": "if (errno ==", "completion": "if (errno == ENOENT) <|endoftext|>"}
{"context": "\tResourceOwnerRelease(TopTransactionResourceOwner,\n\t\t\t\t\t\t RESOURCE_RELEASE_AFTER_LOCKS,\n\tCurrentResourceOwner = NULL;\n\tXactTopFullTransactionId = InvalidFullTransactionId;\n\tAtAbort_ResourceOwner();", "partial_line": "XLogResetIns", "completion": "XLogResetInsertion(); <|endoftext|>"}
{"context": "\t\t\t\t\t\telse\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t errmsg(\"invalid Roman numeral\")));", "partial_line": "if (Np-", "completion": "if (Np->is_to_char) <|endoftext|>"}
{"context": "\t}\n\t\t{\n\t\t\t\terrcontext(\"line %d of configuration file \\\"%s\\\"\",\n\t{\n\t\t\tgoto done;", "partial_line": "ereport", "completion": "ereport(elevel, <|endoftext|>"}
{"context": "\t\t\treturn \"EBUSY\";\n\t\tcase EDOM:\n\t\t\treturn \"EFBIG\";\n\t\tcase EHOSTUNREACH:\n\t\t\treturn \"EINVAL\";", "partial_line": "#ifdef E", "completion": "#ifdef ELOOP <|endoftext|>"}
{"context": "\t\tCOMPLETE_WITH(\"WITH (\", \"WHERE\");\n\telse if (Matches(\"COPY|\\\\copy\", MatchAny, \"FROM|TO\", MatchAny, \"WITH\", \"(\", \"FORMAT\"))\n\telse if (Matches(\"CREATE\", \"ACCESS\", \"METHOD\", MatchAny, \"TYPE\"))\n\t\tCOMPLETE_WITH(\"INDEX\", \"TABLE\");\n\t\t\tCOMPLETE_WITH(\"LOCALE =\", \"LC_COLLATE =\", \"LC_CTYPE =\",", "partial_line": "COMPLETE_WITH(\"OWNER\", \"", "completion": "COMPLETE_WITH(\"OWNER\", \"TEMPLATE\", \"ENCODING\", \"TABLESPACE\", <|endoftext|>"}
{"context": "{ 6, s_55_34, -1, 1, 0},\n};\nstatic const symbol s_57_0[8] = { 0xCE, 0xB7, 0xCF, 0x83, 0xCE, 0xBF, 0xCF, 0x85 };\nstatic const symbol s_58_5[12] = { 0xCE, 0xB5, 0xCF, 0x81, 0xCE, 0xB7, 0xCE, 0xBC, 0xCE, 0xBF, 0xCE, 0xBD };\nstatic const symbol s_60_8[6] = { 0xCE, 0xB1, 0xCF, 0x80, 0xCE, 0xBB };", "partial_line": "{ 4, s_60_0", "completion": "{ 4, s_60_0, -1, 1, 0}, <|endoftext|>"}
{"context": "\t{\n\t\tnumaliases = list_length(aliaslist);\n\telse\n\t{\n\t\telse if (aliaslc)", "partial_line": "alias->colnames = lappend(alias->coln", "completion": "alias->colnames = lappend(alias->colnames, attrname); <|endoftext|>"}
{"context": "static const symbol s_2_689[4] = { 'i', 'j', 't', 'e' };\nstatic const symbol s_2_698[7] = { 'i', 'n', 'j', 'a', 's', 't', 'e' };\nstatic const symbol s_2_703[6] = { 'e', 'v', 'a', 's', 't', 'e' };\nstatic const symbol s_2_714[7] = { 'j', 'e', 't', 'i', 's', 't', 'e' };\nstatic const symbol s_2_718[4] = { 'k', 's', 't', 'e' };", "partial_line": "static const sym", "completion": "static const symbol s_2_720[9] = { 'a', 's', 't', 'a', 'd', 'o', 's', 't', 'e' }; <|endoftext|>"}
{"context": "#else\t\t\t\t\t\t\t\nstatic size_t last_status_len;\t\n#endif\t\t\t\t\t\t\t\nstatic size_t ps_buffer_cur_len;\t\n#endif\t\t\t\t\t\t\t", "partial_line": "save_a", "completion": "save_argv = argv; <|endoftext|>"}
{"context": "\t\t\tif (is_local)\n\t\t\tcon->conenforced = true;\n\t\t\t\t\t\t\t  List *old_notnulls)\n\t{\n\t\tAttrNumber\tattnum;", "partial_line": "int", "completion": "int\t\t\tinhcount = 0; <|endoftext|>"}
{"context": "\t\t\tcontext.safe_param_ids = list_concat(context.safe_param_ids,\nmax_parallel_hazard_test(char proparallel, max_parallel_hazard_context *context)\n\tswitch (proparallel)\n\t\t\tbreak;\n\t\t\tbreak;", "partial_line": "context->max_hazard = p", "completion": "context->max_hazard = proparallel; <|endoftext|>"}
{"context": "\t\t\t{\n\t\t\t\tExplainPropertyFloat(\"Tuples Deleted\", NULL, delete_path, 0, es);\n}\nExplainMemberNodes(PlanState **planstates, int nplans,\n{", "partial_line": "sta", "completion": "static void <|endoftext|>"}
{"context": "\t}\n\t\telog(ERROR, \"cache lookup failed for function %u\", member->object);\n\t\t{\n\t\t\t\tereport(ERROR,\n\t\t\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_INVALID_OBJEC", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),\n\t\tns_uri = TextDatumGetCString(value);\n\t{\n\t\t\t\t\t\t\t errmsg(\"column filter expression must not be null\"),\n\t\tcolno++;", "partial_line": "Datum\t   *valu", "completion": "Datum\t   *values = slot->tts_values; <|endoftext|>"}
{"context": "static void\nload_critical_index(Oid indexoid, Oid heapoid)\n\tif (ird == NULL)\n\tird->rd_isnailed = true;\n\tUnlockRelationOid(heapoid, AccessShareLock);", "partial_line": "result->tdtypmo", "completion": "result->tdtypmod = -1; <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\t{\n\t\t\tdisable_sigpipe_trap();\n{\n\tuint64\t\ttotal_cells;", "partial_line": "content->ti", "completion": "content->title = title; <|endoftext|>"}
{"context": "\t\tshared_ts_end_iterate(iter->tree_iter.shared);\n\tpfree(iter);\n\tif (TidStoreIsShared(ts))\n\telse\ndsa_pointer", "partial_line": "return (dsa_pointer) shared_ts_get_handle", "completion": "return (dsa_pointer) shared_ts_get_handle(ts->tree.shared); <|endoftext|>"}
{"context": "\t\t\t\t\t\t \"of a recursive query's working table.\"),\n\t\tDEFAULT_RECURSIVE_WORKTABLE_FACTOR, 0.001, 1000000.0,\n\t\t\tgettext_noop(\"GEQO: selective pressure within the population.\"),\n\t\t&Geqo_selection_bias,\n\t\t2.0, 1.0, 1000.0,", "partial_line": "NU", "completion": "NULL, <|endoftext|>"}
{"context": "\t\t\telog(ERROR, \"unrecognized cmd_type: %d\", stmt->cmd_type);\n\tListCell   *s;\n{\n\tdump_ind();\n\t\t\t\tif (cond != exc->conditions)", "partial_line": "dum", "completion": "dump_ind(); <|endoftext|>"}
{"context": "\t\t{\n\t\t\telem_clauses = lappend(elem_clauses, elem_clause);\n\t\t\treturn PARTCLAUSE_MATCH_CONTRADICT;\n\t\telse if (*clause_steps == NIL)\n\t\t*clause_is_not_null = (nulltest->nulltesttype == IS_NOT_NULL);", "partial_line": "bool st", "completion": "bool step_op_is_ne, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t ExecGetCommonChildSlotOps(&rustate->ps),\nExecRecursiveUnion(PlanState *pstate)\n\tPlanState  *innerPlan = innerPlanState(node);\n\t\t\tslot = ExecProcNode(outerPlan);\n\t\t\tif (plan->numCols > 0)", "partial_line": "Tuple", "completion": "Tuplestorestate *swaptemp; <|endoftext|>"}
{"context": "\ttupdesc1 = lookup_rowtype_tupdesc(tupType1, tupTypmod1);\n\tncolumns1 = tupdesc1->natts;\n\ttuple2.t_data = record2;\n\t{\n\t\tMemSet(my_extra->columns, 0, ncols * sizeof(ColumnCompareData));", "partial_line": "my_extra->record2_t", "completion": "my_extra->record2_typmod = tupTypmod2; <|endoftext|>"}
{"context": "\tBpChar\t   *arg2 = PG_GETARG_BPCHAR_PP(1);\n\tresult = internal_bpchar_pattern_compare(arg1, arg2);\nbpchar_pattern_gt(PG_FUNCTION_ARGS)\nDatum\n\tint\t\t\tresult;", "partial_line": "MemoryContext old", "completion": "MemoryContext oldcontext; <|endoftext|>"}
{"context": "\tint64\t\tmaxSpaceUsed;\n\tif (!es->analyze || tupstore == NULL)\n\ttuplestore_get_stats(tupstore, &maxStorageType, &maxSpaceUsed);\nshow_recursive_union_info(RecursiveUnionState *rstate, ExplainState *es)\n\t\t\t\t\t\t &maxSpaceUsed);", "partial_line": "maxSpaceUsed += te", "completion": "maxSpaceUsed += tempSpaceUsed; <|endoftext|>"}
{"context": "\t\t\t\t\t\tcmname = \"lz4\";\n\t\t\t\t\t\t\t\t\t  fmtId(tbinfo->attnames[j]),\n\t\t\t}\n\t\t\t\t\t\t\t\t  fmtId(tbinfo->attnames[j]),\n\t\t\t\tappendPQExpBuffer(q,", "partial_line": "\"", "completion": "\"    %s\\n\" <|endoftext|>"}
{"context": "\t\t\t\t\telse\n\t}\n{\n\tbuf = (char *) pg_malloc(buflen);\n\t\tsize_t\t\tnread;", "partial_line": "FILE", "completion": "FILE\t   *fd; <|endoftext|>"}
{"context": "\t\t\t\tmatch_pattern_prefix((Node *) linitial(clause->args),\n\t\t\t\t\t\t\t\t\t req->opfamily,\n\t\telse if (is_funcclause(req->node))\t\n\t}\nstatic List *", "partial_line": "((Cons", "completion": "((Const *) rightop)->constisnull) <|endoftext|>"}
{"context": "ts_headline_jsonb_opt(PG_FUNCTION_ARGS)\n\t\t\t\t\t\t\t\t\t\tPG_GETARG_DATUM(1),\n\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\tPG_FREE_IF_COPY(json, 1);\nDatum", "partial_line": "PG_", "completion": "PG_GETARG_DATUM(0), <|endoftext|>"}
{"context": "\t\t}\nstatic void\n{\n\t\t\tbreak;\n\t\t\t\tereport(ERROR,", "partial_line": "(errcode(ERRCODE_INVALID_OBJEC", "completion": "(errcode(ERRCODE_INVALID_OBJECT_DEFINITION), <|endoftext|>"}
{"context": "\tentry = LookupTupleHashEntry_internal(hashtable, slot, isnew, hash);\nTupleHashEntry\n\toldContext = MemoryContextSwitchTo(hashtable->tempcxt);\n\treturn entry;\n\t\t\t\t\t\t\t\t\t\t\t  hashtable->exprcontext,", "partial_line": "return m", "completion": "return murmurhash32(hashkey); <|endoftext|>"}
{"context": "{\n\t\tif (bms_is_subset(sjinfo->min_lefthand, rel1->relids) &&\n\t\t\t\t!bms_equal(sjinfo->syn_righthand, rel2->relids))\n\t\t}\n\t\t\tmatch_sjinfo = sjinfo;", "partial_line": "bms_equal(sjinfo->syn_rightha", "completion": "bms_equal(sjinfo->syn_righthand, rel2->relids) && <|endoftext|>"}
{"context": "}\n#define RADIUS_MAX_PASSWORD_LENGTH 128\n\tuint8\t\tattribute;\n\tuint8\t\tdata[FLEXIBLE_ARRAY_MEMBER];\n\tuint8\t\tvector[RADIUS_VECTOR_LENGTH];", "partial_line": "#define RADIUS_U", "completion": "#define RADIUS_USER_NAME\t\t1 <|endoftext|>"}
{"context": "\t{\n\t\txlrec.poffset = poffset;\n\t\tXLogBeginInsert();\n\t\tXLogRegisterBuffer(0, leafbuf, REGBUF_WILL_INIT);\n\t\tXLogRegisterData(&xlrec, SizeOfBtreeMarkPageHalfDead);", "partial_line": "BlockNumber leafblkno", "completion": "BlockNumber leafblkno = BufferGetBlockNumber(leafbuf); <|endoftext|>"}
{"context": "ProcNumber\nTwoPhaseGetDummyProc(TransactionId xid, bool lock_held)\n\tAssert(TransactionIdIsValid(xid));\n\treturn FullTransactionIdFromAllowableAt(ReadNextFullTransactionId(), xid);\n\treturn snprintf(path, MAXPGPATH, TWOPHASE_DIR \"/%08X%08X\",", "partial_line": "TwoPhaseRmgr", "completion": "TwoPhaseRmgrId rmid; <|endoftext|>"}
{"context": "\telse if (IsPartialXLogFileName(restartWALFileName))\n\t\t\t\t\tlog = 0,\n\t\t{\n\t\t}\n\t{", "partial_line": "int", "completion": "int\t\t\targs; <|endoftext|>"}
{"context": "\t\ttrancheNames = (char *) NamedLWLockTrancheArray +\n\t\t{\n\t\t\ttranche->trancheName = name;\n#ifdef LWLOCK_STATS\n{", "partial_line": "int", "completion": "int\t\t\ti; <|endoftext|>"}
{"context": "{\n\tconst char *script;\t\t\t\n\t\t\"<builtin: TPC-B (sort of)>\",\n\t\t\"UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;\\n\"\n\t\t\"UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;\\n\"", "partial_line": "\"SELECT abalance FROM pgbench_accounts WH", "completion": "\"SELECT abalance FROM pgbench_accounts WHERE aid = :aid;\\n\" <|endoftext|>"}
{"context": "\t\t\t\t\t\tbase_yyerror(\"internal error: found multidimensional array\\n\");\n\t\t\t\t\t\tECPGfree_type(type->u.element);\n\t\t\tcase ECPGt_struct:\n\t\t\tdefault:\n\tfree(type->type_name);", "partial_line": "co", "completion": "const char * <|endoftext|>"}
{"context": "\t\tcmpCollations[keyno] = exprCollation((Node *) tle->expr);\nmake_lockrows(Plan *lefttree, List *rowMarks, int epqParam)\n{\n}\n\tPlan\t   *plan = &node->plan;", "partial_line": "node->uniqOperators =", "completion": "node->uniqOperators = uniqOperators; <|endoftext|>"}
{"context": "\tcopy_generic_path_info(&plan->plan, (Path *) best_path);\n\tMergeAppend *node = makeNode(MergeAppend);\n\tRelOptInfo *rel = best_path->path.parent;\n\t\t\t\t\t\t\t\t\t\t\t &sortOperators,\n\t\t\t\t\t  numsortkeys * sizeof(Oid)) == 0);", "partial_line": "Assert(memcmp(nullsFirst,", "completion": "Assert(memcmp(nullsFirst, node->nullsFirst, <|endoftext|>"}
{"context": "\t\tcase EXPR_KIND_PARTITION_EXPRESSION:\n\t\t\tbreak;\n\t\t\tbreak;\n\t\tcase EXPR_KIND_CYCLE_MARK:\n\t}", "partial_line": "(errcode(ERR", "completion": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED), <|endoftext|>"}
{"context": "\t\t}\n\t\t\t\t\t\t\t\t  InvalidationMsgsGroup *src,\n\tdest->nextmsg[subgroup] = src->nextmsg[subgroup];\n\t\tint\t\t_msgindex = (group)->firstmsg[subgroup]; \\\n\t} while (0)", "partial_line": "if (", "completion": "if (n > 0) { \\ <|endoftext|>"}
{"context": "\t\tif (msec > vacuum_cost_delay * 4)\n\t\tpg_usleep(msec * 1000);\n\t\t\t\tINSTR_TIME_ACCUM_DIFF(time_since_last_report, delay_end, last_report_time);\n\t\t\t\tif (INSTR_TIME_GET_NANOSEC(time_since_last_report) >=\n\t\t\t\t\tparallel_vacuum_worker_delay_ns = 0;", "partial_line": "pgstat_progress_incr_param(PROGRESS_AN", "completion": "pgstat_progress_incr_param(PROGRESS_ANALYZE_DELAY_TIME, <|endoftext|>"}
{"context": "\t\tif (cnt == 0)\n\t\t\tbreak;\n\t\tbytes_done += cnt;\n\twhile (bytes_done < statbuf->st_size)\n\tAddFileToBackupManifest(manifest, spcoid, tarfilename, statbuf->st_size,", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\ttable_close(pg_constraint, RowExclusiveLock);\n\tuserHeapRelation = table_open(heapId, ShareUpdateExclusiveLock);\n\tuserIndexRelation = index_open(indexId, ShareUpdateExclusiveLock);\n\tindex_set_state_flags(indexId, INDEX_DROP_SET_DEAD);\n}", "partial_line": "islocal", "completion": "islocal = false; <|endoftext|>"}
{"context": "{ 2, s_17_19, -1, 1, 0},\n{ 10, s_17_29, 27, 1, 0},\n{ 12, s_17_37, -1, 2, 0},\n{ 14, s_17_44, -1, 2, 0},\nstatic const symbol s_18_7[10] = { 0xCE, 0xB9, 0xCF, 0x84, 0xCF, 0x83, 0xCF, 0x89, 0xCE, 0xBD };", "partial_line": "{ 10, s_18_1,", "completion": "{ 10, s_18_1, -1, 1, 0}, <|endoftext|>"}
{"context": "static const symbol s_2_16[9] = { 'e', 'a', 'c', 'h', 't', 0xC3, 0xBA, 'i', 'l' };\nstatic const symbol s_2_23[10] = { 'a', 'r', 'c', 'a', 'c', 'h', 't', 'a', 0xC3, 0xAD };\n{ 8, s_2_3, 2, 2, 0},\n{ 4, s_2_8, 7, 1, 0},\n{ 9, s_2_16, 15, 1, 0},", "partial_line": "{ 5, s_2_21, 19,", "completion": "{ 5, s_2_21, 19, 1, 0}, <|endoftext|>"}
{"context": "#include \"parser/parse_collate.h\"\n{\n\t\t\t\t\t\t\t\t\t\t\t\tJsonTablePathSpec *pathspec);\nstatic void CheckDuplicateColumnOrPathNames(JsonTableParseContext *cxt,\nParseNamespaceItem *", "partial_line": "bool", "completion": "bool\t\tis_lateral; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  full_join_relids,\nstatic reduce_outer_joins_pass1_state *\n\t\tFromExpr   *f = (FromExpr *) jtnode;\n\t\t\tsub_state = reduce_outer_joins_pass1(lfirst(l));\n\t\t\tresult->contains_outer = true;", "partial_line": "sub_state", "completion": "sub_state = reduce_outer_joins_pass1(j->rarg); <|endoftext|>"}
{"context": "\tif (IS_OUTER_JOIN(jointype))\n\tsemifactors->match_count = avgmatch;\n\tListCell   *lc;\n\t\tcase T_BitmapHeapScan:\n\t\t\t\t\tindexclauses = ((IndexPath *) bmqual)->indexclauses;", "partial_line": "re", "completion": "return false; <|endoftext|>"}
{"context": "\t\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tecpg_raise(stmt->lineno, ECPG_TOO_MANY_ARGUMENTS, ECPG_SQLSTATE_USING_CLAUSE_DOES_NOT_MATCH_TARGETS, NULL);\n\t\t\t\tstatus = false;\n\t\t\t}", "partial_line": "if (stmt->compat != ECPG_COMPAT_", "completion": "if (stmt->compat != ECPG_COMPAT_INFORMIX_SE && <|endoftext|>"}
{"context": "\t\t{\n\t\t\tereport(elevel,\n\t\t\treturn false;\n\t\t\t\t\t(errcode(ERRCODE_CONFIG_FILE_ERROR),\n\t{", "partial_line": "if (strcmp", "completion": "if (strcmp(val, \"1\") == 0) <|endoftext|>"}
{"context": "bool\n{\n\tint\t\t\ti;\n\tint\t\t\tnsyncworkers;\n\tbool\t\tis_parallel_apply_worker = (wtype == WORKERTYPE_PARALLEL_APPLY);", "partial_line": "if (max_active_replicati", "completion": "if (max_active_replication_origins == 0) <|endoftext|>"}
{"context": "\tstatus = system(cmd.data);\nstatic char *\n\tint\t\t\tsz = wal_segment_size_mb * segment_count;\n\treturn result;\n{", "partial_line": "char", "completion": "char\t\tpath[MAXPGPATH]; <|endoftext|>"}
{"context": "\tif (node->ps.instrument && !node->hinstrument)\n\t{\n\t\tnewChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,\n\t}\n\tdsa_pointer chunk_shared;", "partial_line": "*shared = chunk_shared + HASH_C", "completion": "*shared = chunk_shared + HASH_CHUNK_HEADER_SIZE + chunk->used; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tAnum_pg_type_typacl,\n\tif (!isNull)\n\t{\n\t\tAlterTypeOwnerInternal(typTup->typarray, newOwnerId);\n\t\tOid\t\t\tmultirange_typeid = get_range_multirange(typeOid);", "partial_line": "ObjectAddr", "completion": "ObjectAddress myself; <|endoftext|>"}
{"context": "\tfor (n = 0; n < stmt->nparams; n++)\nstatic bool\ninsert_tobeinserted(int position, int ph_len, struct statement *stmt, char *tobeinserted)\n{\n\t\t   stmt->command", "partial_line": "store_input_from_desc(st", "completion": "store_input_from_desc(struct statement *stmt, struct descriptor_item *desc_item, <|endoftext|>"}
{"context": "\t\tereport(LOG,\n\tif (!XLogArchivingActive())\nXLogArchiveIsBusy(const char *xlog)\n\tStatusFilePath(archiveStatusPath, xlog, \".done\");\n\t\treturn false;", "partial_line": "stru", "completion": "struct stat stat_buf; <|endoftext|>"}
{"context": "\tCatalogId\tcatId;\n\tcatId.tableoid = OperatorRelationId;\n\tcatId.oid = oid;\nfindCollationByOid(Oid oid)\n\tcatId.tableoid = CollationRelationId;", "partial_line": "catId.t", "completion": "catId.tableoid = NamespaceRelationId; <|endoftext|>"}
{"context": "\t\ttuplestore_putvalues(rsinfo->setResult, rsinfo->setDesc,\n\t}\n\treturn (Datum) 0;\n\tScanKeyData key[1];\n\tbool\t\trepl_null[Natts_pg_extension];", "partial_line": "ObjectIdGetD", "completion": "ObjectIdGetDatum(extensionoid)); <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"index \\\"%s\\\" contains unexpected zero page at block %u\",\n\t\tereport(ERROR,\n\t\t\t\t\t\tRelationGetRelationName(rel),\n\t_bt_lockbuf(rel, buf, access);\n_bt_allocbuf(Relation rel, Relation heaprel)", "partial_line": "Pa", "completion": "Page\t\tpage; <|endoftext|>"}
{"context": "\t\t\tacquirefunc = acquire_sample_rows;\n\t\t\tFdwRoutine *fdwroutine;\n\t\t\tfdwroutine = GetFdwRoutineForRelation(childrel, false);\n\t\t\tif (fdwroutine->AnalyzeForeignTable != NULL)\n\t\t\t\t\t\t\t\t\t\t\t\t\t &acquirefunc,", "partial_line": "&relpa", "completion": "&relpages); <|endoftext|>"}
{"context": "\t\tXLogRecPtr\trecptr;\n\t\tXLogRegisterData(&xlrec, SizeOfHeapLock);\n\tif (have_tuple_lock)\n\t\treturn true;\n\t\t\t\t\t\t(errcode(ERRCODE_LOCK_NOT_AVAILABLE),", "partial_line": "new_xmax = ad", "completion": "new_xmax = add_to_xmax; <|endoftext|>"}
{"context": "\t\t\t\t\t\t(errcode(ERRCODE_INDETERMINATE_COLLATION),\n\t\t\t\t\t\t errhint(\"Use the COLLATE clause to set the collation explicitly.\")));\n\t\t}\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),", "partial_line": "attt", "completion": "atttype, <|endoftext|>"}
{"context": "\t\tAssert(!vm_must_add_frozenbit);\n\t\t\tstrcmp(maps[mapnum].old_tablespace, old_tablespace) == 0)\n\t\t\ttransfer_relfile(&maps[mapnum], \"_fsm\", vm_must_add_frozenbit);\nstatic void\n{", "partial_line": "int", "completion": "int\t\t\tsegno; <|endoftext|>"}
{"context": "\tlast_report = thread_start;\n\tlast = aggs;\n\t\tmin_usec = PG_INT64_MAX;\n\t\t{\n\t\t\t\telse\t\t\t", "partial_line": "CState", "completion": "CState\t   *st = &state[i]; <|endoftext|>"}
{"context": "\t\t}\n\tif (!have_polymorphic_result)\n\t\treturn true;\n\t\t\t\tbreak;\n\t\t\t\targtypes[i] = poly_actuals.anyarray_type;", "partial_line": "case", "completion": "case ANYMULTIRANGEOID: <|endoftext|>"}
{"context": "\t\t\tif (prefixsortGroupInfo->groupCount > 0)\n\t\t\t\t\tappendStringInfoChar(es->str, '\\n');\n\t\t\tif (es->workers_state)\nstatic void\n\t\tint\t\t\ti;", "partial_line": "ExplainPropertyIntege", "completion": "ExplainPropertyInteger(\"Original Hash Batches\", NULL, <|endoftext|>"}
{"context": "\tRegisteredBgWorker *rw;\n\tif (!EXIT_STATUS_0(exitstatus) && !EXIT_STATUS_1(exitstatus))\n\t}\n\t\tHandleChildCrash(bp_pid, exitstatus, procname);\n\t\t\t\t\t\t procname, bp_pid, exitstatus);", "partial_line": "HaveCra", "completion": "HaveCrashedWorker = true; <|endoftext|>"}
{"context": "{\n\tcontext->isReset = false;\n\treturn ret;\n\tAssertNotInCriticalSection(context);\n\t\treturn NULL;", "partial_line": "VALGRIND_MEMPOOL_", "completion": "VALGRIND_MEMPOOL_ALLOC(context, ret, size); <|endoftext|>"}
{"context": "{\n\t\tcoldeflist = (List *) lsecond(pair);\n\t\tif (IsA(fexpr, FuncCall))\n\t\t\t\tlist_length(fc->args) > 1 &&\n\t\t\t\t!fc->agg_star &&", "partial_line": "fore", "completion": "foreach(lc2, fc->args) <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\t\tExecEndBitmapAnd((BitmapAndState *) node);\n\t\t\tbreak;\n\t\tcase T_GatherState:\n\t\t\tExecEndGather((GatherState *) node);", "partial_line": "br", "completion": "break; <|endoftext|>"}
{"context": "#include \"fmgr.h\"\n#include \"../../Unicode/iso8859_10_to_utf8.map\"\n#include \"../../Unicode/iso8859_4_to_utf8.map\"\n#include \"../../Unicode/utf8_to_iso8859_3.map\"\n\t{PG_LATIN6, &iso8859_10_to_unicode_tree,", "partial_line": "for (i", "completion": "for (i = 0; i < lengthof(maps); i++) <|endoftext|>"}
{"context": "\t\t\t\tsplan->limitCount =\n\t\t\t\tAgg\t\t   *agg = (Agg *) plan;\n\t\t\t\tif (DO_AGGSPLIT_COMBINE(agg->aggsplit))\n\t\t\t\tset_upper_references(root, plan, rtoffset);\n\t\t\t\twplan->runCondition = set_windowagg_runcondition_references(root,", "partial_line": "(Pl", "completion": "(Plan *) wplan); <|endoftext|>"}
{"context": "\tAclMode\t\tmode;\n\tAclResult\taclresult;\n\ttext\t   *priv_type_text = PG_GETARG_TEXT_PP(1);\nDatum\nhas_table_privilege_id_name(PG_FUNCTION_ARGS)", "partial_line": "text\t   *priv_type_text = PG", "completion": "text\t   *priv_type_text = PG_GETARG_TEXT_PP(2); <|endoftext|>"}
{"context": "\t\trscale = 0;\n\t{\n\tsnprintf(str, len, \"%se%+03d\", sig_out, exponent);\n\tpq_sendint32(buf, var->dscale);\n\tvar->sign = pq_getmsgint(buf, sizeof(int32));", "partial_line": "var->digit", "completion": "var->digits[i] = pq_getmsgint(buf, sizeof(int16)); <|endoftext|>"}
{"context": "\t\t\t\tmax = PageGetMaxOffsetNumber(page);\n\t\t\t\t lt->tupstate);\n\t\tXLogBeginInsert();\n\t\trecptr = XLogInsert(RM_SPGIST_ID, XLOG_SPGIST_VACUUM_ROOT);\n\tPage\t\tpage = BufferGetPage(buffer);", "partial_line": "SpGistPageOpaque opaque =", "completion": "SpGistPageOpaque opaque = SpGistPageGetOpaque(page); <|endoftext|>"}
{"context": "\t\t\tif (IsA(stmt->utilityStmt, CopyStmt) &&\n\t\t\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\t\tnewes->next = NULL;\n\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&TTSOpsMinimalTuple);", "partial_line": "fcache->junk", "completion": "fcache->junkFilter = ExecInitJunkFilterConversion(resulttlist, <|endoftext|>"}
{"context": "\t\t\t bool skipIfExists)\n\t\tereport(ERROR,\n\t\t\t\t\t\t   NAMEDATALEN - 1)));\n\tqsort(existing, nelems, sizeof(HeapTuple), sort_order_cmp);\n\t\telse", "partial_line": "newele", "completion": "newelemorder = 1; <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode_for_socket_access(),\n\t\t\t !PostmasterIsAlive())\n\t{\n\t{\n\t\tif (WSAEventSelect(event->fd, *handle, flags) != 0)", "partial_line": "WSAGetL", "completion": "WSAGetLastError()); <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\n#define Generation_CHUNK_FRACTION\t8", "partial_line": "GenerationBlo", "completion": "GenerationBlock *block; <|endoftext|>"}
{"context": "\t\t\treturn;\n\tcurrent->name = pg_strdup(name);\n\tcurrent->substitute_hook = shook;\n\tcurrent->next = previous->next;\n\t\t\tbreak;\t\t\t\t", "partial_line": "return SetV", "completion": "return SetVariable(space, name, \"on\"); <|endoftext|>"}
{"context": "\t\t\"large object\", OBJECT_LARGEOBJECT\n\t\t\"operator family\", OBJECT_OPFAMILY\n\t},\n\t\t\"rule\", OBJECT_RULE\n\t{", "partial_line": "\"tablespace\", OBJECT_", "completion": "\"tablespace\", OBJECT_TABLESPACE <|endoftext|>"}
{"context": "\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\telse\n\t\trelation_close(rel, AccessShareLock);\n}\n{", "partial_line": "if (HeapTupleIsVal", "completion": "if (HeapTupleIsValid(roletup)) <|endoftext|>"}
{"context": "\t\t\tif (conn->target_server_type == SERVER_TYPE_PREFER_STANDBY &&\n\t\t\tif (!pqParseIntParam(ch->port, &thisport, conn, \"port\"))\n\t\t\t\t{\n\t\t\t\t\tgoto keep_going;\n\t\t\t\t{", "partial_line": "case C", "completion": "case CHT_UNIX_SOCKET: <|endoftext|>"}
{"context": "\t\t\tpg_usleep(s * 1000L);\n\t\t\t{\n\t\t\t\tif (errno == EINTR)\n\t\t\t\t{\n\t\t\tfprintf(pset.logfile,", "partial_line": "\"\\n\\n\"),", "completion": "\"\\n\\n\"), query); <|endoftext|>"}
{"context": "\t\t\t\tnewtypeid;\n\t\t\t\t(errmsg(\"merging column \\\"%s\\\" with inherited definition\",\n\ttypenameTypeIdAndMod(NULL, inhdef->typeName, &inhtypeid, &inhtypmod);\n\t\t\t\t\t\tattributeName),\n\t\tif (strcmp(inhdef->compression, newdef->compression) != 0)", "partial_line": "if (newdef->raw_default && !newd", "completion": "if (newdef->raw_default && !newdef->generated) <|endoftext|>"}
{"context": "\t\t\t\t\t\tAppendRelInfo *containing_appendrel)\n\tsubquery = copyObject(rte->subquery);\n\tsubroot->planner_cxt = CurrentMemoryContext;\n\tsubroot->init_plans = NIL;\n\tsubroot->eq_classes = NIL;", "partial_line": "memset(subroot->upper_targets, 0, sizeo", "completion": "memset(subroot->upper_targets, 0, sizeof(subroot->upper_targets)); <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\tif (!nspName)\n\t\t\t\t errmsg(\"schema \\\"%s\\\" already exists\", nspName)));", "partial_line": "if (!isT", "completion": "if (!isTemp) <|endoftext|>"}
{"context": "\tif (lockMethodTable->conflictTab[lockmode] & lock->waitMask)\n\t\t\tbool wakeupNeeded)\n\t\tdlist_delete(&proclock->lockLink);\n\t\tif (!hash_search_with_hash_value(LockMethodProcLockHash,\n\t\t\t\t\t\t\t\t\t\t HASH_REMOVE,", "partial_line": "Assert(dlist", "completion": "Assert(dlist_is_empty(&lock->procLocks)); <|endoftext|>"}
{"context": "Datum\n\t\tPG_RETURN_NULL();\n\tbool\t\tresult;\n\tbool\t\tis_missing = false;\n}", "partial_line": "PG_RETURN_BOOL(r", "completion": "PG_RETURN_BOOL(result); <|endoftext|>"}
{"context": "\t\t\t\treturn tolower_l((unsigned char) c, pg_regex_locale->info.lt);\ntypedef int (*pg_wc_probefunc) (pg_wchar c);\nstatic bool\nstore_match(pg_ctype_cache *pcc, pg_wchar chr1, int nchrs)\n{", "partial_line": "pcc->", "completion": "pcc->cv.nranges++; <|endoftext|>"}
{"context": "\tif (mylocale->ctype_is_c)\n\t\t{\n\t\t\tAssert(needed + 1 <= dstsize);\n\tpg_locale_t mylocale;\n\t\t\t\t errhint(\"Use the COLLATE clause to set the collation explicitly.\")));", "partial_line": "mylocale = pg_newlocale_from_col", "completion": "mylocale = pg_newlocale_from_collation(collid); <|endoftext|>"}
{"context": "\t\t\t\tpgstat_report_activity(STATE_IDLEINTRANSACTION, NULL);\n\t\t\t{\n\t\t\t\t\t\t\tfork_duration,\n\t\t\t\t\t\t\tauth_duration;\n\t\t\t\t\t\t\t\t\t\t\t\t\tconn_timing.fork_end);", "partial_line": "ReadyForQ", "completion": "ReadyForQuery(whereToSendOutput); <|endoftext|>"}
{"context": "\t\tgoto cleanup;\n\t}\n\tif (pTokenUser)\n\tif (ptdd)\n\t\tLocalFree((HLOCAL) ptdd);", "partial_line": "retur", "completion": "return FALSE; <|endoftext|>"}
{"context": "\tPlannerInfo *root;\n\t\t\t\t\t\t\t\t\t JoinExpr *lowest_outer_join,\nstatic bool is_simple_union_all_recurse(Node *setOp, Query *setOpQuery,\n\t\t\t\t\t\t\t\t\t\tpullup_replace_vars_context *rvcontext,\n\t\t\t\t\t\t\t\t\t\tAppendRelInfo *containing_appendrel);", "partial_line": "static Node *pu", "completion": "static Node *pullup_replace_vars_callback(Var *var, <|endoftext|>"}
{"context": "\t\t\t!list_member_oid(hashabletypes, oprform->amoprighttype))\n\t\t\t\t\t\t\topfamilyname, \"hash\",\n\t\t\tresult = false;\n\t{\n\t\t\t\t\t\topfamilyname, \"hash\")));", "partial_line": "ReleaseCa", "completion": "ReleaseCatCacheList(proclist); <|endoftext|>"}
{"context": "{\n\tJsonReturning *returning;\n\treturn makeJsonConstructorExpr(pstate, JSCTOR_JSON_OBJECT, args, NULL,\n\t\t\t\t\t\t\t\t   ctor->absent_on_null, ctor->location);\n\tAlias\t   *alias = makeNode(Alias);", "partial_line": "target->", "completion": "target->val = (Node *) agg; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t   NIL, NULL, parallel_workers,\n\t\tdouble\t\tdNumGroups;\n\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t -1.0);\n\t\t\t\tpath = gpath;", "partial_line": "path = (P", "completion": "path = (Path *) create_upper_unique_path(root, <|endoftext|>"}
{"context": "\t\t\t\t\tTargetEntry *te = (TargetEntry *) lfirst(tlistitem);\n\t\t\t\t\tif (te->resjunk)\n\t\t\t\t\t\tchar\t   *label = strVal(lfirst(aliasp_item));\n\t\t\t\t\t\t*colnames = lappend(*colnames, makeString(pstrdup(label)));\n\t\t\t\t\t\tfunctypclass == TYPEFUNC_COMPOSITE_DOMAIN)", "partial_line": "*colnames = lappend(*", "completion": "*colnames = lappend(*colnames, <|endoftext|>"}
{"context": "\t\t\tcase RTSubEqualStrategyNumber:\n\t\t\t\t\tbitmap &= 1 | (1 << 1);\n\t\t\tcase RTEqualStrategyNumber:\n\t\t\t\tif (commonbits < ip_bits(argument))\n\t\t\t\t\t\tMin(commonbits, ip_bits(argument)));", "partial_line": "switch (str", "completion": "switch (strategy) <|endoftext|>"}
{"context": "\t\tchar\t   *values[5];\n\t\t\tcase COL_NAME_KEYWORD:\n\t\t\t\tvalues[1] = \"R\";\n\t\t\tdefault:\t\t\t\n\t\t\tvalues[2] = \"false\";", "partial_line": "elog(ERROR, \"", "completion": "elog(ERROR, \"return type must be a row type\"); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\t\tPageGetItemId(page, xldata->offnumParent));\n\t\tUnlockReleaseBuffer(srcBuffer);\n\t\t\tpage = BufferGetPage(parentBuffer);\n\t\t\tparent = (SpGistInnerTuple) PageGetItem(page,\n\tXLogRecPtr\tlsn = record->EndRecPtr;", "partial_line": "OffsetNumber *", "completion": "OffsetNumber *toDead; <|endoftext|>"}
{"context": "\t\tso = PyObject_Str(o);\n\t\tmessage = dgettext(TEXTDOMAIN, \"could not parse error message in plpy.elog\");\n\tPy_XDECREF(so);\n\t\t\t\treturn NULL;\n\t\t\t}", "partial_line": "oldcontext = Current", "completion": "oldcontext = CurrentMemoryContext; <|endoftext|>"}
{"context": "\t\t\t}\n\t\t\t\treturn (Node *) newnode;\n\t\t\t}\n\t\t\tbreak;\n\t\t\t{", "partial_line": "PartitionBoundSpec *pbs = (Parti", "completion": "PartitionBoundSpec *pbs = (PartitionBoundSpec *) node; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\tmaxBlockSize);\n\t\tnbuckets = max_nbuckets;\n}\n\tdouble\t\tdpartitions;\n\tif (dpartitions > HASHAGG_MAX_PARTITIONS)", "partial_line": "Tupl", "completion": "TupleHashEntry entry) <|endoftext|>"}
{"context": "\t\tForm_pg_attribute att = TupleDescAttr(rel->rd_att, i - 1);\n\t\tif (attr_widths != NULL && attr_widths[i] > 0)\n\t\tif (attr_widths != NULL)\n\trelation = table_open(relationObjectId, NoLock);\n\t\t{", "partial_line": "cexpr = (Node *) canon", "completion": "cexpr = (Node *) canonicalize_qual((Expr *) cexpr, true); <|endoftext|>"}
{"context": "\t\tpg_rusage_init(&ru0);\n\t\t{\n\t\t\t\t\t\t(errcode(ERRCODE_UNDEFINED_COLUMN),\n\t\t\t\t\t\t errmsg(\"column \\\"%s\\\" of relation \\\"%s\\\" appears more than once\",\n\t\tattr_cnt = tcnt;", "partial_line": "Irel =", "completion": "Irel = NULL; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  flags | CP_SMALL_TLIST);\n\t\t\t\t\t\t\t\t\t\t\t  best_path->spath.path.parent->relids : NULL,\n\tquals = order_qual_clauses(root, best_path->qual);\n\t\t\t\t\tNIL,\n\tAttrNumber *new_grpColIdx;", "partial_line": "return new_g", "completion": "return new_grpColIdx; <|endoftext|>"}
{"context": "\t\t\t\t\t  bool target_parallel_safe,\n\t\tint\t\t\tflags = 0;\n\t\t\t root->numOrderedAggs == 0 &&\n\tif (input_rel->consider_parallel && target_parallel_safe &&\n\t\tis_parallel_safe(root, (Node *) havingQual))", "partial_line": "grouped_rel->consider_para", "completion": "grouped_rel->consider_parallel = true; <|endoftext|>"}
{"context": "\t\tParallelSlotSetHandler(free_slot, TableCommandResultHandler, NULL);\n\t\tcell = cell->next;\n\t\t{\n\t\t\tgoto finish;\n\t\tif (!ParallelSlotsWaitCompletion(sa))", "partial_line": "exit(", "completion": "exit(1); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\tcol_privileges[i],\nstatic void\n\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  tuple,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  get_object_attnum_owner(classid)));", "partial_line": "get_objec", "completion": "get_object_attnum_acl(classid), <|endoftext|>"}
{"context": "\t\t\t\tscan_type = PGTYPES_TYPE_UINT_LONG;\n\t\t\t\t\tstruct tm  *tms;\n\t\t\t\t\t\t*month = tms->tm_mon + 1;\n\t\t\t\tpfmt++;\n\t\t\t\terr = pgtypes_defmt_scan(&scan_val, scan_type, &pstr, pfmt);", "partial_line": "*seco", "completion": "*second = scan_val.uint_val; <|endoftext|>"}
{"context": "\t}\n\t\t\t(errcode(ERRCODE_UNDEFINED_OBJECT),\n\tPLpgSQL_nsitem *nse;\n\tconst char *fldname = NULL;\n\tMemoryContext oldCxt;", "partial_line": "strVal(linit", "completion": "strVal(linitial(idents)), <|endoftext|>"}
{"context": "\t\t\t\t\tlappend(clauseset.indexclauses[indexcol], iclause);\n\t\t\t}\n\t\t\t\t\tList *indexjoinclauses)\nstatic void\nget_index_paths(PlannerInfo *root, RelOptInfo *rel,", "partial_line": "ST", "completion": "ST_ANYSCAN, <|endoftext|>"}
{"context": "\t\taggstate->aggcontexts[i] = aggstate->ss.ps.ps_ExprContext;\n\tif (numPhases > 2)\n\tmax_transno = -1;\n\tphase = 0;\n\t\t}", "partial_line": "if (num", "completion": "if (num_sets) <|endoftext|>"}
{"context": "\t\t\t\t\t  \"LEFT JOIN pg_catalog.pg_opfamily f ON f.oid = opcfamily \"\n\tappendPQExpBuffer(delq, \"DROP OPERATOR CLASS %s\",\n\t\t\t\t\t  fmtId(amname));\n\t{\n\tappendPQExpBuffer(query, \"SELECT amopstrategy, \"", "partial_line": "\"AND refobjid = '%u", "completion": "\"AND refobjid = '%u'::pg_catalog.oid \" <|endoftext|>"}
{"context": "\t\t\t\t\t\treturn; \n\t\t\t\telse\n\t\tint\t\t\tminmatch,\n\t\tfor (morematch = maxmatch + 1; morematch <= DUPINF + 1; morematch++)\n}", "partial_line": "static", "completion": "static bool <|endoftext|>"}
{"context": "\t\tcontext->mem_allocated -= slab->blockSize;\nvoid\n#endif\n\trandomize_mem((char *) MemoryChunkGetPointer(chunk), size);\n\tSlabBlock  *block;", "partial_line": "chunk = Slab", "completion": "chunk = SlabGetNextFreeChunk(slab, block); <|endoftext|>"}
{"context": "\tfunction->has_exception_block = false;\n\tfunction->fn_retset = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNULL),\n\terror_context_stack = plerrcontext.previous;\nplpgsql_compile_error_callback(void *arg)", "partial_line": "if (function_parse_error_transpos", "completion": "if (function_parse_error_transpose(cbarg->proc_source)) <|endoftext|>"}
{"context": "\t\tint\t\t\tpassword_type = get_password_type(shadow_pass);\n\t\tif (password_type == PASSWORD_TYPE_SCRAM_SHA_256)\n\t\t}\n\t\t\t\t\t\t\t\t\t\tstate->port->user_name);\n\t\t\tgot_secret = false;", "partial_line": "&state->iterations, &state-", "completion": "&state->iterations, &state->key_length, <|endoftext|>"}
{"context": "\t\tif (password == NULL)\n\t\t}\n\t}\n\t\t\t\t\t\t\t\t  &initialresponse, &initialresponselen);\n\t\tif (pqPutnchar(initialresponse, initialresponselen, conn))", "partial_line": "goto", "completion": "goto error; <|endoftext|>"}
{"context": "\t{\n\tPG_RETURN_GIN_TERNARY_VALUE(res);\n\tPathHashStack *stack;\n\t\tPG_RETURN_POINTER(NULL);\n\t{", "partial_line": "case", "completion": "case WJB_BEGIN_ARRAY: <|endoftext|>"}
{"context": "#define XLogRecPtrToBufIdx(recptr)\t\\\nstatic bool updateMinRecoveryPoint = true;\nstatic bool holdingAllLocks = false;\n#ifdef WAL_DEBUG\n\t\t\t\t\t\t\t\t\t\t\t\t  XLogRecPtr pagePtr,", "partial_line": "static XLogRecPtr", "completion": "static XLogRecPtr XLogGetReplicationSlotMinimumLSN(void); <|endoftext|>"}
{"context": "\t\t\t\tif (has_error)\n\t\t\t\tplrv = Py_None;\n\t\t\t}\n\t\terror_context_stack = &plerrcontext;\n\t\t\trv = (Datum) 0;", "partial_line": "srfstate &", "completion": "srfstate && srfstate->iter == NULL) <|endoftext|>"}
{"context": "\tdsa_pointer_atomic *buckets;\n\tif (hashtable->parallel_state != NULL &&\n\t\t\t   BarrierPhase(&batch->batch_barrier) == PHJ_BATCH_SCAN);\n\t\t}\n\t\t\tAssert(BarrierPhase(&batch->batch_barrier) == PHJ_BATCH_FREE);", "partial_line": "Hash", "completion": "HashMemoryChunk chunk = <|endoftext|>"}
{"context": "\t\t\tappend_with_tabs(&buf, edata->hint);\n\t\tif (edata->internalquery)\n\t\t{\n\t\t\tlog_line_prefix(&buf, edata);\n\t\t\tappendStringInfoChar(&buf, '\\n');", "partial_line": "if (edata->funcname", "completion": "if (edata->funcname && edata->filename) <|endoftext|>"}
{"context": "\tOid\t\t\tsendOid = InvalidOid;\n\t\t\tereport(ERROR,\n\t\t\t\t\t errmsg(\"type \\\"%s\\\" already exists\", typeName)));\n\tif (parameters == NIL)\n\t\t\t\t errmsg(\"type \\\"%s\\\" does not exist\", typeName),", "partial_line": "DefElem    *defel = (DefE", "completion": "DefElem    *defel = (DefElem *) lfirst(pl); <|endoftext|>"}
{"context": "\t\t\t\t  ;\n\t\t{\n\t\t\tpstate->p_windowdefs = lappend(pstate->p_windowdefs, windef);\n\tbool\t\thasJoinRTEs;\n\t\tgset_common = linitial(gsets);", "partial_line": "groupCla", "completion": "groupClauses = lappend(groupClauses, expr); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t&is_expr))\n\tReleaseSysCache(tuple);\n\t\t\tereport(ERROR,\n\t\t\tif (recurse)\n\t\ttable_close(attr_rel, RowExclusiveLock);", "partial_line": "st", "completion": "static void <|endoftext|>"}
{"context": "\t\t\t\t errmsg(\"could not execute command \\\"%s\\\": %m\",\n\t\t{", "partial_line": "errmsg(\"could", "completion": "errmsg(\"could not read from command \\\"%s\\\": %m\", <|endoftext|>"}
{"context": "#include \"nodes/nodeFuncs.h\"\n#include \"parser/parse_expr.h\"\n#include \"parser/parse_merge.h\"\nstatic Query *transformOptionalSelectInto(ParseState *pstate, Node *parseTree);\nstatic Query *transformValuesClause(ParseState *pstate, SelectStmt *stmt);", "partial_line": "bool is", "completion": "bool isTopLevel, List **targetlist); <|endoftext|>"}
{"context": "#include \"storage/bufmgr.h\"\n#include \"utils/rel.h\"\n\t\t\t\t\t\t\t\tIndexTuple itup);\n\t\t\t\t\t\t\t\tIndexTuple *itup);\nstatic long gistBuffersGetFreeBlock(GISTBuildBuffers *gfbb);", "partial_line": "GISTBuildB", "completion": "GISTBuildBuffers * <|endoftext|>"}
{"context": "\t\t\t\t\tsize = 1;\n\t\t\t\tfor (i = 0; i < jsp->content.array.nelems; i++)\n\t\t\t\t\t\tres = getArrayIndex(cxt, &to, jb, &index_to);\n\t\t\t\t\t\tif (jperIsError(res))\n\t\t\t\t\t\t\tbreak;", "partial_line": "index_to", "completion": "index_to = index_from; <|endoftext|>"}
{"context": "{\n\tVarBit\t   *s = PG_GETARG_VARBIT_P(0);\n\t\t}\n#endif\n\tint\t\t\tlen,", "partial_line": "errmsg(\"invalid length in exte", "completion": "errmsg(\"invalid length in external bit string\"))); <|endoftext|>"}
{"context": "                            if (ret < 0) return ret;\n            break;\n            {   int ret = slice_del(z);\n                if (!find_among_b(z, a_5, 3)) { z->c = z->l - m3; goto lab2; }\n                    if (ret < 0) return ret;", "partial_line": "if (!(eq_s_b(z, 2", "completion": "if (!(eq_s_b(z, 2, s_17))) { z->c = z->l - m4; goto lab3; } <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase T_SetOp:\n\t\tcase T_RecursiveUnion:\n\t\tcase T_GatherMerge:\n\t\t\tbreak;", "partial_line": "elog(ERR", "completion": "elog(ERROR, \"unrecognized node type: %d\", <|endoftext|>"}
{"context": "\t\t\t\t   void *state)\n{\nstatic void\n\tsmgr_bulk_write(wstate->bulkstate, blkno, buf, true);\n\tstate->btps_buf = _bt_blnewpage(wstate, level);", "partial_line": "BulkWriteB", "completion": "BulkWriteBuffer nbuf; <|endoftext|>"}
{"context": "\tHELPN(\"  \\\\x [on|off|auto]       toggle expanded output (currently %s)\\n\",\n\tfor (const char *ptr = buf.data; *ptr; ptr++)\n\t\t\tnlcount++;\n\toutput = PageOutput(nlcount, pager ? &(pset.popt.topt) : NULL);\n}", "partial_line": "initPQExpBu", "completion": "initPQExpBuffer(&buf); <|endoftext|>"}
{"context": "\tresult = NIL;\n\t\tif (list_member(list2, lfirst(cell)))\n\tAssert(IsIntegerList(list2));\n{\n\tif (list2 == NIL)", "partial_line": "check_list_invariants", "completion": "check_list_invariants(result); <|endoftext|>"}
{"context": "emitHostIdentityInfo(PGconn *conn, const char *host_addr)\n\t\tpg_getnameinfo_all(&conn->raddr.addr, conn->raddr.salen,\n\t{\n\t\t\tappendPQExpBuffer(&conn->errorMessage,\n\t\t\t\t\t\t\t  libpq_gettext(\"connection to server at \\\"%s\\\", port %s failed: \"),", "partial_line": "dis", "completion": "displayed_port); <|endoftext|>"}
{"context": "#endif\n\t{\nbool\n\tresetStringInfo(buf);\n\tif (prompt_ctx && sigsetjmp(*((sigjmp_buf *) prompt_ctx->jmpbuf), 1) != 0)", "partial_line": "retu", "completion": "return true; <|endoftext|>"}
{"context": "\tif (valtype != reqtype ||\n\t\tvalue = do_cast_value(estate, value, isnull, valtype, valtypmod,\n\tif (cast_entry)\n\t\tMemoryContext oldcontext;\n\tMemoryContext oldcontext;", "partial_line": "cast_entry->cast_lxid = InvalidLoca", "completion": "cast_entry->cast_lxid = InvalidLocalTransactionId; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t&isNull);\n\tMemoryContextSwitchTo(oldcontext);\n\t}\n\t\t\treturn true;\n\t}", "partial_line": "Oid", "completion": "Oid\t\t\tpred_op; <|endoftext|>"}
{"context": "\t\t\t\t\t\t   languageOid,\n\t\t\t\t\t\t   PointerGetDatum(trftypes),\n}\n\t\telog(ERROR, \"cache lookup failed for function %u\", funcOid);\n\t{", "partial_line": "CatalogTupleDelete(re", "completion": "CatalogTupleDelete(relation, &tup->t_self); <|endoftext|>"}
{"context": "\t\tlocContext.isTopQual = context->isTopQual;\n\treturn expression_tree_mutator(node,\n\t}\n\tCost\t\tinitplan_cost;\n\tSS_compute_initplan_cost(root->init_plans,", "partial_line": "foreach(lc, fina", "completion": "foreach(lc, final_rel->pathlist) <|endoftext|>"}
{"context": "\tsbsrefstate->numupper = nupper;\n\tptr += nupper * sizeof(Datum);\n\tsbsrefstate->upperindexnull = (bool *) ptr;\n\t\tscratch->d.jump.jumpdone = -1;\t\n\tforeach(lc, sbsref->refupperindexpr)", "partial_line": "Expr\t   *e =", "completion": "Expr\t   *e = (Expr *) lfirst(lc); <|endoftext|>"}
{"context": "\t\t\t\t\t  dispatch_compare_ptr);\n}\n{\n\tfcinfo->isnull = false;\n\t{", "partial_line": "if (args[", "completion": "if (args[argno].isnull) <|endoftext|>"}
{"context": "\t\treturn;\n\telse\n\t\tHASH_SEQ_STATUS status;\n\t\t\tentry->relmapentry.localrelvalid = false;\n\t\tmemset(entry, 0, sizeof(LogicalRepRelMapEntry));", "partial_line": "LogicalRepPartM", "completion": "LogicalRepPartMapContext = <|endoftext|>"}
{"context": "\t\tstrcmp(filename, *last_file_name) != 0)\n\tif (!fh)\n\t\t\trotation_disabled = true;\n\t\t}\nstatic void", "partial_line": "fntime = tim", "completion": "fntime = time(NULL); <|endoftext|>"}
{"context": "\t}\n\t\t\t\t\t\t(errcode(ERRCODE_SYNTAX_ERROR),\n\t\t\tset_args.cmd_type = PLPGSQL_STMT_EXECSQL;\n\t\telse\n\t\t{", "partial_line": "SPI_result", "completion": "SPI_result_code_string(SPI_result)); <|endoftext|>"}
{"context": "void\n{\n\t\t{\n\t\tif (portal->activeSubid == mySubid)\n\t\t\t\t   SubTransactionId parentSubid,", "partial_line": "while ((hentry = (PortalHashEnt *)", "completion": "while ((hentry = (PortalHashEnt *) hash_seq_search(&status)) != NULL) <|endoftext|>"}
{"context": "\tint64\t\targ2 = PG_GETARG_INT64(1);\n\t\tereport(ERROR,\n\tint32\t\targ1 = PG_GETARG_INT32(0);\n\t\t\t\t errmsg(\"bigint out of range\")));\n}", "partial_line": "(errcode(ERRC", "completion": "(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE), <|endoftext|>"}
{"context": "\ttermPQExpBuffer(&sql);\n\t\t\t\t\t  const char *progname, bool verbose, bool echo,\n\t\t\t\t\t\t  echo);\n\t\t\tprintf(_(\"%s: clustering database \\\"%s\\\"\\n\"), progname, dbname);\n}", "partial_line": "printf(_(\"  -q, --quiet               don't wri", "completion": "printf(_(\"  -q, --quiet               don't write any messages\\n\")); <|endoftext|>"}
{"context": "\t\t\t\t\telog(ERROR, \"MergeSupportFunc found in non-merge plan node\");\n\t\t\t\tscratch.opcode = EEOP_MERGE_SUPPORT_FUNC;\n\t\t\t\tbreak;\n\t\t\t\tSubscriptingRef *sbsref = (SubscriptingRef *) node;\n\t\t\t\tFuncExpr   *func = (FuncExpr *) node;", "partial_line": "func->args, func->func", "completion": "func->args, func->funcid, func->inputcollid, <|endoftext|>"}
{"context": "\tlohalf ^= (val >= 0) ? hihalf : ~hihalf;\n\treturn hash_uint32_extended((uint32) PG_GETARG_OID(0), PG_GETARG_INT64(1));\n}\n{\nhashfloat4(PG_FUNCTION_ARGS)", "partial_line": "return hash_any(", "completion": "return hash_any((unsigned char *) &key8, sizeof(key8)); <|endoftext|>"}
{"context": "void\n\tCACHE_elog(DEBUG2, \"ResetCatalogCaches called\");\n\tslist_foreach(iter, &CacheHdr->ch_caches)\n{\n\t\t\tCallSyscacheCallbacks(cache->id, 0);", "partial_line": "cp->cc_nkeys, cp->cc_nb", "completion": "cp->cc_nkeys, cp->cc_nbuckets); \\ <|endoftext|>"}
{"context": "#include \"access/heapam_xlog.h\"\n#include \"access/xloginsert.h\"", "partial_line": "OffsetNumber nowdead[", "completion": "OffsetNumber nowdead[MaxHeapTuplesPerPage]; <|endoftext|>"}
{"context": "\tListCell   *c;\n\tforeach(c, tokens)\n\tList\t   *result = NIL;\n\tif (!OidIsValid(prs->lextypeOid))\n\tforeach(tn, tokennames)", "partial_line": "if (tstok", "completion": "if (tstoken_list_member(strVal(val), result)) <|endoftext|>"}
{"context": "\t\t\t\tconn->asyncStatus = PGASYNC_BUSY;\n}\nint\nPQsendQuery(PGconn *conn, const char *query)\n\t\tlibpq_append_conn_error(conn, \"command string is a null pointer\");", "partial_line": "entry = pqAllocCmdQueueE", "completion": "entry = pqAllocCmdQueueEntry(conn); <|endoftext|>"}
{"context": "\t\t\t\ti = buflen - 1;\n\t\t\tsyslog(level, \"%s\", line);\n\treturn encoding;\nwrite_eventlog(int level, const char *line, int len)\n\t\t{", "partial_line": "ca", "completion": "case DEBUG1: <|endoftext|>"}
{"context": "\t\tSnapBuildRestore(builder, lsn);\nstatic void\n\tSnapBuildOnDisk *ondisk = NULL;\n\tchar\t\tpath[MAXPGPATH];\n\tstruct stat stat_buf;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "static const symbol s_4_24[4] = { 'i', 'v', 'e', 's' };\nstatic const symbol s_4_37[6] = { 'a', 'm', 'm', 'e', 'n', 't' };\n{ 4, s_4_0, -1, 1, 0},\n{ 5, s_4_17, -1, 1, 0},\n{ 5, s_4_20, -1, 1, 0},", "partial_line": "{ 6, s_", "completion": "{ 6, s_4_37, 34, 13, 0}, <|endoftext|>"}
{"context": "static void\n\tfprintf(f, \"nsub %d, info 0%lo, csize %d, ntree %d\\n\",\n\t\tfprintf(f, \"\\nsearch:\\n\");\nstatic void\n\t\tfprintf(f, \"null tree\\n\");", "partial_line": "stdump(struct su", "completion": "stdump(struct subre *t, <|endoftext|>"}
{"context": "static const symbol s_11[] = { 'a', 't' };\n        }\n        z->c = c1;\n}\n        while(1) {", "partial_line": "int c2 =", "completion": "int c2 = z->c; <|endoftext|>"}
{"context": "\t\t\t\t\t\tRepOriginId *localorigin, TimestampTz *localts)\n{\n\t\treturn false;\n\t\t\t\t\t\t\t\t conflicttuple->xmin,\n\tpgstat_report_subscription_conflict(MySubscription->oid, type);", "partial_line": "errmsg(\"conflict detected on relation", "completion": "errmsg(\"conflict detected on relation \\\"%s.%s\\\": conflict=%s\", <|endoftext|>"}
{"context": "\tif (output.length == 0)\n\t\t}\n\tmemcpy(PqGSSSendBuffer, &netlen, sizeof(uint32));\n\treturn PGRES_POLLING_WRITING;\nvoid *", "partial_line": "if (!", "completion": "if (!conn) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  errmsg(\"left operand of jsonpath operator %s is not a single numeric value\",\n\t{\n\tJsonbValue *val;\n\t\tif (func)\n\t\t\t\t\t\t\t\t\t\t\t\t\tNumericGetDatum(val->val.numeric)));", "partial_line": "initial->val", "completion": "initial->val.string.len)) <|endoftext|>"}
{"context": "\tgrpstate->grp_done = false;\n\tExecAssignProjectionInfo(&grpstate->ss.ps, NULL);\n\tgrpstate->ss.ps.qual =\n\t\t\t\t\t\t\t   &grpstate->ss.ps);\n{", "partial_line": "if (outer", "completion": "if (outerPlan->chgParam == NULL) <|endoftext|>"}
{"context": "\t\tqsort(rules, nrules, sizeof *rules, rcomp);\n\t\t{\n\t\t\tif (strcmp(rules[i].r_filename,\n\t\t\t{\n\t\t\t\tif (strcmp(rules[i].r_name,", "partial_line": "if (strcmp(rules[i].r", "completion": "if (strcmp(rules[i].r_filename, <|endoftext|>"}
{"context": "get_attstatsslot(AttStatsSlot *sslot, HeapTuple statstuple,\n\t\t\t(reqop == InvalidOid || (&stats->staop1)[i] == reqop))\n\tsslot->staop = (&stats->staop1)[i];\n\t\t\t\t\t\t\t\t\t Anum_pg_statistic_stavalues1 + i);\n\t\t\telog(ERROR, \"cache lookup failed for type %u\", arrayelemtype);", "partial_line": "if (!type", "completion": "if (!typeForm->typbyval) <|endoftext|>"}
{"context": "\tHeapTuple\tproctup;\n\tproctup = SearchSysCache1(PROCOID, ObjectIdGetDatum(funcid));\n\t\tSupportRequestRows req;\n\t\treq.node = node;\n\t{", "partial_line": "has_row_trig", "completion": "has_row_triggers(PlannerInfo *root, Index rti, CmdType event) <|endoftext|>"}
{"context": "\t0xFFE7, 0xFFE7,\n\t0x10324, 0x1032F,\n\t0x1044E, 0x1CFFF,\n\t0x1D4AD, 0x1D4AD,\n\t0x1D6A4, 0x1D6A7,", "partial_line": "0xB", "completion": "0xB0000, 0xBFFFD, <|endoftext|>"}
{"context": "\t\t\t\tSKIP_THth(s, n->suffix);\n\t\t\t\tSKIP_THth(s, n->suffix);\n\t\t\tcase DCH_Q:\n\t\t\t\tSKIP_THth(s, n->suffix);\n\t\t\t\tif (len < 4)", "partial_line": "if (len", "completion": "if (len < 4) <|endoftext|>"}
{"context": "\treturn true;\n\tchar\t\twalfile_name[MAXPGPATH];\n\t{\n\t\t\t\tpg_log_error(\"could not open existing write-ahead log file \\\"%s\\\": %s\",\n\t\t\tpg_free(fn);", "partial_line": "errno", "completion": "errno = ENOSPC; <|endoftext|>"}
{"context": "\t\t\t\toccurred_events->fd = PGINVALID_SOCKET;\n\t\t\t\toccurred_events->events = WL_POSTMASTER_DEATH;\n\t\t\t\t(cur_pollfd->revents & (POLLIN | errflags)))\n\t\t\t{\n#elif defined(WAIT_USE_WIN32)", "partial_line": "return", "completion": "return 1; <|endoftext|>"}
{"context": "\t\tNullTest   *nulltest = (NullTest *) restrictinfo->clause;\n\t\t\t\treturn false;\n\t\t}\n{\n\t{", "partial_line": "check_", "completion": "check_hashjoinable(restrictinfo); <|endoftext|>"}
{"context": "\treturn true;\n\t\t\t\t  GucAction action, bool changeVal, int elevel,\n\t\t\t\t\t\t\t\t  action, changeVal, elevel,\n\tbool\t\tprohibitValueChange = false;\n\t\t\t\t errmsg(\"parameter \\\"%s\\\" cannot be set during a parallel operation\",", "partial_line": "if (context != PGC_SIGHUP && cont", "completion": "if (context != PGC_SIGHUP && context != PGC_POSTMASTER) <|endoftext|>"}
{"context": "\t\t\t\t \"2E-394\", \".1E-2\", \"+.0\", \"-592.49E-07\", \"+32.84e-4\",\n\t\t\t\t \"1234567890123456789012345678.91\", \nmain(void)\n\tECPGdebug(1, stderr);\n\t\tif (r < 0) check_errno();", "partial_line": "printf(\"dec[%d,3]: r:", "completion": "printf(\"dec[%d,3]: r: %d, %s\\n\", i, r, buf); <|endoftext|>"}
{"context": "\t\tpalloc(numattrs * sizeof(ParseNamespaceColumn));\n\tnsitem->p_names = makeAlias(aliasname, colnames);\ntransformReturningClause(ParseState *pstate, Query *qry,\n\t\t\t\t\t\t ReturningClause *returningClause,\n\t\treturn;\t\t\t\t\t", "partial_line": "errcode(ERRCODE_SYNTA", "completion": "errcode(ERRCODE_SYNTAX_ERROR), <|endoftext|>"}
{"context": "\t\tpos = 0.0;\n\t\telse\n\t\t\t\t\t\t\t\tconst RangeBound *lower, RangeBound *upper,\n\tupper_index = Min(upper_index, hist_nvalues - 2);\n\t{", "partial_line": "doubl", "completion": "double\t\tlength_hist_frac; <|endoftext|>"}
{"context": "\t\t\t\t\t  \"  pg_catalog.pg_get_userbyid(c.relowner) as \\\"%s\\\"\",\n\t\t\t\t\t  gettext_noop(\"Schema\"),\n\t\t\t\t\t  gettext_noop(\"TOAST table\"),\n\t\t\t\t\t  gettext_noop(\"Owner\"));\n\t\t\t\t\t\t  gettext_noop(\"Table\"));", "partial_line": "\"WHEN \" Cpp", "completion": "\"WHEN \" CppAsString2(RELPERSISTENCE_TEMP) \" THEN '%s' \" <|endoftext|>"}
{"context": "\tbgw.bgw_flags = BGWORKER_SHMEM_ACCESS |\n\t\tBGWORKER_BACKEND_DATABASE_CONNECTION;\n\t\t\t \"logical replication launcher\");\n\tbgw.bgw_main_arg = (Datum) 0;\n\t\t\t\t\t\tApplyLauncherShmemSize(),", "partial_line": "if (", "completion": "if (!found) <|endoftext|>"}
{"context": "#include \"replication/slot.h\"\n#include \"replication/syncrep.h\"\n#include \"utils/timeout.h\"\nint\t\t\twal_sender_timeout = 60 * 1000; \nstatic IncrementalBackupInfo *uploaded_manifest = NULL;", "partial_line": "static XL", "completion": "static XLogRecPtr sentPtr = InvalidXLogRecPtr; <|endoftext|>"}
{"context": "#include \"utils/memutils.h\"\n\t\t\t\t\t\t QueryEnvironment *queryEnv,\nstatic uint64 PortalRunSelect(Portal portal, bool forward, long count,\n\t\t\t\t\t\t\t bool isTopLevel, bool setHoldSnapshot,\n\t\t\t\t\t\t\t   DestReceiver *dest);", "partial_line": "FreeQuery", "completion": "FreeQueryDesc(QueryDesc *qdesc) <|endoftext|>"}
{"context": "\t\telt = array_iter_next(&iter, &isnull, i, typlen, typbyval, typalign);\n\t\telse\n\t\t\tlocfcinfo->args[1].value = Int64GetDatum(seed);\n\tbool\t\tresult = matchall;\n\tint\t\t\tj;", "partial_line": "nelems2 = a", "completion": "nelems2 = array2->xpn.nelems; <|endoftext|>"}
{"context": "\t\t\t\topts->cparams.username = pg_strdup(optarg);\n\t\t\t\tpg_logging_increase_verbosity();\n\t\t\tcase 'W':\n\t\t\tcase '1':\t\t\t\n\t\t\tcase 2:\t\t\t\t", "partial_line": "simple_string_li", "completion": "simple_string_list_append(&db_exclude_patterns, optarg); <|endoftext|>"}
{"context": "\t\tcase 1:\n\t\t\t\t\t  FunctionCallInfo fcinfo)\n{\n\tint\t\t\tnumAFormats;\n\t}", "partial_line": "errmsg(\"function call message contains %d argu", "completion": "errmsg(\"function call message contains %d argument formats but %d arguments\", <|endoftext|>"}
{"context": "static int r_norm(struct SN_env * z);\nstatic const symbol s_0_0[2] = { 0xC5, 0x9F };\n{ 2, s_0_1, -1, 2, 0}\nstatic const symbol s_2_1[5] = { 'a', 0xC8, 0x9B, 'i', 'a' };\nstatic const symbol s_2_6[3] = { 'i', 'l', 'e' };", "partial_line": "static const symbol s_2_8[3] = { '", "completion": "static const symbol s_2_8[3] = { 'i', 'e', 'i' }; <|endoftext|>"}
{"context": "\t\t\"SET default_statistics_target=10; RESET vacuum_cost_delay;\",\n\t\tPQfinish(conn);\n\t\t\t\t \"no-index-cleanup\", \"12\");\n\t}\n\t{", "partial_line": "pg_fatal(\"cannot use the \\\"%s\\\" option on", "completion": "pg_fatal(\"cannot use the \\\"%s\\\" option on server versions older than PostgreSQL %s\", <|endoftext|>"}
{"context": "\tforeach(lc, ec->ec_members)\n\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t prev_em->em_datatype,\n\t\t\t{\n\t\t\t\tec->ec_broken = true;", "partial_line": "f", "completion": "false); <|endoftext|>"}
{"context": "\t\treturn 1;\n\t\tresult = 0;\ntext_position_setup(text *t1, text *t2, Oid collid, TextPositionState *state)\n\t\tstate->is_multibyte_char_in_char = false;\n\t\tstate->is_multibyte_char_in_char = false;", "partial_line": "state->le", "completion": "state->len2 = len2; <|endoftext|>"}
{"context": "{ 3, s_6_36, -1, 1, 0},\n{ 4, s_6_38, -1, 1, 0},\n{ 4, s_6_49, 47, 1, 0},\n{ 5, s_6_61, 58, 1, 0},\n{ 5, s_6_69, 58, 1, 0},", "partial_line": "{ 5,", "completion": "{ 5, s_6_70, 58, 1, 0}, <|endoftext|>"}
{"context": "#include \"postgres.h\"\n\tif (!nspName)\n\t\t\t\t errmsg(\"schema \\\"%s\\\" already exists\", nspName)));\n\tif (!isTemp)", "partial_line": "Invalid", "completion": "InvalidOid); <|endoftext|>"}
{"context": "\t\t\t\t(errcode(ERRCODE_ACTIVE_SQL_TRANSACTION),\n\tCheckTransactionBlock(isTopLevel, true, stmtType);\n{\n\tif (IsTransactionBlock())\n}", "partial_line": "re", "completion": "return true; <|endoftext|>"}
{"context": "\t\twrite_stderr(_(\"%s: PID file \\\"%s\\\" does not exist\\n\"), progname, pid_file);\n\t}\n\t\twrite_stderr(_(\"%s: could not create promote signal file \\\"%s\\\": %m\\n\"),\n\t\texit(1);\n\t\tif (unlink(promote_file) != 0)", "partial_line": "exit", "completion": "exit(1); <|endoftext|>"}
{"context": "\t\t\tresult += bmw_rightmost_one_pos(w);\n\tAssert(result >= 0);\nint\n{\n\t{", "partial_line": "result +=", "completion": "result += bmw_popcount(w); <|endoftext|>"}
{"context": "Datum\n{\n{\n}\nDatum", "partial_line": "Dat", "completion": "Datum <|endoftext|>"}
{"context": "}\n\tstate->sumX -= newval;\n\tstate->N--;\n\tPolyNumAggState *state;\n\t\tdo_numeric_accum(state, int64_to_numeric(PG_GETARG_INT16(1)));", "partial_line": "if (sta", "completion": "if (state == NULL) <|endoftext|>"}
{"context": "\t\tdb_encoding_convert(encoding, &worklconv.mon_decimal_point);\n\t\tdb_encoding_convert(encoding, &worklconv.positive_sign);\n\t}\n\tCurrentLocaleConv = worklconv;\n#ifdef WIN32", "partial_line": "static si", "completion": "static size_t <|endoftext|>"}
{"context": "\t\t\ttag = CMDTAG_ALTER_ROLE;\n\t\t\tbreak;\n\t\tcase T_ConstraintsSetStmt:\n\t\tcase T_CheckPointStmt:\n\t\t\tbreak;", "partial_line": "tag = CMDTAG_ALTER_TEX", "completion": "tag = CMDTAG_ALTER_TEXT_SEARCH_CONFIGURATION; <|endoftext|>"}
{"context": "\t\t0xB8C3149D, 0xCF5BB68E, 0x56F351BA, 0x216BF3A9,\n\t\t0x780B06C4, 0x0F93A4D7, 0x963B43E3, 0xE1A3E1F0,\n\t\t0x1AA4DE9E, 0x64369F3B, 0x17F6B1D1, 0x6964F074,\n\t\t0x4377278B, 0x3DE5662E, 0x4E2548C4, 0x30B70961,\n\t\t0xC90A85FB, 0xB798C45E, 0xC458EAB4, 0xBACAAB11,", "partial_line": "0x0C34D4C", "completion": "0x0C34D4C3, 0x72A69566, 0x0166BB8C, 0x7FF4FA29, <|endoftext|>"}
{"context": "\tint\t\t\tcount = 0;\n\t\tWaitEventAdjustKqueueAddLatch(&k_ev[count++], event);\n\t\t\tWaitEventAdjustKqueueAdd(&k_ev[count++], EVFILT_READ, EV_DELETE,\n\t\telse if (!old_filt_read && new_filt_read)\n\t\treturn;", "partial_line": "set->report_postmaster_not_ru", "completion": "set->report_postmaster_not_running = true; <|endoftext|>"}
{"context": "\tif (ArchiveRecoveryRequested && ControlFile->wal_level == WAL_LEVEL_MINIMAL)\nvoid\n{\n\tXLogCtlInsert *Insert;\n\t\t\t\t errmsg(\"control file contains invalid checkpoint location\")));", "partial_line": "case", "completion": "case DB_SHUTDOWNED: <|endoftext|>"}
{"context": "\t\t}\n\tAssert((flags & (PVC_INCLUDE_PLACEHOLDERS | PVC_RECURSE_PLACEHOLDERS))\n\tif (IsA(node, Var))\n\t\treturn false;\n\t}", "partial_line": "if (cont", "completion": "if (context->flags & PVC_INCLUDE_AGGREGATES) <|endoftext|>"}
{"context": "            }\n        case 2:\n    z->lb = z->c; z->c = z->l;\n    lab0:\n        z->c = z->l - m1;", "partial_line": "if (ret <", "completion": "if (ret < 0) return ret; <|endoftext|>"}
{"context": "\t\t\t\t\tscratch.opcode = EEOP_JUMP_IF_NOT_NULL;\n\t\t\t{\n\t\t\t\t\t\t\t\t\tformat_type_be(minmaxexpr->minmaxtype))));\n\t\t\t\tInitFunctionCallInfoData(*fcinfo, finfo, 2,\n\t\t\t\t\t(Datum *) palloc(sizeof(Datum) * nelems);", "partial_line": "&scratch.d.m", "completion": "&scratch.d.minmax.nulls[off]); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   &numfks,\n\t\t\t\t\t\t\t\t   confkey,\n\t\t\t\t\t\t\t\t   conffeqop,\n\t\tfkconstraint = makeNode(Constraint);\n\t\tfkconstraint->location = -1;", "partial_line": "fkconstrai", "completion": "fkconstraint->fk_del_action = constrForm->confdeltype; <|endoftext|>"}
{"context": "{\n\tif (v->cflags & REG_QUOTE)\n\tif (HAVE(4) && NEXT3('*', '*', '*'))\n\t\tswitch (*(v->now + 3))\n\t\t\t\tv->now += 4;", "partial_line": "re", "completion": "return; <|endoftext|>"}
{"context": "static const symbol s_11_162[6] = { 'n', 0xC3, 0xA4, 'h', 't', 'i' };\nstatic const symbol s_11_165[6] = { 'p', 0xC3, 0xB5, 'e', 'k', 's' };\nstatic const symbol s_11_172[6] = { 'p', 0xC3, 0xB5, 'e', 't', 'e' };\nstatic const symbol s_11_183[8] = { 's', 'a', 'a', 'k', 's', 'i', 't', 'e' };\nstatic const symbol s_11_190[3] = { 's', 'a', 'i' };", "partial_line": "static const symbol s_11_191", "completion": "static const symbol s_11_191[4] = { 's', 'a', 'i', 'd' }; <|endoftext|>"}
{"context": "\t\tAssert(!found);\n\t}\n\tif (TransactionIdFollowsOrEquals(xid, TransamVariables->xidVacLimit))\n\t\tTransactionId xidWarnLimit = TransamVariables->xidWarnLimit;\n\t\tif (IsUnderPostmaster && (xid % 65536) == 0)", "partial_line": "ereport", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tvalues[i] = OidInputFunctionCall(typinput, value, typioparam, -1);\n\tAssert(i >= 0 && i < MAXATTR);\n\tRelation\trel;\n\t\t\tstruct typmap *app = lfirst(lc);\n\t\t\t\treturn app->am_oid;", "partial_line": "populate_typ", "completion": "populate_typ_list(); <|endoftext|>"}
{"context": "\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OBJECT_AMOP:\n\t\t\t\t\tcase OBJECT_DEFACL:\n\t\t\t\t\tcase OBJECT_ROLE:", "partial_line": "case OBJECT_TSTE", "completion": "case OBJECT_TSTEMPLATE: <|endoftext|>"}
{"context": "\t\tPostgresPollingStatusType status = PQconnectPoll(conn);\n\t\t\t const void *buf, size_t buf_len)\n\tif (pqPutnchar(buf, buf_len, conn))\n\t\treturn STATUS_ERROR;\n#ifdef USE_LDAP", "partial_line": "static", "completion": "static int <|endoftext|>"}
{"context": "\tAlterIndexNamespaces(classRel, rel, oldNspOid, nspOid, objsMoved);\n\t\t\t\t\t   objsMoved, AccessExclusiveLock);\n\talready_done = object_address_present(&thisobj, objsMoved);\n\t\t\t\t NameStr(classForm->relname));\n\tindexList = RelationGetIndexList(rel);", "partial_line": "while (Hea", "completion": "while (HeapTupleIsValid(tup = systable_getnext(scan))) <|endoftext|>"}
{"context": "\t\t\telse\n\t}\n\tif ((reqs & REQ_DATA) != 0)\n\t\t\t\t\t_selectOutputSchema(AH, te->namespace);\n\t\t\t\t\tpg_log_info(\"processing data for table \\\"%s.%s\\\"\",", "partial_line": "te->", "completion": "te->namespace, te->tag); <|endoftext|>"}
{"context": "\tif (TransactionIdPrecedes(xid, RecentXmin))\n\t\t}\n\t}\n\tLWLockRelease(ProcArrayLock);\n\th->catalog_oldest_nonremovable = InvalidTransactionId;", "partial_line": "LWLockAcquire(ProcAr", "completion": "LWLockAcquire(ProcArrayLock, LW_SHARED); <|endoftext|>"}
{"context": "\telse if (*s == LDELIM)\n\t\tcp = (s + 1);\n\t\t\tdepth++, s = cp;\n\t\t\ts++;\n\t\tereturn(escontext, (Datum) 0,", "partial_line": "(errcode(ERRCODE_INVALID_TEXT_RE", "completion": "(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION), <|endoftext|>"}
{"context": "}\n}\n\tdump_ind();\n\tprintf(\"%s\", stmt->is_exit ? \"EXIT\" : \"CONTINUE\");\n{", "partial_line": "printf(\"variable %d\", stmt", "completion": "printf(\"variable %d\", stmt->retvarno); <|endoftext|>"}
{"context": "\t{\n\t\t\tINSTR_TIME_SET_ZERO(io_start);\n\t\t}\n\t\twpos += bytestowrite;\n\t\tnthistime = file->nbytes - file->pos;", "partial_line": "Asse", "completion": "Assert(nthistime > 0); <|endoftext|>"}
{"context": "}\n{\n\tstreamer = palloc0(sizeof(astreamer_extractor));\n\t\t\t\t\t\t\tconst char *data, int len,\n\t\t\t\t\t\t\tastreamer_archive_context context)", "partial_line": "astreamer_extractor", "completion": "astreamer_extractor *mystreamer = (astreamer_extractor *) streamer; <|endoftext|>"}
{"context": "\tget_string_attr(exc, \"constraint_name\", constraint_name);\n\t\tnext = strchr(s + 1, '\\n');\n\tif (next == NULL)\n\tPyErr_SetString(exc, buf);\nPLy_exception_set_plural(PyObject *exc,", "partial_line": "va_", "completion": "va_list\t\tap; <|endoftext|>"}
{"context": "\t\tctl.entrysize = sizeof(TypeCacheEntry);\n\t\tCacheRegisterRelcacheCallback(TypeCacheRelCallback, (Datum) 0);\n\t\tCacheRegisterSyscacheCallback(TYPEOID, TypeCacheTypCallback, (Datum) 0);\n\t\tin_progress_list = repalloc(in_progress_list,\n\tin_progress_list[in_progress_offset] = type_id;", "partial_line": "tp = Search", "completion": "tp = SearchSysCache1(TYPEOID, ObjectIdGetDatum(type_id)); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t &op->d.nulltest_row.rowcache, NULL);\n\t\t}\n\t*op->resvalue = BoolGetDatum(true);\n\tArrayType  *result;\n\t\t\t\t\t\t\t\t\top->d.arrayexpr.elembyval,", "partial_line": "op->d", "completion": "op->d.arrayexpr.elemalign); <|endoftext|>"}
{"context": "#line 65 \"array.pgc\"\n\tECPGt_char,(text),(long)25,(long)1,(25)*sizeof(char), \n#line 80 \"array.pgc\"\n\tf=140787;\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ", "partial_line": "ECPGt_timestamp,&(ts),(long)", "completion": "ECPGt_timestamp,&(ts),(long)1,(long)10,sizeof(timestamp), <|endoftext|>"}
{"context": "\tQueryItem  *item = GETQUERY(query);\n\t}\n\t\t\thladdword(prs, lexs->lemm, lexs->lenlemm, lexs->type);\n\t\tsavedpos = prs->vectorpos;\n\t\t{", "partial_line": "if (ptr->flags", "completion": "if (ptr->flags & TSL_ADDPOS) <|endoftext|>"}
{"context": "            if (in_grouping_U(z, g_v, 97, 250, 0)) goto lab2;\n                if (out_grouping_U(z, g_v, 97, 250, 0)) goto lab4;\n                    int ret = out_grouping_U(z, g_v, 97, 250, 1);\n            lab4:\n                    int ret = in_grouping_U(z, g_v, 97, 250, 1);", "partial_line": "if (re", "completion": "if (ret < 0) goto lab2; <|endoftext|>"}
{"context": "\t\t\tonechr(v, v->nextvalue, lp, rp);\n\t\t\t{\n\t\t\t\tif ((size_t) subno >= v->nsubs)\n\t\t\telse\n\t\t\t\tatomtype = PLAIN;\t", "partial_line": "if (", "completion": "if (cap) <|endoftext|>"}
{"context": "}\nstatic void\n\tprintf(\"\\n\");\n\tdump_indent += 2;\n\t\tprintf(\"    INTO%s target = %d %s\\n\",", "partial_line": "du", "completion": "dump_ind(); <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\tdata->publications = NIL;\n\t}\n\tOutputPluginWrite(ctx, true);", "partial_line": "bool\t\tse", "completion": "bool\t\tsent_begin_txn; <|endoftext|>"}
{"context": "static const symbol s_5_8[3] = { 'i', 'v', 'a' };\nstatic const symbol s_5_12[5] = { 'm', 'e', 'n', 't', 'e' };\nstatic const symbol s_5_22[6] = { 'a', 0xC3, 0xA7, 'a', '~', 'o' };\nstatic const symbol s_5_25[4] = { 'i', 'c', 'a', 's' };\nstatic const symbol s_5_37[7] = { 'a', 0xC3, 0xA7, 'o', '~', 'e', 's' };", "partial_line": "static const sym", "completion": "static const symbol s_5_44[4] = { 'i', 'v', 'o', 's' }; <|endoftext|>"}
{"context": "\t\treport_result(tc, ok, testname, details,\n\t}\n\t\tbool\t\tok = true;\n\t\t\tok = false;\n\t\ttest_psql_parse(tc, testname,", "partial_line": "escape_buf, de", "completion": "escape_buf, details); <|endoftext|>"}
{"context": "\t\t\t\treturn result;\nstatic PruneStepResult *\n\tPartitionBoundInfo boundinfo = context->boundinfo;\n\t\tresult->scan_default = partition_bound_has_default(boundinfo);\n\tminoff = 0;", "partial_line": "minof", "completion": "minoff++; <|endoftext|>"}
{"context": "\t\t\tchecksum_type = CHECKSUM_TYPE_NONE;\n\tpg_checksum_init(&checksum_ctx, checksum_type);\n\t{\n\tfor (i = 0; i < n_source; ++i)\n\t\t\tpg_log_debug(\"read %u blocks from \\\"%s\\\"\",", "partial_line": "if (s->relative_block_numbers", "completion": "if (s->relative_block_numbers[i] >= block_length) <|endoftext|>"}
{"context": "repairTableConstraintLoop(DumpableObject *tableobj,\n\t\t\t\t\t\t  DumpableObject *constraintobj)\n{\n\taddObjectDependency(attrdefobj, tableobj->dumpId);\n}", "partial_line": "DumpableObject", "completion": "DumpableObject *constraintobj) <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#include <stdlib.h>\n{\n\tsize_t\t\tlen;\n\treturn wbstate->len;", "partial_line": "pg_wchar\tlower = unicode_low", "completion": "pg_wchar\tlower = unicode_lowercase_simple(code); <|endoftext|>"}
{"context": "static const symbol s_13[] = { 0xC3, 0xB3, 'i', 'd' };\n            int ret = out_grouping_U(z, g_v, 97, 250, 1);\n            if (ret < 0) goto lab0;\n        z->I[0] = z->c;\nstatic int r_initial_morph(struct SN_env * z) {", "partial_line": "z->bra =", "completion": "z->bra = z->c; <|endoftext|>"}
{"context": "#include \"utils/lsyscache.h\"\n\t\t\t\t\t\t\t\t\t\t int relid, int ojrelid);\nstatic void remove_rel_from_eclass(EquivalenceClass *ec,\nstatic bool rel_supports_distinctness(PlannerInfo *root, RelOptInfo *rel);\nstatic Oid\tdistinct_col_search(int colno, List *colnos, List *opids);", "partial_line": "Relids outerr", "completion": "Relids outerrelids, <|endoftext|>"}
{"context": "}\n\tList\t   *parts1 = NIL;\n\tAssert(joinrel->consider_partitionwise_join);\n\tif (joinrel->partbounds_merged)\n\t}", "partial_line": "for (cnt_par", "completion": "for (cnt_parts = 0; cnt_parts < joinrel->nparts; cnt_parts++) <|endoftext|>"}
{"context": "{ 3, s_7_3, -1, 1, 0},\n{ 3, s_7_7, -1, 1, 0},\n{ 5, s_7_17, 16, 1, 0},\n{ 5, s_7_18, 16, 1, 0},\n{ 5, s_7_22, 20, 1, 0},", "partial_line": "{ 4, s_7_29,", "completion": "{ 4, s_7_29, -1, 1, 0}, <|endoftext|>"}
{"context": "\t\tstatsextinfo[i].stattable =\n\t\t\tfindTableByOid(atooid(PQgetvalue(res, i, i_stxrelid)));\n\t\t\tstatsextinfo[i].stattarget = atoi(PQgetvalue(res, i, i_stattarget));\n\tPQExpBuffer tbloids = createPQExpBuffer();\n\t\tif (!(tinfo->dobj.dump & DUMP_COMPONENT_DEFINITION))", "partial_line": "appendP", "completion": "appendPQExpBufferChar(tbloids, ','); <|endoftext|>"}
{"context": "\tchar\t   *typlen;\n\tchar\t   *typispreferred;\n\tchar\t   *typalign;\n\t\t\t\t\t\t\t \"typmodout::pg_catalog.oid AS typmodoutoid, \"\n\t\t\t\t\t  \"EXECUTE dumpBaseType('%u')\",", "partial_line": "typreceive = PQgetvalue(res, 0, PQfnu", "completion": "typreceive = PQgetvalue(res, 0, PQfnumber(res, \"typreceive\")); <|endoftext|>"}
{"context": "\t\t\t\tMUTATE(newnode->arg, ctest->arg, Expr *);\n\t\t\t{\n\t\t\t}\n\t\t\t\treturn (Node *) newnode;\n\t\t\t}", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t}\n}\n\t\tlookup[i].frequency = numbers[i];\n\tif (item->type == QI_VAL)\n\t\telse", "partial_line": "return (Selectivity) DEFA", "completion": "return (Selectivity) DEFAULT_TS_MATCH_SEL; <|endoftext|>"}
{"context": "}\n{\n{\n\t\treturn;\n\t\t\tdclist_container(PgStat_PendingDroppedStatsItem, node, iter.cur);", "partial_line": "xl_xact_stats_it", "completion": "xl_xact_stats_item *it = &pending->item; <|endoftext|>"}
{"context": "\t\t\t\tif (rinfo->parent_ec)\n\t\tif (jointype == JOIN_SEMI || jointype == JOIN_ANTI)\n\t\t\t\tif (ec && ec->ec_has_const)\n\t\t\t\t\tRestrictInfo *rinfo = find_derived_clause_for_ec_member(root,\n\t\t\t\t\t\t\t\t\t\t\t\tsjinfo);", "partial_line": "*restrictl", "completion": "*restrictlist = worklist; <|endoftext|>"}
{"context": "\t\tif (hash_search(pendingNotifies->hashtab,\n\t\t\t\tn->payload_len == oldn->payload_len &&\n\t\t\t\treturn true;\n{\n\t\thash_ctl.match = notification_match;", "partial_line": "pendingNotifies->h", "completion": "pendingNotifies->hashtab = <|endoftext|>"}
{"context": "\tBackgroundWorkerHandle *mqh_handle;\n\tbool\t\tmqh_length_word_complete;\nstatic shm_mq_result shm_mq_send_bytes(shm_mq_handle *mqh, Size nbytes,", "partial_line": "void **", "completion": "void **datap); <|endoftext|>"}
{"context": "\t\t\t\trelation->rd_att->compact_attrs[attnum - 1].attnullability =\n\t\tcheck[found].ccenforced = conform->conenforced;\n\t\tif (isnull)\n\t\t\tchar\t   *s = TextDatumGetCString(val);\nstatic int", "partial_line": "L", "completion": "List * <|endoftext|>"}
{"context": "\t\telse\n\t\t\tif (cptr != ptr)\n\t\t\tcptr++;\n\t\t}\n\t}", "partial_line": "cptr->lexeme", "completion": "cptr->lexeme = NULL; <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\topt_border = 3;\n\t\tfputs(\"\\\\begin{tabular}{\", fout);\n\t\t\tfputs(\"| \", fout);\n\t\t{", "partial_line": "if (op", "completion": "if (opt_border >= 2) <|endoftext|>"}
{"context": "\t\t{\"host\", required_argument, NULL, 'h'},\n\t\t{\"table-attr\", required_argument, NULL, 'T'},\n\t\t{\"no-psqlrc\", no_argument, NULL, 'X'},\n\t\t{\"help\", optional_argument, NULL, 1},\n\tmemset(options, 0, sizeof *options);", "partial_line": "c", "completion": "case 'a': <|endoftext|>"}
{"context": "} SharedTypmodTableEntry;\n{\n\tdsa_area   *area = (dsa_area *) arg;\n\tSharedRecordTableKey *k1 = (SharedRecordTableKey *) a;\n\tTupleDesc\tt1;", "partial_line": "SharedRecordTableKey *k = (Shar", "completion": "SharedRecordTableKey *k = (SharedRecordTableKey *) a; <|endoftext|>"}
{"context": "            }\n    {   int m_test1 = z->l - z->c;\n                {   int ret = slice_from_s(z, 4, s_13);\n                    if (ret < 0) return ret;\n                }", "partial_line": "{   int ret = s", "completion": "{   int ret = slice_from_s(z, 2, s_16); <|endoftext|>"}
{"context": "\treadLen = 0;\n\tif (!InArchiveRecovery)\n\t\tif (lastSourceFailed)\n\t\t\t\treturn XLREAD_WOULDBLOCK;\n\t\t\t\t\t}", "partial_line": "currentSource", "completion": "currentSource = XLOG_FROM_STREAM; <|endoftext|>"}
{"context": "\t\tpg_regfree(&cpattern);\n\t}\n\t\t\t\tregex_t *result_re)\n\tpg_wchar   *pattern;\n\tint\t\t\tregcomp_result;", "partial_line": "pat", "completion": "pattern, <|endoftext|>"}
{"context": "#include \"utils/timestamp.h\"\nstatic BackupState *backup_state = NULL;\nstatic MemoryContext backupcontext = NULL;\npg_backup_start(PG_FUNCTION_ARGS)\n\tif (backupcontext == NULL)", "partial_line": "backupconte", "completion": "backupcontext = AllocSetContextCreate(TopMemoryContext, <|endoftext|>"}
{"context": "}\nint\n\t\tif (validate_exec(retpath) == 0)\n\t\t\t\t  _(\"invalid binary \\\"%s\\\": %m\"), retpath);\n\t\treturn -1;", "partial_line": "if ((path = ge", "completion": "if ((path = getenv(\"PATH\")) && *path) <|endoftext|>"}
{"context": "                if (ret < 0) return ret;\n            }\n        case 109:\n                if (ret < 0) return ret;\n            {   int ret = slice_from_s(z, 2, s_241);", "partial_line": "c", "completion": "case 119: <|endoftext|>"}
{"context": "PerformPortalClose(const char *name)\n\t\t\t\t(errcode(ERRCODE_INVALID_CURSOR_NAME),\n\t\t\t\t errmsg(\"invalid cursor name: must not be empty\")));\n\t{\n{", "partial_line": "if (quer", "completion": "if (queryDesc) <|endoftext|>"}
{"context": "\t\tresult = query_tree_walker((Query *) node,\n\t\t\t\t\t\t\t\t   sublevels_up,\nlocate_var_of_level(Node *node, int levelsup)\n\tcontext.var_location = -1;\t\n\t\t\t\t\t\t\t\t\t\t   0);", "partial_line": "locate_var_of_level_conte", "completion": "locate_var_of_level_context *context) <|endoftext|>"}
{"context": "\t\tcalled = entry->is_called;\n\t\t\t\t\t  last, (called ? \"true\" : \"false\"));\nstatic void\n\tif (!dopt->dumpSchema)\n\t\tAssert(tbinfo->ispartition);", "partial_line": "appendPQExpBuffer(", "completion": "appendPQExpBuffer(query, \"\\nALTER %sTABLE %s \", <|endoftext|>"}
{"context": "\t\t\t\tneed_qual = true;\n\t\tif (need_qual)\n\telse\n\t\telog(ERROR, \"cache lookup failed for relation %u\", relid);\n\trelname = NameStr(reltup->relname);", "partial_line": "char", "completion": "char\t   *result; <|endoftext|>"}
{"context": "\t\txl_xact_abort *xlrec = (xl_xact_abort *) XLogRecGetData(record);\n\t\treturn false;\n\t\t\tstopsHere = (recordXtime >= recoveryTargetTime);\n\t\trecoveryStopLSN = InvalidXLogRecPtr;\n\t\t{", "partial_line": "uint8", "completion": "uint8\t\tinfo; <|endoftext|>"}
{"context": "\t\t{\n\t\t\tOid\t\t\tchildrelid = lfirst_oid(lo);\n\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t errmsg(\"cannot alter inherited column \\\"%s\\\" of relation \\\"%s\\\"\",\n\t\t\t\t\t\t\t\tcolName, RelationGetRelationName(childrel))));", "partial_line": "cmd = copyObj", "completion": "cmd = copyObject(cmd); <|endoftext|>"}
{"context": "\t\tif (!superuser())\n\t\t\t\taclcheck_error_type(ACLCHECK_NOT_OWNER, typTup->oid);\n\t}\n\tRelation\trel;\n\tif (!HeapTupleIsValid(tup))", "partial_line": "HeapTup", "completion": "HeapTuple\ttup; <|endoftext|>"}
{"context": "                    if (ret < 0) return ret;\n                break;\n        break;\n    }\n}", "partial_line": "if (ret == 0) go", "completion": "if (ret == 0) goto lab0; <|endoftext|>"}
{"context": "\t\t\taction = BLK_NEEDS_REDO;\n\t\t\tMarkBufferDirty(buffer);\n\t\tif (PageAddItem(page, (Item) prefixTuple, prefixTupleHdr.size,\n\t\t\t\t\t\txldata->offnumPrefix, false, false) != xldata->offnumPrefix)\n\t\tif (xldata->postfixBlkSame)", "partial_line": "xldata->o", "completion": "xldata->offnumPostfix); <|endoftext|>"}
{"context": "\t\t\telse\n\t\t\t\tcheck_errno();\n\t\t\t}\n\t\t\t\tprintf(\"num[s,%d,%d]: %s\\n\", i, j, text);\n\t\t\t}", "partial_line": "r = PGTYPESnum", "completion": "r = PGTYPESnumeric_div(numarr[i], numarr[j], d); <|endoftext|>"}
{"context": "\t\t\t\ts++;\n\t\t\t{\n\t\t\t\tflag[1] = '\\0';\n\t\tif ((!suffixes) && (!prefixes))\nnextline:", "partial_line": "pfre", "completion": "pfree(pstr); <|endoftext|>"}
{"context": "#include \"access/genam.h\"\n#include \"access/nbtree.h\"\n#include \"catalog/pg_type.h\"\n#include \"commands/defrem.h\"\n#include \"parser/parse_func.h\"", "partial_line": "#include \"parser/pars", "completion": "#include \"parser/parse_type.h\" <|endoftext|>"}
{"context": "{ 6, s_2_496, 492, 94, 0},\n{ 4, s_2_501, 466, 45, 0},\n{ 4, s_2_505, -1, 85, 0},\n{ 3, s_2_515, -1, 104, 0},\n{ 5, s_2_516, 515, 128, 0},", "partial_line": "{ 4, s_2_525,", "completion": "{ 4, s_2_525, 515, 113, 0}, <|endoftext|>"}
{"context": "#include \"catalog/dependency.h\"\n#include \"catalog/pg_collation.h\"", "partial_line": "#include \"catalo", "completion": "#include \"catalog/pg_namespace.h\" <|endoftext|>"}
{"context": "extern int french_UTF_8_stem(struct SN_env * z);\nstatic int r_residual_suffix(struct SN_env * z);\nstatic int r_RV(struct SN_env * z);", "partial_line": "static int r_pre", "completion": "static int r_prelude(struct SN_env * z); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t   commit_data.commit_lsn);\n\t\t\tif (pa_send_data(winfo, s->len, s->data))\n\t\t\t\t\t\t\t\t\t\t &original_msg);\n\t\t\tpa_set_xact_state(MyParallelShared, PARALLEL_TRANS_FINISHED);\n\t{", "partial_line": "replorigin_session_origin_lsn =", "completion": "replorigin_session_origin_lsn = commit_data->end_lsn; <|endoftext|>"}
{"context": "\t{\n\t\t\t\tscan_locations->head->prev = item;\n{\n\tif (startloc >= relnblocks)\n\t\telog(LOG,", "partial_line": "\"SYNC_SC", "completion": "\"SYNC_SCAN: start \\\"%s\\\" (size %u) at %u\", <|endoftext|>"}
{"context": "{\nnumeric_typmod_scale(int32 typmod)\n\tint\t\t\tnumeric_digits;\n\t\t\treturn pstrdup(\"Infinity\");\nchar *", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t{\n\t\t\t\t\t\t\t\t \",\\n     LATERAL (WITH RECURSIVE d\\n\"\n\t\t{\n\t\t}\n\tappendPQExpBufferStr(&buf, !showNested && !pattern ?", "partial_line": "appendPQExpBufferStr(&buf, \"      AND n", "completion": "appendPQExpBufferStr(&buf, \"      AND n.nspname <> 'pg_catalog'\\n\" <|endoftext|>"}
{"context": "#include \"utils/timestamp.h\"\n\tif (failed)\n\t\tstats_shmem->stats.last_failed_timestamp = now;\n\telse", "partial_line": "memcpy(&stats_shmem-", "completion": "memcpy(&stats_shmem->stats.last_archived_wal, xlog, <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t\t\tPointerGetDatum(&in),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tleafValue,\n\tin->orderbys = so->orderByData;\n\tin->norderbys = so->numberOfNonNullOrderBys;\n\tin->hasPrefix = (innerTuple->prefixSize > 0);", "partial_line": "spgInnerConsistent", "completion": "spgInnerConsistentOut *out, int i, bool isnull, <|endoftext|>"}
{"context": "\t\t\tbreak;\n\t\tcase T_Aggref:\n\t\t\t\tif (LIST_WALK(expr->aggorder))\n\t\t\t\t\treturn true;\n\t\t\t\t\treturn true;", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "void\n\t\toldext = getExtensionOfObject(object->classId, object->objectId);\ndeleteDependencyRecordsFor(Oid classId, Oid objectId,\n\tdepRel = table_open(DependRelationId, RowExclusiveLock);\n\tScanKeyInit(&key[0],", "partial_line": "Objec", "completion": "ObjectIdGetDatum(classId)); <|endoftext|>"}
{"context": "static const symbol s_0_7[3] = { 'e', 'n', 'e' };\n{ 5, s_0_1, 0, 1, 0},\n{ 5, s_0_14, 13, 1, 0},\n{ 5, s_0_19, 18, 1, 0},\n{ 3, s_0_28, 16, 1, 0},", "partial_line": "{ 4, s", "completion": "{ 4, s_0_31, 30, 1, 0} <|endoftext|>"}
{"context": "\t\t\tresult = NUMERIC_ABBREV_PINF;\n\t{\n\treturn result;\nnumeric_abbrev_abort(int memtupcount, SortSupport ssup)\n{", "partial_line": "if (abbr_", "completion": "if (abbr_card < nss->input_count / 10000.0 + 0.5) <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t}\n\t\tswitch (rel->rtekind)\n\t\t\t\t}\n\t\t\tcase RTE_CTE:", "partial_line": "elog(ERROR, \"unexpected rtekind: %", "completion": "elog(ERROR, \"unexpected rtekind: %d\", (int) rel->rtekind); <|endoftext|>"}
{"context": "\t\t\tsnprintf(sqlca->sqlerrm.sqlerrmc, sizeof(sqlca->sqlerrm.sqlerrmc),\n\t\t\tbreak;\n\t\t\t\t\t\t ecpg_gettext(\"invalid syntax for type boolean: \\\"%s\\\", on line %d\"), str, line);\n\t\t\tsnprintf(sqlca->sqlerrm.sqlerrmc, sizeof(sqlca->sqlerrm.sqlerrmc),\n\t\tcase ECPG_ARRAY_INSERT:", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t},\n\t{\n\t\t\"default acl\", OBJECT_DEFACL\n\t},\n\t{", "partial_line": "\"subscription\", OBJECT_S", "completion": "\"subscription\", OBJECT_SUBSCRIPTION <|endoftext|>"}
{"context": "\ttrigrel = table_open(TriggerRelationId, RowExclusiveLock);\n\t\tAttrNumber\tmapped_conkey[INDEX_MAX_KEYS];\n\t\tOid\t\t\tconppeqop[INDEX_MAX_KEYS];\n\t\tint\t\t\tnumfkdelsetcols;\n\t\tObjectAddress address;", "partial_line": "boo", "completion": "bool\t\twith_period; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t\t ExecGetUpdatedCols(resultRelInfo, estate));\n\t{\n{\n\tTupleDesc\ttupdesc = RelationGetDescr(rel);\n\t\tmodifiedCols = bms_union(ExecGetInsertedCols(resultRelInfo, estate),", "partial_line": "modif", "completion": "modifiedCols, <|endoftext|>"}
{"context": "\t\t\t const char *msg, const char *more, int column)\n\tif (more != NULL)\n\t{\n\t\t{\ncreate_sql_command(PQExpBuffer buf, const char *source)", "partial_line": "if (p =", "completion": "if (p == NULL) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t  sub->passwordrequired && !sub->ownersuperuser);\n\t\t\t\tupdate_tuple = true;\n\t\t\t\t\tif (sub->twophasestate == LOGICALREP_TWOPHASE_STATE_ENABLED && opts.copy_data)\n\t\t\t\t\t\t\t\t\t\t isadd ?\n\t\t\t\t\t\t\t\t(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),", "partial_line": "if", "completion": "if (!sub->enabled) <|endoftext|>"}
{"context": "\t\thresult = (LocalBufferLookupEnt *)\n\t\t\tpg_atomic_unlocked_write_u32(&existing_hdr->state, buf_state);\n\t\t}\n\t\t\tuint32\t\tbuf_state = pg_atomic_read_u32(&victim_buf_hdr->state);\n\t\t\tAssert(!(buf_state & (BM_VALID | BM_TAG_VALID | BM_DIRTY | BM_JUST_DIRTIED)));", "partial_line": "#ifde", "completion": "#ifdef LBDEBUG <|endoftext|>"}
{"context": "\t}\n\t\trowbuf = (PGdataValue *) realloc(rowbuf,\n\t\t\terrmsg = NULL;\t\t\n\t\t}\n\t\tif (pqGetInt(&vlen, 4, conn))", "partial_line": "goto advanc", "completion": "goto advance_and_error; <|endoftext|>"}
{"context": "\t\t}\n\t\t}\n\tAttrNumber\tnextresno = 1;\n\t\tTargetEntry *new_tle = NULL;\n\t\t\t}", "partial_line": "if (!att_tup-", "completion": "if (!att_tup->attisdropped) <|endoftext|>"}
{"context": "\tscan = systable_beginscan(pg_shseclabel, SharedSecLabelObjectIndexId, true,\n\tif (HeapTupleIsValid(oldtup))\n\t\t\t\t\t\t\t\t values, nulls);\n\tbool\t\treplaces[Natts_pg_seclabel];\n\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,", "partial_line": "ObjectIdGetDatum(object-", "completion": "ObjectIdGetDatum(object->classId)); <|endoftext|>"}
{"context": "static Node *\n\t\t\t\t parser_errposition(pstate, pref->location)));\n\tparam->paramkind = PARAM_EXTERN;\n\tparam->paramid = paramno;\nvariable_coerce_param_hook(ParseState *pstate, Param *param,", "partial_line": "Oid targetTypeI", "completion": "Oid targetTypeId, int32 targetTypeMod, <|endoftext|>"}
{"context": "\t{\n\t\tif (!ExecQual(wcoExpr, econtext))\n\t\t\t\t\tif (resultRelInfo->ri_RootResultRelInfo)\n\t\t\t\t\t\t\t\t\t\t\t\t ExecGetUpdatedCols(resultRelInfo, estate));\n\t\t\t\t\t\t\t\t\t\twco->relname)));", "partial_line": "wco-", "completion": "wco->relname))); <|endoftext|>"}
{"context": "\t\t\t\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t\"that cannot accept type record\")));\n\t\t\t}\n\t\t\t\tdomain_check(ret, false, typid, NULL, NULL);\n\tOid\t\t\ttypid;", "partial_line": "check", "completion": "check_spi_usage_allowed(); <|endoftext|>"}
{"context": "\t\t\trt->orderbyvals[i] = datumCopy(orderbyvals[i],\n\t}\n\t{\nstatic TupleTableSlot *\n\tIndexScanState *node = castNode(IndexScanState, pstate);", "partial_line": "if (node->iss_NumRu", "completion": "if (node->iss_NumRuntimeKeys != 0 && !node->iss_RuntimeKeysReady) <|endoftext|>"}
{"context": "\t\t\t\tforeach(lc2, fc->args)\n\t\t\t\t\tnewfc = makeFuncCall(SystemFuncName(\"unnest\"),\n\t\t\t\t\t\tpstate->p_last_srf != newfexpr)\n\t\t\t\t}\n\t\t\tereport(ERROR,", "partial_line": "parser_errposit", "completion": "parser_errposition(pstate, <|endoftext|>"}
{"context": "\t\tereport(ERROR,\n\t\t\t\t\t\t\t\t\t  true);\n\t}\n\tAssert(myTempNamespaceSubID == InvalidSubTransactionId);\nvoid", "partial_line": "if", "completion": "if (isCommit) <|endoftext|>"}
{"context": "\tuint16\t\tinfo;\t\t\t\n\tchar\t   *data;\n\tStateFileChunk *head;\t\t\n\t\trecords.num_chunks++;\n\tmemcpy(((char *) records.tail->data) + records.tail->len, data, len);", "partial_line": "StartPrepare(G", "completion": "StartPrepare(GlobalTransaction gxact) <|endoftext|>"}
{"context": "\t}\n{\n\t\t\t\ttitle;\n\tprintQueryOpt myopt = pset.popt;\n\t\t\t\t\t  \"    WHERE t.tokid = m.maptokentype ) AS \\\"%s\\\",\\n\"", "partial_line": "\"FROM pg_catalog.pg_t", "completion": "\"FROM pg_catalog.pg_ts_config AS c, pg_catalog.pg_ts_config_map AS m\\n\" <|endoftext|>"}
{"context": "\tPG_RETURN_BOOL(result);\n\tmylocale = pg_newlocale_from_collation(collid);\n\t\t\tresult = true;\n\tPG_RETURN_BOOL(cmp > 0);\nDatum", "partial_line": "BpChar\t   *arg1 = PG_GET", "completion": "BpChar\t   *arg1 = PG_GETARG_BPCHAR_PP(0); <|endoftext|>"}
{"context": "\tsegment_map->header->size = total_size;\n\tsegment_map->header->prev = DSA_SEGMENT_INDEX_NONE;\n\t\tnext->header->prev = new_index;\n\treturn segment_map;\n\tfreed_segment_counter = area->control->freed_segment_counter;", "partial_line": "freed_segment_counter =", "completion": "freed_segment_counter = area->control->freed_segment_counter; <|endoftext|>"}
{"context": "\t\t\tPQconnectionNeedsPassword(conn) &&\n\t\t\tpassword = simple_prompt(\"Password: \", false);\n\t\t\tfree(values);\n\t\t\t\t remoteversion_str);\n\t\t*server_version = server_version_temp;", "partial_line": "(server_version_temp / 10", "completion": "(server_version_temp / 100) > (my_version / 100))) <|endoftext|>"}
{"context": "\t\t\tDUMP_COMPONENT_ALL : DUMP_COMPONENT_NONE;\n\t\tcast->dobj.dump = DUMP_COMPONENT_NONE;\n\t\tcast->dobj.dump = fout->dopt->include_everything ?\nstatic void\n\t\treturn;\t\t\t\t\t", "partial_line": "DUMP_COMPONENT_NONE", "completion": "DUMP_COMPONENT_NONE : DUMP_COMPONENT_ACL; <|endoftext|>"}
{"context": "\t\telse\n\t\tsource += source_len;\n\t\telse\n\t\t\ttbytes = 1;\n\t\t{", "partial_line": "if (pg_encoding_max_length(encodi", "completion": "if (pg_encoding_max_length(encoding) > 1 && *data > 127) <|endoftext|>"}
{"context": "\tcase 014:\t\t\n\t\tdump_line();\n\t\t\t*e_com++ = ' ', *e_com++ = '*', *e_com++ = ' ';\n\t\tif (!ps.box_com && star_comment_cont)\n\t    else {", "partial_line": "fi", "completion": "fill_buffer(); <|endoftext|>"}
{"context": "                        if (ret == 0) { z->c = z->l - m7; goto lab11; }\n                }\n                ;\n                if (ret < 0) return ret;\n    lab0:", "partial_line": "{   i", "completion": "{   int c11 = z->c; <|endoftext|>"}
{"context": "\t\t}\n\telse\n\t\t\tdefault:\n\t{\n}", "partial_line": "SetVariable(pset.vars, \"", "completion": "SetVariable(pset.vars, \"ERROR\", \"false\"); <|endoftext|>"}
{"context": "#include \"access/reloptions.h\"\n#include \"miscadmin.h\"\n#include \"utils/spccache.h\"", "partial_line": "Oid", "completion": "Oid\t\t\toid; <|endoftext|>"}
{"context": "\tECPGt_sqlda, &inp_sqlda, 0L, 0L, 0L, \n#line 184 \"sqlda.pgc\"\n\tfree(outp_sqlda);\n\t{ ECPGconnect(__LINE__, 1, \"ecpg1_regression\" , NULL, NULL , \"con2\", 0); \nif (sqlca.sqlcode < 0) exit (1);}", "partial_line": "printf(\"", "completion": "printf(\"EXECUTE RECORD 4\\n\"); <|endoftext|>"}
{"context": "\tinitStringInfo(buf);\npq_endtypsend(StringInfo buf)\n{\n\tAssert(buf->len >= VARHDRSZ);\nvoid", "partial_line": "pq_puttex", "completion": "pq_puttextmessage(char msgtype, const char *str) <|endoftext|>"}
{"context": "\t\t\t sortopt & TUPLESORT_RANDOMACCESS ? 't' : 'f');\n\tbase->nKeys = 1;\t\t\t\n\tint\t\t\ti;\n\tif (trace_sort)\n\t\t\t \"begin index sort: workMem = %d, randomAccess = %c\",", "partial_line": "sortopt & TUPLESORT_RANDOMACCESS", "completion": "sortopt & TUPLESORT_RANDOMACCESS ? 't' : 'f'); <|endoftext|>"}
{"context": "#undef listen\n#undef connect\n\t\tcase WSANOTINITIALISED:", "partial_line": "case WSAEDESTA", "completion": "case WSAEDESTADDRREQ: <|endoftext|>"}
{"context": "\t\tfputs(\".DE\\n\", fout);\n}\nvoid\nFILE *\n{", "partial_line": "#ifdef TIOC", "completion": "#ifdef TIOCGWINSZ <|endoftext|>"}
{"context": "\t\t\tres = PSQLexec((successResult != EXIT_SUCCESS && pset.on_error_stop) ?\n\t\t\tif (res == NULL)\n\t\t\t}\n\t\t\t\tPQclear(res);\nerror:", "partial_line": "connection", "completion": "connection_warnings(true); <|endoftext|>"}
{"context": "\t\t\tfcinfo->isnull = false;\ndouble\nhistogram_selectivity(VariableStatData *vardata,\n\t\t\t\t\t  int min_hist_size, int n_skip,\n\t\t\t\t\t  int *hist_size)", "partial_line": "ATTSTATSSLOT_V", "completion": "ATTSTATSSLOT_VALUES)) <|endoftext|>"}
{"context": "\t}\n\t\t\t\tOffsetNumber firstrightoff,\n\t\t\t\t\t\t   !newitemonleft);\n\tif (state->is_leaf)\n\t\tleftfree -= (int16) (firstrightsz +", "partial_line": "if (n", "completion": "if (newitemonleft) <|endoftext|>"}
{"context": "\t}\n\tobjcxt = AllocSetContextCreate(parentcontext,\n\tmemset(erh, 0, sizeof(ExpandedRecordHeader));\n\terh->nfields = tupdesc->natts;\n\t{", "partial_line": "erh->e", "completion": "erh->er_mcb.arg = erh; <|endoftext|>"}
{"context": "\t\tcollator_all_rules = ucol_openRules(all_rules, u_strlen(all_rules),\n\t\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\treturn collator_all_rules;\nsize_t\n\t\t\t pg_locale_t locale)", "partial_line": "len_conv = icu_convert_case(u_strToTitle_d", "completion": "len_conv = icu_convert_case(u_strToTitle_default_BI, locale, <|endoftext|>"}
{"context": "static const symbol s_2_1690[7] = { 'l', 'u', 0xC4, 0x8D, 'e', 'n', 'o' };\nstatic const symbol s_2_1695[5] = { 'i', 'k', 'a', 't', 'o' };\nstatic const symbol s_2_1712[5] = { 0xC5, 0xA1, 't', 'v', 'o' };\nstatic const symbol s_2_1725[7] = { 'o', 's', 't', 'a', 'd', 'e', 's' };\nstatic const symbol s_2_1771[6] = { 'l', 'u', 0xC4, 0x8D, 'i', 't' };", "partial_line": "static const", "completion": "static const symbol s_2_1775[6] = { 'i', 's', 't', 'a', 'd', 'u' }; <|endoftext|>"}
{"context": "\tpredicate = ExecPrepareQual(indexInfo->ii_Predicate, estate);\n\tpgstat_progress_update_param(PROGRESS_SCAN_BLOCKS_TOTAL,\n\t\t}\n\t\t{\n\t\t}", "partial_line": "ereport(", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\t\t\tgoto next;\n\t\tif (!predicate_implied_by(predExprs, (List *) onconflict->arbiterWhere, false))\n\t\tindex_close(idxRel, NoLock);\n\t\t\t\t errmsg(\"there is no unique or exclusion constraint matching the ON CONFLICT specification\")));\ninfer_collation_opclass_match(InferenceElem *elem, Relation idxRel,", "partial_line": "if (el", "completion": "if (elem->inferopclass) <|endoftext|>"}
{"context": "#line 34 \"test_informix.pgc\"\n\tECPGt_int,&(i),(long)1,(long)1,sizeof(int), \n\t{ ECPGtrans(__LINE__, NULL, \"rollback\");\n#line 41 \"test_informix.pgc\"\n\t{ ECPGdo(__LINE__, 1, 1, NULL, 0, ECPGst_normal, \"select i from test where j = ( select j from test order by i limit 1 )\", ECPGt_EOIT, ECPGt_EORT);", "partial_line": "#line", "completion": "#line 46 \"test_informix.pgc\" <|endoftext|>"}
{"context": "#include \"pgtypes_interval.h\"\nstatic void\n\tint\t\t\textra_days;\n\tif (frac == 0)\n\ttm->tm_mday += extra_days;", "partial_line": "ParseISO8601Number(const char *str, char **end", "completion": "ParseISO8601Number(const char *str, char **endptr, int *ipart, double *fpart) <|endoftext|>"}
{"context": "#include \"postgres_fe.h\"\n#include \"common.h\"", "partial_line": "{NULL,", "completion": "{NULL, 0, NULL, 0} <|endoftext|>"}
{"context": "\t\t  *s == '_' ||\n\t\t{\n\t\t\ts++;\n\t\t\tereturn(escontext, NULL,\n\t\t\t\t\t errmsg(\"identifier too long\"),", "partial_line": "bool\t\tsafe", "completion": "bool\t\tsafe = true; <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  RoleMembershipCacheCallback,\n\t\tCacheRegisterSyscacheCallback(DATABASEOID,\n\t}\n\t\t\t\t   Oid admin_of, Oid *admin_role)\n\tListCell   *l;", "partial_line": "Assert(OidI", "completion": "Assert(OidIsValid(admin_of) == PointerIsValid(admin_role)); <|endoftext|>"}
{"context": "\telse\n\t\tMyProc = dlist_container(PGPROC, links, dlist_pop_head_node(procgloballist));\n\t}\n\t\tereport(FATAL,\n\tMyProc->vxid.procNumber = MyProcNumber;", "partial_line": "MyProc->roleId =", "completion": "MyProc->roleId = InvalidOid; <|endoftext|>"}
{"context": "{\n\tint\t\t\trtoffset;\n{\nstatic Plan *set_plan_refs(PlannerInfo *root, Plan *plan, int rtoffset);\nstatic Plan *set_indexonlyscan_references(PlannerInfo *root,", "partial_line": "int rto", "completion": "int rtoffset); <|endoftext|>"}
{"context": "\t\t\tfillJsonbValue((*it)->container, (*it)->curIndex,\n\t\t\tif (!IsAJsonbScalar(val) && !skipNested)\n\t\t\t(*it)->curValueOffset = getJsonbOffset((*it)->container,\n\t\t\t\t\t\t\t   (*it)->dataProper, (*it)->curDataOffset,\n\t\tcase JBI_OBJECT_VALUE:", "partial_line": "(*it)->", "completion": "(*it)->curIndex++; <|endoftext|>"}
{"context": "\tevtOid = evtForm->oid;\n\trel = table_open(EventTriggerRelationId, RowExclusiveLock);\n\theap_freetuple(tup);\n}\n\tif (form->evtowner == newOwnerId)", "partial_line": "errmsg(\"permission denied to change owner of e", "completion": "errmsg(\"permission denied to change owner of event trigger \\\"%s\\\"\", <|endoftext|>"}
{"context": "\tchar\t   *issuer;\n\t\t\t\tend_offset;\n\t{\n\t\tlibpq_append_conn_error(conn,\n\t}", "partial_line": "if (!wk_s", "completion": "if (!wk_start) <|endoftext|>"}
{"context": "\t\t\t\t\t  client_proof_len) != state->key_length)\n\t\t\t\t(errcode(ERRCODE_PROTOCOL_VIOLATION),\n\tpfree(client_proof);\n\tif (*p != '\\0')\n\t\tereport(ERROR,", "partial_line": "if (pg_hmac_init(ct", "completion": "if (pg_hmac_init(ctx, state->ServerKey, state->key_length) < 0 || <|endoftext|>"}
{"context": "\tStrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);\n\tbool\t   *recheck = (bool *) PG_GETARG_POINTER(4);\n\t\t\t\t\t\t\t\t\t\t\t\t strategy));\n\t\tb->low.x = addon->low.x;\n\t\t\t\ti;", "partial_line": "memcpy(pageuni", "completion": "memcpy(pageunion, cur, sizeof(BOX)); <|endoftext|>"}
{"context": "Datum\n{\n\t\ttypid = typTup->typbasetype;\n\tOid\t\t\tcollid;\n\t\t\t\t(errcode(ERRCODE_DATATYPE_MISMATCH),", "partial_line": "PG_RETURN_INT32(relation_is_up", "completion": "PG_RETURN_INT32(relation_is_updatable(reloid, NIL, include_triggers, NULL)); <|endoftext|>"}
{"context": "\t\t\t\t}\n\t\t\tobjectname = rte->ctename;\n\t}\n\t\tExplainPropertyText(\"Alias\", refname, es);\n\tModifyTable *node = (ModifyTable *) mtstate->ps.plan;", "partial_line": "cas", "completion": "case CMD_UPDATE: <|endoftext|>"}
{"context": "\tTupleTableSlot *oldslot;\n\t\t&&CASE_EEOP_INNER_VAR,\n\t\t&&CASE_EEOP_ASSIGN_INNER_VAR,\n\t\t&&CASE_EEOP_ASSIGN_NEW_VAR,\n\t\t&&CASE_EEOP_ASSIGN_TMP,", "partial_line": "&&CASE_EEOP_FUNCEX", "completion": "&&CASE_EEOP_FUNCEXPR_STRICT_1, <|endoftext|>"}
{"context": "\tif (oldctrl->walsz == 0 || oldctrl->walsz != newctrl->walsz)\n\t\tpg_fatal(\"old and new pg_controldata maximum identifier lengths are invalid or do not match\");\n\tif (oldctrl->toast == 0 || oldctrl->toast != newctrl->toast)\n\t\tpg_fatal(\"old cluster does not use data checksums but the new one does\");\n\t\tpg_fatal(\"old and new cluster pg_controldata checksum versions do not match\");", "partial_line": "snprintf(old_path, sizeof(old_path", "completion": "snprintf(old_path, sizeof(old_path), \"%s/%s\", old_cluster.pgdata, XLOG_CONTROL_FILE); <|endoftext|>"}
{"context": "\t\t\t\t\t  int name_location)\n\tpathspec->string = makeStringConst(string, string_location);\n\tif (name != NULL)\n\tpathspec->name_location = name_location;\n{", "partial_line": "JsonTablePath *path = makeNode(J", "completion": "JsonTablePath *path = makeNode(JsonTablePath); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tsrb_flags);\n\t\tReleaseBuffer(bufs[i]);\n\tbuf = pr.recent_buffer;\n\t\t{\n\t\t\t\telog(ERROR, \"couldn't evict\");", "partial_line": "Da", "completion": "Datum <|endoftext|>"}
{"context": "\t\t}\nestimate_rel_size(Relation rel, int32 *attr_widths,\n\tdouble\t\tdensity;\n\t\t\t*allvisfrac = 0;\nget_rel_data_width(Relation rel, int32 *attr_widths)", "partial_line": "Form_pg_attribute att = TupleDescAttr(re", "completion": "Form_pg_attribute att = TupleDescAttr(rel->rd_att, i - 1); <|endoftext|>"}
{"context": "\t\t\t\tb;\n{\n}\n\tresult->high.x = float8_min(box1->high.x, box2->high.x);\n\tPG_RETURN_BOX_P(result);", "partial_line": "box_diago", "completion": "box_diagonal(PG_FUNCTION_ARGS) <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t  XLTW_Update);\n\t\t}\n\t\tUnlockTuple(relation, &oldtup.t_self, InplaceUpdateTupleLock);\n\treturn ret;\n\toldlen = oldtup->t_len - htup->t_hoff;", "partial_line": "if (oldlen !", "completion": "if (oldlen != newlen || htup->t_hoff != tuple->t_data->t_hoff) <|endoftext|>"}
{"context": "\t\tsupported = true;\n#ifdef USE_LZ4\n\t\treturn psprintf(_(\"this build does not support compression with %s\"),\nCompressorState *\nvoid", "partial_line": "InitCompressFileHandle(const", "completion": "InitCompressFileHandle(const pg_compress_specification compression_spec) <|endoftext|>"}
{"context": "\t\t\t\t\terrmsg(\"table \\\"%s\\\" being attached contains an identity column \\\"%s\\\"\",\n\t\t\t\t errmsg(\"trigger \\\"%s\\\" prevents table \\\"%s\\\" from becoming a partition\",\n\t\t\t\t\t\ttrigger_name, RelationGetRelationName(attachrel)),\n\tStorePartitionBound(attachrel, rel, cmd->bound);\n\tpartConstraint = list_concat_copy(partBoundConstraint,", "partial_line": "partConstra", "completion": "partConstraint = <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\tfalse,\t\n\t\t\t\t\t\t\t\tsortopt & TUPLESORT_RANDOMACCESS,\n\tbase->writetup = writetup_datum;\n\tbase->haveDatum1 = true;\n\tbase->sortKeys = (SortSupport) palloc0(sizeof(SortSupportData));", "partial_line": "base->sortKeys->ssu", "completion": "base->sortKeys->ssup_cxt = CurrentMemoryContext; <|endoftext|>"}
{"context": "\tif (dotcnt > 1)\n\t{\n\tif (dbbuf.data[0])\nstatic void\n\t{", "partial_line": "info->db_regex", "completion": "info->db_regex = pstrdup(dbbuf.data); <|endoftext|>"}
{"context": "static const symbol s_2_1191[7] = { 0xC5, 0xA1, 'k', 'i', 'j', 'o', 'j' };\nstatic const symbol s_2_1210[4] = { 'a', 'l', 'o', 'j' };\nstatic const symbol s_2_1212[3] = { 'n', 'o', 'j' };\nstatic const symbol s_2_1234[2] = { 'e', 'l' };\nstatic const symbol s_2_1245[5] = { 'a', 0xC4, 0x8D, 'a', 'm' };", "partial_line": "static const symbol s_2_1252", "completion": "static const symbol s_2_1252[7] = { 'o', 's', 't', 'a', 'd', 'e', 'm' }; <|endoftext|>"}
{"context": "\tif (wagg->ordNumCols > 0)\n\t\tchar\t   *framestr;\n}\n\t\t\t\t int nkeys, AttrNumber *keycols,\n\t\tAttrNumber\tkeyresno = keycols[keyno];", "partial_line": "if (key", "completion": "if (keyno > 0) <|endoftext|>"}
{"context": "static const unsigned char g_v[] = { 17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 52, 14 };\nstatic const symbol s_1[] = { 'e' };\nstatic const symbol s_6[] = { 'a' };\nstatic const symbol s_7[] = { 'e' };\nstatic const symbol s_10[] = { 'a' };", "partial_line": "static const s", "completion": "static const symbol s_11[] = { 'e' }; <|endoftext|>"}
{"context": "\t\treturn false;\n\t*rightsib_empty = (P_FIRSTDATAKEY(opaque) > PageGetMaxOffsetNumber(page));\n\t{\n\t\tpage = BufferGetPage(rbuf);\n\t\t\tmetapg = BufferGetPage(metabuf);", "partial_line": "metad = BTPageGetMeta", "completion": "metad = BTPageGetMeta(metapg); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\t\t\t  extra);\n\t\t\t\t\t\t\t\t  joinrel,\n\t\tif (save_jointype == JOIN_UNIQUE_OUTER)\n\t\tsave_jointype != JOIN_RIGHT_ANTI &&\n\t{", "partial_line": "JoinPathExtraData", "completion": "JoinPathExtraData *extra, <|endoftext|>"}
{"context": "#include \"access/amvalidate.h\"\n\tHeapTuple\tclasstup;\n\tForm_pg_opclass classform;", "partial_line": "Form_pg_amproc procform = (Form_pg_am", "completion": "Form_pg_amproc procform = (Form_pg_amproc) GETSTRUCT(proctup); <|endoftext|>"}
{"context": "\t\t}\n\t\tOpFamilyOpFuncGroup *thisgroup = (OpFamilyOpFuncGroup *) lfirst(lc);\n\t\t\t(opclassgroup->functionset & (((uint64) 1) << i)) != 0)\n\t\tereport(INFO,\n\treturn result;", "partial_line": "foreac", "completion": "foreach(lc, operators) <|endoftext|>"}
{"context": "\t\t\t\t\tMemoryContext col_context)\n\t\t\t\told_context;\n\tDatum\t\tvalues[INDEX_MAX_KEYS];\n\tbool\t\tisnull[INDEX_MAX_KEYS];\n\t\t\t\t\t\t\t\t\t\tALLOCSET_DEFAULT_SIZES);", "partial_line": "old_context =", "completion": "old_context = MemoryContextSwitchTo(ind_context); <|endoftext|>"}
{"context": "#include \"utils/syscache.h\"\n\tbool\t\tnulls[Natts_pg_cast] = {0};\n\tObjectAddress myself,\n\ttuple = heap_form_tuple(RelationGetDescr(relation), values, nulls);\n\taddrs = new_object_addresses();", "partial_line": "ObjectAddressSet(myself,", "completion": "ObjectAddressSet(myself, CastRelationId, castid); <|endoftext|>"}
{"context": "#include \"common/int.h\"\n\tsize_t\t\tslen1 = strlen(str1);\nstatic void", "partial_line": "state->", "completion": "state->totaltups += PQntuples(res); <|endoftext|>"}
{"context": "\t\tif (fdw_trigtuple == NULL && ItemPointerIsValid(tupleid))\n\t\t\t\t\t\t\t  TRIGGER_EVENT_UPDATE,\n\t\t\t\t\t\t\t  transition_capture,\n\t\tTrigger    *trigger = &trigdesc->triggers[i];\n\t\t\t\t\t\t\t\t  TRIGGER_TYPE_UPDATE))", "partial_line": "if (!TriggerEn", "completion": "if (!TriggerEnabled(estate, relinfo, trigger, LocTriggerData.tg_event, <|endoftext|>"}
{"context": "\t\t\tereport(ERROR,\n\t\tScanKeyInit(&key[0],\n\t\t\t\t\tAnum_pg_shdepend_refclassid,\n\t\t\t\t\tBTEqualStrategyNumber, F_OIDEQ,\n\t\t{", "partial_line": "b", "completion": "break; <|endoftext|>"}
{"context": "\t}\n}\n\t\tcase BIO_CTRL_EOF:\n}\n\t\tmy_bio_index = BIO_get_new_index();", "partial_line": "if (my_bi", "completion": "if (my_bio_index == -1) <|endoftext|>"}
{"context": "gtsvectorin(PG_FUNCTION_ARGS)\n\t\t\t(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n\tint32\t\ta = *((const int32 *) va);\nmakesign(BITVECP sign, SignTSVector *a, int siglen)\n{", "partial_line": "int\t\t\tsize = C", "completion": "int\t\t\tsize = CALCGTSIZE(flag, len); <|endoftext|>"}
{"context": "\tOid\t\t\tcollationNeeded;\n\ttransformContainerType(&containerType, &containerTypMod);\n\t\t\t\t\t\t\t\t\t\t targetName,\n\t\t\t\t\t\t\t\t\t\t collationNeeded,\n\t\t\t\t\t\t\t\t\t\t rhs,", "partial_line": "cconte", "completion": "ccontext, <|endoftext|>"}
{"context": "\t\t{\"USAGE\", ACL_USAGE},\nhas_server_privilege_name_name(PG_FUNCTION_ARGS)\n\tmode = convert_server_priv_string(priv_type_text);\n\tOid\t\t\troleid;\n\tbool\t\tis_missing = false;", "partial_line": "if (is_mi", "completion": "if (is_missing) <|endoftext|>"}
{"context": "\t\tswitch (option)\n\t\t{\n\t\t\t\tfilename = pg_strdup(optarg);\n\t\t\t\terrno = 0;\n\t\t\t\t\texit(1);", "partial_line": "brea", "completion": "break; <|endoftext|>"}
{"context": "\t\t\t\t  \"could not set token information: error code %lu\",\n\t\tgoto cleanup;\n\t}\n\tif (pTokenUser)\n\tif (ptdd)", "partial_line": "LocalFr", "completion": "LocalFree((HLOCAL) ptdd); <|endoftext|>"}
{"context": "\t\t\t\t\t\t\tRelationGetRelationName(rel)),\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_WRONG_OBJECT_TYPE),\n\t\t\t\t\t\t\tRelationGetRelationName(rel)),\n\telse", "partial_line": "ereport(E", "completion": "ereport(ERROR, <|endoftext|>"}
{"context": "\tslot_getallattrs(slot);\n\t\t}\n\t\t}\n\t\ttyptup = SearchSysCache1(TYPEOID, ObjectIdGetDatum(att->atttypid));\n\t\tif (!HeapTupleIsValid(typtup))", "partial_line": "elog(ERROR, \"cache", "completion": "elog(ERROR, \"cache lookup failed for type %u\", att->atttypid); <|endoftext|>"}
{"context": "\t\treturn jointlist;\nstatic List *\n\tList\t   *result = NIL;\n\t\t\tcontinue;\n\t\t\t}", "partial_line": "indlist = build_paths_f", "completion": "indlist = build_paths_for_OR(root, rel, <|endoftext|>"}
{"context": "\t\tDirectFunctionCall1(namein, CStringGetDatum(stmt->fdwname));\n\tvalues[Anum_pg_foreign_data_wrapper_fdwhandler - 1] = ObjectIdGetDatum(fdwhandler);\n\telse\n\tCatalogTupleInsert(rel, tuple);\n\t\treferenced.classId = ProcedureRelationId;", "partial_line": "AlterForeignDataWrapper(ParseState *pstate,", "completion": "AlterForeignDataWrapper(ParseState *pstate, AlterFdwStmt *stmt) <|endoftext|>"}
{"context": "\t\t\tnp->hdr.nused += btp->hdr.nused;\n\t\t}\n\t\treturn;\n\t}\n{", "partial_line": "first_page = FreePageBtree", "completion": "first_page = FreePageBtreeFirstKey(p); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n}\n\t\t\t   Buffer parentBuffer, OffsetNumber downlink,\n\tPage\t\tparentPage = BufferGetPage(parentBuffer);\n\tXLogRecPtr\trecptr;", "partial_line": "return", "completion": "return false; <|endoftext|>"}
{"context": "\telse\n\tif (action != 'N')\n\treturn relid;\n\t\t\t\t\t\tBitmapset *columns,\n\tlogicalrep_write_tuple(out, rel, oldslot, binary, columns,", "partial_line": "elog(ERROR, \"expected action 'O' or 'K',", "completion": "elog(ERROR, \"expected action 'O' or 'K', got %c\", action); <|endoftext|>"}
{"context": "\t\t\t\tbreak;\n\t\t\tcase T_AlterFunctionStmt:\t\n\t\t\tcase T_AlterSeqStmt:\n\t\t\t\tEventTriggerInhibitCommandCollection();\n\t\t\t\tbreak;", "partial_line": "case T_Crea", "completion": "case T_CreatePLangStmt: <|endoftext|>"}
{"context": "        z->c = z->l - m7;\n        z->c = z->l - m9;\n    }\n        }\n    {   int m12 = z->l - z->c; (void)m12;", "partial_line": "{   int m13 = z->l", "completion": "{   int m13 = z->l - z->c; (void)m13; <|endoftext|>"}
{"context": "\t{\n\t\tif (!pqParseProtocolVersion(conn->max_protocol_version, &conn->max_pversion, conn, \"max_protocol_version\"))\n\t}\n\treturn false;\n\tconnOptions = conninfo_init(&errorBuf);", "partial_line": "if (!connectOp", "completion": "if (!connectOptions1(conn, dbName)) <|endoftext|>"}
{"context": "\tPGShmemHeader *seghdr;\n\tdsm_postmaster_startup(shim);\nstatic void\nCreateOrAttachShmemStructs(void)\n{", "partial_line": "MultiX", "completion": "MultiXactShmemInit(); <|endoftext|>"}
{"context": "#ifdef SIGTRAP\n\tsigdelset(&StartupBlockSig, SIGILL);\n#endif", "partial_line": "#", "completion": "#endif <|endoftext|>"}
{"context": "\t\tbool\t\tispunct = pg_u_ispunct(code, false);\n\t\tbool\t\tisspace = pg_u_isspace(code);\n\t\t\t\t\t\t\t\t\t\t\t\t\t   UCHAR_POSIX_XDIGIT);\n\t\tbool\t\ticu_isprint = u_hasBinaryProperty(code,\n\t\t{", "partial_line": "pg_category != P", "completion": "pg_category != PG_U_UNASSIGNED && <|endoftext|>"}
{"context": "                            {   int ret = slice_from_s(z, 3, s_24);\n                        }\n                            if (ret < 0) return ret;\n                if (!(eq_s_b(z, 2, s_25))) { z->c = z->l - m8; goto lab11; }\n                    }", "partial_line": "goto", "completion": "goto lab12; <|endoftext|>"}
{"context": "\telog(ERROR, \"invalid hexadecimal digit\");\n{\n\ttext\t   *input_text = PG_GETARG_TEXT_PP(0);\n\t{\n\t\t{", "partial_line": "goto", "completion": "goto invalid_pair; <|endoftext|>"}
{"context": "\treturn n;\n}\n}\n{\n\tstruct guts *g;", "partial_line": "if (!", "completion": "if (!NULLCNFA(g->search)) <|endoftext|>"}
{"context": "\treturn finalPath;\nrecomputeNamespacePath(void)\n\t{\n\t\tpathChanged = true;\n\tactiveSearchPath = baseSearchPath;", "partial_line": "activeCreationNamespace", "completion": "activeCreationNamespace = baseCreationNamespace; <|endoftext|>"}
{"context": "\tif (checkProc->lockGroupLeader != NULL)\n\t\tif (visitedProcs[i] == checkProc)\n\t\t{\n\t\t}\n\t\t\t\t\t\t\t\t   nSoftEdges))", "partial_line": "FindLockCycleRecurseMember(memberProc, checkPr", "completion": "FindLockCycleRecurseMember(memberProc, checkProc, depth, softEdges, <|endoftext|>"}
